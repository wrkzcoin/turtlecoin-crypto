
var TurtleCoinCrypto = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  return (
function(TurtleCoinCrypto) {
  TurtleCoinCrypto = TurtleCoinCrypto || {};

var e;
e || (e = typeof TurtleCoinCrypto !== 'undefined' ? TurtleCoinCrypto : {});
var aa = {}, h;
for (h in e) {
  e.hasOwnProperty(h) && (aa[h] = e[h]);
}
function ba(a, b) {
  throw b;
}
var da = !1, l = !1, m = !1, ea = !1, fa = !1;
da = "object" === typeof window;
l = "function" === typeof importScripts;
m = (ea = "object" === typeof process && "object" === typeof process.versions && "string" === typeof process.versions.node) && !da && !l;
fa = !da && !m && !l;
"undefined" !== typeof navigator && "string" === typeof navigator.product && "reactnative" === navigator.product.toLowerCase() && (m = !0, l = da = !1);
if (e.ENVIRONMENT) {
  throw Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)");
}
var q = "", ha, ia, ja;
if (m) {
  q = __dirname + "/";
  var ka, la;
  ha = function(a, b) {
    var c = t(a);
    c || (ka || (ka = require("fs")), la || (la = require("path")), a = la.normalize(a), c = ka.readFileSync(a));
    return b ? c : c.toString();
  };
  ja = function(a) {
    a = ha(a, !0);
    a.buffer || (a = new Uint8Array(a));
    assert(a.buffer);
    return a;
  };
  1 < process.argv.length && process.argv[1].replace(/\\/g, "/");
  process.argv.slice(2);
  process.on("uncaughtException", function(a) {
    if (!(a instanceof ma)) {
      throw a;
    }
  });
  process.on("unhandledRejection", v);
  ba = function(a) {
    process.exit(a);
  };
  e.inspect = function() {
    return "[Emscripten Module object]";
  };
} else {
  if (fa) {
    "undefined" != typeof read && (ha = function(a) {
      var b = t(a);
      return b ? na(b) : read(a);
    }), ja = function(a) {
      var b;
      if (b = t(a)) {
        return b;
      }
      if ("function" === typeof readbuffer) {
        return new Uint8Array(readbuffer(a));
      }
      b = read(a, "binary");
      assert("object" === typeof b);
      return b;
    }, "function" === typeof quit && (ba = function(a) {
      quit(a);
    }), "undefined" !== typeof print && ("undefined" === typeof console && (console = {}), console.log = print, console.warn = console.error = "undefined" !== typeof printErr ? printErr : print);
  } else {
    if (da || l) {
      l ? q = self.location.href : document.currentScript && (q = document.currentScript.src), _scriptDir && (q = _scriptDir), 0 !== q.indexOf("blob:") ? q = q.substr(0, q.lastIndexOf("/") + 1) : q = "", ha = function(a) {
        try {
          var b = new XMLHttpRequest;
          b.open("GET", a, !1);
          b.send(null);
          return b.responseText;
        } catch (c) {
          if (a = t(a)) {
            return na(a);
          }
          throw c;
        }
      }, l && (ja = function(a) {
        try {
          var b = new XMLHttpRequest;
          b.open("GET", a, !1);
          b.responseType = "arraybuffer";
          b.send(null);
          return new Uint8Array(b.response);
        } catch (c) {
          if (a = t(a)) {
            return a;
          }
          throw c;
        }
      }), ia = function(a) {
        var b = w, c = oa, d = new XMLHttpRequest;
        d.open("GET", b, !0);
        d.responseType = "arraybuffer";
        d.onload = function() {
          if (200 == d.status || 0 == d.status && d.response) {
            c(d.response);
          } else {
            var f = t(b);
            f ? c(f.buffer) : a();
          }
        };
        d.onerror = a;
        d.send(null);
      };
    } else {
      throw Error("environment detection error");
    }
  }
}
var pa = e.print || console.log.bind(console), x = e.printErr || console.warn.bind(console);
for (h in aa) {
  aa.hasOwnProperty(h) && (e[h] = aa[h]);
}
aa = null;
Object.getOwnPropertyDescriptor(e, "arguments") || Object.defineProperty(e, "arguments", {get:function() {
  v("Module.arguments has been replaced with plain arguments_");
}});
Object.getOwnPropertyDescriptor(e, "thisProgram") || Object.defineProperty(e, "thisProgram", {get:function() {
  v("Module.thisProgram has been replaced with plain thisProgram");
}});
e.quit && (ba = e.quit);
Object.getOwnPropertyDescriptor(e, "quit") || Object.defineProperty(e, "quit", {get:function() {
  v("Module.quit has been replaced with plain quit_");
}});
assert("undefined" === typeof e.memoryInitializerPrefixURL, "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");
assert("undefined" === typeof e.pthreadMainPrefixURL, "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");
assert("undefined" === typeof e.cdInitializerPrefixURL, "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");
assert("undefined" === typeof e.filePackagePrefixURL, "Module.filePackagePrefixURL option was removed, use Module.locateFile instead");
assert("undefined" === typeof e.read, "Module.read option was removed (modify read_ in JS)");
assert("undefined" === typeof e.readAsync, "Module.readAsync option was removed (modify readAsync in JS)");
assert("undefined" === typeof e.readBinary, "Module.readBinary option was removed (modify readBinary in JS)");
assert("undefined" === typeof e.setWindowTitle, "Module.setWindowTitle option was removed (modify setWindowTitle in JS)");
Object.getOwnPropertyDescriptor(e, "read") || Object.defineProperty(e, "read", {get:function() {
  v("Module.read has been replaced with plain read_");
}});
Object.getOwnPropertyDescriptor(e, "readAsync") || Object.defineProperty(e, "readAsync", {get:function() {
  v("Module.readAsync has been replaced with plain readAsync");
}});
Object.getOwnPropertyDescriptor(e, "readBinary") || Object.defineProperty(e, "readBinary", {get:function() {
  v("Module.readBinary has been replaced with plain readBinary");
}});
qa = function() {
  v("cannot use the stack before compiled code is ready to run, and has provided stack access");
};
function ra(a) {
  sa || (sa = {});
  sa[a] || (sa[a] = 1, x(a));
}
var sa, ta = 0;
Object.getOwnPropertyDescriptor(e, "wasmBinary") || Object.defineProperty(e, "wasmBinary", {get:function() {
  v("Module.wasmBinary has been replaced with plain wasmBinary");
}});
var ua = !1;
function assert(a, b) {
  a || v("Assertion failed: " + b);
}
var va = "undefined" !== typeof TextDecoder ? new TextDecoder("utf8") : void 0;
function wa(a, b, c) {
  var d = b + c;
  for (c = b; a[c] && !(c >= d);) {
    ++c;
  }
  if (16 < c - b && a.subarray && va) {
    return va.decode(a.subarray(b, c));
  }
  for (d = ""; b < c;) {
    var f = a[b++];
    if (f & 128) {
      var g = a[b++] & 63;
      if (192 == (f & 224)) {
        d += String.fromCharCode((f & 31) << 6 | g);
      } else {
        var k = a[b++] & 63;
        224 == (f & 240) ? f = (f & 15) << 12 | g << 6 | k : (240 != (f & 248) && ra("Invalid UTF-8 leading byte 0x" + f.toString(16) + " encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!"), f = (f & 7) << 18 | g << 12 | k << 6 | a[b++] & 63);
        65536 > f ? d += String.fromCharCode(f) : (f -= 65536, d += String.fromCharCode(55296 | f >> 10, 56320 | f & 1023));
      }
    } else {
      d += String.fromCharCode(f);
    }
  }
  return d;
}
function xa(a) {
  return a ? wa(y, a, void 0) : "";
}
function ya(a, b, c, d) {
  if (!(0 < d)) {
    return 0;
  }
  var f = c;
  d = c + d - 1;
  for (var g = 0; g < a.length; ++g) {
    var k = a.charCodeAt(g);
    if (55296 <= k && 57343 >= k) {
      var n = a.charCodeAt(++g);
      k = 65536 + ((k & 1023) << 10) | n & 1023;
    }
    if (127 >= k) {
      if (c >= d) {
        break;
      }
      b[c++] = k;
    } else {
      if (2047 >= k) {
        if (c + 1 >= d) {
          break;
        }
        b[c++] = 192 | k >> 6;
      } else {
        if (65535 >= k) {
          if (c + 2 >= d) {
            break;
          }
          b[c++] = 224 | k >> 12;
        } else {
          if (c + 3 >= d) {
            break;
          }
          2097152 <= k && ra("Invalid Unicode code point 0x" + k.toString(16) + " encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).");
          b[c++] = 240 | k >> 18;
          b[c++] = 128 | k >> 12 & 63;
        }
        b[c++] = 128 | k >> 6 & 63;
      }
      b[c++] = 128 | k & 63;
    }
  }
  b[c] = 0;
  return c - f;
}
function za(a, b, c) {
  assert("number" == typeof c, "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
  ya(a, y, b, c);
}
function Aa(a) {
  for (var b = 0, c = 0; c < a.length; ++c) {
    var d = a.charCodeAt(c);
    55296 <= d && 57343 >= d && (d = 65536 + ((d & 1023) << 10) | a.charCodeAt(++c) & 1023);
    127 >= d ? ++b : b = 2047 >= d ? b + 2 : 65535 >= d ? b + 3 : b + 4;
  }
  return b;
}
"undefined" !== typeof TextDecoder && new TextDecoder("utf-16le");
var buffer, z, y, A, Ba, B, C, Ca, Da;
assert(!0, "stack must start aligned");
assert(!0, "heap must start aligned");
e.TOTAL_STACK && assert(5242880 === e.TOTAL_STACK, "the stack size can no longer be determined at runtime");
var Ea = e.TOTAL_MEMORY || 16777216;
Object.getOwnPropertyDescriptor(e, "TOTAL_MEMORY") || Object.defineProperty(e, "TOTAL_MEMORY", {get:function() {
  v("Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY");
}});
assert(5242880 <= Ea, "TOTAL_MEMORY should be larger than TOTAL_STACK, was " + Ea + "! (TOTAL_STACK=5242880)");
assert("undefined" !== typeof Int32Array && "undefined" !== typeof Float64Array && void 0 !== Int32Array.prototype.subarray && void 0 !== Int32Array.prototype.set, "JS engine does not provide full typed array support");
e.buffer ? buffer = e.buffer : buffer = new ArrayBuffer(Ea);
Ea = buffer.byteLength;
e.HEAP8 = z = new Int8Array(buffer);
e.HEAP16 = A = new Int16Array(buffer);
e.HEAP32 = B = new Int32Array(buffer);
e.HEAPU8 = y = new Uint8Array(buffer);
e.HEAPU16 = Ba = new Uint16Array(buffer);
e.HEAPU32 = C = new Uint32Array(buffer);
e.HEAPF32 = Ca = new Float32Array(buffer);
e.HEAPF64 = Da = new Float64Array(buffer);
B[144320] = 5820192;
function Fa() {
  var a = C[1455047], b = C[1455046];
  34821223 == a && 2310721022 == b || v("Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x" + b.toString(16) + " " + a.toString(16));
  1668509029 !== B[0] && v("Runtime error: The application has corrupted its heap memory area (address zero)!");
}
B[0] = 1668509029;
A[1] = 25459;
if (115 !== y[2] || 99 !== y[3]) {
  throw "Runtime error: expected the system to be little-endian!";
}
function E(a, b) {
  v("Invalid function pointer " + a + " called with signature '" + b + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}
function Ga(a) {
  for (; 0 < a.length;) {
    var b = a.shift();
    if ("function" == typeof b) {
      b();
    } else {
      var c = b.sa;
      "number" === typeof c ? void 0 === b.U ? e.dynCall_v(c) : e.dynCall_vi(c, b.U) : c(void 0 === b.U ? null : b.U);
    }
  }
}
var Ha = [], Ia = [], Ja = [], Ka = [], La = [], G = !1, H = !1;
function Ma() {
  var a = e.preRun.shift();
  Ha.unshift(a);
}
Math.imul && -5 === Math.imul(4294967295, 5) || (Math.imul = function(a, b) {
  var c = a & 65535, d = b & 65535;
  return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16) | 0;
});
Math.clz32 || (Math.clz32 = function(a) {
  var b = 32, c = a >> 16;
  c && (b -= 16, a = c);
  if (c = a >> 8) {
    b -= 8, a = c;
  }
  if (c = a >> 4) {
    b -= 4, a = c;
  }
  if (c = a >> 2) {
    b -= 2, a = c;
  }
  return a >> 1 ? b - 2 : b - a;
});
Math.trunc || (Math.trunc = function(a) {
  return 0 > a ? Math.ceil(a) : Math.floor(a);
});
var Na = Math.abs, Oa = Math.ceil, Pa = Math.floor, Qa = Math.min, I = 0, Ra = null, Sa = null, Ta = {};
function Ua() {
  I++;
  e.monitorRunDependencies && e.monitorRunDependencies(I);
  assert(!Ta["memory initializer"]);
  Ta["memory initializer"] = 1;
  null === Ra && "undefined" !== typeof setInterval && (Ra = setInterval(function() {
    if (ua) {
      clearInterval(Ra), Ra = null;
    } else {
      var a = !1, b;
      for (b in Ta) {
        a || (a = !0, x("still waiting on run dependencies:")), x("dependency: " + b);
      }
      a && x("(end of list)");
    }
  }, 10000));
}
e.preloadedImages = {};
e.preloadedAudios = {};
var w = null, Va = "data:application/octet-stream;base64,", Wa, Xa;
Ia.push({sa:function() {
  Ya();
}});
w = "data:application/octet-stream;base64,";
assert(!0);
function Za(a) {
  ra("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
  return a;
}
function $a(a) {
  return a.replace(/__Z[\w\d_]+/g, function(a) {
    var b = Za(a);
    return a === b ? a : b + " [" + a + "]";
  });
}
function ab() {
  var a = Error();
  if (!a.stack) {
    try {
      throw Error(0);
    } catch (b) {
      a = b;
    }
    if (!a.stack) {
      return "(no stack trace available)";
    }
  }
  return a.stack.toString();
}
function bb() {
  var a = ab();
  e.extraStackTrace && (a += "\n" + e.extraStackTrace());
  return $a(a);
}
var cb = {}, db = [];
function eb(a) {
  a && cb[a].S++;
}
function fb(a) {
  if (!a || cb[a]) {
    return a;
  }
  for (var b in cb) {
    for (var c = +b, d = cb[c].Aa, f = d.length, g = 0; g < f; g++) {
      if (d[g] === a) {
        return c;
      }
    }
  }
  return a;
}
function gb(a, b) {
  ra("atexit() called, but EXIT_RUNTIME is not set, so atexits() will not be called. set EXIT_RUNTIME to 1 (see the FAQ)");
  Ka.unshift({sa:a, U:b});
}
function hb(a, b) {
  for (var c = 0, d = a.length - 1; 0 <= d; d--) {
    var f = a[d];
    "." === f ? a.splice(d, 1) : ".." === f ? (a.splice(d, 1), c++) : c && (a.splice(d, 1), c--);
  }
  if (b) {
    for (; c; c--) {
      a.unshift("..");
    }
  }
  return a;
}
function ib(a) {
  var b = "/" === a.charAt(0), c = "/" === a.substr(-1);
  (a = hb(a.split("/").filter(function(a) {
    return !!a;
  }), !b).join("/")) || b || (a = ".");
  a && c && (a += "/");
  return (b ? "/" : "") + a;
}
function jb(a) {
  var b = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(a).slice(1);
  a = b[0];
  b = b[1];
  if (!a && !b) {
    return ".";
  }
  b && (b = b.substr(0, b.length - 1));
  return a + b;
}
function kb(a) {
  if ("/" === a) {
    return "/";
  }
  var b = a.lastIndexOf("/");
  return -1 === b ? a : a.substr(b + 1);
}
function lb() {
  var a = Array.prototype.slice.call(arguments, 0);
  return ib(a.join("/"));
}
function mb(a, b) {
  return ib(a + "/" + b);
}
function nb(a) {
  e.___errno_location ? B[e.___errno_location() >> 2] = a : x("failed to set errno from JS");
  return a;
}
function ob() {
  for (var a = "", b = !1, c = arguments.length - 1; -1 <= c && !b; c--) {
    b = 0 <= c ? arguments[c] : "/";
    if ("string" !== typeof b) {
      throw new TypeError("Arguments to path.resolve must be strings");
    }
    if (!b) {
      return "";
    }
    a = b + "/" + a;
    b = "/" === b.charAt(0);
  }
  a = hb(a.split("/").filter(function(a) {
    return !!a;
  }), !b).join("/");
  return (b ? "/" : "") + a || ".";
}
var pb = [];
function qb(a, b) {
  pb[a] = {input:[], output:[], N:b};
  rb(a, sb);
}
var sb = {open:function(a) {
  var b = pb[a.node.rdev];
  if (!b) {
    throw new J(19);
  }
  a.tty = b;
  a.seekable = !1;
}, close:function(a) {
  a.tty.N.flush(a.tty);
}, flush:function(a) {
  a.tty.N.flush(a.tty);
}, read:function(a, b, c, d) {
  if (!a.tty || !a.tty.N.ua) {
    throw new J(6);
  }
  for (var f = 0, g = 0; g < d; g++) {
    try {
      var k = a.tty.N.ua(a.tty);
    } catch (n) {
      throw new J(5);
    }
    if (void 0 === k && 0 === f) {
      throw new J(11);
    }
    if (null === k || void 0 === k) {
      break;
    }
    f++;
    b[c + g] = k;
  }
  f && (a.node.timestamp = Date.now());
  return f;
}, write:function(a, b, c, d) {
  if (!a.tty || !a.tty.N.fa) {
    throw new J(6);
  }
  try {
    for (var f = 0; f < d; f++) {
      a.tty.N.fa(a.tty, b[c + f]);
    }
  } catch (g) {
    throw new J(5);
  }
  d && (a.node.timestamp = Date.now());
  return f;
}}, tb = {ua:function(a) {
  if (!a.input.length) {
    var b = null;
    if (m) {
      var c = Buffer.ka ? Buffer.ka(256) : new Buffer(256), d = 0, f = process.stdin.fd;
      if ("win32" != process.platform) {
        var g = !1;
        try {
          f = fs.openSync("/dev/stdin", "r"), g = !0;
        } catch (k) {
        }
      }
      try {
        d = fs.readSync(f, c, 0, 256, null);
      } catch (k) {
        if (-1 != k.toString().indexOf("EOF")) {
          d = 0;
        } else {
          throw k;
        }
      }
      g && fs.closeSync(f);
      0 < d ? b = c.slice(0, d).toString("utf-8") : b = null;
    } else {
      "undefined" != typeof window && "function" == typeof window.prompt ? (b = window.prompt("Input: "), null !== b && (b += "\n")) : "function" == typeof readline && (b = readline(), null !== b && (b += "\n"));
    }
    if (!b) {
      return null;
    }
    c = Array(Aa(b) + 1);
    b = ya(b, c, 0, c.length);
    c.length = b;
    a.input = c;
  }
  return a.input.shift();
}, fa:function(a, b) {
  null === b || 10 === b ? (pa(wa(a.output, 0)), a.output = []) : 0 != b && a.output.push(b);
}, flush:function(a) {
  a.output && 0 < a.output.length && (pa(wa(a.output, 0)), a.output = []);
}}, ub = {fa:function(a, b) {
  null === b || 10 === b ? (x(wa(a.output, 0)), a.output = []) : 0 != b && a.output.push(b);
}, flush:function(a) {
  a.output && 0 < a.output.length && (x(wa(a.output, 0)), a.output = []);
}}, K = {F:null, s:function() {
  return K.createNode(null, "/", 16895, 0);
}, createNode:function(a, b, c, d) {
  if (24576 === (c & 61440) || 4096 === (c & 61440)) {
    throw new J(1);
  }
  K.F || (K.F = {dir:{node:{G:K.f.G, A:K.f.A, lookup:K.f.lookup, O:K.f.O, rename:K.f.rename, unlink:K.f.unlink, rmdir:K.f.rmdir, readdir:K.f.readdir, symlink:K.f.symlink}, stream:{I:K.g.I}}, file:{node:{G:K.f.G, A:K.f.A}, stream:{I:K.g.I, read:K.g.read, write:K.g.write, ja:K.g.ja, va:K.g.va, ya:K.g.ya}}, link:{node:{G:K.f.G, A:K.f.A, readlink:K.f.readlink}, stream:{}}, na:{node:{G:K.f.G, A:K.f.A}, stream:vb}});
  c = wb(a, b, c, d);
  16384 === (c.mode & 61440) ? (c.f = K.F.dir.node, c.g = K.F.dir.stream, c.c = {}) : 32768 === (c.mode & 61440) ? (c.f = K.F.file.node, c.g = K.F.file.stream, c.l = 0, c.c = null) : 40960 === (c.mode & 61440) ? (c.f = K.F.link.node, c.g = K.F.link.stream) : 8192 === (c.mode & 61440) && (c.f = K.F.na.node, c.g = K.F.na.stream);
  c.timestamp = Date.now();
  a && (a.c[b] = c);
  return c;
}, xd:function(a) {
  if (a.c && a.c.subarray) {
    for (var b = [], c = 0; c < a.l; ++c) {
      b.push(a.c[c]);
    }
    return b;
  }
  return a.c;
}, yd:function(a) {
  return a.c ? a.c.subarray ? a.c.subarray(0, a.l) : new Uint8Array(a.c) : new Uint8Array;
}, oa:function(a, b) {
  var c = a.c ? a.c.length : 0;
  c >= b || (b = Math.max(b, c * (1048576 > c ? 2.0 : 1.125) | 0), 0 != c && (b = Math.max(b, 256)), c = a.c, a.c = new Uint8Array(b), 0 < a.l && a.c.set(c.subarray(0, a.l), 0));
}, Va:function(a, b) {
  if (a.l != b) {
    if (0 == b) {
      a.c = null, a.l = 0;
    } else {
      if (!a.c || a.c.subarray) {
        var c = a.c;
        a.c = new Uint8Array(new ArrayBuffer(b));
        c && a.c.set(c.subarray(0, Math.min(b, a.l)));
      } else {
        if (a.c || (a.c = []), a.c.length > b) {
          a.c.length = b;
        } else {
          for (; a.c.length < b;) {
            a.c.push(0);
          }
        }
      }
      a.l = b;
    }
  }
}, f:{G:function(a) {
  var b = {};
  b.dev = 8192 === (a.mode & 61440) ? a.id : 1;
  b.ino = a.id;
  b.mode = a.mode;
  b.nlink = 1;
  b.uid = 0;
  b.gid = 0;
  b.rdev = a.rdev;
  16384 === (a.mode & 61440) ? b.size = 4096 : 32768 === (a.mode & 61440) ? b.size = a.l : 40960 === (a.mode & 61440) ? b.size = a.link.length : b.size = 0;
  b.atime = new Date(a.timestamp);
  b.mtime = new Date(a.timestamp);
  b.ctime = new Date(a.timestamp);
  b.J = 4096;
  b.blocks = Math.ceil(b.size / b.J);
  return b;
}, A:function(a, b) {
  void 0 !== b.mode && (a.mode = b.mode);
  void 0 !== b.timestamp && (a.timestamp = b.timestamp);
  void 0 !== b.size && K.Va(a, b.size);
}, lookup:function() {
  throw xb[2];
}, O:function(a, b, c, d) {
  return K.createNode(a, b, c, d);
}, rename:function(a, b, c) {
  if (16384 === (a.mode & 61440)) {
    try {
      var d = yb(b, c);
    } catch (g) {
    }
    if (d) {
      for (var f in d.c) {
        throw new J(39);
      }
    }
  }
  delete a.parent.c[a.name];
  a.name = c;
  b.c[c] = a;
  a.parent = b;
}, unlink:function(a, b) {
  delete a.c[b];
}, rmdir:function(a, b) {
  var c = yb(a, b), d;
  for (d in c.c) {
    throw new J(39);
  }
  delete a.c[b];
}, readdir:function(a) {
  var b = [".", ".."], c;
  for (c in a.c) {
    a.c.hasOwnProperty(c) && b.push(c);
  }
  return b;
}, symlink:function(a, b, c) {
  a = K.createNode(a, b, 41471, 0);
  a.link = c;
  return a;
}, readlink:function(a) {
  if (40960 !== (a.mode & 61440)) {
    throw new J(22);
  }
  return a.link;
}}, g:{read:function(a, b, c, d, f) {
  var g = a.node.c;
  if (f >= a.node.l) {
    return 0;
  }
  a = Math.min(a.node.l - f, d);
  assert(0 <= a);
  if (8 < a && g.subarray) {
    b.set(g.subarray(f, f + a), c);
  } else {
    for (d = 0; d < a; d++) {
      b[c + d] = g[f + d];
    }
  }
  return a;
}, write:function(a, b, c, d, f, g) {
  if (!d) {
    return 0;
  }
  a = a.node;
  a.timestamp = Date.now();
  if (b.subarray && (!a.c || a.c.subarray)) {
    if (g) {
      return assert(0 === f, "canOwn must imply no weird position inside the file"), a.c = b.subarray(c, c + d), a.l = d;
    }
    if (0 === a.l && 0 === f) {
      return a.c = new Uint8Array(b.subarray(c, c + d)), a.l = d;
    }
    if (f + d <= a.l) {
      return a.c.set(b.subarray(c, c + d), f), d;
    }
  }
  K.oa(a, f + d);
  if (a.c.subarray && b.subarray) {
    a.c.set(b.subarray(c, c + d), f);
  } else {
    for (g = 0; g < d; g++) {
      a.c[f + g] = b[c + g];
    }
  }
  a.l = Math.max(a.l, f + d);
  return d;
}, I:function(a, b, c) {
  1 === c ? b += a.position : 2 === c && 32768 === (a.node.mode & 61440) && (b += a.node.l);
  if (0 > b) {
    throw new J(22);
  }
  return b;
}, ja:function(a, b, c) {
  K.oa(a.node, b + c);
  a.node.l = Math.max(a.node.l, b + c);
}, va:function(a, b, c, d, f, g, k) {
  if (32768 !== (a.node.mode & 61440)) {
    throw new J(19);
  }
  c = a.node.c;
  if (k & 2 || c.buffer !== b && c.buffer !== b.buffer) {
    if (0 < f || f + d < a.node.l) {
      c.subarray ? c = c.subarray(f, f + d) : c = Array.prototype.slice.call(c, f, f + d);
    }
    a = !0;
    f = b.buffer == z.buffer;
    d = zb(d);
    if (!d) {
      throw new J(12);
    }
    (f ? z : b).set(c, d);
  } else {
    a = !1, d = c.byteOffset;
  }
  return {i:d, wd:a};
}, ya:function(a, b, c, d, f) {
  if (32768 !== (a.node.mode & 61440)) {
    throw new J(19);
  }
  if (f & 2) {
    return 0;
  }
  K.g.write(a, b, 0, d, c, !1);
  return 0;
}}}, L = {Z:!1, bb:function() {
  L.Z = !!process.platform.match(/^win/);
  var a = process.binding("constants");
  a.fs && (a = a.fs);
  L.qa = {1024:a.O_APPEND, 64:a.O_CREAT, 128:a.O_EXCL, 0:a.O_RDONLY, 2:a.O_RDWR, 4096:a.O_SYNC, 512:a.O_TRUNC, 1:a.O_WRONLY};
}, la:function(a) {
  return Buffer.ka ? Buffer.from(a) : new Buffer(a);
}, s:function(a) {
  assert(ea);
  return L.createNode(null, "/", L.ta(a.ea.root), 0);
}, createNode:function(a, b, c) {
  if (16384 !== (c & 61440) && 32768 !== (c & 61440) && 40960 !== (c & 61440)) {
    throw new J(22);
  }
  a = wb(a, b, c);
  a.f = L.f;
  a.g = L.g;
  return a;
}, ta:function(a) {
  try {
    var b = fs.lstatSync(a);
    L.Z && (b.mode = b.mode | (b.mode & 292) >> 2);
  } catch (c) {
    if (!c.code) {
      throw c;
    }
    throw new J(-c.j);
  }
  return b.mode;
}, u:function(a) {
  for (var b = []; a.parent !== a;) {
    b.push(a.name), a = a.parent;
  }
  b.push(a.s.ea.root);
  b.reverse();
  return lb.apply(null, b);
}, Ea:function(a) {
  a &= -2656257;
  var b = 0, c;
  for (c in L.qa) {
    a & c && (b |= L.qa[c], a ^= c);
  }
  if (a) {
    throw new J(22);
  }
  return b;
}, f:{G:function(a) {
  a = L.u(a);
  try {
    var b = fs.lstatSync(a);
  } catch (c) {
    if (!c.code) {
      throw c;
    }
    throw new J(-c.j);
  }
  L.Z && !b.J && (b.J = 4096);
  L.Z && !b.blocks && (b.blocks = (b.size + b.J - 1) / b.J | 0);
  return {dev:b.dev, ino:b.ino, mode:b.mode, nlink:b.nlink, uid:b.uid, gid:b.gid, rdev:b.rdev, size:b.size, atime:b.atime, mtime:b.mtime, ctime:b.ctime, J:b.J, blocks:b.blocks};
}, A:function(a, b) {
  var c = L.u(a);
  try {
    void 0 !== b.mode && (fs.chmodSync(c, b.mode), a.mode = b.mode), void 0 !== b.size && fs.truncateSync(c, b.size);
  } catch (d) {
    if (!d.code) {
      throw d;
    }
    throw new J(-d.j);
  }
}, lookup:function(a, b) {
  var c = mb(L.u(a), b);
  c = L.ta(c);
  return L.createNode(a, b, c);
}, O:function(a, b, c, d) {
  a = L.createNode(a, b, c, d);
  b = L.u(a);
  try {
    16384 === (a.mode & 61440) ? fs.mkdirSync(b, a.mode) : fs.writeFileSync(b, "", {mode:a.mode});
  } catch (f) {
    if (!f.code) {
      throw f;
    }
    throw new J(-f.j);
  }
  return a;
}, rename:function(a, b, c) {
  a = L.u(a);
  b = mb(L.u(b), c);
  try {
    fs.renameSync(a, b);
  } catch (d) {
    if (!d.code) {
      throw d;
    }
    throw new J(-d.j);
  }
}, unlink:function(a, b) {
  a = mb(L.u(a), b);
  try {
    fs.unlinkSync(a);
  } catch (c) {
    if (!c.code) {
      throw c;
    }
    throw new J(-c.j);
  }
}, rmdir:function(a, b) {
  a = mb(L.u(a), b);
  try {
    fs.rmdirSync(a);
  } catch (c) {
    if (!c.code) {
      throw c;
    }
    throw new J(-c.j);
  }
}, readdir:function(a) {
  a = L.u(a);
  try {
    return fs.readdirSync(a);
  } catch (b) {
    if (!b.code) {
      throw b;
    }
    throw new J(-b.j);
  }
}, symlink:function(a, b, c) {
  a = mb(L.u(a), b);
  try {
    fs.symlinkSync(c, a);
  } catch (d) {
    if (!d.code) {
      throw d;
    }
    throw new J(-d.j);
  }
}, readlink:function(a) {
  var b = L.u(a);
  try {
    return b = fs.readlinkSync(b), b = Ab.relative(Ab.resolve(a.s.ea.root), b);
  } catch (c) {
    if (!c.code) {
      throw c;
    }
    throw new J(-c.j);
  }
}}, g:{open:function(a) {
  var b = L.u(a.node);
  try {
    32768 === (a.node.mode & 61440) && (a.P = fs.openSync(b, L.Ea(a.flags)));
  } catch (c) {
    if (!c.code) {
      throw c;
    }
    throw new J(-c.j);
  }
}, close:function(a) {
  try {
    32768 === (a.node.mode & 61440) && a.P && fs.closeSync(a.P);
  } catch (b) {
    if (!b.code) {
      throw b;
    }
    throw new J(-b.j);
  }
}, read:function(a, b, c, d, f) {
  if (0 === d) {
    return 0;
  }
  try {
    return fs.readSync(a.P, L.la(b.buffer), c, d, f);
  } catch (g) {
    throw new J(-g.j);
  }
}, write:function(a, b, c, d, f) {
  try {
    return fs.writeSync(a.P, L.la(b.buffer), c, d, f);
  } catch (g) {
    throw new J(-g.j);
  }
}, I:function(a, b, c) {
  if (1 === c) {
    b += a.position;
  } else {
    if (2 === c && 32768 === (a.node.mode & 61440)) {
      try {
        b += fs.fstatSync(a.P).size;
      } catch (d) {
        throw new J(-d.j);
      }
    }
  }
  if (0 > b) {
    throw new J(22);
  }
  return b;
}}}, Bb = {0:"Success", 1:"Not super-user", 2:"No such file or directory", 3:"No such process", 4:"Interrupted system call", 5:"I/O error", 6:"No such device or address", 7:"Arg list too long", 8:"Exec format error", 9:"Bad file number", 10:"No children", 11:"No more processes", 12:"Not enough core", 13:"Permission denied", 14:"Bad address", 15:"Block device required", 16:"Mount device busy", 17:"File exists", 18:"Cross-device link", 19:"No such device", 20:"Not a directory", 21:"Is a directory", 
22:"Invalid argument", 23:"Too many open files in system", 24:"Too many open files", 25:"Not a typewriter", 26:"Text file busy", 27:"File too large", 28:"No space left on device", 29:"Illegal seek", 30:"Read only file system", 31:"Too many links", 32:"Broken pipe", 33:"Math arg out of domain of func", 34:"Math result not representable", 35:"File locking deadlock error", 36:"File or path name too long", 37:"No record locks available", 38:"Function not implemented", 39:"Directory not empty", 40:"Too many symbolic links", 
42:"No message of desired type", 43:"Identifier removed", 44:"Channel number out of range", 45:"Level 2 not synchronized", 46:"Level 3 halted", 47:"Level 3 reset", 48:"Link number out of range", 49:"Protocol driver not attached", 50:"No CSI structure available", 51:"Level 2 halted", 52:"Invalid exchange", 53:"Invalid request descriptor", 54:"Exchange full", 55:"No anode", 56:"Invalid request code", 57:"Invalid slot", 59:"Bad font file fmt", 60:"Device not a stream", 61:"No data (for no delay io)", 
62:"Timer expired", 63:"Out of streams resources", 64:"Machine is not on the network", 65:"Package not installed", 66:"The object is remote", 67:"The link has been severed", 68:"Advertise error", 69:"Srmount error", 70:"Communication error on send", 71:"Protocol error", 72:"Multihop attempted", 73:"Cross mount point (not really error)", 74:"Trying to read unreadable message", 75:"Value too large for defined data type", 76:"Given log. name not unique", 77:"f.d. invalid for this operation", 78:"Remote address changed", 
79:"Can   access a needed shared lib", 80:"Accessing a corrupted shared lib", 81:".lib section in a.out corrupted", 82:"Attempting to link in too many libs", 83:"Attempting to exec a shared library", 84:"Illegal byte sequence", 86:"Streams pipe error", 87:"Too many users", 88:"Socket operation on non-socket", 89:"Destination address required", 90:"Message too long", 91:"Protocol wrong type for socket", 92:"Protocol not available", 93:"Unknown protocol", 94:"Socket type not supported", 95:"Not supported", 
96:"Protocol family not supported", 97:"Address family not supported by protocol family", 98:"Address already in use", 99:"Address not available", 100:"Network interface is not configured", 101:"Network is unreachable", 102:"Connection reset by network", 103:"Connection aborted", 104:"Connection reset by peer", 105:"No buffer space available", 106:"Socket is already connected", 107:"Socket is not connected", 108:"Can't send after socket shutdown", 109:"Too many references", 110:"Connection timed out", 
111:"Connection refused", 112:"Host is down", 113:"Host is unreachable", 114:"Socket already connected", 115:"Connection already in progress", 116:"Stale file handle", 122:"Quota exceeded", 123:"No medium (in tape drive)", 125:"Operation canceled", 130:"Previous owner died", 131:"State not recoverable"}, Cb = {Vc:1, uc:2, jd:3, Qb:4, Sb:5, Rc:6, eb:7, vc:8, nb:9, wb:10, kb:11, td:11, zc:12, fb:13, Jb:14, Ic:15, ub:16, Ib:17, ud:18, tc:19, Kc:20, Ub:21, Rb:22, oc:23, fc:24, Pc:25, qd:26, Kb:27, Ec:28, 
hd:29, dd:30, hc:31, Xc:32, Fb:33, ad:34, Ac:42, Nb:43, xb:44, Wb:45, Xb:46, Yb:47, dc:48, rd:49, rc:50, Vb:51, Cb:35, wc:37, mb:52, qb:53, vd:54, pc:55, rb:56, sb:57, Db:35, tb:59, Gc:60, sc:61, nd:62, Fc:63, Bc:64, Cc:65, cd:66, xc:67, ib:68, kd:69, yb:70, Yc:71, jc:72, Gb:73, pb:74, Qc:76, ob:77, bd:78, Zb:79, $b:80, cc:81, bc:82, ac:83, Hc:38, Lc:39, kc:36, ec:40, Sc:95, Wc:96, Bb:104, qc:105, jb:97, $c:91, Nc:88, Dc:92, ed:108, Ab:111, gb:98, zb:103, nc:101, lc:100, od:110, Lb:112, Mb:113, Pb:115, 
lb:114, Eb:89, ic:90, Zc:93, gd:94, hb:99, mc:102, Tb:106, Jc:107, pd:109, sd:87, Hb:122, ld:116, Oc:95, yc:123, Ob:84, Tc:75, vb:125, Mc:131, Uc:130, md:86}, Db = null, Eb = {}, Fb = [], Gb = 1, Hb = null, Ib = !0, Jb = {}, J = null, xb = {};
function M(a, b) {
  a = ob("/", a);
  b = b || {};
  if (!a) {
    return {path:"", node:null};
  }
  var c = {ra:!0, ha:0}, d;
  for (d in c) {
    void 0 === b[d] && (b[d] = c[d]);
  }
  if (8 < b.ha) {
    throw new J(40);
  }
  a = hb(a.split("/").filter(function(a) {
    return !!a;
  }), !1);
  var f = Db;
  c = "/";
  for (d = 0; d < a.length; d++) {
    var g = d === a.length - 1;
    if (g && b.parent) {
      break;
    }
    f = yb(f, a[d]);
    c = mb(c, a[d]);
    f.$ && (!g || g && b.ra) && (f = f.$.root);
    if (!g || b.W) {
      for (g = 0; 40960 === (f.mode & 61440);) {
        if (f = Kb(c), c = ob(jb(c), f), f = M(c, {ha:b.ha}).node, 40 < g++) {
          throw new J(40);
        }
      }
    }
  }
  return {path:c, node:f};
}
function Lb(a) {
  for (var b;;) {
    if (a === a.parent) {
      return a = a.s.wa, b ? "/" !== a[a.length - 1] ? a + "/" + b : a + b : a;
    }
    b = b ? a.name + "/" + b : a.name;
    a = a.parent;
  }
}
function Mb(a, b) {
  for (var c = 0, d = 0; d < b.length; d++) {
    c = (c << 5) - c + b.charCodeAt(d) | 0;
  }
  return (a + c >>> 0) % Hb.length;
}
function Nb(a) {
  var b = Mb(a.parent.id, a.name);
  a.Oa = Hb[b];
  Hb[b] = a;
}
function yb(a, b) {
  var c;
  if (c = (c = Ob(a, "x")) ? c : a.f.lookup ? 0 : 13) {
    throw new J(c, a);
  }
  for (c = Hb[Mb(a.id, b)]; c; c = c.Oa) {
    var d = c.name;
    if (c.parent.id === a.id && d === b) {
      return c;
    }
  }
  return a.f.lookup(a, b);
}
function wb(a, b, c, d) {
  Pb || (Pb = function(a, b, c, d) {
    a || (a = this);
    this.parent = a;
    this.s = a.s;
    this.$ = null;
    this.id = Gb++;
    this.name = b;
    this.mode = c;
    this.f = {};
    this.g = {};
    this.rdev = d;
  }, Pb.prototype = {}, Object.defineProperties(Pb.prototype, {read:{get:function() {
    return 365 === (this.mode & 365);
  }, set:function(a) {
    a ? this.mode |= 365 : this.mode &= -366;
  }}, write:{get:function() {
    return 146 === (this.mode & 146);
  }, set:function(a) {
    a ? this.mode |= 146 : this.mode &= -147;
  }}}));
  a = new Pb(a, b, c, d);
  Nb(a);
  return a;
}
var Qb = {r:0, rs:1052672, "r+":2, w:577, wx:705, xw:705, "w+":578, "wx+":706, "xw+":706, a:1089, ax:1217, xa:1217, "a+":1090, "ax+":1218, "xa+":1218};
function Rb(a) {
  var b = ["r", "w", "rw"][a & 3];
  a & 512 && (b += "w");
  return b;
}
function Ob(a, b) {
  if (Ib) {
    return 0;
  }
  if (-1 === b.indexOf("r") || a.mode & 292) {
    if (-1 !== b.indexOf("w") && !(a.mode & 146) || -1 !== b.indexOf("x") && !(a.mode & 73)) {
      return 13;
    }
  } else {
    return 13;
  }
  return 0;
}
function Sb(a, b) {
  try {
    return yb(a, b), 17;
  } catch (c) {
  }
  return Ob(a, "wx");
}
function Tb() {
  var a = 4096;
  for (var b = 0; b <= a; b++) {
    if (!Fb[b]) {
      return b;
    }
  }
  throw new J(24);
}
function Ub(a) {
  Vb || (Vb = function() {
  }, Vb.prototype = {}, Object.defineProperties(Vb.prototype, {object:{get:function() {
    return this.node;
  }, set:function(a) {
    this.node = a;
  }}}));
  var b = new Vb, c;
  for (c in a) {
    b[c] = a[c];
  }
  a = b;
  b = Tb();
  a.fd = b;
  return Fb[b] = a;
}
var vb = {open:function(a) {
  a.g = Eb[a.node.rdev].g;
  a.g.open && a.g.open(a);
}, I:function() {
  throw new J(29);
}};
function rb(a, b) {
  Eb[a] = {g:b};
}
function Wb(a, b) {
  var c = "/" === b, d = !b;
  if (c && Db) {
    throw new J(16);
  }
  if (!c && !d) {
    var f = M(b, {ra:!1});
    b = f.path;
    f = f.node;
    if (f.$) {
      throw new J(16);
    }
    if (16384 !== (f.mode & 61440)) {
      throw new J(20);
    }
  }
  b = {type:a, ea:{}, wa:b, Na:[]};
  a = a.s(b);
  a.s = b;
  b.root = a;
  c ? Db = a : f && (f.$ = b, f.s && f.s.Na.push(b));
}
function Xb(a, b, c) {
  var d = M(a, {parent:!0}).node;
  a = kb(a);
  if (!a || "." === a || ".." === a) {
    throw new J(22);
  }
  var f = Sb(d, a);
  if (f) {
    throw new J(f);
  }
  if (!d.f.O) {
    throw new J(1);
  }
  return d.f.O(d, a, b, c);
}
function N(a) {
  Xb(a, 16895, 0);
}
function Yb(a, b, c) {
  "undefined" === typeof c && (c = b, b = 438);
  Xb(a, b | 8192, c);
}
function Zb(a, b) {
  if (!ob(a)) {
    throw new J(2);
  }
  var c = M(b, {parent:!0}).node;
  if (!c) {
    throw new J(2);
  }
  b = kb(b);
  var d = Sb(c, b);
  if (d) {
    throw new J(d);
  }
  if (!c.f.symlink) {
    throw new J(1);
  }
  c.f.symlink(c, b, a);
}
function Kb(a) {
  a = M(a).node;
  if (!a) {
    throw new J(2);
  }
  if (!a.f.readlink) {
    throw new J(22);
  }
  return ob(Lb(a.parent), a.f.readlink(a));
}
function $b(a, b, c) {
  if ("" === a) {
    throw new J(2);
  }
  if ("string" === typeof b) {
    var d = Qb[b];
    if ("undefined" === typeof d) {
      throw Error("Unknown file open mode: " + b);
    }
    b = d;
  }
  c = b & 64 ? ("undefined" === typeof c ? 438 : c) & 4095 | 32768 : 0;
  if ("object" === typeof a) {
    var f = a;
  } else {
    a = ib(a);
    try {
      f = M(a, {W:!(b & 131072)}).node;
    } catch (k) {
    }
  }
  d = !1;
  if (b & 64) {
    if (f) {
      if (b & 128) {
        throw new J(17);
      }
    } else {
      f = Xb(a, c, 0), d = !0;
    }
  }
  if (!f) {
    throw new J(2);
  }
  8192 === (f.mode & 61440) && (b &= -513);
  if (b & 65536 && 16384 !== (f.mode & 61440)) {
    throw new J(20);
  }
  if (!d && (c = f ? 40960 === (f.mode & 61440) ? 40 : 16384 === (f.mode & 61440) && ("r" !== Rb(b) || b & 512) ? 21 : Ob(f, Rb(b)) : 2)) {
    throw new J(c);
  }
  if (b & 512) {
    c = f;
    var g;
    "string" === typeof c ? g = M(c, {W:!0}).node : g = c;
    if (!g.f.A) {
      throw new J(1);
    }
    if (16384 === (g.mode & 61440)) {
      throw new J(21);
    }
    if (32768 !== (g.mode & 61440)) {
      throw new J(22);
    }
    if (c = Ob(g, "w")) {
      throw new J(c);
    }
    g.f.A(g, {size:0, timestamp:Date.now()});
  }
  b &= -641;
  f = Ub({node:f, path:Lb(f), flags:b, seekable:!0, position:0, g:f.g, cb:[], error:!1});
  f.g.open && f.g.open(f);
  !e.logReadFiles || b & 1 || (ac || (ac = {}), a in ac || (ac[a] = 1, console.log("FS.trackingDelegate error on read file: " + a)));
  try {
    Jb.onOpenFile && (g = 0, 1 !== (b & 2097155) && (g |= 1), 0 !== (b & 2097155) && (g |= 2), Jb.onOpenFile(a, g));
  } catch (k) {
    console.log("FS.trackingDelegate['onOpenFile']('" + a + "', flags) threw an exception: " + k.message);
  }
  return f;
}
function bc(a, b, c) {
  if (null === a.fd) {
    throw new J(9);
  }
  if (!a.seekable || !a.g.I) {
    throw new J(29);
  }
  if (0 != c && 1 != c && 2 != c) {
    throw new J(22);
  }
  a.position = a.g.I(a, b, c);
  a.cb = [];
}
function cc() {
  J || (J = function(a, b) {
    this.node = b;
    this.Xa = function(a) {
      this.j = a;
      for (var b in Cb) {
        if (Cb[b] === a) {
          this.code = b;
          break;
        }
      }
    };
    this.Xa(a);
    this.message = Bb[a];
    this.stack && Object.defineProperty(this, "stack", {value:Error().stack, writable:!0});
    this.stack && (this.stack = $a(this.stack));
  }, J.prototype = Error(), J.prototype.constructor = J, [2].forEach(function(a) {
    xb[a] = new J(a);
    xb[a].stack = "<generic error, no stack>";
  }));
}
var dc;
function ec(a, b) {
  var c = 0;
  a && (c |= 365);
  b && (c |= 146);
  return c;
}
function fc(a, b, c) {
  a = mb("/dev", a);
  var d = ec(!!b, !!c);
  hc || (hc = 64);
  var f = hc++ << 8 | 0;
  rb(f, {open:function(a) {
    a.seekable = !1;
  }, close:function() {
    c && c.buffer && c.buffer.length && c(10);
  }, read:function(a, c, d, f) {
    for (var g = 0, k = 0; k < f; k++) {
      try {
        var n = b();
      } catch (ca) {
        throw new J(5);
      }
      if (void 0 === n && 0 === g) {
        throw new J(11);
      }
      if (null === n || void 0 === n) {
        break;
      }
      g++;
      c[d + k] = n;
    }
    g && (a.node.timestamp = Date.now());
    return g;
  }, write:function(a, b, d, f) {
    for (var g = 0; g < f; g++) {
      try {
        c(b[d + g]);
      } catch (u) {
        throw new J(5);
      }
    }
    f && (a.node.timestamp = Date.now());
    return g;
  }});
  Yb(a, d, f);
}
var hc, ic = {}, Pb, Vb, ac, O = 0;
function P() {
  O += 4;
  return B[O - 4 >> 2];
}
function jc() {
  var a = Fb[P()];
  if (!a) {
    throw new J(9);
  }
  return a;
}
var kc = {};
function lc(a) {
  for (; a.length;) {
    var b = a.pop();
    a.pop()(b);
  }
}
function mc(a) {
  return this.fromWireType(C[a >> 2]);
}
var nc = {}, oc = {}, pc = {};
function qc(a) {
  if (void 0 === a) {
    return "_unknown";
  }
  a = a.replace(/[^a-zA-Z0-9_]/g, "$");
  var b = a.charCodeAt(0);
  return 48 <= b && 57 >= b ? "_" + a : a;
}
function rc(a, b) {
  a = qc(a);
  return (new Function("body", "return function " + a + '() {\n    "use strict";    return body.apply(this, arguments);\n};\n'))(b);
}
function sc(a, b) {
  var c = rc(b, function(a) {
    this.name = b;
    this.message = a;
    a = Error(a).stack;
    void 0 !== a && (this.stack = this.toString() + "\n" + a.replace(/^Error(:[^\n]*)?\n/, ""));
  });
  c.prototype = Object.create(a.prototype);
  c.prototype.constructor = c;
  c.prototype.toString = function() {
    return void 0 === this.message ? this.name : this.name + ": " + this.message;
  };
  return c;
}
var tc = void 0;
function uc(a) {
  throw new tc(a);
}
function Q(a, b, c) {
  function d(b) {
    b = c(b);
    b.length !== a.length && uc("Mismatched type converter count");
    for (var d = 0; d < a.length; ++d) {
      R(a[d], b[d]);
    }
  }
  a.forEach(function(a) {
    pc[a] = b;
  });
  var f = Array(b.length), g = [], k = 0;
  b.forEach(function(a, b) {
    oc.hasOwnProperty(a) ? f[b] = oc[a] : (g.push(a), nc.hasOwnProperty(a) || (nc[a] = []), nc[a].push(function() {
      f[b] = oc[a];
      ++k;
      k === g.length && d(f);
    }));
  });
  0 === g.length && d(f);
}
function vc(a) {
  switch(a) {
    case 1:
      return 0;
    case 2:
      return 1;
    case 4:
      return 2;
    case 8:
      return 3;
    default:
      throw new TypeError("Unknown type size: " + a);
  }
}
function wc() {
  for (var a = Array(256), b = 0; 256 > b; ++b) {
    a[b] = String.fromCharCode(b);
  }
  xc = a;
}
var xc = void 0;
function S(a) {
  for (var b = ""; y[a];) {
    b += xc[y[a++]];
  }
  return b;
}
var yc = void 0;
function T(a) {
  throw new yc(a);
}
function R(a, b, c) {
  c = c || {};
  if (!("argPackAdvance" in b)) {
    throw new TypeError("registerType registeredInstance requires argPackAdvance");
  }
  var d = b.name;
  a || T('type "' + d + '" must have a positive integer typeid pointer');
  if (oc.hasOwnProperty(a)) {
    if (c.Ka) {
      return;
    }
    T("Cannot register type '" + d + "' twice");
  }
  oc[a] = b;
  delete pc[a];
  nc.hasOwnProperty(a) && (b = nc[a], delete nc[a], b.forEach(function(a) {
    a();
  }));
}
function zc(a) {
  if (!(this instanceof U && a instanceof U)) {
    return !1;
  }
  var b = this.b.m.h, c = this.b.i, d = a.b.m.h;
  for (a = a.b.i; b.C;) {
    c = b.T(c), b = b.C;
  }
  for (; d.C;) {
    a = d.T(a), d = d.C;
  }
  return b === d && c === a;
}
function Ac(a) {
  return {count:a.count, L:a.L, R:a.R, i:a.i, m:a.m, v:a.v, B:a.B};
}
function Bc(a) {
  T(a.b.m.h.name + " instance already deleted");
}
var Cc = !1;
function Dc() {
}
function Ec(a) {
  a.v ? a.B.H(a.v) : a.m.h.H(a.i);
}
function Fc(a) {
  --a.count.value;
  0 === a.count.value && Ec(a);
}
function Gc(a) {
  if ("undefined" === typeof FinalizationGroup) {
    return Gc = function(a) {
      return a;
    }, a;
  }
  Cc = new FinalizationGroup(function(a) {
    for (var b = a.next(); !b.done; b = a.next()) {
      b = b.value, b.i ? Fc(b) : console.warn("object already deleted: " + b.i);
    }
  });
  Gc = function(a) {
    Cc.register(a, a.b, a.b);
    return a;
  };
  Dc = function(a) {
    Cc.unregister(a.b);
  };
  return Gc(a);
}
function Hc() {
  this.b.i || Bc(this);
  if (this.b.R) {
    return this.b.count.value += 1, this;
  }
  var a = Gc(Object.create(Object.getPrototypeOf(this), {b:{value:Ac(this.b)}}));
  a.b.count.value += 1;
  a.b.L = !1;
  return a;
}
function Ic() {
  this.b.i || Bc(this);
  this.b.L && !this.b.R && T("Object already scheduled for deletion");
  Dc(this);
  Fc(this.b);
  this.b.R || (this.b.v = void 0, this.b.i = void 0);
}
function Jc() {
  return !this.b.i;
}
var Kc = void 0, Lc = [];
function Mc() {
  for (; Lc.length;) {
    var a = Lc.pop();
    a.b.L = !1;
    a["delete"]();
  }
}
function Nc() {
  this.b.i || Bc(this);
  this.b.L && !this.b.R && T("Object already scheduled for deletion");
  Lc.push(this);
  1 === Lc.length && Kc && Kc(Mc);
  this.b.L = !0;
  return this;
}
function Oc() {
  U.prototype.isAliasOf = zc;
  U.prototype.clone = Hc;
  U.prototype["delete"] = Ic;
  U.prototype.isDeleted = Jc;
  U.prototype.deleteLater = Nc;
}
function U() {
}
var Pc = {};
function Qc(a, b, c) {
  if (void 0 === a[b].o) {
    var d = a[b];
    a[b] = function() {
      a[b].o.hasOwnProperty(arguments.length) || T("Function '" + c + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + a[b].o + ")!");
      return a[b].o[arguments.length].apply(this, arguments);
    };
    a[b].o = [];
    a[b].o[d.V] = d;
  }
}
function Rc(a, b, c) {
  e.hasOwnProperty(a) ? ((void 0 === c || void 0 !== e[a].o && void 0 !== e[a].o[c]) && T("Cannot register public name '" + a + "' twice"), Qc(e, a, a), e.hasOwnProperty(c) && T("Cannot register multiple overloads of a function with the same number of arguments (" + c + ")!"), e[a].o[c] = b) : (e[a] = b, void 0 !== c && (e[a].Ad = c));
}
function Sc(a, b, c, d, f, g, k, n) {
  this.name = a;
  this.constructor = b;
  this.M = c;
  this.H = d;
  this.C = f;
  this.Fa = g;
  this.T = k;
  this.Ca = n;
  this.Ta = [];
}
function Tc(a, b, c) {
  for (; b !== c;) {
    b.T || T("Expected null or instance of " + c.name + ", got an instance of " + b.name), a = b.T(a), b = b.C;
  }
  return a;
}
function Uc(a, b) {
  if (null === b) {
    return this.da && T("null is not a valid " + this.name), 0;
  }
  b.b || T('Cannot pass "' + Vc(b) + '" as a ' + this.name);
  b.b.i || T("Cannot pass deleted object as a pointer of type " + this.name);
  return Tc(b.b.i, b.b.m.h, this.h);
}
function Wc(a, b) {
  if (null === b) {
    this.da && T("null is not a valid " + this.name);
    if (this.Y) {
      var c = this.ga();
      null !== a && a.push(this.H, c);
      return c;
    }
    return 0;
  }
  b.b || T('Cannot pass "' + Vc(b) + '" as a ' + this.name);
  b.b.i || T("Cannot pass deleted object as a pointer of type " + this.name);
  !this.X && b.b.m.X && T("Cannot convert argument of type " + (b.b.B ? b.b.B.name : b.b.m.name) + " to parameter type " + this.name);
  c = Tc(b.b.i, b.b.m.h, this.h);
  if (this.Y) {
    switch(void 0 === b.b.v && T("Passing raw pointer to smart pointer is illegal"), this.ab) {
      case 0:
        b.b.B === this ? c = b.b.v : T("Cannot convert argument of type " + (b.b.B ? b.b.B.name : b.b.m.name) + " to parameter type " + this.name);
        break;
      case 1:
        c = b.b.v;
        break;
      case 2:
        if (b.b.B === this) {
          c = b.b.v;
        } else {
          var d = b.clone();
          c = this.Ua(c, Xc(function() {
            d["delete"]();
          }));
          null !== a && a.push(this.H, c);
        }
        break;
      default:
        T("Unsupporting sharing policy");
    }
  }
  return c;
}
function Yc(a, b) {
  if (null === b) {
    return this.da && T("null is not a valid " + this.name), 0;
  }
  b.b || T('Cannot pass "' + Vc(b) + '" as a ' + this.name);
  b.b.i || T("Cannot pass deleted object as a pointer of type " + this.name);
  b.b.m.X && T("Cannot convert argument of type " + b.b.m.name + " to parameter type " + this.name);
  return Tc(b.b.i, b.b.m.h, this.h);
}
function Zc(a) {
  this.za && (a = this.za(a));
  return a;
}
function $c(a) {
  this.H && this.H(a);
}
function ad(a) {
  if (null !== a) {
    a["delete"]();
  }
}
function bd(a, b, c) {
  if (b === c) {
    return a;
  }
  if (void 0 === c.C) {
    return null;
  }
  a = bd(a, b, c.C);
  return null === a ? null : c.Ca(a);
}
function cd() {
  return Object.keys(dd).length;
}
function ed() {
  var a = [], b;
  for (b in dd) {
    dd.hasOwnProperty(b) && a.push(dd[b]);
  }
  return a;
}
function fd(a) {
  Kc = a;
  Lc.length && Kc && Kc(Mc);
}
function gd() {
  e.getInheritedInstanceCount = cd;
  e.getLiveInheritedInstances = ed;
  e.flushPendingDeletes = Mc;
  e.setDelayFunction = fd;
}
var dd = {};
function hd(a, b) {
  for (void 0 === b && T("ptr should not be undefined"); a.C;) {
    b = a.T(b), a = a.C;
  }
  return b;
}
function id(a, b) {
  b = hd(a, b);
  return dd[b];
}
function jd(a, b) {
  b.m && b.i || uc("makeClassHandle requires ptr and ptrType");
  !!b.B !== !!b.v && uc("Both smartPtrType and smartPtr must be specified");
  b.count = {value:1};
  return Gc(Object.create(a, {b:{value:b}}));
}
function kd(a) {
  function b() {
    return this.Y ? jd(this.h.M, {m:this.Sa, i:c, B:this, v:a}) : jd(this.h.M, {m:this, i:a});
  }
  var c = this.Ga(a);
  if (!c) {
    return this.aa(a), null;
  }
  var d = id(this.h, c);
  if (void 0 !== d) {
    if (0 === d.b.count.value) {
      return d.b.i = c, d.b.v = a, d.clone();
    }
    d = d.clone();
    this.aa(a);
    return d;
  }
  d = this.h.Fa(c);
  d = Pc[d];
  if (!d) {
    return b.call(this);
  }
  d = this.X ? d.Ba : d.pointerType;
  var f = bd(c, this.h, d.h);
  return null === f ? b.call(this) : this.Y ? jd(d.h.M, {m:d, i:f, B:this, v:a}) : jd(d.h.M, {m:d, i:f});
}
function ld() {
  V.prototype.Ga = Zc;
  V.prototype.aa = $c;
  V.prototype.argPackAdvance = 8;
  V.prototype.readValueFromPointer = mc;
  V.prototype.deleteObject = ad;
  V.prototype.fromWireType = kd;
}
function V(a, b, c, d, f, g, k, n, r, p, u) {
  this.name = a;
  this.h = b;
  this.da = c;
  this.X = d;
  this.Y = f;
  this.Sa = g;
  this.ab = k;
  this.za = n;
  this.ga = r;
  this.Ua = p;
  this.H = u;
  f || void 0 !== b.C ? this.toWireType = Wc : (this.toWireType = d ? Uc : Yc, this.D = null);
}
function md(a, b, c) {
  e.hasOwnProperty(a) || uc("Replacing nonexistant public symbol");
  void 0 !== e[a].o && void 0 !== c ? e[a].o[c] = b : (e[a] = b, e[a].V = c);
}
function W(a, b) {
  a = S(a);
  if (void 0 !== e["FUNCTION_TABLE_" + a]) {
    var c = e["FUNCTION_TABLE_" + a][b];
  } else {
    if ("undefined" !== typeof FUNCTION_TABLE) {
      c = FUNCTION_TABLE[b];
    } else {
      c = e["dynCall_" + a];
      void 0 === c && (c = e["dynCall_" + a.replace(/f/g, "d")], void 0 === c && T("No dynCall invoker for signature: " + a));
      for (var d = [], f = 1; f < a.length; ++f) {
        d.push("a" + f);
      }
      f = "return function " + ("dynCall_" + a + "_" + b) + "(" + d.join(", ") + ") {\n";
      f += "    return dynCall(rawFunction" + (d.length ? ", " : "") + d.join(", ") + ");\n";
      c = (new Function("dynCall", "rawFunction", f + "};\n"))(c, b);
    }
  }
  "function" !== typeof c && T("unknown function pointer with signature " + a + ": " + b);
  return c;
}
var nd = void 0;
function od(a) {
  a = pd(a);
  var b = S(a);
  X(a);
  return b;
}
function qd(a, b) {
  function c(a) {
    f[a] || oc[a] || (pc[a] ? pc[a].forEach(c) : (d.push(a), f[a] = !0));
  }
  var d = [], f = {};
  b.forEach(c);
  throw new nd(a + ": " + d.map(od).join([", "]));
}
function rd(a, b) {
  for (var c = [], d = 0; d < a; d++) {
    c.push(B[(b >> 2) + d]);
  }
  return c;
}
function sd(a, b) {
  if (!(a instanceof Function)) {
    throw new TypeError("new_ called with constructor type " + typeof a + " which is not a function");
  }
  var c = rc(a.name || "unknownFunctionName", function() {
  });
  c.prototype = a.prototype;
  c = new c;
  a = a.apply(c, b);
  return a instanceof Object ? a : c;
}
function td(a, b, c, d, f) {
  var g = b.length;
  2 > g && T("argTypes array size mismatch! Must at least get return value and 'this' types!");
  var k = null !== b[1] && null !== c, n = !1;
  for (c = 1; c < b.length; ++c) {
    if (null !== b[c] && void 0 === b[c].D) {
      n = !0;
      break;
    }
  }
  var r = "void" !== b[0].name, p = "", u = "";
  for (c = 0; c < g - 2; ++c) {
    p += (0 !== c ? ", " : "") + "arg" + c, u += (0 !== c ? ", " : "") + "arg" + c + "Wired";
  }
  a = "return function " + qc(a) + "(" + p + ") {\nif (arguments.length !== " + (g - 2) + ") {\nthrowBindingError('function " + a + " called with ' + arguments.length + ' arguments, expected " + (g - 2) + " args!');\n}\n";
  n && (a += "var destructors = [];\n");
  var D = n ? "destructors" : "null";
  p = "throwBindingError invoker fn runDestructors retType classParam".split(" ");
  d = [T, d, f, lc, b[0], b[1]];
  k && (a += "var thisWired = classParam.toWireType(" + D + ", this);\n");
  for (c = 0; c < g - 2; ++c) {
    a += "var arg" + c + "Wired = argType" + c + ".toWireType(" + D + ", arg" + c + "); // " + b[c + 2].name + "\n", p.push("argType" + c), d.push(b[c + 2]);
  }
  k && (u = "thisWired" + (0 < u.length ? ", " : "") + u);
  a += (r ? "var rv = " : "") + "invoker(fn" + (0 < u.length ? ", " : "") + u + ");\n";
  if (n) {
    a += "runDestructors(destructors);\n";
  } else {
    for (c = k ? 1 : 2; c < b.length; ++c) {
      g = 1 === c ? "thisWired" : "arg" + (c - 2) + "Wired", null !== b[c].D && (a += g + "_dtor(" + g + "); // " + b[c].name + "\n", p.push(g + "_dtor"), d.push(b[c].D));
    }
  }
  r && (a += "var ret = retType.fromWireType(rv);\nreturn ret;\n");
  p.push(a + "}\n");
  return sd(Function, p).apply(null, d);
}
var ud = [], Y = [{}, {value:void 0}, {value:null}, {value:!0}, {value:!1}];
function vd(a) {
  4 < a && 0 === --Y[a].S && (Y[a] = void 0, ud.push(a));
}
function wd() {
  for (var a = 0, b = 5; b < Y.length; ++b) {
    void 0 !== Y[b] && ++a;
  }
  return a;
}
function xd() {
  for (var a = 5; a < Y.length; ++a) {
    if (void 0 !== Y[a]) {
      return Y[a];
    }
  }
  return null;
}
function yd() {
  e.count_emval_handles = wd;
  e.get_first_emval = xd;
}
function Xc(a) {
  switch(a) {
    case void 0:
      return 1;
    case null:
      return 2;
    case !0:
      return 3;
    case !1:
      return 4;
    default:
      var b = ud.length ? ud.pop() : Y.length;
      Y[b] = {S:1, value:a};
      return b;
  }
}
function Vc(a) {
  if (null === a) {
    return "null";
  }
  var b = typeof a;
  return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;
}
function zd(a, b) {
  switch(b) {
    case 2:
      return function(a) {
        return this.fromWireType(Ca[a >> 2]);
      };
    case 3:
      return function(a) {
        return this.fromWireType(Da[a >> 3]);
      };
    default:
      throw new TypeError("Unknown float type: " + a);
  }
}
function Ad(a, b, c) {
  switch(b) {
    case 0:
      return c ? function(a) {
        return z[a];
      } : function(a) {
        return y[a];
      };
    case 1:
      return c ? function(a) {
        return A[a >> 1];
      } : function(a) {
        return Ba[a >> 1];
      };
    case 2:
      return c ? function(a) {
        return B[a >> 2];
      } : function(a) {
        return C[a >> 2];
      };
    default:
      throw new TypeError("Unknown integer type: " + a);
  }
}
function Bd(a, b) {
  var c = oc[a];
  void 0 === c && T(b + " has unknown type " + od(a));
  return c;
}
function Cd() {
  void 0 === Cd.start && (Cd.start = Date.now());
  return 1E3 * (Date.now() - Cd.start) | 0;
}
var Dd = (za("GMT", 577184, 4), 577184);
function Ed(a, b) {
  a = new Date(1000 * B[a >> 2]);
  B[b >> 2] = a.getUTCSeconds();
  B[b + 4 >> 2] = a.getUTCMinutes();
  B[b + 8 >> 2] = a.getUTCHours();
  B[b + 12 >> 2] = a.getUTCDate();
  B[b + 16 >> 2] = a.getUTCMonth();
  B[b + 20 >> 2] = a.getUTCFullYear() - 1900;
  B[b + 24 >> 2] = a.getUTCDay();
  B[b + 36 >> 2] = 0;
  B[b + 32 >> 2] = 0;
  B[b + 28 >> 2] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864E5 | 0;
  B[b + 40 >> 2] = Dd;
  return b;
}
function Fd(a) {
  v("Cannot enlarge memory arrays to size " + a + " bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " + z.length + ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ");
}
cc();
Hb = Array(4096);
Wb(K, "/");
N("/tmp");
N("/home");
N("/home/web_user");
(function() {
  N("/dev");
  rb(259, {read:function() {
    return 0;
  }, write:function(a, b, c, k) {
    return k;
  }});
  Yb("/dev/null", 259);
  qb(1280, tb);
  qb(1536, ub);
  Yb("/dev/tty", 1280);
  Yb("/dev/tty1", 1536);
  if ("object" === typeof crypto && "function" === typeof crypto.getRandomValues) {
    var a = new Uint8Array(1);
    var b = function() {
      crypto.getRandomValues(a);
      return a[0];
    };
  } else {
    if (m) {
      try {
        var c = require("crypto");
        b = function() {
          return c.randomBytes(1)[0];
        };
      } catch (d) {
      }
    }
  }
  b || (b = function() {
    v("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };");
  });
  fc("random", b);
  fc("urandom", b);
  N("/dev/shm");
  N("/dev/shm/tmp");
})();
N("/proc");
N("/proc/self");
N("/proc/self/fd");
Wb({s:function() {
  var a = wb("/proc/self", "fd", 16895, 73);
  a.f = {lookup:function(a, c) {
    var b = Fb[+c];
    if (!b) {
      throw new J(9);
    }
    a = {parent:null, s:{wa:"fake"}, f:{readlink:function() {
      return b.path;
    }}};
    return a.parent = a;
  }};
  return a;
}}, "/proc/self/fd");
if (ea) {
  var fs = require("fs"), Ab = require("path");
  L.bb();
}
tc = e.InternalError = sc(Error, "InternalError");
wc();
yc = e.BindingError = sc(Error, "BindingError");
Oc();
ld();
gd();
nd = e.UnboundTypeError = sc(Error, "UnboundTypeError");
yd();
var Gd = !0;
function na(a) {
  for (var b = [], c = 0; c < a.length; c++) {
    var d = a[c];
    255 < d && (Gd && assert(!1, "Character code " + d + " (" + String.fromCharCode(d) + ")  at offset " + c + " not in 0x00-0xFF."), d &= 255);
    b.push(String.fromCharCode(d));
  }
  return b.join("");
}
var Hd = "function" === typeof atob ? atob : function(a) {
  var b = "", c = 0;
  a = a.replace(/[^A-Za-z0-9\+\/=]/g, "");
  do {
    var d = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(c++));
    var f = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(c++));
    var g = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(c++));
    var k = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(c++));
    d = d << 2 | f >> 4;
    f = (f & 15) << 4 | g >> 2;
    var n = (g & 3) << 6 | k;
    b += String.fromCharCode(d);
    64 !== g && (b += String.fromCharCode(f));
    64 !== k && (b += String.fromCharCode(n));
  } while (c < a.length);
  return b;
};
function t(a) {
  if (String.prototype.startsWith ? a.startsWith(Va) : 0 === a.indexOf(Va)) {
    a = a.slice(Va.length);
    if ("boolean" === typeof m && m) {
      try {
        var b = Buffer.from(a, "base64");
      } catch (g) {
        b = new Buffer(a, "base64");
      }
      var c = new Uint8Array(b.buffer, b.byteOffset, b.byteLength);
    } else {
      try {
        var d = Hd(a), f = new Uint8Array(d.length);
        for (b = 0; b < d.length; ++b) {
          f[b] = d.charCodeAt(b);
        }
        c = f;
      } catch (g) {
        throw Error("Converting base64 string to bytes failed.");
      }
    }
    return c;
  }
}
var Id = {Math:Math, Int8Array:Int8Array, Int16Array:Int16Array, Int32Array:Int32Array, Uint8Array:Uint8Array, Uint16Array:Uint16Array, Float32Array:Float32Array, Float64Array:Float64Array}, Ld = {abort:v, setTempRet0:function(a) {
  ta = a;
}, getTempRet0:function() {
  return ta;
}, abortStackOverflow:function(a) {
  v("Stack overflow! Attempted to allocate " + a + " bytes on the stack, but stack has only " + (5820192 - qa() + a) + " bytes available!");
}, nullFunc_i:function(a) {
  E(a, "i");
}, nullFunc_ii:function(a) {
  E(a, "ii");
}, nullFunc_iii:function(a) {
  E(a, "iii");
}, nullFunc_iiii:function(a) {
  E(a, "iiii");
}, nullFunc_iiiii:function(a) {
  E(a, "iiiii");
}, nullFunc_iiiiii:function(a) {
  E(a, "iiiiii");
}, nullFunc_iiiiiii:function(a) {
  E(a, "iiiiiii");
}, nullFunc_iiiiiiii:function(a) {
  E(a, "iiiiiiii");
}, nullFunc_v:function(a) {
  E(a, "v");
}, nullFunc_vi:function(a) {
  E(a, "vi");
}, nullFunc_vii:function(a) {
  E(a, "vii");
}, nullFunc_viii:function(a) {
  E(a, "viii");
}, nullFunc_viiii:function(a) {
  E(a, "viiii");
}, nullFunc_viiiii:function(a) {
  E(a, "viiiii");
}, nullFunc_viiiiii:function(a) {
  E(a, "viiiiii");
}, nullFunc_viiiiiii:function(a) {
  E(a, "viiiiiii");
}, ClassHandle:U, ClassHandle_clone:Hc, ClassHandle_delete:Ic, ClassHandle_deleteLater:Nc, ClassHandle_isAliasOf:zc, ClassHandle_isDeleted:Jc, RegisteredClass:Sc, RegisteredPointer:V, RegisteredPointer_deleteObject:ad, RegisteredPointer_destructor:$c, RegisteredPointer_fromWireType:kd, RegisteredPointer_getPointee:Zc, ___assert_fail:function(a, b, c, d) {
  v("Assertion failed: " + xa(a) + ", at: " + [b ? xa(b) : "unknown filename", c, d ? xa(d) : "unknown function"]);
}, ___cxa_allocate_exception:function(a) {
  return zb(a);
}, ___cxa_begin_catch:function(a) {
  var b = cb[a];
  b && !b.ma && (b.ma = !0, Jd.ia--);
  b && (b.Wa = !1);
  db.push(a);
  eb(fb(a));
  return a;
}, ___cxa_thread_atexit:function() {
  return gb.apply(null, arguments);
}, ___cxa_throw:function(a, b, c) {
  cb[a] = {i:a, Aa:[a], type:b, aa:c, S:0, ma:!1, Wa:!1};
  "uncaught_exception" in Jd ? Jd.ia++ : Jd.ia = 1;
  throw a + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
}, ___cxa_uncaught_exceptions:function() {
  return Jd.ia;
}, ___exception_addRef:eb, ___exception_deAdjust:fb, ___gxx_personality_v0:function() {
}, ___lock:function() {
}, ___setErrNo:nb, ___syscall140:function(a, b) {
  O = b;
  try {
    var c = jc(), d = P(), f = P(), g = P(), k = P();
    a = 4294967296 * d + (f >>> 0);
    if (-9007199254740992 >= a || 9007199254740992 <= a) {
      return -75;
    }
    bc(c, a, k);
    Xa = [c.position >>> 0, (Wa = c.position, 1 <= +Na(Wa) ? 0 < Wa ? (Qa(+Pa(Wa / 4294967296), 4294967295) | 0) >>> 0 : ~~+Oa((Wa - +(~~Wa >>> 0)) / 4294967296) >>> 0 : 0)];
    B[g >> 2] = Xa[0];
    B[g + 4 >> 2] = Xa[1];
    c.ba && 0 === a && 0 === k && (c.ba = null);
    return 0;
  } catch (n) {
    return "undefined" !== typeof ic && n instanceof J || v(n), -n.j;
  }
}, ___syscall146:function(a, b) {
  O = b;
  try {
    var c = jc(), d = P();
    a: {
      var f = P();
      for (b = a = 0; b < f; b++) {
        var g = c, k = B[d + 8 * b >> 2], n = B[d + (8 * b + 4) >> 2], r = void 0;
        if (0 > n || 0 > r) {
          throw new J(22);
        }
        if (null === g.fd) {
          throw new J(9);
        }
        if (0 === (g.flags & 2097155)) {
          throw new J(9);
        }
        if (16384 === (g.node.mode & 61440)) {
          throw new J(21);
        }
        if (!g.g.write) {
          throw new J(22);
        }
        g.flags & 1024 && bc(g, 0, 2);
        var p = "undefined" !== typeof r;
        if (!p) {
          r = g.position;
        } else {
          if (!g.seekable) {
            throw new J(29);
          }
        }
        var u = g.g.write(g, z, k, n, r, void 0);
        p || (g.position += u);
        try {
          if (g.path && Jb.onWriteToFile) {
            Jb.onWriteToFile(g.path);
          }
        } catch (F) {
          console.log("FS.trackingDelegate['onWriteToFile']('" + g.path + "') threw an exception: " + F.message);
        }
        var D = u;
        if (0 > D) {
          var ca = -1;
          break a;
        }
        a += D;
      }
      ca = a;
    }
    return ca;
  } catch (F) {
    return "undefined" !== typeof ic && F instanceof J || v(F), -F.j;
  }
}, ___syscall20:function(a, b) {
  O = b;
  return 42;
}, ___syscall3:function(a, b) {
  O = b;
  try {
    var c = jc(), d = P(), f = P();
    if (0 > f || 0 > g) {
      throw new J(22);
    }
    if (null === c.fd) {
      throw new J(9);
    }
    if (1 === (c.flags & 2097155)) {
      throw new J(9);
    }
    if (16384 === (c.node.mode & 61440)) {
      throw new J(21);
    }
    if (!c.g.read) {
      throw new J(22);
    }
    a = "undefined" !== typeof g;
    if (!a) {
      var g = c.position;
    } else {
      if (!c.seekable) {
        throw new J(29);
      }
    }
    var k = c.g.read(c, z, d, f, g);
    a || (c.position += k);
    return k;
  } catch (n) {
    return "undefined" !== typeof ic && n instanceof J || v(n), -n.j;
  }
}, ___syscall5:function(a, b) {
  O = b;
  try {
    var c = xa(P()), d = P(), f = P();
    return $b(c, d, f).fd;
  } catch (g) {
    return "undefined" !== typeof ic && g instanceof J || v(g), -g.j;
  }
}, ___syscall54:function(a, b) {
  O = b;
  try {
    var c = jc(), d = P();
    switch(d) {
      case 21509:
      case 21505:
        return c.tty ? 0 : -25;
      case 21510:
      case 21511:
      case 21512:
      case 21506:
      case 21507:
      case 21508:
        return c.tty ? 0 : -25;
      case 21519:
        if (!c.tty) {
          return -25;
        }
        var f = P();
        return B[f >> 2] = 0;
      case 21520:
        return c.tty ? -22 : -25;
      case 21531:
        a = f = P();
        if (!c.g.La) {
          throw new J(25);
        }
        return c.g.La(c, d, a);
      case 21523:
        return c.tty ? 0 : -25;
      case 21524:
        return c.tty ? 0 : -25;
      default:
        v("bad ioctl syscall " + d);
    }
  } catch (g) {
    return "undefined" !== typeof ic && g instanceof J || v(g), -g.j;
  }
}, ___syscall6:function(a, b) {
  O = b;
  try {
    var c = jc();
    if (null === c.fd) {
      throw new J(9);
    }
    c.ba && (c.ba = null);
    try {
      c.g.close && c.g.close(c);
    } catch (d) {
      throw d;
    } finally {
      Fb[c.fd] = null;
    }
    c.fd = null;
    return 0;
  } catch (d) {
    return "undefined" !== typeof ic && d instanceof J || v(d), -d.j;
  }
}, ___unlock:function() {
}, __embind_finalize_value_object:function(a) {
  var b = kc[a];
  delete kc[a];
  var c = b.ga, d = b.H, f = b.pa, g = f.map(function(a) {
    return a.Ja;
  }).concat(f.map(function(a) {
    return a.Za;
  }));
  Q([a], g, function(a) {
    var g = {};
    f.forEach(function(b, c) {
      var d = a[c], k = b.Ha, n = b.Ia, p = a[c + f.length], r = b.Ya, Rd = b.$a;
      g[b.Da] = {read:function(a) {
        return d.fromWireType(k(n, a));
      }, write:function(a, b) {
        var c = [];
        r(Rd, a, p.toWireType(c, b));
        lc(c);
      }};
    });
    return [{name:b.name, fromWireType:function(a) {
      var b = {}, c;
      for (c in g) {
        b[c] = g[c].read(a);
      }
      d(a);
      return b;
    }, toWireType:function(a, b) {
      for (var f in g) {
        if (!(f in b)) {
          throw new TypeError("Missing field");
        }
      }
      var k = c();
      for (f in g) {
        g[f].write(k, b[f]);
      }
      null !== a && a.push(d, k);
      return k;
    }, argPackAdvance:8, readValueFromPointer:mc, D:d}];
  });
}, __embind_register_bool:function(a, b, c, d, f) {
  var g = vc(c);
  b = S(b);
  R(a, {name:b, fromWireType:function(a) {
    return !!a;
  }, toWireType:function(a, b) {
    return b ? d : f;
  }, argPackAdvance:8, readValueFromPointer:function(a) {
    if (1 === c) {
      var d = z;
    } else {
      if (2 === c) {
        d = A;
      } else {
        if (4 === c) {
          d = B;
        } else {
          throw new TypeError("Unknown boolean type size: " + b);
        }
      }
    }
    return this.fromWireType(d[a >> g]);
  }, D:null});
}, __embind_register_class:function(a, b, c, d, f, g, k, n, r, p, u, D, ca) {
  u = S(u);
  g = W(f, g);
  n && (n = W(k, n));
  p && (p = W(r, p));
  ca = W(D, ca);
  var F = qc(u);
  Rc(F, function() {
    qd("Cannot construct " + u + " due to unbound types", [d]);
  });
  Q([a, b, c], d ? [d] : [], function(b) {
    b = b[0];
    if (d) {
      var c = b.h;
      var f = c.M;
    } else {
      f = U.prototype;
    }
    b = rc(F, function() {
      if (Object.getPrototypeOf(this) !== k) {
        throw new yc("Use 'new' to construct " + u);
      }
      if (void 0 === r.K) {
        throw new yc(u + " has no accessible constructor");
      }
      var a = r.K[arguments.length];
      if (void 0 === a) {
        throw new yc("Tried to invoke ctor of " + u + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(r.K).toString() + ") parameters instead!");
      }
      return a.apply(this, arguments);
    });
    var k = Object.create(f, {constructor:{value:b}});
    b.prototype = k;
    var r = new Sc(u, b, k, ca, c, g, n, p);
    c = new V(u, r, !0, !1, !1);
    f = new V(u + "*", r, !1, !1, !1);
    var D = new V(u + " const*", r, !1, !0, !1);
    Pc[a] = {pointerType:f, Ba:D};
    md(F, b);
    return [c, f, D];
  });
}, __embind_register_class_constructor:function(a, b, c, d, f, g) {
  var k = rd(b, c);
  f = W(d, f);
  Q([], [a], function(a) {
    a = a[0];
    var c = "constructor " + a.name;
    void 0 === a.h.K && (a.h.K = []);
    if (void 0 !== a.h.K[b - 1]) {
      throw new yc("Cannot register multiple constructors with identical number of parameters (" + (b - 1) + ") for class '" + a.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
    }
    a.h.K[b - 1] = function() {
      qd("Cannot construct " + a.name + " due to unbound types", k);
    };
    Q([], k, function(d) {
      a.h.K[b - 1] = function() {
        arguments.length !== b - 1 && T(c + " called with " + arguments.length + " arguments, expected " + (b - 1));
        var a = [], k = Array(b);
        k[0] = g;
        for (var n = 1; n < b; ++n) {
          k[n] = d[n].toWireType(a, arguments[n - 1]);
        }
        k = f.apply(null, k);
        lc(a);
        return d[0].fromWireType(k);
      };
      return [];
    });
    return [];
  });
}, __embind_register_class_function:function(a, b, c, d, f, g, k, n) {
  var r = rd(c, d);
  b = S(b);
  g = W(f, g);
  Q([], [a], function(a) {
    function d() {
      qd("Cannot call " + f + " due to unbound types", r);
    }
    a = a[0];
    var f = a.name + "." + b;
    n && a.h.Ta.push(b);
    var p = a.h.M, F = p[b];
    void 0 === F || void 0 === F.o && F.className !== a.name && F.V === c - 2 ? (d.V = c - 2, d.className = a.name, p[b] = d) : (Qc(p, b, f), p[b].o[c - 2] = d);
    Q([], r, function(d) {
      d = td(f, d, a, g, k);
      void 0 === p[b].o ? (d.V = c - 2, p[b] = d) : p[b].o[c - 2] = d;
      return [];
    });
    return [];
  });
}, __embind_register_emval:function(a, b) {
  b = S(b);
  R(a, {name:b, fromWireType:function(a) {
    var b = Y[a].value;
    vd(a);
    return b;
  }, toWireType:function(a, b) {
    return Xc(b);
  }, argPackAdvance:8, readValueFromPointer:mc, D:null});
}, __embind_register_float:function(a, b, c) {
  c = vc(c);
  b = S(b);
  R(a, {name:b, fromWireType:function(a) {
    return a;
  }, toWireType:function(a, b) {
    if ("number" !== typeof b && "boolean" !== typeof b) {
      throw new TypeError('Cannot convert "' + Vc(b) + '" to ' + this.name);
    }
    return b;
  }, argPackAdvance:8, readValueFromPointer:zd(b, c), D:null});
}, __embind_register_function:function(a, b, c, d, f, g) {
  var k = rd(b, c);
  a = S(a);
  f = W(d, f);
  Rc(a, function() {
    qd("Cannot call " + a + " due to unbound types", k);
  }, b - 1);
  Q([], k, function(c) {
    c = [c[0], null].concat(c.slice(1));
    md(a, td(a, c, null, f, g), b - 1);
    return [];
  });
}, __embind_register_integer:function(a, b, c, d, f) {
  function g(a) {
    return a;
  }
  b = S(b);
  -1 === f && (f = 4294967295);
  var k = vc(c);
  if (0 === d) {
    var n = 32 - 8 * c;
    g = function(a) {
      return a << n >>> n;
    };
  }
  var r = -1 != b.indexOf("unsigned");
  R(a, {name:b, fromWireType:g, toWireType:function(a, c) {
    if ("number" !== typeof c && "boolean" !== typeof c) {
      throw new TypeError('Cannot convert "' + Vc(c) + '" to ' + this.name);
    }
    if (c < d || c > f) {
      throw new TypeError('Passing a number "' + Vc(c) + '" from JS side to C/C++ side to an argument of type "' + b + '", which is outside the valid range [' + d + ", " + f + "]!");
    }
    return r ? c >>> 0 : c | 0;
  }, argPackAdvance:8, readValueFromPointer:Ad(b, k, 0 !== d), D:null});
}, __embind_register_memory_view:function(a, b, c) {
  function d(a) {
    a >>= 2;
    return new f(C.buffer, C[a + 1], C[a]);
  }
  var f = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array][b];
  c = S(c);
  R(a, {name:c, fromWireType:d, argPackAdvance:8, readValueFromPointer:d}, {Ka:!0});
}, __embind_register_std_string:function(a, b) {
  b = S(b);
  var c = "std::string" === b;
  R(a, {name:b, fromWireType:function(a) {
    var b = C[a >> 2];
    if (c) {
      var d = y[a + 4 + b], k = 0;
      0 != d && (k = d, y[a + 4 + b] = 0);
      var n = a + 4;
      for (d = 0; d <= b; ++d) {
        var r = a + 4 + d;
        if (0 == y[r]) {
          n = xa(n);
          if (void 0 === p) {
            var p = n;
          } else {
            p += String.fromCharCode(0), p += n;
          }
          n = r + 1;
        }
      }
      0 != k && (y[a + 4 + b] = k);
    } else {
      p = Array(b);
      for (d = 0; d < b; ++d) {
        p[d] = String.fromCharCode(y[a + 4 + d]);
      }
      p = p.join("");
    }
    X(a);
    return p;
  }, toWireType:function(a, b) {
    b instanceof ArrayBuffer && (b = new Uint8Array(b));
    var d = "string" === typeof b;
    d || b instanceof Uint8Array || b instanceof Uint8ClampedArray || b instanceof Int8Array || T("Cannot pass non-string to std::string");
    var f = (c && d ? function() {
      return Aa(b);
    } : function() {
      return b.length;
    })(), n = zb(4 + f + 1);
    C[n >> 2] = f;
    if (c && d) {
      za(b, n + 4, f + 1);
    } else {
      if (d) {
        for (d = 0; d < f; ++d) {
          var r = b.charCodeAt(d);
          255 < r && (X(n), T("String has UTF-16 code units that do not fit in 8 bits"));
          y[n + 4 + d] = r;
        }
      } else {
        for (d = 0; d < f; ++d) {
          y[n + 4 + d] = b[d];
        }
      }
    }
    null !== a && a.push(X, n);
    return n;
  }, argPackAdvance:8, readValueFromPointer:mc, D:function(a) {
    X(a);
  }});
}, __embind_register_std_wstring:function(a, b, c) {
  c = S(c);
  if (2 === b) {
    var d = function() {
      return Ba;
    };
    var f = 1;
  } else {
    4 === b && (d = function() {
      return C;
    }, f = 2);
  }
  R(a, {name:c, fromWireType:function(a) {
    for (var b = d(), c = C[a >> 2], g = Array(c), p = a + 4 >> f, u = 0; u < c; ++u) {
      g[u] = String.fromCharCode(b[p + u]);
    }
    X(a);
    return g.join("");
  }, toWireType:function(a, c) {
    var g = d(), k = c.length, p = zb(4 + k * b);
    C[p >> 2] = k;
    for (var u = p + 4 >> f, D = 0; D < k; ++D) {
      g[u + D] = c.charCodeAt(D);
    }
    null !== a && a.push(X, p);
    return p;
  }, argPackAdvance:8, readValueFromPointer:mc, D:function(a) {
    X(a);
  }});
}, __embind_register_value_object:function(a, b, c, d, f, g) {
  kc[a] = {name:S(b), ga:W(c, d), H:W(f, g), pa:[]};
}, __embind_register_value_object_field:function(a, b, c, d, f, g, k, n, r, p) {
  kc[a].pa.push({Da:S(b), Ja:c, Ha:W(d, f), Ia:g, Za:k, Ya:W(n, r), $a:p});
}, __embind_register_void:function(a, b) {
  b = S(b);
  R(a, {zd:!0, name:b, argPackAdvance:0, fromWireType:function() {
  }, toWireType:function() {
  }});
}, __emval_decref:vd, __emval_incref:function(a) {
  4 < a && (Y[a].S += 1);
}, __emval_register:Xc, __emval_take_value:function(a, b) {
  a = Bd(a, "_emval_take_value");
  a = a.readValueFromPointer(b);
  return Xc(a);
}, _abort:function() {
  e.abort();
}, _atexit:gb, _clock:Cd, _embind_repr:Vc, _emscripten_get_heap_size:function() {
  return z.length;
}, _emscripten_memcpy_big:function(a, b, c) {
  y.set(y.subarray(b, b + c), a);
}, _emscripten_resize_heap:function(a) {
  Fd(a);
}, _exit:function(a) {
  Kd(a);
}, _ftime:function(a) {
  var b = Date.now();
  B[a >> 2] = b / 1000 | 0;
  A[a + 4 >> 1] = b % 1000;
  A[a + 6 >> 1] = 0;
  return A[a + 8 >> 1] = 0;
}, _gmtime:function(a) {
  return Ed(a, 577136);
}, _gmtime_r:Ed, _pthread_create:function() {
  return 11;
}, _pthread_exit:function(a) {
  Kd(a);
}, _pthread_join:function() {
}, _sysconf:function(a) {
  switch(a) {
    case 30:
      return 16384;
    case 85:
      return y.length / 16384;
    case 132:
    case 133:
    case 12:
    case 137:
    case 138:
    case 15:
    case 235:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 149:
    case 13:
    case 10:
    case 236:
    case 153:
    case 9:
    case 21:
    case 22:
    case 159:
    case 154:
    case 14:
    case 77:
    case 78:
    case 139:
    case 80:
    case 81:
    case 82:
    case 68:
    case 67:
    case 164:
    case 11:
    case 29:
    case 47:
    case 48:
    case 95:
    case 52:
    case 51:
    case 46:
      return 200809;
    case 79:
      return 0;
    case 27:
    case 246:
    case 127:
    case 128:
    case 23:
    case 24:
    case 160:
    case 161:
    case 181:
    case 182:
    case 242:
    case 183:
    case 184:
    case 243:
    case 244:
    case 245:
    case 165:
    case 178:
    case 179:
    case 49:
    case 50:
    case 168:
    case 169:
    case 175:
    case 170:
    case 171:
    case 172:
    case 97:
    case 76:
    case 32:
    case 173:
    case 35:
      return -1;
    case 176:
    case 177:
    case 7:
    case 155:
    case 8:
    case 157:
    case 125:
    case 126:
    case 92:
    case 93:
    case 129:
    case 130:
    case 131:
    case 94:
    case 91:
      return 1;
    case 74:
    case 60:
    case 69:
    case 70:
    case 4:
      return 1024;
    case 31:
    case 42:
    case 72:
      return 32;
    case 87:
    case 26:
    case 33:
      return 2147483647;
    case 34:
    case 1:
      return 47839;
    case 38:
    case 36:
      return 99;
    case 43:
    case 37:
      return 2048;
    case 0:
      return 2097152;
    case 3:
      return 65536;
    case 28:
      return 32768;
    case 44:
      return 32767;
    case 75:
      return 16384;
    case 39:
      return 1000;
    case 89:
      return 700;
    case 71:
      return 256;
    case 40:
      return 255;
    case 2:
      return 100;
    case 180:
      return 64;
    case 25:
      return 20;
    case 5:
      return 16;
    case 6:
      return 6;
    case 73:
      return 4;
    case 84:
      return "object" === typeof navigator ? navigator.hardwareConcurrency || 1 : 1;
  }
  nb(22);
  return -1;
}, abortOnCannotGrowMemory:Fd, attachFinalizer:Gc, constNoSmartPtrRawPointerToWireType:Uc, count_emval_handles:wd, craftInvokerFunction:td, createNamedFunction:rc, demangle:Za, demangleAll:$a, detachFinalizer:Dc, downcastPointer:bd, embind__requireFunction:W, embind_init_charCodes:wc, ensureOverloadTable:Qc, exposePublicSymbol:Rc, extendError:sc, floatReadValueFromPointer:zd, flushPendingDeletes:Mc, genericPointerToWireType:Wc, getBasestPointer:hd, getInheritedInstance:id, getInheritedInstanceCount:cd, 
getLiveInheritedInstances:ed, getShiftFromSize:vc, getTypeName:od, get_first_emval:xd, heap32VectorToArray:rd, init_ClassHandle:Oc, init_RegisteredPointer:ld, init_embind:gd, init_emval:yd, integerReadValueFromPointer:Ad, jsStackTrace:ab, makeClassHandle:jd, makeLegalFunctionName:qc, new_:sd, nonConstNoSmartPtrRawPointerToWireType:Yc, readLatin1String:S, registerType:R, releaseClassHandle:Fc, replacePublicSymbol:md, requireRegisteredType:Bd, runDestructor:Ec, runDestructors:lc, setDelayFunction:fd, 
shallowCopyInternalPointer:Ac, simpleReadValueFromPointer:mc, stackTrace:bb, throwBindingError:T, throwInstanceAlreadyDeleted:Bc, throwInternalError:uc, throwUnboundTypeError:qd, upcastPointer:Tc, whenDependentTypesAreResolved:Q, tempDoublePtr:577296, DYNAMICTOP_PTR:577280, ___dso_handle:577120};
// EMSCRIPTEN_START_ASM

var Z = (/** @suppress {uselessCode} */ function(global,env,buffer) {

'almost asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0,
  ___dso_handle=env.___dso_handle|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  Math_floor=global.Math.floor,
  Math_abs=global.Math.abs,
  Math_sqrt=global.Math.sqrt,
  Math_ceil=global.Math.ceil,
  Math_imul=global.Math.imul,
  Math_min=global.Math.min,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  abortStackOverflow=env.abortStackOverflow,
  nullFunc_i=env.nullFunc_i,
  nullFunc_ii=env.nullFunc_ii,
  nullFunc_iii=env.nullFunc_iii,
  nullFunc_iiii=env.nullFunc_iiii,
  nullFunc_iiiii=env.nullFunc_iiiii,
  nullFunc_iiiiii=env.nullFunc_iiiiii,
  nullFunc_iiiiiii=env.nullFunc_iiiiiii,
  nullFunc_iiiiiiii=env.nullFunc_iiiiiiii,
  nullFunc_v=env.nullFunc_v,
  nullFunc_vi=env.nullFunc_vi,
  nullFunc_vii=env.nullFunc_vii,
  nullFunc_viii=env.nullFunc_viii,
  nullFunc_viiii=env.nullFunc_viiii,
  nullFunc_viiiii=env.nullFunc_viiiii,
  nullFunc_viiiiii=env.nullFunc_viiiiii,
  nullFunc_viiiiiii=env.nullFunc_viiiiiii,
  ClassHandle=env.ClassHandle,
  ClassHandle_clone=env.ClassHandle_clone,
  ClassHandle_delete=env.ClassHandle_delete,
  ClassHandle_deleteLater=env.ClassHandle_deleteLater,
  ClassHandle_isAliasOf=env.ClassHandle_isAliasOf,
  ClassHandle_isDeleted=env.ClassHandle_isDeleted,
  RegisteredClass=env.RegisteredClass,
  RegisteredPointer=env.RegisteredPointer,
  RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject,
  RegisteredPointer_destructor=env.RegisteredPointer_destructor,
  RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType,
  RegisteredPointer_getPointee=env.RegisteredPointer_getPointee,
  ___assert_fail=env.___assert_fail,
  ___cxa_allocate_exception=env.___cxa_allocate_exception,
  ___cxa_begin_catch=env.___cxa_begin_catch,
  ___cxa_thread_atexit=env.___cxa_thread_atexit,
  ___cxa_throw=env.___cxa_throw,
  ___cxa_uncaught_exceptions=env.___cxa_uncaught_exceptions,
  ___exception_addRef=env.___exception_addRef,
  ___exception_deAdjust=env.___exception_deAdjust,
  ___gxx_personality_v0=env.___gxx_personality_v0,
  ___lock=env.___lock,
  ___setErrNo=env.___setErrNo,
  ___syscall140=env.___syscall140,
  ___syscall146=env.___syscall146,
  ___syscall20=env.___syscall20,
  ___syscall3=env.___syscall3,
  ___syscall5=env.___syscall5,
  ___syscall54=env.___syscall54,
  ___syscall6=env.___syscall6,
  ___unlock=env.___unlock,
  __embind_finalize_value_object=env.__embind_finalize_value_object,
  __embind_register_bool=env.__embind_register_bool,
  __embind_register_class=env.__embind_register_class,
  __embind_register_class_constructor=env.__embind_register_class_constructor,
  __embind_register_class_function=env.__embind_register_class_function,
  __embind_register_emval=env.__embind_register_emval,
  __embind_register_float=env.__embind_register_float,
  __embind_register_function=env.__embind_register_function,
  __embind_register_integer=env.__embind_register_integer,
  __embind_register_memory_view=env.__embind_register_memory_view,
  __embind_register_std_string=env.__embind_register_std_string,
  __embind_register_std_wstring=env.__embind_register_std_wstring,
  __embind_register_value_object=env.__embind_register_value_object,
  __embind_register_value_object_field=env.__embind_register_value_object_field,
  __embind_register_void=env.__embind_register_void,
  __emval_decref=env.__emval_decref,
  __emval_incref=env.__emval_incref,
  __emval_register=env.__emval_register,
  __emval_take_value=env.__emval_take_value,
  _abort=env._abort,
  _atexit=env._atexit,
  _clock=env._clock,
  _embind_repr=env._embind_repr,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _exit=env._exit,
  _ftime=env._ftime,
  _gmtime=env._gmtime,
  _gmtime_r=env._gmtime_r,
  _pthread_create=env._pthread_create,
  _pthread_exit=env._pthread_exit,
  _pthread_join=env._pthread_join,
  _sysconf=env._sysconf,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  attachFinalizer=env.attachFinalizer,
  constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType,
  count_emval_handles=env.count_emval_handles,
  craftInvokerFunction=env.craftInvokerFunction,
  createNamedFunction=env.createNamedFunction,
  demangle=env.demangle,
  demangleAll=env.demangleAll,
  detachFinalizer=env.detachFinalizer,
  downcastPointer=env.downcastPointer,
  embind__requireFunction=env.embind__requireFunction,
  embind_init_charCodes=env.embind_init_charCodes,
  ensureOverloadTable=env.ensureOverloadTable,
  exposePublicSymbol=env.exposePublicSymbol,
  extendError=env.extendError,
  floatReadValueFromPointer=env.floatReadValueFromPointer,
  flushPendingDeletes=env.flushPendingDeletes,
  genericPointerToWireType=env.genericPointerToWireType,
  getBasestPointer=env.getBasestPointer,
  getInheritedInstance=env.getInheritedInstance,
  getInheritedInstanceCount=env.getInheritedInstanceCount,
  getLiveInheritedInstances=env.getLiveInheritedInstances,
  getShiftFromSize=env.getShiftFromSize,
  getTypeName=env.getTypeName,
  get_first_emval=env.get_first_emval,
  heap32VectorToArray=env.heap32VectorToArray,
  init_ClassHandle=env.init_ClassHandle,
  init_RegisteredPointer=env.init_RegisteredPointer,
  init_embind=env.init_embind,
  init_emval=env.init_emval,
  integerReadValueFromPointer=env.integerReadValueFromPointer,
  jsStackTrace=env.jsStackTrace,
  makeClassHandle=env.makeClassHandle,
  makeLegalFunctionName=env.makeLegalFunctionName,
  new_=env.new_,
  nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType,
  readLatin1String=env.readLatin1String,
  registerType=env.registerType,
  releaseClassHandle=env.releaseClassHandle,
  replacePublicSymbol=env.replacePublicSymbol,
  requireRegisteredType=env.requireRegisteredType,
  runDestructor=env.runDestructor,
  runDestructors=env.runDestructors,
  setDelayFunction=env.setDelayFunction,
  shallowCopyInternalPointer=env.shallowCopyInternalPointer,
  simpleReadValueFromPointer=env.simpleReadValueFromPointer,
  stackTrace=env.stackTrace,
  throwBindingError=env.throwBindingError,
  throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted,
  throwInternalError=env.throwInternalError,
  throwUnboundTypeError=env.throwUnboundTypeError,
  upcastPointer=env.upcastPointer,
  whenDependentTypesAreResolved=env.whenDependentTypesAreResolved,
  STACKTOP = 577312,
  STACK_MAX = 5820192,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _fill_block($prev_block, $ref_block, $next_block, $with_xor) {
 $prev_block = $prev_block | 0;
 $ref_block = $ref_block | 0;
 $next_block = $next_block | 0;
 $with_xor = $with_xor | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $10000 = 0, $10001 = 0, $10002 = 0, $10003 = 0, $10004 = 0, $10005 = 0, $10006 = 0, $10007 = 0, $10008 = 0, $10009 = 0, $1001 = 0, $10010 = 0, $10011 = 0, $10012 = 0, $10013 = 0;
 var $10014 = 0, $10015 = 0, $10016 = 0, $10017 = 0, $10018 = 0, $10019 = 0, $1002 = 0, $10020 = 0, $10021 = 0, $10022 = 0, $10023 = 0, $10024 = 0, $10025 = 0, $10026 = 0, $10027 = 0, $10028 = 0, $10029 = 0, $1003 = 0, $10030 = 0, $10031 = 0;
 var $10032 = 0, $10033 = 0, $10034 = 0, $10035 = 0, $10036 = 0, $10037 = 0, $10038 = 0, $10039 = 0, $1004 = 0, $10040 = 0, $10041 = 0, $10042 = 0, $10043 = 0, $10044 = 0, $10045 = 0, $10046 = 0, $10047 = 0, $10048 = 0, $10049 = 0, $1005 = 0;
 var $10050 = 0, $10051 = 0, $10052 = 0, $10053 = 0, $10054 = 0, $10055 = 0, $10056 = 0, $10057 = 0, $10058 = 0, $10059 = 0, $1006 = 0, $10060 = 0, $10061 = 0, $10062 = 0, $10063 = 0, $10064 = 0, $10065 = 0, $10066 = 0, $10067 = 0, $10068 = 0;
 var $10069 = 0, $1007 = 0, $10070 = 0, $10071 = 0, $10072 = 0, $10073 = 0, $10074 = 0, $10075 = 0, $10076 = 0, $10077 = 0, $10078 = 0, $10079 = 0, $1008 = 0, $10080 = 0, $10081 = 0, $10082 = 0, $10083 = 0, $10084 = 0, $10085 = 0, $10086 = 0;
 var $10087 = 0, $10088 = 0, $10089 = 0, $1009 = 0, $10090 = 0, $10091 = 0, $10092 = 0, $10093 = 0, $10094 = 0, $10095 = 0, $10096 = 0, $10097 = 0, $10098 = 0, $10099 = 0, $101 = 0, $1010 = 0, $10100 = 0, $10101 = 0, $10102 = 0, $10103 = 0;
 var $10104 = 0, $10105 = 0, $10106 = 0, $10107 = 0, $10108 = 0, $10109 = 0, $1011 = 0, $10110 = 0, $10111 = 0, $10112 = 0, $10113 = 0, $10114 = 0, $10115 = 0, $10116 = 0, $10117 = 0, $10118 = 0, $10119 = 0, $1012 = 0, $10120 = 0, $10121 = 0;
 var $10122 = 0, $10123 = 0, $10124 = 0, $10125 = 0, $10126 = 0, $10127 = 0, $10128 = 0, $10129 = 0, $1013 = 0, $10130 = 0, $10131 = 0, $10132 = 0, $10133 = 0, $10134 = 0, $10135 = 0, $10136 = 0, $10137 = 0, $10138 = 0, $10139 = 0, $1014 = 0;
 var $10140 = 0, $10141 = 0, $10142 = 0, $10143 = 0, $10144 = 0, $10145 = 0, $10146 = 0, $10147 = 0, $10148 = 0, $10149 = 0, $1015 = 0, $10150 = 0, $10151 = 0, $10152 = 0, $10153 = 0, $10154 = 0, $10155 = 0, $10156 = 0, $10157 = 0, $10158 = 0;
 var $10159 = 0, $1016 = 0, $10160 = 0, $10161 = 0, $10162 = 0, $10163 = 0, $10164 = 0, $10165 = 0, $10166 = 0, $10167 = 0, $10168 = 0, $10169 = 0, $1017 = 0, $10170 = 0, $10171 = 0, $10172 = 0, $10173 = 0, $10174 = 0, $10175 = 0, $10176 = 0;
 var $10177 = 0, $10178 = 0, $10179 = 0, $1018 = 0, $10180 = 0, $10181 = 0, $10182 = 0, $10183 = 0, $10184 = 0, $10185 = 0, $10186 = 0, $10187 = 0, $10188 = 0, $10189 = 0, $1019 = 0, $10190 = 0, $10191 = 0, $10192 = 0, $10193 = 0, $10194 = 0;
 var $10195 = 0, $10196 = 0, $10197 = 0, $10198 = 0, $10199 = 0, $102 = 0, $1020 = 0, $10200 = 0, $10201 = 0, $10202 = 0, $10203 = 0, $10204 = 0, $10205 = 0, $10206 = 0, $10207 = 0, $10208 = 0, $10209 = 0, $1021 = 0, $10210 = 0, $10211 = 0;
 var $10212 = 0, $10213 = 0, $10214 = 0, $10215 = 0, $10216 = 0, $10217 = 0, $10218 = 0, $10219 = 0, $1022 = 0, $10220 = 0, $10221 = 0, $10222 = 0, $10223 = 0, $10224 = 0, $10225 = 0, $10226 = 0, $10227 = 0, $10228 = 0, $10229 = 0, $1023 = 0;
 var $10230 = 0, $10231 = 0, $10232 = 0, $10233 = 0, $10234 = 0, $10235 = 0, $10236 = 0, $10237 = 0, $10238 = 0, $10239 = 0, $1024 = 0, $10240 = 0, $10241 = 0, $10242 = 0, $10243 = 0, $10244 = 0, $10245 = 0, $10246 = 0, $10247 = 0, $10248 = 0;
 var $10249 = 0, $1025 = 0, $10250 = 0, $10251 = 0, $10252 = 0, $10253 = 0, $10254 = 0, $10255 = 0, $10256 = 0, $10257 = 0, $10258 = 0, $10259 = 0, $1026 = 0, $10260 = 0, $10261 = 0, $10262 = 0, $10263 = 0, $10264 = 0, $10265 = 0, $10266 = 0;
 var $10267 = 0, $10268 = 0, $10269 = 0, $1027 = 0, $10270 = 0, $10271 = 0, $10272 = 0, $10273 = 0, $10274 = 0, $10275 = 0, $10276 = 0, $10277 = 0, $10278 = 0, $10279 = 0, $1028 = 0, $10280 = 0, $10281 = 0, $10282 = 0, $10283 = 0, $10284 = 0;
 var $10285 = 0, $10286 = 0, $10287 = 0, $10288 = 0, $10289 = 0, $1029 = 0, $10290 = 0, $10291 = 0, $10292 = 0, $10293 = 0, $10294 = 0, $10295 = 0, $10296 = 0, $10297 = 0, $10298 = 0, $10299 = 0, $103 = 0, $1030 = 0, $10300 = 0, $10301 = 0;
 var $10302 = 0, $10303 = 0, $10304 = 0, $10305 = 0, $10306 = 0, $10307 = 0, $10308 = 0, $10309 = 0, $1031 = 0, $10310 = 0, $10311 = 0, $10312 = 0, $10313 = 0, $10314 = 0, $10315 = 0, $10316 = 0, $10317 = 0, $10318 = 0, $10319 = 0, $1032 = 0;
 var $10320 = 0, $10321 = 0, $10322 = 0, $10323 = 0, $10324 = 0, $10325 = 0, $10326 = 0, $10327 = 0, $10328 = 0, $10329 = 0, $1033 = 0, $10330 = 0, $10331 = 0, $10332 = 0, $10333 = 0, $10334 = 0, $10335 = 0, $10336 = 0, $10337 = 0, $10338 = 0;
 var $10339 = 0, $1034 = 0, $10340 = 0, $10341 = 0, $10342 = 0, $10343 = 0, $10344 = 0, $10345 = 0, $10346 = 0, $10347 = 0, $10348 = 0, $10349 = 0, $1035 = 0, $10350 = 0, $10351 = 0, $10352 = 0, $10353 = 0, $10354 = 0, $10355 = 0, $10356 = 0;
 var $10357 = 0, $10358 = 0, $10359 = 0, $1036 = 0, $10360 = 0, $10361 = 0, $10362 = 0, $10363 = 0, $10364 = 0, $10365 = 0, $10366 = 0, $10367 = 0, $10368 = 0, $10369 = 0, $1037 = 0, $10370 = 0, $10371 = 0, $10372 = 0, $10373 = 0, $10374 = 0;
 var $10375 = 0, $10376 = 0, $10377 = 0, $10378 = 0, $10379 = 0, $1038 = 0, $10380 = 0, $10381 = 0, $10382 = 0, $10383 = 0, $10384 = 0, $10385 = 0, $10386 = 0, $10387 = 0, $10388 = 0, $10389 = 0, $1039 = 0, $10390 = 0, $10391 = 0, $10392 = 0;
 var $10393 = 0, $10394 = 0, $10395 = 0, $10396 = 0, $10397 = 0, $10398 = 0, $10399 = 0, $104 = 0, $1040 = 0, $10400 = 0, $10401 = 0, $10402 = 0, $10403 = 0, $10404 = 0, $10405 = 0, $10406 = 0, $10407 = 0, $10408 = 0, $10409 = 0, $1041 = 0;
 var $10410 = 0, $10411 = 0, $10412 = 0, $10413 = 0, $10414 = 0, $10415 = 0, $10416 = 0, $10417 = 0, $10418 = 0, $10419 = 0, $1042 = 0, $10420 = 0, $10421 = 0, $10422 = 0, $10423 = 0, $10424 = 0, $10425 = 0, $10426 = 0, $10427 = 0, $10428 = 0;
 var $10429 = 0, $1043 = 0, $10430 = 0, $10431 = 0, $10432 = 0, $10433 = 0, $10434 = 0, $10435 = 0, $10436 = 0, $10437 = 0, $10438 = 0, $10439 = 0, $1044 = 0, $10440 = 0, $10441 = 0, $10442 = 0, $10443 = 0, $10444 = 0, $10445 = 0, $10446 = 0;
 var $10447 = 0, $10448 = 0, $10449 = 0, $1045 = 0, $10450 = 0, $10451 = 0, $10452 = 0, $10453 = 0, $10454 = 0, $10455 = 0, $10456 = 0, $10457 = 0, $10458 = 0, $10459 = 0, $1046 = 0, $10460 = 0, $10461 = 0, $10462 = 0, $10463 = 0, $10464 = 0;
 var $10465 = 0, $10466 = 0, $10467 = 0, $10468 = 0, $10469 = 0, $1047 = 0, $10470 = 0, $10471 = 0, $10472 = 0, $10473 = 0, $10474 = 0, $10475 = 0, $10476 = 0, $10477 = 0, $10478 = 0, $10479 = 0, $1048 = 0, $10480 = 0, $10481 = 0, $10482 = 0;
 var $10483 = 0, $10484 = 0, $10485 = 0, $10486 = 0, $10487 = 0, $10488 = 0, $10489 = 0, $1049 = 0, $10490 = 0, $10491 = 0, $10492 = 0, $10493 = 0, $10494 = 0, $10495 = 0, $10496 = 0, $10497 = 0, $10498 = 0, $10499 = 0, $105 = 0, $1050 = 0;
 var $10500 = 0, $10501 = 0, $10502 = 0, $10503 = 0, $10504 = 0, $10505 = 0, $10506 = 0, $10507 = 0, $10508 = 0, $10509 = 0, $1051 = 0, $10510 = 0, $10511 = 0, $10512 = 0, $10513 = 0, $10514 = 0, $10515 = 0, $10516 = 0, $10517 = 0, $10518 = 0;
 var $10519 = 0, $1052 = 0, $10520 = 0, $10521 = 0, $10522 = 0, $10523 = 0, $10524 = 0, $10525 = 0, $10526 = 0, $10527 = 0, $10528 = 0, $10529 = 0, $1053 = 0, $10530 = 0, $10531 = 0, $10532 = 0, $10533 = 0, $10534 = 0, $10535 = 0, $10536 = 0;
 var $10537 = 0, $10538 = 0, $10539 = 0, $1054 = 0, $10540 = 0, $10541 = 0, $10542 = 0, $10543 = 0, $10544 = 0, $10545 = 0, $10546 = 0, $10547 = 0, $10548 = 0, $10549 = 0, $1055 = 0, $10550 = 0, $10551 = 0, $10552 = 0, $10553 = 0, $10554 = 0;
 var $10555 = 0, $10556 = 0, $10557 = 0, $10558 = 0, $10559 = 0, $1056 = 0, $10560 = 0, $10561 = 0, $10562 = 0, $10563 = 0, $10564 = 0, $10565 = 0, $10566 = 0, $10567 = 0, $10568 = 0, $10569 = 0, $1057 = 0, $10570 = 0, $10571 = 0, $10572 = 0;
 var $10573 = 0, $10574 = 0, $10575 = 0, $10576 = 0, $10577 = 0, $10578 = 0, $10579 = 0, $1058 = 0, $10580 = 0, $10581 = 0, $10582 = 0, $10583 = 0, $10584 = 0, $10585 = 0, $10586 = 0, $10587 = 0, $10588 = 0, $10589 = 0, $1059 = 0, $10590 = 0;
 var $10591 = 0, $10592 = 0, $10593 = 0, $10594 = 0, $10595 = 0, $10596 = 0, $10597 = 0, $10598 = 0, $10599 = 0, $106 = 0, $1060 = 0, $10600 = 0, $10601 = 0, $10602 = 0, $10603 = 0, $10604 = 0, $10605 = 0, $10606 = 0, $10607 = 0, $10608 = 0;
 var $10609 = 0, $1061 = 0, $10610 = 0, $10611 = 0, $10612 = 0, $10613 = 0, $10614 = 0, $10615 = 0, $10616 = 0, $10617 = 0, $10618 = 0, $10619 = 0, $1062 = 0, $10620 = 0, $10621 = 0, $10622 = 0, $10623 = 0, $10624 = 0, $10625 = 0, $10626 = 0;
 var $10627 = 0, $10628 = 0, $10629 = 0, $1063 = 0, $10630 = 0, $10631 = 0, $10632 = 0, $10633 = 0, $10634 = 0, $10635 = 0, $10636 = 0, $10637 = 0, $10638 = 0, $10639 = 0, $1064 = 0, $10640 = 0, $10641 = 0, $10642 = 0, $10643 = 0, $10644 = 0;
 var $10645 = 0, $10646 = 0, $10647 = 0, $10648 = 0, $10649 = 0, $1065 = 0, $10650 = 0, $10651 = 0, $10652 = 0, $10653 = 0, $10654 = 0, $10655 = 0, $10656 = 0, $10657 = 0, $10658 = 0, $10659 = 0, $1066 = 0, $10660 = 0, $10661 = 0, $10662 = 0;
 var $10663 = 0, $10664 = 0, $10665 = 0, $10666 = 0, $10667 = 0, $10668 = 0, $10669 = 0, $1067 = 0, $10670 = 0, $10671 = 0, $10672 = 0, $10673 = 0, $10674 = 0, $10675 = 0, $10676 = 0, $10677 = 0, $10678 = 0, $10679 = 0, $1068 = 0, $10680 = 0;
 var $10681 = 0, $10682 = 0, $10683 = 0, $10684 = 0, $10685 = 0, $10686 = 0, $10687 = 0, $10688 = 0, $10689 = 0, $1069 = 0, $10690 = 0, $10691 = 0, $10692 = 0, $10693 = 0, $10694 = 0, $10695 = 0, $10696 = 0, $10697 = 0, $10698 = 0, $10699 = 0;
 var $107 = 0, $1070 = 0, $10700 = 0, $10701 = 0, $10702 = 0, $10703 = 0, $10704 = 0, $10705 = 0, $10706 = 0, $10707 = 0, $10708 = 0, $10709 = 0, $1071 = 0, $10710 = 0, $10711 = 0, $10712 = 0, $10713 = 0, $10714 = 0, $10715 = 0, $10716 = 0;
 var $10717 = 0, $10718 = 0, $10719 = 0, $1072 = 0, $10720 = 0, $10721 = 0, $10722 = 0, $10723 = 0, $10724 = 0, $10725 = 0, $10726 = 0, $10727 = 0, $10728 = 0, $10729 = 0, $1073 = 0, $10730 = 0, $10731 = 0, $10732 = 0, $10733 = 0, $10734 = 0;
 var $10735 = 0, $10736 = 0, $10737 = 0, $10738 = 0, $10739 = 0, $1074 = 0, $10740 = 0, $10741 = 0, $10742 = 0, $10743 = 0, $10744 = 0, $10745 = 0, $10746 = 0, $10747 = 0, $10748 = 0, $10749 = 0, $1075 = 0, $10750 = 0, $10751 = 0, $10752 = 0;
 var $10753 = 0, $10754 = 0, $10755 = 0, $10756 = 0, $10757 = 0, $10758 = 0, $10759 = 0, $1076 = 0, $10760 = 0, $10761 = 0, $10762 = 0, $10763 = 0, $10764 = 0, $10765 = 0, $10766 = 0, $10767 = 0, $10768 = 0, $10769 = 0, $1077 = 0, $10770 = 0;
 var $10771 = 0, $10772 = 0, $10773 = 0, $10774 = 0, $10775 = 0, $10776 = 0, $10777 = 0, $10778 = 0, $10779 = 0, $1078 = 0, $10780 = 0, $10781 = 0, $10782 = 0, $10783 = 0, $10784 = 0, $10785 = 0, $10786 = 0, $10787 = 0, $10788 = 0, $10789 = 0;
 var $1079 = 0, $10790 = 0, $10791 = 0, $10792 = 0, $10793 = 0, $10794 = 0, $10795 = 0, $10796 = 0, $10797 = 0, $10798 = 0, $10799 = 0, $108 = 0, $1080 = 0, $10800 = 0, $10801 = 0, $10802 = 0, $10803 = 0, $10804 = 0, $10805 = 0, $10806 = 0;
 var $10807 = 0, $10808 = 0, $10809 = 0, $1081 = 0, $10810 = 0, $10811 = 0, $10812 = 0, $10813 = 0, $10814 = 0, $10815 = 0, $10816 = 0, $10817 = 0, $10818 = 0, $10819 = 0, $1082 = 0, $10820 = 0, $10821 = 0, $10822 = 0, $10823 = 0, $10824 = 0;
 var $10825 = 0, $10826 = 0, $10827 = 0, $10828 = 0, $10829 = 0, $1083 = 0, $10830 = 0, $10831 = 0, $10832 = 0, $10833 = 0, $10834 = 0, $10835 = 0, $10836 = 0, $10837 = 0, $10838 = 0, $10839 = 0, $1084 = 0, $10840 = 0, $10841 = 0, $10842 = 0;
 var $10843 = 0, $10844 = 0, $10845 = 0, $10846 = 0, $10847 = 0, $10848 = 0, $10849 = 0, $1085 = 0, $10850 = 0, $10851 = 0, $10852 = 0, $10853 = 0, $10854 = 0, $10855 = 0, $10856 = 0, $10857 = 0, $10858 = 0, $10859 = 0, $1086 = 0, $10860 = 0;
 var $10861 = 0, $10862 = 0, $10863 = 0, $10864 = 0, $10865 = 0, $10866 = 0, $10867 = 0, $10868 = 0, $10869 = 0, $1087 = 0, $10870 = 0, $10871 = 0, $10872 = 0, $10873 = 0, $10874 = 0, $10875 = 0, $10876 = 0, $10877 = 0, $10878 = 0, $10879 = 0;
 var $1088 = 0, $10880 = 0, $10881 = 0, $10882 = 0, $10883 = 0, $10884 = 0, $10885 = 0, $10886 = 0, $10887 = 0, $10888 = 0, $10889 = 0, $1089 = 0, $10890 = 0, $10891 = 0, $10892 = 0, $10893 = 0, $10894 = 0, $10895 = 0, $10896 = 0, $10897 = 0;
 var $10898 = 0, $10899 = 0, $109 = 0, $1090 = 0, $10900 = 0, $10901 = 0, $10902 = 0, $10903 = 0, $10904 = 0, $10905 = 0, $10906 = 0, $10907 = 0, $10908 = 0, $10909 = 0, $1091 = 0, $10910 = 0, $10911 = 0, $10912 = 0, $10913 = 0, $10914 = 0;
 var $10915 = 0, $10916 = 0, $10917 = 0, $10918 = 0, $10919 = 0, $1092 = 0, $10920 = 0, $10921 = 0, $10922 = 0, $10923 = 0, $10924 = 0, $10925 = 0, $10926 = 0, $10927 = 0, $10928 = 0, $10929 = 0, $1093 = 0, $10930 = 0, $10931 = 0, $10932 = 0;
 var $10933 = 0, $10934 = 0, $10935 = 0, $10936 = 0, $10937 = 0, $10938 = 0, $10939 = 0, $1094 = 0, $10940 = 0, $10941 = 0, $10942 = 0, $10943 = 0, $10944 = 0, $10945 = 0, $10946 = 0, $10947 = 0, $10948 = 0, $10949 = 0, $1095 = 0, $10950 = 0;
 var $10951 = 0, $10952 = 0, $10953 = 0, $10954 = 0, $10955 = 0, $10956 = 0, $10957 = 0, $10958 = 0, $10959 = 0, $1096 = 0, $10960 = 0, $10961 = 0, $10962 = 0, $10963 = 0, $10964 = 0, $10965 = 0, $10966 = 0, $10967 = 0, $10968 = 0, $10969 = 0;
 var $1097 = 0, $10970 = 0, $10971 = 0, $10972 = 0, $10973 = 0, $10974 = 0, $10975 = 0, $10976 = 0, $10977 = 0, $10978 = 0, $10979 = 0, $1098 = 0, $10980 = 0, $10981 = 0, $10982 = 0, $10983 = 0, $10984 = 0, $10985 = 0, $10986 = 0, $10987 = 0;
 var $10988 = 0, $10989 = 0, $1099 = 0, $10990 = 0, $10991 = 0, $10992 = 0, $10993 = 0, $10994 = 0, $10995 = 0, $10996 = 0, $10997 = 0, $10998 = 0, $10999 = 0, $11 = 0, $110 = 0, $1100 = 0, $11000 = 0, $11001 = 0, $11002 = 0, $11003 = 0;
 var $11004 = 0, $11005 = 0, $11006 = 0, $11007 = 0, $11008 = 0, $11009 = 0, $1101 = 0, $11010 = 0, $11011 = 0, $11012 = 0, $11013 = 0, $11014 = 0, $11015 = 0, $11016 = 0, $11017 = 0, $11018 = 0, $11019 = 0, $1102 = 0, $11020 = 0, $11021 = 0;
 var $11022 = 0, $11023 = 0, $11024 = 0, $11025 = 0, $11026 = 0, $11027 = 0, $11028 = 0, $11029 = 0, $1103 = 0, $11030 = 0, $11031 = 0, $11032 = 0, $11033 = 0, $11034 = 0, $11035 = 0, $11036 = 0, $11037 = 0, $11038 = 0, $11039 = 0, $1104 = 0;
 var $11040 = 0, $11041 = 0, $11042 = 0, $11043 = 0, $11044 = 0, $11045 = 0, $11046 = 0, $11047 = 0, $11048 = 0, $11049 = 0, $1105 = 0, $11050 = 0, $11051 = 0, $11052 = 0, $11053 = 0, $11054 = 0, $11055 = 0, $11056 = 0, $11057 = 0, $11058 = 0;
 var $11059 = 0, $1106 = 0, $11060 = 0, $11061 = 0, $11062 = 0, $11063 = 0, $11064 = 0, $11065 = 0, $11066 = 0, $11067 = 0, $11068 = 0, $11069 = 0, $1107 = 0, $11070 = 0, $11071 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0;
 var $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0;
 var $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0;
 var $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0;
 var $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0;
 var $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0;
 var $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0;
 var $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0;
 var $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0;
 var $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0;
 var $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0;
 var $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0;
 var $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0;
 var $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0;
 var $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0;
 var $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0;
 var $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0;
 var $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0;
 var $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0;
 var $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0;
 var $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0;
 var $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0;
 var $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0;
 var $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0;
 var $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0;
 var $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0;
 var $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0;
 var $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0;
 var $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0;
 var $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0;
 var $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0;
 var $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0;
 var $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0;
 var $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0;
 var $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0;
 var $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0;
 var $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0;
 var $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0;
 var $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0;
 var $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0;
 var $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0;
 var $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0;
 var $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0;
 var $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0;
 var $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0;
 var $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0;
 var $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0;
 var $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0;
 var $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0;
 var $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0;
 var $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0;
 var $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0;
 var $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0;
 var $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0;
 var $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0;
 var $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0;
 var $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0;
 var $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0;
 var $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0;
 var $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0;
 var $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0;
 var $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0;
 var $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0;
 var $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0;
 var $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0;
 var $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0;
 var $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0;
 var $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0;
 var $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0;
 var $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0;
 var $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0;
 var $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0;
 var $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0;
 var $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0;
 var $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0;
 var $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0;
 var $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0;
 var $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0;
 var $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0;
 var $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0;
 var $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0;
 var $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0;
 var $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0;
 var $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0;
 var $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0;
 var $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0;
 var $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0;
 var $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0;
 var $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0;
 var $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0;
 var $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0;
 var $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0;
 var $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0;
 var $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0;
 var $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0;
 var $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0;
 var $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0;
 var $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0;
 var $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0;
 var $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0;
 var $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0;
 var $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0;
 var $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0;
 var $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0;
 var $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0;
 var $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0;
 var $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0;
 var $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0;
 var $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0;
 var $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0;
 var $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0;
 var $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0;
 var $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0;
 var $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0;
 var $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0;
 var $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0;
 var $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0;
 var $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0;
 var $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0;
 var $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0;
 var $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0;
 var $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0;
 var $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0;
 var $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0;
 var $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0;
 var $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0;
 var $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0;
 var $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0;
 var $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0;
 var $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0;
 var $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0;
 var $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0;
 var $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0;
 var $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0;
 var $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0;
 var $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0;
 var $3543 = 0, $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0, $3555 = 0, $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0;
 var $3561 = 0, $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0, $3573 = 0, $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0;
 var $358 = 0, $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0, $3591 = 0, $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0;
 var $3598 = 0, $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0, $3609 = 0, $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0;
 var $3615 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0;
 var $3633 = 0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0;
 var $3651 = 0, $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0;
 var $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0, $3681 = 0, $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0;
 var $3688 = 0, $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0, $3699 = 0, $37 = 0, $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0;
 var $3705 = 0, $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0, $3716 = 0, $3717 = 0, $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0;
 var $3723 = 0, $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0, $3735 = 0, $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0;
 var $3741 = 0, $3742 = 0, $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0, $3753 = 0, $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0;
 var $376 = 0, $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0, $3771 = 0, $3772 = 0, $3773 = 0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0;
 var $3778 = 0, $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0, $3789 = 0, $379 = 0, $3790 = 0, $3791 = 0, $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0;
 var $3796 = 0, $3797 = 0, $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0, $3806 = 0, $3807 = 0, $3808 = 0, $3809 = 0, $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0;
 var $3813 = 0, $3814 = 0, $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0, $382 = 0, $3820 = 0, $3821 = 0, $3822 = 0, $3823 = 0, $3824 = 0, $3825 = 0, $3826 = 0, $3827 = 0, $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0;
 var $3831 = 0, $3832 = 0, $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0, $3841 = 0, $3842 = 0, $3843 = 0, $3844 = 0, $3845 = 0, $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0;
 var $385 = 0, $3850 = 0, $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0, $3860 = 0, $3861 = 0, $3862 = 0, $3863 = 0, $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0;
 var $3868 = 0, $3869 = 0, $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0, $3878 = 0, $3879 = 0, $388 = 0, $3880 = 0, $3881 = 0, $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0;
 var $3886 = 0, $3887 = 0, $3888 = 0, $3889 = 0, $389 = 0, $3890 = 0, $3891 = 0, $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0, $3896 = 0, $3897 = 0, $3898 = 0, $3899 = 0, $39 = 0, $390 = 0, $3900 = 0, $3901 = 0, $3902 = 0;
 var $3903 = 0, $3904 = 0, $3905 = 0, $3906 = 0, $3907 = 0, $3908 = 0, $3909 = 0, $391 = 0, $3910 = 0, $3911 = 0, $3912 = 0, $3913 = 0, $3914 = 0, $3915 = 0, $3916 = 0, $3917 = 0, $3918 = 0, $3919 = 0, $392 = 0, $3920 = 0;
 var $3921 = 0, $3922 = 0, $3923 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3927 = 0, $3928 = 0, $3929 = 0, $393 = 0, $3930 = 0, $3931 = 0, $3932 = 0, $3933 = 0, $3934 = 0, $3935 = 0, $3936 = 0, $3937 = 0, $3938 = 0, $3939 = 0;
 var $394 = 0, $3940 = 0, $3941 = 0, $3942 = 0, $3943 = 0, $3944 = 0, $3945 = 0, $3946 = 0, $3947 = 0, $3948 = 0, $3949 = 0, $395 = 0, $3950 = 0, $3951 = 0, $3952 = 0, $3953 = 0, $3954 = 0, $3955 = 0, $3956 = 0, $3957 = 0;
 var $3958 = 0, $3959 = 0, $396 = 0, $3960 = 0, $3961 = 0, $3962 = 0, $3963 = 0, $3964 = 0, $3965 = 0, $3966 = 0, $3967 = 0, $3968 = 0, $3969 = 0, $397 = 0, $3970 = 0, $3971 = 0, $3972 = 0, $3973 = 0, $3974 = 0, $3975 = 0;
 var $3976 = 0, $3977 = 0, $3978 = 0, $3979 = 0, $398 = 0, $3980 = 0, $3981 = 0, $3982 = 0, $3983 = 0, $3984 = 0, $3985 = 0, $3986 = 0, $3987 = 0, $3988 = 0, $3989 = 0, $399 = 0, $3990 = 0, $3991 = 0, $3992 = 0, $3993 = 0;
 var $3994 = 0, $3995 = 0, $3996 = 0, $3997 = 0, $3998 = 0, $3999 = 0, $4 = 0, $40 = 0, $400 = 0, $4000 = 0, $4001 = 0, $4002 = 0, $4003 = 0, $4004 = 0, $4005 = 0, $4006 = 0, $4007 = 0, $4008 = 0, $4009 = 0, $401 = 0;
 var $4010 = 0, $4011 = 0, $4012 = 0, $4013 = 0, $4014 = 0, $4015 = 0, $4016 = 0, $4017 = 0, $4018 = 0, $4019 = 0, $402 = 0, $4020 = 0, $4021 = 0, $4022 = 0, $4023 = 0, $4024 = 0, $4025 = 0, $4026 = 0, $4027 = 0, $4028 = 0;
 var $4029 = 0, $403 = 0, $4030 = 0, $4031 = 0, $4032 = 0, $4033 = 0, $4034 = 0, $4035 = 0, $4036 = 0, $4037 = 0, $4038 = 0, $4039 = 0, $404 = 0, $4040 = 0, $4041 = 0, $4042 = 0, $4043 = 0, $4044 = 0, $4045 = 0, $4046 = 0;
 var $4047 = 0, $4048 = 0, $4049 = 0, $405 = 0, $4050 = 0, $4051 = 0, $4052 = 0, $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0, $4057 = 0, $4058 = 0, $4059 = 0, $406 = 0, $4060 = 0, $4061 = 0, $4062 = 0, $4063 = 0, $4064 = 0;
 var $4065 = 0, $4066 = 0, $4067 = 0, $4068 = 0, $4069 = 0, $407 = 0, $4070 = 0, $4071 = 0, $4072 = 0, $4073 = 0, $4074 = 0, $4075 = 0, $4076 = 0, $4077 = 0, $4078 = 0, $4079 = 0, $408 = 0, $4080 = 0, $4081 = 0, $4082 = 0;
 var $4083 = 0, $4084 = 0, $4085 = 0, $4086 = 0, $4087 = 0, $4088 = 0, $4089 = 0, $409 = 0, $4090 = 0, $4091 = 0, $4092 = 0, $4093 = 0, $4094 = 0, $4095 = 0, $4096 = 0, $4097 = 0, $4098 = 0, $4099 = 0, $41 = 0, $410 = 0;
 var $4100 = 0, $4101 = 0, $4102 = 0, $4103 = 0, $4104 = 0, $4105 = 0, $4106 = 0, $4107 = 0, $4108 = 0, $4109 = 0, $411 = 0, $4110 = 0, $4111 = 0, $4112 = 0, $4113 = 0, $4114 = 0, $4115 = 0, $4116 = 0, $4117 = 0, $4118 = 0;
 var $4119 = 0, $412 = 0, $4120 = 0, $4121 = 0, $4122 = 0, $4123 = 0, $4124 = 0, $4125 = 0, $4126 = 0, $4127 = 0, $4128 = 0, $4129 = 0, $413 = 0, $4130 = 0, $4131 = 0, $4132 = 0, $4133 = 0, $4134 = 0, $4135 = 0, $4136 = 0;
 var $4137 = 0, $4138 = 0, $4139 = 0, $414 = 0, $4140 = 0, $4141 = 0, $4142 = 0, $4143 = 0, $4144 = 0, $4145 = 0, $4146 = 0, $4147 = 0, $4148 = 0, $4149 = 0, $415 = 0, $4150 = 0, $4151 = 0, $4152 = 0, $4153 = 0, $4154 = 0;
 var $4155 = 0, $4156 = 0, $4157 = 0, $4158 = 0, $4159 = 0, $416 = 0, $4160 = 0, $4161 = 0, $4162 = 0, $4163 = 0, $4164 = 0, $4165 = 0, $4166 = 0, $4167 = 0, $4168 = 0, $4169 = 0, $417 = 0, $4170 = 0, $4171 = 0, $4172 = 0;
 var $4173 = 0, $4174 = 0, $4175 = 0, $4176 = 0, $4177 = 0, $4178 = 0, $4179 = 0, $418 = 0, $4180 = 0, $4181 = 0, $4182 = 0, $4183 = 0, $4184 = 0, $4185 = 0, $4186 = 0, $4187 = 0, $4188 = 0, $4189 = 0, $419 = 0, $4190 = 0;
 var $4191 = 0, $4192 = 0, $4193 = 0, $4194 = 0, $4195 = 0, $4196 = 0, $4197 = 0, $4198 = 0, $4199 = 0, $42 = 0, $420 = 0, $4200 = 0, $4201 = 0, $4202 = 0, $4203 = 0, $4204 = 0, $4205 = 0, $4206 = 0, $4207 = 0, $4208 = 0;
 var $4209 = 0, $421 = 0, $4210 = 0, $4211 = 0, $4212 = 0, $4213 = 0, $4214 = 0, $4215 = 0, $4216 = 0, $4217 = 0, $4218 = 0, $4219 = 0, $422 = 0, $4220 = 0, $4221 = 0, $4222 = 0, $4223 = 0, $4224 = 0, $4225 = 0, $4226 = 0;
 var $4227 = 0, $4228 = 0, $4229 = 0, $423 = 0, $4230 = 0, $4231 = 0, $4232 = 0, $4233 = 0, $4234 = 0, $4235 = 0, $4236 = 0, $4237 = 0, $4238 = 0, $4239 = 0, $424 = 0, $4240 = 0, $4241 = 0, $4242 = 0, $4243 = 0, $4244 = 0;
 var $4245 = 0, $4246 = 0, $4247 = 0, $4248 = 0, $4249 = 0, $425 = 0, $4250 = 0, $4251 = 0, $4252 = 0, $4253 = 0, $4254 = 0, $4255 = 0, $4256 = 0, $4257 = 0, $4258 = 0, $4259 = 0, $426 = 0, $4260 = 0, $4261 = 0, $4262 = 0;
 var $4263 = 0, $4264 = 0, $4265 = 0, $4266 = 0, $4267 = 0, $4268 = 0, $4269 = 0, $427 = 0, $4270 = 0, $4271 = 0, $4272 = 0, $4273 = 0, $4274 = 0, $4275 = 0, $4276 = 0, $4277 = 0, $4278 = 0, $4279 = 0, $428 = 0, $4280 = 0;
 var $4281 = 0, $4282 = 0, $4283 = 0, $4284 = 0, $4285 = 0, $4286 = 0, $4287 = 0, $4288 = 0, $4289 = 0, $429 = 0, $4290 = 0, $4291 = 0, $4292 = 0, $4293 = 0, $4294 = 0, $4295 = 0, $4296 = 0, $4297 = 0, $4298 = 0, $4299 = 0;
 var $43 = 0, $430 = 0, $4300 = 0, $4301 = 0, $4302 = 0, $4303 = 0, $4304 = 0, $4305 = 0, $4306 = 0, $4307 = 0, $4308 = 0, $4309 = 0, $431 = 0, $4310 = 0, $4311 = 0, $4312 = 0, $4313 = 0, $4314 = 0, $4315 = 0, $4316 = 0;
 var $4317 = 0, $4318 = 0, $4319 = 0, $432 = 0, $4320 = 0, $4321 = 0, $4322 = 0, $4323 = 0, $4324 = 0, $4325 = 0, $4326 = 0, $4327 = 0, $4328 = 0, $4329 = 0, $433 = 0, $4330 = 0, $4331 = 0, $4332 = 0, $4333 = 0, $4334 = 0;
 var $4335 = 0, $4336 = 0, $4337 = 0, $4338 = 0, $4339 = 0, $434 = 0, $4340 = 0, $4341 = 0, $4342 = 0, $4343 = 0, $4344 = 0, $4345 = 0, $4346 = 0, $4347 = 0, $4348 = 0, $4349 = 0, $435 = 0, $4350 = 0, $4351 = 0, $4352 = 0;
 var $4353 = 0, $4354 = 0, $4355 = 0, $4356 = 0, $4357 = 0, $4358 = 0, $4359 = 0, $436 = 0, $4360 = 0, $4361 = 0, $4362 = 0, $4363 = 0, $4364 = 0, $4365 = 0, $4366 = 0, $4367 = 0, $4368 = 0, $4369 = 0, $437 = 0, $4370 = 0;
 var $4371 = 0, $4372 = 0, $4373 = 0, $4374 = 0, $4375 = 0, $4376 = 0, $4377 = 0, $4378 = 0, $4379 = 0, $438 = 0, $4380 = 0, $4381 = 0, $4382 = 0, $4383 = 0, $4384 = 0, $4385 = 0, $4386 = 0, $4387 = 0, $4388 = 0, $4389 = 0;
 var $439 = 0, $4390 = 0, $4391 = 0, $4392 = 0, $4393 = 0, $4394 = 0, $4395 = 0, $4396 = 0, $4397 = 0, $4398 = 0, $4399 = 0, $44 = 0, $440 = 0, $4400 = 0, $4401 = 0, $4402 = 0, $4403 = 0, $4404 = 0, $4405 = 0, $4406 = 0;
 var $4407 = 0, $4408 = 0, $4409 = 0, $441 = 0, $4410 = 0, $4411 = 0, $4412 = 0, $4413 = 0, $4414 = 0, $4415 = 0, $4416 = 0, $4417 = 0, $4418 = 0, $4419 = 0, $442 = 0, $4420 = 0, $4421 = 0, $4422 = 0, $4423 = 0, $4424 = 0;
 var $4425 = 0, $4426 = 0, $4427 = 0, $4428 = 0, $4429 = 0, $443 = 0, $4430 = 0, $4431 = 0, $4432 = 0, $4433 = 0, $4434 = 0, $4435 = 0, $4436 = 0, $4437 = 0, $4438 = 0, $4439 = 0, $444 = 0, $4440 = 0, $4441 = 0, $4442 = 0;
 var $4443 = 0, $4444 = 0, $4445 = 0, $4446 = 0, $4447 = 0, $4448 = 0, $4449 = 0, $445 = 0, $4450 = 0, $4451 = 0, $4452 = 0, $4453 = 0, $4454 = 0, $4455 = 0, $4456 = 0, $4457 = 0, $4458 = 0, $4459 = 0, $446 = 0, $4460 = 0;
 var $4461 = 0, $4462 = 0, $4463 = 0, $4464 = 0, $4465 = 0, $4466 = 0, $4467 = 0, $4468 = 0, $4469 = 0, $447 = 0, $4470 = 0, $4471 = 0, $4472 = 0, $4473 = 0, $4474 = 0, $4475 = 0, $4476 = 0, $4477 = 0, $4478 = 0, $4479 = 0;
 var $448 = 0, $4480 = 0, $4481 = 0, $4482 = 0, $4483 = 0, $4484 = 0, $4485 = 0, $4486 = 0, $4487 = 0, $4488 = 0, $4489 = 0, $449 = 0, $4490 = 0, $4491 = 0, $4492 = 0, $4493 = 0, $4494 = 0, $4495 = 0, $4496 = 0, $4497 = 0;
 var $4498 = 0, $4499 = 0, $45 = 0, $450 = 0, $4500 = 0, $4501 = 0, $4502 = 0, $4503 = 0, $4504 = 0, $4505 = 0, $4506 = 0, $4507 = 0, $4508 = 0, $4509 = 0, $451 = 0, $4510 = 0, $4511 = 0, $4512 = 0, $4513 = 0, $4514 = 0;
 var $4515 = 0, $4516 = 0, $4517 = 0, $4518 = 0, $4519 = 0, $452 = 0, $4520 = 0, $4521 = 0, $4522 = 0, $4523 = 0, $4524 = 0, $4525 = 0, $4526 = 0, $4527 = 0, $4528 = 0, $4529 = 0, $453 = 0, $4530 = 0, $4531 = 0, $4532 = 0;
 var $4533 = 0, $4534 = 0, $4535 = 0, $4536 = 0, $4537 = 0, $4538 = 0, $4539 = 0, $454 = 0, $4540 = 0, $4541 = 0, $4542 = 0, $4543 = 0, $4544 = 0, $4545 = 0, $4546 = 0, $4547 = 0, $4548 = 0, $4549 = 0, $455 = 0, $4550 = 0;
 var $4551 = 0, $4552 = 0, $4553 = 0, $4554 = 0, $4555 = 0, $4556 = 0, $4557 = 0, $4558 = 0, $4559 = 0, $456 = 0, $4560 = 0, $4561 = 0, $4562 = 0, $4563 = 0, $4564 = 0, $4565 = 0, $4566 = 0, $4567 = 0, $4568 = 0, $4569 = 0;
 var $457 = 0, $4570 = 0, $4571 = 0, $4572 = 0, $4573 = 0, $4574 = 0, $4575 = 0, $4576 = 0, $4577 = 0, $4578 = 0, $4579 = 0, $458 = 0, $4580 = 0, $4581 = 0, $4582 = 0, $4583 = 0, $4584 = 0, $4585 = 0, $4586 = 0, $4587 = 0;
 var $4588 = 0, $4589 = 0, $459 = 0, $4590 = 0, $4591 = 0, $4592 = 0, $4593 = 0, $4594 = 0, $4595 = 0, $4596 = 0, $4597 = 0, $4598 = 0, $4599 = 0, $46 = 0, $460 = 0, $4600 = 0, $4601 = 0, $4602 = 0, $4603 = 0, $4604 = 0;
 var $4605 = 0, $4606 = 0, $4607 = 0, $4608 = 0, $4609 = 0, $461 = 0, $4610 = 0, $4611 = 0, $4612 = 0, $4613 = 0, $4614 = 0, $4615 = 0, $4616 = 0, $4617 = 0, $4618 = 0, $4619 = 0, $462 = 0, $4620 = 0, $4621 = 0, $4622 = 0;
 var $4623 = 0, $4624 = 0, $4625 = 0, $4626 = 0, $4627 = 0, $4628 = 0, $4629 = 0, $463 = 0, $4630 = 0, $4631 = 0, $4632 = 0, $4633 = 0, $4634 = 0, $4635 = 0, $4636 = 0, $4637 = 0, $4638 = 0, $4639 = 0, $464 = 0, $4640 = 0;
 var $4641 = 0, $4642 = 0, $4643 = 0, $4644 = 0, $4645 = 0, $4646 = 0, $4647 = 0, $4648 = 0, $4649 = 0, $465 = 0, $4650 = 0, $4651 = 0, $4652 = 0, $4653 = 0, $4654 = 0, $4655 = 0, $4656 = 0, $4657 = 0, $4658 = 0, $4659 = 0;
 var $466 = 0, $4660 = 0, $4661 = 0, $4662 = 0, $4663 = 0, $4664 = 0, $4665 = 0, $4666 = 0, $4667 = 0, $4668 = 0, $4669 = 0, $467 = 0, $4670 = 0, $4671 = 0, $4672 = 0, $4673 = 0, $4674 = 0, $4675 = 0, $4676 = 0, $4677 = 0;
 var $4678 = 0, $4679 = 0, $468 = 0, $4680 = 0, $4681 = 0, $4682 = 0, $4683 = 0, $4684 = 0, $4685 = 0, $4686 = 0, $4687 = 0, $4688 = 0, $4689 = 0, $469 = 0, $4690 = 0, $4691 = 0, $4692 = 0, $4693 = 0, $4694 = 0, $4695 = 0;
 var $4696 = 0, $4697 = 0, $4698 = 0, $4699 = 0, $47 = 0, $470 = 0, $4700 = 0, $4701 = 0, $4702 = 0, $4703 = 0, $4704 = 0, $4705 = 0, $4706 = 0, $4707 = 0, $4708 = 0, $4709 = 0, $471 = 0, $4710 = 0, $4711 = 0, $4712 = 0;
 var $4713 = 0, $4714 = 0, $4715 = 0, $4716 = 0, $4717 = 0, $4718 = 0, $4719 = 0, $472 = 0, $4720 = 0, $4721 = 0, $4722 = 0, $4723 = 0, $4724 = 0, $4725 = 0, $4726 = 0, $4727 = 0, $4728 = 0, $4729 = 0, $473 = 0, $4730 = 0;
 var $4731 = 0, $4732 = 0, $4733 = 0, $4734 = 0, $4735 = 0, $4736 = 0, $4737 = 0, $4738 = 0, $4739 = 0, $474 = 0, $4740 = 0, $4741 = 0, $4742 = 0, $4743 = 0, $4744 = 0, $4745 = 0, $4746 = 0, $4747 = 0, $4748 = 0, $4749 = 0;
 var $475 = 0, $4750 = 0, $4751 = 0, $4752 = 0, $4753 = 0, $4754 = 0, $4755 = 0, $4756 = 0, $4757 = 0, $4758 = 0, $4759 = 0, $476 = 0, $4760 = 0, $4761 = 0, $4762 = 0, $4763 = 0, $4764 = 0, $4765 = 0, $4766 = 0, $4767 = 0;
 var $4768 = 0, $4769 = 0, $477 = 0, $4770 = 0, $4771 = 0, $4772 = 0, $4773 = 0, $4774 = 0, $4775 = 0, $4776 = 0, $4777 = 0, $4778 = 0, $4779 = 0, $478 = 0, $4780 = 0, $4781 = 0, $4782 = 0, $4783 = 0, $4784 = 0, $4785 = 0;
 var $4786 = 0, $4787 = 0, $4788 = 0, $4789 = 0, $479 = 0, $4790 = 0, $4791 = 0, $4792 = 0, $4793 = 0, $4794 = 0, $4795 = 0, $4796 = 0, $4797 = 0, $4798 = 0, $4799 = 0, $48 = 0, $480 = 0, $4800 = 0, $4801 = 0, $4802 = 0;
 var $4803 = 0, $4804 = 0, $4805 = 0, $4806 = 0, $4807 = 0, $4808 = 0, $4809 = 0, $481 = 0, $4810 = 0, $4811 = 0, $4812 = 0, $4813 = 0, $4814 = 0, $4815 = 0, $4816 = 0, $4817 = 0, $4818 = 0, $4819 = 0, $482 = 0, $4820 = 0;
 var $4821 = 0, $4822 = 0, $4823 = 0, $4824 = 0, $4825 = 0, $4826 = 0, $4827 = 0, $4828 = 0, $4829 = 0, $483 = 0, $4830 = 0, $4831 = 0, $4832 = 0, $4833 = 0, $4834 = 0, $4835 = 0, $4836 = 0, $4837 = 0, $4838 = 0, $4839 = 0;
 var $484 = 0, $4840 = 0, $4841 = 0, $4842 = 0, $4843 = 0, $4844 = 0, $4845 = 0, $4846 = 0, $4847 = 0, $4848 = 0, $4849 = 0, $485 = 0, $4850 = 0, $4851 = 0, $4852 = 0, $4853 = 0, $4854 = 0, $4855 = 0, $4856 = 0, $4857 = 0;
 var $4858 = 0, $4859 = 0, $486 = 0, $4860 = 0, $4861 = 0, $4862 = 0, $4863 = 0, $4864 = 0, $4865 = 0, $4866 = 0, $4867 = 0, $4868 = 0, $4869 = 0, $487 = 0, $4870 = 0, $4871 = 0, $4872 = 0, $4873 = 0, $4874 = 0, $4875 = 0;
 var $4876 = 0, $4877 = 0, $4878 = 0, $4879 = 0, $488 = 0, $4880 = 0, $4881 = 0, $4882 = 0, $4883 = 0, $4884 = 0, $4885 = 0, $4886 = 0, $4887 = 0, $4888 = 0, $4889 = 0, $489 = 0, $4890 = 0, $4891 = 0, $4892 = 0, $4893 = 0;
 var $4894 = 0, $4895 = 0, $4896 = 0, $4897 = 0, $4898 = 0, $4899 = 0, $49 = 0, $490 = 0, $4900 = 0, $4901 = 0, $4902 = 0, $4903 = 0, $4904 = 0, $4905 = 0, $4906 = 0, $4907 = 0, $4908 = 0, $4909 = 0, $491 = 0, $4910 = 0;
 var $4911 = 0, $4912 = 0, $4913 = 0, $4914 = 0, $4915 = 0, $4916 = 0, $4917 = 0, $4918 = 0, $4919 = 0, $492 = 0, $4920 = 0, $4921 = 0, $4922 = 0, $4923 = 0, $4924 = 0, $4925 = 0, $4926 = 0, $4927 = 0, $4928 = 0, $4929 = 0;
 var $493 = 0, $4930 = 0, $4931 = 0, $4932 = 0, $4933 = 0, $4934 = 0, $4935 = 0, $4936 = 0, $4937 = 0, $4938 = 0, $4939 = 0, $494 = 0, $4940 = 0, $4941 = 0, $4942 = 0, $4943 = 0, $4944 = 0, $4945 = 0, $4946 = 0, $4947 = 0;
 var $4948 = 0, $4949 = 0, $495 = 0, $4950 = 0, $4951 = 0, $4952 = 0, $4953 = 0, $4954 = 0, $4955 = 0, $4956 = 0, $4957 = 0, $4958 = 0, $4959 = 0, $496 = 0, $4960 = 0, $4961 = 0, $4962 = 0, $4963 = 0, $4964 = 0, $4965 = 0;
 var $4966 = 0, $4967 = 0, $4968 = 0, $4969 = 0, $497 = 0, $4970 = 0, $4971 = 0, $4972 = 0, $4973 = 0, $4974 = 0, $4975 = 0, $4976 = 0, $4977 = 0, $4978 = 0, $4979 = 0, $498 = 0, $4980 = 0, $4981 = 0, $4982 = 0, $4983 = 0;
 var $4984 = 0, $4985 = 0, $4986 = 0, $4987 = 0, $4988 = 0, $4989 = 0, $499 = 0, $4990 = 0, $4991 = 0, $4992 = 0, $4993 = 0, $4994 = 0, $4995 = 0, $4996 = 0, $4997 = 0, $4998 = 0, $4999 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $5000 = 0, $5001 = 0, $5002 = 0, $5003 = 0, $5004 = 0, $5005 = 0, $5006 = 0, $5007 = 0, $5008 = 0, $5009 = 0, $501 = 0, $5010 = 0, $5011 = 0, $5012 = 0, $5013 = 0, $5014 = 0, $5015 = 0, $5016 = 0, $5017 = 0, $5018 = 0;
 var $5019 = 0, $502 = 0, $5020 = 0, $5021 = 0, $5022 = 0, $5023 = 0, $5024 = 0, $5025 = 0, $5026 = 0, $5027 = 0, $5028 = 0, $5029 = 0, $503 = 0, $5030 = 0, $5031 = 0, $5032 = 0, $5033 = 0, $5034 = 0, $5035 = 0, $5036 = 0;
 var $5037 = 0, $5038 = 0, $5039 = 0, $504 = 0, $5040 = 0, $5041 = 0, $5042 = 0, $5043 = 0, $5044 = 0, $5045 = 0, $5046 = 0, $5047 = 0, $5048 = 0, $5049 = 0, $505 = 0, $5050 = 0, $5051 = 0, $5052 = 0, $5053 = 0, $5054 = 0;
 var $5055 = 0, $5056 = 0, $5057 = 0, $5058 = 0, $5059 = 0, $506 = 0, $5060 = 0, $5061 = 0, $5062 = 0, $5063 = 0, $5064 = 0, $5065 = 0, $5066 = 0, $5067 = 0, $5068 = 0, $5069 = 0, $507 = 0, $5070 = 0, $5071 = 0, $5072 = 0;
 var $5073 = 0, $5074 = 0, $5075 = 0, $5076 = 0, $5077 = 0, $5078 = 0, $5079 = 0, $508 = 0, $5080 = 0, $5081 = 0, $5082 = 0, $5083 = 0, $5084 = 0, $5085 = 0, $5086 = 0, $5087 = 0, $5088 = 0, $5089 = 0, $509 = 0, $5090 = 0;
 var $5091 = 0, $5092 = 0, $5093 = 0, $5094 = 0, $5095 = 0, $5096 = 0, $5097 = 0, $5098 = 0, $5099 = 0, $51 = 0, $510 = 0, $5100 = 0, $5101 = 0, $5102 = 0, $5103 = 0, $5104 = 0, $5105 = 0, $5106 = 0, $5107 = 0, $5108 = 0;
 var $5109 = 0, $511 = 0, $5110 = 0, $5111 = 0, $5112 = 0, $5113 = 0, $5114 = 0, $5115 = 0, $5116 = 0, $5117 = 0, $5118 = 0, $5119 = 0, $512 = 0, $5120 = 0, $5121 = 0, $5122 = 0, $5123 = 0, $5124 = 0, $5125 = 0, $5126 = 0;
 var $5127 = 0, $5128 = 0, $5129 = 0, $513 = 0, $5130 = 0, $5131 = 0, $5132 = 0, $5133 = 0, $5134 = 0, $5135 = 0, $5136 = 0, $5137 = 0, $5138 = 0, $5139 = 0, $514 = 0, $5140 = 0, $5141 = 0, $5142 = 0, $5143 = 0, $5144 = 0;
 var $5145 = 0, $5146 = 0, $5147 = 0, $5148 = 0, $5149 = 0, $515 = 0, $5150 = 0, $5151 = 0, $5152 = 0, $5153 = 0, $5154 = 0, $5155 = 0, $5156 = 0, $5157 = 0, $5158 = 0, $5159 = 0, $516 = 0, $5160 = 0, $5161 = 0, $5162 = 0;
 var $5163 = 0, $5164 = 0, $5165 = 0, $5166 = 0, $5167 = 0, $5168 = 0, $5169 = 0, $517 = 0, $5170 = 0, $5171 = 0, $5172 = 0, $5173 = 0, $5174 = 0, $5175 = 0, $5176 = 0, $5177 = 0, $5178 = 0, $5179 = 0, $518 = 0, $5180 = 0;
 var $5181 = 0, $5182 = 0, $5183 = 0, $5184 = 0, $5185 = 0, $5186 = 0, $5187 = 0, $5188 = 0, $5189 = 0, $519 = 0, $5190 = 0, $5191 = 0, $5192 = 0, $5193 = 0, $5194 = 0, $5195 = 0, $5196 = 0, $5197 = 0, $5198 = 0, $5199 = 0;
 var $52 = 0, $520 = 0, $5200 = 0, $5201 = 0, $5202 = 0, $5203 = 0, $5204 = 0, $5205 = 0, $5206 = 0, $5207 = 0, $5208 = 0, $5209 = 0, $521 = 0, $5210 = 0, $5211 = 0, $5212 = 0, $5213 = 0, $5214 = 0, $5215 = 0, $5216 = 0;
 var $5217 = 0, $5218 = 0, $5219 = 0, $522 = 0, $5220 = 0, $5221 = 0, $5222 = 0, $5223 = 0, $5224 = 0, $5225 = 0, $5226 = 0, $5227 = 0, $5228 = 0, $5229 = 0, $523 = 0, $5230 = 0, $5231 = 0, $5232 = 0, $5233 = 0, $5234 = 0;
 var $5235 = 0, $5236 = 0, $5237 = 0, $5238 = 0, $5239 = 0, $524 = 0, $5240 = 0, $5241 = 0, $5242 = 0, $5243 = 0, $5244 = 0, $5245 = 0, $5246 = 0, $5247 = 0, $5248 = 0, $5249 = 0, $525 = 0, $5250 = 0, $5251 = 0, $5252 = 0;
 var $5253 = 0, $5254 = 0, $5255 = 0, $5256 = 0, $5257 = 0, $5258 = 0, $5259 = 0, $526 = 0, $5260 = 0, $5261 = 0, $5262 = 0, $5263 = 0, $5264 = 0, $5265 = 0, $5266 = 0, $5267 = 0, $5268 = 0, $5269 = 0, $527 = 0, $5270 = 0;
 var $5271 = 0, $5272 = 0, $5273 = 0, $5274 = 0, $5275 = 0, $5276 = 0, $5277 = 0, $5278 = 0, $5279 = 0, $528 = 0, $5280 = 0, $5281 = 0, $5282 = 0, $5283 = 0, $5284 = 0, $5285 = 0, $5286 = 0, $5287 = 0, $5288 = 0, $5289 = 0;
 var $529 = 0, $5290 = 0, $5291 = 0, $5292 = 0, $5293 = 0, $5294 = 0, $5295 = 0, $5296 = 0, $5297 = 0, $5298 = 0, $5299 = 0, $53 = 0, $530 = 0, $5300 = 0, $5301 = 0, $5302 = 0, $5303 = 0, $5304 = 0, $5305 = 0, $5306 = 0;
 var $5307 = 0, $5308 = 0, $5309 = 0, $531 = 0, $5310 = 0, $5311 = 0, $5312 = 0, $5313 = 0, $5314 = 0, $5315 = 0, $5316 = 0, $5317 = 0, $5318 = 0, $5319 = 0, $532 = 0, $5320 = 0, $5321 = 0, $5322 = 0, $5323 = 0, $5324 = 0;
 var $5325 = 0, $5326 = 0, $5327 = 0, $5328 = 0, $5329 = 0, $533 = 0, $5330 = 0, $5331 = 0, $5332 = 0, $5333 = 0, $5334 = 0, $5335 = 0, $5336 = 0, $5337 = 0, $5338 = 0, $5339 = 0, $534 = 0, $5340 = 0, $5341 = 0, $5342 = 0;
 var $5343 = 0, $5344 = 0, $5345 = 0, $5346 = 0, $5347 = 0, $5348 = 0, $5349 = 0, $535 = 0, $5350 = 0, $5351 = 0, $5352 = 0, $5353 = 0, $5354 = 0, $5355 = 0, $5356 = 0, $5357 = 0, $5358 = 0, $5359 = 0, $536 = 0, $5360 = 0;
 var $5361 = 0, $5362 = 0, $5363 = 0, $5364 = 0, $5365 = 0, $5366 = 0, $5367 = 0, $5368 = 0, $5369 = 0, $537 = 0, $5370 = 0, $5371 = 0, $5372 = 0, $5373 = 0, $5374 = 0, $5375 = 0, $5376 = 0, $5377 = 0, $5378 = 0, $5379 = 0;
 var $538 = 0, $5380 = 0, $5381 = 0, $5382 = 0, $5383 = 0, $5384 = 0, $5385 = 0, $5386 = 0, $5387 = 0, $5388 = 0, $5389 = 0, $539 = 0, $5390 = 0, $5391 = 0, $5392 = 0, $5393 = 0, $5394 = 0, $5395 = 0, $5396 = 0, $5397 = 0;
 var $5398 = 0, $5399 = 0, $54 = 0, $540 = 0, $5400 = 0, $5401 = 0, $5402 = 0, $5403 = 0, $5404 = 0, $5405 = 0, $5406 = 0, $5407 = 0, $5408 = 0, $5409 = 0, $541 = 0, $5410 = 0, $5411 = 0, $5412 = 0, $5413 = 0, $5414 = 0;
 var $5415 = 0, $5416 = 0, $5417 = 0, $5418 = 0, $5419 = 0, $542 = 0, $5420 = 0, $5421 = 0, $5422 = 0, $5423 = 0, $5424 = 0, $5425 = 0, $5426 = 0, $5427 = 0, $5428 = 0, $5429 = 0, $543 = 0, $5430 = 0, $5431 = 0, $5432 = 0;
 var $5433 = 0, $5434 = 0, $5435 = 0, $5436 = 0, $5437 = 0, $5438 = 0, $5439 = 0, $544 = 0, $5440 = 0, $5441 = 0, $5442 = 0, $5443 = 0, $5444 = 0, $5445 = 0, $5446 = 0, $5447 = 0, $5448 = 0, $5449 = 0, $545 = 0, $5450 = 0;
 var $5451 = 0, $5452 = 0, $5453 = 0, $5454 = 0, $5455 = 0, $5456 = 0, $5457 = 0, $5458 = 0, $5459 = 0, $546 = 0, $5460 = 0, $5461 = 0, $5462 = 0, $5463 = 0, $5464 = 0, $5465 = 0, $5466 = 0, $5467 = 0, $5468 = 0, $5469 = 0;
 var $547 = 0, $5470 = 0, $5471 = 0, $5472 = 0, $5473 = 0, $5474 = 0, $5475 = 0, $5476 = 0, $5477 = 0, $5478 = 0, $5479 = 0, $548 = 0, $5480 = 0, $5481 = 0, $5482 = 0, $5483 = 0, $5484 = 0, $5485 = 0, $5486 = 0, $5487 = 0;
 var $5488 = 0, $5489 = 0, $549 = 0, $5490 = 0, $5491 = 0, $5492 = 0, $5493 = 0, $5494 = 0, $5495 = 0, $5496 = 0, $5497 = 0, $5498 = 0, $5499 = 0, $55 = 0, $550 = 0, $5500 = 0, $5501 = 0, $5502 = 0, $5503 = 0, $5504 = 0;
 var $5505 = 0, $5506 = 0, $5507 = 0, $5508 = 0, $5509 = 0, $551 = 0, $5510 = 0, $5511 = 0, $5512 = 0, $5513 = 0, $5514 = 0, $5515 = 0, $5516 = 0, $5517 = 0, $5518 = 0, $5519 = 0, $552 = 0, $5520 = 0, $5521 = 0, $5522 = 0;
 var $5523 = 0, $5524 = 0, $5525 = 0, $5526 = 0, $5527 = 0, $5528 = 0, $5529 = 0, $553 = 0, $5530 = 0, $5531 = 0, $5532 = 0, $5533 = 0, $5534 = 0, $5535 = 0, $5536 = 0, $5537 = 0, $5538 = 0, $5539 = 0, $554 = 0, $5540 = 0;
 var $5541 = 0, $5542 = 0, $5543 = 0, $5544 = 0, $5545 = 0, $5546 = 0, $5547 = 0, $5548 = 0, $5549 = 0, $555 = 0, $5550 = 0, $5551 = 0, $5552 = 0, $5553 = 0, $5554 = 0, $5555 = 0, $5556 = 0, $5557 = 0, $5558 = 0, $5559 = 0;
 var $556 = 0, $5560 = 0, $5561 = 0, $5562 = 0, $5563 = 0, $5564 = 0, $5565 = 0, $5566 = 0, $5567 = 0, $5568 = 0, $5569 = 0, $557 = 0, $5570 = 0, $5571 = 0, $5572 = 0, $5573 = 0, $5574 = 0, $5575 = 0, $5576 = 0, $5577 = 0;
 var $5578 = 0, $5579 = 0, $558 = 0, $5580 = 0, $5581 = 0, $5582 = 0, $5583 = 0, $5584 = 0, $5585 = 0, $5586 = 0, $5587 = 0, $5588 = 0, $5589 = 0, $559 = 0, $5590 = 0, $5591 = 0, $5592 = 0, $5593 = 0, $5594 = 0, $5595 = 0;
 var $5596 = 0, $5597 = 0, $5598 = 0, $5599 = 0, $56 = 0, $560 = 0, $5600 = 0, $5601 = 0, $5602 = 0, $5603 = 0, $5604 = 0, $5605 = 0, $5606 = 0, $5607 = 0, $5608 = 0, $5609 = 0, $561 = 0, $5610 = 0, $5611 = 0, $5612 = 0;
 var $5613 = 0, $5614 = 0, $5615 = 0, $5616 = 0, $5617 = 0, $5618 = 0, $5619 = 0, $562 = 0, $5620 = 0, $5621 = 0, $5622 = 0, $5623 = 0, $5624 = 0, $5625 = 0, $5626 = 0, $5627 = 0, $5628 = 0, $5629 = 0, $563 = 0, $5630 = 0;
 var $5631 = 0, $5632 = 0, $5633 = 0, $5634 = 0, $5635 = 0, $5636 = 0, $5637 = 0, $5638 = 0, $5639 = 0, $564 = 0, $5640 = 0, $5641 = 0, $5642 = 0, $5643 = 0, $5644 = 0, $5645 = 0, $5646 = 0, $5647 = 0, $5648 = 0, $5649 = 0;
 var $565 = 0, $5650 = 0, $5651 = 0, $5652 = 0, $5653 = 0, $5654 = 0, $5655 = 0, $5656 = 0, $5657 = 0, $5658 = 0, $5659 = 0, $566 = 0, $5660 = 0, $5661 = 0, $5662 = 0, $5663 = 0, $5664 = 0, $5665 = 0, $5666 = 0, $5667 = 0;
 var $5668 = 0, $5669 = 0, $567 = 0, $5670 = 0, $5671 = 0, $5672 = 0, $5673 = 0, $5674 = 0, $5675 = 0, $5676 = 0, $5677 = 0, $5678 = 0, $5679 = 0, $568 = 0, $5680 = 0, $5681 = 0, $5682 = 0, $5683 = 0, $5684 = 0, $5685 = 0;
 var $5686 = 0, $5687 = 0, $5688 = 0, $5689 = 0, $569 = 0, $5690 = 0, $5691 = 0, $5692 = 0, $5693 = 0, $5694 = 0, $5695 = 0, $5696 = 0, $5697 = 0, $5698 = 0, $5699 = 0, $57 = 0, $570 = 0, $5700 = 0, $5701 = 0, $5702 = 0;
 var $5703 = 0, $5704 = 0, $5705 = 0, $5706 = 0, $5707 = 0, $5708 = 0, $5709 = 0, $571 = 0, $5710 = 0, $5711 = 0, $5712 = 0, $5713 = 0, $5714 = 0, $5715 = 0, $5716 = 0, $5717 = 0, $5718 = 0, $5719 = 0, $572 = 0, $5720 = 0;
 var $5721 = 0, $5722 = 0, $5723 = 0, $5724 = 0, $5725 = 0, $5726 = 0, $5727 = 0, $5728 = 0, $5729 = 0, $573 = 0, $5730 = 0, $5731 = 0, $5732 = 0, $5733 = 0, $5734 = 0, $5735 = 0, $5736 = 0, $5737 = 0, $5738 = 0, $5739 = 0;
 var $574 = 0, $5740 = 0, $5741 = 0, $5742 = 0, $5743 = 0, $5744 = 0, $5745 = 0, $5746 = 0, $5747 = 0, $5748 = 0, $5749 = 0, $575 = 0, $5750 = 0, $5751 = 0, $5752 = 0, $5753 = 0, $5754 = 0, $5755 = 0, $5756 = 0, $5757 = 0;
 var $5758 = 0, $5759 = 0, $576 = 0, $5760 = 0, $5761 = 0, $5762 = 0, $5763 = 0, $5764 = 0, $5765 = 0, $5766 = 0, $5767 = 0, $5768 = 0, $5769 = 0, $577 = 0, $5770 = 0, $5771 = 0, $5772 = 0, $5773 = 0, $5774 = 0, $5775 = 0;
 var $5776 = 0, $5777 = 0, $5778 = 0, $5779 = 0, $578 = 0, $5780 = 0, $5781 = 0, $5782 = 0, $5783 = 0, $5784 = 0, $5785 = 0, $5786 = 0, $5787 = 0, $5788 = 0, $5789 = 0, $579 = 0, $5790 = 0, $5791 = 0, $5792 = 0, $5793 = 0;
 var $5794 = 0, $5795 = 0, $5796 = 0, $5797 = 0, $5798 = 0, $5799 = 0, $58 = 0, $580 = 0, $5800 = 0, $5801 = 0, $5802 = 0, $5803 = 0, $5804 = 0, $5805 = 0, $5806 = 0, $5807 = 0, $5808 = 0, $5809 = 0, $581 = 0, $5810 = 0;
 var $5811 = 0, $5812 = 0, $5813 = 0, $5814 = 0, $5815 = 0, $5816 = 0, $5817 = 0, $5818 = 0, $5819 = 0, $582 = 0, $5820 = 0, $5821 = 0, $5822 = 0, $5823 = 0, $5824 = 0, $5825 = 0, $5826 = 0, $5827 = 0, $5828 = 0, $5829 = 0;
 var $583 = 0, $5830 = 0, $5831 = 0, $5832 = 0, $5833 = 0, $5834 = 0, $5835 = 0, $5836 = 0, $5837 = 0, $5838 = 0, $5839 = 0, $584 = 0, $5840 = 0, $5841 = 0, $5842 = 0, $5843 = 0, $5844 = 0, $5845 = 0, $5846 = 0, $5847 = 0;
 var $5848 = 0, $5849 = 0, $585 = 0, $5850 = 0, $5851 = 0, $5852 = 0, $5853 = 0, $5854 = 0, $5855 = 0, $5856 = 0, $5857 = 0, $5858 = 0, $5859 = 0, $586 = 0, $5860 = 0, $5861 = 0, $5862 = 0, $5863 = 0, $5864 = 0, $5865 = 0;
 var $5866 = 0, $5867 = 0, $5868 = 0, $5869 = 0, $587 = 0, $5870 = 0, $5871 = 0, $5872 = 0, $5873 = 0, $5874 = 0, $5875 = 0, $5876 = 0, $5877 = 0, $5878 = 0, $5879 = 0, $588 = 0, $5880 = 0, $5881 = 0, $5882 = 0, $5883 = 0;
 var $5884 = 0, $5885 = 0, $5886 = 0, $5887 = 0, $5888 = 0, $5889 = 0, $589 = 0, $5890 = 0, $5891 = 0, $5892 = 0, $5893 = 0, $5894 = 0, $5895 = 0, $5896 = 0, $5897 = 0, $5898 = 0, $5899 = 0, $59 = 0, $590 = 0, $5900 = 0;
 var $5901 = 0, $5902 = 0, $5903 = 0, $5904 = 0, $5905 = 0, $5906 = 0, $5907 = 0, $5908 = 0, $5909 = 0, $591 = 0, $5910 = 0, $5911 = 0, $5912 = 0, $5913 = 0, $5914 = 0, $5915 = 0, $5916 = 0, $5917 = 0, $5918 = 0, $5919 = 0;
 var $592 = 0, $5920 = 0, $5921 = 0, $5922 = 0, $5923 = 0, $5924 = 0, $5925 = 0, $5926 = 0, $5927 = 0, $5928 = 0, $5929 = 0, $593 = 0, $5930 = 0, $5931 = 0, $5932 = 0, $5933 = 0, $5934 = 0, $5935 = 0, $5936 = 0, $5937 = 0;
 var $5938 = 0, $5939 = 0, $594 = 0, $5940 = 0, $5941 = 0, $5942 = 0, $5943 = 0, $5944 = 0, $5945 = 0, $5946 = 0, $5947 = 0, $5948 = 0, $5949 = 0, $595 = 0, $5950 = 0, $5951 = 0, $5952 = 0, $5953 = 0, $5954 = 0, $5955 = 0;
 var $5956 = 0, $5957 = 0, $5958 = 0, $5959 = 0, $596 = 0, $5960 = 0, $5961 = 0, $5962 = 0, $5963 = 0, $5964 = 0, $5965 = 0, $5966 = 0, $5967 = 0, $5968 = 0, $5969 = 0, $597 = 0, $5970 = 0, $5971 = 0, $5972 = 0, $5973 = 0;
 var $5974 = 0, $5975 = 0, $5976 = 0, $5977 = 0, $5978 = 0, $5979 = 0, $598 = 0, $5980 = 0, $5981 = 0, $5982 = 0, $5983 = 0, $5984 = 0, $5985 = 0, $5986 = 0, $5987 = 0, $5988 = 0, $5989 = 0, $599 = 0, $5990 = 0, $5991 = 0;
 var $5992 = 0, $5993 = 0, $5994 = 0, $5995 = 0, $5996 = 0, $5997 = 0, $5998 = 0, $5999 = 0, $6 = 0, $60 = 0, $600 = 0, $6000 = 0, $6001 = 0, $6002 = 0, $6003 = 0, $6004 = 0, $6005 = 0, $6006 = 0, $6007 = 0, $6008 = 0;
 var $6009 = 0, $601 = 0, $6010 = 0, $6011 = 0, $6012 = 0, $6013 = 0, $6014 = 0, $6015 = 0, $6016 = 0, $6017 = 0, $6018 = 0, $6019 = 0, $602 = 0, $6020 = 0, $6021 = 0, $6022 = 0, $6023 = 0, $6024 = 0, $6025 = 0, $6026 = 0;
 var $6027 = 0, $6028 = 0, $6029 = 0, $603 = 0, $6030 = 0, $6031 = 0, $6032 = 0, $6033 = 0, $6034 = 0, $6035 = 0, $6036 = 0, $6037 = 0, $6038 = 0, $6039 = 0, $604 = 0, $6040 = 0, $6041 = 0, $6042 = 0, $6043 = 0, $6044 = 0;
 var $6045 = 0, $6046 = 0, $6047 = 0, $6048 = 0, $6049 = 0, $605 = 0, $6050 = 0, $6051 = 0, $6052 = 0, $6053 = 0, $6054 = 0, $6055 = 0, $6056 = 0, $6057 = 0, $6058 = 0, $6059 = 0, $606 = 0, $6060 = 0, $6061 = 0, $6062 = 0;
 var $6063 = 0, $6064 = 0, $6065 = 0, $6066 = 0, $6067 = 0, $6068 = 0, $6069 = 0, $607 = 0, $6070 = 0, $6071 = 0, $6072 = 0, $6073 = 0, $6074 = 0, $6075 = 0, $6076 = 0, $6077 = 0, $6078 = 0, $6079 = 0, $608 = 0, $6080 = 0;
 var $6081 = 0, $6082 = 0, $6083 = 0, $6084 = 0, $6085 = 0, $6086 = 0, $6087 = 0, $6088 = 0, $6089 = 0, $609 = 0, $6090 = 0, $6091 = 0, $6092 = 0, $6093 = 0, $6094 = 0, $6095 = 0, $6096 = 0, $6097 = 0, $6098 = 0, $6099 = 0;
 var $61 = 0, $610 = 0, $6100 = 0, $6101 = 0, $6102 = 0, $6103 = 0, $6104 = 0, $6105 = 0, $6106 = 0, $6107 = 0, $6108 = 0, $6109 = 0, $611 = 0, $6110 = 0, $6111 = 0, $6112 = 0, $6113 = 0, $6114 = 0, $6115 = 0, $6116 = 0;
 var $6117 = 0, $6118 = 0, $6119 = 0, $612 = 0, $6120 = 0, $6121 = 0, $6122 = 0, $6123 = 0, $6124 = 0, $6125 = 0, $6126 = 0, $6127 = 0, $6128 = 0, $6129 = 0, $613 = 0, $6130 = 0, $6131 = 0, $6132 = 0, $6133 = 0, $6134 = 0;
 var $6135 = 0, $6136 = 0, $6137 = 0, $6138 = 0, $6139 = 0, $614 = 0, $6140 = 0, $6141 = 0, $6142 = 0, $6143 = 0, $6144 = 0, $6145 = 0, $6146 = 0, $6147 = 0, $6148 = 0, $6149 = 0, $615 = 0, $6150 = 0, $6151 = 0, $6152 = 0;
 var $6153 = 0, $6154 = 0, $6155 = 0, $6156 = 0, $6157 = 0, $6158 = 0, $6159 = 0, $616 = 0, $6160 = 0, $6161 = 0, $6162 = 0, $6163 = 0, $6164 = 0, $6165 = 0, $6166 = 0, $6167 = 0, $6168 = 0, $6169 = 0, $617 = 0, $6170 = 0;
 var $6171 = 0, $6172 = 0, $6173 = 0, $6174 = 0, $6175 = 0, $6176 = 0, $6177 = 0, $6178 = 0, $6179 = 0, $618 = 0, $6180 = 0, $6181 = 0, $6182 = 0, $6183 = 0, $6184 = 0, $6185 = 0, $6186 = 0, $6187 = 0, $6188 = 0, $6189 = 0;
 var $619 = 0, $6190 = 0, $6191 = 0, $6192 = 0, $6193 = 0, $6194 = 0, $6195 = 0, $6196 = 0, $6197 = 0, $6198 = 0, $6199 = 0, $62 = 0, $620 = 0, $6200 = 0, $6201 = 0, $6202 = 0, $6203 = 0, $6204 = 0, $6205 = 0, $6206 = 0;
 var $6207 = 0, $6208 = 0, $6209 = 0, $621 = 0, $6210 = 0, $6211 = 0, $6212 = 0, $6213 = 0, $6214 = 0, $6215 = 0, $6216 = 0, $6217 = 0, $6218 = 0, $6219 = 0, $622 = 0, $6220 = 0, $6221 = 0, $6222 = 0, $6223 = 0, $6224 = 0;
 var $6225 = 0, $6226 = 0, $6227 = 0, $6228 = 0, $6229 = 0, $623 = 0, $6230 = 0, $6231 = 0, $6232 = 0, $6233 = 0, $6234 = 0, $6235 = 0, $6236 = 0, $6237 = 0, $6238 = 0, $6239 = 0, $624 = 0, $6240 = 0, $6241 = 0, $6242 = 0;
 var $6243 = 0, $6244 = 0, $6245 = 0, $6246 = 0, $6247 = 0, $6248 = 0, $6249 = 0, $625 = 0, $6250 = 0, $6251 = 0, $6252 = 0, $6253 = 0, $6254 = 0, $6255 = 0, $6256 = 0, $6257 = 0, $6258 = 0, $6259 = 0, $626 = 0, $6260 = 0;
 var $6261 = 0, $6262 = 0, $6263 = 0, $6264 = 0, $6265 = 0, $6266 = 0, $6267 = 0, $6268 = 0, $6269 = 0, $627 = 0, $6270 = 0, $6271 = 0, $6272 = 0, $6273 = 0, $6274 = 0, $6275 = 0, $6276 = 0, $6277 = 0, $6278 = 0, $6279 = 0;
 var $628 = 0, $6280 = 0, $6281 = 0, $6282 = 0, $6283 = 0, $6284 = 0, $6285 = 0, $6286 = 0, $6287 = 0, $6288 = 0, $6289 = 0, $629 = 0, $6290 = 0, $6291 = 0, $6292 = 0, $6293 = 0, $6294 = 0, $6295 = 0, $6296 = 0, $6297 = 0;
 var $6298 = 0, $6299 = 0, $63 = 0, $630 = 0, $6300 = 0, $6301 = 0, $6302 = 0, $6303 = 0, $6304 = 0, $6305 = 0, $6306 = 0, $6307 = 0, $6308 = 0, $6309 = 0, $631 = 0, $6310 = 0, $6311 = 0, $6312 = 0, $6313 = 0, $6314 = 0;
 var $6315 = 0, $6316 = 0, $6317 = 0, $6318 = 0, $6319 = 0, $632 = 0, $6320 = 0, $6321 = 0, $6322 = 0, $6323 = 0, $6324 = 0, $6325 = 0, $6326 = 0, $6327 = 0, $6328 = 0, $6329 = 0, $633 = 0, $6330 = 0, $6331 = 0, $6332 = 0;
 var $6333 = 0, $6334 = 0, $6335 = 0, $6336 = 0, $6337 = 0, $6338 = 0, $6339 = 0, $634 = 0, $6340 = 0, $6341 = 0, $6342 = 0, $6343 = 0, $6344 = 0, $6345 = 0, $6346 = 0, $6347 = 0, $6348 = 0, $6349 = 0, $635 = 0, $6350 = 0;
 var $6351 = 0, $6352 = 0, $6353 = 0, $6354 = 0, $6355 = 0, $6356 = 0, $6357 = 0, $6358 = 0, $6359 = 0, $636 = 0, $6360 = 0, $6361 = 0, $6362 = 0, $6363 = 0, $6364 = 0, $6365 = 0, $6366 = 0, $6367 = 0, $6368 = 0, $6369 = 0;
 var $637 = 0, $6370 = 0, $6371 = 0, $6372 = 0, $6373 = 0, $6374 = 0, $6375 = 0, $6376 = 0, $6377 = 0, $6378 = 0, $6379 = 0, $638 = 0, $6380 = 0, $6381 = 0, $6382 = 0, $6383 = 0, $6384 = 0, $6385 = 0, $6386 = 0, $6387 = 0;
 var $6388 = 0, $6389 = 0, $639 = 0, $6390 = 0, $6391 = 0, $6392 = 0, $6393 = 0, $6394 = 0, $6395 = 0, $6396 = 0, $6397 = 0, $6398 = 0, $6399 = 0, $64 = 0, $640 = 0, $6400 = 0, $6401 = 0, $6402 = 0, $6403 = 0, $6404 = 0;
 var $6405 = 0, $6406 = 0, $6407 = 0, $6408 = 0, $6409 = 0, $641 = 0, $6410 = 0, $6411 = 0, $6412 = 0, $6413 = 0, $6414 = 0, $6415 = 0, $6416 = 0, $6417 = 0, $6418 = 0, $6419 = 0, $642 = 0, $6420 = 0, $6421 = 0, $6422 = 0;
 var $6423 = 0, $6424 = 0, $6425 = 0, $6426 = 0, $6427 = 0, $6428 = 0, $6429 = 0, $643 = 0, $6430 = 0, $6431 = 0, $6432 = 0, $6433 = 0, $6434 = 0, $6435 = 0, $6436 = 0, $6437 = 0, $6438 = 0, $6439 = 0, $644 = 0, $6440 = 0;
 var $6441 = 0, $6442 = 0, $6443 = 0, $6444 = 0, $6445 = 0, $6446 = 0, $6447 = 0, $6448 = 0, $6449 = 0, $645 = 0, $6450 = 0, $6451 = 0, $6452 = 0, $6453 = 0, $6454 = 0, $6455 = 0, $6456 = 0, $6457 = 0, $6458 = 0, $6459 = 0;
 var $646 = 0, $6460 = 0, $6461 = 0, $6462 = 0, $6463 = 0, $6464 = 0, $6465 = 0, $6466 = 0, $6467 = 0, $6468 = 0, $6469 = 0, $647 = 0, $6470 = 0, $6471 = 0, $6472 = 0, $6473 = 0, $6474 = 0, $6475 = 0, $6476 = 0, $6477 = 0;
 var $6478 = 0, $6479 = 0, $648 = 0, $6480 = 0, $6481 = 0, $6482 = 0, $6483 = 0, $6484 = 0, $6485 = 0, $6486 = 0, $6487 = 0, $6488 = 0, $6489 = 0, $649 = 0, $6490 = 0, $6491 = 0, $6492 = 0, $6493 = 0, $6494 = 0, $6495 = 0;
 var $6496 = 0, $6497 = 0, $6498 = 0, $6499 = 0, $65 = 0, $650 = 0, $6500 = 0, $6501 = 0, $6502 = 0, $6503 = 0, $6504 = 0, $6505 = 0, $6506 = 0, $6507 = 0, $6508 = 0, $6509 = 0, $651 = 0, $6510 = 0, $6511 = 0, $6512 = 0;
 var $6513 = 0, $6514 = 0, $6515 = 0, $6516 = 0, $6517 = 0, $6518 = 0, $6519 = 0, $652 = 0, $6520 = 0, $6521 = 0, $6522 = 0, $6523 = 0, $6524 = 0, $6525 = 0, $6526 = 0, $6527 = 0, $6528 = 0, $6529 = 0, $653 = 0, $6530 = 0;
 var $6531 = 0, $6532 = 0, $6533 = 0, $6534 = 0, $6535 = 0, $6536 = 0, $6537 = 0, $6538 = 0, $6539 = 0, $654 = 0, $6540 = 0, $6541 = 0, $6542 = 0, $6543 = 0, $6544 = 0, $6545 = 0, $6546 = 0, $6547 = 0, $6548 = 0, $6549 = 0;
 var $655 = 0, $6550 = 0, $6551 = 0, $6552 = 0, $6553 = 0, $6554 = 0, $6555 = 0, $6556 = 0, $6557 = 0, $6558 = 0, $6559 = 0, $656 = 0, $6560 = 0, $6561 = 0, $6562 = 0, $6563 = 0, $6564 = 0, $6565 = 0, $6566 = 0, $6567 = 0;
 var $6568 = 0, $6569 = 0, $657 = 0, $6570 = 0, $6571 = 0, $6572 = 0, $6573 = 0, $6574 = 0, $6575 = 0, $6576 = 0, $6577 = 0, $6578 = 0, $6579 = 0, $658 = 0, $6580 = 0, $6581 = 0, $6582 = 0, $6583 = 0, $6584 = 0, $6585 = 0;
 var $6586 = 0, $6587 = 0, $6588 = 0, $6589 = 0, $659 = 0, $6590 = 0, $6591 = 0, $6592 = 0, $6593 = 0, $6594 = 0, $6595 = 0, $6596 = 0, $6597 = 0, $6598 = 0, $6599 = 0, $66 = 0, $660 = 0, $6600 = 0, $6601 = 0, $6602 = 0;
 var $6603 = 0, $6604 = 0, $6605 = 0, $6606 = 0, $6607 = 0, $6608 = 0, $6609 = 0, $661 = 0, $6610 = 0, $6611 = 0, $6612 = 0, $6613 = 0, $6614 = 0, $6615 = 0, $6616 = 0, $6617 = 0, $6618 = 0, $6619 = 0, $662 = 0, $6620 = 0;
 var $6621 = 0, $6622 = 0, $6623 = 0, $6624 = 0, $6625 = 0, $6626 = 0, $6627 = 0, $6628 = 0, $6629 = 0, $663 = 0, $6630 = 0, $6631 = 0, $6632 = 0, $6633 = 0, $6634 = 0, $6635 = 0, $6636 = 0, $6637 = 0, $6638 = 0, $6639 = 0;
 var $664 = 0, $6640 = 0, $6641 = 0, $6642 = 0, $6643 = 0, $6644 = 0, $6645 = 0, $6646 = 0, $6647 = 0, $6648 = 0, $6649 = 0, $665 = 0, $6650 = 0, $6651 = 0, $6652 = 0, $6653 = 0, $6654 = 0, $6655 = 0, $6656 = 0, $6657 = 0;
 var $6658 = 0, $6659 = 0, $666 = 0, $6660 = 0, $6661 = 0, $6662 = 0, $6663 = 0, $6664 = 0, $6665 = 0, $6666 = 0, $6667 = 0, $6668 = 0, $6669 = 0, $667 = 0, $6670 = 0, $6671 = 0, $6672 = 0, $6673 = 0, $6674 = 0, $6675 = 0;
 var $6676 = 0, $6677 = 0, $6678 = 0, $6679 = 0, $668 = 0, $6680 = 0, $6681 = 0, $6682 = 0, $6683 = 0, $6684 = 0, $6685 = 0, $6686 = 0, $6687 = 0, $6688 = 0, $6689 = 0, $669 = 0, $6690 = 0, $6691 = 0, $6692 = 0, $6693 = 0;
 var $6694 = 0, $6695 = 0, $6696 = 0, $6697 = 0, $6698 = 0, $6699 = 0, $67 = 0, $670 = 0, $6700 = 0, $6701 = 0, $6702 = 0, $6703 = 0, $6704 = 0, $6705 = 0, $6706 = 0, $6707 = 0, $6708 = 0, $6709 = 0, $671 = 0, $6710 = 0;
 var $6711 = 0, $6712 = 0, $6713 = 0, $6714 = 0, $6715 = 0, $6716 = 0, $6717 = 0, $6718 = 0, $6719 = 0, $672 = 0, $6720 = 0, $6721 = 0, $6722 = 0, $6723 = 0, $6724 = 0, $6725 = 0, $6726 = 0, $6727 = 0, $6728 = 0, $6729 = 0;
 var $673 = 0, $6730 = 0, $6731 = 0, $6732 = 0, $6733 = 0, $6734 = 0, $6735 = 0, $6736 = 0, $6737 = 0, $6738 = 0, $6739 = 0, $674 = 0, $6740 = 0, $6741 = 0, $6742 = 0, $6743 = 0, $6744 = 0, $6745 = 0, $6746 = 0, $6747 = 0;
 var $6748 = 0, $6749 = 0, $675 = 0, $6750 = 0, $6751 = 0, $6752 = 0, $6753 = 0, $6754 = 0, $6755 = 0, $6756 = 0, $6757 = 0, $6758 = 0, $6759 = 0, $676 = 0, $6760 = 0, $6761 = 0, $6762 = 0, $6763 = 0, $6764 = 0, $6765 = 0;
 var $6766 = 0, $6767 = 0, $6768 = 0, $6769 = 0, $677 = 0, $6770 = 0, $6771 = 0, $6772 = 0, $6773 = 0, $6774 = 0, $6775 = 0, $6776 = 0, $6777 = 0, $6778 = 0, $6779 = 0, $678 = 0, $6780 = 0, $6781 = 0, $6782 = 0, $6783 = 0;
 var $6784 = 0, $6785 = 0, $6786 = 0, $6787 = 0, $6788 = 0, $6789 = 0, $679 = 0, $6790 = 0, $6791 = 0, $6792 = 0, $6793 = 0, $6794 = 0, $6795 = 0, $6796 = 0, $6797 = 0, $6798 = 0, $6799 = 0, $68 = 0, $680 = 0, $6800 = 0;
 var $6801 = 0, $6802 = 0, $6803 = 0, $6804 = 0, $6805 = 0, $6806 = 0, $6807 = 0, $6808 = 0, $6809 = 0, $681 = 0, $6810 = 0, $6811 = 0, $6812 = 0, $6813 = 0, $6814 = 0, $6815 = 0, $6816 = 0, $6817 = 0, $6818 = 0, $6819 = 0;
 var $682 = 0, $6820 = 0, $6821 = 0, $6822 = 0, $6823 = 0, $6824 = 0, $6825 = 0, $6826 = 0, $6827 = 0, $6828 = 0, $6829 = 0, $683 = 0, $6830 = 0, $6831 = 0, $6832 = 0, $6833 = 0, $6834 = 0, $6835 = 0, $6836 = 0, $6837 = 0;
 var $6838 = 0, $6839 = 0, $684 = 0, $6840 = 0, $6841 = 0, $6842 = 0, $6843 = 0, $6844 = 0, $6845 = 0, $6846 = 0, $6847 = 0, $6848 = 0, $6849 = 0, $685 = 0, $6850 = 0, $6851 = 0, $6852 = 0, $6853 = 0, $6854 = 0, $6855 = 0;
 var $6856 = 0, $6857 = 0, $6858 = 0, $6859 = 0, $686 = 0, $6860 = 0, $6861 = 0, $6862 = 0, $6863 = 0, $6864 = 0, $6865 = 0, $6866 = 0, $6867 = 0, $6868 = 0, $6869 = 0, $687 = 0, $6870 = 0, $6871 = 0, $6872 = 0, $6873 = 0;
 var $6874 = 0, $6875 = 0, $6876 = 0, $6877 = 0, $6878 = 0, $6879 = 0, $688 = 0, $6880 = 0, $6881 = 0, $6882 = 0, $6883 = 0, $6884 = 0, $6885 = 0, $6886 = 0, $6887 = 0, $6888 = 0, $6889 = 0, $689 = 0, $6890 = 0, $6891 = 0;
 var $6892 = 0, $6893 = 0, $6894 = 0, $6895 = 0, $6896 = 0, $6897 = 0, $6898 = 0, $6899 = 0, $69 = 0, $690 = 0, $6900 = 0, $6901 = 0, $6902 = 0, $6903 = 0, $6904 = 0, $6905 = 0, $6906 = 0, $6907 = 0, $6908 = 0, $6909 = 0;
 var $691 = 0, $6910 = 0, $6911 = 0, $6912 = 0, $6913 = 0, $6914 = 0, $6915 = 0, $6916 = 0, $6917 = 0, $6918 = 0, $6919 = 0, $692 = 0, $6920 = 0, $6921 = 0, $6922 = 0, $6923 = 0, $6924 = 0, $6925 = 0, $6926 = 0, $6927 = 0;
 var $6928 = 0, $6929 = 0, $693 = 0, $6930 = 0, $6931 = 0, $6932 = 0, $6933 = 0, $6934 = 0, $6935 = 0, $6936 = 0, $6937 = 0, $6938 = 0, $6939 = 0, $694 = 0, $6940 = 0, $6941 = 0, $6942 = 0, $6943 = 0, $6944 = 0, $6945 = 0;
 var $6946 = 0, $6947 = 0, $6948 = 0, $6949 = 0, $695 = 0, $6950 = 0, $6951 = 0, $6952 = 0, $6953 = 0, $6954 = 0, $6955 = 0, $6956 = 0, $6957 = 0, $6958 = 0, $6959 = 0, $696 = 0, $6960 = 0, $6961 = 0, $6962 = 0, $6963 = 0;
 var $6964 = 0, $6965 = 0, $6966 = 0, $6967 = 0, $6968 = 0, $6969 = 0, $697 = 0, $6970 = 0, $6971 = 0, $6972 = 0, $6973 = 0, $6974 = 0, $6975 = 0, $6976 = 0, $6977 = 0, $6978 = 0, $6979 = 0, $698 = 0, $6980 = 0, $6981 = 0;
 var $6982 = 0, $6983 = 0, $6984 = 0, $6985 = 0, $6986 = 0, $6987 = 0, $6988 = 0, $6989 = 0, $699 = 0, $6990 = 0, $6991 = 0, $6992 = 0, $6993 = 0, $6994 = 0, $6995 = 0, $6996 = 0, $6997 = 0, $6998 = 0, $6999 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $7000 = 0, $7001 = 0, $7002 = 0, $7003 = 0, $7004 = 0, $7005 = 0, $7006 = 0, $7007 = 0, $7008 = 0, $7009 = 0, $701 = 0, $7010 = 0, $7011 = 0, $7012 = 0, $7013 = 0, $7014 = 0, $7015 = 0, $7016 = 0;
 var $7017 = 0, $7018 = 0, $7019 = 0, $702 = 0, $7020 = 0, $7021 = 0, $7022 = 0, $7023 = 0, $7024 = 0, $7025 = 0, $7026 = 0, $7027 = 0, $7028 = 0, $7029 = 0, $703 = 0, $7030 = 0, $7031 = 0, $7032 = 0, $7033 = 0, $7034 = 0;
 var $7035 = 0, $7036 = 0, $7037 = 0, $7038 = 0, $7039 = 0, $704 = 0, $7040 = 0, $7041 = 0, $7042 = 0, $7043 = 0, $7044 = 0, $7045 = 0, $7046 = 0, $7047 = 0, $7048 = 0, $7049 = 0, $705 = 0, $7050 = 0, $7051 = 0, $7052 = 0;
 var $7053 = 0, $7054 = 0, $7055 = 0, $7056 = 0, $7057 = 0, $7058 = 0, $7059 = 0, $706 = 0, $7060 = 0, $7061 = 0, $7062 = 0, $7063 = 0, $7064 = 0, $7065 = 0, $7066 = 0, $7067 = 0, $7068 = 0, $7069 = 0, $707 = 0, $7070 = 0;
 var $7071 = 0, $7072 = 0, $7073 = 0, $7074 = 0, $7075 = 0, $7076 = 0, $7077 = 0, $7078 = 0, $7079 = 0, $708 = 0, $7080 = 0, $7081 = 0, $7082 = 0, $7083 = 0, $7084 = 0, $7085 = 0, $7086 = 0, $7087 = 0, $7088 = 0, $7089 = 0;
 var $709 = 0, $7090 = 0, $7091 = 0, $7092 = 0, $7093 = 0, $7094 = 0, $7095 = 0, $7096 = 0, $7097 = 0, $7098 = 0, $7099 = 0, $71 = 0, $710 = 0, $7100 = 0, $7101 = 0, $7102 = 0, $7103 = 0, $7104 = 0, $7105 = 0, $7106 = 0;
 var $7107 = 0, $7108 = 0, $7109 = 0, $711 = 0, $7110 = 0, $7111 = 0, $7112 = 0, $7113 = 0, $7114 = 0, $7115 = 0, $7116 = 0, $7117 = 0, $7118 = 0, $7119 = 0, $712 = 0, $7120 = 0, $7121 = 0, $7122 = 0, $7123 = 0, $7124 = 0;
 var $7125 = 0, $7126 = 0, $7127 = 0, $7128 = 0, $7129 = 0, $713 = 0, $7130 = 0, $7131 = 0, $7132 = 0, $7133 = 0, $7134 = 0, $7135 = 0, $7136 = 0, $7137 = 0, $7138 = 0, $7139 = 0, $714 = 0, $7140 = 0, $7141 = 0, $7142 = 0;
 var $7143 = 0, $7144 = 0, $7145 = 0, $7146 = 0, $7147 = 0, $7148 = 0, $7149 = 0, $715 = 0, $7150 = 0, $7151 = 0, $7152 = 0, $7153 = 0, $7154 = 0, $7155 = 0, $7156 = 0, $7157 = 0, $7158 = 0, $7159 = 0, $716 = 0, $7160 = 0;
 var $7161 = 0, $7162 = 0, $7163 = 0, $7164 = 0, $7165 = 0, $7166 = 0, $7167 = 0, $7168 = 0, $7169 = 0, $717 = 0, $7170 = 0, $7171 = 0, $7172 = 0, $7173 = 0, $7174 = 0, $7175 = 0, $7176 = 0, $7177 = 0, $7178 = 0, $7179 = 0;
 var $718 = 0, $7180 = 0, $7181 = 0, $7182 = 0, $7183 = 0, $7184 = 0, $7185 = 0, $7186 = 0, $7187 = 0, $7188 = 0, $7189 = 0, $719 = 0, $7190 = 0, $7191 = 0, $7192 = 0, $7193 = 0, $7194 = 0, $7195 = 0, $7196 = 0, $7197 = 0;
 var $7198 = 0, $7199 = 0, $72 = 0, $720 = 0, $7200 = 0, $7201 = 0, $7202 = 0, $7203 = 0, $7204 = 0, $7205 = 0, $7206 = 0, $7207 = 0, $7208 = 0, $7209 = 0, $721 = 0, $7210 = 0, $7211 = 0, $7212 = 0, $7213 = 0, $7214 = 0;
 var $7215 = 0, $7216 = 0, $7217 = 0, $7218 = 0, $7219 = 0, $722 = 0, $7220 = 0, $7221 = 0, $7222 = 0, $7223 = 0, $7224 = 0, $7225 = 0, $7226 = 0, $7227 = 0, $7228 = 0, $7229 = 0, $723 = 0, $7230 = 0, $7231 = 0, $7232 = 0;
 var $7233 = 0, $7234 = 0, $7235 = 0, $7236 = 0, $7237 = 0, $7238 = 0, $7239 = 0, $724 = 0, $7240 = 0, $7241 = 0, $7242 = 0, $7243 = 0, $7244 = 0, $7245 = 0, $7246 = 0, $7247 = 0, $7248 = 0, $7249 = 0, $725 = 0, $7250 = 0;
 var $7251 = 0, $7252 = 0, $7253 = 0, $7254 = 0, $7255 = 0, $7256 = 0, $7257 = 0, $7258 = 0, $7259 = 0, $726 = 0, $7260 = 0, $7261 = 0, $7262 = 0, $7263 = 0, $7264 = 0, $7265 = 0, $7266 = 0, $7267 = 0, $7268 = 0, $7269 = 0;
 var $727 = 0, $7270 = 0, $7271 = 0, $7272 = 0, $7273 = 0, $7274 = 0, $7275 = 0, $7276 = 0, $7277 = 0, $7278 = 0, $7279 = 0, $728 = 0, $7280 = 0, $7281 = 0, $7282 = 0, $7283 = 0, $7284 = 0, $7285 = 0, $7286 = 0, $7287 = 0;
 var $7288 = 0, $7289 = 0, $729 = 0, $7290 = 0, $7291 = 0, $7292 = 0, $7293 = 0, $7294 = 0, $7295 = 0, $7296 = 0, $7297 = 0, $7298 = 0, $7299 = 0, $73 = 0, $730 = 0, $7300 = 0, $7301 = 0, $7302 = 0, $7303 = 0, $7304 = 0;
 var $7305 = 0, $7306 = 0, $7307 = 0, $7308 = 0, $7309 = 0, $731 = 0, $7310 = 0, $7311 = 0, $7312 = 0, $7313 = 0, $7314 = 0, $7315 = 0, $7316 = 0, $7317 = 0, $7318 = 0, $7319 = 0, $732 = 0, $7320 = 0, $7321 = 0, $7322 = 0;
 var $7323 = 0, $7324 = 0, $7325 = 0, $7326 = 0, $7327 = 0, $7328 = 0, $7329 = 0, $733 = 0, $7330 = 0, $7331 = 0, $7332 = 0, $7333 = 0, $7334 = 0, $7335 = 0, $7336 = 0, $7337 = 0, $7338 = 0, $7339 = 0, $734 = 0, $7340 = 0;
 var $7341 = 0, $7342 = 0, $7343 = 0, $7344 = 0, $7345 = 0, $7346 = 0, $7347 = 0, $7348 = 0, $7349 = 0, $735 = 0, $7350 = 0, $7351 = 0, $7352 = 0, $7353 = 0, $7354 = 0, $7355 = 0, $7356 = 0, $7357 = 0, $7358 = 0, $7359 = 0;
 var $736 = 0, $7360 = 0, $7361 = 0, $7362 = 0, $7363 = 0, $7364 = 0, $7365 = 0, $7366 = 0, $7367 = 0, $7368 = 0, $7369 = 0, $737 = 0, $7370 = 0, $7371 = 0, $7372 = 0, $7373 = 0, $7374 = 0, $7375 = 0, $7376 = 0, $7377 = 0;
 var $7378 = 0, $7379 = 0, $738 = 0, $7380 = 0, $7381 = 0, $7382 = 0, $7383 = 0, $7384 = 0, $7385 = 0, $7386 = 0, $7387 = 0, $7388 = 0, $7389 = 0, $739 = 0, $7390 = 0, $7391 = 0, $7392 = 0, $7393 = 0, $7394 = 0, $7395 = 0;
 var $7396 = 0, $7397 = 0, $7398 = 0, $7399 = 0, $74 = 0, $740 = 0, $7400 = 0, $7401 = 0, $7402 = 0, $7403 = 0, $7404 = 0, $7405 = 0, $7406 = 0, $7407 = 0, $7408 = 0, $7409 = 0, $741 = 0, $7410 = 0, $7411 = 0, $7412 = 0;
 var $7413 = 0, $7414 = 0, $7415 = 0, $7416 = 0, $7417 = 0, $7418 = 0, $7419 = 0, $742 = 0, $7420 = 0, $7421 = 0, $7422 = 0, $7423 = 0, $7424 = 0, $7425 = 0, $7426 = 0, $7427 = 0, $7428 = 0, $7429 = 0, $743 = 0, $7430 = 0;
 var $7431 = 0, $7432 = 0, $7433 = 0, $7434 = 0, $7435 = 0, $7436 = 0, $7437 = 0, $7438 = 0, $7439 = 0, $744 = 0, $7440 = 0, $7441 = 0, $7442 = 0, $7443 = 0, $7444 = 0, $7445 = 0, $7446 = 0, $7447 = 0, $7448 = 0, $7449 = 0;
 var $745 = 0, $7450 = 0, $7451 = 0, $7452 = 0, $7453 = 0, $7454 = 0, $7455 = 0, $7456 = 0, $7457 = 0, $7458 = 0, $7459 = 0, $746 = 0, $7460 = 0, $7461 = 0, $7462 = 0, $7463 = 0, $7464 = 0, $7465 = 0, $7466 = 0, $7467 = 0;
 var $7468 = 0, $7469 = 0, $747 = 0, $7470 = 0, $7471 = 0, $7472 = 0, $7473 = 0, $7474 = 0, $7475 = 0, $7476 = 0, $7477 = 0, $7478 = 0, $7479 = 0, $748 = 0, $7480 = 0, $7481 = 0, $7482 = 0, $7483 = 0, $7484 = 0, $7485 = 0;
 var $7486 = 0, $7487 = 0, $7488 = 0, $7489 = 0, $749 = 0, $7490 = 0, $7491 = 0, $7492 = 0, $7493 = 0, $7494 = 0, $7495 = 0, $7496 = 0, $7497 = 0, $7498 = 0, $7499 = 0, $75 = 0, $750 = 0, $7500 = 0, $7501 = 0, $7502 = 0;
 var $7503 = 0, $7504 = 0, $7505 = 0, $7506 = 0, $7507 = 0, $7508 = 0, $7509 = 0, $751 = 0, $7510 = 0, $7511 = 0, $7512 = 0, $7513 = 0, $7514 = 0, $7515 = 0, $7516 = 0, $7517 = 0, $7518 = 0, $7519 = 0, $752 = 0, $7520 = 0;
 var $7521 = 0, $7522 = 0, $7523 = 0, $7524 = 0, $7525 = 0, $7526 = 0, $7527 = 0, $7528 = 0, $7529 = 0, $753 = 0, $7530 = 0, $7531 = 0, $7532 = 0, $7533 = 0, $7534 = 0, $7535 = 0, $7536 = 0, $7537 = 0, $7538 = 0, $7539 = 0;
 var $754 = 0, $7540 = 0, $7541 = 0, $7542 = 0, $7543 = 0, $7544 = 0, $7545 = 0, $7546 = 0, $7547 = 0, $7548 = 0, $7549 = 0, $755 = 0, $7550 = 0, $7551 = 0, $7552 = 0, $7553 = 0, $7554 = 0, $7555 = 0, $7556 = 0, $7557 = 0;
 var $7558 = 0, $7559 = 0, $756 = 0, $7560 = 0, $7561 = 0, $7562 = 0, $7563 = 0, $7564 = 0, $7565 = 0, $7566 = 0, $7567 = 0, $7568 = 0, $7569 = 0, $757 = 0, $7570 = 0, $7571 = 0, $7572 = 0, $7573 = 0, $7574 = 0, $7575 = 0;
 var $7576 = 0, $7577 = 0, $7578 = 0, $7579 = 0, $758 = 0, $7580 = 0, $7581 = 0, $7582 = 0, $7583 = 0, $7584 = 0, $7585 = 0, $7586 = 0, $7587 = 0, $7588 = 0, $7589 = 0, $759 = 0, $7590 = 0, $7591 = 0, $7592 = 0, $7593 = 0;
 var $7594 = 0, $7595 = 0, $7596 = 0, $7597 = 0, $7598 = 0, $7599 = 0, $76 = 0, $760 = 0, $7600 = 0, $7601 = 0, $7602 = 0, $7603 = 0, $7604 = 0, $7605 = 0, $7606 = 0, $7607 = 0, $7608 = 0, $7609 = 0, $761 = 0, $7610 = 0;
 var $7611 = 0, $7612 = 0, $7613 = 0, $7614 = 0, $7615 = 0, $7616 = 0, $7617 = 0, $7618 = 0, $7619 = 0, $762 = 0, $7620 = 0, $7621 = 0, $7622 = 0, $7623 = 0, $7624 = 0, $7625 = 0, $7626 = 0, $7627 = 0, $7628 = 0, $7629 = 0;
 var $763 = 0, $7630 = 0, $7631 = 0, $7632 = 0, $7633 = 0, $7634 = 0, $7635 = 0, $7636 = 0, $7637 = 0, $7638 = 0, $7639 = 0, $764 = 0, $7640 = 0, $7641 = 0, $7642 = 0, $7643 = 0, $7644 = 0, $7645 = 0, $7646 = 0, $7647 = 0;
 var $7648 = 0, $7649 = 0, $765 = 0, $7650 = 0, $7651 = 0, $7652 = 0, $7653 = 0, $7654 = 0, $7655 = 0, $7656 = 0, $7657 = 0, $7658 = 0, $7659 = 0, $766 = 0, $7660 = 0, $7661 = 0, $7662 = 0, $7663 = 0, $7664 = 0, $7665 = 0;
 var $7666 = 0, $7667 = 0, $7668 = 0, $7669 = 0, $767 = 0, $7670 = 0, $7671 = 0, $7672 = 0, $7673 = 0, $7674 = 0, $7675 = 0, $7676 = 0, $7677 = 0, $7678 = 0, $7679 = 0, $768 = 0, $7680 = 0, $7681 = 0, $7682 = 0, $7683 = 0;
 var $7684 = 0, $7685 = 0, $7686 = 0, $7687 = 0, $7688 = 0, $7689 = 0, $769 = 0, $7690 = 0, $7691 = 0, $7692 = 0, $7693 = 0, $7694 = 0, $7695 = 0, $7696 = 0, $7697 = 0, $7698 = 0, $7699 = 0, $77 = 0, $770 = 0, $7700 = 0;
 var $7701 = 0, $7702 = 0, $7703 = 0, $7704 = 0, $7705 = 0, $7706 = 0, $7707 = 0, $7708 = 0, $7709 = 0, $771 = 0, $7710 = 0, $7711 = 0, $7712 = 0, $7713 = 0, $7714 = 0, $7715 = 0, $7716 = 0, $7717 = 0, $7718 = 0, $7719 = 0;
 var $772 = 0, $7720 = 0, $7721 = 0, $7722 = 0, $7723 = 0, $7724 = 0, $7725 = 0, $7726 = 0, $7727 = 0, $7728 = 0, $7729 = 0, $773 = 0, $7730 = 0, $7731 = 0, $7732 = 0, $7733 = 0, $7734 = 0, $7735 = 0, $7736 = 0, $7737 = 0;
 var $7738 = 0, $7739 = 0, $774 = 0, $7740 = 0, $7741 = 0, $7742 = 0, $7743 = 0, $7744 = 0, $7745 = 0, $7746 = 0, $7747 = 0, $7748 = 0, $7749 = 0, $775 = 0, $7750 = 0, $7751 = 0, $7752 = 0, $7753 = 0, $7754 = 0, $7755 = 0;
 var $7756 = 0, $7757 = 0, $7758 = 0, $7759 = 0, $776 = 0, $7760 = 0, $7761 = 0, $7762 = 0, $7763 = 0, $7764 = 0, $7765 = 0, $7766 = 0, $7767 = 0, $7768 = 0, $7769 = 0, $777 = 0, $7770 = 0, $7771 = 0, $7772 = 0, $7773 = 0;
 var $7774 = 0, $7775 = 0, $7776 = 0, $7777 = 0, $7778 = 0, $7779 = 0, $778 = 0, $7780 = 0, $7781 = 0, $7782 = 0, $7783 = 0, $7784 = 0, $7785 = 0, $7786 = 0, $7787 = 0, $7788 = 0, $7789 = 0, $779 = 0, $7790 = 0, $7791 = 0;
 var $7792 = 0, $7793 = 0, $7794 = 0, $7795 = 0, $7796 = 0, $7797 = 0, $7798 = 0, $7799 = 0, $78 = 0, $780 = 0, $7800 = 0, $7801 = 0, $7802 = 0, $7803 = 0, $7804 = 0, $7805 = 0, $7806 = 0, $7807 = 0, $7808 = 0, $7809 = 0;
 var $781 = 0, $7810 = 0, $7811 = 0, $7812 = 0, $7813 = 0, $7814 = 0, $7815 = 0, $7816 = 0, $7817 = 0, $7818 = 0, $7819 = 0, $782 = 0, $7820 = 0, $7821 = 0, $7822 = 0, $7823 = 0, $7824 = 0, $7825 = 0, $7826 = 0, $7827 = 0;
 var $7828 = 0, $7829 = 0, $783 = 0, $7830 = 0, $7831 = 0, $7832 = 0, $7833 = 0, $7834 = 0, $7835 = 0, $7836 = 0, $7837 = 0, $7838 = 0, $7839 = 0, $784 = 0, $7840 = 0, $7841 = 0, $7842 = 0, $7843 = 0, $7844 = 0, $7845 = 0;
 var $7846 = 0, $7847 = 0, $7848 = 0, $7849 = 0, $785 = 0, $7850 = 0, $7851 = 0, $7852 = 0, $7853 = 0, $7854 = 0, $7855 = 0, $7856 = 0, $7857 = 0, $7858 = 0, $7859 = 0, $786 = 0, $7860 = 0, $7861 = 0, $7862 = 0, $7863 = 0;
 var $7864 = 0, $7865 = 0, $7866 = 0, $7867 = 0, $7868 = 0, $7869 = 0, $787 = 0, $7870 = 0, $7871 = 0, $7872 = 0, $7873 = 0, $7874 = 0, $7875 = 0, $7876 = 0, $7877 = 0, $7878 = 0, $7879 = 0, $788 = 0, $7880 = 0, $7881 = 0;
 var $7882 = 0, $7883 = 0, $7884 = 0, $7885 = 0, $7886 = 0, $7887 = 0, $7888 = 0, $7889 = 0, $789 = 0, $7890 = 0, $7891 = 0, $7892 = 0, $7893 = 0, $7894 = 0, $7895 = 0, $7896 = 0, $7897 = 0, $7898 = 0, $7899 = 0, $79 = 0;
 var $790 = 0, $7900 = 0, $7901 = 0, $7902 = 0, $7903 = 0, $7904 = 0, $7905 = 0, $7906 = 0, $7907 = 0, $7908 = 0, $7909 = 0, $791 = 0, $7910 = 0, $7911 = 0, $7912 = 0, $7913 = 0, $7914 = 0, $7915 = 0, $7916 = 0, $7917 = 0;
 var $7918 = 0, $7919 = 0, $792 = 0, $7920 = 0, $7921 = 0, $7922 = 0, $7923 = 0, $7924 = 0, $7925 = 0, $7926 = 0, $7927 = 0, $7928 = 0, $7929 = 0, $793 = 0, $7930 = 0, $7931 = 0, $7932 = 0, $7933 = 0, $7934 = 0, $7935 = 0;
 var $7936 = 0, $7937 = 0, $7938 = 0, $7939 = 0, $794 = 0, $7940 = 0, $7941 = 0, $7942 = 0, $7943 = 0, $7944 = 0, $7945 = 0, $7946 = 0, $7947 = 0, $7948 = 0, $7949 = 0, $795 = 0, $7950 = 0, $7951 = 0, $7952 = 0, $7953 = 0;
 var $7954 = 0, $7955 = 0, $7956 = 0, $7957 = 0, $7958 = 0, $7959 = 0, $796 = 0, $7960 = 0, $7961 = 0, $7962 = 0, $7963 = 0, $7964 = 0, $7965 = 0, $7966 = 0, $7967 = 0, $7968 = 0, $7969 = 0, $797 = 0, $7970 = 0, $7971 = 0;
 var $7972 = 0, $7973 = 0, $7974 = 0, $7975 = 0, $7976 = 0, $7977 = 0, $7978 = 0, $7979 = 0, $798 = 0, $7980 = 0, $7981 = 0, $7982 = 0, $7983 = 0, $7984 = 0, $7985 = 0, $7986 = 0, $7987 = 0, $7988 = 0, $7989 = 0, $799 = 0;
 var $7990 = 0, $7991 = 0, $7992 = 0, $7993 = 0, $7994 = 0, $7995 = 0, $7996 = 0, $7997 = 0, $7998 = 0, $7999 = 0, $8 = 0, $80 = 0, $800 = 0, $8000 = 0, $8001 = 0, $8002 = 0, $8003 = 0, $8004 = 0, $8005 = 0, $8006 = 0;
 var $8007 = 0, $8008 = 0, $8009 = 0, $801 = 0, $8010 = 0, $8011 = 0, $8012 = 0, $8013 = 0, $8014 = 0, $8015 = 0, $8016 = 0, $8017 = 0, $8018 = 0, $8019 = 0, $802 = 0, $8020 = 0, $8021 = 0, $8022 = 0, $8023 = 0, $8024 = 0;
 var $8025 = 0, $8026 = 0, $8027 = 0, $8028 = 0, $8029 = 0, $803 = 0, $8030 = 0, $8031 = 0, $8032 = 0, $8033 = 0, $8034 = 0, $8035 = 0, $8036 = 0, $8037 = 0, $8038 = 0, $8039 = 0, $804 = 0, $8040 = 0, $8041 = 0, $8042 = 0;
 var $8043 = 0, $8044 = 0, $8045 = 0, $8046 = 0, $8047 = 0, $8048 = 0, $8049 = 0, $805 = 0, $8050 = 0, $8051 = 0, $8052 = 0, $8053 = 0, $8054 = 0, $8055 = 0, $8056 = 0, $8057 = 0, $8058 = 0, $8059 = 0, $806 = 0, $8060 = 0;
 var $8061 = 0, $8062 = 0, $8063 = 0, $8064 = 0, $8065 = 0, $8066 = 0, $8067 = 0, $8068 = 0, $8069 = 0, $807 = 0, $8070 = 0, $8071 = 0, $8072 = 0, $8073 = 0, $8074 = 0, $8075 = 0, $8076 = 0, $8077 = 0, $8078 = 0, $8079 = 0;
 var $808 = 0, $8080 = 0, $8081 = 0, $8082 = 0, $8083 = 0, $8084 = 0, $8085 = 0, $8086 = 0, $8087 = 0, $8088 = 0, $8089 = 0, $809 = 0, $8090 = 0, $8091 = 0, $8092 = 0, $8093 = 0, $8094 = 0, $8095 = 0, $8096 = 0, $8097 = 0;
 var $8098 = 0, $8099 = 0, $81 = 0, $810 = 0, $8100 = 0, $8101 = 0, $8102 = 0, $8103 = 0, $8104 = 0, $8105 = 0, $8106 = 0, $8107 = 0, $8108 = 0, $8109 = 0, $811 = 0, $8110 = 0, $8111 = 0, $8112 = 0, $8113 = 0, $8114 = 0;
 var $8115 = 0, $8116 = 0, $8117 = 0, $8118 = 0, $8119 = 0, $812 = 0, $8120 = 0, $8121 = 0, $8122 = 0, $8123 = 0, $8124 = 0, $8125 = 0, $8126 = 0, $8127 = 0, $8128 = 0, $8129 = 0, $813 = 0, $8130 = 0, $8131 = 0, $8132 = 0;
 var $8133 = 0, $8134 = 0, $8135 = 0, $8136 = 0, $8137 = 0, $8138 = 0, $8139 = 0, $814 = 0, $8140 = 0, $8141 = 0, $8142 = 0, $8143 = 0, $8144 = 0, $8145 = 0, $8146 = 0, $8147 = 0, $8148 = 0, $8149 = 0, $815 = 0, $8150 = 0;
 var $8151 = 0, $8152 = 0, $8153 = 0, $8154 = 0, $8155 = 0, $8156 = 0, $8157 = 0, $8158 = 0, $8159 = 0, $816 = 0, $8160 = 0, $8161 = 0, $8162 = 0, $8163 = 0, $8164 = 0, $8165 = 0, $8166 = 0, $8167 = 0, $8168 = 0, $8169 = 0;
 var $817 = 0, $8170 = 0, $8171 = 0, $8172 = 0, $8173 = 0, $8174 = 0, $8175 = 0, $8176 = 0, $8177 = 0, $8178 = 0, $8179 = 0, $818 = 0, $8180 = 0, $8181 = 0, $8182 = 0, $8183 = 0, $8184 = 0, $8185 = 0, $8186 = 0, $8187 = 0;
 var $8188 = 0, $8189 = 0, $819 = 0, $8190 = 0, $8191 = 0, $8192 = 0, $8193 = 0, $8194 = 0, $8195 = 0, $8196 = 0, $8197 = 0, $8198 = 0, $8199 = 0, $82 = 0, $820 = 0, $8200 = 0, $8201 = 0, $8202 = 0, $8203 = 0, $8204 = 0;
 var $8205 = 0, $8206 = 0, $8207 = 0, $8208 = 0, $8209 = 0, $821 = 0, $8210 = 0, $8211 = 0, $8212 = 0, $8213 = 0, $8214 = 0, $8215 = 0, $8216 = 0, $8217 = 0, $8218 = 0, $8219 = 0, $822 = 0, $8220 = 0, $8221 = 0, $8222 = 0;
 var $8223 = 0, $8224 = 0, $8225 = 0, $8226 = 0, $8227 = 0, $8228 = 0, $8229 = 0, $823 = 0, $8230 = 0, $8231 = 0, $8232 = 0, $8233 = 0, $8234 = 0, $8235 = 0, $8236 = 0, $8237 = 0, $8238 = 0, $8239 = 0, $824 = 0, $8240 = 0;
 var $8241 = 0, $8242 = 0, $8243 = 0, $8244 = 0, $8245 = 0, $8246 = 0, $8247 = 0, $8248 = 0, $8249 = 0, $825 = 0, $8250 = 0, $8251 = 0, $8252 = 0, $8253 = 0, $8254 = 0, $8255 = 0, $8256 = 0, $8257 = 0, $8258 = 0, $8259 = 0;
 var $826 = 0, $8260 = 0, $8261 = 0, $8262 = 0, $8263 = 0, $8264 = 0, $8265 = 0, $8266 = 0, $8267 = 0, $8268 = 0, $8269 = 0, $827 = 0, $8270 = 0, $8271 = 0, $8272 = 0, $8273 = 0, $8274 = 0, $8275 = 0, $8276 = 0, $8277 = 0;
 var $8278 = 0, $8279 = 0, $828 = 0, $8280 = 0, $8281 = 0, $8282 = 0, $8283 = 0, $8284 = 0, $8285 = 0, $8286 = 0, $8287 = 0, $8288 = 0, $8289 = 0, $829 = 0, $8290 = 0, $8291 = 0, $8292 = 0, $8293 = 0, $8294 = 0, $8295 = 0;
 var $8296 = 0, $8297 = 0, $8298 = 0, $8299 = 0, $83 = 0, $830 = 0, $8300 = 0, $8301 = 0, $8302 = 0, $8303 = 0, $8304 = 0, $8305 = 0, $8306 = 0, $8307 = 0, $8308 = 0, $8309 = 0, $831 = 0, $8310 = 0, $8311 = 0, $8312 = 0;
 var $8313 = 0, $8314 = 0, $8315 = 0, $8316 = 0, $8317 = 0, $8318 = 0, $8319 = 0, $832 = 0, $8320 = 0, $8321 = 0, $8322 = 0, $8323 = 0, $8324 = 0, $8325 = 0, $8326 = 0, $8327 = 0, $8328 = 0, $8329 = 0, $833 = 0, $8330 = 0;
 var $8331 = 0, $8332 = 0, $8333 = 0, $8334 = 0, $8335 = 0, $8336 = 0, $8337 = 0, $8338 = 0, $8339 = 0, $834 = 0, $8340 = 0, $8341 = 0, $8342 = 0, $8343 = 0, $8344 = 0, $8345 = 0, $8346 = 0, $8347 = 0, $8348 = 0, $8349 = 0;
 var $835 = 0, $8350 = 0, $8351 = 0, $8352 = 0, $8353 = 0, $8354 = 0, $8355 = 0, $8356 = 0, $8357 = 0, $8358 = 0, $8359 = 0, $836 = 0, $8360 = 0, $8361 = 0, $8362 = 0, $8363 = 0, $8364 = 0, $8365 = 0, $8366 = 0, $8367 = 0;
 var $8368 = 0, $8369 = 0, $837 = 0, $8370 = 0, $8371 = 0, $8372 = 0, $8373 = 0, $8374 = 0, $8375 = 0, $8376 = 0, $8377 = 0, $8378 = 0, $8379 = 0, $838 = 0, $8380 = 0, $8381 = 0, $8382 = 0, $8383 = 0, $8384 = 0, $8385 = 0;
 var $8386 = 0, $8387 = 0, $8388 = 0, $8389 = 0, $839 = 0, $8390 = 0, $8391 = 0, $8392 = 0, $8393 = 0, $8394 = 0, $8395 = 0, $8396 = 0, $8397 = 0, $8398 = 0, $8399 = 0, $84 = 0, $840 = 0, $8400 = 0, $8401 = 0, $8402 = 0;
 var $8403 = 0, $8404 = 0, $8405 = 0, $8406 = 0, $8407 = 0, $8408 = 0, $8409 = 0, $841 = 0, $8410 = 0, $8411 = 0, $8412 = 0, $8413 = 0, $8414 = 0, $8415 = 0, $8416 = 0, $8417 = 0, $8418 = 0, $8419 = 0, $842 = 0, $8420 = 0;
 var $8421 = 0, $8422 = 0, $8423 = 0, $8424 = 0, $8425 = 0, $8426 = 0, $8427 = 0, $8428 = 0, $8429 = 0, $843 = 0, $8430 = 0, $8431 = 0, $8432 = 0, $8433 = 0, $8434 = 0, $8435 = 0, $8436 = 0, $8437 = 0, $8438 = 0, $8439 = 0;
 var $844 = 0, $8440 = 0, $8441 = 0, $8442 = 0, $8443 = 0, $8444 = 0, $8445 = 0, $8446 = 0, $8447 = 0, $8448 = 0, $8449 = 0, $845 = 0, $8450 = 0, $8451 = 0, $8452 = 0, $8453 = 0, $8454 = 0, $8455 = 0, $8456 = 0, $8457 = 0;
 var $8458 = 0, $8459 = 0, $846 = 0, $8460 = 0, $8461 = 0, $8462 = 0, $8463 = 0, $8464 = 0, $8465 = 0, $8466 = 0, $8467 = 0, $8468 = 0, $8469 = 0, $847 = 0, $8470 = 0, $8471 = 0, $8472 = 0, $8473 = 0, $8474 = 0, $8475 = 0;
 var $8476 = 0, $8477 = 0, $8478 = 0, $8479 = 0, $848 = 0, $8480 = 0, $8481 = 0, $8482 = 0, $8483 = 0, $8484 = 0, $8485 = 0, $8486 = 0, $8487 = 0, $8488 = 0, $8489 = 0, $849 = 0, $8490 = 0, $8491 = 0, $8492 = 0, $8493 = 0;
 var $8494 = 0, $8495 = 0, $8496 = 0, $8497 = 0, $8498 = 0, $8499 = 0, $85 = 0, $850 = 0, $8500 = 0, $8501 = 0, $8502 = 0, $8503 = 0, $8504 = 0, $8505 = 0, $8506 = 0, $8507 = 0, $8508 = 0, $8509 = 0, $851 = 0, $8510 = 0;
 var $8511 = 0, $8512 = 0, $8513 = 0, $8514 = 0, $8515 = 0, $8516 = 0, $8517 = 0, $8518 = 0, $8519 = 0, $852 = 0, $8520 = 0, $8521 = 0, $8522 = 0, $8523 = 0, $8524 = 0, $8525 = 0, $8526 = 0, $8527 = 0, $8528 = 0, $8529 = 0;
 var $853 = 0, $8530 = 0, $8531 = 0, $8532 = 0, $8533 = 0, $8534 = 0, $8535 = 0, $8536 = 0, $8537 = 0, $8538 = 0, $8539 = 0, $854 = 0, $8540 = 0, $8541 = 0, $8542 = 0, $8543 = 0, $8544 = 0, $8545 = 0, $8546 = 0, $8547 = 0;
 var $8548 = 0, $8549 = 0, $855 = 0, $8550 = 0, $8551 = 0, $8552 = 0, $8553 = 0, $8554 = 0, $8555 = 0, $8556 = 0, $8557 = 0, $8558 = 0, $8559 = 0, $856 = 0, $8560 = 0, $8561 = 0, $8562 = 0, $8563 = 0, $8564 = 0, $8565 = 0;
 var $8566 = 0, $8567 = 0, $8568 = 0, $8569 = 0, $857 = 0, $8570 = 0, $8571 = 0, $8572 = 0, $8573 = 0, $8574 = 0, $8575 = 0, $8576 = 0, $8577 = 0, $8578 = 0, $8579 = 0, $858 = 0, $8580 = 0, $8581 = 0, $8582 = 0, $8583 = 0;
 var $8584 = 0, $8585 = 0, $8586 = 0, $8587 = 0, $8588 = 0, $8589 = 0, $859 = 0, $8590 = 0, $8591 = 0, $8592 = 0, $8593 = 0, $8594 = 0, $8595 = 0, $8596 = 0, $8597 = 0, $8598 = 0, $8599 = 0, $86 = 0, $860 = 0, $8600 = 0;
 var $8601 = 0, $8602 = 0, $8603 = 0, $8604 = 0, $8605 = 0, $8606 = 0, $8607 = 0, $8608 = 0, $8609 = 0, $861 = 0, $8610 = 0, $8611 = 0, $8612 = 0, $8613 = 0, $8614 = 0, $8615 = 0, $8616 = 0, $8617 = 0, $8618 = 0, $8619 = 0;
 var $862 = 0, $8620 = 0, $8621 = 0, $8622 = 0, $8623 = 0, $8624 = 0, $8625 = 0, $8626 = 0, $8627 = 0, $8628 = 0, $8629 = 0, $863 = 0, $8630 = 0, $8631 = 0, $8632 = 0, $8633 = 0, $8634 = 0, $8635 = 0, $8636 = 0, $8637 = 0;
 var $8638 = 0, $8639 = 0, $864 = 0, $8640 = 0, $8641 = 0, $8642 = 0, $8643 = 0, $8644 = 0, $8645 = 0, $8646 = 0, $8647 = 0, $8648 = 0, $8649 = 0, $865 = 0, $8650 = 0, $8651 = 0, $8652 = 0, $8653 = 0, $8654 = 0, $8655 = 0;
 var $8656 = 0, $8657 = 0, $8658 = 0, $8659 = 0, $866 = 0, $8660 = 0, $8661 = 0, $8662 = 0, $8663 = 0, $8664 = 0, $8665 = 0, $8666 = 0, $8667 = 0, $8668 = 0, $8669 = 0, $867 = 0, $8670 = 0, $8671 = 0, $8672 = 0, $8673 = 0;
 var $8674 = 0, $8675 = 0, $8676 = 0, $8677 = 0, $8678 = 0, $8679 = 0, $868 = 0, $8680 = 0, $8681 = 0, $8682 = 0, $8683 = 0, $8684 = 0, $8685 = 0, $8686 = 0, $8687 = 0, $8688 = 0, $8689 = 0, $869 = 0, $8690 = 0, $8691 = 0;
 var $8692 = 0, $8693 = 0, $8694 = 0, $8695 = 0, $8696 = 0, $8697 = 0, $8698 = 0, $8699 = 0, $87 = 0, $870 = 0, $8700 = 0, $8701 = 0, $8702 = 0, $8703 = 0, $8704 = 0, $8705 = 0, $8706 = 0, $8707 = 0, $8708 = 0, $8709 = 0;
 var $871 = 0, $8710 = 0, $8711 = 0, $8712 = 0, $8713 = 0, $8714 = 0, $8715 = 0, $8716 = 0, $8717 = 0, $8718 = 0, $8719 = 0, $872 = 0, $8720 = 0, $8721 = 0, $8722 = 0, $8723 = 0, $8724 = 0, $8725 = 0, $8726 = 0, $8727 = 0;
 var $8728 = 0, $8729 = 0, $873 = 0, $8730 = 0, $8731 = 0, $8732 = 0, $8733 = 0, $8734 = 0, $8735 = 0, $8736 = 0, $8737 = 0, $8738 = 0, $8739 = 0, $874 = 0, $8740 = 0, $8741 = 0, $8742 = 0, $8743 = 0, $8744 = 0, $8745 = 0;
 var $8746 = 0, $8747 = 0, $8748 = 0, $8749 = 0, $875 = 0, $8750 = 0, $8751 = 0, $8752 = 0, $8753 = 0, $8754 = 0, $8755 = 0, $8756 = 0, $8757 = 0, $8758 = 0, $8759 = 0, $876 = 0, $8760 = 0, $8761 = 0, $8762 = 0, $8763 = 0;
 var $8764 = 0, $8765 = 0, $8766 = 0, $8767 = 0, $8768 = 0, $8769 = 0, $877 = 0, $8770 = 0, $8771 = 0, $8772 = 0, $8773 = 0, $8774 = 0, $8775 = 0, $8776 = 0, $8777 = 0, $8778 = 0, $8779 = 0, $878 = 0, $8780 = 0, $8781 = 0;
 var $8782 = 0, $8783 = 0, $8784 = 0, $8785 = 0, $8786 = 0, $8787 = 0, $8788 = 0, $8789 = 0, $879 = 0, $8790 = 0, $8791 = 0, $8792 = 0, $8793 = 0, $8794 = 0, $8795 = 0, $8796 = 0, $8797 = 0, $8798 = 0, $8799 = 0, $88 = 0;
 var $880 = 0, $8800 = 0, $8801 = 0, $8802 = 0, $8803 = 0, $8804 = 0, $8805 = 0, $8806 = 0, $8807 = 0, $8808 = 0, $8809 = 0, $881 = 0, $8810 = 0, $8811 = 0, $8812 = 0, $8813 = 0, $8814 = 0, $8815 = 0, $8816 = 0, $8817 = 0;
 var $8818 = 0, $8819 = 0, $882 = 0, $8820 = 0, $8821 = 0, $8822 = 0, $8823 = 0, $8824 = 0, $8825 = 0, $8826 = 0, $8827 = 0, $8828 = 0, $8829 = 0, $883 = 0, $8830 = 0, $8831 = 0, $8832 = 0, $8833 = 0, $8834 = 0, $8835 = 0;
 var $8836 = 0, $8837 = 0, $8838 = 0, $8839 = 0, $884 = 0, $8840 = 0, $8841 = 0, $8842 = 0, $8843 = 0, $8844 = 0, $8845 = 0, $8846 = 0, $8847 = 0, $8848 = 0, $8849 = 0, $885 = 0, $8850 = 0, $8851 = 0, $8852 = 0, $8853 = 0;
 var $8854 = 0, $8855 = 0, $8856 = 0, $8857 = 0, $8858 = 0, $8859 = 0, $886 = 0, $8860 = 0, $8861 = 0, $8862 = 0, $8863 = 0, $8864 = 0, $8865 = 0, $8866 = 0, $8867 = 0, $8868 = 0, $8869 = 0, $887 = 0, $8870 = 0, $8871 = 0;
 var $8872 = 0, $8873 = 0, $8874 = 0, $8875 = 0, $8876 = 0, $8877 = 0, $8878 = 0, $8879 = 0, $888 = 0, $8880 = 0, $8881 = 0, $8882 = 0, $8883 = 0, $8884 = 0, $8885 = 0, $8886 = 0, $8887 = 0, $8888 = 0, $8889 = 0, $889 = 0;
 var $8890 = 0, $8891 = 0, $8892 = 0, $8893 = 0, $8894 = 0, $8895 = 0, $8896 = 0, $8897 = 0, $8898 = 0, $8899 = 0, $89 = 0, $890 = 0, $8900 = 0, $8901 = 0, $8902 = 0, $8903 = 0, $8904 = 0, $8905 = 0, $8906 = 0, $8907 = 0;
 var $8908 = 0, $8909 = 0, $891 = 0, $8910 = 0, $8911 = 0, $8912 = 0, $8913 = 0, $8914 = 0, $8915 = 0, $8916 = 0, $8917 = 0, $8918 = 0, $8919 = 0, $892 = 0, $8920 = 0, $8921 = 0, $8922 = 0, $8923 = 0, $8924 = 0, $8925 = 0;
 var $8926 = 0, $8927 = 0, $8928 = 0, $8929 = 0, $893 = 0, $8930 = 0, $8931 = 0, $8932 = 0, $8933 = 0, $8934 = 0, $8935 = 0, $8936 = 0, $8937 = 0, $8938 = 0, $8939 = 0, $894 = 0, $8940 = 0, $8941 = 0, $8942 = 0, $8943 = 0;
 var $8944 = 0, $8945 = 0, $8946 = 0, $8947 = 0, $8948 = 0, $8949 = 0, $895 = 0, $8950 = 0, $8951 = 0, $8952 = 0, $8953 = 0, $8954 = 0, $8955 = 0, $8956 = 0, $8957 = 0, $8958 = 0, $8959 = 0, $896 = 0, $8960 = 0, $8961 = 0;
 var $8962 = 0, $8963 = 0, $8964 = 0, $8965 = 0, $8966 = 0, $8967 = 0, $8968 = 0, $8969 = 0, $897 = 0, $8970 = 0, $8971 = 0, $8972 = 0, $8973 = 0, $8974 = 0, $8975 = 0, $8976 = 0, $8977 = 0, $8978 = 0, $8979 = 0, $898 = 0;
 var $8980 = 0, $8981 = 0, $8982 = 0, $8983 = 0, $8984 = 0, $8985 = 0, $8986 = 0, $8987 = 0, $8988 = 0, $8989 = 0, $899 = 0, $8990 = 0, $8991 = 0, $8992 = 0, $8993 = 0, $8994 = 0, $8995 = 0, $8996 = 0, $8997 = 0, $8998 = 0;
 var $8999 = 0, $9 = 0, $90 = 0, $900 = 0, $9000 = 0, $9001 = 0, $9002 = 0, $9003 = 0, $9004 = 0, $9005 = 0, $9006 = 0, $9007 = 0, $9008 = 0, $9009 = 0, $901 = 0, $9010 = 0, $9011 = 0, $9012 = 0, $9013 = 0, $9014 = 0;
 var $9015 = 0, $9016 = 0, $9017 = 0, $9018 = 0, $9019 = 0, $902 = 0, $9020 = 0, $9021 = 0, $9022 = 0, $9023 = 0, $9024 = 0, $9025 = 0, $9026 = 0, $9027 = 0, $9028 = 0, $9029 = 0, $903 = 0, $9030 = 0, $9031 = 0, $9032 = 0;
 var $9033 = 0, $9034 = 0, $9035 = 0, $9036 = 0, $9037 = 0, $9038 = 0, $9039 = 0, $904 = 0, $9040 = 0, $9041 = 0, $9042 = 0, $9043 = 0, $9044 = 0, $9045 = 0, $9046 = 0, $9047 = 0, $9048 = 0, $9049 = 0, $905 = 0, $9050 = 0;
 var $9051 = 0, $9052 = 0, $9053 = 0, $9054 = 0, $9055 = 0, $9056 = 0, $9057 = 0, $9058 = 0, $9059 = 0, $906 = 0, $9060 = 0, $9061 = 0, $9062 = 0, $9063 = 0, $9064 = 0, $9065 = 0, $9066 = 0, $9067 = 0, $9068 = 0, $9069 = 0;
 var $907 = 0, $9070 = 0, $9071 = 0, $9072 = 0, $9073 = 0, $9074 = 0, $9075 = 0, $9076 = 0, $9077 = 0, $9078 = 0, $9079 = 0, $908 = 0, $9080 = 0, $9081 = 0, $9082 = 0, $9083 = 0, $9084 = 0, $9085 = 0, $9086 = 0, $9087 = 0;
 var $9088 = 0, $9089 = 0, $909 = 0, $9090 = 0, $9091 = 0, $9092 = 0, $9093 = 0, $9094 = 0, $9095 = 0, $9096 = 0, $9097 = 0, $9098 = 0, $9099 = 0, $91 = 0, $910 = 0, $9100 = 0, $9101 = 0, $9102 = 0, $9103 = 0, $9104 = 0;
 var $9105 = 0, $9106 = 0, $9107 = 0, $9108 = 0, $9109 = 0, $911 = 0, $9110 = 0, $9111 = 0, $9112 = 0, $9113 = 0, $9114 = 0, $9115 = 0, $9116 = 0, $9117 = 0, $9118 = 0, $9119 = 0, $912 = 0, $9120 = 0, $9121 = 0, $9122 = 0;
 var $9123 = 0, $9124 = 0, $9125 = 0, $9126 = 0, $9127 = 0, $9128 = 0, $9129 = 0, $913 = 0, $9130 = 0, $9131 = 0, $9132 = 0, $9133 = 0, $9134 = 0, $9135 = 0, $9136 = 0, $9137 = 0, $9138 = 0, $9139 = 0, $914 = 0, $9140 = 0;
 var $9141 = 0, $9142 = 0, $9143 = 0, $9144 = 0, $9145 = 0, $9146 = 0, $9147 = 0, $9148 = 0, $9149 = 0, $915 = 0, $9150 = 0, $9151 = 0, $9152 = 0, $9153 = 0, $9154 = 0, $9155 = 0, $9156 = 0, $9157 = 0, $9158 = 0, $9159 = 0;
 var $916 = 0, $9160 = 0, $9161 = 0, $9162 = 0, $9163 = 0, $9164 = 0, $9165 = 0, $9166 = 0, $9167 = 0, $9168 = 0, $9169 = 0, $917 = 0, $9170 = 0, $9171 = 0, $9172 = 0, $9173 = 0, $9174 = 0, $9175 = 0, $9176 = 0, $9177 = 0;
 var $9178 = 0, $9179 = 0, $918 = 0, $9180 = 0, $9181 = 0, $9182 = 0, $9183 = 0, $9184 = 0, $9185 = 0, $9186 = 0, $9187 = 0, $9188 = 0, $9189 = 0, $919 = 0, $9190 = 0, $9191 = 0, $9192 = 0, $9193 = 0, $9194 = 0, $9195 = 0;
 var $9196 = 0, $9197 = 0, $9198 = 0, $9199 = 0, $92 = 0, $920 = 0, $9200 = 0, $9201 = 0, $9202 = 0, $9203 = 0, $9204 = 0, $9205 = 0, $9206 = 0, $9207 = 0, $9208 = 0, $9209 = 0, $921 = 0, $9210 = 0, $9211 = 0, $9212 = 0;
 var $9213 = 0, $9214 = 0, $9215 = 0, $9216 = 0, $9217 = 0, $9218 = 0, $9219 = 0, $922 = 0, $9220 = 0, $9221 = 0, $9222 = 0, $9223 = 0, $9224 = 0, $9225 = 0, $9226 = 0, $9227 = 0, $9228 = 0, $9229 = 0, $923 = 0, $9230 = 0;
 var $9231 = 0, $9232 = 0, $9233 = 0, $9234 = 0, $9235 = 0, $9236 = 0, $9237 = 0, $9238 = 0, $9239 = 0, $924 = 0, $9240 = 0, $9241 = 0, $9242 = 0, $9243 = 0, $9244 = 0, $9245 = 0, $9246 = 0, $9247 = 0, $9248 = 0, $9249 = 0;
 var $925 = 0, $9250 = 0, $9251 = 0, $9252 = 0, $9253 = 0, $9254 = 0, $9255 = 0, $9256 = 0, $9257 = 0, $9258 = 0, $9259 = 0, $926 = 0, $9260 = 0, $9261 = 0, $9262 = 0, $9263 = 0, $9264 = 0, $9265 = 0, $9266 = 0, $9267 = 0;
 var $9268 = 0, $9269 = 0, $927 = 0, $9270 = 0, $9271 = 0, $9272 = 0, $9273 = 0, $9274 = 0, $9275 = 0, $9276 = 0, $9277 = 0, $9278 = 0, $9279 = 0, $928 = 0, $9280 = 0, $9281 = 0, $9282 = 0, $9283 = 0, $9284 = 0, $9285 = 0;
 var $9286 = 0, $9287 = 0, $9288 = 0, $9289 = 0, $929 = 0, $9290 = 0, $9291 = 0, $9292 = 0, $9293 = 0, $9294 = 0, $9295 = 0, $9296 = 0, $9297 = 0, $9298 = 0, $9299 = 0, $93 = 0, $930 = 0, $9300 = 0, $9301 = 0, $9302 = 0;
 var $9303 = 0, $9304 = 0, $9305 = 0, $9306 = 0, $9307 = 0, $9308 = 0, $9309 = 0, $931 = 0, $9310 = 0, $9311 = 0, $9312 = 0, $9313 = 0, $9314 = 0, $9315 = 0, $9316 = 0, $9317 = 0, $9318 = 0, $9319 = 0, $932 = 0, $9320 = 0;
 var $9321 = 0, $9322 = 0, $9323 = 0, $9324 = 0, $9325 = 0, $9326 = 0, $9327 = 0, $9328 = 0, $9329 = 0, $933 = 0, $9330 = 0, $9331 = 0, $9332 = 0, $9333 = 0, $9334 = 0, $9335 = 0, $9336 = 0, $9337 = 0, $9338 = 0, $9339 = 0;
 var $934 = 0, $9340 = 0, $9341 = 0, $9342 = 0, $9343 = 0, $9344 = 0, $9345 = 0, $9346 = 0, $9347 = 0, $9348 = 0, $9349 = 0, $935 = 0, $9350 = 0, $9351 = 0, $9352 = 0, $9353 = 0, $9354 = 0, $9355 = 0, $9356 = 0, $9357 = 0;
 var $9358 = 0, $9359 = 0, $936 = 0, $9360 = 0, $9361 = 0, $9362 = 0, $9363 = 0, $9364 = 0, $9365 = 0, $9366 = 0, $9367 = 0, $9368 = 0, $9369 = 0, $937 = 0, $9370 = 0, $9371 = 0, $9372 = 0, $9373 = 0, $9374 = 0, $9375 = 0;
 var $9376 = 0, $9377 = 0, $9378 = 0, $9379 = 0, $938 = 0, $9380 = 0, $9381 = 0, $9382 = 0, $9383 = 0, $9384 = 0, $9385 = 0, $9386 = 0, $9387 = 0, $9388 = 0, $9389 = 0, $939 = 0, $9390 = 0, $9391 = 0, $9392 = 0, $9393 = 0;
 var $9394 = 0, $9395 = 0, $9396 = 0, $9397 = 0, $9398 = 0, $9399 = 0, $94 = 0, $940 = 0, $9400 = 0, $9401 = 0, $9402 = 0, $9403 = 0, $9404 = 0, $9405 = 0, $9406 = 0, $9407 = 0, $9408 = 0, $9409 = 0, $941 = 0, $9410 = 0;
 var $9411 = 0, $9412 = 0, $9413 = 0, $9414 = 0, $9415 = 0, $9416 = 0, $9417 = 0, $9418 = 0, $9419 = 0, $942 = 0, $9420 = 0, $9421 = 0, $9422 = 0, $9423 = 0, $9424 = 0, $9425 = 0, $9426 = 0, $9427 = 0, $9428 = 0, $9429 = 0;
 var $943 = 0, $9430 = 0, $9431 = 0, $9432 = 0, $9433 = 0, $9434 = 0, $9435 = 0, $9436 = 0, $9437 = 0, $9438 = 0, $9439 = 0, $944 = 0, $9440 = 0, $9441 = 0, $9442 = 0, $9443 = 0, $9444 = 0, $9445 = 0, $9446 = 0, $9447 = 0;
 var $9448 = 0, $9449 = 0, $945 = 0, $9450 = 0, $9451 = 0, $9452 = 0, $9453 = 0, $9454 = 0, $9455 = 0, $9456 = 0, $9457 = 0, $9458 = 0, $9459 = 0, $946 = 0, $9460 = 0, $9461 = 0, $9462 = 0, $9463 = 0, $9464 = 0, $9465 = 0;
 var $9466 = 0, $9467 = 0, $9468 = 0, $9469 = 0, $947 = 0, $9470 = 0, $9471 = 0, $9472 = 0, $9473 = 0, $9474 = 0, $9475 = 0, $9476 = 0, $9477 = 0, $9478 = 0, $9479 = 0, $948 = 0, $9480 = 0, $9481 = 0, $9482 = 0, $9483 = 0;
 var $9484 = 0, $9485 = 0, $9486 = 0, $9487 = 0, $9488 = 0, $9489 = 0, $949 = 0, $9490 = 0, $9491 = 0, $9492 = 0, $9493 = 0, $9494 = 0, $9495 = 0, $9496 = 0, $9497 = 0, $9498 = 0, $9499 = 0, $95 = 0, $950 = 0, $9500 = 0;
 var $9501 = 0, $9502 = 0, $9503 = 0, $9504 = 0, $9505 = 0, $9506 = 0, $9507 = 0, $9508 = 0, $9509 = 0, $951 = 0, $9510 = 0, $9511 = 0, $9512 = 0, $9513 = 0, $9514 = 0, $9515 = 0, $9516 = 0, $9517 = 0, $9518 = 0, $9519 = 0;
 var $952 = 0, $9520 = 0, $9521 = 0, $9522 = 0, $9523 = 0, $9524 = 0, $9525 = 0, $9526 = 0, $9527 = 0, $9528 = 0, $9529 = 0, $953 = 0, $9530 = 0, $9531 = 0, $9532 = 0, $9533 = 0, $9534 = 0, $9535 = 0, $9536 = 0, $9537 = 0;
 var $9538 = 0, $9539 = 0, $954 = 0, $9540 = 0, $9541 = 0, $9542 = 0, $9543 = 0, $9544 = 0, $9545 = 0, $9546 = 0, $9547 = 0, $9548 = 0, $9549 = 0, $955 = 0, $9550 = 0, $9551 = 0, $9552 = 0, $9553 = 0, $9554 = 0, $9555 = 0;
 var $9556 = 0, $9557 = 0, $9558 = 0, $9559 = 0, $956 = 0, $9560 = 0, $9561 = 0, $9562 = 0, $9563 = 0, $9564 = 0, $9565 = 0, $9566 = 0, $9567 = 0, $9568 = 0, $9569 = 0, $957 = 0, $9570 = 0, $9571 = 0, $9572 = 0, $9573 = 0;
 var $9574 = 0, $9575 = 0, $9576 = 0, $9577 = 0, $9578 = 0, $9579 = 0, $958 = 0, $9580 = 0, $9581 = 0, $9582 = 0, $9583 = 0, $9584 = 0, $9585 = 0, $9586 = 0, $9587 = 0, $9588 = 0, $9589 = 0, $959 = 0, $9590 = 0, $9591 = 0;
 var $9592 = 0, $9593 = 0, $9594 = 0, $9595 = 0, $9596 = 0, $9597 = 0, $9598 = 0, $9599 = 0, $96 = 0, $960 = 0, $9600 = 0, $9601 = 0, $9602 = 0, $9603 = 0, $9604 = 0, $9605 = 0, $9606 = 0, $9607 = 0, $9608 = 0, $9609 = 0;
 var $961 = 0, $9610 = 0, $9611 = 0, $9612 = 0, $9613 = 0, $9614 = 0, $9615 = 0, $9616 = 0, $9617 = 0, $9618 = 0, $9619 = 0, $962 = 0, $9620 = 0, $9621 = 0, $9622 = 0, $9623 = 0, $9624 = 0, $9625 = 0, $9626 = 0, $9627 = 0;
 var $9628 = 0, $9629 = 0, $963 = 0, $9630 = 0, $9631 = 0, $9632 = 0, $9633 = 0, $9634 = 0, $9635 = 0, $9636 = 0, $9637 = 0, $9638 = 0, $9639 = 0, $964 = 0, $9640 = 0, $9641 = 0, $9642 = 0, $9643 = 0, $9644 = 0, $9645 = 0;
 var $9646 = 0, $9647 = 0, $9648 = 0, $9649 = 0, $965 = 0, $9650 = 0, $9651 = 0, $9652 = 0, $9653 = 0, $9654 = 0, $9655 = 0, $9656 = 0, $9657 = 0, $9658 = 0, $9659 = 0, $966 = 0, $9660 = 0, $9661 = 0, $9662 = 0, $9663 = 0;
 var $9664 = 0, $9665 = 0, $9666 = 0, $9667 = 0, $9668 = 0, $9669 = 0, $967 = 0, $9670 = 0, $9671 = 0, $9672 = 0, $9673 = 0, $9674 = 0, $9675 = 0, $9676 = 0, $9677 = 0, $9678 = 0, $9679 = 0, $968 = 0, $9680 = 0, $9681 = 0;
 var $9682 = 0, $9683 = 0, $9684 = 0, $9685 = 0, $9686 = 0, $9687 = 0, $9688 = 0, $9689 = 0, $969 = 0, $9690 = 0, $9691 = 0, $9692 = 0, $9693 = 0, $9694 = 0, $9695 = 0, $9696 = 0, $9697 = 0, $9698 = 0, $9699 = 0, $97 = 0;
 var $970 = 0, $9700 = 0, $9701 = 0, $9702 = 0, $9703 = 0, $9704 = 0, $9705 = 0, $9706 = 0, $9707 = 0, $9708 = 0, $9709 = 0, $971 = 0, $9710 = 0, $9711 = 0, $9712 = 0, $9713 = 0, $9714 = 0, $9715 = 0, $9716 = 0, $9717 = 0;
 var $9718 = 0, $9719 = 0, $972 = 0, $9720 = 0, $9721 = 0, $9722 = 0, $9723 = 0, $9724 = 0, $9725 = 0, $9726 = 0, $9727 = 0, $9728 = 0, $9729 = 0, $973 = 0, $9730 = 0, $9731 = 0, $9732 = 0, $9733 = 0, $9734 = 0, $9735 = 0;
 var $9736 = 0, $9737 = 0, $9738 = 0, $9739 = 0, $974 = 0, $9740 = 0, $9741 = 0, $9742 = 0, $9743 = 0, $9744 = 0, $9745 = 0, $9746 = 0, $9747 = 0, $9748 = 0, $9749 = 0, $975 = 0, $9750 = 0, $9751 = 0, $9752 = 0, $9753 = 0;
 var $9754 = 0, $9755 = 0, $9756 = 0, $9757 = 0, $9758 = 0, $9759 = 0, $976 = 0, $9760 = 0, $9761 = 0, $9762 = 0, $9763 = 0, $9764 = 0, $9765 = 0, $9766 = 0, $9767 = 0, $9768 = 0, $9769 = 0, $977 = 0, $9770 = 0, $9771 = 0;
 var $9772 = 0, $9773 = 0, $9774 = 0, $9775 = 0, $9776 = 0, $9777 = 0, $9778 = 0, $9779 = 0, $978 = 0, $9780 = 0, $9781 = 0, $9782 = 0, $9783 = 0, $9784 = 0, $9785 = 0, $9786 = 0, $9787 = 0, $9788 = 0, $9789 = 0, $979 = 0;
 var $9790 = 0, $9791 = 0, $9792 = 0, $9793 = 0, $9794 = 0, $9795 = 0, $9796 = 0, $9797 = 0, $9798 = 0, $9799 = 0, $98 = 0, $980 = 0, $9800 = 0, $9801 = 0, $9802 = 0, $9803 = 0, $9804 = 0, $9805 = 0, $9806 = 0, $9807 = 0;
 var $9808 = 0, $9809 = 0, $981 = 0, $9810 = 0, $9811 = 0, $9812 = 0, $9813 = 0, $9814 = 0, $9815 = 0, $9816 = 0, $9817 = 0, $9818 = 0, $9819 = 0, $982 = 0, $9820 = 0, $9821 = 0, $9822 = 0, $9823 = 0, $9824 = 0, $9825 = 0;
 var $9826 = 0, $9827 = 0, $9828 = 0, $9829 = 0, $983 = 0, $9830 = 0, $9831 = 0, $9832 = 0, $9833 = 0, $9834 = 0, $9835 = 0, $9836 = 0, $9837 = 0, $9838 = 0, $9839 = 0, $984 = 0, $9840 = 0, $9841 = 0, $9842 = 0, $9843 = 0;
 var $9844 = 0, $9845 = 0, $9846 = 0, $9847 = 0, $9848 = 0, $9849 = 0, $985 = 0, $9850 = 0, $9851 = 0, $9852 = 0, $9853 = 0, $9854 = 0, $9855 = 0, $9856 = 0, $9857 = 0, $9858 = 0, $9859 = 0, $986 = 0, $9860 = 0, $9861 = 0;
 var $9862 = 0, $9863 = 0, $9864 = 0, $9865 = 0, $9866 = 0, $9867 = 0, $9868 = 0, $9869 = 0, $987 = 0, $9870 = 0, $9871 = 0, $9872 = 0, $9873 = 0, $9874 = 0, $9875 = 0, $9876 = 0, $9877 = 0, $9878 = 0, $9879 = 0, $988 = 0;
 var $9880 = 0, $9881 = 0, $9882 = 0, $9883 = 0, $9884 = 0, $9885 = 0, $9886 = 0, $9887 = 0, $9888 = 0, $9889 = 0, $989 = 0, $9890 = 0, $9891 = 0, $9892 = 0, $9893 = 0, $9894 = 0, $9895 = 0, $9896 = 0, $9897 = 0, $9898 = 0;
 var $9899 = 0, $99 = 0, $990 = 0, $9900 = 0, $9901 = 0, $9902 = 0, $9903 = 0, $9904 = 0, $9905 = 0, $9906 = 0, $9907 = 0, $9908 = 0, $9909 = 0, $991 = 0, $9910 = 0, $9911 = 0, $9912 = 0, $9913 = 0, $9914 = 0, $9915 = 0;
 var $9916 = 0, $9917 = 0, $9918 = 0, $9919 = 0, $992 = 0, $9920 = 0, $9921 = 0, $9922 = 0, $9923 = 0, $9924 = 0, $9925 = 0, $9926 = 0, $9927 = 0, $9928 = 0, $9929 = 0, $993 = 0, $9930 = 0, $9931 = 0, $9932 = 0, $9933 = 0;
 var $9934 = 0, $9935 = 0, $9936 = 0, $9937 = 0, $9938 = 0, $9939 = 0, $994 = 0, $9940 = 0, $9941 = 0, $9942 = 0, $9943 = 0, $9944 = 0, $9945 = 0, $9946 = 0, $9947 = 0, $9948 = 0, $9949 = 0, $995 = 0, $9950 = 0, $9951 = 0;
 var $9952 = 0, $9953 = 0, $9954 = 0, $9955 = 0, $9956 = 0, $9957 = 0, $9958 = 0, $9959 = 0, $996 = 0, $9960 = 0, $9961 = 0, $9962 = 0, $9963 = 0, $9964 = 0, $9965 = 0, $9966 = 0, $9967 = 0, $9968 = 0, $9969 = 0, $997 = 0;
 var $9970 = 0, $9971 = 0, $9972 = 0, $9973 = 0, $9974 = 0, $9975 = 0, $9976 = 0, $9977 = 0, $9978 = 0, $9979 = 0, $998 = 0, $9980 = 0, $9981 = 0, $9982 = 0, $9983 = 0, $9984 = 0, $9985 = 0, $9986 = 0, $9987 = 0, $9988 = 0;
 var $9989 = 0, $999 = 0, $9990 = 0, $9991 = 0, $9992 = 0, $9993 = 0, $9994 = 0, $9995 = 0, $9996 = 0, $9997 = 0, $9998 = 0, $9999 = 0, $add$ptr11542 = 0, $add$ptr1642 = 0, $add$ptr3292 = 0, $add$ptr4942 = 0, $add$ptr6592 = 0, $add$ptr8242 = 0, $add$ptr9892 = 0, $arrayidx10099 = 0;
 var $arrayidx10103 = 0, $arrayidx10125 = 0, $arrayidx10150 = 0, $arrayidx10305 = 0, $arrayidx10309 = 0, $arrayidx10331 = 0, $arrayidx10356 = 0, $arrayidx10511 = 0, $arrayidx10515 = 0, $arrayidx10537 = 0, $arrayidx10562 = 0, $arrayidx11547 = 0, $arrayidx11569 = 0, $arrayidx11594 = 0, $arrayidx11749 = 0, $arrayidx11753 = 0, $arrayidx11775 = 0, $arrayidx11800 = 0, $arrayidx11955 = 0, $arrayidx11959 = 0;
 var $arrayidx11981 = 0, $arrayidx12006 = 0, $arrayidx12161 = 0, $arrayidx12165 = 0, $arrayidx12187 = 0, $arrayidx12212 = 0, $arrayidx1647 = 0, $arrayidx1669 = 0, $arrayidx1694 = 0, $arrayidx1849 = 0, $arrayidx1853 = 0, $arrayidx1875 = 0, $arrayidx1900 = 0, $arrayidx199 = 0, $arrayidx203 = 0, $arrayidx2055 = 0, $arrayidx2059 = 0, $arrayidx2081 = 0, $arrayidx2106 = 0, $arrayidx225 = 0;
 var $arrayidx2261 = 0, $arrayidx2265 = 0, $arrayidx2287 = 0, $arrayidx2312 = 0, $arrayidx24 = 0, $arrayidx250 = 0, $arrayidx3297 = 0, $arrayidx3319 = 0, $arrayidx3344 = 0, $arrayidx3499 = 0, $arrayidx3503 = 0, $arrayidx3525 = 0, $arrayidx3550 = 0, $arrayidx3705 = 0, $arrayidx3709 = 0, $arrayidx3731 = 0, $arrayidx3756 = 0, $arrayidx3911 = 0, $arrayidx3915 = 0, $arrayidx3937 = 0;
 var $arrayidx3962 = 0, $arrayidx405 = 0, $arrayidx409 = 0, $arrayidx431 = 0, $arrayidx45 = 0, $arrayidx456 = 0, $arrayidx4947 = 0, $arrayidx4969 = 0, $arrayidx4994 = 0, $arrayidx5 = 0, $arrayidx5149 = 0, $arrayidx5153 = 0, $arrayidx5175 = 0, $arrayidx5200 = 0, $arrayidx5355 = 0, $arrayidx5359 = 0, $arrayidx5381 = 0, $arrayidx5406 = 0, $arrayidx5561 = 0, $arrayidx5565 = 0;
 var $arrayidx5587 = 0, $arrayidx5612 = 0, $arrayidx611 = 0, $arrayidx615 = 0, $arrayidx637 = 0, $arrayidx6597 = 0, $arrayidx6619 = 0, $arrayidx662 = 0, $arrayidx6644 = 0, $arrayidx6799 = 0, $arrayidx6803 = 0, $arrayidx6825 = 0, $arrayidx6850 = 0, $arrayidx7005 = 0, $arrayidx7009 = 0, $arrayidx7031 = 0, $arrayidx7056 = 0, $arrayidx7211 = 0, $arrayidx7215 = 0, $arrayidx7237 = 0;
 var $arrayidx7262 = 0, $arrayidx8247 = 0, $arrayidx8269 = 0, $arrayidx8294 = 0, $arrayidx8449 = 0, $arrayidx8453 = 0, $arrayidx8475 = 0, $arrayidx8500 = 0, $arrayidx8655 = 0, $arrayidx8659 = 0, $arrayidx8681 = 0, $arrayidx8706 = 0, $arrayidx8861 = 0, $arrayidx8865 = 0, $arrayidx8887 = 0, $arrayidx8912 = 0, $arrayidx9897 = 0, $arrayidx9919 = 0, $arrayidx9944 = 0, $blockR = 0;
 var $block_tmp = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2048 | 0);
 $blockR = sp + 1024 | 0;
 $block_tmp = sp;
 _copy_block($blockR, $ref_block);
 _xor_block($blockR, $prev_block);
 _copy_block($block_tmp, $blockR);
 $tobool = ($with_xor | 0) == 0;
 if (!$tobool) {
  _xor_block($block_tmp, $next_block);
 }
 $0 = $blockR;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $arrayidx5 = $blockR + 32 | 0;
 $6 = $arrayidx5;
 $7 = $6;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $6 + 4 | 0;
 $10 = $9;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = _i64Add($8 | 0, $11 | 0, $2 | 0, $5 | 0) | 0;
 $13 = getTempRet0() | 0;
 $14 = _bitshift64Shl($2 | 0, $5 | 0, 1) | 0;
 $15 = getTempRet0() | 0;
 $16 = $14 & -2;
 $17 = $15 & 1;
 $18 = ___muldi3($16 | 0, $17 | 0, $8 | 0, 0) | 0;
 $19 = getTempRet0() | 0;
 $20 = _i64Add($12 | 0, $13 | 0, $18 | 0, $19 | 0) | 0;
 $21 = getTempRet0() | 0;
 $arrayidx24 = $blockR + 96 | 0;
 $22 = $arrayidx24;
 $23 = $22;
 $24 = HEAP32[$23 >> 2] | 0;
 $25 = $22 + 4 | 0;
 $26 = $25;
 $27 = HEAP32[$26 >> 2] | 0;
 $28 = $20 ^ $24;
 $29 = $21 ^ $27;
 $arrayidx45 = $blockR + 64 | 0;
 $30 = $arrayidx45;
 $31 = $30;
 $32 = HEAP32[$31 >> 2] | 0;
 $33 = $30 + 4 | 0;
 $34 = $33;
 $35 = HEAP32[$34 >> 2] | 0;
 $36 = _i64Add($29 | 0, $28 | 0, $32 | 0, $35 | 0) | 0;
 $37 = getTempRet0() | 0;
 $38 = _bitshift64Shl($32 | 0, $35 | 0, 1) | 0;
 $39 = getTempRet0() | 0;
 $40 = $38 & -2;
 $41 = $39 & 1;
 $42 = ___muldi3($40 | 0, $41 | 0, $29 | 0, 0) | 0;
 $43 = getTempRet0() | 0;
 $44 = _i64Add($36 | 0, $37 | 0, $42 | 0, $43 | 0) | 0;
 $45 = getTempRet0() | 0;
 $46 = $44 ^ $8;
 $47 = $45 ^ $11;
 $48 = _bitshift64Lshr($46 | 0, $47 | 0, 24) | 0;
 $49 = getTempRet0() | 0;
 $50 = _bitshift64Shl($46 | 0, $47 | 0, 40) | 0;
 $51 = getTempRet0() | 0;
 $52 = $48 | $50;
 $53 = $49 | $51;
 $54 = _i64Add($52 | 0, $53 | 0, $20 | 0, $21 | 0) | 0;
 $55 = getTempRet0() | 0;
 $56 = _bitshift64Shl($20 | 0, $21 | 0, 1) | 0;
 $57 = getTempRet0() | 0;
 $58 = $56 & -2;
 $59 = $57 & 1;
 $60 = ___muldi3($48 | 0, 0, $58 | 0, $59 | 0) | 0;
 $61 = getTempRet0() | 0;
 $62 = _i64Add($54 | 0, $55 | 0, $60 | 0, $61 | 0) | 0;
 $63 = getTempRet0() | 0;
 $64 = $blockR;
 $65 = $64;
 HEAP32[$65 >> 2] = $62;
 $66 = $64 + 4 | 0;
 $67 = $66;
 HEAP32[$67 >> 2] = $63;
 $68 = $62 ^ $29;
 $69 = $63 ^ $28;
 $70 = _bitshift64Lshr($68 | 0, $69 | 0, 16) | 0;
 $71 = getTempRet0() | 0;
 $72 = _bitshift64Shl($68 | 0, $69 | 0, 48) | 0;
 $73 = getTempRet0() | 0;
 $74 = $70 | $72;
 $75 = $71 | $73;
 $76 = $arrayidx24;
 $77 = $76;
 HEAP32[$77 >> 2] = $74;
 $78 = $76 + 4 | 0;
 $79 = $78;
 HEAP32[$79 >> 2] = $75;
 $80 = _i64Add($74 | 0, $75 | 0, $44 | 0, $45 | 0) | 0;
 $81 = getTempRet0() | 0;
 $82 = _bitshift64Shl($44 | 0, $45 | 0, 1) | 0;
 $83 = getTempRet0() | 0;
 $84 = $82 & -2;
 $85 = $83 & 1;
 $86 = ___muldi3($70 | 0, 0, $84 | 0, $85 | 0) | 0;
 $87 = getTempRet0() | 0;
 $88 = _i64Add($80 | 0, $81 | 0, $86 | 0, $87 | 0) | 0;
 $89 = getTempRet0() | 0;
 $90 = $arrayidx45;
 $91 = $90;
 HEAP32[$91 >> 2] = $88;
 $92 = $90 + 4 | 0;
 $93 = $92;
 HEAP32[$93 >> 2] = $89;
 $94 = $88 ^ $52;
 $95 = $89 ^ $53;
 $96 = _bitshift64Lshr($94 | 0, $95 | 0, 63) | 0;
 $97 = getTempRet0() | 0;
 $98 = _bitshift64Shl($94 | 0, $95 | 0, 1) | 0;
 $99 = getTempRet0() | 0;
 $100 = $96 | $98;
 $101 = $97 | $99;
 $102 = $arrayidx5;
 $103 = $102;
 HEAP32[$103 >> 2] = $100;
 $104 = $102 + 4 | 0;
 $105 = $104;
 HEAP32[$105 >> 2] = $101;
 $arrayidx199 = $blockR + 8 | 0;
 $106 = $arrayidx199;
 $107 = $106;
 $108 = HEAP32[$107 >> 2] | 0;
 $109 = $106 + 4 | 0;
 $110 = $109;
 $111 = HEAP32[$110 >> 2] | 0;
 $arrayidx203 = $blockR + 40 | 0;
 $112 = $arrayidx203;
 $113 = $112;
 $114 = HEAP32[$113 >> 2] | 0;
 $115 = $112 + 4 | 0;
 $116 = $115;
 $117 = HEAP32[$116 >> 2] | 0;
 $118 = _i64Add($114 | 0, $117 | 0, $108 | 0, $111 | 0) | 0;
 $119 = getTempRet0() | 0;
 $120 = _bitshift64Shl($108 | 0, $111 | 0, 1) | 0;
 $121 = getTempRet0() | 0;
 $122 = $120 & -2;
 $123 = $121 & 1;
 $124 = ___muldi3($122 | 0, $123 | 0, $114 | 0, 0) | 0;
 $125 = getTempRet0() | 0;
 $126 = _i64Add($118 | 0, $119 | 0, $124 | 0, $125 | 0) | 0;
 $127 = getTempRet0() | 0;
 $arrayidx225 = $blockR + 104 | 0;
 $128 = $arrayidx225;
 $129 = $128;
 $130 = HEAP32[$129 >> 2] | 0;
 $131 = $128 + 4 | 0;
 $132 = $131;
 $133 = HEAP32[$132 >> 2] | 0;
 $134 = $126 ^ $130;
 $135 = $127 ^ $133;
 $arrayidx250 = $blockR + 72 | 0;
 $136 = $arrayidx250;
 $137 = $136;
 $138 = HEAP32[$137 >> 2] | 0;
 $139 = $136 + 4 | 0;
 $140 = $139;
 $141 = HEAP32[$140 >> 2] | 0;
 $142 = _i64Add($135 | 0, $134 | 0, $138 | 0, $141 | 0) | 0;
 $143 = getTempRet0() | 0;
 $144 = _bitshift64Shl($138 | 0, $141 | 0, 1) | 0;
 $145 = getTempRet0() | 0;
 $146 = $144 & -2;
 $147 = $145 & 1;
 $148 = ___muldi3($146 | 0, $147 | 0, $135 | 0, 0) | 0;
 $149 = getTempRet0() | 0;
 $150 = _i64Add($142 | 0, $143 | 0, $148 | 0, $149 | 0) | 0;
 $151 = getTempRet0() | 0;
 $152 = $150 ^ $114;
 $153 = $151 ^ $117;
 $154 = _bitshift64Lshr($152 | 0, $153 | 0, 24) | 0;
 $155 = getTempRet0() | 0;
 $156 = _bitshift64Shl($152 | 0, $153 | 0, 40) | 0;
 $157 = getTempRet0() | 0;
 $158 = $154 | $156;
 $159 = $155 | $157;
 $160 = _i64Add($158 | 0, $159 | 0, $126 | 0, $127 | 0) | 0;
 $161 = getTempRet0() | 0;
 $162 = _bitshift64Shl($126 | 0, $127 | 0, 1) | 0;
 $163 = getTempRet0() | 0;
 $164 = $162 & -2;
 $165 = $163 & 1;
 $166 = ___muldi3($154 | 0, 0, $164 | 0, $165 | 0) | 0;
 $167 = getTempRet0() | 0;
 $168 = _i64Add($160 | 0, $161 | 0, $166 | 0, $167 | 0) | 0;
 $169 = getTempRet0() | 0;
 $170 = $arrayidx199;
 $171 = $170;
 HEAP32[$171 >> 2] = $168;
 $172 = $170 + 4 | 0;
 $173 = $172;
 HEAP32[$173 >> 2] = $169;
 $174 = $168 ^ $135;
 $175 = $169 ^ $134;
 $176 = _bitshift64Lshr($174 | 0, $175 | 0, 16) | 0;
 $177 = getTempRet0() | 0;
 $178 = _bitshift64Shl($174 | 0, $175 | 0, 48) | 0;
 $179 = getTempRet0() | 0;
 $180 = $176 | $178;
 $181 = $177 | $179;
 $182 = $arrayidx225;
 $183 = $182;
 HEAP32[$183 >> 2] = $180;
 $184 = $182 + 4 | 0;
 $185 = $184;
 HEAP32[$185 >> 2] = $181;
 $186 = _i64Add($180 | 0, $181 | 0, $150 | 0, $151 | 0) | 0;
 $187 = getTempRet0() | 0;
 $188 = _bitshift64Shl($150 | 0, $151 | 0, 1) | 0;
 $189 = getTempRet0() | 0;
 $190 = $188 & -2;
 $191 = $189 & 1;
 $192 = ___muldi3($176 | 0, 0, $190 | 0, $191 | 0) | 0;
 $193 = getTempRet0() | 0;
 $194 = _i64Add($186 | 0, $187 | 0, $192 | 0, $193 | 0) | 0;
 $195 = getTempRet0() | 0;
 $196 = $arrayidx250;
 $197 = $196;
 HEAP32[$197 >> 2] = $194;
 $198 = $196 + 4 | 0;
 $199 = $198;
 HEAP32[$199 >> 2] = $195;
 $200 = $194 ^ $158;
 $201 = $195 ^ $159;
 $202 = _bitshift64Lshr($200 | 0, $201 | 0, 63) | 0;
 $203 = getTempRet0() | 0;
 $204 = _bitshift64Shl($200 | 0, $201 | 0, 1) | 0;
 $205 = getTempRet0() | 0;
 $206 = $202 | $204;
 $207 = $203 | $205;
 $208 = $arrayidx203;
 $209 = $208;
 HEAP32[$209 >> 2] = $206;
 $210 = $208 + 4 | 0;
 $211 = $210;
 HEAP32[$211 >> 2] = $207;
 $arrayidx405 = $blockR + 16 | 0;
 $212 = $arrayidx405;
 $213 = $212;
 $214 = HEAP32[$213 >> 2] | 0;
 $215 = $212 + 4 | 0;
 $216 = $215;
 $217 = HEAP32[$216 >> 2] | 0;
 $arrayidx409 = $blockR + 48 | 0;
 $218 = $arrayidx409;
 $219 = $218;
 $220 = HEAP32[$219 >> 2] | 0;
 $221 = $218 + 4 | 0;
 $222 = $221;
 $223 = HEAP32[$222 >> 2] | 0;
 $224 = _i64Add($220 | 0, $223 | 0, $214 | 0, $217 | 0) | 0;
 $225 = getTempRet0() | 0;
 $226 = _bitshift64Shl($214 | 0, $217 | 0, 1) | 0;
 $227 = getTempRet0() | 0;
 $228 = $226 & -2;
 $229 = $227 & 1;
 $230 = ___muldi3($228 | 0, $229 | 0, $220 | 0, 0) | 0;
 $231 = getTempRet0() | 0;
 $232 = _i64Add($224 | 0, $225 | 0, $230 | 0, $231 | 0) | 0;
 $233 = getTempRet0() | 0;
 $arrayidx431 = $blockR + 112 | 0;
 $234 = $arrayidx431;
 $235 = $234;
 $236 = HEAP32[$235 >> 2] | 0;
 $237 = $234 + 4 | 0;
 $238 = $237;
 $239 = HEAP32[$238 >> 2] | 0;
 $240 = $232 ^ $236;
 $241 = $233 ^ $239;
 $arrayidx456 = $blockR + 80 | 0;
 $242 = $arrayidx456;
 $243 = $242;
 $244 = HEAP32[$243 >> 2] | 0;
 $245 = $242 + 4 | 0;
 $246 = $245;
 $247 = HEAP32[$246 >> 2] | 0;
 $248 = _i64Add($241 | 0, $240 | 0, $244 | 0, $247 | 0) | 0;
 $249 = getTempRet0() | 0;
 $250 = _bitshift64Shl($244 | 0, $247 | 0, 1) | 0;
 $251 = getTempRet0() | 0;
 $252 = $250 & -2;
 $253 = $251 & 1;
 $254 = ___muldi3($252 | 0, $253 | 0, $241 | 0, 0) | 0;
 $255 = getTempRet0() | 0;
 $256 = _i64Add($248 | 0, $249 | 0, $254 | 0, $255 | 0) | 0;
 $257 = getTempRet0() | 0;
 $258 = $256 ^ $220;
 $259 = $257 ^ $223;
 $260 = _bitshift64Lshr($258 | 0, $259 | 0, 24) | 0;
 $261 = getTempRet0() | 0;
 $262 = _bitshift64Shl($258 | 0, $259 | 0, 40) | 0;
 $263 = getTempRet0() | 0;
 $264 = $260 | $262;
 $265 = $261 | $263;
 $266 = _i64Add($264 | 0, $265 | 0, $232 | 0, $233 | 0) | 0;
 $267 = getTempRet0() | 0;
 $268 = _bitshift64Shl($232 | 0, $233 | 0, 1) | 0;
 $269 = getTempRet0() | 0;
 $270 = $268 & -2;
 $271 = $269 & 1;
 $272 = ___muldi3($260 | 0, 0, $270 | 0, $271 | 0) | 0;
 $273 = getTempRet0() | 0;
 $274 = _i64Add($266 | 0, $267 | 0, $272 | 0, $273 | 0) | 0;
 $275 = getTempRet0() | 0;
 $276 = $arrayidx405;
 $277 = $276;
 HEAP32[$277 >> 2] = $274;
 $278 = $276 + 4 | 0;
 $279 = $278;
 HEAP32[$279 >> 2] = $275;
 $280 = $274 ^ $241;
 $281 = $275 ^ $240;
 $282 = _bitshift64Lshr($280 | 0, $281 | 0, 16) | 0;
 $283 = getTempRet0() | 0;
 $284 = _bitshift64Shl($280 | 0, $281 | 0, 48) | 0;
 $285 = getTempRet0() | 0;
 $286 = $282 | $284;
 $287 = $283 | $285;
 $288 = $arrayidx431;
 $289 = $288;
 HEAP32[$289 >> 2] = $286;
 $290 = $288 + 4 | 0;
 $291 = $290;
 HEAP32[$291 >> 2] = $287;
 $292 = _i64Add($286 | 0, $287 | 0, $256 | 0, $257 | 0) | 0;
 $293 = getTempRet0() | 0;
 $294 = _bitshift64Shl($256 | 0, $257 | 0, 1) | 0;
 $295 = getTempRet0() | 0;
 $296 = $294 & -2;
 $297 = $295 & 1;
 $298 = ___muldi3($282 | 0, 0, $296 | 0, $297 | 0) | 0;
 $299 = getTempRet0() | 0;
 $300 = _i64Add($292 | 0, $293 | 0, $298 | 0, $299 | 0) | 0;
 $301 = getTempRet0() | 0;
 $302 = $300 ^ $264;
 $303 = $301 ^ $265;
 $304 = _bitshift64Lshr($302 | 0, $303 | 0, 63) | 0;
 $305 = getTempRet0() | 0;
 $306 = _bitshift64Shl($302 | 0, $303 | 0, 1) | 0;
 $307 = getTempRet0() | 0;
 $308 = $304 | $306;
 $309 = $305 | $307;
 $310 = $arrayidx409;
 $311 = $310;
 HEAP32[$311 >> 2] = $308;
 $312 = $310 + 4 | 0;
 $313 = $312;
 HEAP32[$313 >> 2] = $309;
 $arrayidx611 = $blockR + 24 | 0;
 $314 = $arrayidx611;
 $315 = $314;
 $316 = HEAP32[$315 >> 2] | 0;
 $317 = $314 + 4 | 0;
 $318 = $317;
 $319 = HEAP32[$318 >> 2] | 0;
 $arrayidx615 = $blockR + 56 | 0;
 $320 = $arrayidx615;
 $321 = $320;
 $322 = HEAP32[$321 >> 2] | 0;
 $323 = $320 + 4 | 0;
 $324 = $323;
 $325 = HEAP32[$324 >> 2] | 0;
 $326 = _i64Add($322 | 0, $325 | 0, $316 | 0, $319 | 0) | 0;
 $327 = getTempRet0() | 0;
 $328 = _bitshift64Shl($316 | 0, $319 | 0, 1) | 0;
 $329 = getTempRet0() | 0;
 $330 = $328 & -2;
 $331 = $329 & 1;
 $332 = ___muldi3($330 | 0, $331 | 0, $322 | 0, 0) | 0;
 $333 = getTempRet0() | 0;
 $334 = _i64Add($326 | 0, $327 | 0, $332 | 0, $333 | 0) | 0;
 $335 = getTempRet0() | 0;
 $arrayidx637 = $blockR + 120 | 0;
 $336 = $arrayidx637;
 $337 = $336;
 $338 = HEAP32[$337 >> 2] | 0;
 $339 = $336 + 4 | 0;
 $340 = $339;
 $341 = HEAP32[$340 >> 2] | 0;
 $342 = $334 ^ $338;
 $343 = $335 ^ $341;
 $arrayidx662 = $blockR + 88 | 0;
 $344 = $arrayidx662;
 $345 = $344;
 $346 = HEAP32[$345 >> 2] | 0;
 $347 = $344 + 4 | 0;
 $348 = $347;
 $349 = HEAP32[$348 >> 2] | 0;
 $350 = _i64Add($343 | 0, $342 | 0, $346 | 0, $349 | 0) | 0;
 $351 = getTempRet0() | 0;
 $352 = _bitshift64Shl($346 | 0, $349 | 0, 1) | 0;
 $353 = getTempRet0() | 0;
 $354 = $352 & -2;
 $355 = $353 & 1;
 $356 = ___muldi3($354 | 0, $355 | 0, $343 | 0, 0) | 0;
 $357 = getTempRet0() | 0;
 $358 = _i64Add($350 | 0, $351 | 0, $356 | 0, $357 | 0) | 0;
 $359 = getTempRet0() | 0;
 $360 = $358 ^ $322;
 $361 = $359 ^ $325;
 $362 = _bitshift64Lshr($360 | 0, $361 | 0, 24) | 0;
 $363 = getTempRet0() | 0;
 $364 = _bitshift64Shl($360 | 0, $361 | 0, 40) | 0;
 $365 = getTempRet0() | 0;
 $366 = $362 | $364;
 $367 = $363 | $365;
 $368 = _i64Add($366 | 0, $367 | 0, $334 | 0, $335 | 0) | 0;
 $369 = getTempRet0() | 0;
 $370 = _bitshift64Shl($334 | 0, $335 | 0, 1) | 0;
 $371 = getTempRet0() | 0;
 $372 = $370 & -2;
 $373 = $371 & 1;
 $374 = ___muldi3($362 | 0, 0, $372 | 0, $373 | 0) | 0;
 $375 = getTempRet0() | 0;
 $376 = _i64Add($368 | 0, $369 | 0, $374 | 0, $375 | 0) | 0;
 $377 = getTempRet0() | 0;
 $378 = $arrayidx611;
 $379 = $378;
 HEAP32[$379 >> 2] = $376;
 $380 = $378 + 4 | 0;
 $381 = $380;
 HEAP32[$381 >> 2] = $377;
 $382 = $376 ^ $343;
 $383 = $377 ^ $342;
 $384 = _bitshift64Lshr($382 | 0, $383 | 0, 16) | 0;
 $385 = getTempRet0() | 0;
 $386 = _bitshift64Shl($382 | 0, $383 | 0, 48) | 0;
 $387 = getTempRet0() | 0;
 $388 = $384 | $386;
 $389 = $385 | $387;
 $390 = _i64Add($388 | 0, $389 | 0, $358 | 0, $359 | 0) | 0;
 $391 = getTempRet0() | 0;
 $392 = _bitshift64Shl($358 | 0, $359 | 0, 1) | 0;
 $393 = getTempRet0() | 0;
 $394 = $392 & -2;
 $395 = $393 & 1;
 $396 = ___muldi3($384 | 0, 0, $394 | 0, $395 | 0) | 0;
 $397 = getTempRet0() | 0;
 $398 = _i64Add($390 | 0, $391 | 0, $396 | 0, $397 | 0) | 0;
 $399 = getTempRet0() | 0;
 $400 = $398 ^ $366;
 $401 = $399 ^ $367;
 $402 = _bitshift64Lshr($400 | 0, $401 | 0, 63) | 0;
 $403 = getTempRet0() | 0;
 $404 = _bitshift64Shl($400 | 0, $401 | 0, 1) | 0;
 $405 = getTempRet0() | 0;
 $406 = $402 | $404;
 $407 = $403 | $405;
 $408 = $arrayidx615;
 $409 = $408;
 HEAP32[$409 >> 2] = $406;
 $410 = $408 + 4 | 0;
 $411 = $410;
 HEAP32[$411 >> 2] = $407;
 $412 = _i64Add($206 | 0, $207 | 0, $62 | 0, $63 | 0) | 0;
 $413 = getTempRet0() | 0;
 $414 = _bitshift64Shl($62 | 0, $63 | 0, 1) | 0;
 $415 = getTempRet0() | 0;
 $416 = $414 & -2;
 $417 = $415 & 1;
 $418 = ___muldi3($206 | 0, 0, $416 | 0, $417 | 0) | 0;
 $419 = getTempRet0() | 0;
 $420 = _i64Add($412 | 0, $413 | 0, $418 | 0, $419 | 0) | 0;
 $421 = getTempRet0() | 0;
 $422 = $388 ^ $420;
 $423 = $389 ^ $421;
 $424 = _i64Add($423 | 0, $422 | 0, $300 | 0, $301 | 0) | 0;
 $425 = getTempRet0() | 0;
 $426 = _bitshift64Shl($300 | 0, $301 | 0, 1) | 0;
 $427 = getTempRet0() | 0;
 $428 = $426 & -2;
 $429 = $427 & 1;
 $430 = ___muldi3($423 | 0, 0, $428 | 0, $429 | 0) | 0;
 $431 = getTempRet0() | 0;
 $432 = _i64Add($424 | 0, $425 | 0, $430 | 0, $431 | 0) | 0;
 $433 = getTempRet0() | 0;
 $434 = $432 ^ $206;
 $435 = $433 ^ $207;
 $436 = _bitshift64Lshr($434 | 0, $435 | 0, 24) | 0;
 $437 = getTempRet0() | 0;
 $438 = _bitshift64Shl($434 | 0, $435 | 0, 40) | 0;
 $439 = getTempRet0() | 0;
 $440 = $436 | $438;
 $441 = $437 | $439;
 $442 = _i64Add($440 | 0, $441 | 0, $420 | 0, $421 | 0) | 0;
 $443 = getTempRet0() | 0;
 $444 = _bitshift64Shl($420 | 0, $421 | 0, 1) | 0;
 $445 = getTempRet0() | 0;
 $446 = $444 & -2;
 $447 = $445 & 1;
 $448 = ___muldi3($436 | 0, 0, $446 | 0, $447 | 0) | 0;
 $449 = getTempRet0() | 0;
 $450 = _i64Add($442 | 0, $443 | 0, $448 | 0, $449 | 0) | 0;
 $451 = getTempRet0() | 0;
 $452 = $blockR;
 $453 = $452;
 HEAP32[$453 >> 2] = $450;
 $454 = $452 + 4 | 0;
 $455 = $454;
 HEAP32[$455 >> 2] = $451;
 $456 = $450 ^ $423;
 $457 = $451 ^ $422;
 $458 = _bitshift64Lshr($456 | 0, $457 | 0, 16) | 0;
 $459 = getTempRet0() | 0;
 $460 = _bitshift64Shl($456 | 0, $457 | 0, 48) | 0;
 $461 = getTempRet0() | 0;
 $462 = $458 | $460;
 $463 = $459 | $461;
 $464 = $arrayidx637;
 $465 = $464;
 HEAP32[$465 >> 2] = $462;
 $466 = $464 + 4 | 0;
 $467 = $466;
 HEAP32[$467 >> 2] = $463;
 $468 = _i64Add($462 | 0, $463 | 0, $432 | 0, $433 | 0) | 0;
 $469 = getTempRet0() | 0;
 $470 = _bitshift64Shl($432 | 0, $433 | 0, 1) | 0;
 $471 = getTempRet0() | 0;
 $472 = $470 & -2;
 $473 = $471 & 1;
 $474 = ___muldi3($458 | 0, 0, $472 | 0, $473 | 0) | 0;
 $475 = getTempRet0() | 0;
 $476 = _i64Add($468 | 0, $469 | 0, $474 | 0, $475 | 0) | 0;
 $477 = getTempRet0() | 0;
 $478 = $arrayidx456;
 $479 = $478;
 HEAP32[$479 >> 2] = $476;
 $480 = $478 + 4 | 0;
 $481 = $480;
 HEAP32[$481 >> 2] = $477;
 $482 = $476 ^ $440;
 $483 = $477 ^ $441;
 $484 = _bitshift64Lshr($482 | 0, $483 | 0, 63) | 0;
 $485 = getTempRet0() | 0;
 $486 = _bitshift64Shl($482 | 0, $483 | 0, 1) | 0;
 $487 = getTempRet0() | 0;
 $488 = $484 | $486;
 $489 = $485 | $487;
 $490 = $arrayidx203;
 $491 = $490;
 HEAP32[$491 >> 2] = $488;
 $492 = $490 + 4 | 0;
 $493 = $492;
 HEAP32[$493 >> 2] = $489;
 $494 = _i64Add($308 | 0, $309 | 0, $168 | 0, $169 | 0) | 0;
 $495 = getTempRet0() | 0;
 $496 = _bitshift64Shl($168 | 0, $169 | 0, 1) | 0;
 $497 = getTempRet0() | 0;
 $498 = $496 & -2;
 $499 = $497 & 1;
 $500 = ___muldi3($308 | 0, 0, $498 | 0, $499 | 0) | 0;
 $501 = getTempRet0() | 0;
 $502 = _i64Add($494 | 0, $495 | 0, $500 | 0, $501 | 0) | 0;
 $503 = getTempRet0() | 0;
 $504 = $502 ^ $74;
 $505 = $503 ^ $75;
 $506 = _i64Add($398 | 0, $399 | 0, $505 | 0, $504 | 0) | 0;
 $507 = getTempRet0() | 0;
 $508 = _bitshift64Shl($398 | 0, $399 | 0, 1) | 0;
 $509 = getTempRet0() | 0;
 $510 = $508 & -2;
 $511 = $509 & 1;
 $512 = ___muldi3($510 | 0, $511 | 0, $505 | 0, 0) | 0;
 $513 = getTempRet0() | 0;
 $514 = _i64Add($506 | 0, $507 | 0, $512 | 0, $513 | 0) | 0;
 $515 = getTempRet0() | 0;
 $516 = $514 ^ $308;
 $517 = $515 ^ $309;
 $518 = _bitshift64Lshr($516 | 0, $517 | 0, 24) | 0;
 $519 = getTempRet0() | 0;
 $520 = _bitshift64Shl($516 | 0, $517 | 0, 40) | 0;
 $521 = getTempRet0() | 0;
 $522 = $518 | $520;
 $523 = $519 | $521;
 $524 = _i64Add($522 | 0, $523 | 0, $502 | 0, $503 | 0) | 0;
 $525 = getTempRet0() | 0;
 $526 = _bitshift64Shl($502 | 0, $503 | 0, 1) | 0;
 $527 = getTempRet0() | 0;
 $528 = $526 & -2;
 $529 = $527 & 1;
 $530 = ___muldi3($518 | 0, 0, $528 | 0, $529 | 0) | 0;
 $531 = getTempRet0() | 0;
 $532 = _i64Add($524 | 0, $525 | 0, $530 | 0, $531 | 0) | 0;
 $533 = getTempRet0() | 0;
 $534 = $arrayidx199;
 $535 = $534;
 HEAP32[$535 >> 2] = $532;
 $536 = $534 + 4 | 0;
 $537 = $536;
 HEAP32[$537 >> 2] = $533;
 $538 = $532 ^ $505;
 $539 = $533 ^ $504;
 $540 = _bitshift64Lshr($538 | 0, $539 | 0, 16) | 0;
 $541 = getTempRet0() | 0;
 $542 = _bitshift64Shl($538 | 0, $539 | 0, 48) | 0;
 $543 = getTempRet0() | 0;
 $544 = $540 | $542;
 $545 = $541 | $543;
 $546 = $arrayidx24;
 $547 = $546;
 HEAP32[$547 >> 2] = $544;
 $548 = $546 + 4 | 0;
 $549 = $548;
 HEAP32[$549 >> 2] = $545;
 $550 = _i64Add($544 | 0, $545 | 0, $514 | 0, $515 | 0) | 0;
 $551 = getTempRet0() | 0;
 $552 = _bitshift64Shl($514 | 0, $515 | 0, 1) | 0;
 $553 = getTempRet0() | 0;
 $554 = $552 & -2;
 $555 = $553 & 1;
 $556 = ___muldi3($540 | 0, 0, $554 | 0, $555 | 0) | 0;
 $557 = getTempRet0() | 0;
 $558 = _i64Add($550 | 0, $551 | 0, $556 | 0, $557 | 0) | 0;
 $559 = getTempRet0() | 0;
 $560 = $arrayidx662;
 $561 = $560;
 HEAP32[$561 >> 2] = $558;
 $562 = $560 + 4 | 0;
 $563 = $562;
 HEAP32[$563 >> 2] = $559;
 $564 = $558 ^ $522;
 $565 = $559 ^ $523;
 $566 = _bitshift64Lshr($564 | 0, $565 | 0, 63) | 0;
 $567 = getTempRet0() | 0;
 $568 = _bitshift64Shl($564 | 0, $565 | 0, 1) | 0;
 $569 = getTempRet0() | 0;
 $570 = $566 | $568;
 $571 = $567 | $569;
 $572 = $arrayidx409;
 $573 = $572;
 HEAP32[$573 >> 2] = $570;
 $574 = $572 + 4 | 0;
 $575 = $574;
 HEAP32[$575 >> 2] = $571;
 $576 = _i64Add($406 | 0, $407 | 0, $274 | 0, $275 | 0) | 0;
 $577 = getTempRet0() | 0;
 $578 = _bitshift64Shl($274 | 0, $275 | 0, 1) | 0;
 $579 = getTempRet0() | 0;
 $580 = $578 & -2;
 $581 = $579 & 1;
 $582 = ___muldi3($406 | 0, 0, $580 | 0, $581 | 0) | 0;
 $583 = getTempRet0() | 0;
 $584 = _i64Add($576 | 0, $577 | 0, $582 | 0, $583 | 0) | 0;
 $585 = getTempRet0() | 0;
 $586 = $584 ^ $180;
 $587 = $585 ^ $181;
 $588 = _i64Add($587 | 0, $586 | 0, $88 | 0, $89 | 0) | 0;
 $589 = getTempRet0() | 0;
 $590 = _bitshift64Shl($88 | 0, $89 | 0, 1) | 0;
 $591 = getTempRet0() | 0;
 $592 = $590 & -2;
 $593 = $591 & 1;
 $594 = ___muldi3($587 | 0, 0, $592 | 0, $593 | 0) | 0;
 $595 = getTempRet0() | 0;
 $596 = _i64Add($588 | 0, $589 | 0, $594 | 0, $595 | 0) | 0;
 $597 = getTempRet0() | 0;
 $598 = $596 ^ $406;
 $599 = $597 ^ $407;
 $600 = _bitshift64Lshr($598 | 0, $599 | 0, 24) | 0;
 $601 = getTempRet0() | 0;
 $602 = _bitshift64Shl($598 | 0, $599 | 0, 40) | 0;
 $603 = getTempRet0() | 0;
 $604 = $600 | $602;
 $605 = $601 | $603;
 $606 = _i64Add($604 | 0, $605 | 0, $584 | 0, $585 | 0) | 0;
 $607 = getTempRet0() | 0;
 $608 = _bitshift64Shl($584 | 0, $585 | 0, 1) | 0;
 $609 = getTempRet0() | 0;
 $610 = $608 & -2;
 $611 = $609 & 1;
 $612 = ___muldi3($600 | 0, 0, $610 | 0, $611 | 0) | 0;
 $613 = getTempRet0() | 0;
 $614 = _i64Add($606 | 0, $607 | 0, $612 | 0, $613 | 0) | 0;
 $615 = getTempRet0() | 0;
 $616 = $arrayidx405;
 $617 = $616;
 HEAP32[$617 >> 2] = $614;
 $618 = $616 + 4 | 0;
 $619 = $618;
 HEAP32[$619 >> 2] = $615;
 $620 = $614 ^ $587;
 $621 = $615 ^ $586;
 $622 = _bitshift64Lshr($620 | 0, $621 | 0, 16) | 0;
 $623 = getTempRet0() | 0;
 $624 = _bitshift64Shl($620 | 0, $621 | 0, 48) | 0;
 $625 = getTempRet0() | 0;
 $626 = $622 | $624;
 $627 = $623 | $625;
 $628 = $arrayidx225;
 $629 = $628;
 HEAP32[$629 >> 2] = $626;
 $630 = $628 + 4 | 0;
 $631 = $630;
 HEAP32[$631 >> 2] = $627;
 $632 = _i64Add($626 | 0, $627 | 0, $596 | 0, $597 | 0) | 0;
 $633 = getTempRet0() | 0;
 $634 = _bitshift64Shl($596 | 0, $597 | 0, 1) | 0;
 $635 = getTempRet0() | 0;
 $636 = $634 & -2;
 $637 = $635 & 1;
 $638 = ___muldi3($622 | 0, 0, $636 | 0, $637 | 0) | 0;
 $639 = getTempRet0() | 0;
 $640 = _i64Add($632 | 0, $633 | 0, $638 | 0, $639 | 0) | 0;
 $641 = getTempRet0() | 0;
 $642 = $arrayidx45;
 $643 = $642;
 HEAP32[$643 >> 2] = $640;
 $644 = $642 + 4 | 0;
 $645 = $644;
 HEAP32[$645 >> 2] = $641;
 $646 = $640 ^ $604;
 $647 = $641 ^ $605;
 $648 = _bitshift64Lshr($646 | 0, $647 | 0, 63) | 0;
 $649 = getTempRet0() | 0;
 $650 = _bitshift64Shl($646 | 0, $647 | 0, 1) | 0;
 $651 = getTempRet0() | 0;
 $652 = $648 | $650;
 $653 = $649 | $651;
 $654 = $arrayidx615;
 $655 = $654;
 HEAP32[$655 >> 2] = $652;
 $656 = $654 + 4 | 0;
 $657 = $656;
 HEAP32[$657 >> 2] = $653;
 $658 = _i64Add($376 | 0, $377 | 0, $100 | 0, $101 | 0) | 0;
 $659 = getTempRet0() | 0;
 $660 = _bitshift64Shl($376 | 0, $377 | 0, 1) | 0;
 $661 = getTempRet0() | 0;
 $662 = $660 & -2;
 $663 = $661 & 1;
 $664 = ___muldi3($662 | 0, $663 | 0, $100 | 0, 0) | 0;
 $665 = getTempRet0() | 0;
 $666 = _i64Add($658 | 0, $659 | 0, $664 | 0, $665 | 0) | 0;
 $667 = getTempRet0() | 0;
 $668 = $666 ^ $286;
 $669 = $667 ^ $287;
 $670 = _i64Add($669 | 0, $668 | 0, $194 | 0, $195 | 0) | 0;
 $671 = getTempRet0() | 0;
 $672 = _bitshift64Shl($194 | 0, $195 | 0, 1) | 0;
 $673 = getTempRet0() | 0;
 $674 = $672 & -2;
 $675 = $673 & 1;
 $676 = ___muldi3($669 | 0, 0, $674 | 0, $675 | 0) | 0;
 $677 = getTempRet0() | 0;
 $678 = _i64Add($670 | 0, $671 | 0, $676 | 0, $677 | 0) | 0;
 $679 = getTempRet0() | 0;
 $680 = $678 ^ $100;
 $681 = $679 ^ $101;
 $682 = _bitshift64Lshr($680 | 0, $681 | 0, 24) | 0;
 $683 = getTempRet0() | 0;
 $684 = _bitshift64Shl($680 | 0, $681 | 0, 40) | 0;
 $685 = getTempRet0() | 0;
 $686 = $682 | $684;
 $687 = $683 | $685;
 $688 = _i64Add($686 | 0, $687 | 0, $666 | 0, $667 | 0) | 0;
 $689 = getTempRet0() | 0;
 $690 = _bitshift64Shl($666 | 0, $667 | 0, 1) | 0;
 $691 = getTempRet0() | 0;
 $692 = $690 & -2;
 $693 = $691 & 1;
 $694 = ___muldi3($682 | 0, 0, $692 | 0, $693 | 0) | 0;
 $695 = getTempRet0() | 0;
 $696 = _i64Add($688 | 0, $689 | 0, $694 | 0, $695 | 0) | 0;
 $697 = getTempRet0() | 0;
 $698 = $arrayidx611;
 $699 = $698;
 HEAP32[$699 >> 2] = $696;
 $700 = $698 + 4 | 0;
 $701 = $700;
 HEAP32[$701 >> 2] = $697;
 $702 = $696 ^ $669;
 $703 = $697 ^ $668;
 $704 = _bitshift64Lshr($702 | 0, $703 | 0, 16) | 0;
 $705 = getTempRet0() | 0;
 $706 = _bitshift64Shl($702 | 0, $703 | 0, 48) | 0;
 $707 = getTempRet0() | 0;
 $708 = $704 | $706;
 $709 = $705 | $707;
 $710 = $arrayidx431;
 $711 = $710;
 HEAP32[$711 >> 2] = $708;
 $712 = $710 + 4 | 0;
 $713 = $712;
 HEAP32[$713 >> 2] = $709;
 $714 = _i64Add($708 | 0, $709 | 0, $678 | 0, $679 | 0) | 0;
 $715 = getTempRet0() | 0;
 $716 = _bitshift64Shl($678 | 0, $679 | 0, 1) | 0;
 $717 = getTempRet0() | 0;
 $718 = $716 & -2;
 $719 = $717 & 1;
 $720 = ___muldi3($704 | 0, 0, $718 | 0, $719 | 0) | 0;
 $721 = getTempRet0() | 0;
 $722 = _i64Add($714 | 0, $715 | 0, $720 | 0, $721 | 0) | 0;
 $723 = getTempRet0() | 0;
 $724 = $arrayidx250;
 $725 = $724;
 HEAP32[$725 >> 2] = $722;
 $726 = $724 + 4 | 0;
 $727 = $726;
 HEAP32[$727 >> 2] = $723;
 $728 = $722 ^ $686;
 $729 = $723 ^ $687;
 $730 = _bitshift64Lshr($728 | 0, $729 | 0, 63) | 0;
 $731 = getTempRet0() | 0;
 $732 = _bitshift64Shl($728 | 0, $729 | 0, 1) | 0;
 $733 = getTempRet0() | 0;
 $734 = $730 | $732;
 $735 = $731 | $733;
 $736 = $arrayidx5;
 $737 = $736;
 HEAP32[$737 >> 2] = $734;
 $738 = $736 + 4 | 0;
 $739 = $738;
 HEAP32[$739 >> 2] = $735;
 $add$ptr1642 = $blockR + 128 | 0;
 $740 = $add$ptr1642;
 $741 = $740;
 $742 = HEAP32[$741 >> 2] | 0;
 $743 = $740 + 4 | 0;
 $744 = $743;
 $745 = HEAP32[$744 >> 2] | 0;
 $arrayidx1647 = $blockR + 160 | 0;
 $746 = $arrayidx1647;
 $747 = $746;
 $748 = HEAP32[$747 >> 2] | 0;
 $749 = $746 + 4 | 0;
 $750 = $749;
 $751 = HEAP32[$750 >> 2] | 0;
 $752 = _i64Add($748 | 0, $751 | 0, $742 | 0, $745 | 0) | 0;
 $753 = getTempRet0() | 0;
 $754 = _bitshift64Shl($742 | 0, $745 | 0, 1) | 0;
 $755 = getTempRet0() | 0;
 $756 = $754 & -2;
 $757 = $755 & 1;
 $758 = ___muldi3($756 | 0, $757 | 0, $748 | 0, 0) | 0;
 $759 = getTempRet0() | 0;
 $760 = _i64Add($752 | 0, $753 | 0, $758 | 0, $759 | 0) | 0;
 $761 = getTempRet0() | 0;
 $arrayidx1669 = $blockR + 224 | 0;
 $762 = $arrayidx1669;
 $763 = $762;
 $764 = HEAP32[$763 >> 2] | 0;
 $765 = $762 + 4 | 0;
 $766 = $765;
 $767 = HEAP32[$766 >> 2] | 0;
 $768 = $760 ^ $764;
 $769 = $761 ^ $767;
 $arrayidx1694 = $blockR + 192 | 0;
 $770 = $arrayidx1694;
 $771 = $770;
 $772 = HEAP32[$771 >> 2] | 0;
 $773 = $770 + 4 | 0;
 $774 = $773;
 $775 = HEAP32[$774 >> 2] | 0;
 $776 = _i64Add($769 | 0, $768 | 0, $772 | 0, $775 | 0) | 0;
 $777 = getTempRet0() | 0;
 $778 = _bitshift64Shl($772 | 0, $775 | 0, 1) | 0;
 $779 = getTempRet0() | 0;
 $780 = $778 & -2;
 $781 = $779 & 1;
 $782 = ___muldi3($780 | 0, $781 | 0, $769 | 0, 0) | 0;
 $783 = getTempRet0() | 0;
 $784 = _i64Add($776 | 0, $777 | 0, $782 | 0, $783 | 0) | 0;
 $785 = getTempRet0() | 0;
 $786 = $784 ^ $748;
 $787 = $785 ^ $751;
 $788 = _bitshift64Lshr($786 | 0, $787 | 0, 24) | 0;
 $789 = getTempRet0() | 0;
 $790 = _bitshift64Shl($786 | 0, $787 | 0, 40) | 0;
 $791 = getTempRet0() | 0;
 $792 = $788 | $790;
 $793 = $789 | $791;
 $794 = _i64Add($792 | 0, $793 | 0, $760 | 0, $761 | 0) | 0;
 $795 = getTempRet0() | 0;
 $796 = _bitshift64Shl($760 | 0, $761 | 0, 1) | 0;
 $797 = getTempRet0() | 0;
 $798 = $796 & -2;
 $799 = $797 & 1;
 $800 = ___muldi3($788 | 0, 0, $798 | 0, $799 | 0) | 0;
 $801 = getTempRet0() | 0;
 $802 = _i64Add($794 | 0, $795 | 0, $800 | 0, $801 | 0) | 0;
 $803 = getTempRet0() | 0;
 $804 = $add$ptr1642;
 $805 = $804;
 HEAP32[$805 >> 2] = $802;
 $806 = $804 + 4 | 0;
 $807 = $806;
 HEAP32[$807 >> 2] = $803;
 $808 = $802 ^ $769;
 $809 = $803 ^ $768;
 $810 = _bitshift64Lshr($808 | 0, $809 | 0, 16) | 0;
 $811 = getTempRet0() | 0;
 $812 = _bitshift64Shl($808 | 0, $809 | 0, 48) | 0;
 $813 = getTempRet0() | 0;
 $814 = $810 | $812;
 $815 = $811 | $813;
 $816 = $arrayidx1669;
 $817 = $816;
 HEAP32[$817 >> 2] = $814;
 $818 = $816 + 4 | 0;
 $819 = $818;
 HEAP32[$819 >> 2] = $815;
 $820 = _i64Add($814 | 0, $815 | 0, $784 | 0, $785 | 0) | 0;
 $821 = getTempRet0() | 0;
 $822 = _bitshift64Shl($784 | 0, $785 | 0, 1) | 0;
 $823 = getTempRet0() | 0;
 $824 = $822 & -2;
 $825 = $823 & 1;
 $826 = ___muldi3($810 | 0, 0, $824 | 0, $825 | 0) | 0;
 $827 = getTempRet0() | 0;
 $828 = _i64Add($820 | 0, $821 | 0, $826 | 0, $827 | 0) | 0;
 $829 = getTempRet0() | 0;
 $830 = $arrayidx1694;
 $831 = $830;
 HEAP32[$831 >> 2] = $828;
 $832 = $830 + 4 | 0;
 $833 = $832;
 HEAP32[$833 >> 2] = $829;
 $834 = $828 ^ $792;
 $835 = $829 ^ $793;
 $836 = _bitshift64Lshr($834 | 0, $835 | 0, 63) | 0;
 $837 = getTempRet0() | 0;
 $838 = _bitshift64Shl($834 | 0, $835 | 0, 1) | 0;
 $839 = getTempRet0() | 0;
 $840 = $836 | $838;
 $841 = $837 | $839;
 $842 = $arrayidx1647;
 $843 = $842;
 HEAP32[$843 >> 2] = $840;
 $844 = $842 + 4 | 0;
 $845 = $844;
 HEAP32[$845 >> 2] = $841;
 $arrayidx1849 = $blockR + 136 | 0;
 $846 = $arrayidx1849;
 $847 = $846;
 $848 = HEAP32[$847 >> 2] | 0;
 $849 = $846 + 4 | 0;
 $850 = $849;
 $851 = HEAP32[$850 >> 2] | 0;
 $arrayidx1853 = $blockR + 168 | 0;
 $852 = $arrayidx1853;
 $853 = $852;
 $854 = HEAP32[$853 >> 2] | 0;
 $855 = $852 + 4 | 0;
 $856 = $855;
 $857 = HEAP32[$856 >> 2] | 0;
 $858 = _i64Add($854 | 0, $857 | 0, $848 | 0, $851 | 0) | 0;
 $859 = getTempRet0() | 0;
 $860 = _bitshift64Shl($848 | 0, $851 | 0, 1) | 0;
 $861 = getTempRet0() | 0;
 $862 = $860 & -2;
 $863 = $861 & 1;
 $864 = ___muldi3($862 | 0, $863 | 0, $854 | 0, 0) | 0;
 $865 = getTempRet0() | 0;
 $866 = _i64Add($858 | 0, $859 | 0, $864 | 0, $865 | 0) | 0;
 $867 = getTempRet0() | 0;
 $arrayidx1875 = $blockR + 232 | 0;
 $868 = $arrayidx1875;
 $869 = $868;
 $870 = HEAP32[$869 >> 2] | 0;
 $871 = $868 + 4 | 0;
 $872 = $871;
 $873 = HEAP32[$872 >> 2] | 0;
 $874 = $866 ^ $870;
 $875 = $867 ^ $873;
 $arrayidx1900 = $blockR + 200 | 0;
 $876 = $arrayidx1900;
 $877 = $876;
 $878 = HEAP32[$877 >> 2] | 0;
 $879 = $876 + 4 | 0;
 $880 = $879;
 $881 = HEAP32[$880 >> 2] | 0;
 $882 = _i64Add($875 | 0, $874 | 0, $878 | 0, $881 | 0) | 0;
 $883 = getTempRet0() | 0;
 $884 = _bitshift64Shl($878 | 0, $881 | 0, 1) | 0;
 $885 = getTempRet0() | 0;
 $886 = $884 & -2;
 $887 = $885 & 1;
 $888 = ___muldi3($886 | 0, $887 | 0, $875 | 0, 0) | 0;
 $889 = getTempRet0() | 0;
 $890 = _i64Add($882 | 0, $883 | 0, $888 | 0, $889 | 0) | 0;
 $891 = getTempRet0() | 0;
 $892 = $890 ^ $854;
 $893 = $891 ^ $857;
 $894 = _bitshift64Lshr($892 | 0, $893 | 0, 24) | 0;
 $895 = getTempRet0() | 0;
 $896 = _bitshift64Shl($892 | 0, $893 | 0, 40) | 0;
 $897 = getTempRet0() | 0;
 $898 = $894 | $896;
 $899 = $895 | $897;
 $900 = _i64Add($898 | 0, $899 | 0, $866 | 0, $867 | 0) | 0;
 $901 = getTempRet0() | 0;
 $902 = _bitshift64Shl($866 | 0, $867 | 0, 1) | 0;
 $903 = getTempRet0() | 0;
 $904 = $902 & -2;
 $905 = $903 & 1;
 $906 = ___muldi3($894 | 0, 0, $904 | 0, $905 | 0) | 0;
 $907 = getTempRet0() | 0;
 $908 = _i64Add($900 | 0, $901 | 0, $906 | 0, $907 | 0) | 0;
 $909 = getTempRet0() | 0;
 $910 = $arrayidx1849;
 $911 = $910;
 HEAP32[$911 >> 2] = $908;
 $912 = $910 + 4 | 0;
 $913 = $912;
 HEAP32[$913 >> 2] = $909;
 $914 = $908 ^ $875;
 $915 = $909 ^ $874;
 $916 = _bitshift64Lshr($914 | 0, $915 | 0, 16) | 0;
 $917 = getTempRet0() | 0;
 $918 = _bitshift64Shl($914 | 0, $915 | 0, 48) | 0;
 $919 = getTempRet0() | 0;
 $920 = $916 | $918;
 $921 = $917 | $919;
 $922 = $arrayidx1875;
 $923 = $922;
 HEAP32[$923 >> 2] = $920;
 $924 = $922 + 4 | 0;
 $925 = $924;
 HEAP32[$925 >> 2] = $921;
 $926 = _i64Add($920 | 0, $921 | 0, $890 | 0, $891 | 0) | 0;
 $927 = getTempRet0() | 0;
 $928 = _bitshift64Shl($890 | 0, $891 | 0, 1) | 0;
 $929 = getTempRet0() | 0;
 $930 = $928 & -2;
 $931 = $929 & 1;
 $932 = ___muldi3($916 | 0, 0, $930 | 0, $931 | 0) | 0;
 $933 = getTempRet0() | 0;
 $934 = _i64Add($926 | 0, $927 | 0, $932 | 0, $933 | 0) | 0;
 $935 = getTempRet0() | 0;
 $936 = $arrayidx1900;
 $937 = $936;
 HEAP32[$937 >> 2] = $934;
 $938 = $936 + 4 | 0;
 $939 = $938;
 HEAP32[$939 >> 2] = $935;
 $940 = $934 ^ $898;
 $941 = $935 ^ $899;
 $942 = _bitshift64Lshr($940 | 0, $941 | 0, 63) | 0;
 $943 = getTempRet0() | 0;
 $944 = _bitshift64Shl($940 | 0, $941 | 0, 1) | 0;
 $945 = getTempRet0() | 0;
 $946 = $942 | $944;
 $947 = $943 | $945;
 $948 = $arrayidx1853;
 $949 = $948;
 HEAP32[$949 >> 2] = $946;
 $950 = $948 + 4 | 0;
 $951 = $950;
 HEAP32[$951 >> 2] = $947;
 $arrayidx2055 = $blockR + 144 | 0;
 $952 = $arrayidx2055;
 $953 = $952;
 $954 = HEAP32[$953 >> 2] | 0;
 $955 = $952 + 4 | 0;
 $956 = $955;
 $957 = HEAP32[$956 >> 2] | 0;
 $arrayidx2059 = $blockR + 176 | 0;
 $958 = $arrayidx2059;
 $959 = $958;
 $960 = HEAP32[$959 >> 2] | 0;
 $961 = $958 + 4 | 0;
 $962 = $961;
 $963 = HEAP32[$962 >> 2] | 0;
 $964 = _i64Add($960 | 0, $963 | 0, $954 | 0, $957 | 0) | 0;
 $965 = getTempRet0() | 0;
 $966 = _bitshift64Shl($954 | 0, $957 | 0, 1) | 0;
 $967 = getTempRet0() | 0;
 $968 = $966 & -2;
 $969 = $967 & 1;
 $970 = ___muldi3($968 | 0, $969 | 0, $960 | 0, 0) | 0;
 $971 = getTempRet0() | 0;
 $972 = _i64Add($964 | 0, $965 | 0, $970 | 0, $971 | 0) | 0;
 $973 = getTempRet0() | 0;
 $arrayidx2081 = $blockR + 240 | 0;
 $974 = $arrayidx2081;
 $975 = $974;
 $976 = HEAP32[$975 >> 2] | 0;
 $977 = $974 + 4 | 0;
 $978 = $977;
 $979 = HEAP32[$978 >> 2] | 0;
 $980 = $972 ^ $976;
 $981 = $973 ^ $979;
 $arrayidx2106 = $blockR + 208 | 0;
 $982 = $arrayidx2106;
 $983 = $982;
 $984 = HEAP32[$983 >> 2] | 0;
 $985 = $982 + 4 | 0;
 $986 = $985;
 $987 = HEAP32[$986 >> 2] | 0;
 $988 = _i64Add($981 | 0, $980 | 0, $984 | 0, $987 | 0) | 0;
 $989 = getTempRet0() | 0;
 $990 = _bitshift64Shl($984 | 0, $987 | 0, 1) | 0;
 $991 = getTempRet0() | 0;
 $992 = $990 & -2;
 $993 = $991 & 1;
 $994 = ___muldi3($992 | 0, $993 | 0, $981 | 0, 0) | 0;
 $995 = getTempRet0() | 0;
 $996 = _i64Add($988 | 0, $989 | 0, $994 | 0, $995 | 0) | 0;
 $997 = getTempRet0() | 0;
 $998 = $996 ^ $960;
 $999 = $997 ^ $963;
 $1000 = _bitshift64Lshr($998 | 0, $999 | 0, 24) | 0;
 $1001 = getTempRet0() | 0;
 $1002 = _bitshift64Shl($998 | 0, $999 | 0, 40) | 0;
 $1003 = getTempRet0() | 0;
 $1004 = $1000 | $1002;
 $1005 = $1001 | $1003;
 $1006 = _i64Add($1004 | 0, $1005 | 0, $972 | 0, $973 | 0) | 0;
 $1007 = getTempRet0() | 0;
 $1008 = _bitshift64Shl($972 | 0, $973 | 0, 1) | 0;
 $1009 = getTempRet0() | 0;
 $1010 = $1008 & -2;
 $1011 = $1009 & 1;
 $1012 = ___muldi3($1000 | 0, 0, $1010 | 0, $1011 | 0) | 0;
 $1013 = getTempRet0() | 0;
 $1014 = _i64Add($1006 | 0, $1007 | 0, $1012 | 0, $1013 | 0) | 0;
 $1015 = getTempRet0() | 0;
 $1016 = $arrayidx2055;
 $1017 = $1016;
 HEAP32[$1017 >> 2] = $1014;
 $1018 = $1016 + 4 | 0;
 $1019 = $1018;
 HEAP32[$1019 >> 2] = $1015;
 $1020 = $1014 ^ $981;
 $1021 = $1015 ^ $980;
 $1022 = _bitshift64Lshr($1020 | 0, $1021 | 0, 16) | 0;
 $1023 = getTempRet0() | 0;
 $1024 = _bitshift64Shl($1020 | 0, $1021 | 0, 48) | 0;
 $1025 = getTempRet0() | 0;
 $1026 = $1022 | $1024;
 $1027 = $1023 | $1025;
 $1028 = $arrayidx2081;
 $1029 = $1028;
 HEAP32[$1029 >> 2] = $1026;
 $1030 = $1028 + 4 | 0;
 $1031 = $1030;
 HEAP32[$1031 >> 2] = $1027;
 $1032 = _i64Add($1026 | 0, $1027 | 0, $996 | 0, $997 | 0) | 0;
 $1033 = getTempRet0() | 0;
 $1034 = _bitshift64Shl($996 | 0, $997 | 0, 1) | 0;
 $1035 = getTempRet0() | 0;
 $1036 = $1034 & -2;
 $1037 = $1035 & 1;
 $1038 = ___muldi3($1022 | 0, 0, $1036 | 0, $1037 | 0) | 0;
 $1039 = getTempRet0() | 0;
 $1040 = _i64Add($1032 | 0, $1033 | 0, $1038 | 0, $1039 | 0) | 0;
 $1041 = getTempRet0() | 0;
 $1042 = $1040 ^ $1004;
 $1043 = $1041 ^ $1005;
 $1044 = _bitshift64Lshr($1042 | 0, $1043 | 0, 63) | 0;
 $1045 = getTempRet0() | 0;
 $1046 = _bitshift64Shl($1042 | 0, $1043 | 0, 1) | 0;
 $1047 = getTempRet0() | 0;
 $1048 = $1044 | $1046;
 $1049 = $1045 | $1047;
 $1050 = $arrayidx2059;
 $1051 = $1050;
 HEAP32[$1051 >> 2] = $1048;
 $1052 = $1050 + 4 | 0;
 $1053 = $1052;
 HEAP32[$1053 >> 2] = $1049;
 $arrayidx2261 = $blockR + 152 | 0;
 $1054 = $arrayidx2261;
 $1055 = $1054;
 $1056 = HEAP32[$1055 >> 2] | 0;
 $1057 = $1054 + 4 | 0;
 $1058 = $1057;
 $1059 = HEAP32[$1058 >> 2] | 0;
 $arrayidx2265 = $blockR + 184 | 0;
 $1060 = $arrayidx2265;
 $1061 = $1060;
 $1062 = HEAP32[$1061 >> 2] | 0;
 $1063 = $1060 + 4 | 0;
 $1064 = $1063;
 $1065 = HEAP32[$1064 >> 2] | 0;
 $1066 = _i64Add($1062 | 0, $1065 | 0, $1056 | 0, $1059 | 0) | 0;
 $1067 = getTempRet0() | 0;
 $1068 = _bitshift64Shl($1056 | 0, $1059 | 0, 1) | 0;
 $1069 = getTempRet0() | 0;
 $1070 = $1068 & -2;
 $1071 = $1069 & 1;
 $1072 = ___muldi3($1070 | 0, $1071 | 0, $1062 | 0, 0) | 0;
 $1073 = getTempRet0() | 0;
 $1074 = _i64Add($1066 | 0, $1067 | 0, $1072 | 0, $1073 | 0) | 0;
 $1075 = getTempRet0() | 0;
 $arrayidx2287 = $blockR + 248 | 0;
 $1076 = $arrayidx2287;
 $1077 = $1076;
 $1078 = HEAP32[$1077 >> 2] | 0;
 $1079 = $1076 + 4 | 0;
 $1080 = $1079;
 $1081 = HEAP32[$1080 >> 2] | 0;
 $1082 = $1074 ^ $1078;
 $1083 = $1075 ^ $1081;
 $arrayidx2312 = $blockR + 216 | 0;
 $1084 = $arrayidx2312;
 $1085 = $1084;
 $1086 = HEAP32[$1085 >> 2] | 0;
 $1087 = $1084 + 4 | 0;
 $1088 = $1087;
 $1089 = HEAP32[$1088 >> 2] | 0;
 $1090 = _i64Add($1083 | 0, $1082 | 0, $1086 | 0, $1089 | 0) | 0;
 $1091 = getTempRet0() | 0;
 $1092 = _bitshift64Shl($1086 | 0, $1089 | 0, 1) | 0;
 $1093 = getTempRet0() | 0;
 $1094 = $1092 & -2;
 $1095 = $1093 & 1;
 $1096 = ___muldi3($1094 | 0, $1095 | 0, $1083 | 0, 0) | 0;
 $1097 = getTempRet0() | 0;
 $1098 = _i64Add($1090 | 0, $1091 | 0, $1096 | 0, $1097 | 0) | 0;
 $1099 = getTempRet0() | 0;
 $1100 = $1098 ^ $1062;
 $1101 = $1099 ^ $1065;
 $1102 = _bitshift64Lshr($1100 | 0, $1101 | 0, 24) | 0;
 $1103 = getTempRet0() | 0;
 $1104 = _bitshift64Shl($1100 | 0, $1101 | 0, 40) | 0;
 $1105 = getTempRet0() | 0;
 $1106 = $1102 | $1104;
 $1107 = $1103 | $1105;
 $1108 = _i64Add($1106 | 0, $1107 | 0, $1074 | 0, $1075 | 0) | 0;
 $1109 = getTempRet0() | 0;
 $1110 = _bitshift64Shl($1074 | 0, $1075 | 0, 1) | 0;
 $1111 = getTempRet0() | 0;
 $1112 = $1110 & -2;
 $1113 = $1111 & 1;
 $1114 = ___muldi3($1102 | 0, 0, $1112 | 0, $1113 | 0) | 0;
 $1115 = getTempRet0() | 0;
 $1116 = _i64Add($1108 | 0, $1109 | 0, $1114 | 0, $1115 | 0) | 0;
 $1117 = getTempRet0() | 0;
 $1118 = $arrayidx2261;
 $1119 = $1118;
 HEAP32[$1119 >> 2] = $1116;
 $1120 = $1118 + 4 | 0;
 $1121 = $1120;
 HEAP32[$1121 >> 2] = $1117;
 $1122 = $1116 ^ $1083;
 $1123 = $1117 ^ $1082;
 $1124 = _bitshift64Lshr($1122 | 0, $1123 | 0, 16) | 0;
 $1125 = getTempRet0() | 0;
 $1126 = _bitshift64Shl($1122 | 0, $1123 | 0, 48) | 0;
 $1127 = getTempRet0() | 0;
 $1128 = $1124 | $1126;
 $1129 = $1125 | $1127;
 $1130 = _i64Add($1128 | 0, $1129 | 0, $1098 | 0, $1099 | 0) | 0;
 $1131 = getTempRet0() | 0;
 $1132 = _bitshift64Shl($1098 | 0, $1099 | 0, 1) | 0;
 $1133 = getTempRet0() | 0;
 $1134 = $1132 & -2;
 $1135 = $1133 & 1;
 $1136 = ___muldi3($1124 | 0, 0, $1134 | 0, $1135 | 0) | 0;
 $1137 = getTempRet0() | 0;
 $1138 = _i64Add($1130 | 0, $1131 | 0, $1136 | 0, $1137 | 0) | 0;
 $1139 = getTempRet0() | 0;
 $1140 = $1138 ^ $1106;
 $1141 = $1139 ^ $1107;
 $1142 = _bitshift64Lshr($1140 | 0, $1141 | 0, 63) | 0;
 $1143 = getTempRet0() | 0;
 $1144 = _bitshift64Shl($1140 | 0, $1141 | 0, 1) | 0;
 $1145 = getTempRet0() | 0;
 $1146 = $1142 | $1144;
 $1147 = $1143 | $1145;
 $1148 = $arrayidx2265;
 $1149 = $1148;
 HEAP32[$1149 >> 2] = $1146;
 $1150 = $1148 + 4 | 0;
 $1151 = $1150;
 HEAP32[$1151 >> 2] = $1147;
 $1152 = _i64Add($946 | 0, $947 | 0, $802 | 0, $803 | 0) | 0;
 $1153 = getTempRet0() | 0;
 $1154 = _bitshift64Shl($802 | 0, $803 | 0, 1) | 0;
 $1155 = getTempRet0() | 0;
 $1156 = $1154 & -2;
 $1157 = $1155 & 1;
 $1158 = ___muldi3($946 | 0, 0, $1156 | 0, $1157 | 0) | 0;
 $1159 = getTempRet0() | 0;
 $1160 = _i64Add($1152 | 0, $1153 | 0, $1158 | 0, $1159 | 0) | 0;
 $1161 = getTempRet0() | 0;
 $1162 = $1128 ^ $1160;
 $1163 = $1129 ^ $1161;
 $1164 = _i64Add($1163 | 0, $1162 | 0, $1040 | 0, $1041 | 0) | 0;
 $1165 = getTempRet0() | 0;
 $1166 = _bitshift64Shl($1040 | 0, $1041 | 0, 1) | 0;
 $1167 = getTempRet0() | 0;
 $1168 = $1166 & -2;
 $1169 = $1167 & 1;
 $1170 = ___muldi3($1163 | 0, 0, $1168 | 0, $1169 | 0) | 0;
 $1171 = getTempRet0() | 0;
 $1172 = _i64Add($1164 | 0, $1165 | 0, $1170 | 0, $1171 | 0) | 0;
 $1173 = getTempRet0() | 0;
 $1174 = $1172 ^ $946;
 $1175 = $1173 ^ $947;
 $1176 = _bitshift64Lshr($1174 | 0, $1175 | 0, 24) | 0;
 $1177 = getTempRet0() | 0;
 $1178 = _bitshift64Shl($1174 | 0, $1175 | 0, 40) | 0;
 $1179 = getTempRet0() | 0;
 $1180 = $1176 | $1178;
 $1181 = $1177 | $1179;
 $1182 = _i64Add($1180 | 0, $1181 | 0, $1160 | 0, $1161 | 0) | 0;
 $1183 = getTempRet0() | 0;
 $1184 = _bitshift64Shl($1160 | 0, $1161 | 0, 1) | 0;
 $1185 = getTempRet0() | 0;
 $1186 = $1184 & -2;
 $1187 = $1185 & 1;
 $1188 = ___muldi3($1176 | 0, 0, $1186 | 0, $1187 | 0) | 0;
 $1189 = getTempRet0() | 0;
 $1190 = _i64Add($1182 | 0, $1183 | 0, $1188 | 0, $1189 | 0) | 0;
 $1191 = getTempRet0() | 0;
 $1192 = $add$ptr1642;
 $1193 = $1192;
 HEAP32[$1193 >> 2] = $1190;
 $1194 = $1192 + 4 | 0;
 $1195 = $1194;
 HEAP32[$1195 >> 2] = $1191;
 $1196 = $1190 ^ $1163;
 $1197 = $1191 ^ $1162;
 $1198 = _bitshift64Lshr($1196 | 0, $1197 | 0, 16) | 0;
 $1199 = getTempRet0() | 0;
 $1200 = _bitshift64Shl($1196 | 0, $1197 | 0, 48) | 0;
 $1201 = getTempRet0() | 0;
 $1202 = $1198 | $1200;
 $1203 = $1199 | $1201;
 $1204 = $arrayidx2287;
 $1205 = $1204;
 HEAP32[$1205 >> 2] = $1202;
 $1206 = $1204 + 4 | 0;
 $1207 = $1206;
 HEAP32[$1207 >> 2] = $1203;
 $1208 = _i64Add($1202 | 0, $1203 | 0, $1172 | 0, $1173 | 0) | 0;
 $1209 = getTempRet0() | 0;
 $1210 = _bitshift64Shl($1172 | 0, $1173 | 0, 1) | 0;
 $1211 = getTempRet0() | 0;
 $1212 = $1210 & -2;
 $1213 = $1211 & 1;
 $1214 = ___muldi3($1198 | 0, 0, $1212 | 0, $1213 | 0) | 0;
 $1215 = getTempRet0() | 0;
 $1216 = _i64Add($1208 | 0, $1209 | 0, $1214 | 0, $1215 | 0) | 0;
 $1217 = getTempRet0() | 0;
 $1218 = $arrayidx2106;
 $1219 = $1218;
 HEAP32[$1219 >> 2] = $1216;
 $1220 = $1218 + 4 | 0;
 $1221 = $1220;
 HEAP32[$1221 >> 2] = $1217;
 $1222 = $1216 ^ $1180;
 $1223 = $1217 ^ $1181;
 $1224 = _bitshift64Lshr($1222 | 0, $1223 | 0, 63) | 0;
 $1225 = getTempRet0() | 0;
 $1226 = _bitshift64Shl($1222 | 0, $1223 | 0, 1) | 0;
 $1227 = getTempRet0() | 0;
 $1228 = $1224 | $1226;
 $1229 = $1225 | $1227;
 $1230 = $arrayidx1853;
 $1231 = $1230;
 HEAP32[$1231 >> 2] = $1228;
 $1232 = $1230 + 4 | 0;
 $1233 = $1232;
 HEAP32[$1233 >> 2] = $1229;
 $1234 = _i64Add($1048 | 0, $1049 | 0, $908 | 0, $909 | 0) | 0;
 $1235 = getTempRet0() | 0;
 $1236 = _bitshift64Shl($908 | 0, $909 | 0, 1) | 0;
 $1237 = getTempRet0() | 0;
 $1238 = $1236 & -2;
 $1239 = $1237 & 1;
 $1240 = ___muldi3($1048 | 0, 0, $1238 | 0, $1239 | 0) | 0;
 $1241 = getTempRet0() | 0;
 $1242 = _i64Add($1234 | 0, $1235 | 0, $1240 | 0, $1241 | 0) | 0;
 $1243 = getTempRet0() | 0;
 $1244 = $1242 ^ $814;
 $1245 = $1243 ^ $815;
 $1246 = _i64Add($1138 | 0, $1139 | 0, $1245 | 0, $1244 | 0) | 0;
 $1247 = getTempRet0() | 0;
 $1248 = _bitshift64Shl($1138 | 0, $1139 | 0, 1) | 0;
 $1249 = getTempRet0() | 0;
 $1250 = $1248 & -2;
 $1251 = $1249 & 1;
 $1252 = ___muldi3($1250 | 0, $1251 | 0, $1245 | 0, 0) | 0;
 $1253 = getTempRet0() | 0;
 $1254 = _i64Add($1246 | 0, $1247 | 0, $1252 | 0, $1253 | 0) | 0;
 $1255 = getTempRet0() | 0;
 $1256 = $1254 ^ $1048;
 $1257 = $1255 ^ $1049;
 $1258 = _bitshift64Lshr($1256 | 0, $1257 | 0, 24) | 0;
 $1259 = getTempRet0() | 0;
 $1260 = _bitshift64Shl($1256 | 0, $1257 | 0, 40) | 0;
 $1261 = getTempRet0() | 0;
 $1262 = $1258 | $1260;
 $1263 = $1259 | $1261;
 $1264 = _i64Add($1262 | 0, $1263 | 0, $1242 | 0, $1243 | 0) | 0;
 $1265 = getTempRet0() | 0;
 $1266 = _bitshift64Shl($1242 | 0, $1243 | 0, 1) | 0;
 $1267 = getTempRet0() | 0;
 $1268 = $1266 & -2;
 $1269 = $1267 & 1;
 $1270 = ___muldi3($1258 | 0, 0, $1268 | 0, $1269 | 0) | 0;
 $1271 = getTempRet0() | 0;
 $1272 = _i64Add($1264 | 0, $1265 | 0, $1270 | 0, $1271 | 0) | 0;
 $1273 = getTempRet0() | 0;
 $1274 = $arrayidx1849;
 $1275 = $1274;
 HEAP32[$1275 >> 2] = $1272;
 $1276 = $1274 + 4 | 0;
 $1277 = $1276;
 HEAP32[$1277 >> 2] = $1273;
 $1278 = $1272 ^ $1245;
 $1279 = $1273 ^ $1244;
 $1280 = _bitshift64Lshr($1278 | 0, $1279 | 0, 16) | 0;
 $1281 = getTempRet0() | 0;
 $1282 = _bitshift64Shl($1278 | 0, $1279 | 0, 48) | 0;
 $1283 = getTempRet0() | 0;
 $1284 = $1280 | $1282;
 $1285 = $1281 | $1283;
 $1286 = $arrayidx1669;
 $1287 = $1286;
 HEAP32[$1287 >> 2] = $1284;
 $1288 = $1286 + 4 | 0;
 $1289 = $1288;
 HEAP32[$1289 >> 2] = $1285;
 $1290 = _i64Add($1284 | 0, $1285 | 0, $1254 | 0, $1255 | 0) | 0;
 $1291 = getTempRet0() | 0;
 $1292 = _bitshift64Shl($1254 | 0, $1255 | 0, 1) | 0;
 $1293 = getTempRet0() | 0;
 $1294 = $1292 & -2;
 $1295 = $1293 & 1;
 $1296 = ___muldi3($1280 | 0, 0, $1294 | 0, $1295 | 0) | 0;
 $1297 = getTempRet0() | 0;
 $1298 = _i64Add($1290 | 0, $1291 | 0, $1296 | 0, $1297 | 0) | 0;
 $1299 = getTempRet0() | 0;
 $1300 = $arrayidx2312;
 $1301 = $1300;
 HEAP32[$1301 >> 2] = $1298;
 $1302 = $1300 + 4 | 0;
 $1303 = $1302;
 HEAP32[$1303 >> 2] = $1299;
 $1304 = $1298 ^ $1262;
 $1305 = $1299 ^ $1263;
 $1306 = _bitshift64Lshr($1304 | 0, $1305 | 0, 63) | 0;
 $1307 = getTempRet0() | 0;
 $1308 = _bitshift64Shl($1304 | 0, $1305 | 0, 1) | 0;
 $1309 = getTempRet0() | 0;
 $1310 = $1306 | $1308;
 $1311 = $1307 | $1309;
 $1312 = $arrayidx2059;
 $1313 = $1312;
 HEAP32[$1313 >> 2] = $1310;
 $1314 = $1312 + 4 | 0;
 $1315 = $1314;
 HEAP32[$1315 >> 2] = $1311;
 $1316 = _i64Add($1146 | 0, $1147 | 0, $1014 | 0, $1015 | 0) | 0;
 $1317 = getTempRet0() | 0;
 $1318 = _bitshift64Shl($1014 | 0, $1015 | 0, 1) | 0;
 $1319 = getTempRet0() | 0;
 $1320 = $1318 & -2;
 $1321 = $1319 & 1;
 $1322 = ___muldi3($1146 | 0, 0, $1320 | 0, $1321 | 0) | 0;
 $1323 = getTempRet0() | 0;
 $1324 = _i64Add($1316 | 0, $1317 | 0, $1322 | 0, $1323 | 0) | 0;
 $1325 = getTempRet0() | 0;
 $1326 = $1324 ^ $920;
 $1327 = $1325 ^ $921;
 $1328 = _i64Add($1327 | 0, $1326 | 0, $828 | 0, $829 | 0) | 0;
 $1329 = getTempRet0() | 0;
 $1330 = _bitshift64Shl($828 | 0, $829 | 0, 1) | 0;
 $1331 = getTempRet0() | 0;
 $1332 = $1330 & -2;
 $1333 = $1331 & 1;
 $1334 = ___muldi3($1327 | 0, 0, $1332 | 0, $1333 | 0) | 0;
 $1335 = getTempRet0() | 0;
 $1336 = _i64Add($1328 | 0, $1329 | 0, $1334 | 0, $1335 | 0) | 0;
 $1337 = getTempRet0() | 0;
 $1338 = $1336 ^ $1146;
 $1339 = $1337 ^ $1147;
 $1340 = _bitshift64Lshr($1338 | 0, $1339 | 0, 24) | 0;
 $1341 = getTempRet0() | 0;
 $1342 = _bitshift64Shl($1338 | 0, $1339 | 0, 40) | 0;
 $1343 = getTempRet0() | 0;
 $1344 = $1340 | $1342;
 $1345 = $1341 | $1343;
 $1346 = _i64Add($1344 | 0, $1345 | 0, $1324 | 0, $1325 | 0) | 0;
 $1347 = getTempRet0() | 0;
 $1348 = _bitshift64Shl($1324 | 0, $1325 | 0, 1) | 0;
 $1349 = getTempRet0() | 0;
 $1350 = $1348 & -2;
 $1351 = $1349 & 1;
 $1352 = ___muldi3($1340 | 0, 0, $1350 | 0, $1351 | 0) | 0;
 $1353 = getTempRet0() | 0;
 $1354 = _i64Add($1346 | 0, $1347 | 0, $1352 | 0, $1353 | 0) | 0;
 $1355 = getTempRet0() | 0;
 $1356 = $arrayidx2055;
 $1357 = $1356;
 HEAP32[$1357 >> 2] = $1354;
 $1358 = $1356 + 4 | 0;
 $1359 = $1358;
 HEAP32[$1359 >> 2] = $1355;
 $1360 = $1354 ^ $1327;
 $1361 = $1355 ^ $1326;
 $1362 = _bitshift64Lshr($1360 | 0, $1361 | 0, 16) | 0;
 $1363 = getTempRet0() | 0;
 $1364 = _bitshift64Shl($1360 | 0, $1361 | 0, 48) | 0;
 $1365 = getTempRet0() | 0;
 $1366 = $1362 | $1364;
 $1367 = $1363 | $1365;
 $1368 = $arrayidx1875;
 $1369 = $1368;
 HEAP32[$1369 >> 2] = $1366;
 $1370 = $1368 + 4 | 0;
 $1371 = $1370;
 HEAP32[$1371 >> 2] = $1367;
 $1372 = _i64Add($1366 | 0, $1367 | 0, $1336 | 0, $1337 | 0) | 0;
 $1373 = getTempRet0() | 0;
 $1374 = _bitshift64Shl($1336 | 0, $1337 | 0, 1) | 0;
 $1375 = getTempRet0() | 0;
 $1376 = $1374 & -2;
 $1377 = $1375 & 1;
 $1378 = ___muldi3($1362 | 0, 0, $1376 | 0, $1377 | 0) | 0;
 $1379 = getTempRet0() | 0;
 $1380 = _i64Add($1372 | 0, $1373 | 0, $1378 | 0, $1379 | 0) | 0;
 $1381 = getTempRet0() | 0;
 $1382 = $arrayidx1694;
 $1383 = $1382;
 HEAP32[$1383 >> 2] = $1380;
 $1384 = $1382 + 4 | 0;
 $1385 = $1384;
 HEAP32[$1385 >> 2] = $1381;
 $1386 = $1380 ^ $1344;
 $1387 = $1381 ^ $1345;
 $1388 = _bitshift64Lshr($1386 | 0, $1387 | 0, 63) | 0;
 $1389 = getTempRet0() | 0;
 $1390 = _bitshift64Shl($1386 | 0, $1387 | 0, 1) | 0;
 $1391 = getTempRet0() | 0;
 $1392 = $1388 | $1390;
 $1393 = $1389 | $1391;
 $1394 = $arrayidx2265;
 $1395 = $1394;
 HEAP32[$1395 >> 2] = $1392;
 $1396 = $1394 + 4 | 0;
 $1397 = $1396;
 HEAP32[$1397 >> 2] = $1393;
 $1398 = _i64Add($1116 | 0, $1117 | 0, $840 | 0, $841 | 0) | 0;
 $1399 = getTempRet0() | 0;
 $1400 = _bitshift64Shl($1116 | 0, $1117 | 0, 1) | 0;
 $1401 = getTempRet0() | 0;
 $1402 = $1400 & -2;
 $1403 = $1401 & 1;
 $1404 = ___muldi3($1402 | 0, $1403 | 0, $840 | 0, 0) | 0;
 $1405 = getTempRet0() | 0;
 $1406 = _i64Add($1398 | 0, $1399 | 0, $1404 | 0, $1405 | 0) | 0;
 $1407 = getTempRet0() | 0;
 $1408 = $1406 ^ $1026;
 $1409 = $1407 ^ $1027;
 $1410 = _i64Add($1409 | 0, $1408 | 0, $934 | 0, $935 | 0) | 0;
 $1411 = getTempRet0() | 0;
 $1412 = _bitshift64Shl($934 | 0, $935 | 0, 1) | 0;
 $1413 = getTempRet0() | 0;
 $1414 = $1412 & -2;
 $1415 = $1413 & 1;
 $1416 = ___muldi3($1409 | 0, 0, $1414 | 0, $1415 | 0) | 0;
 $1417 = getTempRet0() | 0;
 $1418 = _i64Add($1410 | 0, $1411 | 0, $1416 | 0, $1417 | 0) | 0;
 $1419 = getTempRet0() | 0;
 $1420 = $1418 ^ $840;
 $1421 = $1419 ^ $841;
 $1422 = _bitshift64Lshr($1420 | 0, $1421 | 0, 24) | 0;
 $1423 = getTempRet0() | 0;
 $1424 = _bitshift64Shl($1420 | 0, $1421 | 0, 40) | 0;
 $1425 = getTempRet0() | 0;
 $1426 = $1422 | $1424;
 $1427 = $1423 | $1425;
 $1428 = _i64Add($1426 | 0, $1427 | 0, $1406 | 0, $1407 | 0) | 0;
 $1429 = getTempRet0() | 0;
 $1430 = _bitshift64Shl($1406 | 0, $1407 | 0, 1) | 0;
 $1431 = getTempRet0() | 0;
 $1432 = $1430 & -2;
 $1433 = $1431 & 1;
 $1434 = ___muldi3($1422 | 0, 0, $1432 | 0, $1433 | 0) | 0;
 $1435 = getTempRet0() | 0;
 $1436 = _i64Add($1428 | 0, $1429 | 0, $1434 | 0, $1435 | 0) | 0;
 $1437 = getTempRet0() | 0;
 $1438 = $arrayidx2261;
 $1439 = $1438;
 HEAP32[$1439 >> 2] = $1436;
 $1440 = $1438 + 4 | 0;
 $1441 = $1440;
 HEAP32[$1441 >> 2] = $1437;
 $1442 = $1436 ^ $1409;
 $1443 = $1437 ^ $1408;
 $1444 = _bitshift64Lshr($1442 | 0, $1443 | 0, 16) | 0;
 $1445 = getTempRet0() | 0;
 $1446 = _bitshift64Shl($1442 | 0, $1443 | 0, 48) | 0;
 $1447 = getTempRet0() | 0;
 $1448 = $1444 | $1446;
 $1449 = $1445 | $1447;
 $1450 = $arrayidx2081;
 $1451 = $1450;
 HEAP32[$1451 >> 2] = $1448;
 $1452 = $1450 + 4 | 0;
 $1453 = $1452;
 HEAP32[$1453 >> 2] = $1449;
 $1454 = _i64Add($1448 | 0, $1449 | 0, $1418 | 0, $1419 | 0) | 0;
 $1455 = getTempRet0() | 0;
 $1456 = _bitshift64Shl($1418 | 0, $1419 | 0, 1) | 0;
 $1457 = getTempRet0() | 0;
 $1458 = $1456 & -2;
 $1459 = $1457 & 1;
 $1460 = ___muldi3($1444 | 0, 0, $1458 | 0, $1459 | 0) | 0;
 $1461 = getTempRet0() | 0;
 $1462 = _i64Add($1454 | 0, $1455 | 0, $1460 | 0, $1461 | 0) | 0;
 $1463 = getTempRet0() | 0;
 $1464 = $arrayidx1900;
 $1465 = $1464;
 HEAP32[$1465 >> 2] = $1462;
 $1466 = $1464 + 4 | 0;
 $1467 = $1466;
 HEAP32[$1467 >> 2] = $1463;
 $1468 = $1462 ^ $1426;
 $1469 = $1463 ^ $1427;
 $1470 = _bitshift64Lshr($1468 | 0, $1469 | 0, 63) | 0;
 $1471 = getTempRet0() | 0;
 $1472 = _bitshift64Shl($1468 | 0, $1469 | 0, 1) | 0;
 $1473 = getTempRet0() | 0;
 $1474 = $1470 | $1472;
 $1475 = $1471 | $1473;
 $1476 = $arrayidx1647;
 $1477 = $1476;
 HEAP32[$1477 >> 2] = $1474;
 $1478 = $1476 + 4 | 0;
 $1479 = $1478;
 HEAP32[$1479 >> 2] = $1475;
 $add$ptr3292 = $blockR + 256 | 0;
 $1480 = $add$ptr3292;
 $1481 = $1480;
 $1482 = HEAP32[$1481 >> 2] | 0;
 $1483 = $1480 + 4 | 0;
 $1484 = $1483;
 $1485 = HEAP32[$1484 >> 2] | 0;
 $arrayidx3297 = $blockR + 288 | 0;
 $1486 = $arrayidx3297;
 $1487 = $1486;
 $1488 = HEAP32[$1487 >> 2] | 0;
 $1489 = $1486 + 4 | 0;
 $1490 = $1489;
 $1491 = HEAP32[$1490 >> 2] | 0;
 $1492 = _i64Add($1488 | 0, $1491 | 0, $1482 | 0, $1485 | 0) | 0;
 $1493 = getTempRet0() | 0;
 $1494 = _bitshift64Shl($1482 | 0, $1485 | 0, 1) | 0;
 $1495 = getTempRet0() | 0;
 $1496 = $1494 & -2;
 $1497 = $1495 & 1;
 $1498 = ___muldi3($1496 | 0, $1497 | 0, $1488 | 0, 0) | 0;
 $1499 = getTempRet0() | 0;
 $1500 = _i64Add($1492 | 0, $1493 | 0, $1498 | 0, $1499 | 0) | 0;
 $1501 = getTempRet0() | 0;
 $arrayidx3319 = $blockR + 352 | 0;
 $1502 = $arrayidx3319;
 $1503 = $1502;
 $1504 = HEAP32[$1503 >> 2] | 0;
 $1505 = $1502 + 4 | 0;
 $1506 = $1505;
 $1507 = HEAP32[$1506 >> 2] | 0;
 $1508 = $1500 ^ $1504;
 $1509 = $1501 ^ $1507;
 $arrayidx3344 = $blockR + 320 | 0;
 $1510 = $arrayidx3344;
 $1511 = $1510;
 $1512 = HEAP32[$1511 >> 2] | 0;
 $1513 = $1510 + 4 | 0;
 $1514 = $1513;
 $1515 = HEAP32[$1514 >> 2] | 0;
 $1516 = _i64Add($1509 | 0, $1508 | 0, $1512 | 0, $1515 | 0) | 0;
 $1517 = getTempRet0() | 0;
 $1518 = _bitshift64Shl($1512 | 0, $1515 | 0, 1) | 0;
 $1519 = getTempRet0() | 0;
 $1520 = $1518 & -2;
 $1521 = $1519 & 1;
 $1522 = ___muldi3($1520 | 0, $1521 | 0, $1509 | 0, 0) | 0;
 $1523 = getTempRet0() | 0;
 $1524 = _i64Add($1516 | 0, $1517 | 0, $1522 | 0, $1523 | 0) | 0;
 $1525 = getTempRet0() | 0;
 $1526 = $1524 ^ $1488;
 $1527 = $1525 ^ $1491;
 $1528 = _bitshift64Lshr($1526 | 0, $1527 | 0, 24) | 0;
 $1529 = getTempRet0() | 0;
 $1530 = _bitshift64Shl($1526 | 0, $1527 | 0, 40) | 0;
 $1531 = getTempRet0() | 0;
 $1532 = $1528 | $1530;
 $1533 = $1529 | $1531;
 $1534 = _i64Add($1532 | 0, $1533 | 0, $1500 | 0, $1501 | 0) | 0;
 $1535 = getTempRet0() | 0;
 $1536 = _bitshift64Shl($1500 | 0, $1501 | 0, 1) | 0;
 $1537 = getTempRet0() | 0;
 $1538 = $1536 & -2;
 $1539 = $1537 & 1;
 $1540 = ___muldi3($1528 | 0, 0, $1538 | 0, $1539 | 0) | 0;
 $1541 = getTempRet0() | 0;
 $1542 = _i64Add($1534 | 0, $1535 | 0, $1540 | 0, $1541 | 0) | 0;
 $1543 = getTempRet0() | 0;
 $1544 = $add$ptr3292;
 $1545 = $1544;
 HEAP32[$1545 >> 2] = $1542;
 $1546 = $1544 + 4 | 0;
 $1547 = $1546;
 HEAP32[$1547 >> 2] = $1543;
 $1548 = $1542 ^ $1509;
 $1549 = $1543 ^ $1508;
 $1550 = _bitshift64Lshr($1548 | 0, $1549 | 0, 16) | 0;
 $1551 = getTempRet0() | 0;
 $1552 = _bitshift64Shl($1548 | 0, $1549 | 0, 48) | 0;
 $1553 = getTempRet0() | 0;
 $1554 = $1550 | $1552;
 $1555 = $1551 | $1553;
 $1556 = $arrayidx3319;
 $1557 = $1556;
 HEAP32[$1557 >> 2] = $1554;
 $1558 = $1556 + 4 | 0;
 $1559 = $1558;
 HEAP32[$1559 >> 2] = $1555;
 $1560 = _i64Add($1554 | 0, $1555 | 0, $1524 | 0, $1525 | 0) | 0;
 $1561 = getTempRet0() | 0;
 $1562 = _bitshift64Shl($1524 | 0, $1525 | 0, 1) | 0;
 $1563 = getTempRet0() | 0;
 $1564 = $1562 & -2;
 $1565 = $1563 & 1;
 $1566 = ___muldi3($1550 | 0, 0, $1564 | 0, $1565 | 0) | 0;
 $1567 = getTempRet0() | 0;
 $1568 = _i64Add($1560 | 0, $1561 | 0, $1566 | 0, $1567 | 0) | 0;
 $1569 = getTempRet0() | 0;
 $1570 = $arrayidx3344;
 $1571 = $1570;
 HEAP32[$1571 >> 2] = $1568;
 $1572 = $1570 + 4 | 0;
 $1573 = $1572;
 HEAP32[$1573 >> 2] = $1569;
 $1574 = $1568 ^ $1532;
 $1575 = $1569 ^ $1533;
 $1576 = _bitshift64Lshr($1574 | 0, $1575 | 0, 63) | 0;
 $1577 = getTempRet0() | 0;
 $1578 = _bitshift64Shl($1574 | 0, $1575 | 0, 1) | 0;
 $1579 = getTempRet0() | 0;
 $1580 = $1576 | $1578;
 $1581 = $1577 | $1579;
 $1582 = $arrayidx3297;
 $1583 = $1582;
 HEAP32[$1583 >> 2] = $1580;
 $1584 = $1582 + 4 | 0;
 $1585 = $1584;
 HEAP32[$1585 >> 2] = $1581;
 $arrayidx3499 = $blockR + 264 | 0;
 $1586 = $arrayidx3499;
 $1587 = $1586;
 $1588 = HEAP32[$1587 >> 2] | 0;
 $1589 = $1586 + 4 | 0;
 $1590 = $1589;
 $1591 = HEAP32[$1590 >> 2] | 0;
 $arrayidx3503 = $blockR + 296 | 0;
 $1592 = $arrayidx3503;
 $1593 = $1592;
 $1594 = HEAP32[$1593 >> 2] | 0;
 $1595 = $1592 + 4 | 0;
 $1596 = $1595;
 $1597 = HEAP32[$1596 >> 2] | 0;
 $1598 = _i64Add($1594 | 0, $1597 | 0, $1588 | 0, $1591 | 0) | 0;
 $1599 = getTempRet0() | 0;
 $1600 = _bitshift64Shl($1588 | 0, $1591 | 0, 1) | 0;
 $1601 = getTempRet0() | 0;
 $1602 = $1600 & -2;
 $1603 = $1601 & 1;
 $1604 = ___muldi3($1602 | 0, $1603 | 0, $1594 | 0, 0) | 0;
 $1605 = getTempRet0() | 0;
 $1606 = _i64Add($1598 | 0, $1599 | 0, $1604 | 0, $1605 | 0) | 0;
 $1607 = getTempRet0() | 0;
 $arrayidx3525 = $blockR + 360 | 0;
 $1608 = $arrayidx3525;
 $1609 = $1608;
 $1610 = HEAP32[$1609 >> 2] | 0;
 $1611 = $1608 + 4 | 0;
 $1612 = $1611;
 $1613 = HEAP32[$1612 >> 2] | 0;
 $1614 = $1606 ^ $1610;
 $1615 = $1607 ^ $1613;
 $arrayidx3550 = $blockR + 328 | 0;
 $1616 = $arrayidx3550;
 $1617 = $1616;
 $1618 = HEAP32[$1617 >> 2] | 0;
 $1619 = $1616 + 4 | 0;
 $1620 = $1619;
 $1621 = HEAP32[$1620 >> 2] | 0;
 $1622 = _i64Add($1615 | 0, $1614 | 0, $1618 | 0, $1621 | 0) | 0;
 $1623 = getTempRet0() | 0;
 $1624 = _bitshift64Shl($1618 | 0, $1621 | 0, 1) | 0;
 $1625 = getTempRet0() | 0;
 $1626 = $1624 & -2;
 $1627 = $1625 & 1;
 $1628 = ___muldi3($1626 | 0, $1627 | 0, $1615 | 0, 0) | 0;
 $1629 = getTempRet0() | 0;
 $1630 = _i64Add($1622 | 0, $1623 | 0, $1628 | 0, $1629 | 0) | 0;
 $1631 = getTempRet0() | 0;
 $1632 = $1630 ^ $1594;
 $1633 = $1631 ^ $1597;
 $1634 = _bitshift64Lshr($1632 | 0, $1633 | 0, 24) | 0;
 $1635 = getTempRet0() | 0;
 $1636 = _bitshift64Shl($1632 | 0, $1633 | 0, 40) | 0;
 $1637 = getTempRet0() | 0;
 $1638 = $1634 | $1636;
 $1639 = $1635 | $1637;
 $1640 = _i64Add($1638 | 0, $1639 | 0, $1606 | 0, $1607 | 0) | 0;
 $1641 = getTempRet0() | 0;
 $1642 = _bitshift64Shl($1606 | 0, $1607 | 0, 1) | 0;
 $1643 = getTempRet0() | 0;
 $1644 = $1642 & -2;
 $1645 = $1643 & 1;
 $1646 = ___muldi3($1634 | 0, 0, $1644 | 0, $1645 | 0) | 0;
 $1647 = getTempRet0() | 0;
 $1648 = _i64Add($1640 | 0, $1641 | 0, $1646 | 0, $1647 | 0) | 0;
 $1649 = getTempRet0() | 0;
 $1650 = $arrayidx3499;
 $1651 = $1650;
 HEAP32[$1651 >> 2] = $1648;
 $1652 = $1650 + 4 | 0;
 $1653 = $1652;
 HEAP32[$1653 >> 2] = $1649;
 $1654 = $1648 ^ $1615;
 $1655 = $1649 ^ $1614;
 $1656 = _bitshift64Lshr($1654 | 0, $1655 | 0, 16) | 0;
 $1657 = getTempRet0() | 0;
 $1658 = _bitshift64Shl($1654 | 0, $1655 | 0, 48) | 0;
 $1659 = getTempRet0() | 0;
 $1660 = $1656 | $1658;
 $1661 = $1657 | $1659;
 $1662 = $arrayidx3525;
 $1663 = $1662;
 HEAP32[$1663 >> 2] = $1660;
 $1664 = $1662 + 4 | 0;
 $1665 = $1664;
 HEAP32[$1665 >> 2] = $1661;
 $1666 = _i64Add($1660 | 0, $1661 | 0, $1630 | 0, $1631 | 0) | 0;
 $1667 = getTempRet0() | 0;
 $1668 = _bitshift64Shl($1630 | 0, $1631 | 0, 1) | 0;
 $1669 = getTempRet0() | 0;
 $1670 = $1668 & -2;
 $1671 = $1669 & 1;
 $1672 = ___muldi3($1656 | 0, 0, $1670 | 0, $1671 | 0) | 0;
 $1673 = getTempRet0() | 0;
 $1674 = _i64Add($1666 | 0, $1667 | 0, $1672 | 0, $1673 | 0) | 0;
 $1675 = getTempRet0() | 0;
 $1676 = $arrayidx3550;
 $1677 = $1676;
 HEAP32[$1677 >> 2] = $1674;
 $1678 = $1676 + 4 | 0;
 $1679 = $1678;
 HEAP32[$1679 >> 2] = $1675;
 $1680 = $1674 ^ $1638;
 $1681 = $1675 ^ $1639;
 $1682 = _bitshift64Lshr($1680 | 0, $1681 | 0, 63) | 0;
 $1683 = getTempRet0() | 0;
 $1684 = _bitshift64Shl($1680 | 0, $1681 | 0, 1) | 0;
 $1685 = getTempRet0() | 0;
 $1686 = $1682 | $1684;
 $1687 = $1683 | $1685;
 $1688 = $arrayidx3503;
 $1689 = $1688;
 HEAP32[$1689 >> 2] = $1686;
 $1690 = $1688 + 4 | 0;
 $1691 = $1690;
 HEAP32[$1691 >> 2] = $1687;
 $arrayidx3705 = $blockR + 272 | 0;
 $1692 = $arrayidx3705;
 $1693 = $1692;
 $1694 = HEAP32[$1693 >> 2] | 0;
 $1695 = $1692 + 4 | 0;
 $1696 = $1695;
 $1697 = HEAP32[$1696 >> 2] | 0;
 $arrayidx3709 = $blockR + 304 | 0;
 $1698 = $arrayidx3709;
 $1699 = $1698;
 $1700 = HEAP32[$1699 >> 2] | 0;
 $1701 = $1698 + 4 | 0;
 $1702 = $1701;
 $1703 = HEAP32[$1702 >> 2] | 0;
 $1704 = _i64Add($1700 | 0, $1703 | 0, $1694 | 0, $1697 | 0) | 0;
 $1705 = getTempRet0() | 0;
 $1706 = _bitshift64Shl($1694 | 0, $1697 | 0, 1) | 0;
 $1707 = getTempRet0() | 0;
 $1708 = $1706 & -2;
 $1709 = $1707 & 1;
 $1710 = ___muldi3($1708 | 0, $1709 | 0, $1700 | 0, 0) | 0;
 $1711 = getTempRet0() | 0;
 $1712 = _i64Add($1704 | 0, $1705 | 0, $1710 | 0, $1711 | 0) | 0;
 $1713 = getTempRet0() | 0;
 $arrayidx3731 = $blockR + 368 | 0;
 $1714 = $arrayidx3731;
 $1715 = $1714;
 $1716 = HEAP32[$1715 >> 2] | 0;
 $1717 = $1714 + 4 | 0;
 $1718 = $1717;
 $1719 = HEAP32[$1718 >> 2] | 0;
 $1720 = $1712 ^ $1716;
 $1721 = $1713 ^ $1719;
 $arrayidx3756 = $blockR + 336 | 0;
 $1722 = $arrayidx3756;
 $1723 = $1722;
 $1724 = HEAP32[$1723 >> 2] | 0;
 $1725 = $1722 + 4 | 0;
 $1726 = $1725;
 $1727 = HEAP32[$1726 >> 2] | 0;
 $1728 = _i64Add($1721 | 0, $1720 | 0, $1724 | 0, $1727 | 0) | 0;
 $1729 = getTempRet0() | 0;
 $1730 = _bitshift64Shl($1724 | 0, $1727 | 0, 1) | 0;
 $1731 = getTempRet0() | 0;
 $1732 = $1730 & -2;
 $1733 = $1731 & 1;
 $1734 = ___muldi3($1732 | 0, $1733 | 0, $1721 | 0, 0) | 0;
 $1735 = getTempRet0() | 0;
 $1736 = _i64Add($1728 | 0, $1729 | 0, $1734 | 0, $1735 | 0) | 0;
 $1737 = getTempRet0() | 0;
 $1738 = $1736 ^ $1700;
 $1739 = $1737 ^ $1703;
 $1740 = _bitshift64Lshr($1738 | 0, $1739 | 0, 24) | 0;
 $1741 = getTempRet0() | 0;
 $1742 = _bitshift64Shl($1738 | 0, $1739 | 0, 40) | 0;
 $1743 = getTempRet0() | 0;
 $1744 = $1740 | $1742;
 $1745 = $1741 | $1743;
 $1746 = _i64Add($1744 | 0, $1745 | 0, $1712 | 0, $1713 | 0) | 0;
 $1747 = getTempRet0() | 0;
 $1748 = _bitshift64Shl($1712 | 0, $1713 | 0, 1) | 0;
 $1749 = getTempRet0() | 0;
 $1750 = $1748 & -2;
 $1751 = $1749 & 1;
 $1752 = ___muldi3($1740 | 0, 0, $1750 | 0, $1751 | 0) | 0;
 $1753 = getTempRet0() | 0;
 $1754 = _i64Add($1746 | 0, $1747 | 0, $1752 | 0, $1753 | 0) | 0;
 $1755 = getTempRet0() | 0;
 $1756 = $arrayidx3705;
 $1757 = $1756;
 HEAP32[$1757 >> 2] = $1754;
 $1758 = $1756 + 4 | 0;
 $1759 = $1758;
 HEAP32[$1759 >> 2] = $1755;
 $1760 = $1754 ^ $1721;
 $1761 = $1755 ^ $1720;
 $1762 = _bitshift64Lshr($1760 | 0, $1761 | 0, 16) | 0;
 $1763 = getTempRet0() | 0;
 $1764 = _bitshift64Shl($1760 | 0, $1761 | 0, 48) | 0;
 $1765 = getTempRet0() | 0;
 $1766 = $1762 | $1764;
 $1767 = $1763 | $1765;
 $1768 = $arrayidx3731;
 $1769 = $1768;
 HEAP32[$1769 >> 2] = $1766;
 $1770 = $1768 + 4 | 0;
 $1771 = $1770;
 HEAP32[$1771 >> 2] = $1767;
 $1772 = _i64Add($1766 | 0, $1767 | 0, $1736 | 0, $1737 | 0) | 0;
 $1773 = getTempRet0() | 0;
 $1774 = _bitshift64Shl($1736 | 0, $1737 | 0, 1) | 0;
 $1775 = getTempRet0() | 0;
 $1776 = $1774 & -2;
 $1777 = $1775 & 1;
 $1778 = ___muldi3($1762 | 0, 0, $1776 | 0, $1777 | 0) | 0;
 $1779 = getTempRet0() | 0;
 $1780 = _i64Add($1772 | 0, $1773 | 0, $1778 | 0, $1779 | 0) | 0;
 $1781 = getTempRet0() | 0;
 $1782 = $1780 ^ $1744;
 $1783 = $1781 ^ $1745;
 $1784 = _bitshift64Lshr($1782 | 0, $1783 | 0, 63) | 0;
 $1785 = getTempRet0() | 0;
 $1786 = _bitshift64Shl($1782 | 0, $1783 | 0, 1) | 0;
 $1787 = getTempRet0() | 0;
 $1788 = $1784 | $1786;
 $1789 = $1785 | $1787;
 $1790 = $arrayidx3709;
 $1791 = $1790;
 HEAP32[$1791 >> 2] = $1788;
 $1792 = $1790 + 4 | 0;
 $1793 = $1792;
 HEAP32[$1793 >> 2] = $1789;
 $arrayidx3911 = $blockR + 280 | 0;
 $1794 = $arrayidx3911;
 $1795 = $1794;
 $1796 = HEAP32[$1795 >> 2] | 0;
 $1797 = $1794 + 4 | 0;
 $1798 = $1797;
 $1799 = HEAP32[$1798 >> 2] | 0;
 $arrayidx3915 = $blockR + 312 | 0;
 $1800 = $arrayidx3915;
 $1801 = $1800;
 $1802 = HEAP32[$1801 >> 2] | 0;
 $1803 = $1800 + 4 | 0;
 $1804 = $1803;
 $1805 = HEAP32[$1804 >> 2] | 0;
 $1806 = _i64Add($1802 | 0, $1805 | 0, $1796 | 0, $1799 | 0) | 0;
 $1807 = getTempRet0() | 0;
 $1808 = _bitshift64Shl($1796 | 0, $1799 | 0, 1) | 0;
 $1809 = getTempRet0() | 0;
 $1810 = $1808 & -2;
 $1811 = $1809 & 1;
 $1812 = ___muldi3($1810 | 0, $1811 | 0, $1802 | 0, 0) | 0;
 $1813 = getTempRet0() | 0;
 $1814 = _i64Add($1806 | 0, $1807 | 0, $1812 | 0, $1813 | 0) | 0;
 $1815 = getTempRet0() | 0;
 $arrayidx3937 = $blockR + 376 | 0;
 $1816 = $arrayidx3937;
 $1817 = $1816;
 $1818 = HEAP32[$1817 >> 2] | 0;
 $1819 = $1816 + 4 | 0;
 $1820 = $1819;
 $1821 = HEAP32[$1820 >> 2] | 0;
 $1822 = $1814 ^ $1818;
 $1823 = $1815 ^ $1821;
 $arrayidx3962 = $blockR + 344 | 0;
 $1824 = $arrayidx3962;
 $1825 = $1824;
 $1826 = HEAP32[$1825 >> 2] | 0;
 $1827 = $1824 + 4 | 0;
 $1828 = $1827;
 $1829 = HEAP32[$1828 >> 2] | 0;
 $1830 = _i64Add($1823 | 0, $1822 | 0, $1826 | 0, $1829 | 0) | 0;
 $1831 = getTempRet0() | 0;
 $1832 = _bitshift64Shl($1826 | 0, $1829 | 0, 1) | 0;
 $1833 = getTempRet0() | 0;
 $1834 = $1832 & -2;
 $1835 = $1833 & 1;
 $1836 = ___muldi3($1834 | 0, $1835 | 0, $1823 | 0, 0) | 0;
 $1837 = getTempRet0() | 0;
 $1838 = _i64Add($1830 | 0, $1831 | 0, $1836 | 0, $1837 | 0) | 0;
 $1839 = getTempRet0() | 0;
 $1840 = $1838 ^ $1802;
 $1841 = $1839 ^ $1805;
 $1842 = _bitshift64Lshr($1840 | 0, $1841 | 0, 24) | 0;
 $1843 = getTempRet0() | 0;
 $1844 = _bitshift64Shl($1840 | 0, $1841 | 0, 40) | 0;
 $1845 = getTempRet0() | 0;
 $1846 = $1842 | $1844;
 $1847 = $1843 | $1845;
 $1848 = _i64Add($1846 | 0, $1847 | 0, $1814 | 0, $1815 | 0) | 0;
 $1849 = getTempRet0() | 0;
 $1850 = _bitshift64Shl($1814 | 0, $1815 | 0, 1) | 0;
 $1851 = getTempRet0() | 0;
 $1852 = $1850 & -2;
 $1853 = $1851 & 1;
 $1854 = ___muldi3($1842 | 0, 0, $1852 | 0, $1853 | 0) | 0;
 $1855 = getTempRet0() | 0;
 $1856 = _i64Add($1848 | 0, $1849 | 0, $1854 | 0, $1855 | 0) | 0;
 $1857 = getTempRet0() | 0;
 $1858 = $arrayidx3911;
 $1859 = $1858;
 HEAP32[$1859 >> 2] = $1856;
 $1860 = $1858 + 4 | 0;
 $1861 = $1860;
 HEAP32[$1861 >> 2] = $1857;
 $1862 = $1856 ^ $1823;
 $1863 = $1857 ^ $1822;
 $1864 = _bitshift64Lshr($1862 | 0, $1863 | 0, 16) | 0;
 $1865 = getTempRet0() | 0;
 $1866 = _bitshift64Shl($1862 | 0, $1863 | 0, 48) | 0;
 $1867 = getTempRet0() | 0;
 $1868 = $1864 | $1866;
 $1869 = $1865 | $1867;
 $1870 = _i64Add($1868 | 0, $1869 | 0, $1838 | 0, $1839 | 0) | 0;
 $1871 = getTempRet0() | 0;
 $1872 = _bitshift64Shl($1838 | 0, $1839 | 0, 1) | 0;
 $1873 = getTempRet0() | 0;
 $1874 = $1872 & -2;
 $1875 = $1873 & 1;
 $1876 = ___muldi3($1864 | 0, 0, $1874 | 0, $1875 | 0) | 0;
 $1877 = getTempRet0() | 0;
 $1878 = _i64Add($1870 | 0, $1871 | 0, $1876 | 0, $1877 | 0) | 0;
 $1879 = getTempRet0() | 0;
 $1880 = $1878 ^ $1846;
 $1881 = $1879 ^ $1847;
 $1882 = _bitshift64Lshr($1880 | 0, $1881 | 0, 63) | 0;
 $1883 = getTempRet0() | 0;
 $1884 = _bitshift64Shl($1880 | 0, $1881 | 0, 1) | 0;
 $1885 = getTempRet0() | 0;
 $1886 = $1882 | $1884;
 $1887 = $1883 | $1885;
 $1888 = $arrayidx3915;
 $1889 = $1888;
 HEAP32[$1889 >> 2] = $1886;
 $1890 = $1888 + 4 | 0;
 $1891 = $1890;
 HEAP32[$1891 >> 2] = $1887;
 $1892 = _i64Add($1686 | 0, $1687 | 0, $1542 | 0, $1543 | 0) | 0;
 $1893 = getTempRet0() | 0;
 $1894 = _bitshift64Shl($1542 | 0, $1543 | 0, 1) | 0;
 $1895 = getTempRet0() | 0;
 $1896 = $1894 & -2;
 $1897 = $1895 & 1;
 $1898 = ___muldi3($1686 | 0, 0, $1896 | 0, $1897 | 0) | 0;
 $1899 = getTempRet0() | 0;
 $1900 = _i64Add($1892 | 0, $1893 | 0, $1898 | 0, $1899 | 0) | 0;
 $1901 = getTempRet0() | 0;
 $1902 = $1868 ^ $1900;
 $1903 = $1869 ^ $1901;
 $1904 = _i64Add($1903 | 0, $1902 | 0, $1780 | 0, $1781 | 0) | 0;
 $1905 = getTempRet0() | 0;
 $1906 = _bitshift64Shl($1780 | 0, $1781 | 0, 1) | 0;
 $1907 = getTempRet0() | 0;
 $1908 = $1906 & -2;
 $1909 = $1907 & 1;
 $1910 = ___muldi3($1903 | 0, 0, $1908 | 0, $1909 | 0) | 0;
 $1911 = getTempRet0() | 0;
 $1912 = _i64Add($1904 | 0, $1905 | 0, $1910 | 0, $1911 | 0) | 0;
 $1913 = getTempRet0() | 0;
 $1914 = $1912 ^ $1686;
 $1915 = $1913 ^ $1687;
 $1916 = _bitshift64Lshr($1914 | 0, $1915 | 0, 24) | 0;
 $1917 = getTempRet0() | 0;
 $1918 = _bitshift64Shl($1914 | 0, $1915 | 0, 40) | 0;
 $1919 = getTempRet0() | 0;
 $1920 = $1916 | $1918;
 $1921 = $1917 | $1919;
 $1922 = _i64Add($1920 | 0, $1921 | 0, $1900 | 0, $1901 | 0) | 0;
 $1923 = getTempRet0() | 0;
 $1924 = _bitshift64Shl($1900 | 0, $1901 | 0, 1) | 0;
 $1925 = getTempRet0() | 0;
 $1926 = $1924 & -2;
 $1927 = $1925 & 1;
 $1928 = ___muldi3($1916 | 0, 0, $1926 | 0, $1927 | 0) | 0;
 $1929 = getTempRet0() | 0;
 $1930 = _i64Add($1922 | 0, $1923 | 0, $1928 | 0, $1929 | 0) | 0;
 $1931 = getTempRet0() | 0;
 $1932 = $add$ptr3292;
 $1933 = $1932;
 HEAP32[$1933 >> 2] = $1930;
 $1934 = $1932 + 4 | 0;
 $1935 = $1934;
 HEAP32[$1935 >> 2] = $1931;
 $1936 = $1930 ^ $1903;
 $1937 = $1931 ^ $1902;
 $1938 = _bitshift64Lshr($1936 | 0, $1937 | 0, 16) | 0;
 $1939 = getTempRet0() | 0;
 $1940 = _bitshift64Shl($1936 | 0, $1937 | 0, 48) | 0;
 $1941 = getTempRet0() | 0;
 $1942 = $1938 | $1940;
 $1943 = $1939 | $1941;
 $1944 = $arrayidx3937;
 $1945 = $1944;
 HEAP32[$1945 >> 2] = $1942;
 $1946 = $1944 + 4 | 0;
 $1947 = $1946;
 HEAP32[$1947 >> 2] = $1943;
 $1948 = _i64Add($1942 | 0, $1943 | 0, $1912 | 0, $1913 | 0) | 0;
 $1949 = getTempRet0() | 0;
 $1950 = _bitshift64Shl($1912 | 0, $1913 | 0, 1) | 0;
 $1951 = getTempRet0() | 0;
 $1952 = $1950 & -2;
 $1953 = $1951 & 1;
 $1954 = ___muldi3($1938 | 0, 0, $1952 | 0, $1953 | 0) | 0;
 $1955 = getTempRet0() | 0;
 $1956 = _i64Add($1948 | 0, $1949 | 0, $1954 | 0, $1955 | 0) | 0;
 $1957 = getTempRet0() | 0;
 $1958 = $arrayidx3756;
 $1959 = $1958;
 HEAP32[$1959 >> 2] = $1956;
 $1960 = $1958 + 4 | 0;
 $1961 = $1960;
 HEAP32[$1961 >> 2] = $1957;
 $1962 = $1956 ^ $1920;
 $1963 = $1957 ^ $1921;
 $1964 = _bitshift64Lshr($1962 | 0, $1963 | 0, 63) | 0;
 $1965 = getTempRet0() | 0;
 $1966 = _bitshift64Shl($1962 | 0, $1963 | 0, 1) | 0;
 $1967 = getTempRet0() | 0;
 $1968 = $1964 | $1966;
 $1969 = $1965 | $1967;
 $1970 = $arrayidx3503;
 $1971 = $1970;
 HEAP32[$1971 >> 2] = $1968;
 $1972 = $1970 + 4 | 0;
 $1973 = $1972;
 HEAP32[$1973 >> 2] = $1969;
 $1974 = _i64Add($1788 | 0, $1789 | 0, $1648 | 0, $1649 | 0) | 0;
 $1975 = getTempRet0() | 0;
 $1976 = _bitshift64Shl($1648 | 0, $1649 | 0, 1) | 0;
 $1977 = getTempRet0() | 0;
 $1978 = $1976 & -2;
 $1979 = $1977 & 1;
 $1980 = ___muldi3($1788 | 0, 0, $1978 | 0, $1979 | 0) | 0;
 $1981 = getTempRet0() | 0;
 $1982 = _i64Add($1974 | 0, $1975 | 0, $1980 | 0, $1981 | 0) | 0;
 $1983 = getTempRet0() | 0;
 $1984 = $1982 ^ $1554;
 $1985 = $1983 ^ $1555;
 $1986 = _i64Add($1878 | 0, $1879 | 0, $1985 | 0, $1984 | 0) | 0;
 $1987 = getTempRet0() | 0;
 $1988 = _bitshift64Shl($1878 | 0, $1879 | 0, 1) | 0;
 $1989 = getTempRet0() | 0;
 $1990 = $1988 & -2;
 $1991 = $1989 & 1;
 $1992 = ___muldi3($1990 | 0, $1991 | 0, $1985 | 0, 0) | 0;
 $1993 = getTempRet0() | 0;
 $1994 = _i64Add($1986 | 0, $1987 | 0, $1992 | 0, $1993 | 0) | 0;
 $1995 = getTempRet0() | 0;
 $1996 = $1994 ^ $1788;
 $1997 = $1995 ^ $1789;
 $1998 = _bitshift64Lshr($1996 | 0, $1997 | 0, 24) | 0;
 $1999 = getTempRet0() | 0;
 $2000 = _bitshift64Shl($1996 | 0, $1997 | 0, 40) | 0;
 $2001 = getTempRet0() | 0;
 $2002 = $1998 | $2000;
 $2003 = $1999 | $2001;
 $2004 = _i64Add($2002 | 0, $2003 | 0, $1982 | 0, $1983 | 0) | 0;
 $2005 = getTempRet0() | 0;
 $2006 = _bitshift64Shl($1982 | 0, $1983 | 0, 1) | 0;
 $2007 = getTempRet0() | 0;
 $2008 = $2006 & -2;
 $2009 = $2007 & 1;
 $2010 = ___muldi3($1998 | 0, 0, $2008 | 0, $2009 | 0) | 0;
 $2011 = getTempRet0() | 0;
 $2012 = _i64Add($2004 | 0, $2005 | 0, $2010 | 0, $2011 | 0) | 0;
 $2013 = getTempRet0() | 0;
 $2014 = $arrayidx3499;
 $2015 = $2014;
 HEAP32[$2015 >> 2] = $2012;
 $2016 = $2014 + 4 | 0;
 $2017 = $2016;
 HEAP32[$2017 >> 2] = $2013;
 $2018 = $2012 ^ $1985;
 $2019 = $2013 ^ $1984;
 $2020 = _bitshift64Lshr($2018 | 0, $2019 | 0, 16) | 0;
 $2021 = getTempRet0() | 0;
 $2022 = _bitshift64Shl($2018 | 0, $2019 | 0, 48) | 0;
 $2023 = getTempRet0() | 0;
 $2024 = $2020 | $2022;
 $2025 = $2021 | $2023;
 $2026 = $arrayidx3319;
 $2027 = $2026;
 HEAP32[$2027 >> 2] = $2024;
 $2028 = $2026 + 4 | 0;
 $2029 = $2028;
 HEAP32[$2029 >> 2] = $2025;
 $2030 = _i64Add($2024 | 0, $2025 | 0, $1994 | 0, $1995 | 0) | 0;
 $2031 = getTempRet0() | 0;
 $2032 = _bitshift64Shl($1994 | 0, $1995 | 0, 1) | 0;
 $2033 = getTempRet0() | 0;
 $2034 = $2032 & -2;
 $2035 = $2033 & 1;
 $2036 = ___muldi3($2020 | 0, 0, $2034 | 0, $2035 | 0) | 0;
 $2037 = getTempRet0() | 0;
 $2038 = _i64Add($2030 | 0, $2031 | 0, $2036 | 0, $2037 | 0) | 0;
 $2039 = getTempRet0() | 0;
 $2040 = $arrayidx3962;
 $2041 = $2040;
 HEAP32[$2041 >> 2] = $2038;
 $2042 = $2040 + 4 | 0;
 $2043 = $2042;
 HEAP32[$2043 >> 2] = $2039;
 $2044 = $2038 ^ $2002;
 $2045 = $2039 ^ $2003;
 $2046 = _bitshift64Lshr($2044 | 0, $2045 | 0, 63) | 0;
 $2047 = getTempRet0() | 0;
 $2048 = _bitshift64Shl($2044 | 0, $2045 | 0, 1) | 0;
 $2049 = getTempRet0() | 0;
 $2050 = $2046 | $2048;
 $2051 = $2047 | $2049;
 $2052 = $arrayidx3709;
 $2053 = $2052;
 HEAP32[$2053 >> 2] = $2050;
 $2054 = $2052 + 4 | 0;
 $2055 = $2054;
 HEAP32[$2055 >> 2] = $2051;
 $2056 = _i64Add($1886 | 0, $1887 | 0, $1754 | 0, $1755 | 0) | 0;
 $2057 = getTempRet0() | 0;
 $2058 = _bitshift64Shl($1754 | 0, $1755 | 0, 1) | 0;
 $2059 = getTempRet0() | 0;
 $2060 = $2058 & -2;
 $2061 = $2059 & 1;
 $2062 = ___muldi3($1886 | 0, 0, $2060 | 0, $2061 | 0) | 0;
 $2063 = getTempRet0() | 0;
 $2064 = _i64Add($2056 | 0, $2057 | 0, $2062 | 0, $2063 | 0) | 0;
 $2065 = getTempRet0() | 0;
 $2066 = $2064 ^ $1660;
 $2067 = $2065 ^ $1661;
 $2068 = _i64Add($2067 | 0, $2066 | 0, $1568 | 0, $1569 | 0) | 0;
 $2069 = getTempRet0() | 0;
 $2070 = _bitshift64Shl($1568 | 0, $1569 | 0, 1) | 0;
 $2071 = getTempRet0() | 0;
 $2072 = $2070 & -2;
 $2073 = $2071 & 1;
 $2074 = ___muldi3($2067 | 0, 0, $2072 | 0, $2073 | 0) | 0;
 $2075 = getTempRet0() | 0;
 $2076 = _i64Add($2068 | 0, $2069 | 0, $2074 | 0, $2075 | 0) | 0;
 $2077 = getTempRet0() | 0;
 $2078 = $2076 ^ $1886;
 $2079 = $2077 ^ $1887;
 $2080 = _bitshift64Lshr($2078 | 0, $2079 | 0, 24) | 0;
 $2081 = getTempRet0() | 0;
 $2082 = _bitshift64Shl($2078 | 0, $2079 | 0, 40) | 0;
 $2083 = getTempRet0() | 0;
 $2084 = $2080 | $2082;
 $2085 = $2081 | $2083;
 $2086 = _i64Add($2084 | 0, $2085 | 0, $2064 | 0, $2065 | 0) | 0;
 $2087 = getTempRet0() | 0;
 $2088 = _bitshift64Shl($2064 | 0, $2065 | 0, 1) | 0;
 $2089 = getTempRet0() | 0;
 $2090 = $2088 & -2;
 $2091 = $2089 & 1;
 $2092 = ___muldi3($2080 | 0, 0, $2090 | 0, $2091 | 0) | 0;
 $2093 = getTempRet0() | 0;
 $2094 = _i64Add($2086 | 0, $2087 | 0, $2092 | 0, $2093 | 0) | 0;
 $2095 = getTempRet0() | 0;
 $2096 = $arrayidx3705;
 $2097 = $2096;
 HEAP32[$2097 >> 2] = $2094;
 $2098 = $2096 + 4 | 0;
 $2099 = $2098;
 HEAP32[$2099 >> 2] = $2095;
 $2100 = $2094 ^ $2067;
 $2101 = $2095 ^ $2066;
 $2102 = _bitshift64Lshr($2100 | 0, $2101 | 0, 16) | 0;
 $2103 = getTempRet0() | 0;
 $2104 = _bitshift64Shl($2100 | 0, $2101 | 0, 48) | 0;
 $2105 = getTempRet0() | 0;
 $2106 = $2102 | $2104;
 $2107 = $2103 | $2105;
 $2108 = $arrayidx3525;
 $2109 = $2108;
 HEAP32[$2109 >> 2] = $2106;
 $2110 = $2108 + 4 | 0;
 $2111 = $2110;
 HEAP32[$2111 >> 2] = $2107;
 $2112 = _i64Add($2106 | 0, $2107 | 0, $2076 | 0, $2077 | 0) | 0;
 $2113 = getTempRet0() | 0;
 $2114 = _bitshift64Shl($2076 | 0, $2077 | 0, 1) | 0;
 $2115 = getTempRet0() | 0;
 $2116 = $2114 & -2;
 $2117 = $2115 & 1;
 $2118 = ___muldi3($2102 | 0, 0, $2116 | 0, $2117 | 0) | 0;
 $2119 = getTempRet0() | 0;
 $2120 = _i64Add($2112 | 0, $2113 | 0, $2118 | 0, $2119 | 0) | 0;
 $2121 = getTempRet0() | 0;
 $2122 = $arrayidx3344;
 $2123 = $2122;
 HEAP32[$2123 >> 2] = $2120;
 $2124 = $2122 + 4 | 0;
 $2125 = $2124;
 HEAP32[$2125 >> 2] = $2121;
 $2126 = $2120 ^ $2084;
 $2127 = $2121 ^ $2085;
 $2128 = _bitshift64Lshr($2126 | 0, $2127 | 0, 63) | 0;
 $2129 = getTempRet0() | 0;
 $2130 = _bitshift64Shl($2126 | 0, $2127 | 0, 1) | 0;
 $2131 = getTempRet0() | 0;
 $2132 = $2128 | $2130;
 $2133 = $2129 | $2131;
 $2134 = $arrayidx3915;
 $2135 = $2134;
 HEAP32[$2135 >> 2] = $2132;
 $2136 = $2134 + 4 | 0;
 $2137 = $2136;
 HEAP32[$2137 >> 2] = $2133;
 $2138 = _i64Add($1856 | 0, $1857 | 0, $1580 | 0, $1581 | 0) | 0;
 $2139 = getTempRet0() | 0;
 $2140 = _bitshift64Shl($1856 | 0, $1857 | 0, 1) | 0;
 $2141 = getTempRet0() | 0;
 $2142 = $2140 & -2;
 $2143 = $2141 & 1;
 $2144 = ___muldi3($2142 | 0, $2143 | 0, $1580 | 0, 0) | 0;
 $2145 = getTempRet0() | 0;
 $2146 = _i64Add($2138 | 0, $2139 | 0, $2144 | 0, $2145 | 0) | 0;
 $2147 = getTempRet0() | 0;
 $2148 = $2146 ^ $1766;
 $2149 = $2147 ^ $1767;
 $2150 = _i64Add($2149 | 0, $2148 | 0, $1674 | 0, $1675 | 0) | 0;
 $2151 = getTempRet0() | 0;
 $2152 = _bitshift64Shl($1674 | 0, $1675 | 0, 1) | 0;
 $2153 = getTempRet0() | 0;
 $2154 = $2152 & -2;
 $2155 = $2153 & 1;
 $2156 = ___muldi3($2149 | 0, 0, $2154 | 0, $2155 | 0) | 0;
 $2157 = getTempRet0() | 0;
 $2158 = _i64Add($2150 | 0, $2151 | 0, $2156 | 0, $2157 | 0) | 0;
 $2159 = getTempRet0() | 0;
 $2160 = $2158 ^ $1580;
 $2161 = $2159 ^ $1581;
 $2162 = _bitshift64Lshr($2160 | 0, $2161 | 0, 24) | 0;
 $2163 = getTempRet0() | 0;
 $2164 = _bitshift64Shl($2160 | 0, $2161 | 0, 40) | 0;
 $2165 = getTempRet0() | 0;
 $2166 = $2162 | $2164;
 $2167 = $2163 | $2165;
 $2168 = _i64Add($2166 | 0, $2167 | 0, $2146 | 0, $2147 | 0) | 0;
 $2169 = getTempRet0() | 0;
 $2170 = _bitshift64Shl($2146 | 0, $2147 | 0, 1) | 0;
 $2171 = getTempRet0() | 0;
 $2172 = $2170 & -2;
 $2173 = $2171 & 1;
 $2174 = ___muldi3($2162 | 0, 0, $2172 | 0, $2173 | 0) | 0;
 $2175 = getTempRet0() | 0;
 $2176 = _i64Add($2168 | 0, $2169 | 0, $2174 | 0, $2175 | 0) | 0;
 $2177 = getTempRet0() | 0;
 $2178 = $arrayidx3911;
 $2179 = $2178;
 HEAP32[$2179 >> 2] = $2176;
 $2180 = $2178 + 4 | 0;
 $2181 = $2180;
 HEAP32[$2181 >> 2] = $2177;
 $2182 = $2176 ^ $2149;
 $2183 = $2177 ^ $2148;
 $2184 = _bitshift64Lshr($2182 | 0, $2183 | 0, 16) | 0;
 $2185 = getTempRet0() | 0;
 $2186 = _bitshift64Shl($2182 | 0, $2183 | 0, 48) | 0;
 $2187 = getTempRet0() | 0;
 $2188 = $2184 | $2186;
 $2189 = $2185 | $2187;
 $2190 = $arrayidx3731;
 $2191 = $2190;
 HEAP32[$2191 >> 2] = $2188;
 $2192 = $2190 + 4 | 0;
 $2193 = $2192;
 HEAP32[$2193 >> 2] = $2189;
 $2194 = _i64Add($2188 | 0, $2189 | 0, $2158 | 0, $2159 | 0) | 0;
 $2195 = getTempRet0() | 0;
 $2196 = _bitshift64Shl($2158 | 0, $2159 | 0, 1) | 0;
 $2197 = getTempRet0() | 0;
 $2198 = $2196 & -2;
 $2199 = $2197 & 1;
 $2200 = ___muldi3($2184 | 0, 0, $2198 | 0, $2199 | 0) | 0;
 $2201 = getTempRet0() | 0;
 $2202 = _i64Add($2194 | 0, $2195 | 0, $2200 | 0, $2201 | 0) | 0;
 $2203 = getTempRet0() | 0;
 $2204 = $arrayidx3550;
 $2205 = $2204;
 HEAP32[$2205 >> 2] = $2202;
 $2206 = $2204 + 4 | 0;
 $2207 = $2206;
 HEAP32[$2207 >> 2] = $2203;
 $2208 = $2202 ^ $2166;
 $2209 = $2203 ^ $2167;
 $2210 = _bitshift64Lshr($2208 | 0, $2209 | 0, 63) | 0;
 $2211 = getTempRet0() | 0;
 $2212 = _bitshift64Shl($2208 | 0, $2209 | 0, 1) | 0;
 $2213 = getTempRet0() | 0;
 $2214 = $2210 | $2212;
 $2215 = $2211 | $2213;
 $2216 = $arrayidx3297;
 $2217 = $2216;
 HEAP32[$2217 >> 2] = $2214;
 $2218 = $2216 + 4 | 0;
 $2219 = $2218;
 HEAP32[$2219 >> 2] = $2215;
 $add$ptr4942 = $blockR + 384 | 0;
 $2220 = $add$ptr4942;
 $2221 = $2220;
 $2222 = HEAP32[$2221 >> 2] | 0;
 $2223 = $2220 + 4 | 0;
 $2224 = $2223;
 $2225 = HEAP32[$2224 >> 2] | 0;
 $arrayidx4947 = $blockR + 416 | 0;
 $2226 = $arrayidx4947;
 $2227 = $2226;
 $2228 = HEAP32[$2227 >> 2] | 0;
 $2229 = $2226 + 4 | 0;
 $2230 = $2229;
 $2231 = HEAP32[$2230 >> 2] | 0;
 $2232 = _i64Add($2228 | 0, $2231 | 0, $2222 | 0, $2225 | 0) | 0;
 $2233 = getTempRet0() | 0;
 $2234 = _bitshift64Shl($2222 | 0, $2225 | 0, 1) | 0;
 $2235 = getTempRet0() | 0;
 $2236 = $2234 & -2;
 $2237 = $2235 & 1;
 $2238 = ___muldi3($2236 | 0, $2237 | 0, $2228 | 0, 0) | 0;
 $2239 = getTempRet0() | 0;
 $2240 = _i64Add($2232 | 0, $2233 | 0, $2238 | 0, $2239 | 0) | 0;
 $2241 = getTempRet0() | 0;
 $arrayidx4969 = $blockR + 480 | 0;
 $2242 = $arrayidx4969;
 $2243 = $2242;
 $2244 = HEAP32[$2243 >> 2] | 0;
 $2245 = $2242 + 4 | 0;
 $2246 = $2245;
 $2247 = HEAP32[$2246 >> 2] | 0;
 $2248 = $2240 ^ $2244;
 $2249 = $2241 ^ $2247;
 $arrayidx4994 = $blockR + 448 | 0;
 $2250 = $arrayidx4994;
 $2251 = $2250;
 $2252 = HEAP32[$2251 >> 2] | 0;
 $2253 = $2250 + 4 | 0;
 $2254 = $2253;
 $2255 = HEAP32[$2254 >> 2] | 0;
 $2256 = _i64Add($2249 | 0, $2248 | 0, $2252 | 0, $2255 | 0) | 0;
 $2257 = getTempRet0() | 0;
 $2258 = _bitshift64Shl($2252 | 0, $2255 | 0, 1) | 0;
 $2259 = getTempRet0() | 0;
 $2260 = $2258 & -2;
 $2261 = $2259 & 1;
 $2262 = ___muldi3($2260 | 0, $2261 | 0, $2249 | 0, 0) | 0;
 $2263 = getTempRet0() | 0;
 $2264 = _i64Add($2256 | 0, $2257 | 0, $2262 | 0, $2263 | 0) | 0;
 $2265 = getTempRet0() | 0;
 $2266 = $2264 ^ $2228;
 $2267 = $2265 ^ $2231;
 $2268 = _bitshift64Lshr($2266 | 0, $2267 | 0, 24) | 0;
 $2269 = getTempRet0() | 0;
 $2270 = _bitshift64Shl($2266 | 0, $2267 | 0, 40) | 0;
 $2271 = getTempRet0() | 0;
 $2272 = $2268 | $2270;
 $2273 = $2269 | $2271;
 $2274 = _i64Add($2272 | 0, $2273 | 0, $2240 | 0, $2241 | 0) | 0;
 $2275 = getTempRet0() | 0;
 $2276 = _bitshift64Shl($2240 | 0, $2241 | 0, 1) | 0;
 $2277 = getTempRet0() | 0;
 $2278 = $2276 & -2;
 $2279 = $2277 & 1;
 $2280 = ___muldi3($2268 | 0, 0, $2278 | 0, $2279 | 0) | 0;
 $2281 = getTempRet0() | 0;
 $2282 = _i64Add($2274 | 0, $2275 | 0, $2280 | 0, $2281 | 0) | 0;
 $2283 = getTempRet0() | 0;
 $2284 = $add$ptr4942;
 $2285 = $2284;
 HEAP32[$2285 >> 2] = $2282;
 $2286 = $2284 + 4 | 0;
 $2287 = $2286;
 HEAP32[$2287 >> 2] = $2283;
 $2288 = $2282 ^ $2249;
 $2289 = $2283 ^ $2248;
 $2290 = _bitshift64Lshr($2288 | 0, $2289 | 0, 16) | 0;
 $2291 = getTempRet0() | 0;
 $2292 = _bitshift64Shl($2288 | 0, $2289 | 0, 48) | 0;
 $2293 = getTempRet0() | 0;
 $2294 = $2290 | $2292;
 $2295 = $2291 | $2293;
 $2296 = $arrayidx4969;
 $2297 = $2296;
 HEAP32[$2297 >> 2] = $2294;
 $2298 = $2296 + 4 | 0;
 $2299 = $2298;
 HEAP32[$2299 >> 2] = $2295;
 $2300 = _i64Add($2294 | 0, $2295 | 0, $2264 | 0, $2265 | 0) | 0;
 $2301 = getTempRet0() | 0;
 $2302 = _bitshift64Shl($2264 | 0, $2265 | 0, 1) | 0;
 $2303 = getTempRet0() | 0;
 $2304 = $2302 & -2;
 $2305 = $2303 & 1;
 $2306 = ___muldi3($2290 | 0, 0, $2304 | 0, $2305 | 0) | 0;
 $2307 = getTempRet0() | 0;
 $2308 = _i64Add($2300 | 0, $2301 | 0, $2306 | 0, $2307 | 0) | 0;
 $2309 = getTempRet0() | 0;
 $2310 = $arrayidx4994;
 $2311 = $2310;
 HEAP32[$2311 >> 2] = $2308;
 $2312 = $2310 + 4 | 0;
 $2313 = $2312;
 HEAP32[$2313 >> 2] = $2309;
 $2314 = $2308 ^ $2272;
 $2315 = $2309 ^ $2273;
 $2316 = _bitshift64Lshr($2314 | 0, $2315 | 0, 63) | 0;
 $2317 = getTempRet0() | 0;
 $2318 = _bitshift64Shl($2314 | 0, $2315 | 0, 1) | 0;
 $2319 = getTempRet0() | 0;
 $2320 = $2316 | $2318;
 $2321 = $2317 | $2319;
 $2322 = $arrayidx4947;
 $2323 = $2322;
 HEAP32[$2323 >> 2] = $2320;
 $2324 = $2322 + 4 | 0;
 $2325 = $2324;
 HEAP32[$2325 >> 2] = $2321;
 $arrayidx5149 = $blockR + 392 | 0;
 $2326 = $arrayidx5149;
 $2327 = $2326;
 $2328 = HEAP32[$2327 >> 2] | 0;
 $2329 = $2326 + 4 | 0;
 $2330 = $2329;
 $2331 = HEAP32[$2330 >> 2] | 0;
 $arrayidx5153 = $blockR + 424 | 0;
 $2332 = $arrayidx5153;
 $2333 = $2332;
 $2334 = HEAP32[$2333 >> 2] | 0;
 $2335 = $2332 + 4 | 0;
 $2336 = $2335;
 $2337 = HEAP32[$2336 >> 2] | 0;
 $2338 = _i64Add($2334 | 0, $2337 | 0, $2328 | 0, $2331 | 0) | 0;
 $2339 = getTempRet0() | 0;
 $2340 = _bitshift64Shl($2328 | 0, $2331 | 0, 1) | 0;
 $2341 = getTempRet0() | 0;
 $2342 = $2340 & -2;
 $2343 = $2341 & 1;
 $2344 = ___muldi3($2342 | 0, $2343 | 0, $2334 | 0, 0) | 0;
 $2345 = getTempRet0() | 0;
 $2346 = _i64Add($2338 | 0, $2339 | 0, $2344 | 0, $2345 | 0) | 0;
 $2347 = getTempRet0() | 0;
 $arrayidx5175 = $blockR + 488 | 0;
 $2348 = $arrayidx5175;
 $2349 = $2348;
 $2350 = HEAP32[$2349 >> 2] | 0;
 $2351 = $2348 + 4 | 0;
 $2352 = $2351;
 $2353 = HEAP32[$2352 >> 2] | 0;
 $2354 = $2346 ^ $2350;
 $2355 = $2347 ^ $2353;
 $arrayidx5200 = $blockR + 456 | 0;
 $2356 = $arrayidx5200;
 $2357 = $2356;
 $2358 = HEAP32[$2357 >> 2] | 0;
 $2359 = $2356 + 4 | 0;
 $2360 = $2359;
 $2361 = HEAP32[$2360 >> 2] | 0;
 $2362 = _i64Add($2355 | 0, $2354 | 0, $2358 | 0, $2361 | 0) | 0;
 $2363 = getTempRet0() | 0;
 $2364 = _bitshift64Shl($2358 | 0, $2361 | 0, 1) | 0;
 $2365 = getTempRet0() | 0;
 $2366 = $2364 & -2;
 $2367 = $2365 & 1;
 $2368 = ___muldi3($2366 | 0, $2367 | 0, $2355 | 0, 0) | 0;
 $2369 = getTempRet0() | 0;
 $2370 = _i64Add($2362 | 0, $2363 | 0, $2368 | 0, $2369 | 0) | 0;
 $2371 = getTempRet0() | 0;
 $2372 = $2370 ^ $2334;
 $2373 = $2371 ^ $2337;
 $2374 = _bitshift64Lshr($2372 | 0, $2373 | 0, 24) | 0;
 $2375 = getTempRet0() | 0;
 $2376 = _bitshift64Shl($2372 | 0, $2373 | 0, 40) | 0;
 $2377 = getTempRet0() | 0;
 $2378 = $2374 | $2376;
 $2379 = $2375 | $2377;
 $2380 = _i64Add($2378 | 0, $2379 | 0, $2346 | 0, $2347 | 0) | 0;
 $2381 = getTempRet0() | 0;
 $2382 = _bitshift64Shl($2346 | 0, $2347 | 0, 1) | 0;
 $2383 = getTempRet0() | 0;
 $2384 = $2382 & -2;
 $2385 = $2383 & 1;
 $2386 = ___muldi3($2374 | 0, 0, $2384 | 0, $2385 | 0) | 0;
 $2387 = getTempRet0() | 0;
 $2388 = _i64Add($2380 | 0, $2381 | 0, $2386 | 0, $2387 | 0) | 0;
 $2389 = getTempRet0() | 0;
 $2390 = $arrayidx5149;
 $2391 = $2390;
 HEAP32[$2391 >> 2] = $2388;
 $2392 = $2390 + 4 | 0;
 $2393 = $2392;
 HEAP32[$2393 >> 2] = $2389;
 $2394 = $2388 ^ $2355;
 $2395 = $2389 ^ $2354;
 $2396 = _bitshift64Lshr($2394 | 0, $2395 | 0, 16) | 0;
 $2397 = getTempRet0() | 0;
 $2398 = _bitshift64Shl($2394 | 0, $2395 | 0, 48) | 0;
 $2399 = getTempRet0() | 0;
 $2400 = $2396 | $2398;
 $2401 = $2397 | $2399;
 $2402 = $arrayidx5175;
 $2403 = $2402;
 HEAP32[$2403 >> 2] = $2400;
 $2404 = $2402 + 4 | 0;
 $2405 = $2404;
 HEAP32[$2405 >> 2] = $2401;
 $2406 = _i64Add($2400 | 0, $2401 | 0, $2370 | 0, $2371 | 0) | 0;
 $2407 = getTempRet0() | 0;
 $2408 = _bitshift64Shl($2370 | 0, $2371 | 0, 1) | 0;
 $2409 = getTempRet0() | 0;
 $2410 = $2408 & -2;
 $2411 = $2409 & 1;
 $2412 = ___muldi3($2396 | 0, 0, $2410 | 0, $2411 | 0) | 0;
 $2413 = getTempRet0() | 0;
 $2414 = _i64Add($2406 | 0, $2407 | 0, $2412 | 0, $2413 | 0) | 0;
 $2415 = getTempRet0() | 0;
 $2416 = $arrayidx5200;
 $2417 = $2416;
 HEAP32[$2417 >> 2] = $2414;
 $2418 = $2416 + 4 | 0;
 $2419 = $2418;
 HEAP32[$2419 >> 2] = $2415;
 $2420 = $2414 ^ $2378;
 $2421 = $2415 ^ $2379;
 $2422 = _bitshift64Lshr($2420 | 0, $2421 | 0, 63) | 0;
 $2423 = getTempRet0() | 0;
 $2424 = _bitshift64Shl($2420 | 0, $2421 | 0, 1) | 0;
 $2425 = getTempRet0() | 0;
 $2426 = $2422 | $2424;
 $2427 = $2423 | $2425;
 $2428 = $arrayidx5153;
 $2429 = $2428;
 HEAP32[$2429 >> 2] = $2426;
 $2430 = $2428 + 4 | 0;
 $2431 = $2430;
 HEAP32[$2431 >> 2] = $2427;
 $arrayidx5355 = $blockR + 400 | 0;
 $2432 = $arrayidx5355;
 $2433 = $2432;
 $2434 = HEAP32[$2433 >> 2] | 0;
 $2435 = $2432 + 4 | 0;
 $2436 = $2435;
 $2437 = HEAP32[$2436 >> 2] | 0;
 $arrayidx5359 = $blockR + 432 | 0;
 $2438 = $arrayidx5359;
 $2439 = $2438;
 $2440 = HEAP32[$2439 >> 2] | 0;
 $2441 = $2438 + 4 | 0;
 $2442 = $2441;
 $2443 = HEAP32[$2442 >> 2] | 0;
 $2444 = _i64Add($2440 | 0, $2443 | 0, $2434 | 0, $2437 | 0) | 0;
 $2445 = getTempRet0() | 0;
 $2446 = _bitshift64Shl($2434 | 0, $2437 | 0, 1) | 0;
 $2447 = getTempRet0() | 0;
 $2448 = $2446 & -2;
 $2449 = $2447 & 1;
 $2450 = ___muldi3($2448 | 0, $2449 | 0, $2440 | 0, 0) | 0;
 $2451 = getTempRet0() | 0;
 $2452 = _i64Add($2444 | 0, $2445 | 0, $2450 | 0, $2451 | 0) | 0;
 $2453 = getTempRet0() | 0;
 $arrayidx5381 = $blockR + 496 | 0;
 $2454 = $arrayidx5381;
 $2455 = $2454;
 $2456 = HEAP32[$2455 >> 2] | 0;
 $2457 = $2454 + 4 | 0;
 $2458 = $2457;
 $2459 = HEAP32[$2458 >> 2] | 0;
 $2460 = $2452 ^ $2456;
 $2461 = $2453 ^ $2459;
 $arrayidx5406 = $blockR + 464 | 0;
 $2462 = $arrayidx5406;
 $2463 = $2462;
 $2464 = HEAP32[$2463 >> 2] | 0;
 $2465 = $2462 + 4 | 0;
 $2466 = $2465;
 $2467 = HEAP32[$2466 >> 2] | 0;
 $2468 = _i64Add($2461 | 0, $2460 | 0, $2464 | 0, $2467 | 0) | 0;
 $2469 = getTempRet0() | 0;
 $2470 = _bitshift64Shl($2464 | 0, $2467 | 0, 1) | 0;
 $2471 = getTempRet0() | 0;
 $2472 = $2470 & -2;
 $2473 = $2471 & 1;
 $2474 = ___muldi3($2472 | 0, $2473 | 0, $2461 | 0, 0) | 0;
 $2475 = getTempRet0() | 0;
 $2476 = _i64Add($2468 | 0, $2469 | 0, $2474 | 0, $2475 | 0) | 0;
 $2477 = getTempRet0() | 0;
 $2478 = $2476 ^ $2440;
 $2479 = $2477 ^ $2443;
 $2480 = _bitshift64Lshr($2478 | 0, $2479 | 0, 24) | 0;
 $2481 = getTempRet0() | 0;
 $2482 = _bitshift64Shl($2478 | 0, $2479 | 0, 40) | 0;
 $2483 = getTempRet0() | 0;
 $2484 = $2480 | $2482;
 $2485 = $2481 | $2483;
 $2486 = _i64Add($2484 | 0, $2485 | 0, $2452 | 0, $2453 | 0) | 0;
 $2487 = getTempRet0() | 0;
 $2488 = _bitshift64Shl($2452 | 0, $2453 | 0, 1) | 0;
 $2489 = getTempRet0() | 0;
 $2490 = $2488 & -2;
 $2491 = $2489 & 1;
 $2492 = ___muldi3($2480 | 0, 0, $2490 | 0, $2491 | 0) | 0;
 $2493 = getTempRet0() | 0;
 $2494 = _i64Add($2486 | 0, $2487 | 0, $2492 | 0, $2493 | 0) | 0;
 $2495 = getTempRet0() | 0;
 $2496 = $arrayidx5355;
 $2497 = $2496;
 HEAP32[$2497 >> 2] = $2494;
 $2498 = $2496 + 4 | 0;
 $2499 = $2498;
 HEAP32[$2499 >> 2] = $2495;
 $2500 = $2494 ^ $2461;
 $2501 = $2495 ^ $2460;
 $2502 = _bitshift64Lshr($2500 | 0, $2501 | 0, 16) | 0;
 $2503 = getTempRet0() | 0;
 $2504 = _bitshift64Shl($2500 | 0, $2501 | 0, 48) | 0;
 $2505 = getTempRet0() | 0;
 $2506 = $2502 | $2504;
 $2507 = $2503 | $2505;
 $2508 = $arrayidx5381;
 $2509 = $2508;
 HEAP32[$2509 >> 2] = $2506;
 $2510 = $2508 + 4 | 0;
 $2511 = $2510;
 HEAP32[$2511 >> 2] = $2507;
 $2512 = _i64Add($2506 | 0, $2507 | 0, $2476 | 0, $2477 | 0) | 0;
 $2513 = getTempRet0() | 0;
 $2514 = _bitshift64Shl($2476 | 0, $2477 | 0, 1) | 0;
 $2515 = getTempRet0() | 0;
 $2516 = $2514 & -2;
 $2517 = $2515 & 1;
 $2518 = ___muldi3($2502 | 0, 0, $2516 | 0, $2517 | 0) | 0;
 $2519 = getTempRet0() | 0;
 $2520 = _i64Add($2512 | 0, $2513 | 0, $2518 | 0, $2519 | 0) | 0;
 $2521 = getTempRet0() | 0;
 $2522 = $2520 ^ $2484;
 $2523 = $2521 ^ $2485;
 $2524 = _bitshift64Lshr($2522 | 0, $2523 | 0, 63) | 0;
 $2525 = getTempRet0() | 0;
 $2526 = _bitshift64Shl($2522 | 0, $2523 | 0, 1) | 0;
 $2527 = getTempRet0() | 0;
 $2528 = $2524 | $2526;
 $2529 = $2525 | $2527;
 $2530 = $arrayidx5359;
 $2531 = $2530;
 HEAP32[$2531 >> 2] = $2528;
 $2532 = $2530 + 4 | 0;
 $2533 = $2532;
 HEAP32[$2533 >> 2] = $2529;
 $arrayidx5561 = $blockR + 408 | 0;
 $2534 = $arrayidx5561;
 $2535 = $2534;
 $2536 = HEAP32[$2535 >> 2] | 0;
 $2537 = $2534 + 4 | 0;
 $2538 = $2537;
 $2539 = HEAP32[$2538 >> 2] | 0;
 $arrayidx5565 = $blockR + 440 | 0;
 $2540 = $arrayidx5565;
 $2541 = $2540;
 $2542 = HEAP32[$2541 >> 2] | 0;
 $2543 = $2540 + 4 | 0;
 $2544 = $2543;
 $2545 = HEAP32[$2544 >> 2] | 0;
 $2546 = _i64Add($2542 | 0, $2545 | 0, $2536 | 0, $2539 | 0) | 0;
 $2547 = getTempRet0() | 0;
 $2548 = _bitshift64Shl($2536 | 0, $2539 | 0, 1) | 0;
 $2549 = getTempRet0() | 0;
 $2550 = $2548 & -2;
 $2551 = $2549 & 1;
 $2552 = ___muldi3($2550 | 0, $2551 | 0, $2542 | 0, 0) | 0;
 $2553 = getTempRet0() | 0;
 $2554 = _i64Add($2546 | 0, $2547 | 0, $2552 | 0, $2553 | 0) | 0;
 $2555 = getTempRet0() | 0;
 $arrayidx5587 = $blockR + 504 | 0;
 $2556 = $arrayidx5587;
 $2557 = $2556;
 $2558 = HEAP32[$2557 >> 2] | 0;
 $2559 = $2556 + 4 | 0;
 $2560 = $2559;
 $2561 = HEAP32[$2560 >> 2] | 0;
 $2562 = $2554 ^ $2558;
 $2563 = $2555 ^ $2561;
 $arrayidx5612 = $blockR + 472 | 0;
 $2564 = $arrayidx5612;
 $2565 = $2564;
 $2566 = HEAP32[$2565 >> 2] | 0;
 $2567 = $2564 + 4 | 0;
 $2568 = $2567;
 $2569 = HEAP32[$2568 >> 2] | 0;
 $2570 = _i64Add($2563 | 0, $2562 | 0, $2566 | 0, $2569 | 0) | 0;
 $2571 = getTempRet0() | 0;
 $2572 = _bitshift64Shl($2566 | 0, $2569 | 0, 1) | 0;
 $2573 = getTempRet0() | 0;
 $2574 = $2572 & -2;
 $2575 = $2573 & 1;
 $2576 = ___muldi3($2574 | 0, $2575 | 0, $2563 | 0, 0) | 0;
 $2577 = getTempRet0() | 0;
 $2578 = _i64Add($2570 | 0, $2571 | 0, $2576 | 0, $2577 | 0) | 0;
 $2579 = getTempRet0() | 0;
 $2580 = $2578 ^ $2542;
 $2581 = $2579 ^ $2545;
 $2582 = _bitshift64Lshr($2580 | 0, $2581 | 0, 24) | 0;
 $2583 = getTempRet0() | 0;
 $2584 = _bitshift64Shl($2580 | 0, $2581 | 0, 40) | 0;
 $2585 = getTempRet0() | 0;
 $2586 = $2582 | $2584;
 $2587 = $2583 | $2585;
 $2588 = _i64Add($2586 | 0, $2587 | 0, $2554 | 0, $2555 | 0) | 0;
 $2589 = getTempRet0() | 0;
 $2590 = _bitshift64Shl($2554 | 0, $2555 | 0, 1) | 0;
 $2591 = getTempRet0() | 0;
 $2592 = $2590 & -2;
 $2593 = $2591 & 1;
 $2594 = ___muldi3($2582 | 0, 0, $2592 | 0, $2593 | 0) | 0;
 $2595 = getTempRet0() | 0;
 $2596 = _i64Add($2588 | 0, $2589 | 0, $2594 | 0, $2595 | 0) | 0;
 $2597 = getTempRet0() | 0;
 $2598 = $arrayidx5561;
 $2599 = $2598;
 HEAP32[$2599 >> 2] = $2596;
 $2600 = $2598 + 4 | 0;
 $2601 = $2600;
 HEAP32[$2601 >> 2] = $2597;
 $2602 = $2596 ^ $2563;
 $2603 = $2597 ^ $2562;
 $2604 = _bitshift64Lshr($2602 | 0, $2603 | 0, 16) | 0;
 $2605 = getTempRet0() | 0;
 $2606 = _bitshift64Shl($2602 | 0, $2603 | 0, 48) | 0;
 $2607 = getTempRet0() | 0;
 $2608 = $2604 | $2606;
 $2609 = $2605 | $2607;
 $2610 = _i64Add($2608 | 0, $2609 | 0, $2578 | 0, $2579 | 0) | 0;
 $2611 = getTempRet0() | 0;
 $2612 = _bitshift64Shl($2578 | 0, $2579 | 0, 1) | 0;
 $2613 = getTempRet0() | 0;
 $2614 = $2612 & -2;
 $2615 = $2613 & 1;
 $2616 = ___muldi3($2604 | 0, 0, $2614 | 0, $2615 | 0) | 0;
 $2617 = getTempRet0() | 0;
 $2618 = _i64Add($2610 | 0, $2611 | 0, $2616 | 0, $2617 | 0) | 0;
 $2619 = getTempRet0() | 0;
 $2620 = $2618 ^ $2586;
 $2621 = $2619 ^ $2587;
 $2622 = _bitshift64Lshr($2620 | 0, $2621 | 0, 63) | 0;
 $2623 = getTempRet0() | 0;
 $2624 = _bitshift64Shl($2620 | 0, $2621 | 0, 1) | 0;
 $2625 = getTempRet0() | 0;
 $2626 = $2622 | $2624;
 $2627 = $2623 | $2625;
 $2628 = $arrayidx5565;
 $2629 = $2628;
 HEAP32[$2629 >> 2] = $2626;
 $2630 = $2628 + 4 | 0;
 $2631 = $2630;
 HEAP32[$2631 >> 2] = $2627;
 $2632 = _i64Add($2426 | 0, $2427 | 0, $2282 | 0, $2283 | 0) | 0;
 $2633 = getTempRet0() | 0;
 $2634 = _bitshift64Shl($2282 | 0, $2283 | 0, 1) | 0;
 $2635 = getTempRet0() | 0;
 $2636 = $2634 & -2;
 $2637 = $2635 & 1;
 $2638 = ___muldi3($2426 | 0, 0, $2636 | 0, $2637 | 0) | 0;
 $2639 = getTempRet0() | 0;
 $2640 = _i64Add($2632 | 0, $2633 | 0, $2638 | 0, $2639 | 0) | 0;
 $2641 = getTempRet0() | 0;
 $2642 = $2608 ^ $2640;
 $2643 = $2609 ^ $2641;
 $2644 = _i64Add($2643 | 0, $2642 | 0, $2520 | 0, $2521 | 0) | 0;
 $2645 = getTempRet0() | 0;
 $2646 = _bitshift64Shl($2520 | 0, $2521 | 0, 1) | 0;
 $2647 = getTempRet0() | 0;
 $2648 = $2646 & -2;
 $2649 = $2647 & 1;
 $2650 = ___muldi3($2643 | 0, 0, $2648 | 0, $2649 | 0) | 0;
 $2651 = getTempRet0() | 0;
 $2652 = _i64Add($2644 | 0, $2645 | 0, $2650 | 0, $2651 | 0) | 0;
 $2653 = getTempRet0() | 0;
 $2654 = $2652 ^ $2426;
 $2655 = $2653 ^ $2427;
 $2656 = _bitshift64Lshr($2654 | 0, $2655 | 0, 24) | 0;
 $2657 = getTempRet0() | 0;
 $2658 = _bitshift64Shl($2654 | 0, $2655 | 0, 40) | 0;
 $2659 = getTempRet0() | 0;
 $2660 = $2656 | $2658;
 $2661 = $2657 | $2659;
 $2662 = _i64Add($2660 | 0, $2661 | 0, $2640 | 0, $2641 | 0) | 0;
 $2663 = getTempRet0() | 0;
 $2664 = _bitshift64Shl($2640 | 0, $2641 | 0, 1) | 0;
 $2665 = getTempRet0() | 0;
 $2666 = $2664 & -2;
 $2667 = $2665 & 1;
 $2668 = ___muldi3($2656 | 0, 0, $2666 | 0, $2667 | 0) | 0;
 $2669 = getTempRet0() | 0;
 $2670 = _i64Add($2662 | 0, $2663 | 0, $2668 | 0, $2669 | 0) | 0;
 $2671 = getTempRet0() | 0;
 $2672 = $add$ptr4942;
 $2673 = $2672;
 HEAP32[$2673 >> 2] = $2670;
 $2674 = $2672 + 4 | 0;
 $2675 = $2674;
 HEAP32[$2675 >> 2] = $2671;
 $2676 = $2670 ^ $2643;
 $2677 = $2671 ^ $2642;
 $2678 = _bitshift64Lshr($2676 | 0, $2677 | 0, 16) | 0;
 $2679 = getTempRet0() | 0;
 $2680 = _bitshift64Shl($2676 | 0, $2677 | 0, 48) | 0;
 $2681 = getTempRet0() | 0;
 $2682 = $2678 | $2680;
 $2683 = $2679 | $2681;
 $2684 = $arrayidx5587;
 $2685 = $2684;
 HEAP32[$2685 >> 2] = $2682;
 $2686 = $2684 + 4 | 0;
 $2687 = $2686;
 HEAP32[$2687 >> 2] = $2683;
 $2688 = _i64Add($2682 | 0, $2683 | 0, $2652 | 0, $2653 | 0) | 0;
 $2689 = getTempRet0() | 0;
 $2690 = _bitshift64Shl($2652 | 0, $2653 | 0, 1) | 0;
 $2691 = getTempRet0() | 0;
 $2692 = $2690 & -2;
 $2693 = $2691 & 1;
 $2694 = ___muldi3($2678 | 0, 0, $2692 | 0, $2693 | 0) | 0;
 $2695 = getTempRet0() | 0;
 $2696 = _i64Add($2688 | 0, $2689 | 0, $2694 | 0, $2695 | 0) | 0;
 $2697 = getTempRet0() | 0;
 $2698 = $arrayidx5406;
 $2699 = $2698;
 HEAP32[$2699 >> 2] = $2696;
 $2700 = $2698 + 4 | 0;
 $2701 = $2700;
 HEAP32[$2701 >> 2] = $2697;
 $2702 = $2696 ^ $2660;
 $2703 = $2697 ^ $2661;
 $2704 = _bitshift64Lshr($2702 | 0, $2703 | 0, 63) | 0;
 $2705 = getTempRet0() | 0;
 $2706 = _bitshift64Shl($2702 | 0, $2703 | 0, 1) | 0;
 $2707 = getTempRet0() | 0;
 $2708 = $2704 | $2706;
 $2709 = $2705 | $2707;
 $2710 = $arrayidx5153;
 $2711 = $2710;
 HEAP32[$2711 >> 2] = $2708;
 $2712 = $2710 + 4 | 0;
 $2713 = $2712;
 HEAP32[$2713 >> 2] = $2709;
 $2714 = _i64Add($2528 | 0, $2529 | 0, $2388 | 0, $2389 | 0) | 0;
 $2715 = getTempRet0() | 0;
 $2716 = _bitshift64Shl($2388 | 0, $2389 | 0, 1) | 0;
 $2717 = getTempRet0() | 0;
 $2718 = $2716 & -2;
 $2719 = $2717 & 1;
 $2720 = ___muldi3($2528 | 0, 0, $2718 | 0, $2719 | 0) | 0;
 $2721 = getTempRet0() | 0;
 $2722 = _i64Add($2714 | 0, $2715 | 0, $2720 | 0, $2721 | 0) | 0;
 $2723 = getTempRet0() | 0;
 $2724 = $2722 ^ $2294;
 $2725 = $2723 ^ $2295;
 $2726 = _i64Add($2618 | 0, $2619 | 0, $2725 | 0, $2724 | 0) | 0;
 $2727 = getTempRet0() | 0;
 $2728 = _bitshift64Shl($2618 | 0, $2619 | 0, 1) | 0;
 $2729 = getTempRet0() | 0;
 $2730 = $2728 & -2;
 $2731 = $2729 & 1;
 $2732 = ___muldi3($2730 | 0, $2731 | 0, $2725 | 0, 0) | 0;
 $2733 = getTempRet0() | 0;
 $2734 = _i64Add($2726 | 0, $2727 | 0, $2732 | 0, $2733 | 0) | 0;
 $2735 = getTempRet0() | 0;
 $2736 = $2734 ^ $2528;
 $2737 = $2735 ^ $2529;
 $2738 = _bitshift64Lshr($2736 | 0, $2737 | 0, 24) | 0;
 $2739 = getTempRet0() | 0;
 $2740 = _bitshift64Shl($2736 | 0, $2737 | 0, 40) | 0;
 $2741 = getTempRet0() | 0;
 $2742 = $2738 | $2740;
 $2743 = $2739 | $2741;
 $2744 = _i64Add($2742 | 0, $2743 | 0, $2722 | 0, $2723 | 0) | 0;
 $2745 = getTempRet0() | 0;
 $2746 = _bitshift64Shl($2722 | 0, $2723 | 0, 1) | 0;
 $2747 = getTempRet0() | 0;
 $2748 = $2746 & -2;
 $2749 = $2747 & 1;
 $2750 = ___muldi3($2738 | 0, 0, $2748 | 0, $2749 | 0) | 0;
 $2751 = getTempRet0() | 0;
 $2752 = _i64Add($2744 | 0, $2745 | 0, $2750 | 0, $2751 | 0) | 0;
 $2753 = getTempRet0() | 0;
 $2754 = $arrayidx5149;
 $2755 = $2754;
 HEAP32[$2755 >> 2] = $2752;
 $2756 = $2754 + 4 | 0;
 $2757 = $2756;
 HEAP32[$2757 >> 2] = $2753;
 $2758 = $2752 ^ $2725;
 $2759 = $2753 ^ $2724;
 $2760 = _bitshift64Lshr($2758 | 0, $2759 | 0, 16) | 0;
 $2761 = getTempRet0() | 0;
 $2762 = _bitshift64Shl($2758 | 0, $2759 | 0, 48) | 0;
 $2763 = getTempRet0() | 0;
 $2764 = $2760 | $2762;
 $2765 = $2761 | $2763;
 $2766 = $arrayidx4969;
 $2767 = $2766;
 HEAP32[$2767 >> 2] = $2764;
 $2768 = $2766 + 4 | 0;
 $2769 = $2768;
 HEAP32[$2769 >> 2] = $2765;
 $2770 = _i64Add($2764 | 0, $2765 | 0, $2734 | 0, $2735 | 0) | 0;
 $2771 = getTempRet0() | 0;
 $2772 = _bitshift64Shl($2734 | 0, $2735 | 0, 1) | 0;
 $2773 = getTempRet0() | 0;
 $2774 = $2772 & -2;
 $2775 = $2773 & 1;
 $2776 = ___muldi3($2760 | 0, 0, $2774 | 0, $2775 | 0) | 0;
 $2777 = getTempRet0() | 0;
 $2778 = _i64Add($2770 | 0, $2771 | 0, $2776 | 0, $2777 | 0) | 0;
 $2779 = getTempRet0() | 0;
 $2780 = $arrayidx5612;
 $2781 = $2780;
 HEAP32[$2781 >> 2] = $2778;
 $2782 = $2780 + 4 | 0;
 $2783 = $2782;
 HEAP32[$2783 >> 2] = $2779;
 $2784 = $2778 ^ $2742;
 $2785 = $2779 ^ $2743;
 $2786 = _bitshift64Lshr($2784 | 0, $2785 | 0, 63) | 0;
 $2787 = getTempRet0() | 0;
 $2788 = _bitshift64Shl($2784 | 0, $2785 | 0, 1) | 0;
 $2789 = getTempRet0() | 0;
 $2790 = $2786 | $2788;
 $2791 = $2787 | $2789;
 $2792 = $arrayidx5359;
 $2793 = $2792;
 HEAP32[$2793 >> 2] = $2790;
 $2794 = $2792 + 4 | 0;
 $2795 = $2794;
 HEAP32[$2795 >> 2] = $2791;
 $2796 = _i64Add($2626 | 0, $2627 | 0, $2494 | 0, $2495 | 0) | 0;
 $2797 = getTempRet0() | 0;
 $2798 = _bitshift64Shl($2494 | 0, $2495 | 0, 1) | 0;
 $2799 = getTempRet0() | 0;
 $2800 = $2798 & -2;
 $2801 = $2799 & 1;
 $2802 = ___muldi3($2626 | 0, 0, $2800 | 0, $2801 | 0) | 0;
 $2803 = getTempRet0() | 0;
 $2804 = _i64Add($2796 | 0, $2797 | 0, $2802 | 0, $2803 | 0) | 0;
 $2805 = getTempRet0() | 0;
 $2806 = $2804 ^ $2400;
 $2807 = $2805 ^ $2401;
 $2808 = _i64Add($2807 | 0, $2806 | 0, $2308 | 0, $2309 | 0) | 0;
 $2809 = getTempRet0() | 0;
 $2810 = _bitshift64Shl($2308 | 0, $2309 | 0, 1) | 0;
 $2811 = getTempRet0() | 0;
 $2812 = $2810 & -2;
 $2813 = $2811 & 1;
 $2814 = ___muldi3($2807 | 0, 0, $2812 | 0, $2813 | 0) | 0;
 $2815 = getTempRet0() | 0;
 $2816 = _i64Add($2808 | 0, $2809 | 0, $2814 | 0, $2815 | 0) | 0;
 $2817 = getTempRet0() | 0;
 $2818 = $2816 ^ $2626;
 $2819 = $2817 ^ $2627;
 $2820 = _bitshift64Lshr($2818 | 0, $2819 | 0, 24) | 0;
 $2821 = getTempRet0() | 0;
 $2822 = _bitshift64Shl($2818 | 0, $2819 | 0, 40) | 0;
 $2823 = getTempRet0() | 0;
 $2824 = $2820 | $2822;
 $2825 = $2821 | $2823;
 $2826 = _i64Add($2824 | 0, $2825 | 0, $2804 | 0, $2805 | 0) | 0;
 $2827 = getTempRet0() | 0;
 $2828 = _bitshift64Shl($2804 | 0, $2805 | 0, 1) | 0;
 $2829 = getTempRet0() | 0;
 $2830 = $2828 & -2;
 $2831 = $2829 & 1;
 $2832 = ___muldi3($2820 | 0, 0, $2830 | 0, $2831 | 0) | 0;
 $2833 = getTempRet0() | 0;
 $2834 = _i64Add($2826 | 0, $2827 | 0, $2832 | 0, $2833 | 0) | 0;
 $2835 = getTempRet0() | 0;
 $2836 = $arrayidx5355;
 $2837 = $2836;
 HEAP32[$2837 >> 2] = $2834;
 $2838 = $2836 + 4 | 0;
 $2839 = $2838;
 HEAP32[$2839 >> 2] = $2835;
 $2840 = $2834 ^ $2807;
 $2841 = $2835 ^ $2806;
 $2842 = _bitshift64Lshr($2840 | 0, $2841 | 0, 16) | 0;
 $2843 = getTempRet0() | 0;
 $2844 = _bitshift64Shl($2840 | 0, $2841 | 0, 48) | 0;
 $2845 = getTempRet0() | 0;
 $2846 = $2842 | $2844;
 $2847 = $2843 | $2845;
 $2848 = $arrayidx5175;
 $2849 = $2848;
 HEAP32[$2849 >> 2] = $2846;
 $2850 = $2848 + 4 | 0;
 $2851 = $2850;
 HEAP32[$2851 >> 2] = $2847;
 $2852 = _i64Add($2846 | 0, $2847 | 0, $2816 | 0, $2817 | 0) | 0;
 $2853 = getTempRet0() | 0;
 $2854 = _bitshift64Shl($2816 | 0, $2817 | 0, 1) | 0;
 $2855 = getTempRet0() | 0;
 $2856 = $2854 & -2;
 $2857 = $2855 & 1;
 $2858 = ___muldi3($2842 | 0, 0, $2856 | 0, $2857 | 0) | 0;
 $2859 = getTempRet0() | 0;
 $2860 = _i64Add($2852 | 0, $2853 | 0, $2858 | 0, $2859 | 0) | 0;
 $2861 = getTempRet0() | 0;
 $2862 = $arrayidx4994;
 $2863 = $2862;
 HEAP32[$2863 >> 2] = $2860;
 $2864 = $2862 + 4 | 0;
 $2865 = $2864;
 HEAP32[$2865 >> 2] = $2861;
 $2866 = $2860 ^ $2824;
 $2867 = $2861 ^ $2825;
 $2868 = _bitshift64Lshr($2866 | 0, $2867 | 0, 63) | 0;
 $2869 = getTempRet0() | 0;
 $2870 = _bitshift64Shl($2866 | 0, $2867 | 0, 1) | 0;
 $2871 = getTempRet0() | 0;
 $2872 = $2868 | $2870;
 $2873 = $2869 | $2871;
 $2874 = $arrayidx5565;
 $2875 = $2874;
 HEAP32[$2875 >> 2] = $2872;
 $2876 = $2874 + 4 | 0;
 $2877 = $2876;
 HEAP32[$2877 >> 2] = $2873;
 $2878 = _i64Add($2596 | 0, $2597 | 0, $2320 | 0, $2321 | 0) | 0;
 $2879 = getTempRet0() | 0;
 $2880 = _bitshift64Shl($2596 | 0, $2597 | 0, 1) | 0;
 $2881 = getTempRet0() | 0;
 $2882 = $2880 & -2;
 $2883 = $2881 & 1;
 $2884 = ___muldi3($2882 | 0, $2883 | 0, $2320 | 0, 0) | 0;
 $2885 = getTempRet0() | 0;
 $2886 = _i64Add($2878 | 0, $2879 | 0, $2884 | 0, $2885 | 0) | 0;
 $2887 = getTempRet0() | 0;
 $2888 = $2886 ^ $2506;
 $2889 = $2887 ^ $2507;
 $2890 = _i64Add($2889 | 0, $2888 | 0, $2414 | 0, $2415 | 0) | 0;
 $2891 = getTempRet0() | 0;
 $2892 = _bitshift64Shl($2414 | 0, $2415 | 0, 1) | 0;
 $2893 = getTempRet0() | 0;
 $2894 = $2892 & -2;
 $2895 = $2893 & 1;
 $2896 = ___muldi3($2889 | 0, 0, $2894 | 0, $2895 | 0) | 0;
 $2897 = getTempRet0() | 0;
 $2898 = _i64Add($2890 | 0, $2891 | 0, $2896 | 0, $2897 | 0) | 0;
 $2899 = getTempRet0() | 0;
 $2900 = $2898 ^ $2320;
 $2901 = $2899 ^ $2321;
 $2902 = _bitshift64Lshr($2900 | 0, $2901 | 0, 24) | 0;
 $2903 = getTempRet0() | 0;
 $2904 = _bitshift64Shl($2900 | 0, $2901 | 0, 40) | 0;
 $2905 = getTempRet0() | 0;
 $2906 = $2902 | $2904;
 $2907 = $2903 | $2905;
 $2908 = _i64Add($2906 | 0, $2907 | 0, $2886 | 0, $2887 | 0) | 0;
 $2909 = getTempRet0() | 0;
 $2910 = _bitshift64Shl($2886 | 0, $2887 | 0, 1) | 0;
 $2911 = getTempRet0() | 0;
 $2912 = $2910 & -2;
 $2913 = $2911 & 1;
 $2914 = ___muldi3($2902 | 0, 0, $2912 | 0, $2913 | 0) | 0;
 $2915 = getTempRet0() | 0;
 $2916 = _i64Add($2908 | 0, $2909 | 0, $2914 | 0, $2915 | 0) | 0;
 $2917 = getTempRet0() | 0;
 $2918 = $arrayidx5561;
 $2919 = $2918;
 HEAP32[$2919 >> 2] = $2916;
 $2920 = $2918 + 4 | 0;
 $2921 = $2920;
 HEAP32[$2921 >> 2] = $2917;
 $2922 = $2916 ^ $2889;
 $2923 = $2917 ^ $2888;
 $2924 = _bitshift64Lshr($2922 | 0, $2923 | 0, 16) | 0;
 $2925 = getTempRet0() | 0;
 $2926 = _bitshift64Shl($2922 | 0, $2923 | 0, 48) | 0;
 $2927 = getTempRet0() | 0;
 $2928 = $2924 | $2926;
 $2929 = $2925 | $2927;
 $2930 = $arrayidx5381;
 $2931 = $2930;
 HEAP32[$2931 >> 2] = $2928;
 $2932 = $2930 + 4 | 0;
 $2933 = $2932;
 HEAP32[$2933 >> 2] = $2929;
 $2934 = _i64Add($2928 | 0, $2929 | 0, $2898 | 0, $2899 | 0) | 0;
 $2935 = getTempRet0() | 0;
 $2936 = _bitshift64Shl($2898 | 0, $2899 | 0, 1) | 0;
 $2937 = getTempRet0() | 0;
 $2938 = $2936 & -2;
 $2939 = $2937 & 1;
 $2940 = ___muldi3($2924 | 0, 0, $2938 | 0, $2939 | 0) | 0;
 $2941 = getTempRet0() | 0;
 $2942 = _i64Add($2934 | 0, $2935 | 0, $2940 | 0, $2941 | 0) | 0;
 $2943 = getTempRet0() | 0;
 $2944 = $arrayidx5200;
 $2945 = $2944;
 HEAP32[$2945 >> 2] = $2942;
 $2946 = $2944 + 4 | 0;
 $2947 = $2946;
 HEAP32[$2947 >> 2] = $2943;
 $2948 = $2942 ^ $2906;
 $2949 = $2943 ^ $2907;
 $2950 = _bitshift64Lshr($2948 | 0, $2949 | 0, 63) | 0;
 $2951 = getTempRet0() | 0;
 $2952 = _bitshift64Shl($2948 | 0, $2949 | 0, 1) | 0;
 $2953 = getTempRet0() | 0;
 $2954 = $2950 | $2952;
 $2955 = $2951 | $2953;
 $2956 = $arrayidx4947;
 $2957 = $2956;
 HEAP32[$2957 >> 2] = $2954;
 $2958 = $2956 + 4 | 0;
 $2959 = $2958;
 HEAP32[$2959 >> 2] = $2955;
 $add$ptr6592 = $blockR + 512 | 0;
 $2960 = $add$ptr6592;
 $2961 = $2960;
 $2962 = HEAP32[$2961 >> 2] | 0;
 $2963 = $2960 + 4 | 0;
 $2964 = $2963;
 $2965 = HEAP32[$2964 >> 2] | 0;
 $arrayidx6597 = $blockR + 544 | 0;
 $2966 = $arrayidx6597;
 $2967 = $2966;
 $2968 = HEAP32[$2967 >> 2] | 0;
 $2969 = $2966 + 4 | 0;
 $2970 = $2969;
 $2971 = HEAP32[$2970 >> 2] | 0;
 $2972 = _i64Add($2968 | 0, $2971 | 0, $2962 | 0, $2965 | 0) | 0;
 $2973 = getTempRet0() | 0;
 $2974 = _bitshift64Shl($2962 | 0, $2965 | 0, 1) | 0;
 $2975 = getTempRet0() | 0;
 $2976 = $2974 & -2;
 $2977 = $2975 & 1;
 $2978 = ___muldi3($2976 | 0, $2977 | 0, $2968 | 0, 0) | 0;
 $2979 = getTempRet0() | 0;
 $2980 = _i64Add($2972 | 0, $2973 | 0, $2978 | 0, $2979 | 0) | 0;
 $2981 = getTempRet0() | 0;
 $arrayidx6619 = $blockR + 608 | 0;
 $2982 = $arrayidx6619;
 $2983 = $2982;
 $2984 = HEAP32[$2983 >> 2] | 0;
 $2985 = $2982 + 4 | 0;
 $2986 = $2985;
 $2987 = HEAP32[$2986 >> 2] | 0;
 $2988 = $2980 ^ $2984;
 $2989 = $2981 ^ $2987;
 $arrayidx6644 = $blockR + 576 | 0;
 $2990 = $arrayidx6644;
 $2991 = $2990;
 $2992 = HEAP32[$2991 >> 2] | 0;
 $2993 = $2990 + 4 | 0;
 $2994 = $2993;
 $2995 = HEAP32[$2994 >> 2] | 0;
 $2996 = _i64Add($2989 | 0, $2988 | 0, $2992 | 0, $2995 | 0) | 0;
 $2997 = getTempRet0() | 0;
 $2998 = _bitshift64Shl($2992 | 0, $2995 | 0, 1) | 0;
 $2999 = getTempRet0() | 0;
 $3000 = $2998 & -2;
 $3001 = $2999 & 1;
 $3002 = ___muldi3($3000 | 0, $3001 | 0, $2989 | 0, 0) | 0;
 $3003 = getTempRet0() | 0;
 $3004 = _i64Add($2996 | 0, $2997 | 0, $3002 | 0, $3003 | 0) | 0;
 $3005 = getTempRet0() | 0;
 $3006 = $3004 ^ $2968;
 $3007 = $3005 ^ $2971;
 $3008 = _bitshift64Lshr($3006 | 0, $3007 | 0, 24) | 0;
 $3009 = getTempRet0() | 0;
 $3010 = _bitshift64Shl($3006 | 0, $3007 | 0, 40) | 0;
 $3011 = getTempRet0() | 0;
 $3012 = $3008 | $3010;
 $3013 = $3009 | $3011;
 $3014 = _i64Add($3012 | 0, $3013 | 0, $2980 | 0, $2981 | 0) | 0;
 $3015 = getTempRet0() | 0;
 $3016 = _bitshift64Shl($2980 | 0, $2981 | 0, 1) | 0;
 $3017 = getTempRet0() | 0;
 $3018 = $3016 & -2;
 $3019 = $3017 & 1;
 $3020 = ___muldi3($3008 | 0, 0, $3018 | 0, $3019 | 0) | 0;
 $3021 = getTempRet0() | 0;
 $3022 = _i64Add($3014 | 0, $3015 | 0, $3020 | 0, $3021 | 0) | 0;
 $3023 = getTempRet0() | 0;
 $3024 = $add$ptr6592;
 $3025 = $3024;
 HEAP32[$3025 >> 2] = $3022;
 $3026 = $3024 + 4 | 0;
 $3027 = $3026;
 HEAP32[$3027 >> 2] = $3023;
 $3028 = $3022 ^ $2989;
 $3029 = $3023 ^ $2988;
 $3030 = _bitshift64Lshr($3028 | 0, $3029 | 0, 16) | 0;
 $3031 = getTempRet0() | 0;
 $3032 = _bitshift64Shl($3028 | 0, $3029 | 0, 48) | 0;
 $3033 = getTempRet0() | 0;
 $3034 = $3030 | $3032;
 $3035 = $3031 | $3033;
 $3036 = $arrayidx6619;
 $3037 = $3036;
 HEAP32[$3037 >> 2] = $3034;
 $3038 = $3036 + 4 | 0;
 $3039 = $3038;
 HEAP32[$3039 >> 2] = $3035;
 $3040 = _i64Add($3034 | 0, $3035 | 0, $3004 | 0, $3005 | 0) | 0;
 $3041 = getTempRet0() | 0;
 $3042 = _bitshift64Shl($3004 | 0, $3005 | 0, 1) | 0;
 $3043 = getTempRet0() | 0;
 $3044 = $3042 & -2;
 $3045 = $3043 & 1;
 $3046 = ___muldi3($3030 | 0, 0, $3044 | 0, $3045 | 0) | 0;
 $3047 = getTempRet0() | 0;
 $3048 = _i64Add($3040 | 0, $3041 | 0, $3046 | 0, $3047 | 0) | 0;
 $3049 = getTempRet0() | 0;
 $3050 = $arrayidx6644;
 $3051 = $3050;
 HEAP32[$3051 >> 2] = $3048;
 $3052 = $3050 + 4 | 0;
 $3053 = $3052;
 HEAP32[$3053 >> 2] = $3049;
 $3054 = $3048 ^ $3012;
 $3055 = $3049 ^ $3013;
 $3056 = _bitshift64Lshr($3054 | 0, $3055 | 0, 63) | 0;
 $3057 = getTempRet0() | 0;
 $3058 = _bitshift64Shl($3054 | 0, $3055 | 0, 1) | 0;
 $3059 = getTempRet0() | 0;
 $3060 = $3056 | $3058;
 $3061 = $3057 | $3059;
 $3062 = $arrayidx6597;
 $3063 = $3062;
 HEAP32[$3063 >> 2] = $3060;
 $3064 = $3062 + 4 | 0;
 $3065 = $3064;
 HEAP32[$3065 >> 2] = $3061;
 $arrayidx6799 = $blockR + 520 | 0;
 $3066 = $arrayidx6799;
 $3067 = $3066;
 $3068 = HEAP32[$3067 >> 2] | 0;
 $3069 = $3066 + 4 | 0;
 $3070 = $3069;
 $3071 = HEAP32[$3070 >> 2] | 0;
 $arrayidx6803 = $blockR + 552 | 0;
 $3072 = $arrayidx6803;
 $3073 = $3072;
 $3074 = HEAP32[$3073 >> 2] | 0;
 $3075 = $3072 + 4 | 0;
 $3076 = $3075;
 $3077 = HEAP32[$3076 >> 2] | 0;
 $3078 = _i64Add($3074 | 0, $3077 | 0, $3068 | 0, $3071 | 0) | 0;
 $3079 = getTempRet0() | 0;
 $3080 = _bitshift64Shl($3068 | 0, $3071 | 0, 1) | 0;
 $3081 = getTempRet0() | 0;
 $3082 = $3080 & -2;
 $3083 = $3081 & 1;
 $3084 = ___muldi3($3082 | 0, $3083 | 0, $3074 | 0, 0) | 0;
 $3085 = getTempRet0() | 0;
 $3086 = _i64Add($3078 | 0, $3079 | 0, $3084 | 0, $3085 | 0) | 0;
 $3087 = getTempRet0() | 0;
 $arrayidx6825 = $blockR + 616 | 0;
 $3088 = $arrayidx6825;
 $3089 = $3088;
 $3090 = HEAP32[$3089 >> 2] | 0;
 $3091 = $3088 + 4 | 0;
 $3092 = $3091;
 $3093 = HEAP32[$3092 >> 2] | 0;
 $3094 = $3086 ^ $3090;
 $3095 = $3087 ^ $3093;
 $arrayidx6850 = $blockR + 584 | 0;
 $3096 = $arrayidx6850;
 $3097 = $3096;
 $3098 = HEAP32[$3097 >> 2] | 0;
 $3099 = $3096 + 4 | 0;
 $3100 = $3099;
 $3101 = HEAP32[$3100 >> 2] | 0;
 $3102 = _i64Add($3095 | 0, $3094 | 0, $3098 | 0, $3101 | 0) | 0;
 $3103 = getTempRet0() | 0;
 $3104 = _bitshift64Shl($3098 | 0, $3101 | 0, 1) | 0;
 $3105 = getTempRet0() | 0;
 $3106 = $3104 & -2;
 $3107 = $3105 & 1;
 $3108 = ___muldi3($3106 | 0, $3107 | 0, $3095 | 0, 0) | 0;
 $3109 = getTempRet0() | 0;
 $3110 = _i64Add($3102 | 0, $3103 | 0, $3108 | 0, $3109 | 0) | 0;
 $3111 = getTempRet0() | 0;
 $3112 = $3110 ^ $3074;
 $3113 = $3111 ^ $3077;
 $3114 = _bitshift64Lshr($3112 | 0, $3113 | 0, 24) | 0;
 $3115 = getTempRet0() | 0;
 $3116 = _bitshift64Shl($3112 | 0, $3113 | 0, 40) | 0;
 $3117 = getTempRet0() | 0;
 $3118 = $3114 | $3116;
 $3119 = $3115 | $3117;
 $3120 = _i64Add($3118 | 0, $3119 | 0, $3086 | 0, $3087 | 0) | 0;
 $3121 = getTempRet0() | 0;
 $3122 = _bitshift64Shl($3086 | 0, $3087 | 0, 1) | 0;
 $3123 = getTempRet0() | 0;
 $3124 = $3122 & -2;
 $3125 = $3123 & 1;
 $3126 = ___muldi3($3114 | 0, 0, $3124 | 0, $3125 | 0) | 0;
 $3127 = getTempRet0() | 0;
 $3128 = _i64Add($3120 | 0, $3121 | 0, $3126 | 0, $3127 | 0) | 0;
 $3129 = getTempRet0() | 0;
 $3130 = $arrayidx6799;
 $3131 = $3130;
 HEAP32[$3131 >> 2] = $3128;
 $3132 = $3130 + 4 | 0;
 $3133 = $3132;
 HEAP32[$3133 >> 2] = $3129;
 $3134 = $3128 ^ $3095;
 $3135 = $3129 ^ $3094;
 $3136 = _bitshift64Lshr($3134 | 0, $3135 | 0, 16) | 0;
 $3137 = getTempRet0() | 0;
 $3138 = _bitshift64Shl($3134 | 0, $3135 | 0, 48) | 0;
 $3139 = getTempRet0() | 0;
 $3140 = $3136 | $3138;
 $3141 = $3137 | $3139;
 $3142 = $arrayidx6825;
 $3143 = $3142;
 HEAP32[$3143 >> 2] = $3140;
 $3144 = $3142 + 4 | 0;
 $3145 = $3144;
 HEAP32[$3145 >> 2] = $3141;
 $3146 = _i64Add($3140 | 0, $3141 | 0, $3110 | 0, $3111 | 0) | 0;
 $3147 = getTempRet0() | 0;
 $3148 = _bitshift64Shl($3110 | 0, $3111 | 0, 1) | 0;
 $3149 = getTempRet0() | 0;
 $3150 = $3148 & -2;
 $3151 = $3149 & 1;
 $3152 = ___muldi3($3136 | 0, 0, $3150 | 0, $3151 | 0) | 0;
 $3153 = getTempRet0() | 0;
 $3154 = _i64Add($3146 | 0, $3147 | 0, $3152 | 0, $3153 | 0) | 0;
 $3155 = getTempRet0() | 0;
 $3156 = $arrayidx6850;
 $3157 = $3156;
 HEAP32[$3157 >> 2] = $3154;
 $3158 = $3156 + 4 | 0;
 $3159 = $3158;
 HEAP32[$3159 >> 2] = $3155;
 $3160 = $3154 ^ $3118;
 $3161 = $3155 ^ $3119;
 $3162 = _bitshift64Lshr($3160 | 0, $3161 | 0, 63) | 0;
 $3163 = getTempRet0() | 0;
 $3164 = _bitshift64Shl($3160 | 0, $3161 | 0, 1) | 0;
 $3165 = getTempRet0() | 0;
 $3166 = $3162 | $3164;
 $3167 = $3163 | $3165;
 $3168 = $arrayidx6803;
 $3169 = $3168;
 HEAP32[$3169 >> 2] = $3166;
 $3170 = $3168 + 4 | 0;
 $3171 = $3170;
 HEAP32[$3171 >> 2] = $3167;
 $arrayidx7005 = $blockR + 528 | 0;
 $3172 = $arrayidx7005;
 $3173 = $3172;
 $3174 = HEAP32[$3173 >> 2] | 0;
 $3175 = $3172 + 4 | 0;
 $3176 = $3175;
 $3177 = HEAP32[$3176 >> 2] | 0;
 $arrayidx7009 = $blockR + 560 | 0;
 $3178 = $arrayidx7009;
 $3179 = $3178;
 $3180 = HEAP32[$3179 >> 2] | 0;
 $3181 = $3178 + 4 | 0;
 $3182 = $3181;
 $3183 = HEAP32[$3182 >> 2] | 0;
 $3184 = _i64Add($3180 | 0, $3183 | 0, $3174 | 0, $3177 | 0) | 0;
 $3185 = getTempRet0() | 0;
 $3186 = _bitshift64Shl($3174 | 0, $3177 | 0, 1) | 0;
 $3187 = getTempRet0() | 0;
 $3188 = $3186 & -2;
 $3189 = $3187 & 1;
 $3190 = ___muldi3($3188 | 0, $3189 | 0, $3180 | 0, 0) | 0;
 $3191 = getTempRet0() | 0;
 $3192 = _i64Add($3184 | 0, $3185 | 0, $3190 | 0, $3191 | 0) | 0;
 $3193 = getTempRet0() | 0;
 $arrayidx7031 = $blockR + 624 | 0;
 $3194 = $arrayidx7031;
 $3195 = $3194;
 $3196 = HEAP32[$3195 >> 2] | 0;
 $3197 = $3194 + 4 | 0;
 $3198 = $3197;
 $3199 = HEAP32[$3198 >> 2] | 0;
 $3200 = $3192 ^ $3196;
 $3201 = $3193 ^ $3199;
 $arrayidx7056 = $blockR + 592 | 0;
 $3202 = $arrayidx7056;
 $3203 = $3202;
 $3204 = HEAP32[$3203 >> 2] | 0;
 $3205 = $3202 + 4 | 0;
 $3206 = $3205;
 $3207 = HEAP32[$3206 >> 2] | 0;
 $3208 = _i64Add($3201 | 0, $3200 | 0, $3204 | 0, $3207 | 0) | 0;
 $3209 = getTempRet0() | 0;
 $3210 = _bitshift64Shl($3204 | 0, $3207 | 0, 1) | 0;
 $3211 = getTempRet0() | 0;
 $3212 = $3210 & -2;
 $3213 = $3211 & 1;
 $3214 = ___muldi3($3212 | 0, $3213 | 0, $3201 | 0, 0) | 0;
 $3215 = getTempRet0() | 0;
 $3216 = _i64Add($3208 | 0, $3209 | 0, $3214 | 0, $3215 | 0) | 0;
 $3217 = getTempRet0() | 0;
 $3218 = $3216 ^ $3180;
 $3219 = $3217 ^ $3183;
 $3220 = _bitshift64Lshr($3218 | 0, $3219 | 0, 24) | 0;
 $3221 = getTempRet0() | 0;
 $3222 = _bitshift64Shl($3218 | 0, $3219 | 0, 40) | 0;
 $3223 = getTempRet0() | 0;
 $3224 = $3220 | $3222;
 $3225 = $3221 | $3223;
 $3226 = _i64Add($3224 | 0, $3225 | 0, $3192 | 0, $3193 | 0) | 0;
 $3227 = getTempRet0() | 0;
 $3228 = _bitshift64Shl($3192 | 0, $3193 | 0, 1) | 0;
 $3229 = getTempRet0() | 0;
 $3230 = $3228 & -2;
 $3231 = $3229 & 1;
 $3232 = ___muldi3($3220 | 0, 0, $3230 | 0, $3231 | 0) | 0;
 $3233 = getTempRet0() | 0;
 $3234 = _i64Add($3226 | 0, $3227 | 0, $3232 | 0, $3233 | 0) | 0;
 $3235 = getTempRet0() | 0;
 $3236 = $arrayidx7005;
 $3237 = $3236;
 HEAP32[$3237 >> 2] = $3234;
 $3238 = $3236 + 4 | 0;
 $3239 = $3238;
 HEAP32[$3239 >> 2] = $3235;
 $3240 = $3234 ^ $3201;
 $3241 = $3235 ^ $3200;
 $3242 = _bitshift64Lshr($3240 | 0, $3241 | 0, 16) | 0;
 $3243 = getTempRet0() | 0;
 $3244 = _bitshift64Shl($3240 | 0, $3241 | 0, 48) | 0;
 $3245 = getTempRet0() | 0;
 $3246 = $3242 | $3244;
 $3247 = $3243 | $3245;
 $3248 = $arrayidx7031;
 $3249 = $3248;
 HEAP32[$3249 >> 2] = $3246;
 $3250 = $3248 + 4 | 0;
 $3251 = $3250;
 HEAP32[$3251 >> 2] = $3247;
 $3252 = _i64Add($3246 | 0, $3247 | 0, $3216 | 0, $3217 | 0) | 0;
 $3253 = getTempRet0() | 0;
 $3254 = _bitshift64Shl($3216 | 0, $3217 | 0, 1) | 0;
 $3255 = getTempRet0() | 0;
 $3256 = $3254 & -2;
 $3257 = $3255 & 1;
 $3258 = ___muldi3($3242 | 0, 0, $3256 | 0, $3257 | 0) | 0;
 $3259 = getTempRet0() | 0;
 $3260 = _i64Add($3252 | 0, $3253 | 0, $3258 | 0, $3259 | 0) | 0;
 $3261 = getTempRet0() | 0;
 $3262 = $3260 ^ $3224;
 $3263 = $3261 ^ $3225;
 $3264 = _bitshift64Lshr($3262 | 0, $3263 | 0, 63) | 0;
 $3265 = getTempRet0() | 0;
 $3266 = _bitshift64Shl($3262 | 0, $3263 | 0, 1) | 0;
 $3267 = getTempRet0() | 0;
 $3268 = $3264 | $3266;
 $3269 = $3265 | $3267;
 $3270 = $arrayidx7009;
 $3271 = $3270;
 HEAP32[$3271 >> 2] = $3268;
 $3272 = $3270 + 4 | 0;
 $3273 = $3272;
 HEAP32[$3273 >> 2] = $3269;
 $arrayidx7211 = $blockR + 536 | 0;
 $3274 = $arrayidx7211;
 $3275 = $3274;
 $3276 = HEAP32[$3275 >> 2] | 0;
 $3277 = $3274 + 4 | 0;
 $3278 = $3277;
 $3279 = HEAP32[$3278 >> 2] | 0;
 $arrayidx7215 = $blockR + 568 | 0;
 $3280 = $arrayidx7215;
 $3281 = $3280;
 $3282 = HEAP32[$3281 >> 2] | 0;
 $3283 = $3280 + 4 | 0;
 $3284 = $3283;
 $3285 = HEAP32[$3284 >> 2] | 0;
 $3286 = _i64Add($3282 | 0, $3285 | 0, $3276 | 0, $3279 | 0) | 0;
 $3287 = getTempRet0() | 0;
 $3288 = _bitshift64Shl($3276 | 0, $3279 | 0, 1) | 0;
 $3289 = getTempRet0() | 0;
 $3290 = $3288 & -2;
 $3291 = $3289 & 1;
 $3292 = ___muldi3($3290 | 0, $3291 | 0, $3282 | 0, 0) | 0;
 $3293 = getTempRet0() | 0;
 $3294 = _i64Add($3286 | 0, $3287 | 0, $3292 | 0, $3293 | 0) | 0;
 $3295 = getTempRet0() | 0;
 $arrayidx7237 = $blockR + 632 | 0;
 $3296 = $arrayidx7237;
 $3297 = $3296;
 $3298 = HEAP32[$3297 >> 2] | 0;
 $3299 = $3296 + 4 | 0;
 $3300 = $3299;
 $3301 = HEAP32[$3300 >> 2] | 0;
 $3302 = $3294 ^ $3298;
 $3303 = $3295 ^ $3301;
 $arrayidx7262 = $blockR + 600 | 0;
 $3304 = $arrayidx7262;
 $3305 = $3304;
 $3306 = HEAP32[$3305 >> 2] | 0;
 $3307 = $3304 + 4 | 0;
 $3308 = $3307;
 $3309 = HEAP32[$3308 >> 2] | 0;
 $3310 = _i64Add($3303 | 0, $3302 | 0, $3306 | 0, $3309 | 0) | 0;
 $3311 = getTempRet0() | 0;
 $3312 = _bitshift64Shl($3306 | 0, $3309 | 0, 1) | 0;
 $3313 = getTempRet0() | 0;
 $3314 = $3312 & -2;
 $3315 = $3313 & 1;
 $3316 = ___muldi3($3314 | 0, $3315 | 0, $3303 | 0, 0) | 0;
 $3317 = getTempRet0() | 0;
 $3318 = _i64Add($3310 | 0, $3311 | 0, $3316 | 0, $3317 | 0) | 0;
 $3319 = getTempRet0() | 0;
 $3320 = $3318 ^ $3282;
 $3321 = $3319 ^ $3285;
 $3322 = _bitshift64Lshr($3320 | 0, $3321 | 0, 24) | 0;
 $3323 = getTempRet0() | 0;
 $3324 = _bitshift64Shl($3320 | 0, $3321 | 0, 40) | 0;
 $3325 = getTempRet0() | 0;
 $3326 = $3322 | $3324;
 $3327 = $3323 | $3325;
 $3328 = _i64Add($3326 | 0, $3327 | 0, $3294 | 0, $3295 | 0) | 0;
 $3329 = getTempRet0() | 0;
 $3330 = _bitshift64Shl($3294 | 0, $3295 | 0, 1) | 0;
 $3331 = getTempRet0() | 0;
 $3332 = $3330 & -2;
 $3333 = $3331 & 1;
 $3334 = ___muldi3($3322 | 0, 0, $3332 | 0, $3333 | 0) | 0;
 $3335 = getTempRet0() | 0;
 $3336 = _i64Add($3328 | 0, $3329 | 0, $3334 | 0, $3335 | 0) | 0;
 $3337 = getTempRet0() | 0;
 $3338 = $arrayidx7211;
 $3339 = $3338;
 HEAP32[$3339 >> 2] = $3336;
 $3340 = $3338 + 4 | 0;
 $3341 = $3340;
 HEAP32[$3341 >> 2] = $3337;
 $3342 = $3336 ^ $3303;
 $3343 = $3337 ^ $3302;
 $3344 = _bitshift64Lshr($3342 | 0, $3343 | 0, 16) | 0;
 $3345 = getTempRet0() | 0;
 $3346 = _bitshift64Shl($3342 | 0, $3343 | 0, 48) | 0;
 $3347 = getTempRet0() | 0;
 $3348 = $3344 | $3346;
 $3349 = $3345 | $3347;
 $3350 = _i64Add($3348 | 0, $3349 | 0, $3318 | 0, $3319 | 0) | 0;
 $3351 = getTempRet0() | 0;
 $3352 = _bitshift64Shl($3318 | 0, $3319 | 0, 1) | 0;
 $3353 = getTempRet0() | 0;
 $3354 = $3352 & -2;
 $3355 = $3353 & 1;
 $3356 = ___muldi3($3344 | 0, 0, $3354 | 0, $3355 | 0) | 0;
 $3357 = getTempRet0() | 0;
 $3358 = _i64Add($3350 | 0, $3351 | 0, $3356 | 0, $3357 | 0) | 0;
 $3359 = getTempRet0() | 0;
 $3360 = $3358 ^ $3326;
 $3361 = $3359 ^ $3327;
 $3362 = _bitshift64Lshr($3360 | 0, $3361 | 0, 63) | 0;
 $3363 = getTempRet0() | 0;
 $3364 = _bitshift64Shl($3360 | 0, $3361 | 0, 1) | 0;
 $3365 = getTempRet0() | 0;
 $3366 = $3362 | $3364;
 $3367 = $3363 | $3365;
 $3368 = $arrayidx7215;
 $3369 = $3368;
 HEAP32[$3369 >> 2] = $3366;
 $3370 = $3368 + 4 | 0;
 $3371 = $3370;
 HEAP32[$3371 >> 2] = $3367;
 $3372 = _i64Add($3166 | 0, $3167 | 0, $3022 | 0, $3023 | 0) | 0;
 $3373 = getTempRet0() | 0;
 $3374 = _bitshift64Shl($3022 | 0, $3023 | 0, 1) | 0;
 $3375 = getTempRet0() | 0;
 $3376 = $3374 & -2;
 $3377 = $3375 & 1;
 $3378 = ___muldi3($3166 | 0, 0, $3376 | 0, $3377 | 0) | 0;
 $3379 = getTempRet0() | 0;
 $3380 = _i64Add($3372 | 0, $3373 | 0, $3378 | 0, $3379 | 0) | 0;
 $3381 = getTempRet0() | 0;
 $3382 = $3348 ^ $3380;
 $3383 = $3349 ^ $3381;
 $3384 = _i64Add($3383 | 0, $3382 | 0, $3260 | 0, $3261 | 0) | 0;
 $3385 = getTempRet0() | 0;
 $3386 = _bitshift64Shl($3260 | 0, $3261 | 0, 1) | 0;
 $3387 = getTempRet0() | 0;
 $3388 = $3386 & -2;
 $3389 = $3387 & 1;
 $3390 = ___muldi3($3383 | 0, 0, $3388 | 0, $3389 | 0) | 0;
 $3391 = getTempRet0() | 0;
 $3392 = _i64Add($3384 | 0, $3385 | 0, $3390 | 0, $3391 | 0) | 0;
 $3393 = getTempRet0() | 0;
 $3394 = $3392 ^ $3166;
 $3395 = $3393 ^ $3167;
 $3396 = _bitshift64Lshr($3394 | 0, $3395 | 0, 24) | 0;
 $3397 = getTempRet0() | 0;
 $3398 = _bitshift64Shl($3394 | 0, $3395 | 0, 40) | 0;
 $3399 = getTempRet0() | 0;
 $3400 = $3396 | $3398;
 $3401 = $3397 | $3399;
 $3402 = _i64Add($3400 | 0, $3401 | 0, $3380 | 0, $3381 | 0) | 0;
 $3403 = getTempRet0() | 0;
 $3404 = _bitshift64Shl($3380 | 0, $3381 | 0, 1) | 0;
 $3405 = getTempRet0() | 0;
 $3406 = $3404 & -2;
 $3407 = $3405 & 1;
 $3408 = ___muldi3($3396 | 0, 0, $3406 | 0, $3407 | 0) | 0;
 $3409 = getTempRet0() | 0;
 $3410 = _i64Add($3402 | 0, $3403 | 0, $3408 | 0, $3409 | 0) | 0;
 $3411 = getTempRet0() | 0;
 $3412 = $add$ptr6592;
 $3413 = $3412;
 HEAP32[$3413 >> 2] = $3410;
 $3414 = $3412 + 4 | 0;
 $3415 = $3414;
 HEAP32[$3415 >> 2] = $3411;
 $3416 = $3410 ^ $3383;
 $3417 = $3411 ^ $3382;
 $3418 = _bitshift64Lshr($3416 | 0, $3417 | 0, 16) | 0;
 $3419 = getTempRet0() | 0;
 $3420 = _bitshift64Shl($3416 | 0, $3417 | 0, 48) | 0;
 $3421 = getTempRet0() | 0;
 $3422 = $3418 | $3420;
 $3423 = $3419 | $3421;
 $3424 = $arrayidx7237;
 $3425 = $3424;
 HEAP32[$3425 >> 2] = $3422;
 $3426 = $3424 + 4 | 0;
 $3427 = $3426;
 HEAP32[$3427 >> 2] = $3423;
 $3428 = _i64Add($3422 | 0, $3423 | 0, $3392 | 0, $3393 | 0) | 0;
 $3429 = getTempRet0() | 0;
 $3430 = _bitshift64Shl($3392 | 0, $3393 | 0, 1) | 0;
 $3431 = getTempRet0() | 0;
 $3432 = $3430 & -2;
 $3433 = $3431 & 1;
 $3434 = ___muldi3($3418 | 0, 0, $3432 | 0, $3433 | 0) | 0;
 $3435 = getTempRet0() | 0;
 $3436 = _i64Add($3428 | 0, $3429 | 0, $3434 | 0, $3435 | 0) | 0;
 $3437 = getTempRet0() | 0;
 $3438 = $arrayidx7056;
 $3439 = $3438;
 HEAP32[$3439 >> 2] = $3436;
 $3440 = $3438 + 4 | 0;
 $3441 = $3440;
 HEAP32[$3441 >> 2] = $3437;
 $3442 = $3436 ^ $3400;
 $3443 = $3437 ^ $3401;
 $3444 = _bitshift64Lshr($3442 | 0, $3443 | 0, 63) | 0;
 $3445 = getTempRet0() | 0;
 $3446 = _bitshift64Shl($3442 | 0, $3443 | 0, 1) | 0;
 $3447 = getTempRet0() | 0;
 $3448 = $3444 | $3446;
 $3449 = $3445 | $3447;
 $3450 = $arrayidx6803;
 $3451 = $3450;
 HEAP32[$3451 >> 2] = $3448;
 $3452 = $3450 + 4 | 0;
 $3453 = $3452;
 HEAP32[$3453 >> 2] = $3449;
 $3454 = _i64Add($3268 | 0, $3269 | 0, $3128 | 0, $3129 | 0) | 0;
 $3455 = getTempRet0() | 0;
 $3456 = _bitshift64Shl($3128 | 0, $3129 | 0, 1) | 0;
 $3457 = getTempRet0() | 0;
 $3458 = $3456 & -2;
 $3459 = $3457 & 1;
 $3460 = ___muldi3($3268 | 0, 0, $3458 | 0, $3459 | 0) | 0;
 $3461 = getTempRet0() | 0;
 $3462 = _i64Add($3454 | 0, $3455 | 0, $3460 | 0, $3461 | 0) | 0;
 $3463 = getTempRet0() | 0;
 $3464 = $3462 ^ $3034;
 $3465 = $3463 ^ $3035;
 $3466 = _i64Add($3358 | 0, $3359 | 0, $3465 | 0, $3464 | 0) | 0;
 $3467 = getTempRet0() | 0;
 $3468 = _bitshift64Shl($3358 | 0, $3359 | 0, 1) | 0;
 $3469 = getTempRet0() | 0;
 $3470 = $3468 & -2;
 $3471 = $3469 & 1;
 $3472 = ___muldi3($3470 | 0, $3471 | 0, $3465 | 0, 0) | 0;
 $3473 = getTempRet0() | 0;
 $3474 = _i64Add($3466 | 0, $3467 | 0, $3472 | 0, $3473 | 0) | 0;
 $3475 = getTempRet0() | 0;
 $3476 = $3474 ^ $3268;
 $3477 = $3475 ^ $3269;
 $3478 = _bitshift64Lshr($3476 | 0, $3477 | 0, 24) | 0;
 $3479 = getTempRet0() | 0;
 $3480 = _bitshift64Shl($3476 | 0, $3477 | 0, 40) | 0;
 $3481 = getTempRet0() | 0;
 $3482 = $3478 | $3480;
 $3483 = $3479 | $3481;
 $3484 = _i64Add($3482 | 0, $3483 | 0, $3462 | 0, $3463 | 0) | 0;
 $3485 = getTempRet0() | 0;
 $3486 = _bitshift64Shl($3462 | 0, $3463 | 0, 1) | 0;
 $3487 = getTempRet0() | 0;
 $3488 = $3486 & -2;
 $3489 = $3487 & 1;
 $3490 = ___muldi3($3478 | 0, 0, $3488 | 0, $3489 | 0) | 0;
 $3491 = getTempRet0() | 0;
 $3492 = _i64Add($3484 | 0, $3485 | 0, $3490 | 0, $3491 | 0) | 0;
 $3493 = getTempRet0() | 0;
 $3494 = $arrayidx6799;
 $3495 = $3494;
 HEAP32[$3495 >> 2] = $3492;
 $3496 = $3494 + 4 | 0;
 $3497 = $3496;
 HEAP32[$3497 >> 2] = $3493;
 $3498 = $3492 ^ $3465;
 $3499 = $3493 ^ $3464;
 $3500 = _bitshift64Lshr($3498 | 0, $3499 | 0, 16) | 0;
 $3501 = getTempRet0() | 0;
 $3502 = _bitshift64Shl($3498 | 0, $3499 | 0, 48) | 0;
 $3503 = getTempRet0() | 0;
 $3504 = $3500 | $3502;
 $3505 = $3501 | $3503;
 $3506 = $arrayidx6619;
 $3507 = $3506;
 HEAP32[$3507 >> 2] = $3504;
 $3508 = $3506 + 4 | 0;
 $3509 = $3508;
 HEAP32[$3509 >> 2] = $3505;
 $3510 = _i64Add($3504 | 0, $3505 | 0, $3474 | 0, $3475 | 0) | 0;
 $3511 = getTempRet0() | 0;
 $3512 = _bitshift64Shl($3474 | 0, $3475 | 0, 1) | 0;
 $3513 = getTempRet0() | 0;
 $3514 = $3512 & -2;
 $3515 = $3513 & 1;
 $3516 = ___muldi3($3500 | 0, 0, $3514 | 0, $3515 | 0) | 0;
 $3517 = getTempRet0() | 0;
 $3518 = _i64Add($3510 | 0, $3511 | 0, $3516 | 0, $3517 | 0) | 0;
 $3519 = getTempRet0() | 0;
 $3520 = $arrayidx7262;
 $3521 = $3520;
 HEAP32[$3521 >> 2] = $3518;
 $3522 = $3520 + 4 | 0;
 $3523 = $3522;
 HEAP32[$3523 >> 2] = $3519;
 $3524 = $3518 ^ $3482;
 $3525 = $3519 ^ $3483;
 $3526 = _bitshift64Lshr($3524 | 0, $3525 | 0, 63) | 0;
 $3527 = getTempRet0() | 0;
 $3528 = _bitshift64Shl($3524 | 0, $3525 | 0, 1) | 0;
 $3529 = getTempRet0() | 0;
 $3530 = $3526 | $3528;
 $3531 = $3527 | $3529;
 $3532 = $arrayidx7009;
 $3533 = $3532;
 HEAP32[$3533 >> 2] = $3530;
 $3534 = $3532 + 4 | 0;
 $3535 = $3534;
 HEAP32[$3535 >> 2] = $3531;
 $3536 = _i64Add($3366 | 0, $3367 | 0, $3234 | 0, $3235 | 0) | 0;
 $3537 = getTempRet0() | 0;
 $3538 = _bitshift64Shl($3234 | 0, $3235 | 0, 1) | 0;
 $3539 = getTempRet0() | 0;
 $3540 = $3538 & -2;
 $3541 = $3539 & 1;
 $3542 = ___muldi3($3366 | 0, 0, $3540 | 0, $3541 | 0) | 0;
 $3543 = getTempRet0() | 0;
 $3544 = _i64Add($3536 | 0, $3537 | 0, $3542 | 0, $3543 | 0) | 0;
 $3545 = getTempRet0() | 0;
 $3546 = $3544 ^ $3140;
 $3547 = $3545 ^ $3141;
 $3548 = _i64Add($3547 | 0, $3546 | 0, $3048 | 0, $3049 | 0) | 0;
 $3549 = getTempRet0() | 0;
 $3550 = _bitshift64Shl($3048 | 0, $3049 | 0, 1) | 0;
 $3551 = getTempRet0() | 0;
 $3552 = $3550 & -2;
 $3553 = $3551 & 1;
 $3554 = ___muldi3($3547 | 0, 0, $3552 | 0, $3553 | 0) | 0;
 $3555 = getTempRet0() | 0;
 $3556 = _i64Add($3548 | 0, $3549 | 0, $3554 | 0, $3555 | 0) | 0;
 $3557 = getTempRet0() | 0;
 $3558 = $3556 ^ $3366;
 $3559 = $3557 ^ $3367;
 $3560 = _bitshift64Lshr($3558 | 0, $3559 | 0, 24) | 0;
 $3561 = getTempRet0() | 0;
 $3562 = _bitshift64Shl($3558 | 0, $3559 | 0, 40) | 0;
 $3563 = getTempRet0() | 0;
 $3564 = $3560 | $3562;
 $3565 = $3561 | $3563;
 $3566 = _i64Add($3564 | 0, $3565 | 0, $3544 | 0, $3545 | 0) | 0;
 $3567 = getTempRet0() | 0;
 $3568 = _bitshift64Shl($3544 | 0, $3545 | 0, 1) | 0;
 $3569 = getTempRet0() | 0;
 $3570 = $3568 & -2;
 $3571 = $3569 & 1;
 $3572 = ___muldi3($3560 | 0, 0, $3570 | 0, $3571 | 0) | 0;
 $3573 = getTempRet0() | 0;
 $3574 = _i64Add($3566 | 0, $3567 | 0, $3572 | 0, $3573 | 0) | 0;
 $3575 = getTempRet0() | 0;
 $3576 = $arrayidx7005;
 $3577 = $3576;
 HEAP32[$3577 >> 2] = $3574;
 $3578 = $3576 + 4 | 0;
 $3579 = $3578;
 HEAP32[$3579 >> 2] = $3575;
 $3580 = $3574 ^ $3547;
 $3581 = $3575 ^ $3546;
 $3582 = _bitshift64Lshr($3580 | 0, $3581 | 0, 16) | 0;
 $3583 = getTempRet0() | 0;
 $3584 = _bitshift64Shl($3580 | 0, $3581 | 0, 48) | 0;
 $3585 = getTempRet0() | 0;
 $3586 = $3582 | $3584;
 $3587 = $3583 | $3585;
 $3588 = $arrayidx6825;
 $3589 = $3588;
 HEAP32[$3589 >> 2] = $3586;
 $3590 = $3588 + 4 | 0;
 $3591 = $3590;
 HEAP32[$3591 >> 2] = $3587;
 $3592 = _i64Add($3586 | 0, $3587 | 0, $3556 | 0, $3557 | 0) | 0;
 $3593 = getTempRet0() | 0;
 $3594 = _bitshift64Shl($3556 | 0, $3557 | 0, 1) | 0;
 $3595 = getTempRet0() | 0;
 $3596 = $3594 & -2;
 $3597 = $3595 & 1;
 $3598 = ___muldi3($3582 | 0, 0, $3596 | 0, $3597 | 0) | 0;
 $3599 = getTempRet0() | 0;
 $3600 = _i64Add($3592 | 0, $3593 | 0, $3598 | 0, $3599 | 0) | 0;
 $3601 = getTempRet0() | 0;
 $3602 = $arrayidx6644;
 $3603 = $3602;
 HEAP32[$3603 >> 2] = $3600;
 $3604 = $3602 + 4 | 0;
 $3605 = $3604;
 HEAP32[$3605 >> 2] = $3601;
 $3606 = $3600 ^ $3564;
 $3607 = $3601 ^ $3565;
 $3608 = _bitshift64Lshr($3606 | 0, $3607 | 0, 63) | 0;
 $3609 = getTempRet0() | 0;
 $3610 = _bitshift64Shl($3606 | 0, $3607 | 0, 1) | 0;
 $3611 = getTempRet0() | 0;
 $3612 = $3608 | $3610;
 $3613 = $3609 | $3611;
 $3614 = $arrayidx7215;
 $3615 = $3614;
 HEAP32[$3615 >> 2] = $3612;
 $3616 = $3614 + 4 | 0;
 $3617 = $3616;
 HEAP32[$3617 >> 2] = $3613;
 $3618 = _i64Add($3336 | 0, $3337 | 0, $3060 | 0, $3061 | 0) | 0;
 $3619 = getTempRet0() | 0;
 $3620 = _bitshift64Shl($3336 | 0, $3337 | 0, 1) | 0;
 $3621 = getTempRet0() | 0;
 $3622 = $3620 & -2;
 $3623 = $3621 & 1;
 $3624 = ___muldi3($3622 | 0, $3623 | 0, $3060 | 0, 0) | 0;
 $3625 = getTempRet0() | 0;
 $3626 = _i64Add($3618 | 0, $3619 | 0, $3624 | 0, $3625 | 0) | 0;
 $3627 = getTempRet0() | 0;
 $3628 = $3626 ^ $3246;
 $3629 = $3627 ^ $3247;
 $3630 = _i64Add($3629 | 0, $3628 | 0, $3154 | 0, $3155 | 0) | 0;
 $3631 = getTempRet0() | 0;
 $3632 = _bitshift64Shl($3154 | 0, $3155 | 0, 1) | 0;
 $3633 = getTempRet0() | 0;
 $3634 = $3632 & -2;
 $3635 = $3633 & 1;
 $3636 = ___muldi3($3629 | 0, 0, $3634 | 0, $3635 | 0) | 0;
 $3637 = getTempRet0() | 0;
 $3638 = _i64Add($3630 | 0, $3631 | 0, $3636 | 0, $3637 | 0) | 0;
 $3639 = getTempRet0() | 0;
 $3640 = $3638 ^ $3060;
 $3641 = $3639 ^ $3061;
 $3642 = _bitshift64Lshr($3640 | 0, $3641 | 0, 24) | 0;
 $3643 = getTempRet0() | 0;
 $3644 = _bitshift64Shl($3640 | 0, $3641 | 0, 40) | 0;
 $3645 = getTempRet0() | 0;
 $3646 = $3642 | $3644;
 $3647 = $3643 | $3645;
 $3648 = _i64Add($3646 | 0, $3647 | 0, $3626 | 0, $3627 | 0) | 0;
 $3649 = getTempRet0() | 0;
 $3650 = _bitshift64Shl($3626 | 0, $3627 | 0, 1) | 0;
 $3651 = getTempRet0() | 0;
 $3652 = $3650 & -2;
 $3653 = $3651 & 1;
 $3654 = ___muldi3($3642 | 0, 0, $3652 | 0, $3653 | 0) | 0;
 $3655 = getTempRet0() | 0;
 $3656 = _i64Add($3648 | 0, $3649 | 0, $3654 | 0, $3655 | 0) | 0;
 $3657 = getTempRet0() | 0;
 $3658 = $arrayidx7211;
 $3659 = $3658;
 HEAP32[$3659 >> 2] = $3656;
 $3660 = $3658 + 4 | 0;
 $3661 = $3660;
 HEAP32[$3661 >> 2] = $3657;
 $3662 = $3656 ^ $3629;
 $3663 = $3657 ^ $3628;
 $3664 = _bitshift64Lshr($3662 | 0, $3663 | 0, 16) | 0;
 $3665 = getTempRet0() | 0;
 $3666 = _bitshift64Shl($3662 | 0, $3663 | 0, 48) | 0;
 $3667 = getTempRet0() | 0;
 $3668 = $3664 | $3666;
 $3669 = $3665 | $3667;
 $3670 = $arrayidx7031;
 $3671 = $3670;
 HEAP32[$3671 >> 2] = $3668;
 $3672 = $3670 + 4 | 0;
 $3673 = $3672;
 HEAP32[$3673 >> 2] = $3669;
 $3674 = _i64Add($3668 | 0, $3669 | 0, $3638 | 0, $3639 | 0) | 0;
 $3675 = getTempRet0() | 0;
 $3676 = _bitshift64Shl($3638 | 0, $3639 | 0, 1) | 0;
 $3677 = getTempRet0() | 0;
 $3678 = $3676 & -2;
 $3679 = $3677 & 1;
 $3680 = ___muldi3($3664 | 0, 0, $3678 | 0, $3679 | 0) | 0;
 $3681 = getTempRet0() | 0;
 $3682 = _i64Add($3674 | 0, $3675 | 0, $3680 | 0, $3681 | 0) | 0;
 $3683 = getTempRet0() | 0;
 $3684 = $arrayidx6850;
 $3685 = $3684;
 HEAP32[$3685 >> 2] = $3682;
 $3686 = $3684 + 4 | 0;
 $3687 = $3686;
 HEAP32[$3687 >> 2] = $3683;
 $3688 = $3682 ^ $3646;
 $3689 = $3683 ^ $3647;
 $3690 = _bitshift64Lshr($3688 | 0, $3689 | 0, 63) | 0;
 $3691 = getTempRet0() | 0;
 $3692 = _bitshift64Shl($3688 | 0, $3689 | 0, 1) | 0;
 $3693 = getTempRet0() | 0;
 $3694 = $3690 | $3692;
 $3695 = $3691 | $3693;
 $3696 = $arrayidx6597;
 $3697 = $3696;
 HEAP32[$3697 >> 2] = $3694;
 $3698 = $3696 + 4 | 0;
 $3699 = $3698;
 HEAP32[$3699 >> 2] = $3695;
 $add$ptr8242 = $blockR + 640 | 0;
 $3700 = $add$ptr8242;
 $3701 = $3700;
 $3702 = HEAP32[$3701 >> 2] | 0;
 $3703 = $3700 + 4 | 0;
 $3704 = $3703;
 $3705 = HEAP32[$3704 >> 2] | 0;
 $arrayidx8247 = $blockR + 672 | 0;
 $3706 = $arrayidx8247;
 $3707 = $3706;
 $3708 = HEAP32[$3707 >> 2] | 0;
 $3709 = $3706 + 4 | 0;
 $3710 = $3709;
 $3711 = HEAP32[$3710 >> 2] | 0;
 $3712 = _i64Add($3708 | 0, $3711 | 0, $3702 | 0, $3705 | 0) | 0;
 $3713 = getTempRet0() | 0;
 $3714 = _bitshift64Shl($3702 | 0, $3705 | 0, 1) | 0;
 $3715 = getTempRet0() | 0;
 $3716 = $3714 & -2;
 $3717 = $3715 & 1;
 $3718 = ___muldi3($3716 | 0, $3717 | 0, $3708 | 0, 0) | 0;
 $3719 = getTempRet0() | 0;
 $3720 = _i64Add($3712 | 0, $3713 | 0, $3718 | 0, $3719 | 0) | 0;
 $3721 = getTempRet0() | 0;
 $arrayidx8269 = $blockR + 736 | 0;
 $3722 = $arrayidx8269;
 $3723 = $3722;
 $3724 = HEAP32[$3723 >> 2] | 0;
 $3725 = $3722 + 4 | 0;
 $3726 = $3725;
 $3727 = HEAP32[$3726 >> 2] | 0;
 $3728 = $3720 ^ $3724;
 $3729 = $3721 ^ $3727;
 $arrayidx8294 = $blockR + 704 | 0;
 $3730 = $arrayidx8294;
 $3731 = $3730;
 $3732 = HEAP32[$3731 >> 2] | 0;
 $3733 = $3730 + 4 | 0;
 $3734 = $3733;
 $3735 = HEAP32[$3734 >> 2] | 0;
 $3736 = _i64Add($3729 | 0, $3728 | 0, $3732 | 0, $3735 | 0) | 0;
 $3737 = getTempRet0() | 0;
 $3738 = _bitshift64Shl($3732 | 0, $3735 | 0, 1) | 0;
 $3739 = getTempRet0() | 0;
 $3740 = $3738 & -2;
 $3741 = $3739 & 1;
 $3742 = ___muldi3($3740 | 0, $3741 | 0, $3729 | 0, 0) | 0;
 $3743 = getTempRet0() | 0;
 $3744 = _i64Add($3736 | 0, $3737 | 0, $3742 | 0, $3743 | 0) | 0;
 $3745 = getTempRet0() | 0;
 $3746 = $3744 ^ $3708;
 $3747 = $3745 ^ $3711;
 $3748 = _bitshift64Lshr($3746 | 0, $3747 | 0, 24) | 0;
 $3749 = getTempRet0() | 0;
 $3750 = _bitshift64Shl($3746 | 0, $3747 | 0, 40) | 0;
 $3751 = getTempRet0() | 0;
 $3752 = $3748 | $3750;
 $3753 = $3749 | $3751;
 $3754 = _i64Add($3752 | 0, $3753 | 0, $3720 | 0, $3721 | 0) | 0;
 $3755 = getTempRet0() | 0;
 $3756 = _bitshift64Shl($3720 | 0, $3721 | 0, 1) | 0;
 $3757 = getTempRet0() | 0;
 $3758 = $3756 & -2;
 $3759 = $3757 & 1;
 $3760 = ___muldi3($3748 | 0, 0, $3758 | 0, $3759 | 0) | 0;
 $3761 = getTempRet0() | 0;
 $3762 = _i64Add($3754 | 0, $3755 | 0, $3760 | 0, $3761 | 0) | 0;
 $3763 = getTempRet0() | 0;
 $3764 = $add$ptr8242;
 $3765 = $3764;
 HEAP32[$3765 >> 2] = $3762;
 $3766 = $3764 + 4 | 0;
 $3767 = $3766;
 HEAP32[$3767 >> 2] = $3763;
 $3768 = $3762 ^ $3729;
 $3769 = $3763 ^ $3728;
 $3770 = _bitshift64Lshr($3768 | 0, $3769 | 0, 16) | 0;
 $3771 = getTempRet0() | 0;
 $3772 = _bitshift64Shl($3768 | 0, $3769 | 0, 48) | 0;
 $3773 = getTempRet0() | 0;
 $3774 = $3770 | $3772;
 $3775 = $3771 | $3773;
 $3776 = $arrayidx8269;
 $3777 = $3776;
 HEAP32[$3777 >> 2] = $3774;
 $3778 = $3776 + 4 | 0;
 $3779 = $3778;
 HEAP32[$3779 >> 2] = $3775;
 $3780 = _i64Add($3774 | 0, $3775 | 0, $3744 | 0, $3745 | 0) | 0;
 $3781 = getTempRet0() | 0;
 $3782 = _bitshift64Shl($3744 | 0, $3745 | 0, 1) | 0;
 $3783 = getTempRet0() | 0;
 $3784 = $3782 & -2;
 $3785 = $3783 & 1;
 $3786 = ___muldi3($3770 | 0, 0, $3784 | 0, $3785 | 0) | 0;
 $3787 = getTempRet0() | 0;
 $3788 = _i64Add($3780 | 0, $3781 | 0, $3786 | 0, $3787 | 0) | 0;
 $3789 = getTempRet0() | 0;
 $3790 = $arrayidx8294;
 $3791 = $3790;
 HEAP32[$3791 >> 2] = $3788;
 $3792 = $3790 + 4 | 0;
 $3793 = $3792;
 HEAP32[$3793 >> 2] = $3789;
 $3794 = $3788 ^ $3752;
 $3795 = $3789 ^ $3753;
 $3796 = _bitshift64Lshr($3794 | 0, $3795 | 0, 63) | 0;
 $3797 = getTempRet0() | 0;
 $3798 = _bitshift64Shl($3794 | 0, $3795 | 0, 1) | 0;
 $3799 = getTempRet0() | 0;
 $3800 = $3796 | $3798;
 $3801 = $3797 | $3799;
 $3802 = $arrayidx8247;
 $3803 = $3802;
 HEAP32[$3803 >> 2] = $3800;
 $3804 = $3802 + 4 | 0;
 $3805 = $3804;
 HEAP32[$3805 >> 2] = $3801;
 $arrayidx8449 = $blockR + 648 | 0;
 $3806 = $arrayidx8449;
 $3807 = $3806;
 $3808 = HEAP32[$3807 >> 2] | 0;
 $3809 = $3806 + 4 | 0;
 $3810 = $3809;
 $3811 = HEAP32[$3810 >> 2] | 0;
 $arrayidx8453 = $blockR + 680 | 0;
 $3812 = $arrayidx8453;
 $3813 = $3812;
 $3814 = HEAP32[$3813 >> 2] | 0;
 $3815 = $3812 + 4 | 0;
 $3816 = $3815;
 $3817 = HEAP32[$3816 >> 2] | 0;
 $3818 = _i64Add($3814 | 0, $3817 | 0, $3808 | 0, $3811 | 0) | 0;
 $3819 = getTempRet0() | 0;
 $3820 = _bitshift64Shl($3808 | 0, $3811 | 0, 1) | 0;
 $3821 = getTempRet0() | 0;
 $3822 = $3820 & -2;
 $3823 = $3821 & 1;
 $3824 = ___muldi3($3822 | 0, $3823 | 0, $3814 | 0, 0) | 0;
 $3825 = getTempRet0() | 0;
 $3826 = _i64Add($3818 | 0, $3819 | 0, $3824 | 0, $3825 | 0) | 0;
 $3827 = getTempRet0() | 0;
 $arrayidx8475 = $blockR + 744 | 0;
 $3828 = $arrayidx8475;
 $3829 = $3828;
 $3830 = HEAP32[$3829 >> 2] | 0;
 $3831 = $3828 + 4 | 0;
 $3832 = $3831;
 $3833 = HEAP32[$3832 >> 2] | 0;
 $3834 = $3826 ^ $3830;
 $3835 = $3827 ^ $3833;
 $arrayidx8500 = $blockR + 712 | 0;
 $3836 = $arrayidx8500;
 $3837 = $3836;
 $3838 = HEAP32[$3837 >> 2] | 0;
 $3839 = $3836 + 4 | 0;
 $3840 = $3839;
 $3841 = HEAP32[$3840 >> 2] | 0;
 $3842 = _i64Add($3835 | 0, $3834 | 0, $3838 | 0, $3841 | 0) | 0;
 $3843 = getTempRet0() | 0;
 $3844 = _bitshift64Shl($3838 | 0, $3841 | 0, 1) | 0;
 $3845 = getTempRet0() | 0;
 $3846 = $3844 & -2;
 $3847 = $3845 & 1;
 $3848 = ___muldi3($3846 | 0, $3847 | 0, $3835 | 0, 0) | 0;
 $3849 = getTempRet0() | 0;
 $3850 = _i64Add($3842 | 0, $3843 | 0, $3848 | 0, $3849 | 0) | 0;
 $3851 = getTempRet0() | 0;
 $3852 = $3850 ^ $3814;
 $3853 = $3851 ^ $3817;
 $3854 = _bitshift64Lshr($3852 | 0, $3853 | 0, 24) | 0;
 $3855 = getTempRet0() | 0;
 $3856 = _bitshift64Shl($3852 | 0, $3853 | 0, 40) | 0;
 $3857 = getTempRet0() | 0;
 $3858 = $3854 | $3856;
 $3859 = $3855 | $3857;
 $3860 = _i64Add($3858 | 0, $3859 | 0, $3826 | 0, $3827 | 0) | 0;
 $3861 = getTempRet0() | 0;
 $3862 = _bitshift64Shl($3826 | 0, $3827 | 0, 1) | 0;
 $3863 = getTempRet0() | 0;
 $3864 = $3862 & -2;
 $3865 = $3863 & 1;
 $3866 = ___muldi3($3854 | 0, 0, $3864 | 0, $3865 | 0) | 0;
 $3867 = getTempRet0() | 0;
 $3868 = _i64Add($3860 | 0, $3861 | 0, $3866 | 0, $3867 | 0) | 0;
 $3869 = getTempRet0() | 0;
 $3870 = $arrayidx8449;
 $3871 = $3870;
 HEAP32[$3871 >> 2] = $3868;
 $3872 = $3870 + 4 | 0;
 $3873 = $3872;
 HEAP32[$3873 >> 2] = $3869;
 $3874 = $3868 ^ $3835;
 $3875 = $3869 ^ $3834;
 $3876 = _bitshift64Lshr($3874 | 0, $3875 | 0, 16) | 0;
 $3877 = getTempRet0() | 0;
 $3878 = _bitshift64Shl($3874 | 0, $3875 | 0, 48) | 0;
 $3879 = getTempRet0() | 0;
 $3880 = $3876 | $3878;
 $3881 = $3877 | $3879;
 $3882 = $arrayidx8475;
 $3883 = $3882;
 HEAP32[$3883 >> 2] = $3880;
 $3884 = $3882 + 4 | 0;
 $3885 = $3884;
 HEAP32[$3885 >> 2] = $3881;
 $3886 = _i64Add($3880 | 0, $3881 | 0, $3850 | 0, $3851 | 0) | 0;
 $3887 = getTempRet0() | 0;
 $3888 = _bitshift64Shl($3850 | 0, $3851 | 0, 1) | 0;
 $3889 = getTempRet0() | 0;
 $3890 = $3888 & -2;
 $3891 = $3889 & 1;
 $3892 = ___muldi3($3876 | 0, 0, $3890 | 0, $3891 | 0) | 0;
 $3893 = getTempRet0() | 0;
 $3894 = _i64Add($3886 | 0, $3887 | 0, $3892 | 0, $3893 | 0) | 0;
 $3895 = getTempRet0() | 0;
 $3896 = $arrayidx8500;
 $3897 = $3896;
 HEAP32[$3897 >> 2] = $3894;
 $3898 = $3896 + 4 | 0;
 $3899 = $3898;
 HEAP32[$3899 >> 2] = $3895;
 $3900 = $3894 ^ $3858;
 $3901 = $3895 ^ $3859;
 $3902 = _bitshift64Lshr($3900 | 0, $3901 | 0, 63) | 0;
 $3903 = getTempRet0() | 0;
 $3904 = _bitshift64Shl($3900 | 0, $3901 | 0, 1) | 0;
 $3905 = getTempRet0() | 0;
 $3906 = $3902 | $3904;
 $3907 = $3903 | $3905;
 $3908 = $arrayidx8453;
 $3909 = $3908;
 HEAP32[$3909 >> 2] = $3906;
 $3910 = $3908 + 4 | 0;
 $3911 = $3910;
 HEAP32[$3911 >> 2] = $3907;
 $arrayidx8655 = $blockR + 656 | 0;
 $3912 = $arrayidx8655;
 $3913 = $3912;
 $3914 = HEAP32[$3913 >> 2] | 0;
 $3915 = $3912 + 4 | 0;
 $3916 = $3915;
 $3917 = HEAP32[$3916 >> 2] | 0;
 $arrayidx8659 = $blockR + 688 | 0;
 $3918 = $arrayidx8659;
 $3919 = $3918;
 $3920 = HEAP32[$3919 >> 2] | 0;
 $3921 = $3918 + 4 | 0;
 $3922 = $3921;
 $3923 = HEAP32[$3922 >> 2] | 0;
 $3924 = _i64Add($3920 | 0, $3923 | 0, $3914 | 0, $3917 | 0) | 0;
 $3925 = getTempRet0() | 0;
 $3926 = _bitshift64Shl($3914 | 0, $3917 | 0, 1) | 0;
 $3927 = getTempRet0() | 0;
 $3928 = $3926 & -2;
 $3929 = $3927 & 1;
 $3930 = ___muldi3($3928 | 0, $3929 | 0, $3920 | 0, 0) | 0;
 $3931 = getTempRet0() | 0;
 $3932 = _i64Add($3924 | 0, $3925 | 0, $3930 | 0, $3931 | 0) | 0;
 $3933 = getTempRet0() | 0;
 $arrayidx8681 = $blockR + 752 | 0;
 $3934 = $arrayidx8681;
 $3935 = $3934;
 $3936 = HEAP32[$3935 >> 2] | 0;
 $3937 = $3934 + 4 | 0;
 $3938 = $3937;
 $3939 = HEAP32[$3938 >> 2] | 0;
 $3940 = $3932 ^ $3936;
 $3941 = $3933 ^ $3939;
 $arrayidx8706 = $blockR + 720 | 0;
 $3942 = $arrayidx8706;
 $3943 = $3942;
 $3944 = HEAP32[$3943 >> 2] | 0;
 $3945 = $3942 + 4 | 0;
 $3946 = $3945;
 $3947 = HEAP32[$3946 >> 2] | 0;
 $3948 = _i64Add($3941 | 0, $3940 | 0, $3944 | 0, $3947 | 0) | 0;
 $3949 = getTempRet0() | 0;
 $3950 = _bitshift64Shl($3944 | 0, $3947 | 0, 1) | 0;
 $3951 = getTempRet0() | 0;
 $3952 = $3950 & -2;
 $3953 = $3951 & 1;
 $3954 = ___muldi3($3952 | 0, $3953 | 0, $3941 | 0, 0) | 0;
 $3955 = getTempRet0() | 0;
 $3956 = _i64Add($3948 | 0, $3949 | 0, $3954 | 0, $3955 | 0) | 0;
 $3957 = getTempRet0() | 0;
 $3958 = $3956 ^ $3920;
 $3959 = $3957 ^ $3923;
 $3960 = _bitshift64Lshr($3958 | 0, $3959 | 0, 24) | 0;
 $3961 = getTempRet0() | 0;
 $3962 = _bitshift64Shl($3958 | 0, $3959 | 0, 40) | 0;
 $3963 = getTempRet0() | 0;
 $3964 = $3960 | $3962;
 $3965 = $3961 | $3963;
 $3966 = _i64Add($3964 | 0, $3965 | 0, $3932 | 0, $3933 | 0) | 0;
 $3967 = getTempRet0() | 0;
 $3968 = _bitshift64Shl($3932 | 0, $3933 | 0, 1) | 0;
 $3969 = getTempRet0() | 0;
 $3970 = $3968 & -2;
 $3971 = $3969 & 1;
 $3972 = ___muldi3($3960 | 0, 0, $3970 | 0, $3971 | 0) | 0;
 $3973 = getTempRet0() | 0;
 $3974 = _i64Add($3966 | 0, $3967 | 0, $3972 | 0, $3973 | 0) | 0;
 $3975 = getTempRet0() | 0;
 $3976 = $arrayidx8655;
 $3977 = $3976;
 HEAP32[$3977 >> 2] = $3974;
 $3978 = $3976 + 4 | 0;
 $3979 = $3978;
 HEAP32[$3979 >> 2] = $3975;
 $3980 = $3974 ^ $3941;
 $3981 = $3975 ^ $3940;
 $3982 = _bitshift64Lshr($3980 | 0, $3981 | 0, 16) | 0;
 $3983 = getTempRet0() | 0;
 $3984 = _bitshift64Shl($3980 | 0, $3981 | 0, 48) | 0;
 $3985 = getTempRet0() | 0;
 $3986 = $3982 | $3984;
 $3987 = $3983 | $3985;
 $3988 = $arrayidx8681;
 $3989 = $3988;
 HEAP32[$3989 >> 2] = $3986;
 $3990 = $3988 + 4 | 0;
 $3991 = $3990;
 HEAP32[$3991 >> 2] = $3987;
 $3992 = _i64Add($3986 | 0, $3987 | 0, $3956 | 0, $3957 | 0) | 0;
 $3993 = getTempRet0() | 0;
 $3994 = _bitshift64Shl($3956 | 0, $3957 | 0, 1) | 0;
 $3995 = getTempRet0() | 0;
 $3996 = $3994 & -2;
 $3997 = $3995 & 1;
 $3998 = ___muldi3($3982 | 0, 0, $3996 | 0, $3997 | 0) | 0;
 $3999 = getTempRet0() | 0;
 $4000 = _i64Add($3992 | 0, $3993 | 0, $3998 | 0, $3999 | 0) | 0;
 $4001 = getTempRet0() | 0;
 $4002 = $4000 ^ $3964;
 $4003 = $4001 ^ $3965;
 $4004 = _bitshift64Lshr($4002 | 0, $4003 | 0, 63) | 0;
 $4005 = getTempRet0() | 0;
 $4006 = _bitshift64Shl($4002 | 0, $4003 | 0, 1) | 0;
 $4007 = getTempRet0() | 0;
 $4008 = $4004 | $4006;
 $4009 = $4005 | $4007;
 $4010 = $arrayidx8659;
 $4011 = $4010;
 HEAP32[$4011 >> 2] = $4008;
 $4012 = $4010 + 4 | 0;
 $4013 = $4012;
 HEAP32[$4013 >> 2] = $4009;
 $arrayidx8861 = $blockR + 664 | 0;
 $4014 = $arrayidx8861;
 $4015 = $4014;
 $4016 = HEAP32[$4015 >> 2] | 0;
 $4017 = $4014 + 4 | 0;
 $4018 = $4017;
 $4019 = HEAP32[$4018 >> 2] | 0;
 $arrayidx8865 = $blockR + 696 | 0;
 $4020 = $arrayidx8865;
 $4021 = $4020;
 $4022 = HEAP32[$4021 >> 2] | 0;
 $4023 = $4020 + 4 | 0;
 $4024 = $4023;
 $4025 = HEAP32[$4024 >> 2] | 0;
 $4026 = _i64Add($4022 | 0, $4025 | 0, $4016 | 0, $4019 | 0) | 0;
 $4027 = getTempRet0() | 0;
 $4028 = _bitshift64Shl($4016 | 0, $4019 | 0, 1) | 0;
 $4029 = getTempRet0() | 0;
 $4030 = $4028 & -2;
 $4031 = $4029 & 1;
 $4032 = ___muldi3($4030 | 0, $4031 | 0, $4022 | 0, 0) | 0;
 $4033 = getTempRet0() | 0;
 $4034 = _i64Add($4026 | 0, $4027 | 0, $4032 | 0, $4033 | 0) | 0;
 $4035 = getTempRet0() | 0;
 $arrayidx8887 = $blockR + 760 | 0;
 $4036 = $arrayidx8887;
 $4037 = $4036;
 $4038 = HEAP32[$4037 >> 2] | 0;
 $4039 = $4036 + 4 | 0;
 $4040 = $4039;
 $4041 = HEAP32[$4040 >> 2] | 0;
 $4042 = $4034 ^ $4038;
 $4043 = $4035 ^ $4041;
 $arrayidx8912 = $blockR + 728 | 0;
 $4044 = $arrayidx8912;
 $4045 = $4044;
 $4046 = HEAP32[$4045 >> 2] | 0;
 $4047 = $4044 + 4 | 0;
 $4048 = $4047;
 $4049 = HEAP32[$4048 >> 2] | 0;
 $4050 = _i64Add($4043 | 0, $4042 | 0, $4046 | 0, $4049 | 0) | 0;
 $4051 = getTempRet0() | 0;
 $4052 = _bitshift64Shl($4046 | 0, $4049 | 0, 1) | 0;
 $4053 = getTempRet0() | 0;
 $4054 = $4052 & -2;
 $4055 = $4053 & 1;
 $4056 = ___muldi3($4054 | 0, $4055 | 0, $4043 | 0, 0) | 0;
 $4057 = getTempRet0() | 0;
 $4058 = _i64Add($4050 | 0, $4051 | 0, $4056 | 0, $4057 | 0) | 0;
 $4059 = getTempRet0() | 0;
 $4060 = $4058 ^ $4022;
 $4061 = $4059 ^ $4025;
 $4062 = _bitshift64Lshr($4060 | 0, $4061 | 0, 24) | 0;
 $4063 = getTempRet0() | 0;
 $4064 = _bitshift64Shl($4060 | 0, $4061 | 0, 40) | 0;
 $4065 = getTempRet0() | 0;
 $4066 = $4062 | $4064;
 $4067 = $4063 | $4065;
 $4068 = _i64Add($4066 | 0, $4067 | 0, $4034 | 0, $4035 | 0) | 0;
 $4069 = getTempRet0() | 0;
 $4070 = _bitshift64Shl($4034 | 0, $4035 | 0, 1) | 0;
 $4071 = getTempRet0() | 0;
 $4072 = $4070 & -2;
 $4073 = $4071 & 1;
 $4074 = ___muldi3($4062 | 0, 0, $4072 | 0, $4073 | 0) | 0;
 $4075 = getTempRet0() | 0;
 $4076 = _i64Add($4068 | 0, $4069 | 0, $4074 | 0, $4075 | 0) | 0;
 $4077 = getTempRet0() | 0;
 $4078 = $arrayidx8861;
 $4079 = $4078;
 HEAP32[$4079 >> 2] = $4076;
 $4080 = $4078 + 4 | 0;
 $4081 = $4080;
 HEAP32[$4081 >> 2] = $4077;
 $4082 = $4076 ^ $4043;
 $4083 = $4077 ^ $4042;
 $4084 = _bitshift64Lshr($4082 | 0, $4083 | 0, 16) | 0;
 $4085 = getTempRet0() | 0;
 $4086 = _bitshift64Shl($4082 | 0, $4083 | 0, 48) | 0;
 $4087 = getTempRet0() | 0;
 $4088 = $4084 | $4086;
 $4089 = $4085 | $4087;
 $4090 = _i64Add($4088 | 0, $4089 | 0, $4058 | 0, $4059 | 0) | 0;
 $4091 = getTempRet0() | 0;
 $4092 = _bitshift64Shl($4058 | 0, $4059 | 0, 1) | 0;
 $4093 = getTempRet0() | 0;
 $4094 = $4092 & -2;
 $4095 = $4093 & 1;
 $4096 = ___muldi3($4084 | 0, 0, $4094 | 0, $4095 | 0) | 0;
 $4097 = getTempRet0() | 0;
 $4098 = _i64Add($4090 | 0, $4091 | 0, $4096 | 0, $4097 | 0) | 0;
 $4099 = getTempRet0() | 0;
 $4100 = $4098 ^ $4066;
 $4101 = $4099 ^ $4067;
 $4102 = _bitshift64Lshr($4100 | 0, $4101 | 0, 63) | 0;
 $4103 = getTempRet0() | 0;
 $4104 = _bitshift64Shl($4100 | 0, $4101 | 0, 1) | 0;
 $4105 = getTempRet0() | 0;
 $4106 = $4102 | $4104;
 $4107 = $4103 | $4105;
 $4108 = $arrayidx8865;
 $4109 = $4108;
 HEAP32[$4109 >> 2] = $4106;
 $4110 = $4108 + 4 | 0;
 $4111 = $4110;
 HEAP32[$4111 >> 2] = $4107;
 $4112 = _i64Add($3906 | 0, $3907 | 0, $3762 | 0, $3763 | 0) | 0;
 $4113 = getTempRet0() | 0;
 $4114 = _bitshift64Shl($3762 | 0, $3763 | 0, 1) | 0;
 $4115 = getTempRet0() | 0;
 $4116 = $4114 & -2;
 $4117 = $4115 & 1;
 $4118 = ___muldi3($3906 | 0, 0, $4116 | 0, $4117 | 0) | 0;
 $4119 = getTempRet0() | 0;
 $4120 = _i64Add($4112 | 0, $4113 | 0, $4118 | 0, $4119 | 0) | 0;
 $4121 = getTempRet0() | 0;
 $4122 = $4088 ^ $4120;
 $4123 = $4089 ^ $4121;
 $4124 = _i64Add($4123 | 0, $4122 | 0, $4000 | 0, $4001 | 0) | 0;
 $4125 = getTempRet0() | 0;
 $4126 = _bitshift64Shl($4000 | 0, $4001 | 0, 1) | 0;
 $4127 = getTempRet0() | 0;
 $4128 = $4126 & -2;
 $4129 = $4127 & 1;
 $4130 = ___muldi3($4123 | 0, 0, $4128 | 0, $4129 | 0) | 0;
 $4131 = getTempRet0() | 0;
 $4132 = _i64Add($4124 | 0, $4125 | 0, $4130 | 0, $4131 | 0) | 0;
 $4133 = getTempRet0() | 0;
 $4134 = $4132 ^ $3906;
 $4135 = $4133 ^ $3907;
 $4136 = _bitshift64Lshr($4134 | 0, $4135 | 0, 24) | 0;
 $4137 = getTempRet0() | 0;
 $4138 = _bitshift64Shl($4134 | 0, $4135 | 0, 40) | 0;
 $4139 = getTempRet0() | 0;
 $4140 = $4136 | $4138;
 $4141 = $4137 | $4139;
 $4142 = _i64Add($4140 | 0, $4141 | 0, $4120 | 0, $4121 | 0) | 0;
 $4143 = getTempRet0() | 0;
 $4144 = _bitshift64Shl($4120 | 0, $4121 | 0, 1) | 0;
 $4145 = getTempRet0() | 0;
 $4146 = $4144 & -2;
 $4147 = $4145 & 1;
 $4148 = ___muldi3($4136 | 0, 0, $4146 | 0, $4147 | 0) | 0;
 $4149 = getTempRet0() | 0;
 $4150 = _i64Add($4142 | 0, $4143 | 0, $4148 | 0, $4149 | 0) | 0;
 $4151 = getTempRet0() | 0;
 $4152 = $add$ptr8242;
 $4153 = $4152;
 HEAP32[$4153 >> 2] = $4150;
 $4154 = $4152 + 4 | 0;
 $4155 = $4154;
 HEAP32[$4155 >> 2] = $4151;
 $4156 = $4150 ^ $4123;
 $4157 = $4151 ^ $4122;
 $4158 = _bitshift64Lshr($4156 | 0, $4157 | 0, 16) | 0;
 $4159 = getTempRet0() | 0;
 $4160 = _bitshift64Shl($4156 | 0, $4157 | 0, 48) | 0;
 $4161 = getTempRet0() | 0;
 $4162 = $4158 | $4160;
 $4163 = $4159 | $4161;
 $4164 = $arrayidx8887;
 $4165 = $4164;
 HEAP32[$4165 >> 2] = $4162;
 $4166 = $4164 + 4 | 0;
 $4167 = $4166;
 HEAP32[$4167 >> 2] = $4163;
 $4168 = _i64Add($4162 | 0, $4163 | 0, $4132 | 0, $4133 | 0) | 0;
 $4169 = getTempRet0() | 0;
 $4170 = _bitshift64Shl($4132 | 0, $4133 | 0, 1) | 0;
 $4171 = getTempRet0() | 0;
 $4172 = $4170 & -2;
 $4173 = $4171 & 1;
 $4174 = ___muldi3($4158 | 0, 0, $4172 | 0, $4173 | 0) | 0;
 $4175 = getTempRet0() | 0;
 $4176 = _i64Add($4168 | 0, $4169 | 0, $4174 | 0, $4175 | 0) | 0;
 $4177 = getTempRet0() | 0;
 $4178 = $arrayidx8706;
 $4179 = $4178;
 HEAP32[$4179 >> 2] = $4176;
 $4180 = $4178 + 4 | 0;
 $4181 = $4180;
 HEAP32[$4181 >> 2] = $4177;
 $4182 = $4176 ^ $4140;
 $4183 = $4177 ^ $4141;
 $4184 = _bitshift64Lshr($4182 | 0, $4183 | 0, 63) | 0;
 $4185 = getTempRet0() | 0;
 $4186 = _bitshift64Shl($4182 | 0, $4183 | 0, 1) | 0;
 $4187 = getTempRet0() | 0;
 $4188 = $4184 | $4186;
 $4189 = $4185 | $4187;
 $4190 = $arrayidx8453;
 $4191 = $4190;
 HEAP32[$4191 >> 2] = $4188;
 $4192 = $4190 + 4 | 0;
 $4193 = $4192;
 HEAP32[$4193 >> 2] = $4189;
 $4194 = _i64Add($4008 | 0, $4009 | 0, $3868 | 0, $3869 | 0) | 0;
 $4195 = getTempRet0() | 0;
 $4196 = _bitshift64Shl($3868 | 0, $3869 | 0, 1) | 0;
 $4197 = getTempRet0() | 0;
 $4198 = $4196 & -2;
 $4199 = $4197 & 1;
 $4200 = ___muldi3($4008 | 0, 0, $4198 | 0, $4199 | 0) | 0;
 $4201 = getTempRet0() | 0;
 $4202 = _i64Add($4194 | 0, $4195 | 0, $4200 | 0, $4201 | 0) | 0;
 $4203 = getTempRet0() | 0;
 $4204 = $4202 ^ $3774;
 $4205 = $4203 ^ $3775;
 $4206 = _i64Add($4098 | 0, $4099 | 0, $4205 | 0, $4204 | 0) | 0;
 $4207 = getTempRet0() | 0;
 $4208 = _bitshift64Shl($4098 | 0, $4099 | 0, 1) | 0;
 $4209 = getTempRet0() | 0;
 $4210 = $4208 & -2;
 $4211 = $4209 & 1;
 $4212 = ___muldi3($4210 | 0, $4211 | 0, $4205 | 0, 0) | 0;
 $4213 = getTempRet0() | 0;
 $4214 = _i64Add($4206 | 0, $4207 | 0, $4212 | 0, $4213 | 0) | 0;
 $4215 = getTempRet0() | 0;
 $4216 = $4214 ^ $4008;
 $4217 = $4215 ^ $4009;
 $4218 = _bitshift64Lshr($4216 | 0, $4217 | 0, 24) | 0;
 $4219 = getTempRet0() | 0;
 $4220 = _bitshift64Shl($4216 | 0, $4217 | 0, 40) | 0;
 $4221 = getTempRet0() | 0;
 $4222 = $4218 | $4220;
 $4223 = $4219 | $4221;
 $4224 = _i64Add($4222 | 0, $4223 | 0, $4202 | 0, $4203 | 0) | 0;
 $4225 = getTempRet0() | 0;
 $4226 = _bitshift64Shl($4202 | 0, $4203 | 0, 1) | 0;
 $4227 = getTempRet0() | 0;
 $4228 = $4226 & -2;
 $4229 = $4227 & 1;
 $4230 = ___muldi3($4218 | 0, 0, $4228 | 0, $4229 | 0) | 0;
 $4231 = getTempRet0() | 0;
 $4232 = _i64Add($4224 | 0, $4225 | 0, $4230 | 0, $4231 | 0) | 0;
 $4233 = getTempRet0() | 0;
 $4234 = $arrayidx8449;
 $4235 = $4234;
 HEAP32[$4235 >> 2] = $4232;
 $4236 = $4234 + 4 | 0;
 $4237 = $4236;
 HEAP32[$4237 >> 2] = $4233;
 $4238 = $4232 ^ $4205;
 $4239 = $4233 ^ $4204;
 $4240 = _bitshift64Lshr($4238 | 0, $4239 | 0, 16) | 0;
 $4241 = getTempRet0() | 0;
 $4242 = _bitshift64Shl($4238 | 0, $4239 | 0, 48) | 0;
 $4243 = getTempRet0() | 0;
 $4244 = $4240 | $4242;
 $4245 = $4241 | $4243;
 $4246 = $arrayidx8269;
 $4247 = $4246;
 HEAP32[$4247 >> 2] = $4244;
 $4248 = $4246 + 4 | 0;
 $4249 = $4248;
 HEAP32[$4249 >> 2] = $4245;
 $4250 = _i64Add($4244 | 0, $4245 | 0, $4214 | 0, $4215 | 0) | 0;
 $4251 = getTempRet0() | 0;
 $4252 = _bitshift64Shl($4214 | 0, $4215 | 0, 1) | 0;
 $4253 = getTempRet0() | 0;
 $4254 = $4252 & -2;
 $4255 = $4253 & 1;
 $4256 = ___muldi3($4240 | 0, 0, $4254 | 0, $4255 | 0) | 0;
 $4257 = getTempRet0() | 0;
 $4258 = _i64Add($4250 | 0, $4251 | 0, $4256 | 0, $4257 | 0) | 0;
 $4259 = getTempRet0() | 0;
 $4260 = $arrayidx8912;
 $4261 = $4260;
 HEAP32[$4261 >> 2] = $4258;
 $4262 = $4260 + 4 | 0;
 $4263 = $4262;
 HEAP32[$4263 >> 2] = $4259;
 $4264 = $4258 ^ $4222;
 $4265 = $4259 ^ $4223;
 $4266 = _bitshift64Lshr($4264 | 0, $4265 | 0, 63) | 0;
 $4267 = getTempRet0() | 0;
 $4268 = _bitshift64Shl($4264 | 0, $4265 | 0, 1) | 0;
 $4269 = getTempRet0() | 0;
 $4270 = $4266 | $4268;
 $4271 = $4267 | $4269;
 $4272 = $arrayidx8659;
 $4273 = $4272;
 HEAP32[$4273 >> 2] = $4270;
 $4274 = $4272 + 4 | 0;
 $4275 = $4274;
 HEAP32[$4275 >> 2] = $4271;
 $4276 = _i64Add($4106 | 0, $4107 | 0, $3974 | 0, $3975 | 0) | 0;
 $4277 = getTempRet0() | 0;
 $4278 = _bitshift64Shl($3974 | 0, $3975 | 0, 1) | 0;
 $4279 = getTempRet0() | 0;
 $4280 = $4278 & -2;
 $4281 = $4279 & 1;
 $4282 = ___muldi3($4106 | 0, 0, $4280 | 0, $4281 | 0) | 0;
 $4283 = getTempRet0() | 0;
 $4284 = _i64Add($4276 | 0, $4277 | 0, $4282 | 0, $4283 | 0) | 0;
 $4285 = getTempRet0() | 0;
 $4286 = $4284 ^ $3880;
 $4287 = $4285 ^ $3881;
 $4288 = _i64Add($4287 | 0, $4286 | 0, $3788 | 0, $3789 | 0) | 0;
 $4289 = getTempRet0() | 0;
 $4290 = _bitshift64Shl($3788 | 0, $3789 | 0, 1) | 0;
 $4291 = getTempRet0() | 0;
 $4292 = $4290 & -2;
 $4293 = $4291 & 1;
 $4294 = ___muldi3($4287 | 0, 0, $4292 | 0, $4293 | 0) | 0;
 $4295 = getTempRet0() | 0;
 $4296 = _i64Add($4288 | 0, $4289 | 0, $4294 | 0, $4295 | 0) | 0;
 $4297 = getTempRet0() | 0;
 $4298 = $4296 ^ $4106;
 $4299 = $4297 ^ $4107;
 $4300 = _bitshift64Lshr($4298 | 0, $4299 | 0, 24) | 0;
 $4301 = getTempRet0() | 0;
 $4302 = _bitshift64Shl($4298 | 0, $4299 | 0, 40) | 0;
 $4303 = getTempRet0() | 0;
 $4304 = $4300 | $4302;
 $4305 = $4301 | $4303;
 $4306 = _i64Add($4304 | 0, $4305 | 0, $4284 | 0, $4285 | 0) | 0;
 $4307 = getTempRet0() | 0;
 $4308 = _bitshift64Shl($4284 | 0, $4285 | 0, 1) | 0;
 $4309 = getTempRet0() | 0;
 $4310 = $4308 & -2;
 $4311 = $4309 & 1;
 $4312 = ___muldi3($4300 | 0, 0, $4310 | 0, $4311 | 0) | 0;
 $4313 = getTempRet0() | 0;
 $4314 = _i64Add($4306 | 0, $4307 | 0, $4312 | 0, $4313 | 0) | 0;
 $4315 = getTempRet0() | 0;
 $4316 = $arrayidx8655;
 $4317 = $4316;
 HEAP32[$4317 >> 2] = $4314;
 $4318 = $4316 + 4 | 0;
 $4319 = $4318;
 HEAP32[$4319 >> 2] = $4315;
 $4320 = $4314 ^ $4287;
 $4321 = $4315 ^ $4286;
 $4322 = _bitshift64Lshr($4320 | 0, $4321 | 0, 16) | 0;
 $4323 = getTempRet0() | 0;
 $4324 = _bitshift64Shl($4320 | 0, $4321 | 0, 48) | 0;
 $4325 = getTempRet0() | 0;
 $4326 = $4322 | $4324;
 $4327 = $4323 | $4325;
 $4328 = $arrayidx8475;
 $4329 = $4328;
 HEAP32[$4329 >> 2] = $4326;
 $4330 = $4328 + 4 | 0;
 $4331 = $4330;
 HEAP32[$4331 >> 2] = $4327;
 $4332 = _i64Add($4326 | 0, $4327 | 0, $4296 | 0, $4297 | 0) | 0;
 $4333 = getTempRet0() | 0;
 $4334 = _bitshift64Shl($4296 | 0, $4297 | 0, 1) | 0;
 $4335 = getTempRet0() | 0;
 $4336 = $4334 & -2;
 $4337 = $4335 & 1;
 $4338 = ___muldi3($4322 | 0, 0, $4336 | 0, $4337 | 0) | 0;
 $4339 = getTempRet0() | 0;
 $4340 = _i64Add($4332 | 0, $4333 | 0, $4338 | 0, $4339 | 0) | 0;
 $4341 = getTempRet0() | 0;
 $4342 = $arrayidx8294;
 $4343 = $4342;
 HEAP32[$4343 >> 2] = $4340;
 $4344 = $4342 + 4 | 0;
 $4345 = $4344;
 HEAP32[$4345 >> 2] = $4341;
 $4346 = $4340 ^ $4304;
 $4347 = $4341 ^ $4305;
 $4348 = _bitshift64Lshr($4346 | 0, $4347 | 0, 63) | 0;
 $4349 = getTempRet0() | 0;
 $4350 = _bitshift64Shl($4346 | 0, $4347 | 0, 1) | 0;
 $4351 = getTempRet0() | 0;
 $4352 = $4348 | $4350;
 $4353 = $4349 | $4351;
 $4354 = $arrayidx8865;
 $4355 = $4354;
 HEAP32[$4355 >> 2] = $4352;
 $4356 = $4354 + 4 | 0;
 $4357 = $4356;
 HEAP32[$4357 >> 2] = $4353;
 $4358 = _i64Add($4076 | 0, $4077 | 0, $3800 | 0, $3801 | 0) | 0;
 $4359 = getTempRet0() | 0;
 $4360 = _bitshift64Shl($4076 | 0, $4077 | 0, 1) | 0;
 $4361 = getTempRet0() | 0;
 $4362 = $4360 & -2;
 $4363 = $4361 & 1;
 $4364 = ___muldi3($4362 | 0, $4363 | 0, $3800 | 0, 0) | 0;
 $4365 = getTempRet0() | 0;
 $4366 = _i64Add($4358 | 0, $4359 | 0, $4364 | 0, $4365 | 0) | 0;
 $4367 = getTempRet0() | 0;
 $4368 = $4366 ^ $3986;
 $4369 = $4367 ^ $3987;
 $4370 = _i64Add($4369 | 0, $4368 | 0, $3894 | 0, $3895 | 0) | 0;
 $4371 = getTempRet0() | 0;
 $4372 = _bitshift64Shl($3894 | 0, $3895 | 0, 1) | 0;
 $4373 = getTempRet0() | 0;
 $4374 = $4372 & -2;
 $4375 = $4373 & 1;
 $4376 = ___muldi3($4369 | 0, 0, $4374 | 0, $4375 | 0) | 0;
 $4377 = getTempRet0() | 0;
 $4378 = _i64Add($4370 | 0, $4371 | 0, $4376 | 0, $4377 | 0) | 0;
 $4379 = getTempRet0() | 0;
 $4380 = $4378 ^ $3800;
 $4381 = $4379 ^ $3801;
 $4382 = _bitshift64Lshr($4380 | 0, $4381 | 0, 24) | 0;
 $4383 = getTempRet0() | 0;
 $4384 = _bitshift64Shl($4380 | 0, $4381 | 0, 40) | 0;
 $4385 = getTempRet0() | 0;
 $4386 = $4382 | $4384;
 $4387 = $4383 | $4385;
 $4388 = _i64Add($4386 | 0, $4387 | 0, $4366 | 0, $4367 | 0) | 0;
 $4389 = getTempRet0() | 0;
 $4390 = _bitshift64Shl($4366 | 0, $4367 | 0, 1) | 0;
 $4391 = getTempRet0() | 0;
 $4392 = $4390 & -2;
 $4393 = $4391 & 1;
 $4394 = ___muldi3($4382 | 0, 0, $4392 | 0, $4393 | 0) | 0;
 $4395 = getTempRet0() | 0;
 $4396 = _i64Add($4388 | 0, $4389 | 0, $4394 | 0, $4395 | 0) | 0;
 $4397 = getTempRet0() | 0;
 $4398 = $arrayidx8861;
 $4399 = $4398;
 HEAP32[$4399 >> 2] = $4396;
 $4400 = $4398 + 4 | 0;
 $4401 = $4400;
 HEAP32[$4401 >> 2] = $4397;
 $4402 = $4396 ^ $4369;
 $4403 = $4397 ^ $4368;
 $4404 = _bitshift64Lshr($4402 | 0, $4403 | 0, 16) | 0;
 $4405 = getTempRet0() | 0;
 $4406 = _bitshift64Shl($4402 | 0, $4403 | 0, 48) | 0;
 $4407 = getTempRet0() | 0;
 $4408 = $4404 | $4406;
 $4409 = $4405 | $4407;
 $4410 = $arrayidx8681;
 $4411 = $4410;
 HEAP32[$4411 >> 2] = $4408;
 $4412 = $4410 + 4 | 0;
 $4413 = $4412;
 HEAP32[$4413 >> 2] = $4409;
 $4414 = _i64Add($4408 | 0, $4409 | 0, $4378 | 0, $4379 | 0) | 0;
 $4415 = getTempRet0() | 0;
 $4416 = _bitshift64Shl($4378 | 0, $4379 | 0, 1) | 0;
 $4417 = getTempRet0() | 0;
 $4418 = $4416 & -2;
 $4419 = $4417 & 1;
 $4420 = ___muldi3($4404 | 0, 0, $4418 | 0, $4419 | 0) | 0;
 $4421 = getTempRet0() | 0;
 $4422 = _i64Add($4414 | 0, $4415 | 0, $4420 | 0, $4421 | 0) | 0;
 $4423 = getTempRet0() | 0;
 $4424 = $arrayidx8500;
 $4425 = $4424;
 HEAP32[$4425 >> 2] = $4422;
 $4426 = $4424 + 4 | 0;
 $4427 = $4426;
 HEAP32[$4427 >> 2] = $4423;
 $4428 = $4422 ^ $4386;
 $4429 = $4423 ^ $4387;
 $4430 = _bitshift64Lshr($4428 | 0, $4429 | 0, 63) | 0;
 $4431 = getTempRet0() | 0;
 $4432 = _bitshift64Shl($4428 | 0, $4429 | 0, 1) | 0;
 $4433 = getTempRet0() | 0;
 $4434 = $4430 | $4432;
 $4435 = $4431 | $4433;
 $4436 = $arrayidx8247;
 $4437 = $4436;
 HEAP32[$4437 >> 2] = $4434;
 $4438 = $4436 + 4 | 0;
 $4439 = $4438;
 HEAP32[$4439 >> 2] = $4435;
 $add$ptr9892 = $blockR + 768 | 0;
 $4440 = $add$ptr9892;
 $4441 = $4440;
 $4442 = HEAP32[$4441 >> 2] | 0;
 $4443 = $4440 + 4 | 0;
 $4444 = $4443;
 $4445 = HEAP32[$4444 >> 2] | 0;
 $arrayidx9897 = $blockR + 800 | 0;
 $4446 = $arrayidx9897;
 $4447 = $4446;
 $4448 = HEAP32[$4447 >> 2] | 0;
 $4449 = $4446 + 4 | 0;
 $4450 = $4449;
 $4451 = HEAP32[$4450 >> 2] | 0;
 $4452 = _i64Add($4448 | 0, $4451 | 0, $4442 | 0, $4445 | 0) | 0;
 $4453 = getTempRet0() | 0;
 $4454 = _bitshift64Shl($4442 | 0, $4445 | 0, 1) | 0;
 $4455 = getTempRet0() | 0;
 $4456 = $4454 & -2;
 $4457 = $4455 & 1;
 $4458 = ___muldi3($4456 | 0, $4457 | 0, $4448 | 0, 0) | 0;
 $4459 = getTempRet0() | 0;
 $4460 = _i64Add($4452 | 0, $4453 | 0, $4458 | 0, $4459 | 0) | 0;
 $4461 = getTempRet0() | 0;
 $arrayidx9919 = $blockR + 864 | 0;
 $4462 = $arrayidx9919;
 $4463 = $4462;
 $4464 = HEAP32[$4463 >> 2] | 0;
 $4465 = $4462 + 4 | 0;
 $4466 = $4465;
 $4467 = HEAP32[$4466 >> 2] | 0;
 $4468 = $4460 ^ $4464;
 $4469 = $4461 ^ $4467;
 $arrayidx9944 = $blockR + 832 | 0;
 $4470 = $arrayidx9944;
 $4471 = $4470;
 $4472 = HEAP32[$4471 >> 2] | 0;
 $4473 = $4470 + 4 | 0;
 $4474 = $4473;
 $4475 = HEAP32[$4474 >> 2] | 0;
 $4476 = _i64Add($4469 | 0, $4468 | 0, $4472 | 0, $4475 | 0) | 0;
 $4477 = getTempRet0() | 0;
 $4478 = _bitshift64Shl($4472 | 0, $4475 | 0, 1) | 0;
 $4479 = getTempRet0() | 0;
 $4480 = $4478 & -2;
 $4481 = $4479 & 1;
 $4482 = ___muldi3($4480 | 0, $4481 | 0, $4469 | 0, 0) | 0;
 $4483 = getTempRet0() | 0;
 $4484 = _i64Add($4476 | 0, $4477 | 0, $4482 | 0, $4483 | 0) | 0;
 $4485 = getTempRet0() | 0;
 $4486 = $4484 ^ $4448;
 $4487 = $4485 ^ $4451;
 $4488 = _bitshift64Lshr($4486 | 0, $4487 | 0, 24) | 0;
 $4489 = getTempRet0() | 0;
 $4490 = _bitshift64Shl($4486 | 0, $4487 | 0, 40) | 0;
 $4491 = getTempRet0() | 0;
 $4492 = $4488 | $4490;
 $4493 = $4489 | $4491;
 $4494 = _i64Add($4492 | 0, $4493 | 0, $4460 | 0, $4461 | 0) | 0;
 $4495 = getTempRet0() | 0;
 $4496 = _bitshift64Shl($4460 | 0, $4461 | 0, 1) | 0;
 $4497 = getTempRet0() | 0;
 $4498 = $4496 & -2;
 $4499 = $4497 & 1;
 $4500 = ___muldi3($4488 | 0, 0, $4498 | 0, $4499 | 0) | 0;
 $4501 = getTempRet0() | 0;
 $4502 = _i64Add($4494 | 0, $4495 | 0, $4500 | 0, $4501 | 0) | 0;
 $4503 = getTempRet0() | 0;
 $4504 = $add$ptr9892;
 $4505 = $4504;
 HEAP32[$4505 >> 2] = $4502;
 $4506 = $4504 + 4 | 0;
 $4507 = $4506;
 HEAP32[$4507 >> 2] = $4503;
 $4508 = $4502 ^ $4469;
 $4509 = $4503 ^ $4468;
 $4510 = _bitshift64Lshr($4508 | 0, $4509 | 0, 16) | 0;
 $4511 = getTempRet0() | 0;
 $4512 = _bitshift64Shl($4508 | 0, $4509 | 0, 48) | 0;
 $4513 = getTempRet0() | 0;
 $4514 = $4510 | $4512;
 $4515 = $4511 | $4513;
 $4516 = $arrayidx9919;
 $4517 = $4516;
 HEAP32[$4517 >> 2] = $4514;
 $4518 = $4516 + 4 | 0;
 $4519 = $4518;
 HEAP32[$4519 >> 2] = $4515;
 $4520 = _i64Add($4514 | 0, $4515 | 0, $4484 | 0, $4485 | 0) | 0;
 $4521 = getTempRet0() | 0;
 $4522 = _bitshift64Shl($4484 | 0, $4485 | 0, 1) | 0;
 $4523 = getTempRet0() | 0;
 $4524 = $4522 & -2;
 $4525 = $4523 & 1;
 $4526 = ___muldi3($4510 | 0, 0, $4524 | 0, $4525 | 0) | 0;
 $4527 = getTempRet0() | 0;
 $4528 = _i64Add($4520 | 0, $4521 | 0, $4526 | 0, $4527 | 0) | 0;
 $4529 = getTempRet0() | 0;
 $4530 = $arrayidx9944;
 $4531 = $4530;
 HEAP32[$4531 >> 2] = $4528;
 $4532 = $4530 + 4 | 0;
 $4533 = $4532;
 HEAP32[$4533 >> 2] = $4529;
 $4534 = $4528 ^ $4492;
 $4535 = $4529 ^ $4493;
 $4536 = _bitshift64Lshr($4534 | 0, $4535 | 0, 63) | 0;
 $4537 = getTempRet0() | 0;
 $4538 = _bitshift64Shl($4534 | 0, $4535 | 0, 1) | 0;
 $4539 = getTempRet0() | 0;
 $4540 = $4536 | $4538;
 $4541 = $4537 | $4539;
 $4542 = $arrayidx9897;
 $4543 = $4542;
 HEAP32[$4543 >> 2] = $4540;
 $4544 = $4542 + 4 | 0;
 $4545 = $4544;
 HEAP32[$4545 >> 2] = $4541;
 $arrayidx10099 = $blockR + 776 | 0;
 $4546 = $arrayidx10099;
 $4547 = $4546;
 $4548 = HEAP32[$4547 >> 2] | 0;
 $4549 = $4546 + 4 | 0;
 $4550 = $4549;
 $4551 = HEAP32[$4550 >> 2] | 0;
 $arrayidx10103 = $blockR + 808 | 0;
 $4552 = $arrayidx10103;
 $4553 = $4552;
 $4554 = HEAP32[$4553 >> 2] | 0;
 $4555 = $4552 + 4 | 0;
 $4556 = $4555;
 $4557 = HEAP32[$4556 >> 2] | 0;
 $4558 = _i64Add($4554 | 0, $4557 | 0, $4548 | 0, $4551 | 0) | 0;
 $4559 = getTempRet0() | 0;
 $4560 = _bitshift64Shl($4548 | 0, $4551 | 0, 1) | 0;
 $4561 = getTempRet0() | 0;
 $4562 = $4560 & -2;
 $4563 = $4561 & 1;
 $4564 = ___muldi3($4562 | 0, $4563 | 0, $4554 | 0, 0) | 0;
 $4565 = getTempRet0() | 0;
 $4566 = _i64Add($4558 | 0, $4559 | 0, $4564 | 0, $4565 | 0) | 0;
 $4567 = getTempRet0() | 0;
 $arrayidx10125 = $blockR + 872 | 0;
 $4568 = $arrayidx10125;
 $4569 = $4568;
 $4570 = HEAP32[$4569 >> 2] | 0;
 $4571 = $4568 + 4 | 0;
 $4572 = $4571;
 $4573 = HEAP32[$4572 >> 2] | 0;
 $4574 = $4566 ^ $4570;
 $4575 = $4567 ^ $4573;
 $arrayidx10150 = $blockR + 840 | 0;
 $4576 = $arrayidx10150;
 $4577 = $4576;
 $4578 = HEAP32[$4577 >> 2] | 0;
 $4579 = $4576 + 4 | 0;
 $4580 = $4579;
 $4581 = HEAP32[$4580 >> 2] | 0;
 $4582 = _i64Add($4575 | 0, $4574 | 0, $4578 | 0, $4581 | 0) | 0;
 $4583 = getTempRet0() | 0;
 $4584 = _bitshift64Shl($4578 | 0, $4581 | 0, 1) | 0;
 $4585 = getTempRet0() | 0;
 $4586 = $4584 & -2;
 $4587 = $4585 & 1;
 $4588 = ___muldi3($4586 | 0, $4587 | 0, $4575 | 0, 0) | 0;
 $4589 = getTempRet0() | 0;
 $4590 = _i64Add($4582 | 0, $4583 | 0, $4588 | 0, $4589 | 0) | 0;
 $4591 = getTempRet0() | 0;
 $4592 = $4590 ^ $4554;
 $4593 = $4591 ^ $4557;
 $4594 = _bitshift64Lshr($4592 | 0, $4593 | 0, 24) | 0;
 $4595 = getTempRet0() | 0;
 $4596 = _bitshift64Shl($4592 | 0, $4593 | 0, 40) | 0;
 $4597 = getTempRet0() | 0;
 $4598 = $4594 | $4596;
 $4599 = $4595 | $4597;
 $4600 = _i64Add($4598 | 0, $4599 | 0, $4566 | 0, $4567 | 0) | 0;
 $4601 = getTempRet0() | 0;
 $4602 = _bitshift64Shl($4566 | 0, $4567 | 0, 1) | 0;
 $4603 = getTempRet0() | 0;
 $4604 = $4602 & -2;
 $4605 = $4603 & 1;
 $4606 = ___muldi3($4594 | 0, 0, $4604 | 0, $4605 | 0) | 0;
 $4607 = getTempRet0() | 0;
 $4608 = _i64Add($4600 | 0, $4601 | 0, $4606 | 0, $4607 | 0) | 0;
 $4609 = getTempRet0() | 0;
 $4610 = $arrayidx10099;
 $4611 = $4610;
 HEAP32[$4611 >> 2] = $4608;
 $4612 = $4610 + 4 | 0;
 $4613 = $4612;
 HEAP32[$4613 >> 2] = $4609;
 $4614 = $4608 ^ $4575;
 $4615 = $4609 ^ $4574;
 $4616 = _bitshift64Lshr($4614 | 0, $4615 | 0, 16) | 0;
 $4617 = getTempRet0() | 0;
 $4618 = _bitshift64Shl($4614 | 0, $4615 | 0, 48) | 0;
 $4619 = getTempRet0() | 0;
 $4620 = $4616 | $4618;
 $4621 = $4617 | $4619;
 $4622 = $arrayidx10125;
 $4623 = $4622;
 HEAP32[$4623 >> 2] = $4620;
 $4624 = $4622 + 4 | 0;
 $4625 = $4624;
 HEAP32[$4625 >> 2] = $4621;
 $4626 = _i64Add($4620 | 0, $4621 | 0, $4590 | 0, $4591 | 0) | 0;
 $4627 = getTempRet0() | 0;
 $4628 = _bitshift64Shl($4590 | 0, $4591 | 0, 1) | 0;
 $4629 = getTempRet0() | 0;
 $4630 = $4628 & -2;
 $4631 = $4629 & 1;
 $4632 = ___muldi3($4616 | 0, 0, $4630 | 0, $4631 | 0) | 0;
 $4633 = getTempRet0() | 0;
 $4634 = _i64Add($4626 | 0, $4627 | 0, $4632 | 0, $4633 | 0) | 0;
 $4635 = getTempRet0() | 0;
 $4636 = $arrayidx10150;
 $4637 = $4636;
 HEAP32[$4637 >> 2] = $4634;
 $4638 = $4636 + 4 | 0;
 $4639 = $4638;
 HEAP32[$4639 >> 2] = $4635;
 $4640 = $4634 ^ $4598;
 $4641 = $4635 ^ $4599;
 $4642 = _bitshift64Lshr($4640 | 0, $4641 | 0, 63) | 0;
 $4643 = getTempRet0() | 0;
 $4644 = _bitshift64Shl($4640 | 0, $4641 | 0, 1) | 0;
 $4645 = getTempRet0() | 0;
 $4646 = $4642 | $4644;
 $4647 = $4643 | $4645;
 $4648 = $arrayidx10103;
 $4649 = $4648;
 HEAP32[$4649 >> 2] = $4646;
 $4650 = $4648 + 4 | 0;
 $4651 = $4650;
 HEAP32[$4651 >> 2] = $4647;
 $arrayidx10305 = $blockR + 784 | 0;
 $4652 = $arrayidx10305;
 $4653 = $4652;
 $4654 = HEAP32[$4653 >> 2] | 0;
 $4655 = $4652 + 4 | 0;
 $4656 = $4655;
 $4657 = HEAP32[$4656 >> 2] | 0;
 $arrayidx10309 = $blockR + 816 | 0;
 $4658 = $arrayidx10309;
 $4659 = $4658;
 $4660 = HEAP32[$4659 >> 2] | 0;
 $4661 = $4658 + 4 | 0;
 $4662 = $4661;
 $4663 = HEAP32[$4662 >> 2] | 0;
 $4664 = _i64Add($4660 | 0, $4663 | 0, $4654 | 0, $4657 | 0) | 0;
 $4665 = getTempRet0() | 0;
 $4666 = _bitshift64Shl($4654 | 0, $4657 | 0, 1) | 0;
 $4667 = getTempRet0() | 0;
 $4668 = $4666 & -2;
 $4669 = $4667 & 1;
 $4670 = ___muldi3($4668 | 0, $4669 | 0, $4660 | 0, 0) | 0;
 $4671 = getTempRet0() | 0;
 $4672 = _i64Add($4664 | 0, $4665 | 0, $4670 | 0, $4671 | 0) | 0;
 $4673 = getTempRet0() | 0;
 $arrayidx10331 = $blockR + 880 | 0;
 $4674 = $arrayidx10331;
 $4675 = $4674;
 $4676 = HEAP32[$4675 >> 2] | 0;
 $4677 = $4674 + 4 | 0;
 $4678 = $4677;
 $4679 = HEAP32[$4678 >> 2] | 0;
 $4680 = $4672 ^ $4676;
 $4681 = $4673 ^ $4679;
 $arrayidx10356 = $blockR + 848 | 0;
 $4682 = $arrayidx10356;
 $4683 = $4682;
 $4684 = HEAP32[$4683 >> 2] | 0;
 $4685 = $4682 + 4 | 0;
 $4686 = $4685;
 $4687 = HEAP32[$4686 >> 2] | 0;
 $4688 = _i64Add($4681 | 0, $4680 | 0, $4684 | 0, $4687 | 0) | 0;
 $4689 = getTempRet0() | 0;
 $4690 = _bitshift64Shl($4684 | 0, $4687 | 0, 1) | 0;
 $4691 = getTempRet0() | 0;
 $4692 = $4690 & -2;
 $4693 = $4691 & 1;
 $4694 = ___muldi3($4692 | 0, $4693 | 0, $4681 | 0, 0) | 0;
 $4695 = getTempRet0() | 0;
 $4696 = _i64Add($4688 | 0, $4689 | 0, $4694 | 0, $4695 | 0) | 0;
 $4697 = getTempRet0() | 0;
 $4698 = $4696 ^ $4660;
 $4699 = $4697 ^ $4663;
 $4700 = _bitshift64Lshr($4698 | 0, $4699 | 0, 24) | 0;
 $4701 = getTempRet0() | 0;
 $4702 = _bitshift64Shl($4698 | 0, $4699 | 0, 40) | 0;
 $4703 = getTempRet0() | 0;
 $4704 = $4700 | $4702;
 $4705 = $4701 | $4703;
 $4706 = _i64Add($4704 | 0, $4705 | 0, $4672 | 0, $4673 | 0) | 0;
 $4707 = getTempRet0() | 0;
 $4708 = _bitshift64Shl($4672 | 0, $4673 | 0, 1) | 0;
 $4709 = getTempRet0() | 0;
 $4710 = $4708 & -2;
 $4711 = $4709 & 1;
 $4712 = ___muldi3($4700 | 0, 0, $4710 | 0, $4711 | 0) | 0;
 $4713 = getTempRet0() | 0;
 $4714 = _i64Add($4706 | 0, $4707 | 0, $4712 | 0, $4713 | 0) | 0;
 $4715 = getTempRet0() | 0;
 $4716 = $arrayidx10305;
 $4717 = $4716;
 HEAP32[$4717 >> 2] = $4714;
 $4718 = $4716 + 4 | 0;
 $4719 = $4718;
 HEAP32[$4719 >> 2] = $4715;
 $4720 = $4714 ^ $4681;
 $4721 = $4715 ^ $4680;
 $4722 = _bitshift64Lshr($4720 | 0, $4721 | 0, 16) | 0;
 $4723 = getTempRet0() | 0;
 $4724 = _bitshift64Shl($4720 | 0, $4721 | 0, 48) | 0;
 $4725 = getTempRet0() | 0;
 $4726 = $4722 | $4724;
 $4727 = $4723 | $4725;
 $4728 = $arrayidx10331;
 $4729 = $4728;
 HEAP32[$4729 >> 2] = $4726;
 $4730 = $4728 + 4 | 0;
 $4731 = $4730;
 HEAP32[$4731 >> 2] = $4727;
 $4732 = _i64Add($4726 | 0, $4727 | 0, $4696 | 0, $4697 | 0) | 0;
 $4733 = getTempRet0() | 0;
 $4734 = _bitshift64Shl($4696 | 0, $4697 | 0, 1) | 0;
 $4735 = getTempRet0() | 0;
 $4736 = $4734 & -2;
 $4737 = $4735 & 1;
 $4738 = ___muldi3($4722 | 0, 0, $4736 | 0, $4737 | 0) | 0;
 $4739 = getTempRet0() | 0;
 $4740 = _i64Add($4732 | 0, $4733 | 0, $4738 | 0, $4739 | 0) | 0;
 $4741 = getTempRet0() | 0;
 $4742 = $4740 ^ $4704;
 $4743 = $4741 ^ $4705;
 $4744 = _bitshift64Lshr($4742 | 0, $4743 | 0, 63) | 0;
 $4745 = getTempRet0() | 0;
 $4746 = _bitshift64Shl($4742 | 0, $4743 | 0, 1) | 0;
 $4747 = getTempRet0() | 0;
 $4748 = $4744 | $4746;
 $4749 = $4745 | $4747;
 $4750 = $arrayidx10309;
 $4751 = $4750;
 HEAP32[$4751 >> 2] = $4748;
 $4752 = $4750 + 4 | 0;
 $4753 = $4752;
 HEAP32[$4753 >> 2] = $4749;
 $arrayidx10511 = $blockR + 792 | 0;
 $4754 = $arrayidx10511;
 $4755 = $4754;
 $4756 = HEAP32[$4755 >> 2] | 0;
 $4757 = $4754 + 4 | 0;
 $4758 = $4757;
 $4759 = HEAP32[$4758 >> 2] | 0;
 $arrayidx10515 = $blockR + 824 | 0;
 $4760 = $arrayidx10515;
 $4761 = $4760;
 $4762 = HEAP32[$4761 >> 2] | 0;
 $4763 = $4760 + 4 | 0;
 $4764 = $4763;
 $4765 = HEAP32[$4764 >> 2] | 0;
 $4766 = _i64Add($4762 | 0, $4765 | 0, $4756 | 0, $4759 | 0) | 0;
 $4767 = getTempRet0() | 0;
 $4768 = _bitshift64Shl($4756 | 0, $4759 | 0, 1) | 0;
 $4769 = getTempRet0() | 0;
 $4770 = $4768 & -2;
 $4771 = $4769 & 1;
 $4772 = ___muldi3($4770 | 0, $4771 | 0, $4762 | 0, 0) | 0;
 $4773 = getTempRet0() | 0;
 $4774 = _i64Add($4766 | 0, $4767 | 0, $4772 | 0, $4773 | 0) | 0;
 $4775 = getTempRet0() | 0;
 $arrayidx10537 = $blockR + 888 | 0;
 $4776 = $arrayidx10537;
 $4777 = $4776;
 $4778 = HEAP32[$4777 >> 2] | 0;
 $4779 = $4776 + 4 | 0;
 $4780 = $4779;
 $4781 = HEAP32[$4780 >> 2] | 0;
 $4782 = $4774 ^ $4778;
 $4783 = $4775 ^ $4781;
 $arrayidx10562 = $blockR + 856 | 0;
 $4784 = $arrayidx10562;
 $4785 = $4784;
 $4786 = HEAP32[$4785 >> 2] | 0;
 $4787 = $4784 + 4 | 0;
 $4788 = $4787;
 $4789 = HEAP32[$4788 >> 2] | 0;
 $4790 = _i64Add($4783 | 0, $4782 | 0, $4786 | 0, $4789 | 0) | 0;
 $4791 = getTempRet0() | 0;
 $4792 = _bitshift64Shl($4786 | 0, $4789 | 0, 1) | 0;
 $4793 = getTempRet0() | 0;
 $4794 = $4792 & -2;
 $4795 = $4793 & 1;
 $4796 = ___muldi3($4794 | 0, $4795 | 0, $4783 | 0, 0) | 0;
 $4797 = getTempRet0() | 0;
 $4798 = _i64Add($4790 | 0, $4791 | 0, $4796 | 0, $4797 | 0) | 0;
 $4799 = getTempRet0() | 0;
 $4800 = $4798 ^ $4762;
 $4801 = $4799 ^ $4765;
 $4802 = _bitshift64Lshr($4800 | 0, $4801 | 0, 24) | 0;
 $4803 = getTempRet0() | 0;
 $4804 = _bitshift64Shl($4800 | 0, $4801 | 0, 40) | 0;
 $4805 = getTempRet0() | 0;
 $4806 = $4802 | $4804;
 $4807 = $4803 | $4805;
 $4808 = _i64Add($4806 | 0, $4807 | 0, $4774 | 0, $4775 | 0) | 0;
 $4809 = getTempRet0() | 0;
 $4810 = _bitshift64Shl($4774 | 0, $4775 | 0, 1) | 0;
 $4811 = getTempRet0() | 0;
 $4812 = $4810 & -2;
 $4813 = $4811 & 1;
 $4814 = ___muldi3($4802 | 0, 0, $4812 | 0, $4813 | 0) | 0;
 $4815 = getTempRet0() | 0;
 $4816 = _i64Add($4808 | 0, $4809 | 0, $4814 | 0, $4815 | 0) | 0;
 $4817 = getTempRet0() | 0;
 $4818 = $arrayidx10511;
 $4819 = $4818;
 HEAP32[$4819 >> 2] = $4816;
 $4820 = $4818 + 4 | 0;
 $4821 = $4820;
 HEAP32[$4821 >> 2] = $4817;
 $4822 = $4816 ^ $4783;
 $4823 = $4817 ^ $4782;
 $4824 = _bitshift64Lshr($4822 | 0, $4823 | 0, 16) | 0;
 $4825 = getTempRet0() | 0;
 $4826 = _bitshift64Shl($4822 | 0, $4823 | 0, 48) | 0;
 $4827 = getTempRet0() | 0;
 $4828 = $4824 | $4826;
 $4829 = $4825 | $4827;
 $4830 = _i64Add($4828 | 0, $4829 | 0, $4798 | 0, $4799 | 0) | 0;
 $4831 = getTempRet0() | 0;
 $4832 = _bitshift64Shl($4798 | 0, $4799 | 0, 1) | 0;
 $4833 = getTempRet0() | 0;
 $4834 = $4832 & -2;
 $4835 = $4833 & 1;
 $4836 = ___muldi3($4824 | 0, 0, $4834 | 0, $4835 | 0) | 0;
 $4837 = getTempRet0() | 0;
 $4838 = _i64Add($4830 | 0, $4831 | 0, $4836 | 0, $4837 | 0) | 0;
 $4839 = getTempRet0() | 0;
 $4840 = $4838 ^ $4806;
 $4841 = $4839 ^ $4807;
 $4842 = _bitshift64Lshr($4840 | 0, $4841 | 0, 63) | 0;
 $4843 = getTempRet0() | 0;
 $4844 = _bitshift64Shl($4840 | 0, $4841 | 0, 1) | 0;
 $4845 = getTempRet0() | 0;
 $4846 = $4842 | $4844;
 $4847 = $4843 | $4845;
 $4848 = $arrayidx10515;
 $4849 = $4848;
 HEAP32[$4849 >> 2] = $4846;
 $4850 = $4848 + 4 | 0;
 $4851 = $4850;
 HEAP32[$4851 >> 2] = $4847;
 $4852 = _i64Add($4646 | 0, $4647 | 0, $4502 | 0, $4503 | 0) | 0;
 $4853 = getTempRet0() | 0;
 $4854 = _bitshift64Shl($4502 | 0, $4503 | 0, 1) | 0;
 $4855 = getTempRet0() | 0;
 $4856 = $4854 & -2;
 $4857 = $4855 & 1;
 $4858 = ___muldi3($4646 | 0, 0, $4856 | 0, $4857 | 0) | 0;
 $4859 = getTempRet0() | 0;
 $4860 = _i64Add($4852 | 0, $4853 | 0, $4858 | 0, $4859 | 0) | 0;
 $4861 = getTempRet0() | 0;
 $4862 = $4828 ^ $4860;
 $4863 = $4829 ^ $4861;
 $4864 = _i64Add($4863 | 0, $4862 | 0, $4740 | 0, $4741 | 0) | 0;
 $4865 = getTempRet0() | 0;
 $4866 = _bitshift64Shl($4740 | 0, $4741 | 0, 1) | 0;
 $4867 = getTempRet0() | 0;
 $4868 = $4866 & -2;
 $4869 = $4867 & 1;
 $4870 = ___muldi3($4863 | 0, 0, $4868 | 0, $4869 | 0) | 0;
 $4871 = getTempRet0() | 0;
 $4872 = _i64Add($4864 | 0, $4865 | 0, $4870 | 0, $4871 | 0) | 0;
 $4873 = getTempRet0() | 0;
 $4874 = $4872 ^ $4646;
 $4875 = $4873 ^ $4647;
 $4876 = _bitshift64Lshr($4874 | 0, $4875 | 0, 24) | 0;
 $4877 = getTempRet0() | 0;
 $4878 = _bitshift64Shl($4874 | 0, $4875 | 0, 40) | 0;
 $4879 = getTempRet0() | 0;
 $4880 = $4876 | $4878;
 $4881 = $4877 | $4879;
 $4882 = _i64Add($4880 | 0, $4881 | 0, $4860 | 0, $4861 | 0) | 0;
 $4883 = getTempRet0() | 0;
 $4884 = _bitshift64Shl($4860 | 0, $4861 | 0, 1) | 0;
 $4885 = getTempRet0() | 0;
 $4886 = $4884 & -2;
 $4887 = $4885 & 1;
 $4888 = ___muldi3($4876 | 0, 0, $4886 | 0, $4887 | 0) | 0;
 $4889 = getTempRet0() | 0;
 $4890 = _i64Add($4882 | 0, $4883 | 0, $4888 | 0, $4889 | 0) | 0;
 $4891 = getTempRet0() | 0;
 $4892 = $add$ptr9892;
 $4893 = $4892;
 HEAP32[$4893 >> 2] = $4890;
 $4894 = $4892 + 4 | 0;
 $4895 = $4894;
 HEAP32[$4895 >> 2] = $4891;
 $4896 = $4890 ^ $4863;
 $4897 = $4891 ^ $4862;
 $4898 = _bitshift64Lshr($4896 | 0, $4897 | 0, 16) | 0;
 $4899 = getTempRet0() | 0;
 $4900 = _bitshift64Shl($4896 | 0, $4897 | 0, 48) | 0;
 $4901 = getTempRet0() | 0;
 $4902 = $4898 | $4900;
 $4903 = $4899 | $4901;
 $4904 = $arrayidx10537;
 $4905 = $4904;
 HEAP32[$4905 >> 2] = $4902;
 $4906 = $4904 + 4 | 0;
 $4907 = $4906;
 HEAP32[$4907 >> 2] = $4903;
 $4908 = _i64Add($4902 | 0, $4903 | 0, $4872 | 0, $4873 | 0) | 0;
 $4909 = getTempRet0() | 0;
 $4910 = _bitshift64Shl($4872 | 0, $4873 | 0, 1) | 0;
 $4911 = getTempRet0() | 0;
 $4912 = $4910 & -2;
 $4913 = $4911 & 1;
 $4914 = ___muldi3($4898 | 0, 0, $4912 | 0, $4913 | 0) | 0;
 $4915 = getTempRet0() | 0;
 $4916 = _i64Add($4908 | 0, $4909 | 0, $4914 | 0, $4915 | 0) | 0;
 $4917 = getTempRet0() | 0;
 $4918 = $arrayidx10356;
 $4919 = $4918;
 HEAP32[$4919 >> 2] = $4916;
 $4920 = $4918 + 4 | 0;
 $4921 = $4920;
 HEAP32[$4921 >> 2] = $4917;
 $4922 = $4916 ^ $4880;
 $4923 = $4917 ^ $4881;
 $4924 = _bitshift64Lshr($4922 | 0, $4923 | 0, 63) | 0;
 $4925 = getTempRet0() | 0;
 $4926 = _bitshift64Shl($4922 | 0, $4923 | 0, 1) | 0;
 $4927 = getTempRet0() | 0;
 $4928 = $4924 | $4926;
 $4929 = $4925 | $4927;
 $4930 = $arrayidx10103;
 $4931 = $4930;
 HEAP32[$4931 >> 2] = $4928;
 $4932 = $4930 + 4 | 0;
 $4933 = $4932;
 HEAP32[$4933 >> 2] = $4929;
 $4934 = _i64Add($4748 | 0, $4749 | 0, $4608 | 0, $4609 | 0) | 0;
 $4935 = getTempRet0() | 0;
 $4936 = _bitshift64Shl($4608 | 0, $4609 | 0, 1) | 0;
 $4937 = getTempRet0() | 0;
 $4938 = $4936 & -2;
 $4939 = $4937 & 1;
 $4940 = ___muldi3($4748 | 0, 0, $4938 | 0, $4939 | 0) | 0;
 $4941 = getTempRet0() | 0;
 $4942 = _i64Add($4934 | 0, $4935 | 0, $4940 | 0, $4941 | 0) | 0;
 $4943 = getTempRet0() | 0;
 $4944 = $4942 ^ $4514;
 $4945 = $4943 ^ $4515;
 $4946 = _i64Add($4838 | 0, $4839 | 0, $4945 | 0, $4944 | 0) | 0;
 $4947 = getTempRet0() | 0;
 $4948 = _bitshift64Shl($4838 | 0, $4839 | 0, 1) | 0;
 $4949 = getTempRet0() | 0;
 $4950 = $4948 & -2;
 $4951 = $4949 & 1;
 $4952 = ___muldi3($4950 | 0, $4951 | 0, $4945 | 0, 0) | 0;
 $4953 = getTempRet0() | 0;
 $4954 = _i64Add($4946 | 0, $4947 | 0, $4952 | 0, $4953 | 0) | 0;
 $4955 = getTempRet0() | 0;
 $4956 = $4954 ^ $4748;
 $4957 = $4955 ^ $4749;
 $4958 = _bitshift64Lshr($4956 | 0, $4957 | 0, 24) | 0;
 $4959 = getTempRet0() | 0;
 $4960 = _bitshift64Shl($4956 | 0, $4957 | 0, 40) | 0;
 $4961 = getTempRet0() | 0;
 $4962 = $4958 | $4960;
 $4963 = $4959 | $4961;
 $4964 = _i64Add($4962 | 0, $4963 | 0, $4942 | 0, $4943 | 0) | 0;
 $4965 = getTempRet0() | 0;
 $4966 = _bitshift64Shl($4942 | 0, $4943 | 0, 1) | 0;
 $4967 = getTempRet0() | 0;
 $4968 = $4966 & -2;
 $4969 = $4967 & 1;
 $4970 = ___muldi3($4958 | 0, 0, $4968 | 0, $4969 | 0) | 0;
 $4971 = getTempRet0() | 0;
 $4972 = _i64Add($4964 | 0, $4965 | 0, $4970 | 0, $4971 | 0) | 0;
 $4973 = getTempRet0() | 0;
 $4974 = $arrayidx10099;
 $4975 = $4974;
 HEAP32[$4975 >> 2] = $4972;
 $4976 = $4974 + 4 | 0;
 $4977 = $4976;
 HEAP32[$4977 >> 2] = $4973;
 $4978 = $4972 ^ $4945;
 $4979 = $4973 ^ $4944;
 $4980 = _bitshift64Lshr($4978 | 0, $4979 | 0, 16) | 0;
 $4981 = getTempRet0() | 0;
 $4982 = _bitshift64Shl($4978 | 0, $4979 | 0, 48) | 0;
 $4983 = getTempRet0() | 0;
 $4984 = $4980 | $4982;
 $4985 = $4981 | $4983;
 $4986 = $arrayidx9919;
 $4987 = $4986;
 HEAP32[$4987 >> 2] = $4984;
 $4988 = $4986 + 4 | 0;
 $4989 = $4988;
 HEAP32[$4989 >> 2] = $4985;
 $4990 = _i64Add($4984 | 0, $4985 | 0, $4954 | 0, $4955 | 0) | 0;
 $4991 = getTempRet0() | 0;
 $4992 = _bitshift64Shl($4954 | 0, $4955 | 0, 1) | 0;
 $4993 = getTempRet0() | 0;
 $4994 = $4992 & -2;
 $4995 = $4993 & 1;
 $4996 = ___muldi3($4980 | 0, 0, $4994 | 0, $4995 | 0) | 0;
 $4997 = getTempRet0() | 0;
 $4998 = _i64Add($4990 | 0, $4991 | 0, $4996 | 0, $4997 | 0) | 0;
 $4999 = getTempRet0() | 0;
 $5000 = $arrayidx10562;
 $5001 = $5000;
 HEAP32[$5001 >> 2] = $4998;
 $5002 = $5000 + 4 | 0;
 $5003 = $5002;
 HEAP32[$5003 >> 2] = $4999;
 $5004 = $4998 ^ $4962;
 $5005 = $4999 ^ $4963;
 $5006 = _bitshift64Lshr($5004 | 0, $5005 | 0, 63) | 0;
 $5007 = getTempRet0() | 0;
 $5008 = _bitshift64Shl($5004 | 0, $5005 | 0, 1) | 0;
 $5009 = getTempRet0() | 0;
 $5010 = $5006 | $5008;
 $5011 = $5007 | $5009;
 $5012 = $arrayidx10309;
 $5013 = $5012;
 HEAP32[$5013 >> 2] = $5010;
 $5014 = $5012 + 4 | 0;
 $5015 = $5014;
 HEAP32[$5015 >> 2] = $5011;
 $5016 = _i64Add($4846 | 0, $4847 | 0, $4714 | 0, $4715 | 0) | 0;
 $5017 = getTempRet0() | 0;
 $5018 = _bitshift64Shl($4714 | 0, $4715 | 0, 1) | 0;
 $5019 = getTempRet0() | 0;
 $5020 = $5018 & -2;
 $5021 = $5019 & 1;
 $5022 = ___muldi3($4846 | 0, 0, $5020 | 0, $5021 | 0) | 0;
 $5023 = getTempRet0() | 0;
 $5024 = _i64Add($5016 | 0, $5017 | 0, $5022 | 0, $5023 | 0) | 0;
 $5025 = getTempRet0() | 0;
 $5026 = $5024 ^ $4620;
 $5027 = $5025 ^ $4621;
 $5028 = _i64Add($5027 | 0, $5026 | 0, $4528 | 0, $4529 | 0) | 0;
 $5029 = getTempRet0() | 0;
 $5030 = _bitshift64Shl($4528 | 0, $4529 | 0, 1) | 0;
 $5031 = getTempRet0() | 0;
 $5032 = $5030 & -2;
 $5033 = $5031 & 1;
 $5034 = ___muldi3($5027 | 0, 0, $5032 | 0, $5033 | 0) | 0;
 $5035 = getTempRet0() | 0;
 $5036 = _i64Add($5028 | 0, $5029 | 0, $5034 | 0, $5035 | 0) | 0;
 $5037 = getTempRet0() | 0;
 $5038 = $5036 ^ $4846;
 $5039 = $5037 ^ $4847;
 $5040 = _bitshift64Lshr($5038 | 0, $5039 | 0, 24) | 0;
 $5041 = getTempRet0() | 0;
 $5042 = _bitshift64Shl($5038 | 0, $5039 | 0, 40) | 0;
 $5043 = getTempRet0() | 0;
 $5044 = $5040 | $5042;
 $5045 = $5041 | $5043;
 $5046 = _i64Add($5044 | 0, $5045 | 0, $5024 | 0, $5025 | 0) | 0;
 $5047 = getTempRet0() | 0;
 $5048 = _bitshift64Shl($5024 | 0, $5025 | 0, 1) | 0;
 $5049 = getTempRet0() | 0;
 $5050 = $5048 & -2;
 $5051 = $5049 & 1;
 $5052 = ___muldi3($5040 | 0, 0, $5050 | 0, $5051 | 0) | 0;
 $5053 = getTempRet0() | 0;
 $5054 = _i64Add($5046 | 0, $5047 | 0, $5052 | 0, $5053 | 0) | 0;
 $5055 = getTempRet0() | 0;
 $5056 = $arrayidx10305;
 $5057 = $5056;
 HEAP32[$5057 >> 2] = $5054;
 $5058 = $5056 + 4 | 0;
 $5059 = $5058;
 HEAP32[$5059 >> 2] = $5055;
 $5060 = $5054 ^ $5027;
 $5061 = $5055 ^ $5026;
 $5062 = _bitshift64Lshr($5060 | 0, $5061 | 0, 16) | 0;
 $5063 = getTempRet0() | 0;
 $5064 = _bitshift64Shl($5060 | 0, $5061 | 0, 48) | 0;
 $5065 = getTempRet0() | 0;
 $5066 = $5062 | $5064;
 $5067 = $5063 | $5065;
 $5068 = $arrayidx10125;
 $5069 = $5068;
 HEAP32[$5069 >> 2] = $5066;
 $5070 = $5068 + 4 | 0;
 $5071 = $5070;
 HEAP32[$5071 >> 2] = $5067;
 $5072 = _i64Add($5066 | 0, $5067 | 0, $5036 | 0, $5037 | 0) | 0;
 $5073 = getTempRet0() | 0;
 $5074 = _bitshift64Shl($5036 | 0, $5037 | 0, 1) | 0;
 $5075 = getTempRet0() | 0;
 $5076 = $5074 & -2;
 $5077 = $5075 & 1;
 $5078 = ___muldi3($5062 | 0, 0, $5076 | 0, $5077 | 0) | 0;
 $5079 = getTempRet0() | 0;
 $5080 = _i64Add($5072 | 0, $5073 | 0, $5078 | 0, $5079 | 0) | 0;
 $5081 = getTempRet0() | 0;
 $5082 = $arrayidx9944;
 $5083 = $5082;
 HEAP32[$5083 >> 2] = $5080;
 $5084 = $5082 + 4 | 0;
 $5085 = $5084;
 HEAP32[$5085 >> 2] = $5081;
 $5086 = $5080 ^ $5044;
 $5087 = $5081 ^ $5045;
 $5088 = _bitshift64Lshr($5086 | 0, $5087 | 0, 63) | 0;
 $5089 = getTempRet0() | 0;
 $5090 = _bitshift64Shl($5086 | 0, $5087 | 0, 1) | 0;
 $5091 = getTempRet0() | 0;
 $5092 = $5088 | $5090;
 $5093 = $5089 | $5091;
 $5094 = $arrayidx10515;
 $5095 = $5094;
 HEAP32[$5095 >> 2] = $5092;
 $5096 = $5094 + 4 | 0;
 $5097 = $5096;
 HEAP32[$5097 >> 2] = $5093;
 $5098 = _i64Add($4816 | 0, $4817 | 0, $4540 | 0, $4541 | 0) | 0;
 $5099 = getTempRet0() | 0;
 $5100 = _bitshift64Shl($4816 | 0, $4817 | 0, 1) | 0;
 $5101 = getTempRet0() | 0;
 $5102 = $5100 & -2;
 $5103 = $5101 & 1;
 $5104 = ___muldi3($5102 | 0, $5103 | 0, $4540 | 0, 0) | 0;
 $5105 = getTempRet0() | 0;
 $5106 = _i64Add($5098 | 0, $5099 | 0, $5104 | 0, $5105 | 0) | 0;
 $5107 = getTempRet0() | 0;
 $5108 = $5106 ^ $4726;
 $5109 = $5107 ^ $4727;
 $5110 = _i64Add($5109 | 0, $5108 | 0, $4634 | 0, $4635 | 0) | 0;
 $5111 = getTempRet0() | 0;
 $5112 = _bitshift64Shl($4634 | 0, $4635 | 0, 1) | 0;
 $5113 = getTempRet0() | 0;
 $5114 = $5112 & -2;
 $5115 = $5113 & 1;
 $5116 = ___muldi3($5109 | 0, 0, $5114 | 0, $5115 | 0) | 0;
 $5117 = getTempRet0() | 0;
 $5118 = _i64Add($5110 | 0, $5111 | 0, $5116 | 0, $5117 | 0) | 0;
 $5119 = getTempRet0() | 0;
 $5120 = $5118 ^ $4540;
 $5121 = $5119 ^ $4541;
 $5122 = _bitshift64Lshr($5120 | 0, $5121 | 0, 24) | 0;
 $5123 = getTempRet0() | 0;
 $5124 = _bitshift64Shl($5120 | 0, $5121 | 0, 40) | 0;
 $5125 = getTempRet0() | 0;
 $5126 = $5122 | $5124;
 $5127 = $5123 | $5125;
 $5128 = _i64Add($5126 | 0, $5127 | 0, $5106 | 0, $5107 | 0) | 0;
 $5129 = getTempRet0() | 0;
 $5130 = _bitshift64Shl($5106 | 0, $5107 | 0, 1) | 0;
 $5131 = getTempRet0() | 0;
 $5132 = $5130 & -2;
 $5133 = $5131 & 1;
 $5134 = ___muldi3($5122 | 0, 0, $5132 | 0, $5133 | 0) | 0;
 $5135 = getTempRet0() | 0;
 $5136 = _i64Add($5128 | 0, $5129 | 0, $5134 | 0, $5135 | 0) | 0;
 $5137 = getTempRet0() | 0;
 $5138 = $arrayidx10511;
 $5139 = $5138;
 HEAP32[$5139 >> 2] = $5136;
 $5140 = $5138 + 4 | 0;
 $5141 = $5140;
 HEAP32[$5141 >> 2] = $5137;
 $5142 = $5136 ^ $5109;
 $5143 = $5137 ^ $5108;
 $5144 = _bitshift64Lshr($5142 | 0, $5143 | 0, 16) | 0;
 $5145 = getTempRet0() | 0;
 $5146 = _bitshift64Shl($5142 | 0, $5143 | 0, 48) | 0;
 $5147 = getTempRet0() | 0;
 $5148 = $5144 | $5146;
 $5149 = $5145 | $5147;
 $5150 = $arrayidx10331;
 $5151 = $5150;
 HEAP32[$5151 >> 2] = $5148;
 $5152 = $5150 + 4 | 0;
 $5153 = $5152;
 HEAP32[$5153 >> 2] = $5149;
 $5154 = _i64Add($5148 | 0, $5149 | 0, $5118 | 0, $5119 | 0) | 0;
 $5155 = getTempRet0() | 0;
 $5156 = _bitshift64Shl($5118 | 0, $5119 | 0, 1) | 0;
 $5157 = getTempRet0() | 0;
 $5158 = $5156 & -2;
 $5159 = $5157 & 1;
 $5160 = ___muldi3($5144 | 0, 0, $5158 | 0, $5159 | 0) | 0;
 $5161 = getTempRet0() | 0;
 $5162 = _i64Add($5154 | 0, $5155 | 0, $5160 | 0, $5161 | 0) | 0;
 $5163 = getTempRet0() | 0;
 $5164 = $arrayidx10150;
 $5165 = $5164;
 HEAP32[$5165 >> 2] = $5162;
 $5166 = $5164 + 4 | 0;
 $5167 = $5166;
 HEAP32[$5167 >> 2] = $5163;
 $5168 = $5162 ^ $5126;
 $5169 = $5163 ^ $5127;
 $5170 = _bitshift64Lshr($5168 | 0, $5169 | 0, 63) | 0;
 $5171 = getTempRet0() | 0;
 $5172 = _bitshift64Shl($5168 | 0, $5169 | 0, 1) | 0;
 $5173 = getTempRet0() | 0;
 $5174 = $5170 | $5172;
 $5175 = $5171 | $5173;
 $5176 = $arrayidx9897;
 $5177 = $5176;
 HEAP32[$5177 >> 2] = $5174;
 $5178 = $5176 + 4 | 0;
 $5179 = $5178;
 HEAP32[$5179 >> 2] = $5175;
 $add$ptr11542 = $blockR + 896 | 0;
 $5180 = $add$ptr11542;
 $5181 = $5180;
 $5182 = HEAP32[$5181 >> 2] | 0;
 $5183 = $5180 + 4 | 0;
 $5184 = $5183;
 $5185 = HEAP32[$5184 >> 2] | 0;
 $arrayidx11547 = $blockR + 928 | 0;
 $5186 = $arrayidx11547;
 $5187 = $5186;
 $5188 = HEAP32[$5187 >> 2] | 0;
 $5189 = $5186 + 4 | 0;
 $5190 = $5189;
 $5191 = HEAP32[$5190 >> 2] | 0;
 $5192 = _i64Add($5188 | 0, $5191 | 0, $5182 | 0, $5185 | 0) | 0;
 $5193 = getTempRet0() | 0;
 $5194 = _bitshift64Shl($5182 | 0, $5185 | 0, 1) | 0;
 $5195 = getTempRet0() | 0;
 $5196 = $5194 & -2;
 $5197 = $5195 & 1;
 $5198 = ___muldi3($5196 | 0, $5197 | 0, $5188 | 0, 0) | 0;
 $5199 = getTempRet0() | 0;
 $5200 = _i64Add($5192 | 0, $5193 | 0, $5198 | 0, $5199 | 0) | 0;
 $5201 = getTempRet0() | 0;
 $arrayidx11569 = $blockR + 992 | 0;
 $5202 = $arrayidx11569;
 $5203 = $5202;
 $5204 = HEAP32[$5203 >> 2] | 0;
 $5205 = $5202 + 4 | 0;
 $5206 = $5205;
 $5207 = HEAP32[$5206 >> 2] | 0;
 $5208 = $5200 ^ $5204;
 $5209 = $5201 ^ $5207;
 $arrayidx11594 = $blockR + 960 | 0;
 $5210 = $arrayidx11594;
 $5211 = $5210;
 $5212 = HEAP32[$5211 >> 2] | 0;
 $5213 = $5210 + 4 | 0;
 $5214 = $5213;
 $5215 = HEAP32[$5214 >> 2] | 0;
 $5216 = _i64Add($5209 | 0, $5208 | 0, $5212 | 0, $5215 | 0) | 0;
 $5217 = getTempRet0() | 0;
 $5218 = _bitshift64Shl($5212 | 0, $5215 | 0, 1) | 0;
 $5219 = getTempRet0() | 0;
 $5220 = $5218 & -2;
 $5221 = $5219 & 1;
 $5222 = ___muldi3($5220 | 0, $5221 | 0, $5209 | 0, 0) | 0;
 $5223 = getTempRet0() | 0;
 $5224 = _i64Add($5216 | 0, $5217 | 0, $5222 | 0, $5223 | 0) | 0;
 $5225 = getTempRet0() | 0;
 $5226 = $5224 ^ $5188;
 $5227 = $5225 ^ $5191;
 $5228 = _bitshift64Lshr($5226 | 0, $5227 | 0, 24) | 0;
 $5229 = getTempRet0() | 0;
 $5230 = _bitshift64Shl($5226 | 0, $5227 | 0, 40) | 0;
 $5231 = getTempRet0() | 0;
 $5232 = $5228 | $5230;
 $5233 = $5229 | $5231;
 $5234 = _i64Add($5232 | 0, $5233 | 0, $5200 | 0, $5201 | 0) | 0;
 $5235 = getTempRet0() | 0;
 $5236 = _bitshift64Shl($5200 | 0, $5201 | 0, 1) | 0;
 $5237 = getTempRet0() | 0;
 $5238 = $5236 & -2;
 $5239 = $5237 & 1;
 $5240 = ___muldi3($5228 | 0, 0, $5238 | 0, $5239 | 0) | 0;
 $5241 = getTempRet0() | 0;
 $5242 = _i64Add($5234 | 0, $5235 | 0, $5240 | 0, $5241 | 0) | 0;
 $5243 = getTempRet0() | 0;
 $5244 = $add$ptr11542;
 $5245 = $5244;
 HEAP32[$5245 >> 2] = $5242;
 $5246 = $5244 + 4 | 0;
 $5247 = $5246;
 HEAP32[$5247 >> 2] = $5243;
 $5248 = $5242 ^ $5209;
 $5249 = $5243 ^ $5208;
 $5250 = _bitshift64Lshr($5248 | 0, $5249 | 0, 16) | 0;
 $5251 = getTempRet0() | 0;
 $5252 = _bitshift64Shl($5248 | 0, $5249 | 0, 48) | 0;
 $5253 = getTempRet0() | 0;
 $5254 = $5250 | $5252;
 $5255 = $5251 | $5253;
 $5256 = $arrayidx11569;
 $5257 = $5256;
 HEAP32[$5257 >> 2] = $5254;
 $5258 = $5256 + 4 | 0;
 $5259 = $5258;
 HEAP32[$5259 >> 2] = $5255;
 $5260 = _i64Add($5254 | 0, $5255 | 0, $5224 | 0, $5225 | 0) | 0;
 $5261 = getTempRet0() | 0;
 $5262 = _bitshift64Shl($5224 | 0, $5225 | 0, 1) | 0;
 $5263 = getTempRet0() | 0;
 $5264 = $5262 & -2;
 $5265 = $5263 & 1;
 $5266 = ___muldi3($5250 | 0, 0, $5264 | 0, $5265 | 0) | 0;
 $5267 = getTempRet0() | 0;
 $5268 = _i64Add($5260 | 0, $5261 | 0, $5266 | 0, $5267 | 0) | 0;
 $5269 = getTempRet0() | 0;
 $5270 = $arrayidx11594;
 $5271 = $5270;
 HEAP32[$5271 >> 2] = $5268;
 $5272 = $5270 + 4 | 0;
 $5273 = $5272;
 HEAP32[$5273 >> 2] = $5269;
 $5274 = $5268 ^ $5232;
 $5275 = $5269 ^ $5233;
 $5276 = _bitshift64Lshr($5274 | 0, $5275 | 0, 63) | 0;
 $5277 = getTempRet0() | 0;
 $5278 = _bitshift64Shl($5274 | 0, $5275 | 0, 1) | 0;
 $5279 = getTempRet0() | 0;
 $5280 = $5276 | $5278;
 $5281 = $5277 | $5279;
 $5282 = $arrayidx11547;
 $5283 = $5282;
 HEAP32[$5283 >> 2] = $5280;
 $5284 = $5282 + 4 | 0;
 $5285 = $5284;
 HEAP32[$5285 >> 2] = $5281;
 $arrayidx11749 = $blockR + 904 | 0;
 $5286 = $arrayidx11749;
 $5287 = $5286;
 $5288 = HEAP32[$5287 >> 2] | 0;
 $5289 = $5286 + 4 | 0;
 $5290 = $5289;
 $5291 = HEAP32[$5290 >> 2] | 0;
 $arrayidx11753 = $blockR + 936 | 0;
 $5292 = $arrayidx11753;
 $5293 = $5292;
 $5294 = HEAP32[$5293 >> 2] | 0;
 $5295 = $5292 + 4 | 0;
 $5296 = $5295;
 $5297 = HEAP32[$5296 >> 2] | 0;
 $5298 = _i64Add($5294 | 0, $5297 | 0, $5288 | 0, $5291 | 0) | 0;
 $5299 = getTempRet0() | 0;
 $5300 = _bitshift64Shl($5288 | 0, $5291 | 0, 1) | 0;
 $5301 = getTempRet0() | 0;
 $5302 = $5300 & -2;
 $5303 = $5301 & 1;
 $5304 = ___muldi3($5302 | 0, $5303 | 0, $5294 | 0, 0) | 0;
 $5305 = getTempRet0() | 0;
 $5306 = _i64Add($5298 | 0, $5299 | 0, $5304 | 0, $5305 | 0) | 0;
 $5307 = getTempRet0() | 0;
 $arrayidx11775 = $blockR + 1e3 | 0;
 $5308 = $arrayidx11775;
 $5309 = $5308;
 $5310 = HEAP32[$5309 >> 2] | 0;
 $5311 = $5308 + 4 | 0;
 $5312 = $5311;
 $5313 = HEAP32[$5312 >> 2] | 0;
 $5314 = $5306 ^ $5310;
 $5315 = $5307 ^ $5313;
 $arrayidx11800 = $blockR + 968 | 0;
 $5316 = $arrayidx11800;
 $5317 = $5316;
 $5318 = HEAP32[$5317 >> 2] | 0;
 $5319 = $5316 + 4 | 0;
 $5320 = $5319;
 $5321 = HEAP32[$5320 >> 2] | 0;
 $5322 = _i64Add($5315 | 0, $5314 | 0, $5318 | 0, $5321 | 0) | 0;
 $5323 = getTempRet0() | 0;
 $5324 = _bitshift64Shl($5318 | 0, $5321 | 0, 1) | 0;
 $5325 = getTempRet0() | 0;
 $5326 = $5324 & -2;
 $5327 = $5325 & 1;
 $5328 = ___muldi3($5326 | 0, $5327 | 0, $5315 | 0, 0) | 0;
 $5329 = getTempRet0() | 0;
 $5330 = _i64Add($5322 | 0, $5323 | 0, $5328 | 0, $5329 | 0) | 0;
 $5331 = getTempRet0() | 0;
 $5332 = $5330 ^ $5294;
 $5333 = $5331 ^ $5297;
 $5334 = _bitshift64Lshr($5332 | 0, $5333 | 0, 24) | 0;
 $5335 = getTempRet0() | 0;
 $5336 = _bitshift64Shl($5332 | 0, $5333 | 0, 40) | 0;
 $5337 = getTempRet0() | 0;
 $5338 = $5334 | $5336;
 $5339 = $5335 | $5337;
 $5340 = _i64Add($5338 | 0, $5339 | 0, $5306 | 0, $5307 | 0) | 0;
 $5341 = getTempRet0() | 0;
 $5342 = _bitshift64Shl($5306 | 0, $5307 | 0, 1) | 0;
 $5343 = getTempRet0() | 0;
 $5344 = $5342 & -2;
 $5345 = $5343 & 1;
 $5346 = ___muldi3($5334 | 0, 0, $5344 | 0, $5345 | 0) | 0;
 $5347 = getTempRet0() | 0;
 $5348 = _i64Add($5340 | 0, $5341 | 0, $5346 | 0, $5347 | 0) | 0;
 $5349 = getTempRet0() | 0;
 $5350 = $arrayidx11749;
 $5351 = $5350;
 HEAP32[$5351 >> 2] = $5348;
 $5352 = $5350 + 4 | 0;
 $5353 = $5352;
 HEAP32[$5353 >> 2] = $5349;
 $5354 = $5348 ^ $5315;
 $5355 = $5349 ^ $5314;
 $5356 = _bitshift64Lshr($5354 | 0, $5355 | 0, 16) | 0;
 $5357 = getTempRet0() | 0;
 $5358 = _bitshift64Shl($5354 | 0, $5355 | 0, 48) | 0;
 $5359 = getTempRet0() | 0;
 $5360 = $5356 | $5358;
 $5361 = $5357 | $5359;
 $5362 = $arrayidx11775;
 $5363 = $5362;
 HEAP32[$5363 >> 2] = $5360;
 $5364 = $5362 + 4 | 0;
 $5365 = $5364;
 HEAP32[$5365 >> 2] = $5361;
 $5366 = _i64Add($5360 | 0, $5361 | 0, $5330 | 0, $5331 | 0) | 0;
 $5367 = getTempRet0() | 0;
 $5368 = _bitshift64Shl($5330 | 0, $5331 | 0, 1) | 0;
 $5369 = getTempRet0() | 0;
 $5370 = $5368 & -2;
 $5371 = $5369 & 1;
 $5372 = ___muldi3($5356 | 0, 0, $5370 | 0, $5371 | 0) | 0;
 $5373 = getTempRet0() | 0;
 $5374 = _i64Add($5366 | 0, $5367 | 0, $5372 | 0, $5373 | 0) | 0;
 $5375 = getTempRet0() | 0;
 $5376 = $arrayidx11800;
 $5377 = $5376;
 HEAP32[$5377 >> 2] = $5374;
 $5378 = $5376 + 4 | 0;
 $5379 = $5378;
 HEAP32[$5379 >> 2] = $5375;
 $5380 = $5374 ^ $5338;
 $5381 = $5375 ^ $5339;
 $5382 = _bitshift64Lshr($5380 | 0, $5381 | 0, 63) | 0;
 $5383 = getTempRet0() | 0;
 $5384 = _bitshift64Shl($5380 | 0, $5381 | 0, 1) | 0;
 $5385 = getTempRet0() | 0;
 $5386 = $5382 | $5384;
 $5387 = $5383 | $5385;
 $5388 = $arrayidx11753;
 $5389 = $5388;
 HEAP32[$5389 >> 2] = $5386;
 $5390 = $5388 + 4 | 0;
 $5391 = $5390;
 HEAP32[$5391 >> 2] = $5387;
 $arrayidx11955 = $blockR + 912 | 0;
 $5392 = $arrayidx11955;
 $5393 = $5392;
 $5394 = HEAP32[$5393 >> 2] | 0;
 $5395 = $5392 + 4 | 0;
 $5396 = $5395;
 $5397 = HEAP32[$5396 >> 2] | 0;
 $arrayidx11959 = $blockR + 944 | 0;
 $5398 = $arrayidx11959;
 $5399 = $5398;
 $5400 = HEAP32[$5399 >> 2] | 0;
 $5401 = $5398 + 4 | 0;
 $5402 = $5401;
 $5403 = HEAP32[$5402 >> 2] | 0;
 $5404 = _i64Add($5400 | 0, $5403 | 0, $5394 | 0, $5397 | 0) | 0;
 $5405 = getTempRet0() | 0;
 $5406 = _bitshift64Shl($5394 | 0, $5397 | 0, 1) | 0;
 $5407 = getTempRet0() | 0;
 $5408 = $5406 & -2;
 $5409 = $5407 & 1;
 $5410 = ___muldi3($5408 | 0, $5409 | 0, $5400 | 0, 0) | 0;
 $5411 = getTempRet0() | 0;
 $5412 = _i64Add($5404 | 0, $5405 | 0, $5410 | 0, $5411 | 0) | 0;
 $5413 = getTempRet0() | 0;
 $arrayidx11981 = $blockR + 1008 | 0;
 $5414 = $arrayidx11981;
 $5415 = $5414;
 $5416 = HEAP32[$5415 >> 2] | 0;
 $5417 = $5414 + 4 | 0;
 $5418 = $5417;
 $5419 = HEAP32[$5418 >> 2] | 0;
 $5420 = $5412 ^ $5416;
 $5421 = $5413 ^ $5419;
 $arrayidx12006 = $blockR + 976 | 0;
 $5422 = $arrayidx12006;
 $5423 = $5422;
 $5424 = HEAP32[$5423 >> 2] | 0;
 $5425 = $5422 + 4 | 0;
 $5426 = $5425;
 $5427 = HEAP32[$5426 >> 2] | 0;
 $5428 = _i64Add($5421 | 0, $5420 | 0, $5424 | 0, $5427 | 0) | 0;
 $5429 = getTempRet0() | 0;
 $5430 = _bitshift64Shl($5424 | 0, $5427 | 0, 1) | 0;
 $5431 = getTempRet0() | 0;
 $5432 = $5430 & -2;
 $5433 = $5431 & 1;
 $5434 = ___muldi3($5432 | 0, $5433 | 0, $5421 | 0, 0) | 0;
 $5435 = getTempRet0() | 0;
 $5436 = _i64Add($5428 | 0, $5429 | 0, $5434 | 0, $5435 | 0) | 0;
 $5437 = getTempRet0() | 0;
 $5438 = $5436 ^ $5400;
 $5439 = $5437 ^ $5403;
 $5440 = _bitshift64Lshr($5438 | 0, $5439 | 0, 24) | 0;
 $5441 = getTempRet0() | 0;
 $5442 = _bitshift64Shl($5438 | 0, $5439 | 0, 40) | 0;
 $5443 = getTempRet0() | 0;
 $5444 = $5440 | $5442;
 $5445 = $5441 | $5443;
 $5446 = _i64Add($5444 | 0, $5445 | 0, $5412 | 0, $5413 | 0) | 0;
 $5447 = getTempRet0() | 0;
 $5448 = _bitshift64Shl($5412 | 0, $5413 | 0, 1) | 0;
 $5449 = getTempRet0() | 0;
 $5450 = $5448 & -2;
 $5451 = $5449 & 1;
 $5452 = ___muldi3($5440 | 0, 0, $5450 | 0, $5451 | 0) | 0;
 $5453 = getTempRet0() | 0;
 $5454 = _i64Add($5446 | 0, $5447 | 0, $5452 | 0, $5453 | 0) | 0;
 $5455 = getTempRet0() | 0;
 $5456 = $arrayidx11955;
 $5457 = $5456;
 HEAP32[$5457 >> 2] = $5454;
 $5458 = $5456 + 4 | 0;
 $5459 = $5458;
 HEAP32[$5459 >> 2] = $5455;
 $5460 = $5454 ^ $5421;
 $5461 = $5455 ^ $5420;
 $5462 = _bitshift64Lshr($5460 | 0, $5461 | 0, 16) | 0;
 $5463 = getTempRet0() | 0;
 $5464 = _bitshift64Shl($5460 | 0, $5461 | 0, 48) | 0;
 $5465 = getTempRet0() | 0;
 $5466 = $5462 | $5464;
 $5467 = $5463 | $5465;
 $5468 = $arrayidx11981;
 $5469 = $5468;
 HEAP32[$5469 >> 2] = $5466;
 $5470 = $5468 + 4 | 0;
 $5471 = $5470;
 HEAP32[$5471 >> 2] = $5467;
 $5472 = _i64Add($5466 | 0, $5467 | 0, $5436 | 0, $5437 | 0) | 0;
 $5473 = getTempRet0() | 0;
 $5474 = _bitshift64Shl($5436 | 0, $5437 | 0, 1) | 0;
 $5475 = getTempRet0() | 0;
 $5476 = $5474 & -2;
 $5477 = $5475 & 1;
 $5478 = ___muldi3($5462 | 0, 0, $5476 | 0, $5477 | 0) | 0;
 $5479 = getTempRet0() | 0;
 $5480 = _i64Add($5472 | 0, $5473 | 0, $5478 | 0, $5479 | 0) | 0;
 $5481 = getTempRet0() | 0;
 $5482 = $5480 ^ $5444;
 $5483 = $5481 ^ $5445;
 $5484 = _bitshift64Lshr($5482 | 0, $5483 | 0, 63) | 0;
 $5485 = getTempRet0() | 0;
 $5486 = _bitshift64Shl($5482 | 0, $5483 | 0, 1) | 0;
 $5487 = getTempRet0() | 0;
 $5488 = $5484 | $5486;
 $5489 = $5485 | $5487;
 $5490 = $arrayidx11959;
 $5491 = $5490;
 HEAP32[$5491 >> 2] = $5488;
 $5492 = $5490 + 4 | 0;
 $5493 = $5492;
 HEAP32[$5493 >> 2] = $5489;
 $arrayidx12161 = $blockR + 920 | 0;
 $5494 = $arrayidx12161;
 $5495 = $5494;
 $5496 = HEAP32[$5495 >> 2] | 0;
 $5497 = $5494 + 4 | 0;
 $5498 = $5497;
 $5499 = HEAP32[$5498 >> 2] | 0;
 $arrayidx12165 = $blockR + 952 | 0;
 $5500 = $arrayidx12165;
 $5501 = $5500;
 $5502 = HEAP32[$5501 >> 2] | 0;
 $5503 = $5500 + 4 | 0;
 $5504 = $5503;
 $5505 = HEAP32[$5504 >> 2] | 0;
 $5506 = _i64Add($5502 | 0, $5505 | 0, $5496 | 0, $5499 | 0) | 0;
 $5507 = getTempRet0() | 0;
 $5508 = _bitshift64Shl($5496 | 0, $5499 | 0, 1) | 0;
 $5509 = getTempRet0() | 0;
 $5510 = $5508 & -2;
 $5511 = $5509 & 1;
 $5512 = ___muldi3($5510 | 0, $5511 | 0, $5502 | 0, 0) | 0;
 $5513 = getTempRet0() | 0;
 $5514 = _i64Add($5506 | 0, $5507 | 0, $5512 | 0, $5513 | 0) | 0;
 $5515 = getTempRet0() | 0;
 $arrayidx12187 = $blockR + 1016 | 0;
 $5516 = $arrayidx12187;
 $5517 = $5516;
 $5518 = HEAP32[$5517 >> 2] | 0;
 $5519 = $5516 + 4 | 0;
 $5520 = $5519;
 $5521 = HEAP32[$5520 >> 2] | 0;
 $5522 = $5514 ^ $5518;
 $5523 = $5515 ^ $5521;
 $arrayidx12212 = $blockR + 984 | 0;
 $5524 = $arrayidx12212;
 $5525 = $5524;
 $5526 = HEAP32[$5525 >> 2] | 0;
 $5527 = $5524 + 4 | 0;
 $5528 = $5527;
 $5529 = HEAP32[$5528 >> 2] | 0;
 $5530 = _i64Add($5523 | 0, $5522 | 0, $5526 | 0, $5529 | 0) | 0;
 $5531 = getTempRet0() | 0;
 $5532 = _bitshift64Shl($5526 | 0, $5529 | 0, 1) | 0;
 $5533 = getTempRet0() | 0;
 $5534 = $5532 & -2;
 $5535 = $5533 & 1;
 $5536 = ___muldi3($5534 | 0, $5535 | 0, $5523 | 0, 0) | 0;
 $5537 = getTempRet0() | 0;
 $5538 = _i64Add($5530 | 0, $5531 | 0, $5536 | 0, $5537 | 0) | 0;
 $5539 = getTempRet0() | 0;
 $5540 = $5538 ^ $5502;
 $5541 = $5539 ^ $5505;
 $5542 = _bitshift64Lshr($5540 | 0, $5541 | 0, 24) | 0;
 $5543 = getTempRet0() | 0;
 $5544 = _bitshift64Shl($5540 | 0, $5541 | 0, 40) | 0;
 $5545 = getTempRet0() | 0;
 $5546 = $5542 | $5544;
 $5547 = $5543 | $5545;
 $5548 = _i64Add($5546 | 0, $5547 | 0, $5514 | 0, $5515 | 0) | 0;
 $5549 = getTempRet0() | 0;
 $5550 = _bitshift64Shl($5514 | 0, $5515 | 0, 1) | 0;
 $5551 = getTempRet0() | 0;
 $5552 = $5550 & -2;
 $5553 = $5551 & 1;
 $5554 = ___muldi3($5542 | 0, 0, $5552 | 0, $5553 | 0) | 0;
 $5555 = getTempRet0() | 0;
 $5556 = _i64Add($5548 | 0, $5549 | 0, $5554 | 0, $5555 | 0) | 0;
 $5557 = getTempRet0() | 0;
 $5558 = $arrayidx12161;
 $5559 = $5558;
 HEAP32[$5559 >> 2] = $5556;
 $5560 = $5558 + 4 | 0;
 $5561 = $5560;
 HEAP32[$5561 >> 2] = $5557;
 $5562 = $5556 ^ $5523;
 $5563 = $5557 ^ $5522;
 $5564 = _bitshift64Lshr($5562 | 0, $5563 | 0, 16) | 0;
 $5565 = getTempRet0() | 0;
 $5566 = _bitshift64Shl($5562 | 0, $5563 | 0, 48) | 0;
 $5567 = getTempRet0() | 0;
 $5568 = $5564 | $5566;
 $5569 = $5565 | $5567;
 $5570 = _i64Add($5568 | 0, $5569 | 0, $5538 | 0, $5539 | 0) | 0;
 $5571 = getTempRet0() | 0;
 $5572 = _bitshift64Shl($5538 | 0, $5539 | 0, 1) | 0;
 $5573 = getTempRet0() | 0;
 $5574 = $5572 & -2;
 $5575 = $5573 & 1;
 $5576 = ___muldi3($5564 | 0, 0, $5574 | 0, $5575 | 0) | 0;
 $5577 = getTempRet0() | 0;
 $5578 = _i64Add($5570 | 0, $5571 | 0, $5576 | 0, $5577 | 0) | 0;
 $5579 = getTempRet0() | 0;
 $5580 = $5578 ^ $5546;
 $5581 = $5579 ^ $5547;
 $5582 = _bitshift64Lshr($5580 | 0, $5581 | 0, 63) | 0;
 $5583 = getTempRet0() | 0;
 $5584 = _bitshift64Shl($5580 | 0, $5581 | 0, 1) | 0;
 $5585 = getTempRet0() | 0;
 $5586 = $5582 | $5584;
 $5587 = $5583 | $5585;
 $5588 = $arrayidx12165;
 $5589 = $5588;
 HEAP32[$5589 >> 2] = $5586;
 $5590 = $5588 + 4 | 0;
 $5591 = $5590;
 HEAP32[$5591 >> 2] = $5587;
 $5592 = _i64Add($5386 | 0, $5387 | 0, $5242 | 0, $5243 | 0) | 0;
 $5593 = getTempRet0() | 0;
 $5594 = _bitshift64Shl($5242 | 0, $5243 | 0, 1) | 0;
 $5595 = getTempRet0() | 0;
 $5596 = $5594 & -2;
 $5597 = $5595 & 1;
 $5598 = ___muldi3($5386 | 0, 0, $5596 | 0, $5597 | 0) | 0;
 $5599 = getTempRet0() | 0;
 $5600 = _i64Add($5592 | 0, $5593 | 0, $5598 | 0, $5599 | 0) | 0;
 $5601 = getTempRet0() | 0;
 $5602 = $5568 ^ $5600;
 $5603 = $5569 ^ $5601;
 $5604 = _i64Add($5603 | 0, $5602 | 0, $5480 | 0, $5481 | 0) | 0;
 $5605 = getTempRet0() | 0;
 $5606 = _bitshift64Shl($5480 | 0, $5481 | 0, 1) | 0;
 $5607 = getTempRet0() | 0;
 $5608 = $5606 & -2;
 $5609 = $5607 & 1;
 $5610 = ___muldi3($5603 | 0, 0, $5608 | 0, $5609 | 0) | 0;
 $5611 = getTempRet0() | 0;
 $5612 = _i64Add($5604 | 0, $5605 | 0, $5610 | 0, $5611 | 0) | 0;
 $5613 = getTempRet0() | 0;
 $5614 = $5612 ^ $5386;
 $5615 = $5613 ^ $5387;
 $5616 = _bitshift64Lshr($5614 | 0, $5615 | 0, 24) | 0;
 $5617 = getTempRet0() | 0;
 $5618 = _bitshift64Shl($5614 | 0, $5615 | 0, 40) | 0;
 $5619 = getTempRet0() | 0;
 $5620 = $5616 | $5618;
 $5621 = $5617 | $5619;
 $5622 = _i64Add($5620 | 0, $5621 | 0, $5600 | 0, $5601 | 0) | 0;
 $5623 = getTempRet0() | 0;
 $5624 = _bitshift64Shl($5600 | 0, $5601 | 0, 1) | 0;
 $5625 = getTempRet0() | 0;
 $5626 = $5624 & -2;
 $5627 = $5625 & 1;
 $5628 = ___muldi3($5616 | 0, 0, $5626 | 0, $5627 | 0) | 0;
 $5629 = getTempRet0() | 0;
 $5630 = _i64Add($5622 | 0, $5623 | 0, $5628 | 0, $5629 | 0) | 0;
 $5631 = getTempRet0() | 0;
 $5632 = $add$ptr11542;
 $5633 = $5632;
 HEAP32[$5633 >> 2] = $5630;
 $5634 = $5632 + 4 | 0;
 $5635 = $5634;
 HEAP32[$5635 >> 2] = $5631;
 $5636 = $5630 ^ $5603;
 $5637 = $5631 ^ $5602;
 $5638 = _bitshift64Lshr($5636 | 0, $5637 | 0, 16) | 0;
 $5639 = getTempRet0() | 0;
 $5640 = _bitshift64Shl($5636 | 0, $5637 | 0, 48) | 0;
 $5641 = getTempRet0() | 0;
 $5642 = $5638 | $5640;
 $5643 = $5639 | $5641;
 $5644 = $arrayidx12187;
 $5645 = $5644;
 HEAP32[$5645 >> 2] = $5642;
 $5646 = $5644 + 4 | 0;
 $5647 = $5646;
 HEAP32[$5647 >> 2] = $5643;
 $5648 = _i64Add($5642 | 0, $5643 | 0, $5612 | 0, $5613 | 0) | 0;
 $5649 = getTempRet0() | 0;
 $5650 = _bitshift64Shl($5612 | 0, $5613 | 0, 1) | 0;
 $5651 = getTempRet0() | 0;
 $5652 = $5650 & -2;
 $5653 = $5651 & 1;
 $5654 = ___muldi3($5638 | 0, 0, $5652 | 0, $5653 | 0) | 0;
 $5655 = getTempRet0() | 0;
 $5656 = _i64Add($5648 | 0, $5649 | 0, $5654 | 0, $5655 | 0) | 0;
 $5657 = getTempRet0() | 0;
 $5658 = $arrayidx12006;
 $5659 = $5658;
 HEAP32[$5659 >> 2] = $5656;
 $5660 = $5658 + 4 | 0;
 $5661 = $5660;
 HEAP32[$5661 >> 2] = $5657;
 $5662 = $5656 ^ $5620;
 $5663 = $5657 ^ $5621;
 $5664 = _bitshift64Lshr($5662 | 0, $5663 | 0, 63) | 0;
 $5665 = getTempRet0() | 0;
 $5666 = _bitshift64Shl($5662 | 0, $5663 | 0, 1) | 0;
 $5667 = getTempRet0() | 0;
 $5668 = $5664 | $5666;
 $5669 = $5665 | $5667;
 $5670 = $arrayidx11753;
 $5671 = $5670;
 HEAP32[$5671 >> 2] = $5668;
 $5672 = $5670 + 4 | 0;
 $5673 = $5672;
 HEAP32[$5673 >> 2] = $5669;
 $5674 = _i64Add($5488 | 0, $5489 | 0, $5348 | 0, $5349 | 0) | 0;
 $5675 = getTempRet0() | 0;
 $5676 = _bitshift64Shl($5348 | 0, $5349 | 0, 1) | 0;
 $5677 = getTempRet0() | 0;
 $5678 = $5676 & -2;
 $5679 = $5677 & 1;
 $5680 = ___muldi3($5488 | 0, 0, $5678 | 0, $5679 | 0) | 0;
 $5681 = getTempRet0() | 0;
 $5682 = _i64Add($5674 | 0, $5675 | 0, $5680 | 0, $5681 | 0) | 0;
 $5683 = getTempRet0() | 0;
 $5684 = $5682 ^ $5254;
 $5685 = $5683 ^ $5255;
 $5686 = _i64Add($5578 | 0, $5579 | 0, $5685 | 0, $5684 | 0) | 0;
 $5687 = getTempRet0() | 0;
 $5688 = _bitshift64Shl($5578 | 0, $5579 | 0, 1) | 0;
 $5689 = getTempRet0() | 0;
 $5690 = $5688 & -2;
 $5691 = $5689 & 1;
 $5692 = ___muldi3($5690 | 0, $5691 | 0, $5685 | 0, 0) | 0;
 $5693 = getTempRet0() | 0;
 $5694 = _i64Add($5686 | 0, $5687 | 0, $5692 | 0, $5693 | 0) | 0;
 $5695 = getTempRet0() | 0;
 $5696 = $5694 ^ $5488;
 $5697 = $5695 ^ $5489;
 $5698 = _bitshift64Lshr($5696 | 0, $5697 | 0, 24) | 0;
 $5699 = getTempRet0() | 0;
 $5700 = _bitshift64Shl($5696 | 0, $5697 | 0, 40) | 0;
 $5701 = getTempRet0() | 0;
 $5702 = $5698 | $5700;
 $5703 = $5699 | $5701;
 $5704 = _i64Add($5702 | 0, $5703 | 0, $5682 | 0, $5683 | 0) | 0;
 $5705 = getTempRet0() | 0;
 $5706 = _bitshift64Shl($5682 | 0, $5683 | 0, 1) | 0;
 $5707 = getTempRet0() | 0;
 $5708 = $5706 & -2;
 $5709 = $5707 & 1;
 $5710 = ___muldi3($5698 | 0, 0, $5708 | 0, $5709 | 0) | 0;
 $5711 = getTempRet0() | 0;
 $5712 = _i64Add($5704 | 0, $5705 | 0, $5710 | 0, $5711 | 0) | 0;
 $5713 = getTempRet0() | 0;
 $5714 = $arrayidx11749;
 $5715 = $5714;
 HEAP32[$5715 >> 2] = $5712;
 $5716 = $5714 + 4 | 0;
 $5717 = $5716;
 HEAP32[$5717 >> 2] = $5713;
 $5718 = $5712 ^ $5685;
 $5719 = $5713 ^ $5684;
 $5720 = _bitshift64Lshr($5718 | 0, $5719 | 0, 16) | 0;
 $5721 = getTempRet0() | 0;
 $5722 = _bitshift64Shl($5718 | 0, $5719 | 0, 48) | 0;
 $5723 = getTempRet0() | 0;
 $5724 = $5720 | $5722;
 $5725 = $5721 | $5723;
 $5726 = $arrayidx11569;
 $5727 = $5726;
 HEAP32[$5727 >> 2] = $5724;
 $5728 = $5726 + 4 | 0;
 $5729 = $5728;
 HEAP32[$5729 >> 2] = $5725;
 $5730 = _i64Add($5724 | 0, $5725 | 0, $5694 | 0, $5695 | 0) | 0;
 $5731 = getTempRet0() | 0;
 $5732 = _bitshift64Shl($5694 | 0, $5695 | 0, 1) | 0;
 $5733 = getTempRet0() | 0;
 $5734 = $5732 & -2;
 $5735 = $5733 & 1;
 $5736 = ___muldi3($5720 | 0, 0, $5734 | 0, $5735 | 0) | 0;
 $5737 = getTempRet0() | 0;
 $5738 = _i64Add($5730 | 0, $5731 | 0, $5736 | 0, $5737 | 0) | 0;
 $5739 = getTempRet0() | 0;
 $5740 = $arrayidx12212;
 $5741 = $5740;
 HEAP32[$5741 >> 2] = $5738;
 $5742 = $5740 + 4 | 0;
 $5743 = $5742;
 HEAP32[$5743 >> 2] = $5739;
 $5744 = $5738 ^ $5702;
 $5745 = $5739 ^ $5703;
 $5746 = _bitshift64Lshr($5744 | 0, $5745 | 0, 63) | 0;
 $5747 = getTempRet0() | 0;
 $5748 = _bitshift64Shl($5744 | 0, $5745 | 0, 1) | 0;
 $5749 = getTempRet0() | 0;
 $5750 = $5746 | $5748;
 $5751 = $5747 | $5749;
 $5752 = $arrayidx11959;
 $5753 = $5752;
 HEAP32[$5753 >> 2] = $5750;
 $5754 = $5752 + 4 | 0;
 $5755 = $5754;
 HEAP32[$5755 >> 2] = $5751;
 $5756 = _i64Add($5586 | 0, $5587 | 0, $5454 | 0, $5455 | 0) | 0;
 $5757 = getTempRet0() | 0;
 $5758 = _bitshift64Shl($5454 | 0, $5455 | 0, 1) | 0;
 $5759 = getTempRet0() | 0;
 $5760 = $5758 & -2;
 $5761 = $5759 & 1;
 $5762 = ___muldi3($5586 | 0, 0, $5760 | 0, $5761 | 0) | 0;
 $5763 = getTempRet0() | 0;
 $5764 = _i64Add($5756 | 0, $5757 | 0, $5762 | 0, $5763 | 0) | 0;
 $5765 = getTempRet0() | 0;
 $5766 = $5764 ^ $5360;
 $5767 = $5765 ^ $5361;
 $5768 = _i64Add($5767 | 0, $5766 | 0, $5268 | 0, $5269 | 0) | 0;
 $5769 = getTempRet0() | 0;
 $5770 = _bitshift64Shl($5268 | 0, $5269 | 0, 1) | 0;
 $5771 = getTempRet0() | 0;
 $5772 = $5770 & -2;
 $5773 = $5771 & 1;
 $5774 = ___muldi3($5767 | 0, 0, $5772 | 0, $5773 | 0) | 0;
 $5775 = getTempRet0() | 0;
 $5776 = _i64Add($5768 | 0, $5769 | 0, $5774 | 0, $5775 | 0) | 0;
 $5777 = getTempRet0() | 0;
 $5778 = $5776 ^ $5586;
 $5779 = $5777 ^ $5587;
 $5780 = _bitshift64Lshr($5778 | 0, $5779 | 0, 24) | 0;
 $5781 = getTempRet0() | 0;
 $5782 = _bitshift64Shl($5778 | 0, $5779 | 0, 40) | 0;
 $5783 = getTempRet0() | 0;
 $5784 = $5780 | $5782;
 $5785 = $5781 | $5783;
 $5786 = _i64Add($5784 | 0, $5785 | 0, $5764 | 0, $5765 | 0) | 0;
 $5787 = getTempRet0() | 0;
 $5788 = _bitshift64Shl($5764 | 0, $5765 | 0, 1) | 0;
 $5789 = getTempRet0() | 0;
 $5790 = $5788 & -2;
 $5791 = $5789 & 1;
 $5792 = ___muldi3($5780 | 0, 0, $5790 | 0, $5791 | 0) | 0;
 $5793 = getTempRet0() | 0;
 $5794 = _i64Add($5786 | 0, $5787 | 0, $5792 | 0, $5793 | 0) | 0;
 $5795 = getTempRet0() | 0;
 $5796 = $arrayidx11955;
 $5797 = $5796;
 HEAP32[$5797 >> 2] = $5794;
 $5798 = $5796 + 4 | 0;
 $5799 = $5798;
 HEAP32[$5799 >> 2] = $5795;
 $5800 = $5794 ^ $5767;
 $5801 = $5795 ^ $5766;
 $5802 = _bitshift64Lshr($5800 | 0, $5801 | 0, 16) | 0;
 $5803 = getTempRet0() | 0;
 $5804 = _bitshift64Shl($5800 | 0, $5801 | 0, 48) | 0;
 $5805 = getTempRet0() | 0;
 $5806 = $5802 | $5804;
 $5807 = $5803 | $5805;
 $5808 = $arrayidx11775;
 $5809 = $5808;
 HEAP32[$5809 >> 2] = $5806;
 $5810 = $5808 + 4 | 0;
 $5811 = $5810;
 HEAP32[$5811 >> 2] = $5807;
 $5812 = _i64Add($5806 | 0, $5807 | 0, $5776 | 0, $5777 | 0) | 0;
 $5813 = getTempRet0() | 0;
 $5814 = _bitshift64Shl($5776 | 0, $5777 | 0, 1) | 0;
 $5815 = getTempRet0() | 0;
 $5816 = $5814 & -2;
 $5817 = $5815 & 1;
 $5818 = ___muldi3($5802 | 0, 0, $5816 | 0, $5817 | 0) | 0;
 $5819 = getTempRet0() | 0;
 $5820 = _i64Add($5812 | 0, $5813 | 0, $5818 | 0, $5819 | 0) | 0;
 $5821 = getTempRet0() | 0;
 $5822 = $arrayidx11594;
 $5823 = $5822;
 HEAP32[$5823 >> 2] = $5820;
 $5824 = $5822 + 4 | 0;
 $5825 = $5824;
 HEAP32[$5825 >> 2] = $5821;
 $5826 = $5820 ^ $5784;
 $5827 = $5821 ^ $5785;
 $5828 = _bitshift64Lshr($5826 | 0, $5827 | 0, 63) | 0;
 $5829 = getTempRet0() | 0;
 $5830 = _bitshift64Shl($5826 | 0, $5827 | 0, 1) | 0;
 $5831 = getTempRet0() | 0;
 $5832 = $5828 | $5830;
 $5833 = $5829 | $5831;
 $5834 = $arrayidx12165;
 $5835 = $5834;
 HEAP32[$5835 >> 2] = $5832;
 $5836 = $5834 + 4 | 0;
 $5837 = $5836;
 HEAP32[$5837 >> 2] = $5833;
 $5838 = _i64Add($5556 | 0, $5557 | 0, $5280 | 0, $5281 | 0) | 0;
 $5839 = getTempRet0() | 0;
 $5840 = _bitshift64Shl($5556 | 0, $5557 | 0, 1) | 0;
 $5841 = getTempRet0() | 0;
 $5842 = $5840 & -2;
 $5843 = $5841 & 1;
 $5844 = ___muldi3($5842 | 0, $5843 | 0, $5280 | 0, 0) | 0;
 $5845 = getTempRet0() | 0;
 $5846 = _i64Add($5838 | 0, $5839 | 0, $5844 | 0, $5845 | 0) | 0;
 $5847 = getTempRet0() | 0;
 $5848 = $5846 ^ $5466;
 $5849 = $5847 ^ $5467;
 $5850 = _i64Add($5849 | 0, $5848 | 0, $5374 | 0, $5375 | 0) | 0;
 $5851 = getTempRet0() | 0;
 $5852 = _bitshift64Shl($5374 | 0, $5375 | 0, 1) | 0;
 $5853 = getTempRet0() | 0;
 $5854 = $5852 & -2;
 $5855 = $5853 & 1;
 $5856 = ___muldi3($5849 | 0, 0, $5854 | 0, $5855 | 0) | 0;
 $5857 = getTempRet0() | 0;
 $5858 = _i64Add($5850 | 0, $5851 | 0, $5856 | 0, $5857 | 0) | 0;
 $5859 = getTempRet0() | 0;
 $5860 = $5858 ^ $5280;
 $5861 = $5859 ^ $5281;
 $5862 = _bitshift64Lshr($5860 | 0, $5861 | 0, 24) | 0;
 $5863 = getTempRet0() | 0;
 $5864 = _bitshift64Shl($5860 | 0, $5861 | 0, 40) | 0;
 $5865 = getTempRet0() | 0;
 $5866 = $5862 | $5864;
 $5867 = $5863 | $5865;
 $5868 = _i64Add($5866 | 0, $5867 | 0, $5846 | 0, $5847 | 0) | 0;
 $5869 = getTempRet0() | 0;
 $5870 = _bitshift64Shl($5846 | 0, $5847 | 0, 1) | 0;
 $5871 = getTempRet0() | 0;
 $5872 = $5870 & -2;
 $5873 = $5871 & 1;
 $5874 = ___muldi3($5862 | 0, 0, $5872 | 0, $5873 | 0) | 0;
 $5875 = getTempRet0() | 0;
 $5876 = _i64Add($5868 | 0, $5869 | 0, $5874 | 0, $5875 | 0) | 0;
 $5877 = getTempRet0() | 0;
 $5878 = $arrayidx12161;
 $5879 = $5878;
 HEAP32[$5879 >> 2] = $5876;
 $5880 = $5878 + 4 | 0;
 $5881 = $5880;
 HEAP32[$5881 >> 2] = $5877;
 $5882 = $5876 ^ $5849;
 $5883 = $5877 ^ $5848;
 $5884 = _bitshift64Lshr($5882 | 0, $5883 | 0, 16) | 0;
 $5885 = getTempRet0() | 0;
 $5886 = _bitshift64Shl($5882 | 0, $5883 | 0, 48) | 0;
 $5887 = getTempRet0() | 0;
 $5888 = $5884 | $5886;
 $5889 = $5885 | $5887;
 $5890 = $arrayidx11981;
 $5891 = $5890;
 HEAP32[$5891 >> 2] = $5888;
 $5892 = $5890 + 4 | 0;
 $5893 = $5892;
 HEAP32[$5893 >> 2] = $5889;
 $5894 = _i64Add($5888 | 0, $5889 | 0, $5858 | 0, $5859 | 0) | 0;
 $5895 = getTempRet0() | 0;
 $5896 = _bitshift64Shl($5858 | 0, $5859 | 0, 1) | 0;
 $5897 = getTempRet0() | 0;
 $5898 = $5896 & -2;
 $5899 = $5897 & 1;
 $5900 = ___muldi3($5884 | 0, 0, $5898 | 0, $5899 | 0) | 0;
 $5901 = getTempRet0() | 0;
 $5902 = _i64Add($5894 | 0, $5895 | 0, $5900 | 0, $5901 | 0) | 0;
 $5903 = getTempRet0() | 0;
 $5904 = $arrayidx11800;
 $5905 = $5904;
 HEAP32[$5905 >> 2] = $5902;
 $5906 = $5904 + 4 | 0;
 $5907 = $5906;
 HEAP32[$5907 >> 2] = $5903;
 $5908 = $5902 ^ $5866;
 $5909 = $5903 ^ $5867;
 $5910 = _bitshift64Lshr($5908 | 0, $5909 | 0, 63) | 0;
 $5911 = getTempRet0() | 0;
 $5912 = _bitshift64Shl($5908 | 0, $5909 | 0, 1) | 0;
 $5913 = getTempRet0() | 0;
 $5914 = $5910 | $5912;
 $5915 = $5911 | $5913;
 $5916 = $arrayidx11547;
 $5917 = $5916;
 HEAP32[$5917 >> 2] = $5914;
 $5918 = $5916 + 4 | 0;
 $5919 = $5918;
 HEAP32[$5919 >> 2] = $5915;
 $5920 = _i64Add($1930 | 0, $1931 | 0, $450 | 0, $451 | 0) | 0;
 $5921 = getTempRet0() | 0;
 $5922 = _bitshift64Shl($450 | 0, $451 | 0, 1) | 0;
 $5923 = getTempRet0() | 0;
 $5924 = $5922 & -2;
 $5925 = $5923 & 1;
 $5926 = ___muldi3($1930 | 0, 0, $5924 | 0, $5925 | 0) | 0;
 $5927 = getTempRet0() | 0;
 $5928 = _i64Add($5920 | 0, $5921 | 0, $5926 | 0, $5927 | 0) | 0;
 $5929 = getTempRet0() | 0;
 $5930 = $4890 ^ $5928;
 $5931 = $4891 ^ $5929;
 $5932 = _i64Add($5931 | 0, $5930 | 0, $3410 | 0, $3411 | 0) | 0;
 $5933 = getTempRet0() | 0;
 $5934 = _bitshift64Shl($3410 | 0, $3411 | 0, 1) | 0;
 $5935 = getTempRet0() | 0;
 $5936 = $5934 & -2;
 $5937 = $5935 & 1;
 $5938 = ___muldi3($5931 | 0, 0, $5936 | 0, $5937 | 0) | 0;
 $5939 = getTempRet0() | 0;
 $5940 = _i64Add($5932 | 0, $5933 | 0, $5938 | 0, $5939 | 0) | 0;
 $5941 = getTempRet0() | 0;
 $5942 = $5940 ^ $1930;
 $5943 = $5941 ^ $1931;
 $5944 = _bitshift64Lshr($5942 | 0, $5943 | 0, 24) | 0;
 $5945 = getTempRet0() | 0;
 $5946 = _bitshift64Shl($5942 | 0, $5943 | 0, 40) | 0;
 $5947 = getTempRet0() | 0;
 $5948 = $5944 | $5946;
 $5949 = $5945 | $5947;
 $5950 = _i64Add($5948 | 0, $5949 | 0, $5928 | 0, $5929 | 0) | 0;
 $5951 = getTempRet0() | 0;
 $5952 = _bitshift64Shl($5928 | 0, $5929 | 0, 1) | 0;
 $5953 = getTempRet0() | 0;
 $5954 = $5952 & -2;
 $5955 = $5953 & 1;
 $5956 = ___muldi3($5944 | 0, 0, $5954 | 0, $5955 | 0) | 0;
 $5957 = getTempRet0() | 0;
 $5958 = _i64Add($5950 | 0, $5951 | 0, $5956 | 0, $5957 | 0) | 0;
 $5959 = getTempRet0() | 0;
 $5960 = $blockR;
 $5961 = $5960;
 HEAP32[$5961 >> 2] = $5958;
 $5962 = $5960 + 4 | 0;
 $5963 = $5962;
 HEAP32[$5963 >> 2] = $5959;
 $5964 = $5958 ^ $5931;
 $5965 = $5959 ^ $5930;
 $5966 = _bitshift64Lshr($5964 | 0, $5965 | 0, 16) | 0;
 $5967 = getTempRet0() | 0;
 $5968 = _bitshift64Shl($5964 | 0, $5965 | 0, 48) | 0;
 $5969 = getTempRet0() | 0;
 $5970 = $5966 | $5968;
 $5971 = $5967 | $5969;
 $5972 = $add$ptr9892;
 $5973 = $5972;
 HEAP32[$5973 >> 2] = $5970;
 $5974 = $5972 + 4 | 0;
 $5975 = $5974;
 HEAP32[$5975 >> 2] = $5971;
 $5976 = _i64Add($5970 | 0, $5971 | 0, $5940 | 0, $5941 | 0) | 0;
 $5977 = getTempRet0() | 0;
 $5978 = _bitshift64Shl($5940 | 0, $5941 | 0, 1) | 0;
 $5979 = getTempRet0() | 0;
 $5980 = $5978 & -2;
 $5981 = $5979 & 1;
 $5982 = ___muldi3($5966 | 0, 0, $5980 | 0, $5981 | 0) | 0;
 $5983 = getTempRet0() | 0;
 $5984 = _i64Add($5976 | 0, $5977 | 0, $5982 | 0, $5983 | 0) | 0;
 $5985 = getTempRet0() | 0;
 $5986 = $add$ptr6592;
 $5987 = $5986;
 HEAP32[$5987 >> 2] = $5984;
 $5988 = $5986 + 4 | 0;
 $5989 = $5988;
 HEAP32[$5989 >> 2] = $5985;
 $5990 = $5984 ^ $5948;
 $5991 = $5985 ^ $5949;
 $5992 = _bitshift64Lshr($5990 | 0, $5991 | 0, 63) | 0;
 $5993 = getTempRet0() | 0;
 $5994 = _bitshift64Shl($5990 | 0, $5991 | 0, 1) | 0;
 $5995 = getTempRet0() | 0;
 $5996 = $5992 | $5994;
 $5997 = $5993 | $5995;
 $5998 = $add$ptr3292;
 $5999 = $5998;
 HEAP32[$5999 >> 2] = $5996;
 $6000 = $5998 + 4 | 0;
 $6001 = $6000;
 HEAP32[$6001 >> 2] = $5997;
 $6002 = _i64Add($2012 | 0, $2013 | 0, $532 | 0, $533 | 0) | 0;
 $6003 = getTempRet0() | 0;
 $6004 = _bitshift64Shl($532 | 0, $533 | 0, 1) | 0;
 $6005 = getTempRet0() | 0;
 $6006 = $6004 & -2;
 $6007 = $6005 & 1;
 $6008 = ___muldi3($2012 | 0, 0, $6006 | 0, $6007 | 0) | 0;
 $6009 = getTempRet0() | 0;
 $6010 = _i64Add($6002 | 0, $6003 | 0, $6008 | 0, $6009 | 0) | 0;
 $6011 = getTempRet0() | 0;
 $6012 = $4972 ^ $6010;
 $6013 = $4973 ^ $6011;
 $6014 = _i64Add($6013 | 0, $6012 | 0, $3492 | 0, $3493 | 0) | 0;
 $6015 = getTempRet0() | 0;
 $6016 = _bitshift64Shl($3492 | 0, $3493 | 0, 1) | 0;
 $6017 = getTempRet0() | 0;
 $6018 = $6016 & -2;
 $6019 = $6017 & 1;
 $6020 = ___muldi3($6013 | 0, 0, $6018 | 0, $6019 | 0) | 0;
 $6021 = getTempRet0() | 0;
 $6022 = _i64Add($6014 | 0, $6015 | 0, $6020 | 0, $6021 | 0) | 0;
 $6023 = getTempRet0() | 0;
 $6024 = $6022 ^ $2012;
 $6025 = $6023 ^ $2013;
 $6026 = _bitshift64Lshr($6024 | 0, $6025 | 0, 24) | 0;
 $6027 = getTempRet0() | 0;
 $6028 = _bitshift64Shl($6024 | 0, $6025 | 0, 40) | 0;
 $6029 = getTempRet0() | 0;
 $6030 = $6026 | $6028;
 $6031 = $6027 | $6029;
 $6032 = _i64Add($6030 | 0, $6031 | 0, $6010 | 0, $6011 | 0) | 0;
 $6033 = getTempRet0() | 0;
 $6034 = _bitshift64Shl($6010 | 0, $6011 | 0, 1) | 0;
 $6035 = getTempRet0() | 0;
 $6036 = $6034 & -2;
 $6037 = $6035 & 1;
 $6038 = ___muldi3($6026 | 0, 0, $6036 | 0, $6037 | 0) | 0;
 $6039 = getTempRet0() | 0;
 $6040 = _i64Add($6032 | 0, $6033 | 0, $6038 | 0, $6039 | 0) | 0;
 $6041 = getTempRet0() | 0;
 $6042 = $arrayidx199;
 $6043 = $6042;
 HEAP32[$6043 >> 2] = $6040;
 $6044 = $6042 + 4 | 0;
 $6045 = $6044;
 HEAP32[$6045 >> 2] = $6041;
 $6046 = $6040 ^ $6013;
 $6047 = $6041 ^ $6012;
 $6048 = _bitshift64Lshr($6046 | 0, $6047 | 0, 16) | 0;
 $6049 = getTempRet0() | 0;
 $6050 = _bitshift64Shl($6046 | 0, $6047 | 0, 48) | 0;
 $6051 = getTempRet0() | 0;
 $6052 = $6048 | $6050;
 $6053 = $6049 | $6051;
 $6054 = $arrayidx10099;
 $6055 = $6054;
 HEAP32[$6055 >> 2] = $6052;
 $6056 = $6054 + 4 | 0;
 $6057 = $6056;
 HEAP32[$6057 >> 2] = $6053;
 $6058 = _i64Add($6052 | 0, $6053 | 0, $6022 | 0, $6023 | 0) | 0;
 $6059 = getTempRet0() | 0;
 $6060 = _bitshift64Shl($6022 | 0, $6023 | 0, 1) | 0;
 $6061 = getTempRet0() | 0;
 $6062 = $6060 & -2;
 $6063 = $6061 & 1;
 $6064 = ___muldi3($6048 | 0, 0, $6062 | 0, $6063 | 0) | 0;
 $6065 = getTempRet0() | 0;
 $6066 = _i64Add($6058 | 0, $6059 | 0, $6064 | 0, $6065 | 0) | 0;
 $6067 = getTempRet0() | 0;
 $6068 = $arrayidx6799;
 $6069 = $6068;
 HEAP32[$6069 >> 2] = $6066;
 $6070 = $6068 + 4 | 0;
 $6071 = $6070;
 HEAP32[$6071 >> 2] = $6067;
 $6072 = $6066 ^ $6030;
 $6073 = $6067 ^ $6031;
 $6074 = _bitshift64Lshr($6072 | 0, $6073 | 0, 63) | 0;
 $6075 = getTempRet0() | 0;
 $6076 = _bitshift64Shl($6072 | 0, $6073 | 0, 1) | 0;
 $6077 = getTempRet0() | 0;
 $6078 = $6074 | $6076;
 $6079 = $6075 | $6077;
 $6080 = $arrayidx3499;
 $6081 = $6080;
 HEAP32[$6081 >> 2] = $6078;
 $6082 = $6080 + 4 | 0;
 $6083 = $6082;
 HEAP32[$6083 >> 2] = $6079;
 $6084 = _i64Add($2670 | 0, $2671 | 0, $1190 | 0, $1191 | 0) | 0;
 $6085 = getTempRet0() | 0;
 $6086 = _bitshift64Shl($1190 | 0, $1191 | 0, 1) | 0;
 $6087 = getTempRet0() | 0;
 $6088 = $6086 & -2;
 $6089 = $6087 & 1;
 $6090 = ___muldi3($2670 | 0, 0, $6088 | 0, $6089 | 0) | 0;
 $6091 = getTempRet0() | 0;
 $6092 = _i64Add($6084 | 0, $6085 | 0, $6090 | 0, $6091 | 0) | 0;
 $6093 = getTempRet0() | 0;
 $6094 = $5630 ^ $6092;
 $6095 = $5631 ^ $6093;
 $6096 = _i64Add($6095 | 0, $6094 | 0, $4150 | 0, $4151 | 0) | 0;
 $6097 = getTempRet0() | 0;
 $6098 = _bitshift64Shl($4150 | 0, $4151 | 0, 1) | 0;
 $6099 = getTempRet0() | 0;
 $6100 = $6098 & -2;
 $6101 = $6099 & 1;
 $6102 = ___muldi3($6095 | 0, 0, $6100 | 0, $6101 | 0) | 0;
 $6103 = getTempRet0() | 0;
 $6104 = _i64Add($6096 | 0, $6097 | 0, $6102 | 0, $6103 | 0) | 0;
 $6105 = getTempRet0() | 0;
 $6106 = $6104 ^ $2670;
 $6107 = $6105 ^ $2671;
 $6108 = _bitshift64Lshr($6106 | 0, $6107 | 0, 24) | 0;
 $6109 = getTempRet0() | 0;
 $6110 = _bitshift64Shl($6106 | 0, $6107 | 0, 40) | 0;
 $6111 = getTempRet0() | 0;
 $6112 = $6108 | $6110;
 $6113 = $6109 | $6111;
 $6114 = _i64Add($6112 | 0, $6113 | 0, $6092 | 0, $6093 | 0) | 0;
 $6115 = getTempRet0() | 0;
 $6116 = _bitshift64Shl($6092 | 0, $6093 | 0, 1) | 0;
 $6117 = getTempRet0() | 0;
 $6118 = $6116 & -2;
 $6119 = $6117 & 1;
 $6120 = ___muldi3($6108 | 0, 0, $6118 | 0, $6119 | 0) | 0;
 $6121 = getTempRet0() | 0;
 $6122 = _i64Add($6114 | 0, $6115 | 0, $6120 | 0, $6121 | 0) | 0;
 $6123 = getTempRet0() | 0;
 $6124 = $add$ptr1642;
 $6125 = $6124;
 HEAP32[$6125 >> 2] = $6122;
 $6126 = $6124 + 4 | 0;
 $6127 = $6126;
 HEAP32[$6127 >> 2] = $6123;
 $6128 = $6122 ^ $6095;
 $6129 = $6123 ^ $6094;
 $6130 = _bitshift64Lshr($6128 | 0, $6129 | 0, 16) | 0;
 $6131 = getTempRet0() | 0;
 $6132 = _bitshift64Shl($6128 | 0, $6129 | 0, 48) | 0;
 $6133 = getTempRet0() | 0;
 $6134 = $6130 | $6132;
 $6135 = $6131 | $6133;
 $6136 = $add$ptr11542;
 $6137 = $6136;
 HEAP32[$6137 >> 2] = $6134;
 $6138 = $6136 + 4 | 0;
 $6139 = $6138;
 HEAP32[$6139 >> 2] = $6135;
 $6140 = _i64Add($6134 | 0, $6135 | 0, $6104 | 0, $6105 | 0) | 0;
 $6141 = getTempRet0() | 0;
 $6142 = _bitshift64Shl($6104 | 0, $6105 | 0, 1) | 0;
 $6143 = getTempRet0() | 0;
 $6144 = $6142 & -2;
 $6145 = $6143 & 1;
 $6146 = ___muldi3($6130 | 0, 0, $6144 | 0, $6145 | 0) | 0;
 $6147 = getTempRet0() | 0;
 $6148 = _i64Add($6140 | 0, $6141 | 0, $6146 | 0, $6147 | 0) | 0;
 $6149 = getTempRet0() | 0;
 $6150 = $6148 ^ $6112;
 $6151 = $6149 ^ $6113;
 $6152 = _bitshift64Lshr($6150 | 0, $6151 | 0, 63) | 0;
 $6153 = getTempRet0() | 0;
 $6154 = _bitshift64Shl($6150 | 0, $6151 | 0, 1) | 0;
 $6155 = getTempRet0() | 0;
 $6156 = $6152 | $6154;
 $6157 = $6153 | $6155;
 $6158 = $add$ptr4942;
 $6159 = $6158;
 HEAP32[$6159 >> 2] = $6156;
 $6160 = $6158 + 4 | 0;
 $6161 = $6160;
 HEAP32[$6161 >> 2] = $6157;
 $6162 = _i64Add($2752 | 0, $2753 | 0, $1272 | 0, $1273 | 0) | 0;
 $6163 = getTempRet0() | 0;
 $6164 = _bitshift64Shl($1272 | 0, $1273 | 0, 1) | 0;
 $6165 = getTempRet0() | 0;
 $6166 = $6164 & -2;
 $6167 = $6165 & 1;
 $6168 = ___muldi3($2752 | 0, 0, $6166 | 0, $6167 | 0) | 0;
 $6169 = getTempRet0() | 0;
 $6170 = _i64Add($6162 | 0, $6163 | 0, $6168 | 0, $6169 | 0) | 0;
 $6171 = getTempRet0() | 0;
 $6172 = $5712 ^ $6170;
 $6173 = $5713 ^ $6171;
 $6174 = _i64Add($6173 | 0, $6172 | 0, $4232 | 0, $4233 | 0) | 0;
 $6175 = getTempRet0() | 0;
 $6176 = _bitshift64Shl($4232 | 0, $4233 | 0, 1) | 0;
 $6177 = getTempRet0() | 0;
 $6178 = $6176 & -2;
 $6179 = $6177 & 1;
 $6180 = ___muldi3($6173 | 0, 0, $6178 | 0, $6179 | 0) | 0;
 $6181 = getTempRet0() | 0;
 $6182 = _i64Add($6174 | 0, $6175 | 0, $6180 | 0, $6181 | 0) | 0;
 $6183 = getTempRet0() | 0;
 $6184 = $6182 ^ $2752;
 $6185 = $6183 ^ $2753;
 $6186 = _bitshift64Lshr($6184 | 0, $6185 | 0, 24) | 0;
 $6187 = getTempRet0() | 0;
 $6188 = _bitshift64Shl($6184 | 0, $6185 | 0, 40) | 0;
 $6189 = getTempRet0() | 0;
 $6190 = $6186 | $6188;
 $6191 = $6187 | $6189;
 $6192 = _i64Add($6190 | 0, $6191 | 0, $6170 | 0, $6171 | 0) | 0;
 $6193 = getTempRet0() | 0;
 $6194 = _bitshift64Shl($6170 | 0, $6171 | 0, 1) | 0;
 $6195 = getTempRet0() | 0;
 $6196 = $6194 & -2;
 $6197 = $6195 & 1;
 $6198 = ___muldi3($6186 | 0, 0, $6196 | 0, $6197 | 0) | 0;
 $6199 = getTempRet0() | 0;
 $6200 = _i64Add($6192 | 0, $6193 | 0, $6198 | 0, $6199 | 0) | 0;
 $6201 = getTempRet0() | 0;
 $6202 = $arrayidx1849;
 $6203 = $6202;
 HEAP32[$6203 >> 2] = $6200;
 $6204 = $6202 + 4 | 0;
 $6205 = $6204;
 HEAP32[$6205 >> 2] = $6201;
 $6206 = $6200 ^ $6173;
 $6207 = $6201 ^ $6172;
 $6208 = _bitshift64Lshr($6206 | 0, $6207 | 0, 16) | 0;
 $6209 = getTempRet0() | 0;
 $6210 = _bitshift64Shl($6206 | 0, $6207 | 0, 48) | 0;
 $6211 = getTempRet0() | 0;
 $6212 = $6208 | $6210;
 $6213 = $6209 | $6211;
 $6214 = _i64Add($6212 | 0, $6213 | 0, $6182 | 0, $6183 | 0) | 0;
 $6215 = getTempRet0() | 0;
 $6216 = _bitshift64Shl($6182 | 0, $6183 | 0, 1) | 0;
 $6217 = getTempRet0() | 0;
 $6218 = $6216 & -2;
 $6219 = $6217 & 1;
 $6220 = ___muldi3($6208 | 0, 0, $6218 | 0, $6219 | 0) | 0;
 $6221 = getTempRet0() | 0;
 $6222 = _i64Add($6214 | 0, $6215 | 0, $6220 | 0, $6221 | 0) | 0;
 $6223 = getTempRet0() | 0;
 $6224 = $6222 ^ $6190;
 $6225 = $6223 ^ $6191;
 $6226 = _bitshift64Lshr($6224 | 0, $6225 | 0, 63) | 0;
 $6227 = getTempRet0() | 0;
 $6228 = _bitshift64Shl($6224 | 0, $6225 | 0, 1) | 0;
 $6229 = getTempRet0() | 0;
 $6230 = $6226 | $6228;
 $6231 = $6227 | $6229;
 $6232 = $arrayidx5149;
 $6233 = $6232;
 HEAP32[$6233 >> 2] = $6230;
 $6234 = $6232 + 4 | 0;
 $6235 = $6234;
 HEAP32[$6235 >> 2] = $6231;
 $6236 = _i64Add($6078 | 0, $6079 | 0, $5958 | 0, $5959 | 0) | 0;
 $6237 = getTempRet0() | 0;
 $6238 = _bitshift64Shl($5958 | 0, $5959 | 0, 1) | 0;
 $6239 = getTempRet0() | 0;
 $6240 = $6238 & -2;
 $6241 = $6239 & 1;
 $6242 = ___muldi3($6078 | 0, 0, $6240 | 0, $6241 | 0) | 0;
 $6243 = getTempRet0() | 0;
 $6244 = _i64Add($6236 | 0, $6237 | 0, $6242 | 0, $6243 | 0) | 0;
 $6245 = getTempRet0() | 0;
 $6246 = $6212 ^ $6244;
 $6247 = $6213 ^ $6245;
 $6248 = _i64Add($6247 | 0, $6246 | 0, $6148 | 0, $6149 | 0) | 0;
 $6249 = getTempRet0() | 0;
 $6250 = _bitshift64Shl($6148 | 0, $6149 | 0, 1) | 0;
 $6251 = getTempRet0() | 0;
 $6252 = $6250 & -2;
 $6253 = $6251 & 1;
 $6254 = ___muldi3($6252 | 0, $6253 | 0, $6247 | 0, 0) | 0;
 $6255 = getTempRet0() | 0;
 $6256 = _i64Add($6248 | 0, $6249 | 0, $6254 | 0, $6255 | 0) | 0;
 $6257 = getTempRet0() | 0;
 $6258 = $6256 ^ $6078;
 $6259 = $6257 ^ $6079;
 $6260 = _bitshift64Lshr($6258 | 0, $6259 | 0, 24) | 0;
 $6261 = getTempRet0() | 0;
 $6262 = _bitshift64Shl($6258 | 0, $6259 | 0, 40) | 0;
 $6263 = getTempRet0() | 0;
 $6264 = $6260 | $6262;
 $6265 = $6261 | $6263;
 $6266 = _i64Add($6264 | 0, $6265 | 0, $6244 | 0, $6245 | 0) | 0;
 $6267 = getTempRet0() | 0;
 $6268 = _bitshift64Shl($6244 | 0, $6245 | 0, 1) | 0;
 $6269 = getTempRet0() | 0;
 $6270 = $6268 & -2;
 $6271 = $6269 & 1;
 $6272 = ___muldi3($6260 | 0, 0, $6270 | 0, $6271 | 0) | 0;
 $6273 = getTempRet0() | 0;
 $6274 = _i64Add($6266 | 0, $6267 | 0, $6272 | 0, $6273 | 0) | 0;
 $6275 = getTempRet0() | 0;
 $6276 = $blockR;
 $6277 = $6276;
 HEAP32[$6277 >> 2] = $6274;
 $6278 = $6276 + 4 | 0;
 $6279 = $6278;
 HEAP32[$6279 >> 2] = $6275;
 $6280 = $6274 ^ $6247;
 $6281 = $6275 ^ $6246;
 $6282 = _bitshift64Lshr($6280 | 0, $6281 | 0, 16) | 0;
 $6283 = getTempRet0() | 0;
 $6284 = _bitshift64Shl($6280 | 0, $6281 | 0, 48) | 0;
 $6285 = getTempRet0() | 0;
 $6286 = $6282 | $6284;
 $6287 = $6283 | $6285;
 $6288 = $arrayidx11749;
 $6289 = $6288;
 HEAP32[$6289 >> 2] = $6286;
 $6290 = $6288 + 4 | 0;
 $6291 = $6290;
 HEAP32[$6291 >> 2] = $6287;
 $6292 = _i64Add($6286 | 0, $6287 | 0, $6256 | 0, $6257 | 0) | 0;
 $6293 = getTempRet0() | 0;
 $6294 = _bitshift64Shl($6256 | 0, $6257 | 0, 1) | 0;
 $6295 = getTempRet0() | 0;
 $6296 = $6294 & -2;
 $6297 = $6295 & 1;
 $6298 = ___muldi3($6282 | 0, 0, $6296 | 0, $6297 | 0) | 0;
 $6299 = getTempRet0() | 0;
 $6300 = _i64Add($6292 | 0, $6293 | 0, $6298 | 0, $6299 | 0) | 0;
 $6301 = getTempRet0() | 0;
 $6302 = $add$ptr8242;
 $6303 = $6302;
 HEAP32[$6303 >> 2] = $6300;
 $6304 = $6302 + 4 | 0;
 $6305 = $6304;
 HEAP32[$6305 >> 2] = $6301;
 $6306 = $6300 ^ $6264;
 $6307 = $6301 ^ $6265;
 $6308 = _bitshift64Lshr($6306 | 0, $6307 | 0, 63) | 0;
 $6309 = getTempRet0() | 0;
 $6310 = _bitshift64Shl($6306 | 0, $6307 | 0, 1) | 0;
 $6311 = getTempRet0() | 0;
 $6312 = $6308 | $6310;
 $6313 = $6309 | $6311;
 $6314 = $arrayidx3499;
 $6315 = $6314;
 HEAP32[$6315 >> 2] = $6312;
 $6316 = $6314 + 4 | 0;
 $6317 = $6316;
 HEAP32[$6317 >> 2] = $6313;
 $6318 = _i64Add($6156 | 0, $6157 | 0, $6040 | 0, $6041 | 0) | 0;
 $6319 = getTempRet0() | 0;
 $6320 = _bitshift64Shl($6040 | 0, $6041 | 0, 1) | 0;
 $6321 = getTempRet0() | 0;
 $6322 = $6320 & -2;
 $6323 = $6321 & 1;
 $6324 = ___muldi3($6156 | 0, 0, $6322 | 0, $6323 | 0) | 0;
 $6325 = getTempRet0() | 0;
 $6326 = _i64Add($6318 | 0, $6319 | 0, $6324 | 0, $6325 | 0) | 0;
 $6327 = getTempRet0() | 0;
 $6328 = $6326 ^ $5970;
 $6329 = $6327 ^ $5971;
 $6330 = _i64Add($6329 | 0, $6328 | 0, $6222 | 0, $6223 | 0) | 0;
 $6331 = getTempRet0() | 0;
 $6332 = _bitshift64Shl($6222 | 0, $6223 | 0, 1) | 0;
 $6333 = getTempRet0() | 0;
 $6334 = $6332 & -2;
 $6335 = $6333 & 1;
 $6336 = ___muldi3($6329 | 0, 0, $6334 | 0, $6335 | 0) | 0;
 $6337 = getTempRet0() | 0;
 $6338 = _i64Add($6330 | 0, $6331 | 0, $6336 | 0, $6337 | 0) | 0;
 $6339 = getTempRet0() | 0;
 $6340 = $6338 ^ $6156;
 $6341 = $6339 ^ $6157;
 $6342 = _bitshift64Lshr($6340 | 0, $6341 | 0, 24) | 0;
 $6343 = getTempRet0() | 0;
 $6344 = _bitshift64Shl($6340 | 0, $6341 | 0, 40) | 0;
 $6345 = getTempRet0() | 0;
 $6346 = $6342 | $6344;
 $6347 = $6343 | $6345;
 $6348 = _i64Add($6346 | 0, $6347 | 0, $6326 | 0, $6327 | 0) | 0;
 $6349 = getTempRet0() | 0;
 $6350 = _bitshift64Shl($6326 | 0, $6327 | 0, 1) | 0;
 $6351 = getTempRet0() | 0;
 $6352 = $6350 & -2;
 $6353 = $6351 & 1;
 $6354 = ___muldi3($6342 | 0, 0, $6352 | 0, $6353 | 0) | 0;
 $6355 = getTempRet0() | 0;
 $6356 = _i64Add($6348 | 0, $6349 | 0, $6354 | 0, $6355 | 0) | 0;
 $6357 = getTempRet0() | 0;
 $6358 = $arrayidx199;
 $6359 = $6358;
 HEAP32[$6359 >> 2] = $6356;
 $6360 = $6358 + 4 | 0;
 $6361 = $6360;
 HEAP32[$6361 >> 2] = $6357;
 $6362 = $6356 ^ $6329;
 $6363 = $6357 ^ $6328;
 $6364 = _bitshift64Lshr($6362 | 0, $6363 | 0, 16) | 0;
 $6365 = getTempRet0() | 0;
 $6366 = _bitshift64Shl($6362 | 0, $6363 | 0, 48) | 0;
 $6367 = getTempRet0() | 0;
 $6368 = $6364 | $6366;
 $6369 = $6365 | $6367;
 $6370 = $add$ptr9892;
 $6371 = $6370;
 HEAP32[$6371 >> 2] = $6368;
 $6372 = $6370 + 4 | 0;
 $6373 = $6372;
 HEAP32[$6373 >> 2] = $6369;
 $6374 = _i64Add($6368 | 0, $6369 | 0, $6338 | 0, $6339 | 0) | 0;
 $6375 = getTempRet0() | 0;
 $6376 = _bitshift64Shl($6338 | 0, $6339 | 0, 1) | 0;
 $6377 = getTempRet0() | 0;
 $6378 = $6376 & -2;
 $6379 = $6377 & 1;
 $6380 = ___muldi3($6364 | 0, 0, $6378 | 0, $6379 | 0) | 0;
 $6381 = getTempRet0() | 0;
 $6382 = _i64Add($6374 | 0, $6375 | 0, $6380 | 0, $6381 | 0) | 0;
 $6383 = getTempRet0() | 0;
 $6384 = $arrayidx8449;
 $6385 = $6384;
 HEAP32[$6385 >> 2] = $6382;
 $6386 = $6384 + 4 | 0;
 $6387 = $6386;
 HEAP32[$6387 >> 2] = $6383;
 $6388 = $6382 ^ $6346;
 $6389 = $6383 ^ $6347;
 $6390 = _bitshift64Lshr($6388 | 0, $6389 | 0, 63) | 0;
 $6391 = getTempRet0() | 0;
 $6392 = _bitshift64Shl($6388 | 0, $6389 | 0, 1) | 0;
 $6393 = getTempRet0() | 0;
 $6394 = $6390 | $6392;
 $6395 = $6391 | $6393;
 $6396 = $add$ptr4942;
 $6397 = $6396;
 HEAP32[$6397 >> 2] = $6394;
 $6398 = $6396 + 4 | 0;
 $6399 = $6398;
 HEAP32[$6399 >> 2] = $6395;
 $6400 = _i64Add($6230 | 0, $6231 | 0, $6122 | 0, $6123 | 0) | 0;
 $6401 = getTempRet0() | 0;
 $6402 = _bitshift64Shl($6122 | 0, $6123 | 0, 1) | 0;
 $6403 = getTempRet0() | 0;
 $6404 = $6402 & -2;
 $6405 = $6403 & 1;
 $6406 = ___muldi3($6230 | 0, 0, $6404 | 0, $6405 | 0) | 0;
 $6407 = getTempRet0() | 0;
 $6408 = _i64Add($6400 | 0, $6401 | 0, $6406 | 0, $6407 | 0) | 0;
 $6409 = getTempRet0() | 0;
 $6410 = $6408 ^ $6052;
 $6411 = $6409 ^ $6053;
 $6412 = _i64Add($6411 | 0, $6410 | 0, $5984 | 0, $5985 | 0) | 0;
 $6413 = getTempRet0() | 0;
 $6414 = _bitshift64Shl($5984 | 0, $5985 | 0, 1) | 0;
 $6415 = getTempRet0() | 0;
 $6416 = $6414 & -2;
 $6417 = $6415 & 1;
 $6418 = ___muldi3($6411 | 0, 0, $6416 | 0, $6417 | 0) | 0;
 $6419 = getTempRet0() | 0;
 $6420 = _i64Add($6412 | 0, $6413 | 0, $6418 | 0, $6419 | 0) | 0;
 $6421 = getTempRet0() | 0;
 $6422 = $6420 ^ $6230;
 $6423 = $6421 ^ $6231;
 $6424 = _bitshift64Lshr($6422 | 0, $6423 | 0, 24) | 0;
 $6425 = getTempRet0() | 0;
 $6426 = _bitshift64Shl($6422 | 0, $6423 | 0, 40) | 0;
 $6427 = getTempRet0() | 0;
 $6428 = $6424 | $6426;
 $6429 = $6425 | $6427;
 $6430 = _i64Add($6428 | 0, $6429 | 0, $6408 | 0, $6409 | 0) | 0;
 $6431 = getTempRet0() | 0;
 $6432 = _bitshift64Shl($6408 | 0, $6409 | 0, 1) | 0;
 $6433 = getTempRet0() | 0;
 $6434 = $6432 & -2;
 $6435 = $6433 & 1;
 $6436 = ___muldi3($6424 | 0, 0, $6434 | 0, $6435 | 0) | 0;
 $6437 = getTempRet0() | 0;
 $6438 = _i64Add($6430 | 0, $6431 | 0, $6436 | 0, $6437 | 0) | 0;
 $6439 = getTempRet0() | 0;
 $6440 = $add$ptr1642;
 $6441 = $6440;
 HEAP32[$6441 >> 2] = $6438;
 $6442 = $6440 + 4 | 0;
 $6443 = $6442;
 HEAP32[$6443 >> 2] = $6439;
 $6444 = $6438 ^ $6411;
 $6445 = $6439 ^ $6410;
 $6446 = _bitshift64Lshr($6444 | 0, $6445 | 0, 16) | 0;
 $6447 = getTempRet0() | 0;
 $6448 = _bitshift64Shl($6444 | 0, $6445 | 0, 48) | 0;
 $6449 = getTempRet0() | 0;
 $6450 = $6446 | $6448;
 $6451 = $6447 | $6449;
 $6452 = $arrayidx10099;
 $6453 = $6452;
 HEAP32[$6453 >> 2] = $6450;
 $6454 = $6452 + 4 | 0;
 $6455 = $6454;
 HEAP32[$6455 >> 2] = $6451;
 $6456 = _i64Add($6450 | 0, $6451 | 0, $6420 | 0, $6421 | 0) | 0;
 $6457 = getTempRet0() | 0;
 $6458 = _bitshift64Shl($6420 | 0, $6421 | 0, 1) | 0;
 $6459 = getTempRet0() | 0;
 $6460 = $6458 & -2;
 $6461 = $6459 & 1;
 $6462 = ___muldi3($6446 | 0, 0, $6460 | 0, $6461 | 0) | 0;
 $6463 = getTempRet0() | 0;
 $6464 = _i64Add($6456 | 0, $6457 | 0, $6462 | 0, $6463 | 0) | 0;
 $6465 = getTempRet0() | 0;
 $6466 = $add$ptr6592;
 $6467 = $6466;
 HEAP32[$6467 >> 2] = $6464;
 $6468 = $6466 + 4 | 0;
 $6469 = $6468;
 HEAP32[$6469 >> 2] = $6465;
 $6470 = $6464 ^ $6428;
 $6471 = $6465 ^ $6429;
 $6472 = _bitshift64Lshr($6470 | 0, $6471 | 0, 63) | 0;
 $6473 = getTempRet0() | 0;
 $6474 = _bitshift64Shl($6470 | 0, $6471 | 0, 1) | 0;
 $6475 = getTempRet0() | 0;
 $6476 = $6472 | $6474;
 $6477 = $6473 | $6475;
 $6478 = $arrayidx5149;
 $6479 = $6478;
 HEAP32[$6479 >> 2] = $6476;
 $6480 = $6478 + 4 | 0;
 $6481 = $6480;
 HEAP32[$6481 >> 2] = $6477;
 $6482 = _i64Add($6200 | 0, $6201 | 0, $5996 | 0, $5997 | 0) | 0;
 $6483 = getTempRet0() | 0;
 $6484 = _bitshift64Shl($6200 | 0, $6201 | 0, 1) | 0;
 $6485 = getTempRet0() | 0;
 $6486 = $6484 & -2;
 $6487 = $6485 & 1;
 $6488 = ___muldi3($6486 | 0, $6487 | 0, $5996 | 0, 0) | 0;
 $6489 = getTempRet0() | 0;
 $6490 = _i64Add($6482 | 0, $6483 | 0, $6488 | 0, $6489 | 0) | 0;
 $6491 = getTempRet0() | 0;
 $6492 = $6490 ^ $6134;
 $6493 = $6491 ^ $6135;
 $6494 = _i64Add($6493 | 0, $6492 | 0, $6066 | 0, $6067 | 0) | 0;
 $6495 = getTempRet0() | 0;
 $6496 = _bitshift64Shl($6066 | 0, $6067 | 0, 1) | 0;
 $6497 = getTempRet0() | 0;
 $6498 = $6496 & -2;
 $6499 = $6497 & 1;
 $6500 = ___muldi3($6493 | 0, 0, $6498 | 0, $6499 | 0) | 0;
 $6501 = getTempRet0() | 0;
 $6502 = _i64Add($6494 | 0, $6495 | 0, $6500 | 0, $6501 | 0) | 0;
 $6503 = getTempRet0() | 0;
 $6504 = $6502 ^ $5996;
 $6505 = $6503 ^ $5997;
 $6506 = _bitshift64Lshr($6504 | 0, $6505 | 0, 24) | 0;
 $6507 = getTempRet0() | 0;
 $6508 = _bitshift64Shl($6504 | 0, $6505 | 0, 40) | 0;
 $6509 = getTempRet0() | 0;
 $6510 = $6506 | $6508;
 $6511 = $6507 | $6509;
 $6512 = _i64Add($6510 | 0, $6511 | 0, $6490 | 0, $6491 | 0) | 0;
 $6513 = getTempRet0() | 0;
 $6514 = _bitshift64Shl($6490 | 0, $6491 | 0, 1) | 0;
 $6515 = getTempRet0() | 0;
 $6516 = $6514 & -2;
 $6517 = $6515 & 1;
 $6518 = ___muldi3($6506 | 0, 0, $6516 | 0, $6517 | 0) | 0;
 $6519 = getTempRet0() | 0;
 $6520 = _i64Add($6512 | 0, $6513 | 0, $6518 | 0, $6519 | 0) | 0;
 $6521 = getTempRet0() | 0;
 $6522 = $arrayidx1849;
 $6523 = $6522;
 HEAP32[$6523 >> 2] = $6520;
 $6524 = $6522 + 4 | 0;
 $6525 = $6524;
 HEAP32[$6525 >> 2] = $6521;
 $6526 = $6520 ^ $6493;
 $6527 = $6521 ^ $6492;
 $6528 = _bitshift64Lshr($6526 | 0, $6527 | 0, 16) | 0;
 $6529 = getTempRet0() | 0;
 $6530 = _bitshift64Shl($6526 | 0, $6527 | 0, 48) | 0;
 $6531 = getTempRet0() | 0;
 $6532 = $6528 | $6530;
 $6533 = $6529 | $6531;
 $6534 = $add$ptr11542;
 $6535 = $6534;
 HEAP32[$6535 >> 2] = $6532;
 $6536 = $6534 + 4 | 0;
 $6537 = $6536;
 HEAP32[$6537 >> 2] = $6533;
 $6538 = _i64Add($6532 | 0, $6533 | 0, $6502 | 0, $6503 | 0) | 0;
 $6539 = getTempRet0() | 0;
 $6540 = _bitshift64Shl($6502 | 0, $6503 | 0, 1) | 0;
 $6541 = getTempRet0() | 0;
 $6542 = $6540 & -2;
 $6543 = $6541 & 1;
 $6544 = ___muldi3($6528 | 0, 0, $6542 | 0, $6543 | 0) | 0;
 $6545 = getTempRet0() | 0;
 $6546 = _i64Add($6538 | 0, $6539 | 0, $6544 | 0, $6545 | 0) | 0;
 $6547 = getTempRet0() | 0;
 $6548 = $arrayidx6799;
 $6549 = $6548;
 HEAP32[$6549 >> 2] = $6546;
 $6550 = $6548 + 4 | 0;
 $6551 = $6550;
 HEAP32[$6551 >> 2] = $6547;
 $6552 = $6546 ^ $6510;
 $6553 = $6547 ^ $6511;
 $6554 = _bitshift64Lshr($6552 | 0, $6553 | 0, 63) | 0;
 $6555 = getTempRet0() | 0;
 $6556 = _bitshift64Shl($6552 | 0, $6553 | 0, 1) | 0;
 $6557 = getTempRet0() | 0;
 $6558 = $6554 | $6556;
 $6559 = $6555 | $6557;
 $6560 = $add$ptr3292;
 $6561 = $6560;
 HEAP32[$6561 >> 2] = $6558;
 $6562 = $6560 + 4 | 0;
 $6563 = $6562;
 HEAP32[$6563 >> 2] = $6559;
 $6564 = _i64Add($2094 | 0, $2095 | 0, $614 | 0, $615 | 0) | 0;
 $6565 = getTempRet0() | 0;
 $6566 = _bitshift64Shl($614 | 0, $615 | 0, 1) | 0;
 $6567 = getTempRet0() | 0;
 $6568 = $6566 & -2;
 $6569 = $6567 & 1;
 $6570 = ___muldi3($2094 | 0, 0, $6568 | 0, $6569 | 0) | 0;
 $6571 = getTempRet0() | 0;
 $6572 = _i64Add($6564 | 0, $6565 | 0, $6570 | 0, $6571 | 0) | 0;
 $6573 = getTempRet0() | 0;
 $6574 = $5054 ^ $6572;
 $6575 = $5055 ^ $6573;
 $6576 = _i64Add($6575 | 0, $6574 | 0, $3574 | 0, $3575 | 0) | 0;
 $6577 = getTempRet0() | 0;
 $6578 = _bitshift64Shl($3574 | 0, $3575 | 0, 1) | 0;
 $6579 = getTempRet0() | 0;
 $6580 = $6578 & -2;
 $6581 = $6579 & 1;
 $6582 = ___muldi3($6575 | 0, 0, $6580 | 0, $6581 | 0) | 0;
 $6583 = getTempRet0() | 0;
 $6584 = _i64Add($6576 | 0, $6577 | 0, $6582 | 0, $6583 | 0) | 0;
 $6585 = getTempRet0() | 0;
 $6586 = $6584 ^ $2094;
 $6587 = $6585 ^ $2095;
 $6588 = _bitshift64Lshr($6586 | 0, $6587 | 0, 24) | 0;
 $6589 = getTempRet0() | 0;
 $6590 = _bitshift64Shl($6586 | 0, $6587 | 0, 40) | 0;
 $6591 = getTempRet0() | 0;
 $6592 = $6588 | $6590;
 $6593 = $6589 | $6591;
 $6594 = _i64Add($6592 | 0, $6593 | 0, $6572 | 0, $6573 | 0) | 0;
 $6595 = getTempRet0() | 0;
 $6596 = _bitshift64Shl($6572 | 0, $6573 | 0, 1) | 0;
 $6597 = getTempRet0() | 0;
 $6598 = $6596 & -2;
 $6599 = $6597 & 1;
 $6600 = ___muldi3($6588 | 0, 0, $6598 | 0, $6599 | 0) | 0;
 $6601 = getTempRet0() | 0;
 $6602 = _i64Add($6594 | 0, $6595 | 0, $6600 | 0, $6601 | 0) | 0;
 $6603 = getTempRet0() | 0;
 $6604 = $arrayidx405;
 $6605 = $6604;
 HEAP32[$6605 >> 2] = $6602;
 $6606 = $6604 + 4 | 0;
 $6607 = $6606;
 HEAP32[$6607 >> 2] = $6603;
 $6608 = $6602 ^ $6575;
 $6609 = $6603 ^ $6574;
 $6610 = _bitshift64Lshr($6608 | 0, $6609 | 0, 16) | 0;
 $6611 = getTempRet0() | 0;
 $6612 = _bitshift64Shl($6608 | 0, $6609 | 0, 48) | 0;
 $6613 = getTempRet0() | 0;
 $6614 = $6610 | $6612;
 $6615 = $6611 | $6613;
 $6616 = $arrayidx10305;
 $6617 = $6616;
 HEAP32[$6617 >> 2] = $6614;
 $6618 = $6616 + 4 | 0;
 $6619 = $6618;
 HEAP32[$6619 >> 2] = $6615;
 $6620 = _i64Add($6614 | 0, $6615 | 0, $6584 | 0, $6585 | 0) | 0;
 $6621 = getTempRet0() | 0;
 $6622 = _bitshift64Shl($6584 | 0, $6585 | 0, 1) | 0;
 $6623 = getTempRet0() | 0;
 $6624 = $6622 & -2;
 $6625 = $6623 & 1;
 $6626 = ___muldi3($6610 | 0, 0, $6624 | 0, $6625 | 0) | 0;
 $6627 = getTempRet0() | 0;
 $6628 = _i64Add($6620 | 0, $6621 | 0, $6626 | 0, $6627 | 0) | 0;
 $6629 = getTempRet0() | 0;
 $6630 = $arrayidx7005;
 $6631 = $6630;
 HEAP32[$6631 >> 2] = $6628;
 $6632 = $6630 + 4 | 0;
 $6633 = $6632;
 HEAP32[$6633 >> 2] = $6629;
 $6634 = $6628 ^ $6592;
 $6635 = $6629 ^ $6593;
 $6636 = _bitshift64Lshr($6634 | 0, $6635 | 0, 63) | 0;
 $6637 = getTempRet0() | 0;
 $6638 = _bitshift64Shl($6634 | 0, $6635 | 0, 1) | 0;
 $6639 = getTempRet0() | 0;
 $6640 = $6636 | $6638;
 $6641 = $6637 | $6639;
 $6642 = $arrayidx3705;
 $6643 = $6642;
 HEAP32[$6643 >> 2] = $6640;
 $6644 = $6642 + 4 | 0;
 $6645 = $6644;
 HEAP32[$6645 >> 2] = $6641;
 $6646 = _i64Add($2176 | 0, $2177 | 0, $696 | 0, $697 | 0) | 0;
 $6647 = getTempRet0() | 0;
 $6648 = _bitshift64Shl($696 | 0, $697 | 0, 1) | 0;
 $6649 = getTempRet0() | 0;
 $6650 = $6648 & -2;
 $6651 = $6649 & 1;
 $6652 = ___muldi3($2176 | 0, 0, $6650 | 0, $6651 | 0) | 0;
 $6653 = getTempRet0() | 0;
 $6654 = _i64Add($6646 | 0, $6647 | 0, $6652 | 0, $6653 | 0) | 0;
 $6655 = getTempRet0() | 0;
 $6656 = $5136 ^ $6654;
 $6657 = $5137 ^ $6655;
 $6658 = _i64Add($6657 | 0, $6656 | 0, $3656 | 0, $3657 | 0) | 0;
 $6659 = getTempRet0() | 0;
 $6660 = _bitshift64Shl($3656 | 0, $3657 | 0, 1) | 0;
 $6661 = getTempRet0() | 0;
 $6662 = $6660 & -2;
 $6663 = $6661 & 1;
 $6664 = ___muldi3($6657 | 0, 0, $6662 | 0, $6663 | 0) | 0;
 $6665 = getTempRet0() | 0;
 $6666 = _i64Add($6658 | 0, $6659 | 0, $6664 | 0, $6665 | 0) | 0;
 $6667 = getTempRet0() | 0;
 $6668 = $6666 ^ $2176;
 $6669 = $6667 ^ $2177;
 $6670 = _bitshift64Lshr($6668 | 0, $6669 | 0, 24) | 0;
 $6671 = getTempRet0() | 0;
 $6672 = _bitshift64Shl($6668 | 0, $6669 | 0, 40) | 0;
 $6673 = getTempRet0() | 0;
 $6674 = $6670 | $6672;
 $6675 = $6671 | $6673;
 $6676 = _i64Add($6674 | 0, $6675 | 0, $6654 | 0, $6655 | 0) | 0;
 $6677 = getTempRet0() | 0;
 $6678 = _bitshift64Shl($6654 | 0, $6655 | 0, 1) | 0;
 $6679 = getTempRet0() | 0;
 $6680 = $6678 & -2;
 $6681 = $6679 & 1;
 $6682 = ___muldi3($6670 | 0, 0, $6680 | 0, $6681 | 0) | 0;
 $6683 = getTempRet0() | 0;
 $6684 = _i64Add($6676 | 0, $6677 | 0, $6682 | 0, $6683 | 0) | 0;
 $6685 = getTempRet0() | 0;
 $6686 = $arrayidx611;
 $6687 = $6686;
 HEAP32[$6687 >> 2] = $6684;
 $6688 = $6686 + 4 | 0;
 $6689 = $6688;
 HEAP32[$6689 >> 2] = $6685;
 $6690 = $6684 ^ $6657;
 $6691 = $6685 ^ $6656;
 $6692 = _bitshift64Lshr($6690 | 0, $6691 | 0, 16) | 0;
 $6693 = getTempRet0() | 0;
 $6694 = _bitshift64Shl($6690 | 0, $6691 | 0, 48) | 0;
 $6695 = getTempRet0() | 0;
 $6696 = $6692 | $6694;
 $6697 = $6693 | $6695;
 $6698 = $arrayidx10511;
 $6699 = $6698;
 HEAP32[$6699 >> 2] = $6696;
 $6700 = $6698 + 4 | 0;
 $6701 = $6700;
 HEAP32[$6701 >> 2] = $6697;
 $6702 = _i64Add($6696 | 0, $6697 | 0, $6666 | 0, $6667 | 0) | 0;
 $6703 = getTempRet0() | 0;
 $6704 = _bitshift64Shl($6666 | 0, $6667 | 0, 1) | 0;
 $6705 = getTempRet0() | 0;
 $6706 = $6704 & -2;
 $6707 = $6705 & 1;
 $6708 = ___muldi3($6692 | 0, 0, $6706 | 0, $6707 | 0) | 0;
 $6709 = getTempRet0() | 0;
 $6710 = _i64Add($6702 | 0, $6703 | 0, $6708 | 0, $6709 | 0) | 0;
 $6711 = getTempRet0() | 0;
 $6712 = $arrayidx7211;
 $6713 = $6712;
 HEAP32[$6713 >> 2] = $6710;
 $6714 = $6712 + 4 | 0;
 $6715 = $6714;
 HEAP32[$6715 >> 2] = $6711;
 $6716 = $6710 ^ $6674;
 $6717 = $6711 ^ $6675;
 $6718 = _bitshift64Lshr($6716 | 0, $6717 | 0, 63) | 0;
 $6719 = getTempRet0() | 0;
 $6720 = _bitshift64Shl($6716 | 0, $6717 | 0, 1) | 0;
 $6721 = getTempRet0() | 0;
 $6722 = $6718 | $6720;
 $6723 = $6719 | $6721;
 $6724 = $arrayidx3911;
 $6725 = $6724;
 HEAP32[$6725 >> 2] = $6722;
 $6726 = $6724 + 4 | 0;
 $6727 = $6726;
 HEAP32[$6727 >> 2] = $6723;
 $6728 = _i64Add($2834 | 0, $2835 | 0, $1354 | 0, $1355 | 0) | 0;
 $6729 = getTempRet0() | 0;
 $6730 = _bitshift64Shl($1354 | 0, $1355 | 0, 1) | 0;
 $6731 = getTempRet0() | 0;
 $6732 = $6730 & -2;
 $6733 = $6731 & 1;
 $6734 = ___muldi3($2834 | 0, 0, $6732 | 0, $6733 | 0) | 0;
 $6735 = getTempRet0() | 0;
 $6736 = _i64Add($6728 | 0, $6729 | 0, $6734 | 0, $6735 | 0) | 0;
 $6737 = getTempRet0() | 0;
 $6738 = $5794 ^ $6736;
 $6739 = $5795 ^ $6737;
 $6740 = _i64Add($6739 | 0, $6738 | 0, $4314 | 0, $4315 | 0) | 0;
 $6741 = getTempRet0() | 0;
 $6742 = _bitshift64Shl($4314 | 0, $4315 | 0, 1) | 0;
 $6743 = getTempRet0() | 0;
 $6744 = $6742 & -2;
 $6745 = $6743 & 1;
 $6746 = ___muldi3($6739 | 0, 0, $6744 | 0, $6745 | 0) | 0;
 $6747 = getTempRet0() | 0;
 $6748 = _i64Add($6740 | 0, $6741 | 0, $6746 | 0, $6747 | 0) | 0;
 $6749 = getTempRet0() | 0;
 $6750 = $6748 ^ $2834;
 $6751 = $6749 ^ $2835;
 $6752 = _bitshift64Lshr($6750 | 0, $6751 | 0, 24) | 0;
 $6753 = getTempRet0() | 0;
 $6754 = _bitshift64Shl($6750 | 0, $6751 | 0, 40) | 0;
 $6755 = getTempRet0() | 0;
 $6756 = $6752 | $6754;
 $6757 = $6753 | $6755;
 $6758 = _i64Add($6756 | 0, $6757 | 0, $6736 | 0, $6737 | 0) | 0;
 $6759 = getTempRet0() | 0;
 $6760 = _bitshift64Shl($6736 | 0, $6737 | 0, 1) | 0;
 $6761 = getTempRet0() | 0;
 $6762 = $6760 & -2;
 $6763 = $6761 & 1;
 $6764 = ___muldi3($6752 | 0, 0, $6762 | 0, $6763 | 0) | 0;
 $6765 = getTempRet0() | 0;
 $6766 = _i64Add($6758 | 0, $6759 | 0, $6764 | 0, $6765 | 0) | 0;
 $6767 = getTempRet0() | 0;
 $6768 = $arrayidx2055;
 $6769 = $6768;
 HEAP32[$6769 >> 2] = $6766;
 $6770 = $6768 + 4 | 0;
 $6771 = $6770;
 HEAP32[$6771 >> 2] = $6767;
 $6772 = $6766 ^ $6739;
 $6773 = $6767 ^ $6738;
 $6774 = _bitshift64Lshr($6772 | 0, $6773 | 0, 16) | 0;
 $6775 = getTempRet0() | 0;
 $6776 = _bitshift64Shl($6772 | 0, $6773 | 0, 48) | 0;
 $6777 = getTempRet0() | 0;
 $6778 = $6774 | $6776;
 $6779 = $6775 | $6777;
 $6780 = $arrayidx11955;
 $6781 = $6780;
 HEAP32[$6781 >> 2] = $6778;
 $6782 = $6780 + 4 | 0;
 $6783 = $6782;
 HEAP32[$6783 >> 2] = $6779;
 $6784 = _i64Add($6778 | 0, $6779 | 0, $6748 | 0, $6749 | 0) | 0;
 $6785 = getTempRet0() | 0;
 $6786 = _bitshift64Shl($6748 | 0, $6749 | 0, 1) | 0;
 $6787 = getTempRet0() | 0;
 $6788 = $6786 & -2;
 $6789 = $6787 & 1;
 $6790 = ___muldi3($6774 | 0, 0, $6788 | 0, $6789 | 0) | 0;
 $6791 = getTempRet0() | 0;
 $6792 = _i64Add($6784 | 0, $6785 | 0, $6790 | 0, $6791 | 0) | 0;
 $6793 = getTempRet0() | 0;
 $6794 = $6792 ^ $6756;
 $6795 = $6793 ^ $6757;
 $6796 = _bitshift64Lshr($6794 | 0, $6795 | 0, 63) | 0;
 $6797 = getTempRet0() | 0;
 $6798 = _bitshift64Shl($6794 | 0, $6795 | 0, 1) | 0;
 $6799 = getTempRet0() | 0;
 $6800 = $6796 | $6798;
 $6801 = $6797 | $6799;
 $6802 = $arrayidx5355;
 $6803 = $6802;
 HEAP32[$6803 >> 2] = $6800;
 $6804 = $6802 + 4 | 0;
 $6805 = $6804;
 HEAP32[$6805 >> 2] = $6801;
 $6806 = _i64Add($2916 | 0, $2917 | 0, $1436 | 0, $1437 | 0) | 0;
 $6807 = getTempRet0() | 0;
 $6808 = _bitshift64Shl($1436 | 0, $1437 | 0, 1) | 0;
 $6809 = getTempRet0() | 0;
 $6810 = $6808 & -2;
 $6811 = $6809 & 1;
 $6812 = ___muldi3($2916 | 0, 0, $6810 | 0, $6811 | 0) | 0;
 $6813 = getTempRet0() | 0;
 $6814 = _i64Add($6806 | 0, $6807 | 0, $6812 | 0, $6813 | 0) | 0;
 $6815 = getTempRet0() | 0;
 $6816 = $5876 ^ $6814;
 $6817 = $5877 ^ $6815;
 $6818 = _i64Add($6817 | 0, $6816 | 0, $4396 | 0, $4397 | 0) | 0;
 $6819 = getTempRet0() | 0;
 $6820 = _bitshift64Shl($4396 | 0, $4397 | 0, 1) | 0;
 $6821 = getTempRet0() | 0;
 $6822 = $6820 & -2;
 $6823 = $6821 & 1;
 $6824 = ___muldi3($6817 | 0, 0, $6822 | 0, $6823 | 0) | 0;
 $6825 = getTempRet0() | 0;
 $6826 = _i64Add($6818 | 0, $6819 | 0, $6824 | 0, $6825 | 0) | 0;
 $6827 = getTempRet0() | 0;
 $6828 = $6826 ^ $2916;
 $6829 = $6827 ^ $2917;
 $6830 = _bitshift64Lshr($6828 | 0, $6829 | 0, 24) | 0;
 $6831 = getTempRet0() | 0;
 $6832 = _bitshift64Shl($6828 | 0, $6829 | 0, 40) | 0;
 $6833 = getTempRet0() | 0;
 $6834 = $6830 | $6832;
 $6835 = $6831 | $6833;
 $6836 = _i64Add($6834 | 0, $6835 | 0, $6814 | 0, $6815 | 0) | 0;
 $6837 = getTempRet0() | 0;
 $6838 = _bitshift64Shl($6814 | 0, $6815 | 0, 1) | 0;
 $6839 = getTempRet0() | 0;
 $6840 = $6838 & -2;
 $6841 = $6839 & 1;
 $6842 = ___muldi3($6830 | 0, 0, $6840 | 0, $6841 | 0) | 0;
 $6843 = getTempRet0() | 0;
 $6844 = _i64Add($6836 | 0, $6837 | 0, $6842 | 0, $6843 | 0) | 0;
 $6845 = getTempRet0() | 0;
 $6846 = $arrayidx2261;
 $6847 = $6846;
 HEAP32[$6847 >> 2] = $6844;
 $6848 = $6846 + 4 | 0;
 $6849 = $6848;
 HEAP32[$6849 >> 2] = $6845;
 $6850 = $6844 ^ $6817;
 $6851 = $6845 ^ $6816;
 $6852 = _bitshift64Lshr($6850 | 0, $6851 | 0, 16) | 0;
 $6853 = getTempRet0() | 0;
 $6854 = _bitshift64Shl($6850 | 0, $6851 | 0, 48) | 0;
 $6855 = getTempRet0() | 0;
 $6856 = $6852 | $6854;
 $6857 = $6853 | $6855;
 $6858 = _i64Add($6856 | 0, $6857 | 0, $6826 | 0, $6827 | 0) | 0;
 $6859 = getTempRet0() | 0;
 $6860 = _bitshift64Shl($6826 | 0, $6827 | 0, 1) | 0;
 $6861 = getTempRet0() | 0;
 $6862 = $6860 & -2;
 $6863 = $6861 & 1;
 $6864 = ___muldi3($6852 | 0, 0, $6862 | 0, $6863 | 0) | 0;
 $6865 = getTempRet0() | 0;
 $6866 = _i64Add($6858 | 0, $6859 | 0, $6864 | 0, $6865 | 0) | 0;
 $6867 = getTempRet0() | 0;
 $6868 = $6866 ^ $6834;
 $6869 = $6867 ^ $6835;
 $6870 = _bitshift64Lshr($6868 | 0, $6869 | 0, 63) | 0;
 $6871 = getTempRet0() | 0;
 $6872 = _bitshift64Shl($6868 | 0, $6869 | 0, 1) | 0;
 $6873 = getTempRet0() | 0;
 $6874 = $6870 | $6872;
 $6875 = $6871 | $6873;
 $6876 = $arrayidx5561;
 $6877 = $6876;
 HEAP32[$6877 >> 2] = $6874;
 $6878 = $6876 + 4 | 0;
 $6879 = $6878;
 HEAP32[$6879 >> 2] = $6875;
 $6880 = _i64Add($6722 | 0, $6723 | 0, $6602 | 0, $6603 | 0) | 0;
 $6881 = getTempRet0() | 0;
 $6882 = _bitshift64Shl($6602 | 0, $6603 | 0, 1) | 0;
 $6883 = getTempRet0() | 0;
 $6884 = $6882 & -2;
 $6885 = $6883 & 1;
 $6886 = ___muldi3($6884 | 0, $6885 | 0, $6722 | 0, 0) | 0;
 $6887 = getTempRet0() | 0;
 $6888 = _i64Add($6880 | 0, $6881 | 0, $6886 | 0, $6887 | 0) | 0;
 $6889 = getTempRet0() | 0;
 $6890 = $6856 ^ $6888;
 $6891 = $6857 ^ $6889;
 $6892 = _i64Add($6792 | 0, $6793 | 0, $6891 | 0, $6890 | 0) | 0;
 $6893 = getTempRet0() | 0;
 $6894 = _bitshift64Shl($6792 | 0, $6793 | 0, 1) | 0;
 $6895 = getTempRet0() | 0;
 $6896 = $6894 & -2;
 $6897 = $6895 & 1;
 $6898 = ___muldi3($6896 | 0, $6897 | 0, $6891 | 0, 0) | 0;
 $6899 = getTempRet0() | 0;
 $6900 = _i64Add($6892 | 0, $6893 | 0, $6898 | 0, $6899 | 0) | 0;
 $6901 = getTempRet0() | 0;
 $6902 = $6900 ^ $6722;
 $6903 = $6901 ^ $6723;
 $6904 = _bitshift64Lshr($6902 | 0, $6903 | 0, 24) | 0;
 $6905 = getTempRet0() | 0;
 $6906 = _bitshift64Shl($6902 | 0, $6903 | 0, 40) | 0;
 $6907 = getTempRet0() | 0;
 $6908 = $6904 | $6906;
 $6909 = $6905 | $6907;
 $6910 = _i64Add($6908 | 0, $6909 | 0, $6888 | 0, $6889 | 0) | 0;
 $6911 = getTempRet0() | 0;
 $6912 = _bitshift64Shl($6888 | 0, $6889 | 0, 1) | 0;
 $6913 = getTempRet0() | 0;
 $6914 = $6912 & -2;
 $6915 = $6913 & 1;
 $6916 = ___muldi3($6904 | 0, 0, $6914 | 0, $6915 | 0) | 0;
 $6917 = getTempRet0() | 0;
 $6918 = _i64Add($6910 | 0, $6911 | 0, $6916 | 0, $6917 | 0) | 0;
 $6919 = getTempRet0() | 0;
 $6920 = $arrayidx405;
 $6921 = $6920;
 HEAP32[$6921 >> 2] = $6918;
 $6922 = $6920 + 4 | 0;
 $6923 = $6922;
 HEAP32[$6923 >> 2] = $6919;
 $6924 = $6918 ^ $6891;
 $6925 = $6919 ^ $6890;
 $6926 = _bitshift64Lshr($6924 | 0, $6925 | 0, 16) | 0;
 $6927 = getTempRet0() | 0;
 $6928 = _bitshift64Shl($6924 | 0, $6925 | 0, 48) | 0;
 $6929 = getTempRet0() | 0;
 $6930 = $6926 | $6928;
 $6931 = $6927 | $6929;
 $6932 = $arrayidx12161;
 $6933 = $6932;
 HEAP32[$6933 >> 2] = $6930;
 $6934 = $6932 + 4 | 0;
 $6935 = $6934;
 HEAP32[$6935 >> 2] = $6931;
 $6936 = _i64Add($6930 | 0, $6931 | 0, $6900 | 0, $6901 | 0) | 0;
 $6937 = getTempRet0() | 0;
 $6938 = _bitshift64Shl($6900 | 0, $6901 | 0, 1) | 0;
 $6939 = getTempRet0() | 0;
 $6940 = $6938 & -2;
 $6941 = $6939 & 1;
 $6942 = ___muldi3($6926 | 0, 0, $6940 | 0, $6941 | 0) | 0;
 $6943 = getTempRet0() | 0;
 $6944 = _i64Add($6936 | 0, $6937 | 0, $6942 | 0, $6943 | 0) | 0;
 $6945 = getTempRet0() | 0;
 $6946 = $arrayidx8655;
 $6947 = $6946;
 HEAP32[$6947 >> 2] = $6944;
 $6948 = $6946 + 4 | 0;
 $6949 = $6948;
 HEAP32[$6949 >> 2] = $6945;
 $6950 = $6944 ^ $6908;
 $6951 = $6945 ^ $6909;
 $6952 = _bitshift64Lshr($6950 | 0, $6951 | 0, 63) | 0;
 $6953 = getTempRet0() | 0;
 $6954 = _bitshift64Shl($6950 | 0, $6951 | 0, 1) | 0;
 $6955 = getTempRet0() | 0;
 $6956 = $6952 | $6954;
 $6957 = $6953 | $6955;
 $6958 = $arrayidx3911;
 $6959 = $6958;
 HEAP32[$6959 >> 2] = $6956;
 $6960 = $6958 + 4 | 0;
 $6961 = $6960;
 HEAP32[$6961 >> 2] = $6957;
 $6962 = _i64Add($6800 | 0, $6801 | 0, $6684 | 0, $6685 | 0) | 0;
 $6963 = getTempRet0() | 0;
 $6964 = _bitshift64Shl($6684 | 0, $6685 | 0, 1) | 0;
 $6965 = getTempRet0() | 0;
 $6966 = $6964 & -2;
 $6967 = $6965 & 1;
 $6968 = ___muldi3($6800 | 0, 0, $6966 | 0, $6967 | 0) | 0;
 $6969 = getTempRet0() | 0;
 $6970 = _i64Add($6962 | 0, $6963 | 0, $6968 | 0, $6969 | 0) | 0;
 $6971 = getTempRet0() | 0;
 $6972 = $6970 ^ $6614;
 $6973 = $6971 ^ $6615;
 $6974 = _i64Add($6973 | 0, $6972 | 0, $6866 | 0, $6867 | 0) | 0;
 $6975 = getTempRet0() | 0;
 $6976 = _bitshift64Shl($6866 | 0, $6867 | 0, 1) | 0;
 $6977 = getTempRet0() | 0;
 $6978 = $6976 & -2;
 $6979 = $6977 & 1;
 $6980 = ___muldi3($6973 | 0, 0, $6978 | 0, $6979 | 0) | 0;
 $6981 = getTempRet0() | 0;
 $6982 = _i64Add($6974 | 0, $6975 | 0, $6980 | 0, $6981 | 0) | 0;
 $6983 = getTempRet0() | 0;
 $6984 = $6982 ^ $6800;
 $6985 = $6983 ^ $6801;
 $6986 = _bitshift64Lshr($6984 | 0, $6985 | 0, 24) | 0;
 $6987 = getTempRet0() | 0;
 $6988 = _bitshift64Shl($6984 | 0, $6985 | 0, 40) | 0;
 $6989 = getTempRet0() | 0;
 $6990 = $6986 | $6988;
 $6991 = $6987 | $6989;
 $6992 = _i64Add($6990 | 0, $6991 | 0, $6970 | 0, $6971 | 0) | 0;
 $6993 = getTempRet0() | 0;
 $6994 = _bitshift64Shl($6970 | 0, $6971 | 0, 1) | 0;
 $6995 = getTempRet0() | 0;
 $6996 = $6994 & -2;
 $6997 = $6995 & 1;
 $6998 = ___muldi3($6986 | 0, 0, $6996 | 0, $6997 | 0) | 0;
 $6999 = getTempRet0() | 0;
 $7000 = _i64Add($6992 | 0, $6993 | 0, $6998 | 0, $6999 | 0) | 0;
 $7001 = getTempRet0() | 0;
 $7002 = $arrayidx611;
 $7003 = $7002;
 HEAP32[$7003 >> 2] = $7000;
 $7004 = $7002 + 4 | 0;
 $7005 = $7004;
 HEAP32[$7005 >> 2] = $7001;
 $7006 = $7000 ^ $6973;
 $7007 = $7001 ^ $6972;
 $7008 = _bitshift64Lshr($7006 | 0, $7007 | 0, 16) | 0;
 $7009 = getTempRet0() | 0;
 $7010 = _bitshift64Shl($7006 | 0, $7007 | 0, 48) | 0;
 $7011 = getTempRet0() | 0;
 $7012 = $7008 | $7010;
 $7013 = $7009 | $7011;
 $7014 = $arrayidx10305;
 $7015 = $7014;
 HEAP32[$7015 >> 2] = $7012;
 $7016 = $7014 + 4 | 0;
 $7017 = $7016;
 HEAP32[$7017 >> 2] = $7013;
 $7018 = _i64Add($7012 | 0, $7013 | 0, $6982 | 0, $6983 | 0) | 0;
 $7019 = getTempRet0() | 0;
 $7020 = _bitshift64Shl($6982 | 0, $6983 | 0, 1) | 0;
 $7021 = getTempRet0() | 0;
 $7022 = $7020 & -2;
 $7023 = $7021 & 1;
 $7024 = ___muldi3($7008 | 0, 0, $7022 | 0, $7023 | 0) | 0;
 $7025 = getTempRet0() | 0;
 $7026 = _i64Add($7018 | 0, $7019 | 0, $7024 | 0, $7025 | 0) | 0;
 $7027 = getTempRet0() | 0;
 $7028 = $arrayidx8861;
 $7029 = $7028;
 HEAP32[$7029 >> 2] = $7026;
 $7030 = $7028 + 4 | 0;
 $7031 = $7030;
 HEAP32[$7031 >> 2] = $7027;
 $7032 = $7026 ^ $6990;
 $7033 = $7027 ^ $6991;
 $7034 = _bitshift64Lshr($7032 | 0, $7033 | 0, 63) | 0;
 $7035 = getTempRet0() | 0;
 $7036 = _bitshift64Shl($7032 | 0, $7033 | 0, 1) | 0;
 $7037 = getTempRet0() | 0;
 $7038 = $7034 | $7036;
 $7039 = $7035 | $7037;
 $7040 = $arrayidx5355;
 $7041 = $7040;
 HEAP32[$7041 >> 2] = $7038;
 $7042 = $7040 + 4 | 0;
 $7043 = $7042;
 HEAP32[$7043 >> 2] = $7039;
 $7044 = _i64Add($6874 | 0, $6875 | 0, $6766 | 0, $6767 | 0) | 0;
 $7045 = getTempRet0() | 0;
 $7046 = _bitshift64Shl($6766 | 0, $6767 | 0, 1) | 0;
 $7047 = getTempRet0() | 0;
 $7048 = $7046 & -2;
 $7049 = $7047 & 1;
 $7050 = ___muldi3($7048 | 0, $7049 | 0, $6874 | 0, 0) | 0;
 $7051 = getTempRet0() | 0;
 $7052 = _i64Add($7044 | 0, $7045 | 0, $7050 | 0, $7051 | 0) | 0;
 $7053 = getTempRet0() | 0;
 $7054 = $7052 ^ $6696;
 $7055 = $7053 ^ $6697;
 $7056 = _i64Add($7055 | 0, $7054 | 0, $6628 | 0, $6629 | 0) | 0;
 $7057 = getTempRet0() | 0;
 $7058 = _bitshift64Shl($6628 | 0, $6629 | 0, 1) | 0;
 $7059 = getTempRet0() | 0;
 $7060 = $7058 & -2;
 $7061 = $7059 & 1;
 $7062 = ___muldi3($7055 | 0, 0, $7060 | 0, $7061 | 0) | 0;
 $7063 = getTempRet0() | 0;
 $7064 = _i64Add($7056 | 0, $7057 | 0, $7062 | 0, $7063 | 0) | 0;
 $7065 = getTempRet0() | 0;
 $7066 = $7064 ^ $6874;
 $7067 = $7065 ^ $6875;
 $7068 = _bitshift64Lshr($7066 | 0, $7067 | 0, 24) | 0;
 $7069 = getTempRet0() | 0;
 $7070 = _bitshift64Shl($7066 | 0, $7067 | 0, 40) | 0;
 $7071 = getTempRet0() | 0;
 $7072 = $7068 | $7070;
 $7073 = $7069 | $7071;
 $7074 = _i64Add($7072 | 0, $7073 | 0, $7052 | 0, $7053 | 0) | 0;
 $7075 = getTempRet0() | 0;
 $7076 = _bitshift64Shl($7052 | 0, $7053 | 0, 1) | 0;
 $7077 = getTempRet0() | 0;
 $7078 = $7076 & -2;
 $7079 = $7077 & 1;
 $7080 = ___muldi3($7068 | 0, 0, $7078 | 0, $7079 | 0) | 0;
 $7081 = getTempRet0() | 0;
 $7082 = _i64Add($7074 | 0, $7075 | 0, $7080 | 0, $7081 | 0) | 0;
 $7083 = getTempRet0() | 0;
 $7084 = $arrayidx2055;
 $7085 = $7084;
 HEAP32[$7085 >> 2] = $7082;
 $7086 = $7084 + 4 | 0;
 $7087 = $7086;
 HEAP32[$7087 >> 2] = $7083;
 $7088 = $7082 ^ $7055;
 $7089 = $7083 ^ $7054;
 $7090 = _bitshift64Lshr($7088 | 0, $7089 | 0, 16) | 0;
 $7091 = getTempRet0() | 0;
 $7092 = _bitshift64Shl($7088 | 0, $7089 | 0, 48) | 0;
 $7093 = getTempRet0() | 0;
 $7094 = $7090 | $7092;
 $7095 = $7091 | $7093;
 $7096 = $arrayidx10511;
 $7097 = $7096;
 HEAP32[$7097 >> 2] = $7094;
 $7098 = $7096 + 4 | 0;
 $7099 = $7098;
 HEAP32[$7099 >> 2] = $7095;
 $7100 = _i64Add($7094 | 0, $7095 | 0, $7064 | 0, $7065 | 0) | 0;
 $7101 = getTempRet0() | 0;
 $7102 = _bitshift64Shl($7064 | 0, $7065 | 0, 1) | 0;
 $7103 = getTempRet0() | 0;
 $7104 = $7102 & -2;
 $7105 = $7103 & 1;
 $7106 = ___muldi3($7090 | 0, 0, $7104 | 0, $7105 | 0) | 0;
 $7107 = getTempRet0() | 0;
 $7108 = _i64Add($7100 | 0, $7101 | 0, $7106 | 0, $7107 | 0) | 0;
 $7109 = getTempRet0() | 0;
 $7110 = $arrayidx7005;
 $7111 = $7110;
 HEAP32[$7111 >> 2] = $7108;
 $7112 = $7110 + 4 | 0;
 $7113 = $7112;
 HEAP32[$7113 >> 2] = $7109;
 $7114 = $7108 ^ $7072;
 $7115 = $7109 ^ $7073;
 $7116 = _bitshift64Lshr($7114 | 0, $7115 | 0, 63) | 0;
 $7117 = getTempRet0() | 0;
 $7118 = _bitshift64Shl($7114 | 0, $7115 | 0, 1) | 0;
 $7119 = getTempRet0() | 0;
 $7120 = $7116 | $7118;
 $7121 = $7117 | $7119;
 $7122 = $arrayidx5561;
 $7123 = $7122;
 HEAP32[$7123 >> 2] = $7120;
 $7124 = $7122 + 4 | 0;
 $7125 = $7124;
 HEAP32[$7125 >> 2] = $7121;
 $7126 = _i64Add($6844 | 0, $6845 | 0, $6640 | 0, $6641 | 0) | 0;
 $7127 = getTempRet0() | 0;
 $7128 = _bitshift64Shl($6844 | 0, $6845 | 0, 1) | 0;
 $7129 = getTempRet0() | 0;
 $7130 = $7128 & -2;
 $7131 = $7129 & 1;
 $7132 = ___muldi3($7130 | 0, $7131 | 0, $6640 | 0, 0) | 0;
 $7133 = getTempRet0() | 0;
 $7134 = _i64Add($7126 | 0, $7127 | 0, $7132 | 0, $7133 | 0) | 0;
 $7135 = getTempRet0() | 0;
 $7136 = $6778 ^ $7134;
 $7137 = $6779 ^ $7135;
 $7138 = _i64Add($7137 | 0, $7136 | 0, $6710 | 0, $6711 | 0) | 0;
 $7139 = getTempRet0() | 0;
 $7140 = _bitshift64Shl($6710 | 0, $6711 | 0, 1) | 0;
 $7141 = getTempRet0() | 0;
 $7142 = $7140 & -2;
 $7143 = $7141 & 1;
 $7144 = ___muldi3($7137 | 0, 0, $7142 | 0, $7143 | 0) | 0;
 $7145 = getTempRet0() | 0;
 $7146 = _i64Add($7138 | 0, $7139 | 0, $7144 | 0, $7145 | 0) | 0;
 $7147 = getTempRet0() | 0;
 $7148 = $7146 ^ $6640;
 $7149 = $7147 ^ $6641;
 $7150 = _bitshift64Lshr($7148 | 0, $7149 | 0, 24) | 0;
 $7151 = getTempRet0() | 0;
 $7152 = _bitshift64Shl($7148 | 0, $7149 | 0, 40) | 0;
 $7153 = getTempRet0() | 0;
 $7154 = $7150 | $7152;
 $7155 = $7151 | $7153;
 $7156 = _i64Add($7154 | 0, $7155 | 0, $7134 | 0, $7135 | 0) | 0;
 $7157 = getTempRet0() | 0;
 $7158 = _bitshift64Shl($7134 | 0, $7135 | 0, 1) | 0;
 $7159 = getTempRet0() | 0;
 $7160 = $7158 & -2;
 $7161 = $7159 & 1;
 $7162 = ___muldi3($7150 | 0, 0, $7160 | 0, $7161 | 0) | 0;
 $7163 = getTempRet0() | 0;
 $7164 = _i64Add($7156 | 0, $7157 | 0, $7162 | 0, $7163 | 0) | 0;
 $7165 = getTempRet0() | 0;
 $7166 = $arrayidx2261;
 $7167 = $7166;
 HEAP32[$7167 >> 2] = $7164;
 $7168 = $7166 + 4 | 0;
 $7169 = $7168;
 HEAP32[$7169 >> 2] = $7165;
 $7170 = $7164 ^ $7137;
 $7171 = $7165 ^ $7136;
 $7172 = _bitshift64Lshr($7170 | 0, $7171 | 0, 16) | 0;
 $7173 = getTempRet0() | 0;
 $7174 = _bitshift64Shl($7170 | 0, $7171 | 0, 48) | 0;
 $7175 = getTempRet0() | 0;
 $7176 = $7172 | $7174;
 $7177 = $7173 | $7175;
 $7178 = $arrayidx11955;
 $7179 = $7178;
 HEAP32[$7179 >> 2] = $7176;
 $7180 = $7178 + 4 | 0;
 $7181 = $7180;
 HEAP32[$7181 >> 2] = $7177;
 $7182 = _i64Add($7176 | 0, $7177 | 0, $7146 | 0, $7147 | 0) | 0;
 $7183 = getTempRet0() | 0;
 $7184 = _bitshift64Shl($7146 | 0, $7147 | 0, 1) | 0;
 $7185 = getTempRet0() | 0;
 $7186 = $7184 & -2;
 $7187 = $7185 & 1;
 $7188 = ___muldi3($7172 | 0, 0, $7186 | 0, $7187 | 0) | 0;
 $7189 = getTempRet0() | 0;
 $7190 = _i64Add($7182 | 0, $7183 | 0, $7188 | 0, $7189 | 0) | 0;
 $7191 = getTempRet0() | 0;
 $7192 = $arrayidx7211;
 $7193 = $7192;
 HEAP32[$7193 >> 2] = $7190;
 $7194 = $7192 + 4 | 0;
 $7195 = $7194;
 HEAP32[$7195 >> 2] = $7191;
 $7196 = $7190 ^ $7154;
 $7197 = $7191 ^ $7155;
 $7198 = _bitshift64Lshr($7196 | 0, $7197 | 0, 63) | 0;
 $7199 = getTempRet0() | 0;
 $7200 = _bitshift64Shl($7196 | 0, $7197 | 0, 1) | 0;
 $7201 = getTempRet0() | 0;
 $7202 = $7198 | $7200;
 $7203 = $7199 | $7201;
 $7204 = $arrayidx3705;
 $7205 = $7204;
 HEAP32[$7205 >> 2] = $7202;
 $7206 = $7204 + 4 | 0;
 $7207 = $7206;
 HEAP32[$7207 >> 2] = $7203;
 $7208 = _i64Add($2214 | 0, $2215 | 0, $734 | 0, $735 | 0) | 0;
 $7209 = getTempRet0() | 0;
 $7210 = _bitshift64Shl($734 | 0, $735 | 0, 1) | 0;
 $7211 = getTempRet0() | 0;
 $7212 = $7210 & -2;
 $7213 = $7211 & 1;
 $7214 = ___muldi3($2214 | 0, 0, $7212 | 0, $7213 | 0) | 0;
 $7215 = getTempRet0() | 0;
 $7216 = _i64Add($7208 | 0, $7209 | 0, $7214 | 0, $7215 | 0) | 0;
 $7217 = getTempRet0() | 0;
 $7218 = $5174 ^ $7216;
 $7219 = $5175 ^ $7217;
 $7220 = _i64Add($7219 | 0, $7218 | 0, $3694 | 0, $3695 | 0) | 0;
 $7221 = getTempRet0() | 0;
 $7222 = _bitshift64Shl($3694 | 0, $3695 | 0, 1) | 0;
 $7223 = getTempRet0() | 0;
 $7224 = $7222 & -2;
 $7225 = $7223 & 1;
 $7226 = ___muldi3($7219 | 0, 0, $7224 | 0, $7225 | 0) | 0;
 $7227 = getTempRet0() | 0;
 $7228 = _i64Add($7220 | 0, $7221 | 0, $7226 | 0, $7227 | 0) | 0;
 $7229 = getTempRet0() | 0;
 $7230 = $7228 ^ $2214;
 $7231 = $7229 ^ $2215;
 $7232 = _bitshift64Lshr($7230 | 0, $7231 | 0, 24) | 0;
 $7233 = getTempRet0() | 0;
 $7234 = _bitshift64Shl($7230 | 0, $7231 | 0, 40) | 0;
 $7235 = getTempRet0() | 0;
 $7236 = $7232 | $7234;
 $7237 = $7233 | $7235;
 $7238 = _i64Add($7236 | 0, $7237 | 0, $7216 | 0, $7217 | 0) | 0;
 $7239 = getTempRet0() | 0;
 $7240 = _bitshift64Shl($7216 | 0, $7217 | 0, 1) | 0;
 $7241 = getTempRet0() | 0;
 $7242 = $7240 & -2;
 $7243 = $7241 & 1;
 $7244 = ___muldi3($7232 | 0, 0, $7242 | 0, $7243 | 0) | 0;
 $7245 = getTempRet0() | 0;
 $7246 = _i64Add($7238 | 0, $7239 | 0, $7244 | 0, $7245 | 0) | 0;
 $7247 = getTempRet0() | 0;
 $7248 = $arrayidx5;
 $7249 = $7248;
 HEAP32[$7249 >> 2] = $7246;
 $7250 = $7248 + 4 | 0;
 $7251 = $7250;
 HEAP32[$7251 >> 2] = $7247;
 $7252 = $7246 ^ $7219;
 $7253 = $7247 ^ $7218;
 $7254 = _bitshift64Lshr($7252 | 0, $7253 | 0, 16) | 0;
 $7255 = getTempRet0() | 0;
 $7256 = _bitshift64Shl($7252 | 0, $7253 | 0, 48) | 0;
 $7257 = getTempRet0() | 0;
 $7258 = $7254 | $7256;
 $7259 = $7255 | $7257;
 $7260 = $arrayidx9897;
 $7261 = $7260;
 HEAP32[$7261 >> 2] = $7258;
 $7262 = $7260 + 4 | 0;
 $7263 = $7262;
 HEAP32[$7263 >> 2] = $7259;
 $7264 = _i64Add($7258 | 0, $7259 | 0, $7228 | 0, $7229 | 0) | 0;
 $7265 = getTempRet0() | 0;
 $7266 = _bitshift64Shl($7228 | 0, $7229 | 0, 1) | 0;
 $7267 = getTempRet0() | 0;
 $7268 = $7266 & -2;
 $7269 = $7267 & 1;
 $7270 = ___muldi3($7254 | 0, 0, $7268 | 0, $7269 | 0) | 0;
 $7271 = getTempRet0() | 0;
 $7272 = _i64Add($7264 | 0, $7265 | 0, $7270 | 0, $7271 | 0) | 0;
 $7273 = getTempRet0() | 0;
 $7274 = $arrayidx6597;
 $7275 = $7274;
 HEAP32[$7275 >> 2] = $7272;
 $7276 = $7274 + 4 | 0;
 $7277 = $7276;
 HEAP32[$7277 >> 2] = $7273;
 $7278 = $7272 ^ $7236;
 $7279 = $7273 ^ $7237;
 $7280 = _bitshift64Lshr($7278 | 0, $7279 | 0, 63) | 0;
 $7281 = getTempRet0() | 0;
 $7282 = _bitshift64Shl($7278 | 0, $7279 | 0, 1) | 0;
 $7283 = getTempRet0() | 0;
 $7284 = $7280 | $7282;
 $7285 = $7281 | $7283;
 $7286 = $arrayidx3297;
 $7287 = $7286;
 HEAP32[$7287 >> 2] = $7284;
 $7288 = $7286 + 4 | 0;
 $7289 = $7288;
 HEAP32[$7289 >> 2] = $7285;
 $7290 = _i64Add($1968 | 0, $1969 | 0, $488 | 0, $489 | 0) | 0;
 $7291 = getTempRet0() | 0;
 $7292 = _bitshift64Shl($488 | 0, $489 | 0, 1) | 0;
 $7293 = getTempRet0() | 0;
 $7294 = $7292 & -2;
 $7295 = $7293 & 1;
 $7296 = ___muldi3($1968 | 0, 0, $7294 | 0, $7295 | 0) | 0;
 $7297 = getTempRet0() | 0;
 $7298 = _i64Add($7290 | 0, $7291 | 0, $7296 | 0, $7297 | 0) | 0;
 $7299 = getTempRet0() | 0;
 $7300 = $4928 ^ $7298;
 $7301 = $4929 ^ $7299;
 $7302 = _i64Add($7301 | 0, $7300 | 0, $3448 | 0, $3449 | 0) | 0;
 $7303 = getTempRet0() | 0;
 $7304 = _bitshift64Shl($3448 | 0, $3449 | 0, 1) | 0;
 $7305 = getTempRet0() | 0;
 $7306 = $7304 & -2;
 $7307 = $7305 & 1;
 $7308 = ___muldi3($7301 | 0, 0, $7306 | 0, $7307 | 0) | 0;
 $7309 = getTempRet0() | 0;
 $7310 = _i64Add($7302 | 0, $7303 | 0, $7308 | 0, $7309 | 0) | 0;
 $7311 = getTempRet0() | 0;
 $7312 = $7310 ^ $1968;
 $7313 = $7311 ^ $1969;
 $7314 = _bitshift64Lshr($7312 | 0, $7313 | 0, 24) | 0;
 $7315 = getTempRet0() | 0;
 $7316 = _bitshift64Shl($7312 | 0, $7313 | 0, 40) | 0;
 $7317 = getTempRet0() | 0;
 $7318 = $7314 | $7316;
 $7319 = $7315 | $7317;
 $7320 = _i64Add($7318 | 0, $7319 | 0, $7298 | 0, $7299 | 0) | 0;
 $7321 = getTempRet0() | 0;
 $7322 = _bitshift64Shl($7298 | 0, $7299 | 0, 1) | 0;
 $7323 = getTempRet0() | 0;
 $7324 = $7322 & -2;
 $7325 = $7323 & 1;
 $7326 = ___muldi3($7314 | 0, 0, $7324 | 0, $7325 | 0) | 0;
 $7327 = getTempRet0() | 0;
 $7328 = _i64Add($7320 | 0, $7321 | 0, $7326 | 0, $7327 | 0) | 0;
 $7329 = getTempRet0() | 0;
 $7330 = $arrayidx203;
 $7331 = $7330;
 HEAP32[$7331 >> 2] = $7328;
 $7332 = $7330 + 4 | 0;
 $7333 = $7332;
 HEAP32[$7333 >> 2] = $7329;
 $7334 = $7328 ^ $7301;
 $7335 = $7329 ^ $7300;
 $7336 = _bitshift64Lshr($7334 | 0, $7335 | 0, 16) | 0;
 $7337 = getTempRet0() | 0;
 $7338 = _bitshift64Shl($7334 | 0, $7335 | 0, 48) | 0;
 $7339 = getTempRet0() | 0;
 $7340 = $7336 | $7338;
 $7341 = $7337 | $7339;
 $7342 = $arrayidx10103;
 $7343 = $7342;
 HEAP32[$7343 >> 2] = $7340;
 $7344 = $7342 + 4 | 0;
 $7345 = $7344;
 HEAP32[$7345 >> 2] = $7341;
 $7346 = _i64Add($7340 | 0, $7341 | 0, $7310 | 0, $7311 | 0) | 0;
 $7347 = getTempRet0() | 0;
 $7348 = _bitshift64Shl($7310 | 0, $7311 | 0, 1) | 0;
 $7349 = getTempRet0() | 0;
 $7350 = $7348 & -2;
 $7351 = $7349 & 1;
 $7352 = ___muldi3($7336 | 0, 0, $7350 | 0, $7351 | 0) | 0;
 $7353 = getTempRet0() | 0;
 $7354 = _i64Add($7346 | 0, $7347 | 0, $7352 | 0, $7353 | 0) | 0;
 $7355 = getTempRet0() | 0;
 $7356 = $arrayidx6803;
 $7357 = $7356;
 HEAP32[$7357 >> 2] = $7354;
 $7358 = $7356 + 4 | 0;
 $7359 = $7358;
 HEAP32[$7359 >> 2] = $7355;
 $7360 = $7354 ^ $7318;
 $7361 = $7355 ^ $7319;
 $7362 = _bitshift64Lshr($7360 | 0, $7361 | 0, 63) | 0;
 $7363 = getTempRet0() | 0;
 $7364 = _bitshift64Shl($7360 | 0, $7361 | 0, 1) | 0;
 $7365 = getTempRet0() | 0;
 $7366 = $7362 | $7364;
 $7367 = $7363 | $7365;
 $7368 = $arrayidx3503;
 $7369 = $7368;
 HEAP32[$7369 >> 2] = $7366;
 $7370 = $7368 + 4 | 0;
 $7371 = $7370;
 HEAP32[$7371 >> 2] = $7367;
 $7372 = _i64Add($2954 | 0, $2955 | 0, $1474 | 0, $1475 | 0) | 0;
 $7373 = getTempRet0() | 0;
 $7374 = _bitshift64Shl($1474 | 0, $1475 | 0, 1) | 0;
 $7375 = getTempRet0() | 0;
 $7376 = $7374 & -2;
 $7377 = $7375 & 1;
 $7378 = ___muldi3($2954 | 0, 0, $7376 | 0, $7377 | 0) | 0;
 $7379 = getTempRet0() | 0;
 $7380 = _i64Add($7372 | 0, $7373 | 0, $7378 | 0, $7379 | 0) | 0;
 $7381 = getTempRet0() | 0;
 $7382 = $5914 ^ $7380;
 $7383 = $5915 ^ $7381;
 $7384 = _i64Add($7383 | 0, $7382 | 0, $4434 | 0, $4435 | 0) | 0;
 $7385 = getTempRet0() | 0;
 $7386 = _bitshift64Shl($4434 | 0, $4435 | 0, 1) | 0;
 $7387 = getTempRet0() | 0;
 $7388 = $7386 & -2;
 $7389 = $7387 & 1;
 $7390 = ___muldi3($7383 | 0, 0, $7388 | 0, $7389 | 0) | 0;
 $7391 = getTempRet0() | 0;
 $7392 = _i64Add($7384 | 0, $7385 | 0, $7390 | 0, $7391 | 0) | 0;
 $7393 = getTempRet0() | 0;
 $7394 = $7392 ^ $2954;
 $7395 = $7393 ^ $2955;
 $7396 = _bitshift64Lshr($7394 | 0, $7395 | 0, 24) | 0;
 $7397 = getTempRet0() | 0;
 $7398 = _bitshift64Shl($7394 | 0, $7395 | 0, 40) | 0;
 $7399 = getTempRet0() | 0;
 $7400 = $7396 | $7398;
 $7401 = $7397 | $7399;
 $7402 = _i64Add($7400 | 0, $7401 | 0, $7380 | 0, $7381 | 0) | 0;
 $7403 = getTempRet0() | 0;
 $7404 = _bitshift64Shl($7380 | 0, $7381 | 0, 1) | 0;
 $7405 = getTempRet0() | 0;
 $7406 = $7404 & -2;
 $7407 = $7405 & 1;
 $7408 = ___muldi3($7396 | 0, 0, $7406 | 0, $7407 | 0) | 0;
 $7409 = getTempRet0() | 0;
 $7410 = _i64Add($7402 | 0, $7403 | 0, $7408 | 0, $7409 | 0) | 0;
 $7411 = getTempRet0() | 0;
 $7412 = $arrayidx1647;
 $7413 = $7412;
 HEAP32[$7413 >> 2] = $7410;
 $7414 = $7412 + 4 | 0;
 $7415 = $7414;
 HEAP32[$7415 >> 2] = $7411;
 $7416 = $7410 ^ $7383;
 $7417 = $7411 ^ $7382;
 $7418 = _bitshift64Lshr($7416 | 0, $7417 | 0, 16) | 0;
 $7419 = getTempRet0() | 0;
 $7420 = _bitshift64Shl($7416 | 0, $7417 | 0, 48) | 0;
 $7421 = getTempRet0() | 0;
 $7422 = $7418 | $7420;
 $7423 = $7419 | $7421;
 $7424 = $arrayidx11547;
 $7425 = $7424;
 HEAP32[$7425 >> 2] = $7422;
 $7426 = $7424 + 4 | 0;
 $7427 = $7426;
 HEAP32[$7427 >> 2] = $7423;
 $7428 = _i64Add($7422 | 0, $7423 | 0, $7392 | 0, $7393 | 0) | 0;
 $7429 = getTempRet0() | 0;
 $7430 = _bitshift64Shl($7392 | 0, $7393 | 0, 1) | 0;
 $7431 = getTempRet0() | 0;
 $7432 = $7430 & -2;
 $7433 = $7431 & 1;
 $7434 = ___muldi3($7418 | 0, 0, $7432 | 0, $7433 | 0) | 0;
 $7435 = getTempRet0() | 0;
 $7436 = _i64Add($7428 | 0, $7429 | 0, $7434 | 0, $7435 | 0) | 0;
 $7437 = getTempRet0() | 0;
 $7438 = $7436 ^ $7400;
 $7439 = $7437 ^ $7401;
 $7440 = _bitshift64Lshr($7438 | 0, $7439 | 0, 63) | 0;
 $7441 = getTempRet0() | 0;
 $7442 = _bitshift64Shl($7438 | 0, $7439 | 0, 1) | 0;
 $7443 = getTempRet0() | 0;
 $7444 = $7440 | $7442;
 $7445 = $7441 | $7443;
 $7446 = $arrayidx4947;
 $7447 = $7446;
 HEAP32[$7447 >> 2] = $7444;
 $7448 = $7446 + 4 | 0;
 $7449 = $7448;
 HEAP32[$7449 >> 2] = $7445;
 $7450 = _i64Add($2708 | 0, $2709 | 0, $1228 | 0, $1229 | 0) | 0;
 $7451 = getTempRet0() | 0;
 $7452 = _bitshift64Shl($1228 | 0, $1229 | 0, 1) | 0;
 $7453 = getTempRet0() | 0;
 $7454 = $7452 & -2;
 $7455 = $7453 & 1;
 $7456 = ___muldi3($2708 | 0, 0, $7454 | 0, $7455 | 0) | 0;
 $7457 = getTempRet0() | 0;
 $7458 = _i64Add($7450 | 0, $7451 | 0, $7456 | 0, $7457 | 0) | 0;
 $7459 = getTempRet0() | 0;
 $7460 = $5668 ^ $7458;
 $7461 = $5669 ^ $7459;
 $7462 = _i64Add($7461 | 0, $7460 | 0, $4188 | 0, $4189 | 0) | 0;
 $7463 = getTempRet0() | 0;
 $7464 = _bitshift64Shl($4188 | 0, $4189 | 0, 1) | 0;
 $7465 = getTempRet0() | 0;
 $7466 = $7464 & -2;
 $7467 = $7465 & 1;
 $7468 = ___muldi3($7461 | 0, 0, $7466 | 0, $7467 | 0) | 0;
 $7469 = getTempRet0() | 0;
 $7470 = _i64Add($7462 | 0, $7463 | 0, $7468 | 0, $7469 | 0) | 0;
 $7471 = getTempRet0() | 0;
 $7472 = $7470 ^ $2708;
 $7473 = $7471 ^ $2709;
 $7474 = _bitshift64Lshr($7472 | 0, $7473 | 0, 24) | 0;
 $7475 = getTempRet0() | 0;
 $7476 = _bitshift64Shl($7472 | 0, $7473 | 0, 40) | 0;
 $7477 = getTempRet0() | 0;
 $7478 = $7474 | $7476;
 $7479 = $7475 | $7477;
 $7480 = _i64Add($7478 | 0, $7479 | 0, $7458 | 0, $7459 | 0) | 0;
 $7481 = getTempRet0() | 0;
 $7482 = _bitshift64Shl($7458 | 0, $7459 | 0, 1) | 0;
 $7483 = getTempRet0() | 0;
 $7484 = $7482 & -2;
 $7485 = $7483 & 1;
 $7486 = ___muldi3($7474 | 0, 0, $7484 | 0, $7485 | 0) | 0;
 $7487 = getTempRet0() | 0;
 $7488 = _i64Add($7480 | 0, $7481 | 0, $7486 | 0, $7487 | 0) | 0;
 $7489 = getTempRet0() | 0;
 $7490 = $arrayidx1853;
 $7491 = $7490;
 HEAP32[$7491 >> 2] = $7488;
 $7492 = $7490 + 4 | 0;
 $7493 = $7492;
 HEAP32[$7493 >> 2] = $7489;
 $7494 = $7488 ^ $7461;
 $7495 = $7489 ^ $7460;
 $7496 = _bitshift64Lshr($7494 | 0, $7495 | 0, 16) | 0;
 $7497 = getTempRet0() | 0;
 $7498 = _bitshift64Shl($7494 | 0, $7495 | 0, 48) | 0;
 $7499 = getTempRet0() | 0;
 $7500 = $7496 | $7498;
 $7501 = $7497 | $7499;
 $7502 = _i64Add($7500 | 0, $7501 | 0, $7470 | 0, $7471 | 0) | 0;
 $7503 = getTempRet0() | 0;
 $7504 = _bitshift64Shl($7470 | 0, $7471 | 0, 1) | 0;
 $7505 = getTempRet0() | 0;
 $7506 = $7504 & -2;
 $7507 = $7505 & 1;
 $7508 = ___muldi3($7496 | 0, 0, $7506 | 0, $7507 | 0) | 0;
 $7509 = getTempRet0() | 0;
 $7510 = _i64Add($7502 | 0, $7503 | 0, $7508 | 0, $7509 | 0) | 0;
 $7511 = getTempRet0() | 0;
 $7512 = $7510 ^ $7478;
 $7513 = $7511 ^ $7479;
 $7514 = _bitshift64Lshr($7512 | 0, $7513 | 0, 63) | 0;
 $7515 = getTempRet0() | 0;
 $7516 = _bitshift64Shl($7512 | 0, $7513 | 0, 1) | 0;
 $7517 = getTempRet0() | 0;
 $7518 = $7514 | $7516;
 $7519 = $7515 | $7517;
 $7520 = $arrayidx5153;
 $7521 = $7520;
 HEAP32[$7521 >> 2] = $7518;
 $7522 = $7520 + 4 | 0;
 $7523 = $7522;
 HEAP32[$7523 >> 2] = $7519;
 $7524 = _i64Add($7366 | 0, $7367 | 0, $7246 | 0, $7247 | 0) | 0;
 $7525 = getTempRet0() | 0;
 $7526 = _bitshift64Shl($7246 | 0, $7247 | 0, 1) | 0;
 $7527 = getTempRet0() | 0;
 $7528 = $7526 & -2;
 $7529 = $7527 & 1;
 $7530 = ___muldi3($7366 | 0, 0, $7528 | 0, $7529 | 0) | 0;
 $7531 = getTempRet0() | 0;
 $7532 = _i64Add($7524 | 0, $7525 | 0, $7530 | 0, $7531 | 0) | 0;
 $7533 = getTempRet0() | 0;
 $7534 = $7500 ^ $7532;
 $7535 = $7501 ^ $7533;
 $7536 = _i64Add($7436 | 0, $7437 | 0, $7535 | 0, $7534 | 0) | 0;
 $7537 = getTempRet0() | 0;
 $7538 = _bitshift64Shl($7436 | 0, $7437 | 0, 1) | 0;
 $7539 = getTempRet0() | 0;
 $7540 = $7538 & -2;
 $7541 = $7539 & 1;
 $7542 = ___muldi3($7540 | 0, $7541 | 0, $7535 | 0, 0) | 0;
 $7543 = getTempRet0() | 0;
 $7544 = _i64Add($7536 | 0, $7537 | 0, $7542 | 0, $7543 | 0) | 0;
 $7545 = getTempRet0() | 0;
 $7546 = $7544 ^ $7366;
 $7547 = $7545 ^ $7367;
 $7548 = _bitshift64Lshr($7546 | 0, $7547 | 0, 24) | 0;
 $7549 = getTempRet0() | 0;
 $7550 = _bitshift64Shl($7546 | 0, $7547 | 0, 40) | 0;
 $7551 = getTempRet0() | 0;
 $7552 = $7548 | $7550;
 $7553 = $7549 | $7551;
 $7554 = _i64Add($7552 | 0, $7553 | 0, $7532 | 0, $7533 | 0) | 0;
 $7555 = getTempRet0() | 0;
 $7556 = _bitshift64Shl($7532 | 0, $7533 | 0, 1) | 0;
 $7557 = getTempRet0() | 0;
 $7558 = $7556 & -2;
 $7559 = $7557 & 1;
 $7560 = ___muldi3($7548 | 0, 0, $7558 | 0, $7559 | 0) | 0;
 $7561 = getTempRet0() | 0;
 $7562 = _i64Add($7554 | 0, $7555 | 0, $7560 | 0, $7561 | 0) | 0;
 $7563 = getTempRet0() | 0;
 $7564 = $arrayidx5;
 $7565 = $7564;
 HEAP32[$7565 >> 2] = $7562;
 $7566 = $7564 + 4 | 0;
 $7567 = $7566;
 HEAP32[$7567 >> 2] = $7563;
 $7568 = $7562 ^ $7535;
 $7569 = $7563 ^ $7534;
 $7570 = _bitshift64Lshr($7568 | 0, $7569 | 0, 16) | 0;
 $7571 = getTempRet0() | 0;
 $7572 = _bitshift64Shl($7568 | 0, $7569 | 0, 48) | 0;
 $7573 = getTempRet0() | 0;
 $7574 = $7570 | $7572;
 $7575 = $7571 | $7573;
 $7576 = $arrayidx11753;
 $7577 = $7576;
 HEAP32[$7577 >> 2] = $7574;
 $7578 = $7576 + 4 | 0;
 $7579 = $7578;
 HEAP32[$7579 >> 2] = $7575;
 $7580 = _i64Add($7574 | 0, $7575 | 0, $7544 | 0, $7545 | 0) | 0;
 $7581 = getTempRet0() | 0;
 $7582 = _bitshift64Shl($7544 | 0, $7545 | 0, 1) | 0;
 $7583 = getTempRet0() | 0;
 $7584 = $7582 & -2;
 $7585 = $7583 & 1;
 $7586 = ___muldi3($7570 | 0, 0, $7584 | 0, $7585 | 0) | 0;
 $7587 = getTempRet0() | 0;
 $7588 = _i64Add($7580 | 0, $7581 | 0, $7586 | 0, $7587 | 0) | 0;
 $7589 = getTempRet0() | 0;
 $7590 = $arrayidx8247;
 $7591 = $7590;
 HEAP32[$7591 >> 2] = $7588;
 $7592 = $7590 + 4 | 0;
 $7593 = $7592;
 HEAP32[$7593 >> 2] = $7589;
 $7594 = $7588 ^ $7552;
 $7595 = $7589 ^ $7553;
 $7596 = _bitshift64Lshr($7594 | 0, $7595 | 0, 63) | 0;
 $7597 = getTempRet0() | 0;
 $7598 = _bitshift64Shl($7594 | 0, $7595 | 0, 1) | 0;
 $7599 = getTempRet0() | 0;
 $7600 = $7596 | $7598;
 $7601 = $7597 | $7599;
 $7602 = $arrayidx3503;
 $7603 = $7602;
 HEAP32[$7603 >> 2] = $7600;
 $7604 = $7602 + 4 | 0;
 $7605 = $7604;
 HEAP32[$7605 >> 2] = $7601;
 $7606 = _i64Add($7444 | 0, $7445 | 0, $7328 | 0, $7329 | 0) | 0;
 $7607 = getTempRet0() | 0;
 $7608 = _bitshift64Shl($7328 | 0, $7329 | 0, 1) | 0;
 $7609 = getTempRet0() | 0;
 $7610 = $7608 & -2;
 $7611 = $7609 & 1;
 $7612 = ___muldi3($7444 | 0, 0, $7610 | 0, $7611 | 0) | 0;
 $7613 = getTempRet0() | 0;
 $7614 = _i64Add($7606 | 0, $7607 | 0, $7612 | 0, $7613 | 0) | 0;
 $7615 = getTempRet0() | 0;
 $7616 = $7614 ^ $7258;
 $7617 = $7615 ^ $7259;
 $7618 = _i64Add($7617 | 0, $7616 | 0, $7510 | 0, $7511 | 0) | 0;
 $7619 = getTempRet0() | 0;
 $7620 = _bitshift64Shl($7510 | 0, $7511 | 0, 1) | 0;
 $7621 = getTempRet0() | 0;
 $7622 = $7620 & -2;
 $7623 = $7621 & 1;
 $7624 = ___muldi3($7617 | 0, 0, $7622 | 0, $7623 | 0) | 0;
 $7625 = getTempRet0() | 0;
 $7626 = _i64Add($7618 | 0, $7619 | 0, $7624 | 0, $7625 | 0) | 0;
 $7627 = getTempRet0() | 0;
 $7628 = $7626 ^ $7444;
 $7629 = $7627 ^ $7445;
 $7630 = _bitshift64Lshr($7628 | 0, $7629 | 0, 24) | 0;
 $7631 = getTempRet0() | 0;
 $7632 = _bitshift64Shl($7628 | 0, $7629 | 0, 40) | 0;
 $7633 = getTempRet0() | 0;
 $7634 = $7630 | $7632;
 $7635 = $7631 | $7633;
 $7636 = _i64Add($7634 | 0, $7635 | 0, $7614 | 0, $7615 | 0) | 0;
 $7637 = getTempRet0() | 0;
 $7638 = _bitshift64Shl($7614 | 0, $7615 | 0, 1) | 0;
 $7639 = getTempRet0() | 0;
 $7640 = $7638 & -2;
 $7641 = $7639 & 1;
 $7642 = ___muldi3($7630 | 0, 0, $7640 | 0, $7641 | 0) | 0;
 $7643 = getTempRet0() | 0;
 $7644 = _i64Add($7636 | 0, $7637 | 0, $7642 | 0, $7643 | 0) | 0;
 $7645 = getTempRet0() | 0;
 $7646 = $arrayidx203;
 $7647 = $7646;
 HEAP32[$7647 >> 2] = $7644;
 $7648 = $7646 + 4 | 0;
 $7649 = $7648;
 HEAP32[$7649 >> 2] = $7645;
 $7650 = $7644 ^ $7617;
 $7651 = $7645 ^ $7616;
 $7652 = _bitshift64Lshr($7650 | 0, $7651 | 0, 16) | 0;
 $7653 = getTempRet0() | 0;
 $7654 = _bitshift64Shl($7650 | 0, $7651 | 0, 48) | 0;
 $7655 = getTempRet0() | 0;
 $7656 = $7652 | $7654;
 $7657 = $7653 | $7655;
 $7658 = $arrayidx9897;
 $7659 = $7658;
 HEAP32[$7659 >> 2] = $7656;
 $7660 = $7658 + 4 | 0;
 $7661 = $7660;
 HEAP32[$7661 >> 2] = $7657;
 $7662 = _i64Add($7656 | 0, $7657 | 0, $7626 | 0, $7627 | 0) | 0;
 $7663 = getTempRet0() | 0;
 $7664 = _bitshift64Shl($7626 | 0, $7627 | 0, 1) | 0;
 $7665 = getTempRet0() | 0;
 $7666 = $7664 & -2;
 $7667 = $7665 & 1;
 $7668 = ___muldi3($7652 | 0, 0, $7666 | 0, $7667 | 0) | 0;
 $7669 = getTempRet0() | 0;
 $7670 = _i64Add($7662 | 0, $7663 | 0, $7668 | 0, $7669 | 0) | 0;
 $7671 = getTempRet0() | 0;
 $7672 = $arrayidx8453;
 $7673 = $7672;
 HEAP32[$7673 >> 2] = $7670;
 $7674 = $7672 + 4 | 0;
 $7675 = $7674;
 HEAP32[$7675 >> 2] = $7671;
 $7676 = $7670 ^ $7634;
 $7677 = $7671 ^ $7635;
 $7678 = _bitshift64Lshr($7676 | 0, $7677 | 0, 63) | 0;
 $7679 = getTempRet0() | 0;
 $7680 = _bitshift64Shl($7676 | 0, $7677 | 0, 1) | 0;
 $7681 = getTempRet0() | 0;
 $7682 = $7678 | $7680;
 $7683 = $7679 | $7681;
 $7684 = $arrayidx4947;
 $7685 = $7684;
 HEAP32[$7685 >> 2] = $7682;
 $7686 = $7684 + 4 | 0;
 $7687 = $7686;
 HEAP32[$7687 >> 2] = $7683;
 $7688 = _i64Add($7518 | 0, $7519 | 0, $7410 | 0, $7411 | 0) | 0;
 $7689 = getTempRet0() | 0;
 $7690 = _bitshift64Shl($7410 | 0, $7411 | 0, 1) | 0;
 $7691 = getTempRet0() | 0;
 $7692 = $7690 & -2;
 $7693 = $7691 & 1;
 $7694 = ___muldi3($7518 | 0, 0, $7692 | 0, $7693 | 0) | 0;
 $7695 = getTempRet0() | 0;
 $7696 = _i64Add($7688 | 0, $7689 | 0, $7694 | 0, $7695 | 0) | 0;
 $7697 = getTempRet0() | 0;
 $7698 = $7696 ^ $7340;
 $7699 = $7697 ^ $7341;
 $7700 = _i64Add($7699 | 0, $7698 | 0, $7272 | 0, $7273 | 0) | 0;
 $7701 = getTempRet0() | 0;
 $7702 = _bitshift64Shl($7272 | 0, $7273 | 0, 1) | 0;
 $7703 = getTempRet0() | 0;
 $7704 = $7702 & -2;
 $7705 = $7703 & 1;
 $7706 = ___muldi3($7699 | 0, 0, $7704 | 0, $7705 | 0) | 0;
 $7707 = getTempRet0() | 0;
 $7708 = _i64Add($7700 | 0, $7701 | 0, $7706 | 0, $7707 | 0) | 0;
 $7709 = getTempRet0() | 0;
 $7710 = $7708 ^ $7518;
 $7711 = $7709 ^ $7519;
 $7712 = _bitshift64Lshr($7710 | 0, $7711 | 0, 24) | 0;
 $7713 = getTempRet0() | 0;
 $7714 = _bitshift64Shl($7710 | 0, $7711 | 0, 40) | 0;
 $7715 = getTempRet0() | 0;
 $7716 = $7712 | $7714;
 $7717 = $7713 | $7715;
 $7718 = _i64Add($7716 | 0, $7717 | 0, $7696 | 0, $7697 | 0) | 0;
 $7719 = getTempRet0() | 0;
 $7720 = _bitshift64Shl($7696 | 0, $7697 | 0, 1) | 0;
 $7721 = getTempRet0() | 0;
 $7722 = $7720 & -2;
 $7723 = $7721 & 1;
 $7724 = ___muldi3($7712 | 0, 0, $7722 | 0, $7723 | 0) | 0;
 $7725 = getTempRet0() | 0;
 $7726 = _i64Add($7718 | 0, $7719 | 0, $7724 | 0, $7725 | 0) | 0;
 $7727 = getTempRet0() | 0;
 $7728 = $arrayidx1647;
 $7729 = $7728;
 HEAP32[$7729 >> 2] = $7726;
 $7730 = $7728 + 4 | 0;
 $7731 = $7730;
 HEAP32[$7731 >> 2] = $7727;
 $7732 = $7726 ^ $7699;
 $7733 = $7727 ^ $7698;
 $7734 = _bitshift64Lshr($7732 | 0, $7733 | 0, 16) | 0;
 $7735 = getTempRet0() | 0;
 $7736 = _bitshift64Shl($7732 | 0, $7733 | 0, 48) | 0;
 $7737 = getTempRet0() | 0;
 $7738 = $7734 | $7736;
 $7739 = $7735 | $7737;
 $7740 = $arrayidx10103;
 $7741 = $7740;
 HEAP32[$7741 >> 2] = $7738;
 $7742 = $7740 + 4 | 0;
 $7743 = $7742;
 HEAP32[$7743 >> 2] = $7739;
 $7744 = _i64Add($7738 | 0, $7739 | 0, $7708 | 0, $7709 | 0) | 0;
 $7745 = getTempRet0() | 0;
 $7746 = _bitshift64Shl($7708 | 0, $7709 | 0, 1) | 0;
 $7747 = getTempRet0() | 0;
 $7748 = $7746 & -2;
 $7749 = $7747 & 1;
 $7750 = ___muldi3($7734 | 0, 0, $7748 | 0, $7749 | 0) | 0;
 $7751 = getTempRet0() | 0;
 $7752 = _i64Add($7744 | 0, $7745 | 0, $7750 | 0, $7751 | 0) | 0;
 $7753 = getTempRet0() | 0;
 $7754 = $arrayidx6597;
 $7755 = $7754;
 HEAP32[$7755 >> 2] = $7752;
 $7756 = $7754 + 4 | 0;
 $7757 = $7756;
 HEAP32[$7757 >> 2] = $7753;
 $7758 = $7752 ^ $7716;
 $7759 = $7753 ^ $7717;
 $7760 = _bitshift64Lshr($7758 | 0, $7759 | 0, 63) | 0;
 $7761 = getTempRet0() | 0;
 $7762 = _bitshift64Shl($7758 | 0, $7759 | 0, 1) | 0;
 $7763 = getTempRet0() | 0;
 $7764 = $7760 | $7762;
 $7765 = $7761 | $7763;
 $7766 = $arrayidx5153;
 $7767 = $7766;
 HEAP32[$7767 >> 2] = $7764;
 $7768 = $7766 + 4 | 0;
 $7769 = $7768;
 HEAP32[$7769 >> 2] = $7765;
 $7770 = _i64Add($7488 | 0, $7489 | 0, $7284 | 0, $7285 | 0) | 0;
 $7771 = getTempRet0() | 0;
 $7772 = _bitshift64Shl($7488 | 0, $7489 | 0, 1) | 0;
 $7773 = getTempRet0() | 0;
 $7774 = $7772 & -2;
 $7775 = $7773 & 1;
 $7776 = ___muldi3($7774 | 0, $7775 | 0, $7284 | 0, 0) | 0;
 $7777 = getTempRet0() | 0;
 $7778 = _i64Add($7770 | 0, $7771 | 0, $7776 | 0, $7777 | 0) | 0;
 $7779 = getTempRet0() | 0;
 $7780 = $7422 ^ $7778;
 $7781 = $7423 ^ $7779;
 $7782 = _i64Add($7781 | 0, $7780 | 0, $7354 | 0, $7355 | 0) | 0;
 $7783 = getTempRet0() | 0;
 $7784 = _bitshift64Shl($7354 | 0, $7355 | 0, 1) | 0;
 $7785 = getTempRet0() | 0;
 $7786 = $7784 & -2;
 $7787 = $7785 & 1;
 $7788 = ___muldi3($7781 | 0, 0, $7786 | 0, $7787 | 0) | 0;
 $7789 = getTempRet0() | 0;
 $7790 = _i64Add($7782 | 0, $7783 | 0, $7788 | 0, $7789 | 0) | 0;
 $7791 = getTempRet0() | 0;
 $7792 = $7790 ^ $7284;
 $7793 = $7791 ^ $7285;
 $7794 = _bitshift64Lshr($7792 | 0, $7793 | 0, 24) | 0;
 $7795 = getTempRet0() | 0;
 $7796 = _bitshift64Shl($7792 | 0, $7793 | 0, 40) | 0;
 $7797 = getTempRet0() | 0;
 $7798 = $7794 | $7796;
 $7799 = $7795 | $7797;
 $7800 = _i64Add($7798 | 0, $7799 | 0, $7778 | 0, $7779 | 0) | 0;
 $7801 = getTempRet0() | 0;
 $7802 = _bitshift64Shl($7778 | 0, $7779 | 0, 1) | 0;
 $7803 = getTempRet0() | 0;
 $7804 = $7802 & -2;
 $7805 = $7803 & 1;
 $7806 = ___muldi3($7794 | 0, 0, $7804 | 0, $7805 | 0) | 0;
 $7807 = getTempRet0() | 0;
 $7808 = _i64Add($7800 | 0, $7801 | 0, $7806 | 0, $7807 | 0) | 0;
 $7809 = getTempRet0() | 0;
 $7810 = $arrayidx1853;
 $7811 = $7810;
 HEAP32[$7811 >> 2] = $7808;
 $7812 = $7810 + 4 | 0;
 $7813 = $7812;
 HEAP32[$7813 >> 2] = $7809;
 $7814 = $7808 ^ $7781;
 $7815 = $7809 ^ $7780;
 $7816 = _bitshift64Lshr($7814 | 0, $7815 | 0, 16) | 0;
 $7817 = getTempRet0() | 0;
 $7818 = _bitshift64Shl($7814 | 0, $7815 | 0, 48) | 0;
 $7819 = getTempRet0() | 0;
 $7820 = $7816 | $7818;
 $7821 = $7817 | $7819;
 $7822 = $arrayidx11547;
 $7823 = $7822;
 HEAP32[$7823 >> 2] = $7820;
 $7824 = $7822 + 4 | 0;
 $7825 = $7824;
 HEAP32[$7825 >> 2] = $7821;
 $7826 = _i64Add($7820 | 0, $7821 | 0, $7790 | 0, $7791 | 0) | 0;
 $7827 = getTempRet0() | 0;
 $7828 = _bitshift64Shl($7790 | 0, $7791 | 0, 1) | 0;
 $7829 = getTempRet0() | 0;
 $7830 = $7828 & -2;
 $7831 = $7829 & 1;
 $7832 = ___muldi3($7816 | 0, 0, $7830 | 0, $7831 | 0) | 0;
 $7833 = getTempRet0() | 0;
 $7834 = _i64Add($7826 | 0, $7827 | 0, $7832 | 0, $7833 | 0) | 0;
 $7835 = getTempRet0() | 0;
 $7836 = $arrayidx6803;
 $7837 = $7836;
 HEAP32[$7837 >> 2] = $7834;
 $7838 = $7836 + 4 | 0;
 $7839 = $7838;
 HEAP32[$7839 >> 2] = $7835;
 $7840 = $7834 ^ $7798;
 $7841 = $7835 ^ $7799;
 $7842 = _bitshift64Lshr($7840 | 0, $7841 | 0, 63) | 0;
 $7843 = getTempRet0() | 0;
 $7844 = _bitshift64Shl($7840 | 0, $7841 | 0, 1) | 0;
 $7845 = getTempRet0() | 0;
 $7846 = $7842 | $7844;
 $7847 = $7843 | $7845;
 $7848 = $arrayidx3297;
 $7849 = $7848;
 HEAP32[$7849 >> 2] = $7846;
 $7850 = $7848 + 4 | 0;
 $7851 = $7850;
 HEAP32[$7851 >> 2] = $7847;
 $7852 = _i64Add($2050 | 0, $2051 | 0, $570 | 0, $571 | 0) | 0;
 $7853 = getTempRet0() | 0;
 $7854 = _bitshift64Shl($570 | 0, $571 | 0, 1) | 0;
 $7855 = getTempRet0() | 0;
 $7856 = $7854 & -2;
 $7857 = $7855 & 1;
 $7858 = ___muldi3($2050 | 0, 0, $7856 | 0, $7857 | 0) | 0;
 $7859 = getTempRet0() | 0;
 $7860 = _i64Add($7852 | 0, $7853 | 0, $7858 | 0, $7859 | 0) | 0;
 $7861 = getTempRet0() | 0;
 $7862 = $5010 ^ $7860;
 $7863 = $5011 ^ $7861;
 $7864 = _i64Add($7863 | 0, $7862 | 0, $3530 | 0, $3531 | 0) | 0;
 $7865 = getTempRet0() | 0;
 $7866 = _bitshift64Shl($3530 | 0, $3531 | 0, 1) | 0;
 $7867 = getTempRet0() | 0;
 $7868 = $7866 & -2;
 $7869 = $7867 & 1;
 $7870 = ___muldi3($7863 | 0, 0, $7868 | 0, $7869 | 0) | 0;
 $7871 = getTempRet0() | 0;
 $7872 = _i64Add($7864 | 0, $7865 | 0, $7870 | 0, $7871 | 0) | 0;
 $7873 = getTempRet0() | 0;
 $7874 = $7872 ^ $2050;
 $7875 = $7873 ^ $2051;
 $7876 = _bitshift64Lshr($7874 | 0, $7875 | 0, 24) | 0;
 $7877 = getTempRet0() | 0;
 $7878 = _bitshift64Shl($7874 | 0, $7875 | 0, 40) | 0;
 $7879 = getTempRet0() | 0;
 $7880 = $7876 | $7878;
 $7881 = $7877 | $7879;
 $7882 = _i64Add($7880 | 0, $7881 | 0, $7860 | 0, $7861 | 0) | 0;
 $7883 = getTempRet0() | 0;
 $7884 = _bitshift64Shl($7860 | 0, $7861 | 0, 1) | 0;
 $7885 = getTempRet0() | 0;
 $7886 = $7884 & -2;
 $7887 = $7885 & 1;
 $7888 = ___muldi3($7876 | 0, 0, $7886 | 0, $7887 | 0) | 0;
 $7889 = getTempRet0() | 0;
 $7890 = _i64Add($7882 | 0, $7883 | 0, $7888 | 0, $7889 | 0) | 0;
 $7891 = getTempRet0() | 0;
 $7892 = $arrayidx409;
 $7893 = $7892;
 HEAP32[$7893 >> 2] = $7890;
 $7894 = $7892 + 4 | 0;
 $7895 = $7894;
 HEAP32[$7895 >> 2] = $7891;
 $7896 = $7890 ^ $7863;
 $7897 = $7891 ^ $7862;
 $7898 = _bitshift64Lshr($7896 | 0, $7897 | 0, 16) | 0;
 $7899 = getTempRet0() | 0;
 $7900 = _bitshift64Shl($7896 | 0, $7897 | 0, 48) | 0;
 $7901 = getTempRet0() | 0;
 $7902 = $7898 | $7900;
 $7903 = $7899 | $7901;
 $7904 = $arrayidx10309;
 $7905 = $7904;
 HEAP32[$7905 >> 2] = $7902;
 $7906 = $7904 + 4 | 0;
 $7907 = $7906;
 HEAP32[$7907 >> 2] = $7903;
 $7908 = _i64Add($7902 | 0, $7903 | 0, $7872 | 0, $7873 | 0) | 0;
 $7909 = getTempRet0() | 0;
 $7910 = _bitshift64Shl($7872 | 0, $7873 | 0, 1) | 0;
 $7911 = getTempRet0() | 0;
 $7912 = $7910 & -2;
 $7913 = $7911 & 1;
 $7914 = ___muldi3($7898 | 0, 0, $7912 | 0, $7913 | 0) | 0;
 $7915 = getTempRet0() | 0;
 $7916 = _i64Add($7908 | 0, $7909 | 0, $7914 | 0, $7915 | 0) | 0;
 $7917 = getTempRet0() | 0;
 $7918 = $arrayidx7009;
 $7919 = $7918;
 HEAP32[$7919 >> 2] = $7916;
 $7920 = $7918 + 4 | 0;
 $7921 = $7920;
 HEAP32[$7921 >> 2] = $7917;
 $7922 = $7916 ^ $7880;
 $7923 = $7917 ^ $7881;
 $7924 = _bitshift64Lshr($7922 | 0, $7923 | 0, 63) | 0;
 $7925 = getTempRet0() | 0;
 $7926 = _bitshift64Shl($7922 | 0, $7923 | 0, 1) | 0;
 $7927 = getTempRet0() | 0;
 $7928 = $7924 | $7926;
 $7929 = $7925 | $7927;
 $7930 = $arrayidx3709;
 $7931 = $7930;
 HEAP32[$7931 >> 2] = $7928;
 $7932 = $7930 + 4 | 0;
 $7933 = $7932;
 HEAP32[$7933 >> 2] = $7929;
 $7934 = _i64Add($2132 | 0, $2133 | 0, $652 | 0, $653 | 0) | 0;
 $7935 = getTempRet0() | 0;
 $7936 = _bitshift64Shl($652 | 0, $653 | 0, 1) | 0;
 $7937 = getTempRet0() | 0;
 $7938 = $7936 & -2;
 $7939 = $7937 & 1;
 $7940 = ___muldi3($2132 | 0, 0, $7938 | 0, $7939 | 0) | 0;
 $7941 = getTempRet0() | 0;
 $7942 = _i64Add($7934 | 0, $7935 | 0, $7940 | 0, $7941 | 0) | 0;
 $7943 = getTempRet0() | 0;
 $7944 = $5092 ^ $7942;
 $7945 = $5093 ^ $7943;
 $7946 = _i64Add($7945 | 0, $7944 | 0, $3612 | 0, $3613 | 0) | 0;
 $7947 = getTempRet0() | 0;
 $7948 = _bitshift64Shl($3612 | 0, $3613 | 0, 1) | 0;
 $7949 = getTempRet0() | 0;
 $7950 = $7948 & -2;
 $7951 = $7949 & 1;
 $7952 = ___muldi3($7945 | 0, 0, $7950 | 0, $7951 | 0) | 0;
 $7953 = getTempRet0() | 0;
 $7954 = _i64Add($7946 | 0, $7947 | 0, $7952 | 0, $7953 | 0) | 0;
 $7955 = getTempRet0() | 0;
 $7956 = $7954 ^ $2132;
 $7957 = $7955 ^ $2133;
 $7958 = _bitshift64Lshr($7956 | 0, $7957 | 0, 24) | 0;
 $7959 = getTempRet0() | 0;
 $7960 = _bitshift64Shl($7956 | 0, $7957 | 0, 40) | 0;
 $7961 = getTempRet0() | 0;
 $7962 = $7958 | $7960;
 $7963 = $7959 | $7961;
 $7964 = _i64Add($7962 | 0, $7963 | 0, $7942 | 0, $7943 | 0) | 0;
 $7965 = getTempRet0() | 0;
 $7966 = _bitshift64Shl($7942 | 0, $7943 | 0, 1) | 0;
 $7967 = getTempRet0() | 0;
 $7968 = $7966 & -2;
 $7969 = $7967 & 1;
 $7970 = ___muldi3($7958 | 0, 0, $7968 | 0, $7969 | 0) | 0;
 $7971 = getTempRet0() | 0;
 $7972 = _i64Add($7964 | 0, $7965 | 0, $7970 | 0, $7971 | 0) | 0;
 $7973 = getTempRet0() | 0;
 $7974 = $arrayidx615;
 $7975 = $7974;
 HEAP32[$7975 >> 2] = $7972;
 $7976 = $7974 + 4 | 0;
 $7977 = $7976;
 HEAP32[$7977 >> 2] = $7973;
 $7978 = $7972 ^ $7945;
 $7979 = $7973 ^ $7944;
 $7980 = _bitshift64Lshr($7978 | 0, $7979 | 0, 16) | 0;
 $7981 = getTempRet0() | 0;
 $7982 = _bitshift64Shl($7978 | 0, $7979 | 0, 48) | 0;
 $7983 = getTempRet0() | 0;
 $7984 = $7980 | $7982;
 $7985 = $7981 | $7983;
 $7986 = $arrayidx10515;
 $7987 = $7986;
 HEAP32[$7987 >> 2] = $7984;
 $7988 = $7986 + 4 | 0;
 $7989 = $7988;
 HEAP32[$7989 >> 2] = $7985;
 $7990 = _i64Add($7984 | 0, $7985 | 0, $7954 | 0, $7955 | 0) | 0;
 $7991 = getTempRet0() | 0;
 $7992 = _bitshift64Shl($7954 | 0, $7955 | 0, 1) | 0;
 $7993 = getTempRet0() | 0;
 $7994 = $7992 & -2;
 $7995 = $7993 & 1;
 $7996 = ___muldi3($7980 | 0, 0, $7994 | 0, $7995 | 0) | 0;
 $7997 = getTempRet0() | 0;
 $7998 = _i64Add($7990 | 0, $7991 | 0, $7996 | 0, $7997 | 0) | 0;
 $7999 = getTempRet0() | 0;
 $8000 = $arrayidx7215;
 $8001 = $8000;
 HEAP32[$8001 >> 2] = $7998;
 $8002 = $8000 + 4 | 0;
 $8003 = $8002;
 HEAP32[$8003 >> 2] = $7999;
 $8004 = $7998 ^ $7962;
 $8005 = $7999 ^ $7963;
 $8006 = _bitshift64Lshr($8004 | 0, $8005 | 0, 63) | 0;
 $8007 = getTempRet0() | 0;
 $8008 = _bitshift64Shl($8004 | 0, $8005 | 0, 1) | 0;
 $8009 = getTempRet0() | 0;
 $8010 = $8006 | $8008;
 $8011 = $8007 | $8009;
 $8012 = $arrayidx3915;
 $8013 = $8012;
 HEAP32[$8013 >> 2] = $8010;
 $8014 = $8012 + 4 | 0;
 $8015 = $8014;
 HEAP32[$8015 >> 2] = $8011;
 $8016 = _i64Add($2790 | 0, $2791 | 0, $1310 | 0, $1311 | 0) | 0;
 $8017 = getTempRet0() | 0;
 $8018 = _bitshift64Shl($1310 | 0, $1311 | 0, 1) | 0;
 $8019 = getTempRet0() | 0;
 $8020 = $8018 & -2;
 $8021 = $8019 & 1;
 $8022 = ___muldi3($2790 | 0, 0, $8020 | 0, $8021 | 0) | 0;
 $8023 = getTempRet0() | 0;
 $8024 = _i64Add($8016 | 0, $8017 | 0, $8022 | 0, $8023 | 0) | 0;
 $8025 = getTempRet0() | 0;
 $8026 = $5750 ^ $8024;
 $8027 = $5751 ^ $8025;
 $8028 = _i64Add($8027 | 0, $8026 | 0, $4270 | 0, $4271 | 0) | 0;
 $8029 = getTempRet0() | 0;
 $8030 = _bitshift64Shl($4270 | 0, $4271 | 0, 1) | 0;
 $8031 = getTempRet0() | 0;
 $8032 = $8030 & -2;
 $8033 = $8031 & 1;
 $8034 = ___muldi3($8027 | 0, 0, $8032 | 0, $8033 | 0) | 0;
 $8035 = getTempRet0() | 0;
 $8036 = _i64Add($8028 | 0, $8029 | 0, $8034 | 0, $8035 | 0) | 0;
 $8037 = getTempRet0() | 0;
 $8038 = $8036 ^ $2790;
 $8039 = $8037 ^ $2791;
 $8040 = _bitshift64Lshr($8038 | 0, $8039 | 0, 24) | 0;
 $8041 = getTempRet0() | 0;
 $8042 = _bitshift64Shl($8038 | 0, $8039 | 0, 40) | 0;
 $8043 = getTempRet0() | 0;
 $8044 = $8040 | $8042;
 $8045 = $8041 | $8043;
 $8046 = _i64Add($8044 | 0, $8045 | 0, $8024 | 0, $8025 | 0) | 0;
 $8047 = getTempRet0() | 0;
 $8048 = _bitshift64Shl($8024 | 0, $8025 | 0, 1) | 0;
 $8049 = getTempRet0() | 0;
 $8050 = $8048 & -2;
 $8051 = $8049 & 1;
 $8052 = ___muldi3($8040 | 0, 0, $8050 | 0, $8051 | 0) | 0;
 $8053 = getTempRet0() | 0;
 $8054 = _i64Add($8046 | 0, $8047 | 0, $8052 | 0, $8053 | 0) | 0;
 $8055 = getTempRet0() | 0;
 $8056 = $arrayidx2059;
 $8057 = $8056;
 HEAP32[$8057 >> 2] = $8054;
 $8058 = $8056 + 4 | 0;
 $8059 = $8058;
 HEAP32[$8059 >> 2] = $8055;
 $8060 = $8054 ^ $8027;
 $8061 = $8055 ^ $8026;
 $8062 = _bitshift64Lshr($8060 | 0, $8061 | 0, 16) | 0;
 $8063 = getTempRet0() | 0;
 $8064 = _bitshift64Shl($8060 | 0, $8061 | 0, 48) | 0;
 $8065 = getTempRet0() | 0;
 $8066 = $8062 | $8064;
 $8067 = $8063 | $8065;
 $8068 = $arrayidx11959;
 $8069 = $8068;
 HEAP32[$8069 >> 2] = $8066;
 $8070 = $8068 + 4 | 0;
 $8071 = $8070;
 HEAP32[$8071 >> 2] = $8067;
 $8072 = _i64Add($8066 | 0, $8067 | 0, $8036 | 0, $8037 | 0) | 0;
 $8073 = getTempRet0() | 0;
 $8074 = _bitshift64Shl($8036 | 0, $8037 | 0, 1) | 0;
 $8075 = getTempRet0() | 0;
 $8076 = $8074 & -2;
 $8077 = $8075 & 1;
 $8078 = ___muldi3($8062 | 0, 0, $8076 | 0, $8077 | 0) | 0;
 $8079 = getTempRet0() | 0;
 $8080 = _i64Add($8072 | 0, $8073 | 0, $8078 | 0, $8079 | 0) | 0;
 $8081 = getTempRet0() | 0;
 $8082 = $8080 ^ $8044;
 $8083 = $8081 ^ $8045;
 $8084 = _bitshift64Lshr($8082 | 0, $8083 | 0, 63) | 0;
 $8085 = getTempRet0() | 0;
 $8086 = _bitshift64Shl($8082 | 0, $8083 | 0, 1) | 0;
 $8087 = getTempRet0() | 0;
 $8088 = $8084 | $8086;
 $8089 = $8085 | $8087;
 $8090 = $arrayidx5359;
 $8091 = $8090;
 HEAP32[$8091 >> 2] = $8088;
 $8092 = $8090 + 4 | 0;
 $8093 = $8092;
 HEAP32[$8093 >> 2] = $8089;
 $8094 = _i64Add($2872 | 0, $2873 | 0, $1392 | 0, $1393 | 0) | 0;
 $8095 = getTempRet0() | 0;
 $8096 = _bitshift64Shl($1392 | 0, $1393 | 0, 1) | 0;
 $8097 = getTempRet0() | 0;
 $8098 = $8096 & -2;
 $8099 = $8097 & 1;
 $8100 = ___muldi3($2872 | 0, 0, $8098 | 0, $8099 | 0) | 0;
 $8101 = getTempRet0() | 0;
 $8102 = _i64Add($8094 | 0, $8095 | 0, $8100 | 0, $8101 | 0) | 0;
 $8103 = getTempRet0() | 0;
 $8104 = $5832 ^ $8102;
 $8105 = $5833 ^ $8103;
 $8106 = _i64Add($8105 | 0, $8104 | 0, $4352 | 0, $4353 | 0) | 0;
 $8107 = getTempRet0() | 0;
 $8108 = _bitshift64Shl($4352 | 0, $4353 | 0, 1) | 0;
 $8109 = getTempRet0() | 0;
 $8110 = $8108 & -2;
 $8111 = $8109 & 1;
 $8112 = ___muldi3($8105 | 0, 0, $8110 | 0, $8111 | 0) | 0;
 $8113 = getTempRet0() | 0;
 $8114 = _i64Add($8106 | 0, $8107 | 0, $8112 | 0, $8113 | 0) | 0;
 $8115 = getTempRet0() | 0;
 $8116 = $8114 ^ $2872;
 $8117 = $8115 ^ $2873;
 $8118 = _bitshift64Lshr($8116 | 0, $8117 | 0, 24) | 0;
 $8119 = getTempRet0() | 0;
 $8120 = _bitshift64Shl($8116 | 0, $8117 | 0, 40) | 0;
 $8121 = getTempRet0() | 0;
 $8122 = $8118 | $8120;
 $8123 = $8119 | $8121;
 $8124 = _i64Add($8122 | 0, $8123 | 0, $8102 | 0, $8103 | 0) | 0;
 $8125 = getTempRet0() | 0;
 $8126 = _bitshift64Shl($8102 | 0, $8103 | 0, 1) | 0;
 $8127 = getTempRet0() | 0;
 $8128 = $8126 & -2;
 $8129 = $8127 & 1;
 $8130 = ___muldi3($8118 | 0, 0, $8128 | 0, $8129 | 0) | 0;
 $8131 = getTempRet0() | 0;
 $8132 = _i64Add($8124 | 0, $8125 | 0, $8130 | 0, $8131 | 0) | 0;
 $8133 = getTempRet0() | 0;
 $8134 = $arrayidx2265;
 $8135 = $8134;
 HEAP32[$8135 >> 2] = $8132;
 $8136 = $8134 + 4 | 0;
 $8137 = $8136;
 HEAP32[$8137 >> 2] = $8133;
 $8138 = $8132 ^ $8105;
 $8139 = $8133 ^ $8104;
 $8140 = _bitshift64Lshr($8138 | 0, $8139 | 0, 16) | 0;
 $8141 = getTempRet0() | 0;
 $8142 = _bitshift64Shl($8138 | 0, $8139 | 0, 48) | 0;
 $8143 = getTempRet0() | 0;
 $8144 = $8140 | $8142;
 $8145 = $8141 | $8143;
 $8146 = _i64Add($8144 | 0, $8145 | 0, $8114 | 0, $8115 | 0) | 0;
 $8147 = getTempRet0() | 0;
 $8148 = _bitshift64Shl($8114 | 0, $8115 | 0, 1) | 0;
 $8149 = getTempRet0() | 0;
 $8150 = $8148 & -2;
 $8151 = $8149 & 1;
 $8152 = ___muldi3($8140 | 0, 0, $8150 | 0, $8151 | 0) | 0;
 $8153 = getTempRet0() | 0;
 $8154 = _i64Add($8146 | 0, $8147 | 0, $8152 | 0, $8153 | 0) | 0;
 $8155 = getTempRet0() | 0;
 $8156 = $8154 ^ $8122;
 $8157 = $8155 ^ $8123;
 $8158 = _bitshift64Lshr($8156 | 0, $8157 | 0, 63) | 0;
 $8159 = getTempRet0() | 0;
 $8160 = _bitshift64Shl($8156 | 0, $8157 | 0, 1) | 0;
 $8161 = getTempRet0() | 0;
 $8162 = $8158 | $8160;
 $8163 = $8159 | $8161;
 $8164 = $arrayidx5565;
 $8165 = $8164;
 HEAP32[$8165 >> 2] = $8162;
 $8166 = $8164 + 4 | 0;
 $8167 = $8166;
 HEAP32[$8167 >> 2] = $8163;
 $8168 = _i64Add($8010 | 0, $8011 | 0, $7890 | 0, $7891 | 0) | 0;
 $8169 = getTempRet0() | 0;
 $8170 = _bitshift64Shl($7890 | 0, $7891 | 0, 1) | 0;
 $8171 = getTempRet0() | 0;
 $8172 = $8170 & -2;
 $8173 = $8171 & 1;
 $8174 = ___muldi3($8010 | 0, 0, $8172 | 0, $8173 | 0) | 0;
 $8175 = getTempRet0() | 0;
 $8176 = _i64Add($8168 | 0, $8169 | 0, $8174 | 0, $8175 | 0) | 0;
 $8177 = getTempRet0() | 0;
 $8178 = $8144 ^ $8176;
 $8179 = $8145 ^ $8177;
 $8180 = _i64Add($8179 | 0, $8178 | 0, $8080 | 0, $8081 | 0) | 0;
 $8181 = getTempRet0() | 0;
 $8182 = _bitshift64Shl($8080 | 0, $8081 | 0, 1) | 0;
 $8183 = getTempRet0() | 0;
 $8184 = $8182 & -2;
 $8185 = $8183 & 1;
 $8186 = ___muldi3($8179 | 0, 0, $8184 | 0, $8185 | 0) | 0;
 $8187 = getTempRet0() | 0;
 $8188 = _i64Add($8180 | 0, $8181 | 0, $8186 | 0, $8187 | 0) | 0;
 $8189 = getTempRet0() | 0;
 $8190 = $8188 ^ $8010;
 $8191 = $8189 ^ $8011;
 $8192 = _bitshift64Lshr($8190 | 0, $8191 | 0, 24) | 0;
 $8193 = getTempRet0() | 0;
 $8194 = _bitshift64Shl($8190 | 0, $8191 | 0, 40) | 0;
 $8195 = getTempRet0() | 0;
 $8196 = $8192 | $8194;
 $8197 = $8193 | $8195;
 $8198 = _i64Add($8196 | 0, $8197 | 0, $8176 | 0, $8177 | 0) | 0;
 $8199 = getTempRet0() | 0;
 $8200 = _bitshift64Shl($8176 | 0, $8177 | 0, 1) | 0;
 $8201 = getTempRet0() | 0;
 $8202 = $8200 & -2;
 $8203 = $8201 & 1;
 $8204 = ___muldi3($8192 | 0, 0, $8202 | 0, $8203 | 0) | 0;
 $8205 = getTempRet0() | 0;
 $8206 = _i64Add($8198 | 0, $8199 | 0, $8204 | 0, $8205 | 0) | 0;
 $8207 = getTempRet0() | 0;
 $8208 = $arrayidx409;
 $8209 = $8208;
 HEAP32[$8209 >> 2] = $8206;
 $8210 = $8208 + 4 | 0;
 $8211 = $8210;
 HEAP32[$8211 >> 2] = $8207;
 $8212 = $8206 ^ $8179;
 $8213 = $8207 ^ $8178;
 $8214 = _bitshift64Lshr($8212 | 0, $8213 | 0, 16) | 0;
 $8215 = getTempRet0() | 0;
 $8216 = _bitshift64Shl($8212 | 0, $8213 | 0, 48) | 0;
 $8217 = getTempRet0() | 0;
 $8218 = $8214 | $8216;
 $8219 = $8215 | $8217;
 $8220 = $arrayidx12165;
 $8221 = $8220;
 HEAP32[$8221 >> 2] = $8218;
 $8222 = $8220 + 4 | 0;
 $8223 = $8222;
 HEAP32[$8223 >> 2] = $8219;
 $8224 = _i64Add($8218 | 0, $8219 | 0, $8188 | 0, $8189 | 0) | 0;
 $8225 = getTempRet0() | 0;
 $8226 = _bitshift64Shl($8188 | 0, $8189 | 0, 1) | 0;
 $8227 = getTempRet0() | 0;
 $8228 = $8226 & -2;
 $8229 = $8227 & 1;
 $8230 = ___muldi3($8214 | 0, 0, $8228 | 0, $8229 | 0) | 0;
 $8231 = getTempRet0() | 0;
 $8232 = _i64Add($8224 | 0, $8225 | 0, $8230 | 0, $8231 | 0) | 0;
 $8233 = getTempRet0() | 0;
 $8234 = $arrayidx8659;
 $8235 = $8234;
 HEAP32[$8235 >> 2] = $8232;
 $8236 = $8234 + 4 | 0;
 $8237 = $8236;
 HEAP32[$8237 >> 2] = $8233;
 $8238 = $8232 ^ $8196;
 $8239 = $8233 ^ $8197;
 $8240 = _bitshift64Lshr($8238 | 0, $8239 | 0, 63) | 0;
 $8241 = getTempRet0() | 0;
 $8242 = _bitshift64Shl($8238 | 0, $8239 | 0, 1) | 0;
 $8243 = getTempRet0() | 0;
 $8244 = $8240 | $8242;
 $8245 = $8241 | $8243;
 $8246 = $arrayidx3915;
 $8247 = $8246;
 HEAP32[$8247 >> 2] = $8244;
 $8248 = $8246 + 4 | 0;
 $8249 = $8248;
 HEAP32[$8249 >> 2] = $8245;
 $8250 = _i64Add($8088 | 0, $8089 | 0, $7972 | 0, $7973 | 0) | 0;
 $8251 = getTempRet0() | 0;
 $8252 = _bitshift64Shl($7972 | 0, $7973 | 0, 1) | 0;
 $8253 = getTempRet0() | 0;
 $8254 = $8252 & -2;
 $8255 = $8253 & 1;
 $8256 = ___muldi3($8088 | 0, 0, $8254 | 0, $8255 | 0) | 0;
 $8257 = getTempRet0() | 0;
 $8258 = _i64Add($8250 | 0, $8251 | 0, $8256 | 0, $8257 | 0) | 0;
 $8259 = getTempRet0() | 0;
 $8260 = $8258 ^ $7902;
 $8261 = $8259 ^ $7903;
 $8262 = _i64Add($8261 | 0, $8260 | 0, $8154 | 0, $8155 | 0) | 0;
 $8263 = getTempRet0() | 0;
 $8264 = _bitshift64Shl($8154 | 0, $8155 | 0, 1) | 0;
 $8265 = getTempRet0() | 0;
 $8266 = $8264 & -2;
 $8267 = $8265 & 1;
 $8268 = ___muldi3($8266 | 0, $8267 | 0, $8261 | 0, 0) | 0;
 $8269 = getTempRet0() | 0;
 $8270 = _i64Add($8262 | 0, $8263 | 0, $8268 | 0, $8269 | 0) | 0;
 $8271 = getTempRet0() | 0;
 $8272 = $8270 ^ $8088;
 $8273 = $8271 ^ $8089;
 $8274 = _bitshift64Lshr($8272 | 0, $8273 | 0, 24) | 0;
 $8275 = getTempRet0() | 0;
 $8276 = _bitshift64Shl($8272 | 0, $8273 | 0, 40) | 0;
 $8277 = getTempRet0() | 0;
 $8278 = $8274 | $8276;
 $8279 = $8275 | $8277;
 $8280 = _i64Add($8278 | 0, $8279 | 0, $8258 | 0, $8259 | 0) | 0;
 $8281 = getTempRet0() | 0;
 $8282 = _bitshift64Shl($8258 | 0, $8259 | 0, 1) | 0;
 $8283 = getTempRet0() | 0;
 $8284 = $8282 & -2;
 $8285 = $8283 & 1;
 $8286 = ___muldi3($8274 | 0, 0, $8284 | 0, $8285 | 0) | 0;
 $8287 = getTempRet0() | 0;
 $8288 = _i64Add($8280 | 0, $8281 | 0, $8286 | 0, $8287 | 0) | 0;
 $8289 = getTempRet0() | 0;
 $8290 = $arrayidx615;
 $8291 = $8290;
 HEAP32[$8291 >> 2] = $8288;
 $8292 = $8290 + 4 | 0;
 $8293 = $8292;
 HEAP32[$8293 >> 2] = $8289;
 $8294 = $8288 ^ $8261;
 $8295 = $8289 ^ $8260;
 $8296 = _bitshift64Lshr($8294 | 0, $8295 | 0, 16) | 0;
 $8297 = getTempRet0() | 0;
 $8298 = _bitshift64Shl($8294 | 0, $8295 | 0, 48) | 0;
 $8299 = getTempRet0() | 0;
 $8300 = $8296 | $8298;
 $8301 = $8297 | $8299;
 $8302 = $arrayidx10309;
 $8303 = $8302;
 HEAP32[$8303 >> 2] = $8300;
 $8304 = $8302 + 4 | 0;
 $8305 = $8304;
 HEAP32[$8305 >> 2] = $8301;
 $8306 = _i64Add($8300 | 0, $8301 | 0, $8270 | 0, $8271 | 0) | 0;
 $8307 = getTempRet0() | 0;
 $8308 = _bitshift64Shl($8270 | 0, $8271 | 0, 1) | 0;
 $8309 = getTempRet0() | 0;
 $8310 = $8308 & -2;
 $8311 = $8309 & 1;
 $8312 = ___muldi3($8296 | 0, 0, $8310 | 0, $8311 | 0) | 0;
 $8313 = getTempRet0() | 0;
 $8314 = _i64Add($8306 | 0, $8307 | 0, $8312 | 0, $8313 | 0) | 0;
 $8315 = getTempRet0() | 0;
 $8316 = $arrayidx8865;
 $8317 = $8316;
 HEAP32[$8317 >> 2] = $8314;
 $8318 = $8316 + 4 | 0;
 $8319 = $8318;
 HEAP32[$8319 >> 2] = $8315;
 $8320 = $8314 ^ $8278;
 $8321 = $8315 ^ $8279;
 $8322 = _bitshift64Lshr($8320 | 0, $8321 | 0, 63) | 0;
 $8323 = getTempRet0() | 0;
 $8324 = _bitshift64Shl($8320 | 0, $8321 | 0, 1) | 0;
 $8325 = getTempRet0() | 0;
 $8326 = $8322 | $8324;
 $8327 = $8323 | $8325;
 $8328 = $arrayidx5359;
 $8329 = $8328;
 HEAP32[$8329 >> 2] = $8326;
 $8330 = $8328 + 4 | 0;
 $8331 = $8330;
 HEAP32[$8331 >> 2] = $8327;
 $8332 = _i64Add($8162 | 0, $8163 | 0, $8054 | 0, $8055 | 0) | 0;
 $8333 = getTempRet0() | 0;
 $8334 = _bitshift64Shl($8054 | 0, $8055 | 0, 1) | 0;
 $8335 = getTempRet0() | 0;
 $8336 = $8334 & -2;
 $8337 = $8335 & 1;
 $8338 = ___muldi3($8162 | 0, 0, $8336 | 0, $8337 | 0) | 0;
 $8339 = getTempRet0() | 0;
 $8340 = _i64Add($8332 | 0, $8333 | 0, $8338 | 0, $8339 | 0) | 0;
 $8341 = getTempRet0() | 0;
 $8342 = $8340 ^ $7984;
 $8343 = $8341 ^ $7985;
 $8344 = _i64Add($8343 | 0, $8342 | 0, $7916 | 0, $7917 | 0) | 0;
 $8345 = getTempRet0() | 0;
 $8346 = _bitshift64Shl($7916 | 0, $7917 | 0, 1) | 0;
 $8347 = getTempRet0() | 0;
 $8348 = $8346 & -2;
 $8349 = $8347 & 1;
 $8350 = ___muldi3($8343 | 0, 0, $8348 | 0, $8349 | 0) | 0;
 $8351 = getTempRet0() | 0;
 $8352 = _i64Add($8344 | 0, $8345 | 0, $8350 | 0, $8351 | 0) | 0;
 $8353 = getTempRet0() | 0;
 $8354 = $8352 ^ $8162;
 $8355 = $8353 ^ $8163;
 $8356 = _bitshift64Lshr($8354 | 0, $8355 | 0, 24) | 0;
 $8357 = getTempRet0() | 0;
 $8358 = _bitshift64Shl($8354 | 0, $8355 | 0, 40) | 0;
 $8359 = getTempRet0() | 0;
 $8360 = $8356 | $8358;
 $8361 = $8357 | $8359;
 $8362 = _i64Add($8360 | 0, $8361 | 0, $8340 | 0, $8341 | 0) | 0;
 $8363 = getTempRet0() | 0;
 $8364 = _bitshift64Shl($8340 | 0, $8341 | 0, 1) | 0;
 $8365 = getTempRet0() | 0;
 $8366 = $8364 & -2;
 $8367 = $8365 & 1;
 $8368 = ___muldi3($8356 | 0, 0, $8366 | 0, $8367 | 0) | 0;
 $8369 = getTempRet0() | 0;
 $8370 = _i64Add($8362 | 0, $8363 | 0, $8368 | 0, $8369 | 0) | 0;
 $8371 = getTempRet0() | 0;
 $8372 = $arrayidx2059;
 $8373 = $8372;
 HEAP32[$8373 >> 2] = $8370;
 $8374 = $8372 + 4 | 0;
 $8375 = $8374;
 HEAP32[$8375 >> 2] = $8371;
 $8376 = $8370 ^ $8343;
 $8377 = $8371 ^ $8342;
 $8378 = _bitshift64Lshr($8376 | 0, $8377 | 0, 16) | 0;
 $8379 = getTempRet0() | 0;
 $8380 = _bitshift64Shl($8376 | 0, $8377 | 0, 48) | 0;
 $8381 = getTempRet0() | 0;
 $8382 = $8378 | $8380;
 $8383 = $8379 | $8381;
 $8384 = $arrayidx10515;
 $8385 = $8384;
 HEAP32[$8385 >> 2] = $8382;
 $8386 = $8384 + 4 | 0;
 $8387 = $8386;
 HEAP32[$8387 >> 2] = $8383;
 $8388 = _i64Add($8382 | 0, $8383 | 0, $8352 | 0, $8353 | 0) | 0;
 $8389 = getTempRet0() | 0;
 $8390 = _bitshift64Shl($8352 | 0, $8353 | 0, 1) | 0;
 $8391 = getTempRet0() | 0;
 $8392 = $8390 & -2;
 $8393 = $8391 & 1;
 $8394 = ___muldi3($8378 | 0, 0, $8392 | 0, $8393 | 0) | 0;
 $8395 = getTempRet0() | 0;
 $8396 = _i64Add($8388 | 0, $8389 | 0, $8394 | 0, $8395 | 0) | 0;
 $8397 = getTempRet0() | 0;
 $8398 = $arrayidx7009;
 $8399 = $8398;
 HEAP32[$8399 >> 2] = $8396;
 $8400 = $8398 + 4 | 0;
 $8401 = $8400;
 HEAP32[$8401 >> 2] = $8397;
 $8402 = $8396 ^ $8360;
 $8403 = $8397 ^ $8361;
 $8404 = _bitshift64Lshr($8402 | 0, $8403 | 0, 63) | 0;
 $8405 = getTempRet0() | 0;
 $8406 = _bitshift64Shl($8402 | 0, $8403 | 0, 1) | 0;
 $8407 = getTempRet0() | 0;
 $8408 = $8404 | $8406;
 $8409 = $8405 | $8407;
 $8410 = $arrayidx5565;
 $8411 = $8410;
 HEAP32[$8411 >> 2] = $8408;
 $8412 = $8410 + 4 | 0;
 $8413 = $8412;
 HEAP32[$8413 >> 2] = $8409;
 $8414 = _i64Add($8132 | 0, $8133 | 0, $7928 | 0, $7929 | 0) | 0;
 $8415 = getTempRet0() | 0;
 $8416 = _bitshift64Shl($8132 | 0, $8133 | 0, 1) | 0;
 $8417 = getTempRet0() | 0;
 $8418 = $8416 & -2;
 $8419 = $8417 & 1;
 $8420 = ___muldi3($8418 | 0, $8419 | 0, $7928 | 0, 0) | 0;
 $8421 = getTempRet0() | 0;
 $8422 = _i64Add($8414 | 0, $8415 | 0, $8420 | 0, $8421 | 0) | 0;
 $8423 = getTempRet0() | 0;
 $8424 = $8422 ^ $8066;
 $8425 = $8423 ^ $8067;
 $8426 = _i64Add($8425 | 0, $8424 | 0, $7998 | 0, $7999 | 0) | 0;
 $8427 = getTempRet0() | 0;
 $8428 = _bitshift64Shl($7998 | 0, $7999 | 0, 1) | 0;
 $8429 = getTempRet0() | 0;
 $8430 = $8428 & -2;
 $8431 = $8429 & 1;
 $8432 = ___muldi3($8425 | 0, 0, $8430 | 0, $8431 | 0) | 0;
 $8433 = getTempRet0() | 0;
 $8434 = _i64Add($8426 | 0, $8427 | 0, $8432 | 0, $8433 | 0) | 0;
 $8435 = getTempRet0() | 0;
 $8436 = $8434 ^ $7928;
 $8437 = $8435 ^ $7929;
 $8438 = _bitshift64Lshr($8436 | 0, $8437 | 0, 24) | 0;
 $8439 = getTempRet0() | 0;
 $8440 = _bitshift64Shl($8436 | 0, $8437 | 0, 40) | 0;
 $8441 = getTempRet0() | 0;
 $8442 = $8438 | $8440;
 $8443 = $8439 | $8441;
 $8444 = _i64Add($8442 | 0, $8443 | 0, $8422 | 0, $8423 | 0) | 0;
 $8445 = getTempRet0() | 0;
 $8446 = _bitshift64Shl($8422 | 0, $8423 | 0, 1) | 0;
 $8447 = getTempRet0() | 0;
 $8448 = $8446 & -2;
 $8449 = $8447 & 1;
 $8450 = ___muldi3($8438 | 0, 0, $8448 | 0, $8449 | 0) | 0;
 $8451 = getTempRet0() | 0;
 $8452 = _i64Add($8444 | 0, $8445 | 0, $8450 | 0, $8451 | 0) | 0;
 $8453 = getTempRet0() | 0;
 $8454 = $arrayidx2265;
 $8455 = $8454;
 HEAP32[$8455 >> 2] = $8452;
 $8456 = $8454 + 4 | 0;
 $8457 = $8456;
 HEAP32[$8457 >> 2] = $8453;
 $8458 = $8452 ^ $8425;
 $8459 = $8453 ^ $8424;
 $8460 = _bitshift64Lshr($8458 | 0, $8459 | 0, 16) | 0;
 $8461 = getTempRet0() | 0;
 $8462 = _bitshift64Shl($8458 | 0, $8459 | 0, 48) | 0;
 $8463 = getTempRet0() | 0;
 $8464 = $8460 | $8462;
 $8465 = $8461 | $8463;
 $8466 = $arrayidx11959;
 $8467 = $8466;
 HEAP32[$8467 >> 2] = $8464;
 $8468 = $8466 + 4 | 0;
 $8469 = $8468;
 HEAP32[$8469 >> 2] = $8465;
 $8470 = _i64Add($8464 | 0, $8465 | 0, $8434 | 0, $8435 | 0) | 0;
 $8471 = getTempRet0() | 0;
 $8472 = _bitshift64Shl($8434 | 0, $8435 | 0, 1) | 0;
 $8473 = getTempRet0() | 0;
 $8474 = $8472 & -2;
 $8475 = $8473 & 1;
 $8476 = ___muldi3($8460 | 0, 0, $8474 | 0, $8475 | 0) | 0;
 $8477 = getTempRet0() | 0;
 $8478 = _i64Add($8470 | 0, $8471 | 0, $8476 | 0, $8477 | 0) | 0;
 $8479 = getTempRet0() | 0;
 $8480 = $arrayidx7215;
 $8481 = $8480;
 HEAP32[$8481 >> 2] = $8478;
 $8482 = $8480 + 4 | 0;
 $8483 = $8482;
 HEAP32[$8483 >> 2] = $8479;
 $8484 = $8478 ^ $8442;
 $8485 = $8479 ^ $8443;
 $8486 = _bitshift64Lshr($8484 | 0, $8485 | 0, 63) | 0;
 $8487 = getTempRet0() | 0;
 $8488 = _bitshift64Shl($8484 | 0, $8485 | 0, 1) | 0;
 $8489 = getTempRet0() | 0;
 $8490 = $8486 | $8488;
 $8491 = $8487 | $8489;
 $8492 = $arrayidx3709;
 $8493 = $8492;
 HEAP32[$8493 >> 2] = $8490;
 $8494 = $8492 + 4 | 0;
 $8495 = $8494;
 HEAP32[$8495 >> 2] = $8491;
 $8496 = _i64Add($2120 | 0, $2121 | 0, $640 | 0, $641 | 0) | 0;
 $8497 = getTempRet0() | 0;
 $8498 = _bitshift64Shl($640 | 0, $641 | 0, 1) | 0;
 $8499 = getTempRet0() | 0;
 $8500 = $8498 & -2;
 $8501 = $8499 & 1;
 $8502 = ___muldi3($2120 | 0, 0, $8500 | 0, $8501 | 0) | 0;
 $8503 = getTempRet0() | 0;
 $8504 = _i64Add($8496 | 0, $8497 | 0, $8502 | 0, $8503 | 0) | 0;
 $8505 = getTempRet0() | 0;
 $8506 = $5080 ^ $8504;
 $8507 = $5081 ^ $8505;
 $8508 = _i64Add($8507 | 0, $8506 | 0, $3600 | 0, $3601 | 0) | 0;
 $8509 = getTempRet0() | 0;
 $8510 = _bitshift64Shl($3600 | 0, $3601 | 0, 1) | 0;
 $8511 = getTempRet0() | 0;
 $8512 = $8510 & -2;
 $8513 = $8511 & 1;
 $8514 = ___muldi3($8507 | 0, 0, $8512 | 0, $8513 | 0) | 0;
 $8515 = getTempRet0() | 0;
 $8516 = _i64Add($8508 | 0, $8509 | 0, $8514 | 0, $8515 | 0) | 0;
 $8517 = getTempRet0() | 0;
 $8518 = $8516 ^ $2120;
 $8519 = $8517 ^ $2121;
 $8520 = _bitshift64Lshr($8518 | 0, $8519 | 0, 24) | 0;
 $8521 = getTempRet0() | 0;
 $8522 = _bitshift64Shl($8518 | 0, $8519 | 0, 40) | 0;
 $8523 = getTempRet0() | 0;
 $8524 = $8520 | $8522;
 $8525 = $8521 | $8523;
 $8526 = _i64Add($8524 | 0, $8525 | 0, $8504 | 0, $8505 | 0) | 0;
 $8527 = getTempRet0() | 0;
 $8528 = _bitshift64Shl($8504 | 0, $8505 | 0, 1) | 0;
 $8529 = getTempRet0() | 0;
 $8530 = $8528 & -2;
 $8531 = $8529 & 1;
 $8532 = ___muldi3($8520 | 0, 0, $8530 | 0, $8531 | 0) | 0;
 $8533 = getTempRet0() | 0;
 $8534 = _i64Add($8526 | 0, $8527 | 0, $8532 | 0, $8533 | 0) | 0;
 $8535 = getTempRet0() | 0;
 $8536 = $arrayidx45;
 $8537 = $8536;
 HEAP32[$8537 >> 2] = $8534;
 $8538 = $8536 + 4 | 0;
 $8539 = $8538;
 HEAP32[$8539 >> 2] = $8535;
 $8540 = $8534 ^ $8507;
 $8541 = $8535 ^ $8506;
 $8542 = _bitshift64Lshr($8540 | 0, $8541 | 0, 16) | 0;
 $8543 = getTempRet0() | 0;
 $8544 = _bitshift64Shl($8540 | 0, $8541 | 0, 48) | 0;
 $8545 = getTempRet0() | 0;
 $8546 = $8542 | $8544;
 $8547 = $8543 | $8545;
 $8548 = $arrayidx9944;
 $8549 = $8548;
 HEAP32[$8549 >> 2] = $8546;
 $8550 = $8548 + 4 | 0;
 $8551 = $8550;
 HEAP32[$8551 >> 2] = $8547;
 $8552 = _i64Add($8546 | 0, $8547 | 0, $8516 | 0, $8517 | 0) | 0;
 $8553 = getTempRet0() | 0;
 $8554 = _bitshift64Shl($8516 | 0, $8517 | 0, 1) | 0;
 $8555 = getTempRet0() | 0;
 $8556 = $8554 & -2;
 $8557 = $8555 & 1;
 $8558 = ___muldi3($8542 | 0, 0, $8556 | 0, $8557 | 0) | 0;
 $8559 = getTempRet0() | 0;
 $8560 = _i64Add($8552 | 0, $8553 | 0, $8558 | 0, $8559 | 0) | 0;
 $8561 = getTempRet0() | 0;
 $8562 = $arrayidx6644;
 $8563 = $8562;
 HEAP32[$8563 >> 2] = $8560;
 $8564 = $8562 + 4 | 0;
 $8565 = $8564;
 HEAP32[$8565 >> 2] = $8561;
 $8566 = $8560 ^ $8524;
 $8567 = $8561 ^ $8525;
 $8568 = _bitshift64Lshr($8566 | 0, $8567 | 0, 63) | 0;
 $8569 = getTempRet0() | 0;
 $8570 = _bitshift64Shl($8566 | 0, $8567 | 0, 1) | 0;
 $8571 = getTempRet0() | 0;
 $8572 = $8568 | $8570;
 $8573 = $8569 | $8571;
 $8574 = $arrayidx3344;
 $8575 = $8574;
 HEAP32[$8575 >> 2] = $8572;
 $8576 = $8574 + 4 | 0;
 $8577 = $8576;
 HEAP32[$8577 >> 2] = $8573;
 $8578 = _i64Add($2202 | 0, $2203 | 0, $722 | 0, $723 | 0) | 0;
 $8579 = getTempRet0() | 0;
 $8580 = _bitshift64Shl($722 | 0, $723 | 0, 1) | 0;
 $8581 = getTempRet0() | 0;
 $8582 = $8580 & -2;
 $8583 = $8581 & 1;
 $8584 = ___muldi3($2202 | 0, 0, $8582 | 0, $8583 | 0) | 0;
 $8585 = getTempRet0() | 0;
 $8586 = _i64Add($8578 | 0, $8579 | 0, $8584 | 0, $8585 | 0) | 0;
 $8587 = getTempRet0() | 0;
 $8588 = $5162 ^ $8586;
 $8589 = $5163 ^ $8587;
 $8590 = _i64Add($8589 | 0, $8588 | 0, $3682 | 0, $3683 | 0) | 0;
 $8591 = getTempRet0() | 0;
 $8592 = _bitshift64Shl($3682 | 0, $3683 | 0, 1) | 0;
 $8593 = getTempRet0() | 0;
 $8594 = $8592 & -2;
 $8595 = $8593 & 1;
 $8596 = ___muldi3($8589 | 0, 0, $8594 | 0, $8595 | 0) | 0;
 $8597 = getTempRet0() | 0;
 $8598 = _i64Add($8590 | 0, $8591 | 0, $8596 | 0, $8597 | 0) | 0;
 $8599 = getTempRet0() | 0;
 $8600 = $8598 ^ $2202;
 $8601 = $8599 ^ $2203;
 $8602 = _bitshift64Lshr($8600 | 0, $8601 | 0, 24) | 0;
 $8603 = getTempRet0() | 0;
 $8604 = _bitshift64Shl($8600 | 0, $8601 | 0, 40) | 0;
 $8605 = getTempRet0() | 0;
 $8606 = $8602 | $8604;
 $8607 = $8603 | $8605;
 $8608 = _i64Add($8606 | 0, $8607 | 0, $8586 | 0, $8587 | 0) | 0;
 $8609 = getTempRet0() | 0;
 $8610 = _bitshift64Shl($8586 | 0, $8587 | 0, 1) | 0;
 $8611 = getTempRet0() | 0;
 $8612 = $8610 & -2;
 $8613 = $8611 & 1;
 $8614 = ___muldi3($8602 | 0, 0, $8612 | 0, $8613 | 0) | 0;
 $8615 = getTempRet0() | 0;
 $8616 = _i64Add($8608 | 0, $8609 | 0, $8614 | 0, $8615 | 0) | 0;
 $8617 = getTempRet0() | 0;
 $8618 = $arrayidx250;
 $8619 = $8618;
 HEAP32[$8619 >> 2] = $8616;
 $8620 = $8618 + 4 | 0;
 $8621 = $8620;
 HEAP32[$8621 >> 2] = $8617;
 $8622 = $8616 ^ $8589;
 $8623 = $8617 ^ $8588;
 $8624 = _bitshift64Lshr($8622 | 0, $8623 | 0, 16) | 0;
 $8625 = getTempRet0() | 0;
 $8626 = _bitshift64Shl($8622 | 0, $8623 | 0, 48) | 0;
 $8627 = getTempRet0() | 0;
 $8628 = $8624 | $8626;
 $8629 = $8625 | $8627;
 $8630 = $arrayidx10150;
 $8631 = $8630;
 HEAP32[$8631 >> 2] = $8628;
 $8632 = $8630 + 4 | 0;
 $8633 = $8632;
 HEAP32[$8633 >> 2] = $8629;
 $8634 = _i64Add($8628 | 0, $8629 | 0, $8598 | 0, $8599 | 0) | 0;
 $8635 = getTempRet0() | 0;
 $8636 = _bitshift64Shl($8598 | 0, $8599 | 0, 1) | 0;
 $8637 = getTempRet0() | 0;
 $8638 = $8636 & -2;
 $8639 = $8637 & 1;
 $8640 = ___muldi3($8624 | 0, 0, $8638 | 0, $8639 | 0) | 0;
 $8641 = getTempRet0() | 0;
 $8642 = _i64Add($8634 | 0, $8635 | 0, $8640 | 0, $8641 | 0) | 0;
 $8643 = getTempRet0() | 0;
 $8644 = $arrayidx6850;
 $8645 = $8644;
 HEAP32[$8645 >> 2] = $8642;
 $8646 = $8644 + 4 | 0;
 $8647 = $8646;
 HEAP32[$8647 >> 2] = $8643;
 $8648 = $8642 ^ $8606;
 $8649 = $8643 ^ $8607;
 $8650 = _bitshift64Lshr($8648 | 0, $8649 | 0, 63) | 0;
 $8651 = getTempRet0() | 0;
 $8652 = _bitshift64Shl($8648 | 0, $8649 | 0, 1) | 0;
 $8653 = getTempRet0() | 0;
 $8654 = $8650 | $8652;
 $8655 = $8651 | $8653;
 $8656 = $arrayidx3550;
 $8657 = $8656;
 HEAP32[$8657 >> 2] = $8654;
 $8658 = $8656 + 4 | 0;
 $8659 = $8658;
 HEAP32[$8659 >> 2] = $8655;
 $8660 = _i64Add($2860 | 0, $2861 | 0, $1380 | 0, $1381 | 0) | 0;
 $8661 = getTempRet0() | 0;
 $8662 = _bitshift64Shl($1380 | 0, $1381 | 0, 1) | 0;
 $8663 = getTempRet0() | 0;
 $8664 = $8662 & -2;
 $8665 = $8663 & 1;
 $8666 = ___muldi3($2860 | 0, 0, $8664 | 0, $8665 | 0) | 0;
 $8667 = getTempRet0() | 0;
 $8668 = _i64Add($8660 | 0, $8661 | 0, $8666 | 0, $8667 | 0) | 0;
 $8669 = getTempRet0() | 0;
 $8670 = $5820 ^ $8668;
 $8671 = $5821 ^ $8669;
 $8672 = _i64Add($8671 | 0, $8670 | 0, $4340 | 0, $4341 | 0) | 0;
 $8673 = getTempRet0() | 0;
 $8674 = _bitshift64Shl($4340 | 0, $4341 | 0, 1) | 0;
 $8675 = getTempRet0() | 0;
 $8676 = $8674 & -2;
 $8677 = $8675 & 1;
 $8678 = ___muldi3($8671 | 0, 0, $8676 | 0, $8677 | 0) | 0;
 $8679 = getTempRet0() | 0;
 $8680 = _i64Add($8672 | 0, $8673 | 0, $8678 | 0, $8679 | 0) | 0;
 $8681 = getTempRet0() | 0;
 $8682 = $8680 ^ $2860;
 $8683 = $8681 ^ $2861;
 $8684 = _bitshift64Lshr($8682 | 0, $8683 | 0, 24) | 0;
 $8685 = getTempRet0() | 0;
 $8686 = _bitshift64Shl($8682 | 0, $8683 | 0, 40) | 0;
 $8687 = getTempRet0() | 0;
 $8688 = $8684 | $8686;
 $8689 = $8685 | $8687;
 $8690 = _i64Add($8688 | 0, $8689 | 0, $8668 | 0, $8669 | 0) | 0;
 $8691 = getTempRet0() | 0;
 $8692 = _bitshift64Shl($8668 | 0, $8669 | 0, 1) | 0;
 $8693 = getTempRet0() | 0;
 $8694 = $8692 & -2;
 $8695 = $8693 & 1;
 $8696 = ___muldi3($8684 | 0, 0, $8694 | 0, $8695 | 0) | 0;
 $8697 = getTempRet0() | 0;
 $8698 = _i64Add($8690 | 0, $8691 | 0, $8696 | 0, $8697 | 0) | 0;
 $8699 = getTempRet0() | 0;
 $8700 = $arrayidx1694;
 $8701 = $8700;
 HEAP32[$8701 >> 2] = $8698;
 $8702 = $8700 + 4 | 0;
 $8703 = $8702;
 HEAP32[$8703 >> 2] = $8699;
 $8704 = $8698 ^ $8671;
 $8705 = $8699 ^ $8670;
 $8706 = _bitshift64Lshr($8704 | 0, $8705 | 0, 16) | 0;
 $8707 = getTempRet0() | 0;
 $8708 = _bitshift64Shl($8704 | 0, $8705 | 0, 48) | 0;
 $8709 = getTempRet0() | 0;
 $8710 = $8706 | $8708;
 $8711 = $8707 | $8709;
 $8712 = $arrayidx11594;
 $8713 = $8712;
 HEAP32[$8713 >> 2] = $8710;
 $8714 = $8712 + 4 | 0;
 $8715 = $8714;
 HEAP32[$8715 >> 2] = $8711;
 $8716 = _i64Add($8710 | 0, $8711 | 0, $8680 | 0, $8681 | 0) | 0;
 $8717 = getTempRet0() | 0;
 $8718 = _bitshift64Shl($8680 | 0, $8681 | 0, 1) | 0;
 $8719 = getTempRet0() | 0;
 $8720 = $8718 & -2;
 $8721 = $8719 & 1;
 $8722 = ___muldi3($8706 | 0, 0, $8720 | 0, $8721 | 0) | 0;
 $8723 = getTempRet0() | 0;
 $8724 = _i64Add($8716 | 0, $8717 | 0, $8722 | 0, $8723 | 0) | 0;
 $8725 = getTempRet0() | 0;
 $8726 = $8724 ^ $8688;
 $8727 = $8725 ^ $8689;
 $8728 = _bitshift64Lshr($8726 | 0, $8727 | 0, 63) | 0;
 $8729 = getTempRet0() | 0;
 $8730 = _bitshift64Shl($8726 | 0, $8727 | 0, 1) | 0;
 $8731 = getTempRet0() | 0;
 $8732 = $8728 | $8730;
 $8733 = $8729 | $8731;
 $8734 = $arrayidx4994;
 $8735 = $8734;
 HEAP32[$8735 >> 2] = $8732;
 $8736 = $8734 + 4 | 0;
 $8737 = $8736;
 HEAP32[$8737 >> 2] = $8733;
 $8738 = _i64Add($2942 | 0, $2943 | 0, $1462 | 0, $1463 | 0) | 0;
 $8739 = getTempRet0() | 0;
 $8740 = _bitshift64Shl($1462 | 0, $1463 | 0, 1) | 0;
 $8741 = getTempRet0() | 0;
 $8742 = $8740 & -2;
 $8743 = $8741 & 1;
 $8744 = ___muldi3($2942 | 0, 0, $8742 | 0, $8743 | 0) | 0;
 $8745 = getTempRet0() | 0;
 $8746 = _i64Add($8738 | 0, $8739 | 0, $8744 | 0, $8745 | 0) | 0;
 $8747 = getTempRet0() | 0;
 $8748 = $5902 ^ $8746;
 $8749 = $5903 ^ $8747;
 $8750 = _i64Add($8749 | 0, $8748 | 0, $4422 | 0, $4423 | 0) | 0;
 $8751 = getTempRet0() | 0;
 $8752 = _bitshift64Shl($4422 | 0, $4423 | 0, 1) | 0;
 $8753 = getTempRet0() | 0;
 $8754 = $8752 & -2;
 $8755 = $8753 & 1;
 $8756 = ___muldi3($8749 | 0, 0, $8754 | 0, $8755 | 0) | 0;
 $8757 = getTempRet0() | 0;
 $8758 = _i64Add($8750 | 0, $8751 | 0, $8756 | 0, $8757 | 0) | 0;
 $8759 = getTempRet0() | 0;
 $8760 = $8758 ^ $2942;
 $8761 = $8759 ^ $2943;
 $8762 = _bitshift64Lshr($8760 | 0, $8761 | 0, 24) | 0;
 $8763 = getTempRet0() | 0;
 $8764 = _bitshift64Shl($8760 | 0, $8761 | 0, 40) | 0;
 $8765 = getTempRet0() | 0;
 $8766 = $8762 | $8764;
 $8767 = $8763 | $8765;
 $8768 = _i64Add($8766 | 0, $8767 | 0, $8746 | 0, $8747 | 0) | 0;
 $8769 = getTempRet0() | 0;
 $8770 = _bitshift64Shl($8746 | 0, $8747 | 0, 1) | 0;
 $8771 = getTempRet0() | 0;
 $8772 = $8770 & -2;
 $8773 = $8771 & 1;
 $8774 = ___muldi3($8762 | 0, 0, $8772 | 0, $8773 | 0) | 0;
 $8775 = getTempRet0() | 0;
 $8776 = _i64Add($8768 | 0, $8769 | 0, $8774 | 0, $8775 | 0) | 0;
 $8777 = getTempRet0() | 0;
 $8778 = $arrayidx1900;
 $8779 = $8778;
 HEAP32[$8779 >> 2] = $8776;
 $8780 = $8778 + 4 | 0;
 $8781 = $8780;
 HEAP32[$8781 >> 2] = $8777;
 $8782 = $8776 ^ $8749;
 $8783 = $8777 ^ $8748;
 $8784 = _bitshift64Lshr($8782 | 0, $8783 | 0, 16) | 0;
 $8785 = getTempRet0() | 0;
 $8786 = _bitshift64Shl($8782 | 0, $8783 | 0, 48) | 0;
 $8787 = getTempRet0() | 0;
 $8788 = $8784 | $8786;
 $8789 = $8785 | $8787;
 $8790 = _i64Add($8788 | 0, $8789 | 0, $8758 | 0, $8759 | 0) | 0;
 $8791 = getTempRet0() | 0;
 $8792 = _bitshift64Shl($8758 | 0, $8759 | 0, 1) | 0;
 $8793 = getTempRet0() | 0;
 $8794 = $8792 & -2;
 $8795 = $8793 & 1;
 $8796 = ___muldi3($8784 | 0, 0, $8794 | 0, $8795 | 0) | 0;
 $8797 = getTempRet0() | 0;
 $8798 = _i64Add($8790 | 0, $8791 | 0, $8796 | 0, $8797 | 0) | 0;
 $8799 = getTempRet0() | 0;
 $8800 = $8798 ^ $8766;
 $8801 = $8799 ^ $8767;
 $8802 = _bitshift64Lshr($8800 | 0, $8801 | 0, 63) | 0;
 $8803 = getTempRet0() | 0;
 $8804 = _bitshift64Shl($8800 | 0, $8801 | 0, 1) | 0;
 $8805 = getTempRet0() | 0;
 $8806 = $8802 | $8804;
 $8807 = $8803 | $8805;
 $8808 = $arrayidx5200;
 $8809 = $8808;
 HEAP32[$8809 >> 2] = $8806;
 $8810 = $8808 + 4 | 0;
 $8811 = $8810;
 HEAP32[$8811 >> 2] = $8807;
 $8812 = _i64Add($8654 | 0, $8655 | 0, $8534 | 0, $8535 | 0) | 0;
 $8813 = getTempRet0() | 0;
 $8814 = _bitshift64Shl($8534 | 0, $8535 | 0, 1) | 0;
 $8815 = getTempRet0() | 0;
 $8816 = $8814 & -2;
 $8817 = $8815 & 1;
 $8818 = ___muldi3($8816 | 0, $8817 | 0, $8654 | 0, 0) | 0;
 $8819 = getTempRet0() | 0;
 $8820 = _i64Add($8812 | 0, $8813 | 0, $8818 | 0, $8819 | 0) | 0;
 $8821 = getTempRet0() | 0;
 $8822 = $8788 ^ $8820;
 $8823 = $8789 ^ $8821;
 $8824 = _i64Add($8724 | 0, $8725 | 0, $8823 | 0, $8822 | 0) | 0;
 $8825 = getTempRet0() | 0;
 $8826 = _bitshift64Shl($8724 | 0, $8725 | 0, 1) | 0;
 $8827 = getTempRet0() | 0;
 $8828 = $8826 & -2;
 $8829 = $8827 & 1;
 $8830 = ___muldi3($8828 | 0, $8829 | 0, $8823 | 0, 0) | 0;
 $8831 = getTempRet0() | 0;
 $8832 = _i64Add($8824 | 0, $8825 | 0, $8830 | 0, $8831 | 0) | 0;
 $8833 = getTempRet0() | 0;
 $8834 = $8832 ^ $8654;
 $8835 = $8833 ^ $8655;
 $8836 = _bitshift64Lshr($8834 | 0, $8835 | 0, 24) | 0;
 $8837 = getTempRet0() | 0;
 $8838 = _bitshift64Shl($8834 | 0, $8835 | 0, 40) | 0;
 $8839 = getTempRet0() | 0;
 $8840 = $8836 | $8838;
 $8841 = $8837 | $8839;
 $8842 = _i64Add($8840 | 0, $8841 | 0, $8820 | 0, $8821 | 0) | 0;
 $8843 = getTempRet0() | 0;
 $8844 = _bitshift64Shl($8820 | 0, $8821 | 0, 1) | 0;
 $8845 = getTempRet0() | 0;
 $8846 = $8844 & -2;
 $8847 = $8845 & 1;
 $8848 = ___muldi3($8836 | 0, 0, $8846 | 0, $8847 | 0) | 0;
 $8849 = getTempRet0() | 0;
 $8850 = _i64Add($8842 | 0, $8843 | 0, $8848 | 0, $8849 | 0) | 0;
 $8851 = getTempRet0() | 0;
 $8852 = $arrayidx45;
 $8853 = $8852;
 HEAP32[$8853 >> 2] = $8850;
 $8854 = $8852 + 4 | 0;
 $8855 = $8854;
 HEAP32[$8855 >> 2] = $8851;
 $8856 = $8850 ^ $8823;
 $8857 = $8851 ^ $8822;
 $8858 = _bitshift64Lshr($8856 | 0, $8857 | 0, 16) | 0;
 $8859 = getTempRet0() | 0;
 $8860 = _bitshift64Shl($8856 | 0, $8857 | 0, 48) | 0;
 $8861 = getTempRet0() | 0;
 $8862 = $8858 | $8860;
 $8863 = $8859 | $8861;
 $8864 = $arrayidx11800;
 $8865 = $8864;
 HEAP32[$8865 >> 2] = $8862;
 $8866 = $8864 + 4 | 0;
 $8867 = $8866;
 HEAP32[$8867 >> 2] = $8863;
 $8868 = _i64Add($8862 | 0, $8863 | 0, $8832 | 0, $8833 | 0) | 0;
 $8869 = getTempRet0() | 0;
 $8870 = _bitshift64Shl($8832 | 0, $8833 | 0, 1) | 0;
 $8871 = getTempRet0() | 0;
 $8872 = $8870 & -2;
 $8873 = $8871 & 1;
 $8874 = ___muldi3($8858 | 0, 0, $8872 | 0, $8873 | 0) | 0;
 $8875 = getTempRet0() | 0;
 $8876 = _i64Add($8868 | 0, $8869 | 0, $8874 | 0, $8875 | 0) | 0;
 $8877 = getTempRet0() | 0;
 $8878 = $arrayidx8294;
 $8879 = $8878;
 HEAP32[$8879 >> 2] = $8876;
 $8880 = $8878 + 4 | 0;
 $8881 = $8880;
 HEAP32[$8881 >> 2] = $8877;
 $8882 = $8876 ^ $8840;
 $8883 = $8877 ^ $8841;
 $8884 = _bitshift64Lshr($8882 | 0, $8883 | 0, 63) | 0;
 $8885 = getTempRet0() | 0;
 $8886 = _bitshift64Shl($8882 | 0, $8883 | 0, 1) | 0;
 $8887 = getTempRet0() | 0;
 $8888 = $8884 | $8886;
 $8889 = $8885 | $8887;
 $8890 = $arrayidx3550;
 $8891 = $8890;
 HEAP32[$8891 >> 2] = $8888;
 $8892 = $8890 + 4 | 0;
 $8893 = $8892;
 HEAP32[$8893 >> 2] = $8889;
 $8894 = _i64Add($8732 | 0, $8733 | 0, $8616 | 0, $8617 | 0) | 0;
 $8895 = getTempRet0() | 0;
 $8896 = _bitshift64Shl($8616 | 0, $8617 | 0, 1) | 0;
 $8897 = getTempRet0() | 0;
 $8898 = $8896 & -2;
 $8899 = $8897 & 1;
 $8900 = ___muldi3($8732 | 0, 0, $8898 | 0, $8899 | 0) | 0;
 $8901 = getTempRet0() | 0;
 $8902 = _i64Add($8894 | 0, $8895 | 0, $8900 | 0, $8901 | 0) | 0;
 $8903 = getTempRet0() | 0;
 $8904 = $8902 ^ $8546;
 $8905 = $8903 ^ $8547;
 $8906 = _i64Add($8905 | 0, $8904 | 0, $8798 | 0, $8799 | 0) | 0;
 $8907 = getTempRet0() | 0;
 $8908 = _bitshift64Shl($8798 | 0, $8799 | 0, 1) | 0;
 $8909 = getTempRet0() | 0;
 $8910 = $8908 & -2;
 $8911 = $8909 & 1;
 $8912 = ___muldi3($8905 | 0, 0, $8910 | 0, $8911 | 0) | 0;
 $8913 = getTempRet0() | 0;
 $8914 = _i64Add($8906 | 0, $8907 | 0, $8912 | 0, $8913 | 0) | 0;
 $8915 = getTempRet0() | 0;
 $8916 = $8914 ^ $8732;
 $8917 = $8915 ^ $8733;
 $8918 = _bitshift64Lshr($8916 | 0, $8917 | 0, 24) | 0;
 $8919 = getTempRet0() | 0;
 $8920 = _bitshift64Shl($8916 | 0, $8917 | 0, 40) | 0;
 $8921 = getTempRet0() | 0;
 $8922 = $8918 | $8920;
 $8923 = $8919 | $8921;
 $8924 = _i64Add($8922 | 0, $8923 | 0, $8902 | 0, $8903 | 0) | 0;
 $8925 = getTempRet0() | 0;
 $8926 = _bitshift64Shl($8902 | 0, $8903 | 0, 1) | 0;
 $8927 = getTempRet0() | 0;
 $8928 = $8926 & -2;
 $8929 = $8927 & 1;
 $8930 = ___muldi3($8918 | 0, 0, $8928 | 0, $8929 | 0) | 0;
 $8931 = getTempRet0() | 0;
 $8932 = _i64Add($8924 | 0, $8925 | 0, $8930 | 0, $8931 | 0) | 0;
 $8933 = getTempRet0() | 0;
 $8934 = $arrayidx250;
 $8935 = $8934;
 HEAP32[$8935 >> 2] = $8932;
 $8936 = $8934 + 4 | 0;
 $8937 = $8936;
 HEAP32[$8937 >> 2] = $8933;
 $8938 = $8932 ^ $8905;
 $8939 = $8933 ^ $8904;
 $8940 = _bitshift64Lshr($8938 | 0, $8939 | 0, 16) | 0;
 $8941 = getTempRet0() | 0;
 $8942 = _bitshift64Shl($8938 | 0, $8939 | 0, 48) | 0;
 $8943 = getTempRet0() | 0;
 $8944 = $8940 | $8942;
 $8945 = $8941 | $8943;
 $8946 = $arrayidx9944;
 $8947 = $8946;
 HEAP32[$8947 >> 2] = $8944;
 $8948 = $8946 + 4 | 0;
 $8949 = $8948;
 HEAP32[$8949 >> 2] = $8945;
 $8950 = _i64Add($8944 | 0, $8945 | 0, $8914 | 0, $8915 | 0) | 0;
 $8951 = getTempRet0() | 0;
 $8952 = _bitshift64Shl($8914 | 0, $8915 | 0, 1) | 0;
 $8953 = getTempRet0() | 0;
 $8954 = $8952 & -2;
 $8955 = $8953 & 1;
 $8956 = ___muldi3($8940 | 0, 0, $8954 | 0, $8955 | 0) | 0;
 $8957 = getTempRet0() | 0;
 $8958 = _i64Add($8950 | 0, $8951 | 0, $8956 | 0, $8957 | 0) | 0;
 $8959 = getTempRet0() | 0;
 $8960 = $arrayidx8500;
 $8961 = $8960;
 HEAP32[$8961 >> 2] = $8958;
 $8962 = $8960 + 4 | 0;
 $8963 = $8962;
 HEAP32[$8963 >> 2] = $8959;
 $8964 = $8958 ^ $8922;
 $8965 = $8959 ^ $8923;
 $8966 = _bitshift64Lshr($8964 | 0, $8965 | 0, 63) | 0;
 $8967 = getTempRet0() | 0;
 $8968 = _bitshift64Shl($8964 | 0, $8965 | 0, 1) | 0;
 $8969 = getTempRet0() | 0;
 $8970 = $8966 | $8968;
 $8971 = $8967 | $8969;
 $8972 = $arrayidx4994;
 $8973 = $8972;
 HEAP32[$8973 >> 2] = $8970;
 $8974 = $8972 + 4 | 0;
 $8975 = $8974;
 HEAP32[$8975 >> 2] = $8971;
 $8976 = _i64Add($8806 | 0, $8807 | 0, $8698 | 0, $8699 | 0) | 0;
 $8977 = getTempRet0() | 0;
 $8978 = _bitshift64Shl($8698 | 0, $8699 | 0, 1) | 0;
 $8979 = getTempRet0() | 0;
 $8980 = $8978 & -2;
 $8981 = $8979 & 1;
 $8982 = ___muldi3($8980 | 0, $8981 | 0, $8806 | 0, 0) | 0;
 $8983 = getTempRet0() | 0;
 $8984 = _i64Add($8976 | 0, $8977 | 0, $8982 | 0, $8983 | 0) | 0;
 $8985 = getTempRet0() | 0;
 $8986 = $8984 ^ $8628;
 $8987 = $8985 ^ $8629;
 $8988 = _i64Add($8987 | 0, $8986 | 0, $8560 | 0, $8561 | 0) | 0;
 $8989 = getTempRet0() | 0;
 $8990 = _bitshift64Shl($8560 | 0, $8561 | 0, 1) | 0;
 $8991 = getTempRet0() | 0;
 $8992 = $8990 & -2;
 $8993 = $8991 & 1;
 $8994 = ___muldi3($8987 | 0, 0, $8992 | 0, $8993 | 0) | 0;
 $8995 = getTempRet0() | 0;
 $8996 = _i64Add($8988 | 0, $8989 | 0, $8994 | 0, $8995 | 0) | 0;
 $8997 = getTempRet0() | 0;
 $8998 = $8996 ^ $8806;
 $8999 = $8997 ^ $8807;
 $9000 = _bitshift64Lshr($8998 | 0, $8999 | 0, 24) | 0;
 $9001 = getTempRet0() | 0;
 $9002 = _bitshift64Shl($8998 | 0, $8999 | 0, 40) | 0;
 $9003 = getTempRet0() | 0;
 $9004 = $9000 | $9002;
 $9005 = $9001 | $9003;
 $9006 = _i64Add($9004 | 0, $9005 | 0, $8984 | 0, $8985 | 0) | 0;
 $9007 = getTempRet0() | 0;
 $9008 = _bitshift64Shl($8984 | 0, $8985 | 0, 1) | 0;
 $9009 = getTempRet0() | 0;
 $9010 = $9008 & -2;
 $9011 = $9009 & 1;
 $9012 = ___muldi3($9000 | 0, 0, $9010 | 0, $9011 | 0) | 0;
 $9013 = getTempRet0() | 0;
 $9014 = _i64Add($9006 | 0, $9007 | 0, $9012 | 0, $9013 | 0) | 0;
 $9015 = getTempRet0() | 0;
 $9016 = $arrayidx1694;
 $9017 = $9016;
 HEAP32[$9017 >> 2] = $9014;
 $9018 = $9016 + 4 | 0;
 $9019 = $9018;
 HEAP32[$9019 >> 2] = $9015;
 $9020 = $9014 ^ $8987;
 $9021 = $9015 ^ $8986;
 $9022 = _bitshift64Lshr($9020 | 0, $9021 | 0, 16) | 0;
 $9023 = getTempRet0() | 0;
 $9024 = _bitshift64Shl($9020 | 0, $9021 | 0, 48) | 0;
 $9025 = getTempRet0() | 0;
 $9026 = $9022 | $9024;
 $9027 = $9023 | $9025;
 $9028 = $arrayidx10150;
 $9029 = $9028;
 HEAP32[$9029 >> 2] = $9026;
 $9030 = $9028 + 4 | 0;
 $9031 = $9030;
 HEAP32[$9031 >> 2] = $9027;
 $9032 = _i64Add($9026 | 0, $9027 | 0, $8996 | 0, $8997 | 0) | 0;
 $9033 = getTempRet0() | 0;
 $9034 = _bitshift64Shl($8996 | 0, $8997 | 0, 1) | 0;
 $9035 = getTempRet0() | 0;
 $9036 = $9034 & -2;
 $9037 = $9035 & 1;
 $9038 = ___muldi3($9022 | 0, 0, $9036 | 0, $9037 | 0) | 0;
 $9039 = getTempRet0() | 0;
 $9040 = _i64Add($9032 | 0, $9033 | 0, $9038 | 0, $9039 | 0) | 0;
 $9041 = getTempRet0() | 0;
 $9042 = $arrayidx6644;
 $9043 = $9042;
 HEAP32[$9043 >> 2] = $9040;
 $9044 = $9042 + 4 | 0;
 $9045 = $9044;
 HEAP32[$9045 >> 2] = $9041;
 $9046 = $9040 ^ $9004;
 $9047 = $9041 ^ $9005;
 $9048 = _bitshift64Lshr($9046 | 0, $9047 | 0, 63) | 0;
 $9049 = getTempRet0() | 0;
 $9050 = _bitshift64Shl($9046 | 0, $9047 | 0, 1) | 0;
 $9051 = getTempRet0() | 0;
 $9052 = $9048 | $9050;
 $9053 = $9049 | $9051;
 $9054 = $arrayidx5200;
 $9055 = $9054;
 HEAP32[$9055 >> 2] = $9052;
 $9056 = $9054 + 4 | 0;
 $9057 = $9056;
 HEAP32[$9057 >> 2] = $9053;
 $9058 = _i64Add($8776 | 0, $8777 | 0, $8572 | 0, $8573 | 0) | 0;
 $9059 = getTempRet0() | 0;
 $9060 = _bitshift64Shl($8776 | 0, $8777 | 0, 1) | 0;
 $9061 = getTempRet0() | 0;
 $9062 = $9060 & -2;
 $9063 = $9061 & 1;
 $9064 = ___muldi3($9062 | 0, $9063 | 0, $8572 | 0, 0) | 0;
 $9065 = getTempRet0() | 0;
 $9066 = _i64Add($9058 | 0, $9059 | 0, $9064 | 0, $9065 | 0) | 0;
 $9067 = getTempRet0() | 0;
 $9068 = $8710 ^ $9066;
 $9069 = $8711 ^ $9067;
 $9070 = _i64Add($9069 | 0, $9068 | 0, $8642 | 0, $8643 | 0) | 0;
 $9071 = getTempRet0() | 0;
 $9072 = _bitshift64Shl($8642 | 0, $8643 | 0, 1) | 0;
 $9073 = getTempRet0() | 0;
 $9074 = $9072 & -2;
 $9075 = $9073 & 1;
 $9076 = ___muldi3($9069 | 0, 0, $9074 | 0, $9075 | 0) | 0;
 $9077 = getTempRet0() | 0;
 $9078 = _i64Add($9070 | 0, $9071 | 0, $9076 | 0, $9077 | 0) | 0;
 $9079 = getTempRet0() | 0;
 $9080 = $9078 ^ $8572;
 $9081 = $9079 ^ $8573;
 $9082 = _bitshift64Lshr($9080 | 0, $9081 | 0, 24) | 0;
 $9083 = getTempRet0() | 0;
 $9084 = _bitshift64Shl($9080 | 0, $9081 | 0, 40) | 0;
 $9085 = getTempRet0() | 0;
 $9086 = $9082 | $9084;
 $9087 = $9083 | $9085;
 $9088 = _i64Add($9086 | 0, $9087 | 0, $9066 | 0, $9067 | 0) | 0;
 $9089 = getTempRet0() | 0;
 $9090 = _bitshift64Shl($9066 | 0, $9067 | 0, 1) | 0;
 $9091 = getTempRet0() | 0;
 $9092 = $9090 & -2;
 $9093 = $9091 & 1;
 $9094 = ___muldi3($9082 | 0, 0, $9092 | 0, $9093 | 0) | 0;
 $9095 = getTempRet0() | 0;
 $9096 = _i64Add($9088 | 0, $9089 | 0, $9094 | 0, $9095 | 0) | 0;
 $9097 = getTempRet0() | 0;
 $9098 = $arrayidx1900;
 $9099 = $9098;
 HEAP32[$9099 >> 2] = $9096;
 $9100 = $9098 + 4 | 0;
 $9101 = $9100;
 HEAP32[$9101 >> 2] = $9097;
 $9102 = $9096 ^ $9069;
 $9103 = $9097 ^ $9068;
 $9104 = _bitshift64Lshr($9102 | 0, $9103 | 0, 16) | 0;
 $9105 = getTempRet0() | 0;
 $9106 = _bitshift64Shl($9102 | 0, $9103 | 0, 48) | 0;
 $9107 = getTempRet0() | 0;
 $9108 = $9104 | $9106;
 $9109 = $9105 | $9107;
 $9110 = $arrayidx11594;
 $9111 = $9110;
 HEAP32[$9111 >> 2] = $9108;
 $9112 = $9110 + 4 | 0;
 $9113 = $9112;
 HEAP32[$9113 >> 2] = $9109;
 $9114 = _i64Add($9108 | 0, $9109 | 0, $9078 | 0, $9079 | 0) | 0;
 $9115 = getTempRet0() | 0;
 $9116 = _bitshift64Shl($9078 | 0, $9079 | 0, 1) | 0;
 $9117 = getTempRet0() | 0;
 $9118 = $9116 & -2;
 $9119 = $9117 & 1;
 $9120 = ___muldi3($9104 | 0, 0, $9118 | 0, $9119 | 0) | 0;
 $9121 = getTempRet0() | 0;
 $9122 = _i64Add($9114 | 0, $9115 | 0, $9120 | 0, $9121 | 0) | 0;
 $9123 = getTempRet0() | 0;
 $9124 = $arrayidx6850;
 $9125 = $9124;
 HEAP32[$9125 >> 2] = $9122;
 $9126 = $9124 + 4 | 0;
 $9127 = $9126;
 HEAP32[$9127 >> 2] = $9123;
 $9128 = $9122 ^ $9086;
 $9129 = $9123 ^ $9087;
 $9130 = _bitshift64Lshr($9128 | 0, $9129 | 0, 63) | 0;
 $9131 = getTempRet0() | 0;
 $9132 = _bitshift64Shl($9128 | 0, $9129 | 0, 1) | 0;
 $9133 = getTempRet0() | 0;
 $9134 = $9130 | $9132;
 $9135 = $9131 | $9133;
 $9136 = $arrayidx3344;
 $9137 = $9136;
 HEAP32[$9137 >> 2] = $9134;
 $9138 = $9136 + 4 | 0;
 $9139 = $9138;
 HEAP32[$9139 >> 2] = $9135;
 $9140 = _i64Add($1956 | 0, $1957 | 0, $476 | 0, $477 | 0) | 0;
 $9141 = getTempRet0() | 0;
 $9142 = _bitshift64Shl($476 | 0, $477 | 0, 1) | 0;
 $9143 = getTempRet0() | 0;
 $9144 = $9142 & -2;
 $9145 = $9143 & 1;
 $9146 = ___muldi3($1956 | 0, 0, $9144 | 0, $9145 | 0) | 0;
 $9147 = getTempRet0() | 0;
 $9148 = _i64Add($9140 | 0, $9141 | 0, $9146 | 0, $9147 | 0) | 0;
 $9149 = getTempRet0() | 0;
 $9150 = $4916 ^ $9148;
 $9151 = $4917 ^ $9149;
 $9152 = _i64Add($9151 | 0, $9150 | 0, $3436 | 0, $3437 | 0) | 0;
 $9153 = getTempRet0() | 0;
 $9154 = _bitshift64Shl($3436 | 0, $3437 | 0, 1) | 0;
 $9155 = getTempRet0() | 0;
 $9156 = $9154 & -2;
 $9157 = $9155 & 1;
 $9158 = ___muldi3($9151 | 0, 0, $9156 | 0, $9157 | 0) | 0;
 $9159 = getTempRet0() | 0;
 $9160 = _i64Add($9152 | 0, $9153 | 0, $9158 | 0, $9159 | 0) | 0;
 $9161 = getTempRet0() | 0;
 $9162 = $9160 ^ $1956;
 $9163 = $9161 ^ $1957;
 $9164 = _bitshift64Lshr($9162 | 0, $9163 | 0, 24) | 0;
 $9165 = getTempRet0() | 0;
 $9166 = _bitshift64Shl($9162 | 0, $9163 | 0, 40) | 0;
 $9167 = getTempRet0() | 0;
 $9168 = $9164 | $9166;
 $9169 = $9165 | $9167;
 $9170 = _i64Add($9168 | 0, $9169 | 0, $9148 | 0, $9149 | 0) | 0;
 $9171 = getTempRet0() | 0;
 $9172 = _bitshift64Shl($9148 | 0, $9149 | 0, 1) | 0;
 $9173 = getTempRet0() | 0;
 $9174 = $9172 & -2;
 $9175 = $9173 & 1;
 $9176 = ___muldi3($9164 | 0, 0, $9174 | 0, $9175 | 0) | 0;
 $9177 = getTempRet0() | 0;
 $9178 = _i64Add($9170 | 0, $9171 | 0, $9176 | 0, $9177 | 0) | 0;
 $9179 = getTempRet0() | 0;
 $9180 = $arrayidx456;
 $9181 = $9180;
 HEAP32[$9181 >> 2] = $9178;
 $9182 = $9180 + 4 | 0;
 $9183 = $9182;
 HEAP32[$9183 >> 2] = $9179;
 $9184 = $9178 ^ $9151;
 $9185 = $9179 ^ $9150;
 $9186 = _bitshift64Lshr($9184 | 0, $9185 | 0, 16) | 0;
 $9187 = getTempRet0() | 0;
 $9188 = _bitshift64Shl($9184 | 0, $9185 | 0, 48) | 0;
 $9189 = getTempRet0() | 0;
 $9190 = $9186 | $9188;
 $9191 = $9187 | $9189;
 $9192 = $arrayidx10356;
 $9193 = $9192;
 HEAP32[$9193 >> 2] = $9190;
 $9194 = $9192 + 4 | 0;
 $9195 = $9194;
 HEAP32[$9195 >> 2] = $9191;
 $9196 = _i64Add($9190 | 0, $9191 | 0, $9160 | 0, $9161 | 0) | 0;
 $9197 = getTempRet0() | 0;
 $9198 = _bitshift64Shl($9160 | 0, $9161 | 0, 1) | 0;
 $9199 = getTempRet0() | 0;
 $9200 = $9198 & -2;
 $9201 = $9199 & 1;
 $9202 = ___muldi3($9186 | 0, 0, $9200 | 0, $9201 | 0) | 0;
 $9203 = getTempRet0() | 0;
 $9204 = _i64Add($9196 | 0, $9197 | 0, $9202 | 0, $9203 | 0) | 0;
 $9205 = getTempRet0() | 0;
 $9206 = $arrayidx7056;
 $9207 = $9206;
 HEAP32[$9207 >> 2] = $9204;
 $9208 = $9206 + 4 | 0;
 $9209 = $9208;
 HEAP32[$9209 >> 2] = $9205;
 $9210 = $9204 ^ $9168;
 $9211 = $9205 ^ $9169;
 $9212 = _bitshift64Lshr($9210 | 0, $9211 | 0, 63) | 0;
 $9213 = getTempRet0() | 0;
 $9214 = _bitshift64Shl($9210 | 0, $9211 | 0, 1) | 0;
 $9215 = getTempRet0() | 0;
 $9216 = $9212 | $9214;
 $9217 = $9213 | $9215;
 $9218 = $arrayidx3756;
 $9219 = $9218;
 HEAP32[$9219 >> 2] = $9216;
 $9220 = $9218 + 4 | 0;
 $9221 = $9220;
 HEAP32[$9221 >> 2] = $9217;
 $9222 = _i64Add($2038 | 0, $2039 | 0, $558 | 0, $559 | 0) | 0;
 $9223 = getTempRet0() | 0;
 $9224 = _bitshift64Shl($558 | 0, $559 | 0, 1) | 0;
 $9225 = getTempRet0() | 0;
 $9226 = $9224 & -2;
 $9227 = $9225 & 1;
 $9228 = ___muldi3($2038 | 0, 0, $9226 | 0, $9227 | 0) | 0;
 $9229 = getTempRet0() | 0;
 $9230 = _i64Add($9222 | 0, $9223 | 0, $9228 | 0, $9229 | 0) | 0;
 $9231 = getTempRet0() | 0;
 $9232 = $4998 ^ $9230;
 $9233 = $4999 ^ $9231;
 $9234 = _i64Add($9233 | 0, $9232 | 0, $3518 | 0, $3519 | 0) | 0;
 $9235 = getTempRet0() | 0;
 $9236 = _bitshift64Shl($3518 | 0, $3519 | 0, 1) | 0;
 $9237 = getTempRet0() | 0;
 $9238 = $9236 & -2;
 $9239 = $9237 & 1;
 $9240 = ___muldi3($9233 | 0, 0, $9238 | 0, $9239 | 0) | 0;
 $9241 = getTempRet0() | 0;
 $9242 = _i64Add($9234 | 0, $9235 | 0, $9240 | 0, $9241 | 0) | 0;
 $9243 = getTempRet0() | 0;
 $9244 = $9242 ^ $2038;
 $9245 = $9243 ^ $2039;
 $9246 = _bitshift64Lshr($9244 | 0, $9245 | 0, 24) | 0;
 $9247 = getTempRet0() | 0;
 $9248 = _bitshift64Shl($9244 | 0, $9245 | 0, 40) | 0;
 $9249 = getTempRet0() | 0;
 $9250 = $9246 | $9248;
 $9251 = $9247 | $9249;
 $9252 = _i64Add($9250 | 0, $9251 | 0, $9230 | 0, $9231 | 0) | 0;
 $9253 = getTempRet0() | 0;
 $9254 = _bitshift64Shl($9230 | 0, $9231 | 0, 1) | 0;
 $9255 = getTempRet0() | 0;
 $9256 = $9254 & -2;
 $9257 = $9255 & 1;
 $9258 = ___muldi3($9246 | 0, 0, $9256 | 0, $9257 | 0) | 0;
 $9259 = getTempRet0() | 0;
 $9260 = _i64Add($9252 | 0, $9253 | 0, $9258 | 0, $9259 | 0) | 0;
 $9261 = getTempRet0() | 0;
 $9262 = $arrayidx662;
 $9263 = $9262;
 HEAP32[$9263 >> 2] = $9260;
 $9264 = $9262 + 4 | 0;
 $9265 = $9264;
 HEAP32[$9265 >> 2] = $9261;
 $9266 = $9260 ^ $9233;
 $9267 = $9261 ^ $9232;
 $9268 = _bitshift64Lshr($9266 | 0, $9267 | 0, 16) | 0;
 $9269 = getTempRet0() | 0;
 $9270 = _bitshift64Shl($9266 | 0, $9267 | 0, 48) | 0;
 $9271 = getTempRet0() | 0;
 $9272 = $9268 | $9270;
 $9273 = $9269 | $9271;
 $9274 = $arrayidx10562;
 $9275 = $9274;
 HEAP32[$9275 >> 2] = $9272;
 $9276 = $9274 + 4 | 0;
 $9277 = $9276;
 HEAP32[$9277 >> 2] = $9273;
 $9278 = _i64Add($9272 | 0, $9273 | 0, $9242 | 0, $9243 | 0) | 0;
 $9279 = getTempRet0() | 0;
 $9280 = _bitshift64Shl($9242 | 0, $9243 | 0, 1) | 0;
 $9281 = getTempRet0() | 0;
 $9282 = $9280 & -2;
 $9283 = $9281 & 1;
 $9284 = ___muldi3($9268 | 0, 0, $9282 | 0, $9283 | 0) | 0;
 $9285 = getTempRet0() | 0;
 $9286 = _i64Add($9278 | 0, $9279 | 0, $9284 | 0, $9285 | 0) | 0;
 $9287 = getTempRet0() | 0;
 $9288 = $arrayidx7262;
 $9289 = $9288;
 HEAP32[$9289 >> 2] = $9286;
 $9290 = $9288 + 4 | 0;
 $9291 = $9290;
 HEAP32[$9291 >> 2] = $9287;
 $9292 = $9286 ^ $9250;
 $9293 = $9287 ^ $9251;
 $9294 = _bitshift64Lshr($9292 | 0, $9293 | 0, 63) | 0;
 $9295 = getTempRet0() | 0;
 $9296 = _bitshift64Shl($9292 | 0, $9293 | 0, 1) | 0;
 $9297 = getTempRet0() | 0;
 $9298 = $9294 | $9296;
 $9299 = $9295 | $9297;
 $9300 = $arrayidx3962;
 $9301 = $9300;
 HEAP32[$9301 >> 2] = $9298;
 $9302 = $9300 + 4 | 0;
 $9303 = $9302;
 HEAP32[$9303 >> 2] = $9299;
 $9304 = _i64Add($2696 | 0, $2697 | 0, $1216 | 0, $1217 | 0) | 0;
 $9305 = getTempRet0() | 0;
 $9306 = _bitshift64Shl($1216 | 0, $1217 | 0, 1) | 0;
 $9307 = getTempRet0() | 0;
 $9308 = $9306 & -2;
 $9309 = $9307 & 1;
 $9310 = ___muldi3($2696 | 0, 0, $9308 | 0, $9309 | 0) | 0;
 $9311 = getTempRet0() | 0;
 $9312 = _i64Add($9304 | 0, $9305 | 0, $9310 | 0, $9311 | 0) | 0;
 $9313 = getTempRet0() | 0;
 $9314 = $5656 ^ $9312;
 $9315 = $5657 ^ $9313;
 $9316 = _i64Add($9315 | 0, $9314 | 0, $4176 | 0, $4177 | 0) | 0;
 $9317 = getTempRet0() | 0;
 $9318 = _bitshift64Shl($4176 | 0, $4177 | 0, 1) | 0;
 $9319 = getTempRet0() | 0;
 $9320 = $9318 & -2;
 $9321 = $9319 & 1;
 $9322 = ___muldi3($9315 | 0, 0, $9320 | 0, $9321 | 0) | 0;
 $9323 = getTempRet0() | 0;
 $9324 = _i64Add($9316 | 0, $9317 | 0, $9322 | 0, $9323 | 0) | 0;
 $9325 = getTempRet0() | 0;
 $9326 = $9324 ^ $2696;
 $9327 = $9325 ^ $2697;
 $9328 = _bitshift64Lshr($9326 | 0, $9327 | 0, 24) | 0;
 $9329 = getTempRet0() | 0;
 $9330 = _bitshift64Shl($9326 | 0, $9327 | 0, 40) | 0;
 $9331 = getTempRet0() | 0;
 $9332 = $9328 | $9330;
 $9333 = $9329 | $9331;
 $9334 = _i64Add($9332 | 0, $9333 | 0, $9312 | 0, $9313 | 0) | 0;
 $9335 = getTempRet0() | 0;
 $9336 = _bitshift64Shl($9312 | 0, $9313 | 0, 1) | 0;
 $9337 = getTempRet0() | 0;
 $9338 = $9336 & -2;
 $9339 = $9337 & 1;
 $9340 = ___muldi3($9328 | 0, 0, $9338 | 0, $9339 | 0) | 0;
 $9341 = getTempRet0() | 0;
 $9342 = _i64Add($9334 | 0, $9335 | 0, $9340 | 0, $9341 | 0) | 0;
 $9343 = getTempRet0() | 0;
 $9344 = $arrayidx2106;
 $9345 = $9344;
 HEAP32[$9345 >> 2] = $9342;
 $9346 = $9344 + 4 | 0;
 $9347 = $9346;
 HEAP32[$9347 >> 2] = $9343;
 $9348 = $9342 ^ $9315;
 $9349 = $9343 ^ $9314;
 $9350 = _bitshift64Lshr($9348 | 0, $9349 | 0, 16) | 0;
 $9351 = getTempRet0() | 0;
 $9352 = _bitshift64Shl($9348 | 0, $9349 | 0, 48) | 0;
 $9353 = getTempRet0() | 0;
 $9354 = $9350 | $9352;
 $9355 = $9351 | $9353;
 $9356 = $arrayidx12006;
 $9357 = $9356;
 HEAP32[$9357 >> 2] = $9354;
 $9358 = $9356 + 4 | 0;
 $9359 = $9358;
 HEAP32[$9359 >> 2] = $9355;
 $9360 = _i64Add($9354 | 0, $9355 | 0, $9324 | 0, $9325 | 0) | 0;
 $9361 = getTempRet0() | 0;
 $9362 = _bitshift64Shl($9324 | 0, $9325 | 0, 1) | 0;
 $9363 = getTempRet0() | 0;
 $9364 = $9362 & -2;
 $9365 = $9363 & 1;
 $9366 = ___muldi3($9350 | 0, 0, $9364 | 0, $9365 | 0) | 0;
 $9367 = getTempRet0() | 0;
 $9368 = _i64Add($9360 | 0, $9361 | 0, $9366 | 0, $9367 | 0) | 0;
 $9369 = getTempRet0() | 0;
 $9370 = $9368 ^ $9332;
 $9371 = $9369 ^ $9333;
 $9372 = _bitshift64Lshr($9370 | 0, $9371 | 0, 63) | 0;
 $9373 = getTempRet0() | 0;
 $9374 = _bitshift64Shl($9370 | 0, $9371 | 0, 1) | 0;
 $9375 = getTempRet0() | 0;
 $9376 = $9372 | $9374;
 $9377 = $9373 | $9375;
 $9378 = $arrayidx5406;
 $9379 = $9378;
 HEAP32[$9379 >> 2] = $9376;
 $9380 = $9378 + 4 | 0;
 $9381 = $9380;
 HEAP32[$9381 >> 2] = $9377;
 $9382 = _i64Add($2778 | 0, $2779 | 0, $1298 | 0, $1299 | 0) | 0;
 $9383 = getTempRet0() | 0;
 $9384 = _bitshift64Shl($1298 | 0, $1299 | 0, 1) | 0;
 $9385 = getTempRet0() | 0;
 $9386 = $9384 & -2;
 $9387 = $9385 & 1;
 $9388 = ___muldi3($2778 | 0, 0, $9386 | 0, $9387 | 0) | 0;
 $9389 = getTempRet0() | 0;
 $9390 = _i64Add($9382 | 0, $9383 | 0, $9388 | 0, $9389 | 0) | 0;
 $9391 = getTempRet0() | 0;
 $9392 = $5738 ^ $9390;
 $9393 = $5739 ^ $9391;
 $9394 = _i64Add($9393 | 0, $9392 | 0, $4258 | 0, $4259 | 0) | 0;
 $9395 = getTempRet0() | 0;
 $9396 = _bitshift64Shl($4258 | 0, $4259 | 0, 1) | 0;
 $9397 = getTempRet0() | 0;
 $9398 = $9396 & -2;
 $9399 = $9397 & 1;
 $9400 = ___muldi3($9393 | 0, 0, $9398 | 0, $9399 | 0) | 0;
 $9401 = getTempRet0() | 0;
 $9402 = _i64Add($9394 | 0, $9395 | 0, $9400 | 0, $9401 | 0) | 0;
 $9403 = getTempRet0() | 0;
 $9404 = $9402 ^ $2778;
 $9405 = $9403 ^ $2779;
 $9406 = _bitshift64Lshr($9404 | 0, $9405 | 0, 24) | 0;
 $9407 = getTempRet0() | 0;
 $9408 = _bitshift64Shl($9404 | 0, $9405 | 0, 40) | 0;
 $9409 = getTempRet0() | 0;
 $9410 = $9406 | $9408;
 $9411 = $9407 | $9409;
 $9412 = _i64Add($9410 | 0, $9411 | 0, $9390 | 0, $9391 | 0) | 0;
 $9413 = getTempRet0() | 0;
 $9414 = _bitshift64Shl($9390 | 0, $9391 | 0, 1) | 0;
 $9415 = getTempRet0() | 0;
 $9416 = $9414 & -2;
 $9417 = $9415 & 1;
 $9418 = ___muldi3($9406 | 0, 0, $9416 | 0, $9417 | 0) | 0;
 $9419 = getTempRet0() | 0;
 $9420 = _i64Add($9412 | 0, $9413 | 0, $9418 | 0, $9419 | 0) | 0;
 $9421 = getTempRet0() | 0;
 $9422 = $arrayidx2312;
 $9423 = $9422;
 HEAP32[$9423 >> 2] = $9420;
 $9424 = $9422 + 4 | 0;
 $9425 = $9424;
 HEAP32[$9425 >> 2] = $9421;
 $9426 = $9420 ^ $9393;
 $9427 = $9421 ^ $9392;
 $9428 = _bitshift64Lshr($9426 | 0, $9427 | 0, 16) | 0;
 $9429 = getTempRet0() | 0;
 $9430 = _bitshift64Shl($9426 | 0, $9427 | 0, 48) | 0;
 $9431 = getTempRet0() | 0;
 $9432 = $9428 | $9430;
 $9433 = $9429 | $9431;
 $9434 = _i64Add($9432 | 0, $9433 | 0, $9402 | 0, $9403 | 0) | 0;
 $9435 = getTempRet0() | 0;
 $9436 = _bitshift64Shl($9402 | 0, $9403 | 0, 1) | 0;
 $9437 = getTempRet0() | 0;
 $9438 = $9436 & -2;
 $9439 = $9437 & 1;
 $9440 = ___muldi3($9428 | 0, 0, $9438 | 0, $9439 | 0) | 0;
 $9441 = getTempRet0() | 0;
 $9442 = _i64Add($9434 | 0, $9435 | 0, $9440 | 0, $9441 | 0) | 0;
 $9443 = getTempRet0() | 0;
 $9444 = $9442 ^ $9410;
 $9445 = $9443 ^ $9411;
 $9446 = _bitshift64Lshr($9444 | 0, $9445 | 0, 63) | 0;
 $9447 = getTempRet0() | 0;
 $9448 = _bitshift64Shl($9444 | 0, $9445 | 0, 1) | 0;
 $9449 = getTempRet0() | 0;
 $9450 = $9446 | $9448;
 $9451 = $9447 | $9449;
 $9452 = $arrayidx5612;
 $9453 = $9452;
 HEAP32[$9453 >> 2] = $9450;
 $9454 = $9452 + 4 | 0;
 $9455 = $9454;
 HEAP32[$9455 >> 2] = $9451;
 $9456 = _i64Add($9298 | 0, $9299 | 0, $9178 | 0, $9179 | 0) | 0;
 $9457 = getTempRet0() | 0;
 $9458 = _bitshift64Shl($9178 | 0, $9179 | 0, 1) | 0;
 $9459 = getTempRet0() | 0;
 $9460 = $9458 & -2;
 $9461 = $9459 & 1;
 $9462 = ___muldi3($9298 | 0, 0, $9460 | 0, $9461 | 0) | 0;
 $9463 = getTempRet0() | 0;
 $9464 = _i64Add($9456 | 0, $9457 | 0, $9462 | 0, $9463 | 0) | 0;
 $9465 = getTempRet0() | 0;
 $9466 = $9432 ^ $9464;
 $9467 = $9433 ^ $9465;
 $9468 = _i64Add($9467 | 0, $9466 | 0, $9368 | 0, $9369 | 0) | 0;
 $9469 = getTempRet0() | 0;
 $9470 = _bitshift64Shl($9368 | 0, $9369 | 0, 1) | 0;
 $9471 = getTempRet0() | 0;
 $9472 = $9470 & -2;
 $9473 = $9471 & 1;
 $9474 = ___muldi3($9472 | 0, $9473 | 0, $9467 | 0, 0) | 0;
 $9475 = getTempRet0() | 0;
 $9476 = _i64Add($9468 | 0, $9469 | 0, $9474 | 0, $9475 | 0) | 0;
 $9477 = getTempRet0() | 0;
 $9478 = $9476 ^ $9298;
 $9479 = $9477 ^ $9299;
 $9480 = _bitshift64Lshr($9478 | 0, $9479 | 0, 24) | 0;
 $9481 = getTempRet0() | 0;
 $9482 = _bitshift64Shl($9478 | 0, $9479 | 0, 40) | 0;
 $9483 = getTempRet0() | 0;
 $9484 = $9480 | $9482;
 $9485 = $9481 | $9483;
 $9486 = _i64Add($9484 | 0, $9485 | 0, $9464 | 0, $9465 | 0) | 0;
 $9487 = getTempRet0() | 0;
 $9488 = _bitshift64Shl($9464 | 0, $9465 | 0, 1) | 0;
 $9489 = getTempRet0() | 0;
 $9490 = $9488 & -2;
 $9491 = $9489 & 1;
 $9492 = ___muldi3($9480 | 0, 0, $9490 | 0, $9491 | 0) | 0;
 $9493 = getTempRet0() | 0;
 $9494 = _i64Add($9486 | 0, $9487 | 0, $9492 | 0, $9493 | 0) | 0;
 $9495 = getTempRet0() | 0;
 $9496 = $arrayidx456;
 $9497 = $9496;
 HEAP32[$9497 >> 2] = $9494;
 $9498 = $9496 + 4 | 0;
 $9499 = $9498;
 HEAP32[$9499 >> 2] = $9495;
 $9500 = $9494 ^ $9467;
 $9501 = $9495 ^ $9466;
 $9502 = _bitshift64Lshr($9500 | 0, $9501 | 0, 16) | 0;
 $9503 = getTempRet0() | 0;
 $9504 = _bitshift64Shl($9500 | 0, $9501 | 0, 48) | 0;
 $9505 = getTempRet0() | 0;
 $9506 = $9502 | $9504;
 $9507 = $9503 | $9505;
 $9508 = $arrayidx12212;
 $9509 = $9508;
 HEAP32[$9509 >> 2] = $9506;
 $9510 = $9508 + 4 | 0;
 $9511 = $9510;
 HEAP32[$9511 >> 2] = $9507;
 $9512 = _i64Add($9506 | 0, $9507 | 0, $9476 | 0, $9477 | 0) | 0;
 $9513 = getTempRet0() | 0;
 $9514 = _bitshift64Shl($9476 | 0, $9477 | 0, 1) | 0;
 $9515 = getTempRet0() | 0;
 $9516 = $9514 & -2;
 $9517 = $9515 & 1;
 $9518 = ___muldi3($9502 | 0, 0, $9516 | 0, $9517 | 0) | 0;
 $9519 = getTempRet0() | 0;
 $9520 = _i64Add($9512 | 0, $9513 | 0, $9518 | 0, $9519 | 0) | 0;
 $9521 = getTempRet0() | 0;
 $9522 = $arrayidx8706;
 $9523 = $9522;
 HEAP32[$9523 >> 2] = $9520;
 $9524 = $9522 + 4 | 0;
 $9525 = $9524;
 HEAP32[$9525 >> 2] = $9521;
 $9526 = $9520 ^ $9484;
 $9527 = $9521 ^ $9485;
 $9528 = _bitshift64Lshr($9526 | 0, $9527 | 0, 63) | 0;
 $9529 = getTempRet0() | 0;
 $9530 = _bitshift64Shl($9526 | 0, $9527 | 0, 1) | 0;
 $9531 = getTempRet0() | 0;
 $9532 = $9528 | $9530;
 $9533 = $9529 | $9531;
 $9534 = $arrayidx3962;
 $9535 = $9534;
 HEAP32[$9535 >> 2] = $9532;
 $9536 = $9534 + 4 | 0;
 $9537 = $9536;
 HEAP32[$9537 >> 2] = $9533;
 $9538 = _i64Add($9376 | 0, $9377 | 0, $9260 | 0, $9261 | 0) | 0;
 $9539 = getTempRet0() | 0;
 $9540 = _bitshift64Shl($9260 | 0, $9261 | 0, 1) | 0;
 $9541 = getTempRet0() | 0;
 $9542 = $9540 & -2;
 $9543 = $9541 & 1;
 $9544 = ___muldi3($9376 | 0, 0, $9542 | 0, $9543 | 0) | 0;
 $9545 = getTempRet0() | 0;
 $9546 = _i64Add($9538 | 0, $9539 | 0, $9544 | 0, $9545 | 0) | 0;
 $9547 = getTempRet0() | 0;
 $9548 = $9546 ^ $9190;
 $9549 = $9547 ^ $9191;
 $9550 = _i64Add($9549 | 0, $9548 | 0, $9442 | 0, $9443 | 0) | 0;
 $9551 = getTempRet0() | 0;
 $9552 = _bitshift64Shl($9442 | 0, $9443 | 0, 1) | 0;
 $9553 = getTempRet0() | 0;
 $9554 = $9552 & -2;
 $9555 = $9553 & 1;
 $9556 = ___muldi3($9549 | 0, 0, $9554 | 0, $9555 | 0) | 0;
 $9557 = getTempRet0() | 0;
 $9558 = _i64Add($9550 | 0, $9551 | 0, $9556 | 0, $9557 | 0) | 0;
 $9559 = getTempRet0() | 0;
 $9560 = $9558 ^ $9376;
 $9561 = $9559 ^ $9377;
 $9562 = _bitshift64Lshr($9560 | 0, $9561 | 0, 24) | 0;
 $9563 = getTempRet0() | 0;
 $9564 = _bitshift64Shl($9560 | 0, $9561 | 0, 40) | 0;
 $9565 = getTempRet0() | 0;
 $9566 = $9562 | $9564;
 $9567 = $9563 | $9565;
 $9568 = _i64Add($9566 | 0, $9567 | 0, $9546 | 0, $9547 | 0) | 0;
 $9569 = getTempRet0() | 0;
 $9570 = _bitshift64Shl($9546 | 0, $9547 | 0, 1) | 0;
 $9571 = getTempRet0() | 0;
 $9572 = $9570 & -2;
 $9573 = $9571 & 1;
 $9574 = ___muldi3($9562 | 0, 0, $9572 | 0, $9573 | 0) | 0;
 $9575 = getTempRet0() | 0;
 $9576 = _i64Add($9568 | 0, $9569 | 0, $9574 | 0, $9575 | 0) | 0;
 $9577 = getTempRet0() | 0;
 $9578 = $arrayidx662;
 $9579 = $9578;
 HEAP32[$9579 >> 2] = $9576;
 $9580 = $9578 + 4 | 0;
 $9581 = $9580;
 HEAP32[$9581 >> 2] = $9577;
 $9582 = $9576 ^ $9549;
 $9583 = $9577 ^ $9548;
 $9584 = _bitshift64Lshr($9582 | 0, $9583 | 0, 16) | 0;
 $9585 = getTempRet0() | 0;
 $9586 = _bitshift64Shl($9582 | 0, $9583 | 0, 48) | 0;
 $9587 = getTempRet0() | 0;
 $9588 = $9584 | $9586;
 $9589 = $9585 | $9587;
 $9590 = $arrayidx10356;
 $9591 = $9590;
 HEAP32[$9591 >> 2] = $9588;
 $9592 = $9590 + 4 | 0;
 $9593 = $9592;
 HEAP32[$9593 >> 2] = $9589;
 $9594 = _i64Add($9588 | 0, $9589 | 0, $9558 | 0, $9559 | 0) | 0;
 $9595 = getTempRet0() | 0;
 $9596 = _bitshift64Shl($9558 | 0, $9559 | 0, 1) | 0;
 $9597 = getTempRet0() | 0;
 $9598 = $9596 & -2;
 $9599 = $9597 & 1;
 $9600 = ___muldi3($9584 | 0, 0, $9598 | 0, $9599 | 0) | 0;
 $9601 = getTempRet0() | 0;
 $9602 = _i64Add($9594 | 0, $9595 | 0, $9600 | 0, $9601 | 0) | 0;
 $9603 = getTempRet0() | 0;
 $9604 = $arrayidx8912;
 $9605 = $9604;
 HEAP32[$9605 >> 2] = $9602;
 $9606 = $9604 + 4 | 0;
 $9607 = $9606;
 HEAP32[$9607 >> 2] = $9603;
 $9608 = $9602 ^ $9566;
 $9609 = $9603 ^ $9567;
 $9610 = _bitshift64Lshr($9608 | 0, $9609 | 0, 63) | 0;
 $9611 = getTempRet0() | 0;
 $9612 = _bitshift64Shl($9608 | 0, $9609 | 0, 1) | 0;
 $9613 = getTempRet0() | 0;
 $9614 = $9610 | $9612;
 $9615 = $9611 | $9613;
 $9616 = $arrayidx5406;
 $9617 = $9616;
 HEAP32[$9617 >> 2] = $9614;
 $9618 = $9616 + 4 | 0;
 $9619 = $9618;
 HEAP32[$9619 >> 2] = $9615;
 $9620 = _i64Add($9450 | 0, $9451 | 0, $9342 | 0, $9343 | 0) | 0;
 $9621 = getTempRet0() | 0;
 $9622 = _bitshift64Shl($9342 | 0, $9343 | 0, 1) | 0;
 $9623 = getTempRet0() | 0;
 $9624 = $9622 & -2;
 $9625 = $9623 & 1;
 $9626 = ___muldi3($9450 | 0, 0, $9624 | 0, $9625 | 0) | 0;
 $9627 = getTempRet0() | 0;
 $9628 = _i64Add($9620 | 0, $9621 | 0, $9626 | 0, $9627 | 0) | 0;
 $9629 = getTempRet0() | 0;
 $9630 = $9628 ^ $9272;
 $9631 = $9629 ^ $9273;
 $9632 = _i64Add($9631 | 0, $9630 | 0, $9204 | 0, $9205 | 0) | 0;
 $9633 = getTempRet0() | 0;
 $9634 = _bitshift64Shl($9204 | 0, $9205 | 0, 1) | 0;
 $9635 = getTempRet0() | 0;
 $9636 = $9634 & -2;
 $9637 = $9635 & 1;
 $9638 = ___muldi3($9631 | 0, 0, $9636 | 0, $9637 | 0) | 0;
 $9639 = getTempRet0() | 0;
 $9640 = _i64Add($9632 | 0, $9633 | 0, $9638 | 0, $9639 | 0) | 0;
 $9641 = getTempRet0() | 0;
 $9642 = $9640 ^ $9450;
 $9643 = $9641 ^ $9451;
 $9644 = _bitshift64Lshr($9642 | 0, $9643 | 0, 24) | 0;
 $9645 = getTempRet0() | 0;
 $9646 = _bitshift64Shl($9642 | 0, $9643 | 0, 40) | 0;
 $9647 = getTempRet0() | 0;
 $9648 = $9644 | $9646;
 $9649 = $9645 | $9647;
 $9650 = _i64Add($9648 | 0, $9649 | 0, $9628 | 0, $9629 | 0) | 0;
 $9651 = getTempRet0() | 0;
 $9652 = _bitshift64Shl($9628 | 0, $9629 | 0, 1) | 0;
 $9653 = getTempRet0() | 0;
 $9654 = $9652 & -2;
 $9655 = $9653 & 1;
 $9656 = ___muldi3($9644 | 0, 0, $9654 | 0, $9655 | 0) | 0;
 $9657 = getTempRet0() | 0;
 $9658 = _i64Add($9650 | 0, $9651 | 0, $9656 | 0, $9657 | 0) | 0;
 $9659 = getTempRet0() | 0;
 $9660 = $arrayidx2106;
 $9661 = $9660;
 HEAP32[$9661 >> 2] = $9658;
 $9662 = $9660 + 4 | 0;
 $9663 = $9662;
 HEAP32[$9663 >> 2] = $9659;
 $9664 = $9658 ^ $9631;
 $9665 = $9659 ^ $9630;
 $9666 = _bitshift64Lshr($9664 | 0, $9665 | 0, 16) | 0;
 $9667 = getTempRet0() | 0;
 $9668 = _bitshift64Shl($9664 | 0, $9665 | 0, 48) | 0;
 $9669 = getTempRet0() | 0;
 $9670 = $9666 | $9668;
 $9671 = $9667 | $9669;
 $9672 = $arrayidx10562;
 $9673 = $9672;
 HEAP32[$9673 >> 2] = $9670;
 $9674 = $9672 + 4 | 0;
 $9675 = $9674;
 HEAP32[$9675 >> 2] = $9671;
 $9676 = _i64Add($9670 | 0, $9671 | 0, $9640 | 0, $9641 | 0) | 0;
 $9677 = getTempRet0() | 0;
 $9678 = _bitshift64Shl($9640 | 0, $9641 | 0, 1) | 0;
 $9679 = getTempRet0() | 0;
 $9680 = $9678 & -2;
 $9681 = $9679 & 1;
 $9682 = ___muldi3($9666 | 0, 0, $9680 | 0, $9681 | 0) | 0;
 $9683 = getTempRet0() | 0;
 $9684 = _i64Add($9676 | 0, $9677 | 0, $9682 | 0, $9683 | 0) | 0;
 $9685 = getTempRet0() | 0;
 $9686 = $arrayidx7056;
 $9687 = $9686;
 HEAP32[$9687 >> 2] = $9684;
 $9688 = $9686 + 4 | 0;
 $9689 = $9688;
 HEAP32[$9689 >> 2] = $9685;
 $9690 = $9684 ^ $9648;
 $9691 = $9685 ^ $9649;
 $9692 = _bitshift64Lshr($9690 | 0, $9691 | 0, 63) | 0;
 $9693 = getTempRet0() | 0;
 $9694 = _bitshift64Shl($9690 | 0, $9691 | 0, 1) | 0;
 $9695 = getTempRet0() | 0;
 $9696 = $9692 | $9694;
 $9697 = $9693 | $9695;
 $9698 = $arrayidx5612;
 $9699 = $9698;
 HEAP32[$9699 >> 2] = $9696;
 $9700 = $9698 + 4 | 0;
 $9701 = $9700;
 HEAP32[$9701 >> 2] = $9697;
 $9702 = _i64Add($9420 | 0, $9421 | 0, $9216 | 0, $9217 | 0) | 0;
 $9703 = getTempRet0() | 0;
 $9704 = _bitshift64Shl($9420 | 0, $9421 | 0, 1) | 0;
 $9705 = getTempRet0() | 0;
 $9706 = $9704 & -2;
 $9707 = $9705 & 1;
 $9708 = ___muldi3($9706 | 0, $9707 | 0, $9216 | 0, 0) | 0;
 $9709 = getTempRet0() | 0;
 $9710 = _i64Add($9702 | 0, $9703 | 0, $9708 | 0, $9709 | 0) | 0;
 $9711 = getTempRet0() | 0;
 $9712 = $9710 ^ $9354;
 $9713 = $9711 ^ $9355;
 $9714 = _i64Add($9713 | 0, $9712 | 0, $9286 | 0, $9287 | 0) | 0;
 $9715 = getTempRet0() | 0;
 $9716 = _bitshift64Shl($9286 | 0, $9287 | 0, 1) | 0;
 $9717 = getTempRet0() | 0;
 $9718 = $9716 & -2;
 $9719 = $9717 & 1;
 $9720 = ___muldi3($9713 | 0, 0, $9718 | 0, $9719 | 0) | 0;
 $9721 = getTempRet0() | 0;
 $9722 = _i64Add($9714 | 0, $9715 | 0, $9720 | 0, $9721 | 0) | 0;
 $9723 = getTempRet0() | 0;
 $9724 = $9722 ^ $9216;
 $9725 = $9723 ^ $9217;
 $9726 = _bitshift64Lshr($9724 | 0, $9725 | 0, 24) | 0;
 $9727 = getTempRet0() | 0;
 $9728 = _bitshift64Shl($9724 | 0, $9725 | 0, 40) | 0;
 $9729 = getTempRet0() | 0;
 $9730 = $9726 | $9728;
 $9731 = $9727 | $9729;
 $9732 = _i64Add($9730 | 0, $9731 | 0, $9710 | 0, $9711 | 0) | 0;
 $9733 = getTempRet0() | 0;
 $9734 = _bitshift64Shl($9710 | 0, $9711 | 0, 1) | 0;
 $9735 = getTempRet0() | 0;
 $9736 = $9734 & -2;
 $9737 = $9735 & 1;
 $9738 = ___muldi3($9726 | 0, 0, $9736 | 0, $9737 | 0) | 0;
 $9739 = getTempRet0() | 0;
 $9740 = _i64Add($9732 | 0, $9733 | 0, $9738 | 0, $9739 | 0) | 0;
 $9741 = getTempRet0() | 0;
 $9742 = $arrayidx2312;
 $9743 = $9742;
 HEAP32[$9743 >> 2] = $9740;
 $9744 = $9742 + 4 | 0;
 $9745 = $9744;
 HEAP32[$9745 >> 2] = $9741;
 $9746 = $9740 ^ $9713;
 $9747 = $9741 ^ $9712;
 $9748 = _bitshift64Lshr($9746 | 0, $9747 | 0, 16) | 0;
 $9749 = getTempRet0() | 0;
 $9750 = _bitshift64Shl($9746 | 0, $9747 | 0, 48) | 0;
 $9751 = getTempRet0() | 0;
 $9752 = $9748 | $9750;
 $9753 = $9749 | $9751;
 $9754 = $arrayidx12006;
 $9755 = $9754;
 HEAP32[$9755 >> 2] = $9752;
 $9756 = $9754 + 4 | 0;
 $9757 = $9756;
 HEAP32[$9757 >> 2] = $9753;
 $9758 = _i64Add($9752 | 0, $9753 | 0, $9722 | 0, $9723 | 0) | 0;
 $9759 = getTempRet0() | 0;
 $9760 = _bitshift64Shl($9722 | 0, $9723 | 0, 1) | 0;
 $9761 = getTempRet0() | 0;
 $9762 = $9760 & -2;
 $9763 = $9761 & 1;
 $9764 = ___muldi3($9748 | 0, 0, $9762 | 0, $9763 | 0) | 0;
 $9765 = getTempRet0() | 0;
 $9766 = _i64Add($9758 | 0, $9759 | 0, $9764 | 0, $9765 | 0) | 0;
 $9767 = getTempRet0() | 0;
 $9768 = $arrayidx7262;
 $9769 = $9768;
 HEAP32[$9769 >> 2] = $9766;
 $9770 = $9768 + 4 | 0;
 $9771 = $9770;
 HEAP32[$9771 >> 2] = $9767;
 $9772 = $9766 ^ $9730;
 $9773 = $9767 ^ $9731;
 $9774 = _bitshift64Lshr($9772 | 0, $9773 | 0, 63) | 0;
 $9775 = getTempRet0() | 0;
 $9776 = _bitshift64Shl($9772 | 0, $9773 | 0, 1) | 0;
 $9777 = getTempRet0() | 0;
 $9778 = $9774 | $9776;
 $9779 = $9775 | $9777;
 $9780 = $arrayidx3756;
 $9781 = $9780;
 HEAP32[$9781 >> 2] = $9778;
 $9782 = $9780 + 4 | 0;
 $9783 = $9782;
 HEAP32[$9783 >> 2] = $9779;
 $9784 = _i64Add($2024 | 0, $2025 | 0, $544 | 0, $545 | 0) | 0;
 $9785 = getTempRet0() | 0;
 $9786 = _bitshift64Shl($540 | 0, $541 | 0, 1) | 0;
 $9787 = getTempRet0() | 0;
 $9788 = $9786 & -2;
 $9789 = $9787 & 1;
 $9790 = ___muldi3($2020 | 0, 0, $9788 | 0, $9789 | 0) | 0;
 $9791 = getTempRet0() | 0;
 $9792 = _i64Add($9784 | 0, $9785 | 0, $9790 | 0, $9791 | 0) | 0;
 $9793 = getTempRet0() | 0;
 $9794 = $4984 ^ $9792;
 $9795 = $4985 ^ $9793;
 $9796 = _i64Add($9795 | 0, $9794 | 0, $3504 | 0, $3505 | 0) | 0;
 $9797 = getTempRet0() | 0;
 $9798 = _bitshift64Shl($3500 | 0, $3501 | 0, 1) | 0;
 $9799 = getTempRet0() | 0;
 $9800 = $9798 & -2;
 $9801 = $9799 & 1;
 $9802 = ___muldi3($9795 | 0, 0, $9800 | 0, $9801 | 0) | 0;
 $9803 = getTempRet0() | 0;
 $9804 = _i64Add($9796 | 0, $9797 | 0, $9802 | 0, $9803 | 0) | 0;
 $9805 = getTempRet0() | 0;
 $9806 = $9804 ^ $2024;
 $9807 = $9805 ^ $2025;
 $9808 = _bitshift64Lshr($9806 | 0, $9807 | 0, 24) | 0;
 $9809 = getTempRet0() | 0;
 $9810 = _bitshift64Shl($9806 | 0, $9807 | 0, 40) | 0;
 $9811 = getTempRet0() | 0;
 $9812 = $9808 | $9810;
 $9813 = $9809 | $9811;
 $9814 = _i64Add($9812 | 0, $9813 | 0, $9792 | 0, $9793 | 0) | 0;
 $9815 = getTempRet0() | 0;
 $9816 = _bitshift64Shl($9792 | 0, $9793 | 0, 1) | 0;
 $9817 = getTempRet0() | 0;
 $9818 = $9816 & -2;
 $9819 = $9817 & 1;
 $9820 = ___muldi3($9808 | 0, 0, $9818 | 0, $9819 | 0) | 0;
 $9821 = getTempRet0() | 0;
 $9822 = _i64Add($9814 | 0, $9815 | 0, $9820 | 0, $9821 | 0) | 0;
 $9823 = getTempRet0() | 0;
 $9824 = $arrayidx24;
 $9825 = $9824;
 HEAP32[$9825 >> 2] = $9822;
 $9826 = $9824 + 4 | 0;
 $9827 = $9826;
 HEAP32[$9827 >> 2] = $9823;
 $9828 = $9822 ^ $9795;
 $9829 = $9823 ^ $9794;
 $9830 = _bitshift64Lshr($9828 | 0, $9829 | 0, 16) | 0;
 $9831 = getTempRet0() | 0;
 $9832 = _bitshift64Shl($9828 | 0, $9829 | 0, 48) | 0;
 $9833 = getTempRet0() | 0;
 $9834 = $9830 | $9832;
 $9835 = $9831 | $9833;
 $9836 = $arrayidx9919;
 $9837 = $9836;
 HEAP32[$9837 >> 2] = $9834;
 $9838 = $9836 + 4 | 0;
 $9839 = $9838;
 HEAP32[$9839 >> 2] = $9835;
 $9840 = _i64Add($9834 | 0, $9835 | 0, $9804 | 0, $9805 | 0) | 0;
 $9841 = getTempRet0() | 0;
 $9842 = _bitshift64Shl($9804 | 0, $9805 | 0, 1) | 0;
 $9843 = getTempRet0() | 0;
 $9844 = $9842 & -2;
 $9845 = $9843 & 1;
 $9846 = ___muldi3($9830 | 0, 0, $9844 | 0, $9845 | 0) | 0;
 $9847 = getTempRet0() | 0;
 $9848 = _i64Add($9840 | 0, $9841 | 0, $9846 | 0, $9847 | 0) | 0;
 $9849 = getTempRet0() | 0;
 $9850 = $arrayidx6619;
 $9851 = $9850;
 HEAP32[$9851 >> 2] = $9848;
 $9852 = $9850 + 4 | 0;
 $9853 = $9852;
 HEAP32[$9853 >> 2] = $9849;
 $9854 = $9848 ^ $9812;
 $9855 = $9849 ^ $9813;
 $9856 = _bitshift64Lshr($9854 | 0, $9855 | 0, 63) | 0;
 $9857 = getTempRet0() | 0;
 $9858 = _bitshift64Shl($9854 | 0, $9855 | 0, 1) | 0;
 $9859 = getTempRet0() | 0;
 $9860 = $9856 | $9858;
 $9861 = $9857 | $9859;
 $9862 = $arrayidx3319;
 $9863 = $9862;
 HEAP32[$9863 >> 2] = $9860;
 $9864 = $9862 + 4 | 0;
 $9865 = $9864;
 HEAP32[$9865 >> 2] = $9861;
 $9866 = _i64Add($2106 | 0, $2107 | 0, $626 | 0, $627 | 0) | 0;
 $9867 = getTempRet0() | 0;
 $9868 = _bitshift64Shl($622 | 0, $623 | 0, 1) | 0;
 $9869 = getTempRet0() | 0;
 $9870 = $9868 & -2;
 $9871 = $9869 & 1;
 $9872 = ___muldi3($2102 | 0, 0, $9870 | 0, $9871 | 0) | 0;
 $9873 = getTempRet0() | 0;
 $9874 = _i64Add($9866 | 0, $9867 | 0, $9872 | 0, $9873 | 0) | 0;
 $9875 = getTempRet0() | 0;
 $9876 = $5066 ^ $9874;
 $9877 = $5067 ^ $9875;
 $9878 = _i64Add($9877 | 0, $9876 | 0, $3586 | 0, $3587 | 0) | 0;
 $9879 = getTempRet0() | 0;
 $9880 = _bitshift64Shl($3582 | 0, $3583 | 0, 1) | 0;
 $9881 = getTempRet0() | 0;
 $9882 = $9880 & -2;
 $9883 = $9881 & 1;
 $9884 = ___muldi3($9877 | 0, 0, $9882 | 0, $9883 | 0) | 0;
 $9885 = getTempRet0() | 0;
 $9886 = _i64Add($9878 | 0, $9879 | 0, $9884 | 0, $9885 | 0) | 0;
 $9887 = getTempRet0() | 0;
 $9888 = $9886 ^ $2106;
 $9889 = $9887 ^ $2107;
 $9890 = _bitshift64Lshr($9888 | 0, $9889 | 0, 24) | 0;
 $9891 = getTempRet0() | 0;
 $9892 = _bitshift64Shl($9888 | 0, $9889 | 0, 40) | 0;
 $9893 = getTempRet0() | 0;
 $9894 = $9890 | $9892;
 $9895 = $9891 | $9893;
 $9896 = _i64Add($9894 | 0, $9895 | 0, $9874 | 0, $9875 | 0) | 0;
 $9897 = getTempRet0() | 0;
 $9898 = _bitshift64Shl($9874 | 0, $9875 | 0, 1) | 0;
 $9899 = getTempRet0() | 0;
 $9900 = $9898 & -2;
 $9901 = $9899 & 1;
 $9902 = ___muldi3($9890 | 0, 0, $9900 | 0, $9901 | 0) | 0;
 $9903 = getTempRet0() | 0;
 $9904 = _i64Add($9896 | 0, $9897 | 0, $9902 | 0, $9903 | 0) | 0;
 $9905 = getTempRet0() | 0;
 $9906 = $arrayidx225;
 $9907 = $9906;
 HEAP32[$9907 >> 2] = $9904;
 $9908 = $9906 + 4 | 0;
 $9909 = $9908;
 HEAP32[$9909 >> 2] = $9905;
 $9910 = $9904 ^ $9877;
 $9911 = $9905 ^ $9876;
 $9912 = _bitshift64Lshr($9910 | 0, $9911 | 0, 16) | 0;
 $9913 = getTempRet0() | 0;
 $9914 = _bitshift64Shl($9910 | 0, $9911 | 0, 48) | 0;
 $9915 = getTempRet0() | 0;
 $9916 = $9912 | $9914;
 $9917 = $9913 | $9915;
 $9918 = $arrayidx10125;
 $9919 = $9918;
 HEAP32[$9919 >> 2] = $9916;
 $9920 = $9918 + 4 | 0;
 $9921 = $9920;
 HEAP32[$9921 >> 2] = $9917;
 $9922 = _i64Add($9916 | 0, $9917 | 0, $9886 | 0, $9887 | 0) | 0;
 $9923 = getTempRet0() | 0;
 $9924 = _bitshift64Shl($9886 | 0, $9887 | 0, 1) | 0;
 $9925 = getTempRet0() | 0;
 $9926 = $9924 & -2;
 $9927 = $9925 & 1;
 $9928 = ___muldi3($9912 | 0, 0, $9926 | 0, $9927 | 0) | 0;
 $9929 = getTempRet0() | 0;
 $9930 = _i64Add($9922 | 0, $9923 | 0, $9928 | 0, $9929 | 0) | 0;
 $9931 = getTempRet0() | 0;
 $9932 = $arrayidx6825;
 $9933 = $9932;
 HEAP32[$9933 >> 2] = $9930;
 $9934 = $9932 + 4 | 0;
 $9935 = $9934;
 HEAP32[$9935 >> 2] = $9931;
 $9936 = $9930 ^ $9894;
 $9937 = $9931 ^ $9895;
 $9938 = _bitshift64Lshr($9936 | 0, $9937 | 0, 63) | 0;
 $9939 = getTempRet0() | 0;
 $9940 = _bitshift64Shl($9936 | 0, $9937 | 0, 1) | 0;
 $9941 = getTempRet0() | 0;
 $9942 = $9938 | $9940;
 $9943 = $9939 | $9941;
 $9944 = $arrayidx3525;
 $9945 = $9944;
 HEAP32[$9945 >> 2] = $9942;
 $9946 = $9944 + 4 | 0;
 $9947 = $9946;
 HEAP32[$9947 >> 2] = $9943;
 $9948 = _i64Add($2764 | 0, $2765 | 0, $1284 | 0, $1285 | 0) | 0;
 $9949 = getTempRet0() | 0;
 $9950 = _bitshift64Shl($1280 | 0, $1281 | 0, 1) | 0;
 $9951 = getTempRet0() | 0;
 $9952 = $9950 & -2;
 $9953 = $9951 & 1;
 $9954 = ___muldi3($2760 | 0, 0, $9952 | 0, $9953 | 0) | 0;
 $9955 = getTempRet0() | 0;
 $9956 = _i64Add($9948 | 0, $9949 | 0, $9954 | 0, $9955 | 0) | 0;
 $9957 = getTempRet0() | 0;
 $9958 = $5724 ^ $9956;
 $9959 = $5725 ^ $9957;
 $9960 = _i64Add($9959 | 0, $9958 | 0, $4244 | 0, $4245 | 0) | 0;
 $9961 = getTempRet0() | 0;
 $9962 = _bitshift64Shl($4240 | 0, $4241 | 0, 1) | 0;
 $9963 = getTempRet0() | 0;
 $9964 = $9962 & -2;
 $9965 = $9963 & 1;
 $9966 = ___muldi3($9959 | 0, 0, $9964 | 0, $9965 | 0) | 0;
 $9967 = getTempRet0() | 0;
 $9968 = _i64Add($9960 | 0, $9961 | 0, $9966 | 0, $9967 | 0) | 0;
 $9969 = getTempRet0() | 0;
 $9970 = $9968 ^ $2764;
 $9971 = $9969 ^ $2765;
 $9972 = _bitshift64Lshr($9970 | 0, $9971 | 0, 24) | 0;
 $9973 = getTempRet0() | 0;
 $9974 = _bitshift64Shl($9970 | 0, $9971 | 0, 40) | 0;
 $9975 = getTempRet0() | 0;
 $9976 = $9972 | $9974;
 $9977 = $9973 | $9975;
 $9978 = _i64Add($9976 | 0, $9977 | 0, $9956 | 0, $9957 | 0) | 0;
 $9979 = getTempRet0() | 0;
 $9980 = _bitshift64Shl($9956 | 0, $9957 | 0, 1) | 0;
 $9981 = getTempRet0() | 0;
 $9982 = $9980 & -2;
 $9983 = $9981 & 1;
 $9984 = ___muldi3($9972 | 0, 0, $9982 | 0, $9983 | 0) | 0;
 $9985 = getTempRet0() | 0;
 $9986 = _i64Add($9978 | 0, $9979 | 0, $9984 | 0, $9985 | 0) | 0;
 $9987 = getTempRet0() | 0;
 $9988 = $arrayidx1669;
 $9989 = $9988;
 HEAP32[$9989 >> 2] = $9986;
 $9990 = $9988 + 4 | 0;
 $9991 = $9990;
 HEAP32[$9991 >> 2] = $9987;
 $9992 = $9986 ^ $9959;
 $9993 = $9987 ^ $9958;
 $9994 = _bitshift64Lshr($9992 | 0, $9993 | 0, 16) | 0;
 $9995 = getTempRet0() | 0;
 $9996 = _bitshift64Shl($9992 | 0, $9993 | 0, 48) | 0;
 $9997 = getTempRet0() | 0;
 $9998 = $9994 | $9996;
 $9999 = $9995 | $9997;
 $10000 = $arrayidx11569;
 $10001 = $10000;
 HEAP32[$10001 >> 2] = $9998;
 $10002 = $10000 + 4 | 0;
 $10003 = $10002;
 HEAP32[$10003 >> 2] = $9999;
 $10004 = _i64Add($9998 | 0, $9999 | 0, $9968 | 0, $9969 | 0) | 0;
 $10005 = getTempRet0() | 0;
 $10006 = _bitshift64Shl($9968 | 0, $9969 | 0, 1) | 0;
 $10007 = getTempRet0() | 0;
 $10008 = $10006 & -2;
 $10009 = $10007 & 1;
 $10010 = ___muldi3($9994 | 0, 0, $10008 | 0, $10009 | 0) | 0;
 $10011 = getTempRet0() | 0;
 $10012 = _i64Add($10004 | 0, $10005 | 0, $10010 | 0, $10011 | 0) | 0;
 $10013 = getTempRet0() | 0;
 $10014 = $10012 ^ $9976;
 $10015 = $10013 ^ $9977;
 $10016 = _bitshift64Lshr($10014 | 0, $10015 | 0, 63) | 0;
 $10017 = getTempRet0() | 0;
 $10018 = _bitshift64Shl($10014 | 0, $10015 | 0, 1) | 0;
 $10019 = getTempRet0() | 0;
 $10020 = $10016 | $10018;
 $10021 = $10017 | $10019;
 $10022 = $arrayidx4969;
 $10023 = $10022;
 HEAP32[$10023 >> 2] = $10020;
 $10024 = $10022 + 4 | 0;
 $10025 = $10024;
 HEAP32[$10025 >> 2] = $10021;
 $10026 = _i64Add($2846 | 0, $2847 | 0, $1366 | 0, $1367 | 0) | 0;
 $10027 = getTempRet0() | 0;
 $10028 = _bitshift64Shl($1362 | 0, $1363 | 0, 1) | 0;
 $10029 = getTempRet0() | 0;
 $10030 = $10028 & -2;
 $10031 = $10029 & 1;
 $10032 = ___muldi3($2842 | 0, 0, $10030 | 0, $10031 | 0) | 0;
 $10033 = getTempRet0() | 0;
 $10034 = _i64Add($10026 | 0, $10027 | 0, $10032 | 0, $10033 | 0) | 0;
 $10035 = getTempRet0() | 0;
 $10036 = $5806 ^ $10034;
 $10037 = $5807 ^ $10035;
 $10038 = _i64Add($10037 | 0, $10036 | 0, $4326 | 0, $4327 | 0) | 0;
 $10039 = getTempRet0() | 0;
 $10040 = _bitshift64Shl($4322 | 0, $4323 | 0, 1) | 0;
 $10041 = getTempRet0() | 0;
 $10042 = $10040 & -2;
 $10043 = $10041 & 1;
 $10044 = ___muldi3($10037 | 0, 0, $10042 | 0, $10043 | 0) | 0;
 $10045 = getTempRet0() | 0;
 $10046 = _i64Add($10038 | 0, $10039 | 0, $10044 | 0, $10045 | 0) | 0;
 $10047 = getTempRet0() | 0;
 $10048 = $10046 ^ $2846;
 $10049 = $10047 ^ $2847;
 $10050 = _bitshift64Lshr($10048 | 0, $10049 | 0, 24) | 0;
 $10051 = getTempRet0() | 0;
 $10052 = _bitshift64Shl($10048 | 0, $10049 | 0, 40) | 0;
 $10053 = getTempRet0() | 0;
 $10054 = $10050 | $10052;
 $10055 = $10051 | $10053;
 $10056 = _i64Add($10054 | 0, $10055 | 0, $10034 | 0, $10035 | 0) | 0;
 $10057 = getTempRet0() | 0;
 $10058 = _bitshift64Shl($10034 | 0, $10035 | 0, 1) | 0;
 $10059 = getTempRet0() | 0;
 $10060 = $10058 & -2;
 $10061 = $10059 & 1;
 $10062 = ___muldi3($10050 | 0, 0, $10060 | 0, $10061 | 0) | 0;
 $10063 = getTempRet0() | 0;
 $10064 = _i64Add($10056 | 0, $10057 | 0, $10062 | 0, $10063 | 0) | 0;
 $10065 = getTempRet0() | 0;
 $10066 = $arrayidx1875;
 $10067 = $10066;
 HEAP32[$10067 >> 2] = $10064;
 $10068 = $10066 + 4 | 0;
 $10069 = $10068;
 HEAP32[$10069 >> 2] = $10065;
 $10070 = $10064 ^ $10037;
 $10071 = $10065 ^ $10036;
 $10072 = _bitshift64Lshr($10070 | 0, $10071 | 0, 16) | 0;
 $10073 = getTempRet0() | 0;
 $10074 = _bitshift64Shl($10070 | 0, $10071 | 0, 48) | 0;
 $10075 = getTempRet0() | 0;
 $10076 = $10072 | $10074;
 $10077 = $10073 | $10075;
 $10078 = _i64Add($10076 | 0, $10077 | 0, $10046 | 0, $10047 | 0) | 0;
 $10079 = getTempRet0() | 0;
 $10080 = _bitshift64Shl($10046 | 0, $10047 | 0, 1) | 0;
 $10081 = getTempRet0() | 0;
 $10082 = $10080 & -2;
 $10083 = $10081 & 1;
 $10084 = ___muldi3($10072 | 0, 0, $10082 | 0, $10083 | 0) | 0;
 $10085 = getTempRet0() | 0;
 $10086 = _i64Add($10078 | 0, $10079 | 0, $10084 | 0, $10085 | 0) | 0;
 $10087 = getTempRet0() | 0;
 $10088 = $10086 ^ $10054;
 $10089 = $10087 ^ $10055;
 $10090 = _bitshift64Lshr($10088 | 0, $10089 | 0, 63) | 0;
 $10091 = getTempRet0() | 0;
 $10092 = _bitshift64Shl($10088 | 0, $10089 | 0, 1) | 0;
 $10093 = getTempRet0() | 0;
 $10094 = $10090 | $10092;
 $10095 = $10091 | $10093;
 $10096 = $arrayidx5175;
 $10097 = $10096;
 HEAP32[$10097 >> 2] = $10094;
 $10098 = $10096 + 4 | 0;
 $10099 = $10098;
 HEAP32[$10099 >> 2] = $10095;
 $10100 = _i64Add($9942 | 0, $9943 | 0, $9822 | 0, $9823 | 0) | 0;
 $10101 = getTempRet0() | 0;
 $10102 = _bitshift64Shl($9822 | 0, $9823 | 0, 1) | 0;
 $10103 = getTempRet0() | 0;
 $10104 = $10102 & -2;
 $10105 = $10103 & 1;
 $10106 = ___muldi3($9942 | 0, 0, $10104 | 0, $10105 | 0) | 0;
 $10107 = getTempRet0() | 0;
 $10108 = _i64Add($10100 | 0, $10101 | 0, $10106 | 0, $10107 | 0) | 0;
 $10109 = getTempRet0() | 0;
 $10110 = $10076 ^ $10108;
 $10111 = $10077 ^ $10109;
 $10112 = _i64Add($10111 | 0, $10110 | 0, $10012 | 0, $10013 | 0) | 0;
 $10113 = getTempRet0() | 0;
 $10114 = _bitshift64Shl($10012 | 0, $10013 | 0, 1) | 0;
 $10115 = getTempRet0() | 0;
 $10116 = $10114 & -2;
 $10117 = $10115 & 1;
 $10118 = ___muldi3($10111 | 0, 0, $10116 | 0, $10117 | 0) | 0;
 $10119 = getTempRet0() | 0;
 $10120 = _i64Add($10112 | 0, $10113 | 0, $10118 | 0, $10119 | 0) | 0;
 $10121 = getTempRet0() | 0;
 $10122 = $10120 ^ $9942;
 $10123 = $10121 ^ $9943;
 $10124 = _bitshift64Lshr($10122 | 0, $10123 | 0, 24) | 0;
 $10125 = getTempRet0() | 0;
 $10126 = _bitshift64Shl($10122 | 0, $10123 | 0, 40) | 0;
 $10127 = getTempRet0() | 0;
 $10128 = $10124 | $10126;
 $10129 = $10125 | $10127;
 $10130 = _i64Add($10128 | 0, $10129 | 0, $10108 | 0, $10109 | 0) | 0;
 $10131 = getTempRet0() | 0;
 $10132 = _bitshift64Shl($10108 | 0, $10109 | 0, 1) | 0;
 $10133 = getTempRet0() | 0;
 $10134 = $10132 & -2;
 $10135 = $10133 & 1;
 $10136 = ___muldi3($10124 | 0, 0, $10134 | 0, $10135 | 0) | 0;
 $10137 = getTempRet0() | 0;
 $10138 = _i64Add($10130 | 0, $10131 | 0, $10136 | 0, $10137 | 0) | 0;
 $10139 = getTempRet0() | 0;
 $10140 = $arrayidx24;
 $10141 = $10140;
 HEAP32[$10141 >> 2] = $10138;
 $10142 = $10140 + 4 | 0;
 $10143 = $10142;
 HEAP32[$10143 >> 2] = $10139;
 $10144 = $10138 ^ $10111;
 $10145 = $10139 ^ $10110;
 $10146 = _bitshift64Lshr($10144 | 0, $10145 | 0, 16) | 0;
 $10147 = getTempRet0() | 0;
 $10148 = _bitshift64Shl($10144 | 0, $10145 | 0, 48) | 0;
 $10149 = getTempRet0() | 0;
 $10150 = $10146 | $10148;
 $10151 = $10147 | $10149;
 $10152 = $arrayidx11775;
 $10153 = $10152;
 HEAP32[$10153 >> 2] = $10150;
 $10154 = $10152 + 4 | 0;
 $10155 = $10154;
 HEAP32[$10155 >> 2] = $10151;
 $10156 = _i64Add($10150 | 0, $10151 | 0, $10120 | 0, $10121 | 0) | 0;
 $10157 = getTempRet0() | 0;
 $10158 = _bitshift64Shl($10120 | 0, $10121 | 0, 1) | 0;
 $10159 = getTempRet0() | 0;
 $10160 = $10158 & -2;
 $10161 = $10159 & 1;
 $10162 = ___muldi3($10146 | 0, 0, $10160 | 0, $10161 | 0) | 0;
 $10163 = getTempRet0() | 0;
 $10164 = _i64Add($10156 | 0, $10157 | 0, $10162 | 0, $10163 | 0) | 0;
 $10165 = getTempRet0() | 0;
 $10166 = $arrayidx8269;
 $10167 = $10166;
 HEAP32[$10167 >> 2] = $10164;
 $10168 = $10166 + 4 | 0;
 $10169 = $10168;
 HEAP32[$10169 >> 2] = $10165;
 $10170 = $10164 ^ $10128;
 $10171 = $10165 ^ $10129;
 $10172 = _bitshift64Lshr($10170 | 0, $10171 | 0, 63) | 0;
 $10173 = getTempRet0() | 0;
 $10174 = _bitshift64Shl($10170 | 0, $10171 | 0, 1) | 0;
 $10175 = getTempRet0() | 0;
 $10176 = $10172 | $10174;
 $10177 = $10173 | $10175;
 $10178 = $arrayidx3525;
 $10179 = $10178;
 HEAP32[$10179 >> 2] = $10176;
 $10180 = $10178 + 4 | 0;
 $10181 = $10180;
 HEAP32[$10181 >> 2] = $10177;
 $10182 = _i64Add($10020 | 0, $10021 | 0, $9904 | 0, $9905 | 0) | 0;
 $10183 = getTempRet0() | 0;
 $10184 = _bitshift64Shl($9904 | 0, $9905 | 0, 1) | 0;
 $10185 = getTempRet0() | 0;
 $10186 = $10184 & -2;
 $10187 = $10185 & 1;
 $10188 = ___muldi3($10020 | 0, 0, $10186 | 0, $10187 | 0) | 0;
 $10189 = getTempRet0() | 0;
 $10190 = _i64Add($10182 | 0, $10183 | 0, $10188 | 0, $10189 | 0) | 0;
 $10191 = getTempRet0() | 0;
 $10192 = $10190 ^ $9834;
 $10193 = $10191 ^ $9835;
 $10194 = _i64Add($10193 | 0, $10192 | 0, $10086 | 0, $10087 | 0) | 0;
 $10195 = getTempRet0() | 0;
 $10196 = _bitshift64Shl($10086 | 0, $10087 | 0, 1) | 0;
 $10197 = getTempRet0() | 0;
 $10198 = $10196 & -2;
 $10199 = $10197 & 1;
 $10200 = ___muldi3($10198 | 0, $10199 | 0, $10193 | 0, 0) | 0;
 $10201 = getTempRet0() | 0;
 $10202 = _i64Add($10194 | 0, $10195 | 0, $10200 | 0, $10201 | 0) | 0;
 $10203 = getTempRet0() | 0;
 $10204 = $10202 ^ $10020;
 $10205 = $10203 ^ $10021;
 $10206 = _bitshift64Lshr($10204 | 0, $10205 | 0, 24) | 0;
 $10207 = getTempRet0() | 0;
 $10208 = _bitshift64Shl($10204 | 0, $10205 | 0, 40) | 0;
 $10209 = getTempRet0() | 0;
 $10210 = $10206 | $10208;
 $10211 = $10207 | $10209;
 $10212 = _i64Add($10210 | 0, $10211 | 0, $10190 | 0, $10191 | 0) | 0;
 $10213 = getTempRet0() | 0;
 $10214 = _bitshift64Shl($10190 | 0, $10191 | 0, 1) | 0;
 $10215 = getTempRet0() | 0;
 $10216 = $10214 & -2;
 $10217 = $10215 & 1;
 $10218 = ___muldi3($10206 | 0, 0, $10216 | 0, $10217 | 0) | 0;
 $10219 = getTempRet0() | 0;
 $10220 = _i64Add($10212 | 0, $10213 | 0, $10218 | 0, $10219 | 0) | 0;
 $10221 = getTempRet0() | 0;
 $10222 = $arrayidx225;
 $10223 = $10222;
 HEAP32[$10223 >> 2] = $10220;
 $10224 = $10222 + 4 | 0;
 $10225 = $10224;
 HEAP32[$10225 >> 2] = $10221;
 $10226 = $10220 ^ $10193;
 $10227 = $10221 ^ $10192;
 $10228 = _bitshift64Lshr($10226 | 0, $10227 | 0, 16) | 0;
 $10229 = getTempRet0() | 0;
 $10230 = _bitshift64Shl($10226 | 0, $10227 | 0, 48) | 0;
 $10231 = getTempRet0() | 0;
 $10232 = $10228 | $10230;
 $10233 = $10229 | $10231;
 $10234 = $arrayidx9919;
 $10235 = $10234;
 HEAP32[$10235 >> 2] = $10232;
 $10236 = $10234 + 4 | 0;
 $10237 = $10236;
 HEAP32[$10237 >> 2] = $10233;
 $10238 = _i64Add($10232 | 0, $10233 | 0, $10202 | 0, $10203 | 0) | 0;
 $10239 = getTempRet0() | 0;
 $10240 = _bitshift64Shl($10202 | 0, $10203 | 0, 1) | 0;
 $10241 = getTempRet0() | 0;
 $10242 = $10240 & -2;
 $10243 = $10241 & 1;
 $10244 = ___muldi3($10228 | 0, 0, $10242 | 0, $10243 | 0) | 0;
 $10245 = getTempRet0() | 0;
 $10246 = _i64Add($10238 | 0, $10239 | 0, $10244 | 0, $10245 | 0) | 0;
 $10247 = getTempRet0() | 0;
 $10248 = $arrayidx8475;
 $10249 = $10248;
 HEAP32[$10249 >> 2] = $10246;
 $10250 = $10248 + 4 | 0;
 $10251 = $10250;
 HEAP32[$10251 >> 2] = $10247;
 $10252 = $10246 ^ $10210;
 $10253 = $10247 ^ $10211;
 $10254 = _bitshift64Lshr($10252 | 0, $10253 | 0, 63) | 0;
 $10255 = getTempRet0() | 0;
 $10256 = _bitshift64Shl($10252 | 0, $10253 | 0, 1) | 0;
 $10257 = getTempRet0() | 0;
 $10258 = $10254 | $10256;
 $10259 = $10255 | $10257;
 $10260 = $arrayidx4969;
 $10261 = $10260;
 HEAP32[$10261 >> 2] = $10258;
 $10262 = $10260 + 4 | 0;
 $10263 = $10262;
 HEAP32[$10263 >> 2] = $10259;
 $10264 = _i64Add($10094 | 0, $10095 | 0, $9986 | 0, $9987 | 0) | 0;
 $10265 = getTempRet0() | 0;
 $10266 = _bitshift64Shl($9986 | 0, $9987 | 0, 1) | 0;
 $10267 = getTempRet0() | 0;
 $10268 = $10266 & -2;
 $10269 = $10267 & 1;
 $10270 = ___muldi3($10094 | 0, 0, $10268 | 0, $10269 | 0) | 0;
 $10271 = getTempRet0() | 0;
 $10272 = _i64Add($10264 | 0, $10265 | 0, $10270 | 0, $10271 | 0) | 0;
 $10273 = getTempRet0() | 0;
 $10274 = $10272 ^ $9916;
 $10275 = $10273 ^ $9917;
 $10276 = _i64Add($10275 | 0, $10274 | 0, $9848 | 0, $9849 | 0) | 0;
 $10277 = getTempRet0() | 0;
 $10278 = _bitshift64Shl($9848 | 0, $9849 | 0, 1) | 0;
 $10279 = getTempRet0() | 0;
 $10280 = $10278 & -2;
 $10281 = $10279 & 1;
 $10282 = ___muldi3($10275 | 0, 0, $10280 | 0, $10281 | 0) | 0;
 $10283 = getTempRet0() | 0;
 $10284 = _i64Add($10276 | 0, $10277 | 0, $10282 | 0, $10283 | 0) | 0;
 $10285 = getTempRet0() | 0;
 $10286 = $10284 ^ $10094;
 $10287 = $10285 ^ $10095;
 $10288 = _bitshift64Lshr($10286 | 0, $10287 | 0, 24) | 0;
 $10289 = getTempRet0() | 0;
 $10290 = _bitshift64Shl($10286 | 0, $10287 | 0, 40) | 0;
 $10291 = getTempRet0() | 0;
 $10292 = $10288 | $10290;
 $10293 = $10289 | $10291;
 $10294 = _i64Add($10292 | 0, $10293 | 0, $10272 | 0, $10273 | 0) | 0;
 $10295 = getTempRet0() | 0;
 $10296 = _bitshift64Shl($10272 | 0, $10273 | 0, 1) | 0;
 $10297 = getTempRet0() | 0;
 $10298 = $10296 & -2;
 $10299 = $10297 & 1;
 $10300 = ___muldi3($10288 | 0, 0, $10298 | 0, $10299 | 0) | 0;
 $10301 = getTempRet0() | 0;
 $10302 = _i64Add($10294 | 0, $10295 | 0, $10300 | 0, $10301 | 0) | 0;
 $10303 = getTempRet0() | 0;
 $10304 = $arrayidx1669;
 $10305 = $10304;
 HEAP32[$10305 >> 2] = $10302;
 $10306 = $10304 + 4 | 0;
 $10307 = $10306;
 HEAP32[$10307 >> 2] = $10303;
 $10308 = $10302 ^ $10275;
 $10309 = $10303 ^ $10274;
 $10310 = _bitshift64Lshr($10308 | 0, $10309 | 0, 16) | 0;
 $10311 = getTempRet0() | 0;
 $10312 = _bitshift64Shl($10308 | 0, $10309 | 0, 48) | 0;
 $10313 = getTempRet0() | 0;
 $10314 = $10310 | $10312;
 $10315 = $10311 | $10313;
 $10316 = $arrayidx10125;
 $10317 = $10316;
 HEAP32[$10317 >> 2] = $10314;
 $10318 = $10316 + 4 | 0;
 $10319 = $10318;
 HEAP32[$10319 >> 2] = $10315;
 $10320 = _i64Add($10314 | 0, $10315 | 0, $10284 | 0, $10285 | 0) | 0;
 $10321 = getTempRet0() | 0;
 $10322 = _bitshift64Shl($10284 | 0, $10285 | 0, 1) | 0;
 $10323 = getTempRet0() | 0;
 $10324 = $10322 & -2;
 $10325 = $10323 & 1;
 $10326 = ___muldi3($10310 | 0, 0, $10324 | 0, $10325 | 0) | 0;
 $10327 = getTempRet0() | 0;
 $10328 = _i64Add($10320 | 0, $10321 | 0, $10326 | 0, $10327 | 0) | 0;
 $10329 = getTempRet0() | 0;
 $10330 = $arrayidx6619;
 $10331 = $10330;
 HEAP32[$10331 >> 2] = $10328;
 $10332 = $10330 + 4 | 0;
 $10333 = $10332;
 HEAP32[$10333 >> 2] = $10329;
 $10334 = $10328 ^ $10292;
 $10335 = $10329 ^ $10293;
 $10336 = _bitshift64Lshr($10334 | 0, $10335 | 0, 63) | 0;
 $10337 = getTempRet0() | 0;
 $10338 = _bitshift64Shl($10334 | 0, $10335 | 0, 1) | 0;
 $10339 = getTempRet0() | 0;
 $10340 = $10336 | $10338;
 $10341 = $10337 | $10339;
 $10342 = $arrayidx5175;
 $10343 = $10342;
 HEAP32[$10343 >> 2] = $10340;
 $10344 = $10342 + 4 | 0;
 $10345 = $10344;
 HEAP32[$10345 >> 2] = $10341;
 $10346 = _i64Add($10064 | 0, $10065 | 0, $9860 | 0, $9861 | 0) | 0;
 $10347 = getTempRet0() | 0;
 $10348 = _bitshift64Shl($10064 | 0, $10065 | 0, 1) | 0;
 $10349 = getTempRet0() | 0;
 $10350 = $10348 & -2;
 $10351 = $10349 & 1;
 $10352 = ___muldi3($10350 | 0, $10351 | 0, $9860 | 0, 0) | 0;
 $10353 = getTempRet0() | 0;
 $10354 = _i64Add($10346 | 0, $10347 | 0, $10352 | 0, $10353 | 0) | 0;
 $10355 = getTempRet0() | 0;
 $10356 = $10354 ^ $9998;
 $10357 = $10355 ^ $9999;
 $10358 = _i64Add($10357 | 0, $10356 | 0, $9930 | 0, $9931 | 0) | 0;
 $10359 = getTempRet0() | 0;
 $10360 = _bitshift64Shl($9930 | 0, $9931 | 0, 1) | 0;
 $10361 = getTempRet0() | 0;
 $10362 = $10360 & -2;
 $10363 = $10361 & 1;
 $10364 = ___muldi3($10357 | 0, 0, $10362 | 0, $10363 | 0) | 0;
 $10365 = getTempRet0() | 0;
 $10366 = _i64Add($10358 | 0, $10359 | 0, $10364 | 0, $10365 | 0) | 0;
 $10367 = getTempRet0() | 0;
 $10368 = $10366 ^ $9860;
 $10369 = $10367 ^ $9861;
 $10370 = _bitshift64Lshr($10368 | 0, $10369 | 0, 24) | 0;
 $10371 = getTempRet0() | 0;
 $10372 = _bitshift64Shl($10368 | 0, $10369 | 0, 40) | 0;
 $10373 = getTempRet0() | 0;
 $10374 = $10370 | $10372;
 $10375 = $10371 | $10373;
 $10376 = _i64Add($10374 | 0, $10375 | 0, $10354 | 0, $10355 | 0) | 0;
 $10377 = getTempRet0() | 0;
 $10378 = _bitshift64Shl($10354 | 0, $10355 | 0, 1) | 0;
 $10379 = getTempRet0() | 0;
 $10380 = $10378 & -2;
 $10381 = $10379 & 1;
 $10382 = ___muldi3($10370 | 0, 0, $10380 | 0, $10381 | 0) | 0;
 $10383 = getTempRet0() | 0;
 $10384 = _i64Add($10376 | 0, $10377 | 0, $10382 | 0, $10383 | 0) | 0;
 $10385 = getTempRet0() | 0;
 $10386 = $arrayidx1875;
 $10387 = $10386;
 HEAP32[$10387 >> 2] = $10384;
 $10388 = $10386 + 4 | 0;
 $10389 = $10388;
 HEAP32[$10389 >> 2] = $10385;
 $10390 = $10384 ^ $10357;
 $10391 = $10385 ^ $10356;
 $10392 = _bitshift64Lshr($10390 | 0, $10391 | 0, 16) | 0;
 $10393 = getTempRet0() | 0;
 $10394 = _bitshift64Shl($10390 | 0, $10391 | 0, 48) | 0;
 $10395 = getTempRet0() | 0;
 $10396 = $10392 | $10394;
 $10397 = $10393 | $10395;
 $10398 = $arrayidx11569;
 $10399 = $10398;
 HEAP32[$10399 >> 2] = $10396;
 $10400 = $10398 + 4 | 0;
 $10401 = $10400;
 HEAP32[$10401 >> 2] = $10397;
 $10402 = _i64Add($10396 | 0, $10397 | 0, $10366 | 0, $10367 | 0) | 0;
 $10403 = getTempRet0() | 0;
 $10404 = _bitshift64Shl($10366 | 0, $10367 | 0, 1) | 0;
 $10405 = getTempRet0() | 0;
 $10406 = $10404 & -2;
 $10407 = $10405 & 1;
 $10408 = ___muldi3($10392 | 0, 0, $10406 | 0, $10407 | 0) | 0;
 $10409 = getTempRet0() | 0;
 $10410 = _i64Add($10402 | 0, $10403 | 0, $10408 | 0, $10409 | 0) | 0;
 $10411 = getTempRet0() | 0;
 $10412 = $arrayidx6825;
 $10413 = $10412;
 HEAP32[$10413 >> 2] = $10410;
 $10414 = $10412 + 4 | 0;
 $10415 = $10414;
 HEAP32[$10415 >> 2] = $10411;
 $10416 = $10410 ^ $10374;
 $10417 = $10411 ^ $10375;
 $10418 = _bitshift64Lshr($10416 | 0, $10417 | 0, 63) | 0;
 $10419 = getTempRet0() | 0;
 $10420 = _bitshift64Shl($10416 | 0, $10417 | 0, 1) | 0;
 $10421 = getTempRet0() | 0;
 $10422 = $10418 | $10420;
 $10423 = $10419 | $10421;
 $10424 = $arrayidx3319;
 $10425 = $10424;
 HEAP32[$10425 >> 2] = $10422;
 $10426 = $10424 + 4 | 0;
 $10427 = $10426;
 HEAP32[$10427 >> 2] = $10423;
 $10428 = _i64Add($2188 | 0, $2189 | 0, $708 | 0, $709 | 0) | 0;
 $10429 = getTempRet0() | 0;
 $10430 = _bitshift64Shl($704 | 0, $705 | 0, 1) | 0;
 $10431 = getTempRet0() | 0;
 $10432 = $10430 & -2;
 $10433 = $10431 & 1;
 $10434 = ___muldi3($2184 | 0, 0, $10432 | 0, $10433 | 0) | 0;
 $10435 = getTempRet0() | 0;
 $10436 = _i64Add($10428 | 0, $10429 | 0, $10434 | 0, $10435 | 0) | 0;
 $10437 = getTempRet0() | 0;
 $10438 = $5148 ^ $10436;
 $10439 = $5149 ^ $10437;
 $10440 = _i64Add($10439 | 0, $10438 | 0, $3668 | 0, $3669 | 0) | 0;
 $10441 = getTempRet0() | 0;
 $10442 = _bitshift64Shl($3664 | 0, $3665 | 0, 1) | 0;
 $10443 = getTempRet0() | 0;
 $10444 = $10442 & -2;
 $10445 = $10443 & 1;
 $10446 = ___muldi3($10439 | 0, 0, $10444 | 0, $10445 | 0) | 0;
 $10447 = getTempRet0() | 0;
 $10448 = _i64Add($10440 | 0, $10441 | 0, $10446 | 0, $10447 | 0) | 0;
 $10449 = getTempRet0() | 0;
 $10450 = $10448 ^ $2188;
 $10451 = $10449 ^ $2189;
 $10452 = _bitshift64Lshr($10450 | 0, $10451 | 0, 24) | 0;
 $10453 = getTempRet0() | 0;
 $10454 = _bitshift64Shl($10450 | 0, $10451 | 0, 40) | 0;
 $10455 = getTempRet0() | 0;
 $10456 = $10452 | $10454;
 $10457 = $10453 | $10455;
 $10458 = _i64Add($10456 | 0, $10457 | 0, $10436 | 0, $10437 | 0) | 0;
 $10459 = getTempRet0() | 0;
 $10460 = _bitshift64Shl($10436 | 0, $10437 | 0, 1) | 0;
 $10461 = getTempRet0() | 0;
 $10462 = $10460 & -2;
 $10463 = $10461 & 1;
 $10464 = ___muldi3($10452 | 0, 0, $10462 | 0, $10463 | 0) | 0;
 $10465 = getTempRet0() | 0;
 $10466 = _i64Add($10458 | 0, $10459 | 0, $10464 | 0, $10465 | 0) | 0;
 $10467 = getTempRet0() | 0;
 $10468 = $arrayidx431;
 $10469 = $10468;
 HEAP32[$10469 >> 2] = $10466;
 $10470 = $10468 + 4 | 0;
 $10471 = $10470;
 HEAP32[$10471 >> 2] = $10467;
 $10472 = $10466 ^ $10439;
 $10473 = $10467 ^ $10438;
 $10474 = _bitshift64Lshr($10472 | 0, $10473 | 0, 16) | 0;
 $10475 = getTempRet0() | 0;
 $10476 = _bitshift64Shl($10472 | 0, $10473 | 0, 48) | 0;
 $10477 = getTempRet0() | 0;
 $10478 = $10474 | $10476;
 $10479 = $10475 | $10477;
 $10480 = $arrayidx10331;
 $10481 = $10480;
 HEAP32[$10481 >> 2] = $10478;
 $10482 = $10480 + 4 | 0;
 $10483 = $10482;
 HEAP32[$10483 >> 2] = $10479;
 $10484 = _i64Add($10478 | 0, $10479 | 0, $10448 | 0, $10449 | 0) | 0;
 $10485 = getTempRet0() | 0;
 $10486 = _bitshift64Shl($10448 | 0, $10449 | 0, 1) | 0;
 $10487 = getTempRet0() | 0;
 $10488 = $10486 & -2;
 $10489 = $10487 & 1;
 $10490 = ___muldi3($10474 | 0, 0, $10488 | 0, $10489 | 0) | 0;
 $10491 = getTempRet0() | 0;
 $10492 = _i64Add($10484 | 0, $10485 | 0, $10490 | 0, $10491 | 0) | 0;
 $10493 = getTempRet0() | 0;
 $10494 = $arrayidx7031;
 $10495 = $10494;
 HEAP32[$10495 >> 2] = $10492;
 $10496 = $10494 + 4 | 0;
 $10497 = $10496;
 HEAP32[$10497 >> 2] = $10493;
 $10498 = $10492 ^ $10456;
 $10499 = $10493 ^ $10457;
 $10500 = _bitshift64Lshr($10498 | 0, $10499 | 0, 63) | 0;
 $10501 = getTempRet0() | 0;
 $10502 = _bitshift64Shl($10498 | 0, $10499 | 0, 1) | 0;
 $10503 = getTempRet0() | 0;
 $10504 = $10500 | $10502;
 $10505 = $10501 | $10503;
 $10506 = $arrayidx3731;
 $10507 = $10506;
 HEAP32[$10507 >> 2] = $10504;
 $10508 = $10506 + 4 | 0;
 $10509 = $10508;
 HEAP32[$10509 >> 2] = $10505;
 $10510 = _i64Add($1942 | 0, $1943 | 0, $462 | 0, $463 | 0) | 0;
 $10511 = getTempRet0() | 0;
 $10512 = _bitshift64Shl($458 | 0, $459 | 0, 1) | 0;
 $10513 = getTempRet0() | 0;
 $10514 = $10512 & -2;
 $10515 = $10513 & 1;
 $10516 = ___muldi3($1938 | 0, 0, $10514 | 0, $10515 | 0) | 0;
 $10517 = getTempRet0() | 0;
 $10518 = _i64Add($10510 | 0, $10511 | 0, $10516 | 0, $10517 | 0) | 0;
 $10519 = getTempRet0() | 0;
 $10520 = $4902 ^ $10518;
 $10521 = $4903 ^ $10519;
 $10522 = _i64Add($10521 | 0, $10520 | 0, $3422 | 0, $3423 | 0) | 0;
 $10523 = getTempRet0() | 0;
 $10524 = _bitshift64Shl($3418 | 0, $3419 | 0, 1) | 0;
 $10525 = getTempRet0() | 0;
 $10526 = $10524 & -2;
 $10527 = $10525 & 1;
 $10528 = ___muldi3($10521 | 0, 0, $10526 | 0, $10527 | 0) | 0;
 $10529 = getTempRet0() | 0;
 $10530 = _i64Add($10522 | 0, $10523 | 0, $10528 | 0, $10529 | 0) | 0;
 $10531 = getTempRet0() | 0;
 $10532 = $10530 ^ $1942;
 $10533 = $10531 ^ $1943;
 $10534 = _bitshift64Lshr($10532 | 0, $10533 | 0, 24) | 0;
 $10535 = getTempRet0() | 0;
 $10536 = _bitshift64Shl($10532 | 0, $10533 | 0, 40) | 0;
 $10537 = getTempRet0() | 0;
 $10538 = $10534 | $10536;
 $10539 = $10535 | $10537;
 $10540 = _i64Add($10538 | 0, $10539 | 0, $10518 | 0, $10519 | 0) | 0;
 $10541 = getTempRet0() | 0;
 $10542 = _bitshift64Shl($10518 | 0, $10519 | 0, 1) | 0;
 $10543 = getTempRet0() | 0;
 $10544 = $10542 & -2;
 $10545 = $10543 & 1;
 $10546 = ___muldi3($10534 | 0, 0, $10544 | 0, $10545 | 0) | 0;
 $10547 = getTempRet0() | 0;
 $10548 = _i64Add($10540 | 0, $10541 | 0, $10546 | 0, $10547 | 0) | 0;
 $10549 = getTempRet0() | 0;
 $10550 = $arrayidx637;
 $10551 = $10550;
 HEAP32[$10551 >> 2] = $10548;
 $10552 = $10550 + 4 | 0;
 $10553 = $10552;
 HEAP32[$10553 >> 2] = $10549;
 $10554 = $10548 ^ $10521;
 $10555 = $10549 ^ $10520;
 $10556 = _bitshift64Lshr($10554 | 0, $10555 | 0, 16) | 0;
 $10557 = getTempRet0() | 0;
 $10558 = _bitshift64Shl($10554 | 0, $10555 | 0, 48) | 0;
 $10559 = getTempRet0() | 0;
 $10560 = $10556 | $10558;
 $10561 = $10557 | $10559;
 $10562 = $arrayidx10537;
 $10563 = $10562;
 HEAP32[$10563 >> 2] = $10560;
 $10564 = $10562 + 4 | 0;
 $10565 = $10564;
 HEAP32[$10565 >> 2] = $10561;
 $10566 = _i64Add($10560 | 0, $10561 | 0, $10530 | 0, $10531 | 0) | 0;
 $10567 = getTempRet0() | 0;
 $10568 = _bitshift64Shl($10530 | 0, $10531 | 0, 1) | 0;
 $10569 = getTempRet0() | 0;
 $10570 = $10568 & -2;
 $10571 = $10569 & 1;
 $10572 = ___muldi3($10556 | 0, 0, $10570 | 0, $10571 | 0) | 0;
 $10573 = getTempRet0() | 0;
 $10574 = _i64Add($10566 | 0, $10567 | 0, $10572 | 0, $10573 | 0) | 0;
 $10575 = getTempRet0() | 0;
 $10576 = $arrayidx7237;
 $10577 = $10576;
 HEAP32[$10577 >> 2] = $10574;
 $10578 = $10576 + 4 | 0;
 $10579 = $10578;
 HEAP32[$10579 >> 2] = $10575;
 $10580 = $10574 ^ $10538;
 $10581 = $10575 ^ $10539;
 $10582 = _bitshift64Lshr($10580 | 0, $10581 | 0, 63) | 0;
 $10583 = getTempRet0() | 0;
 $10584 = _bitshift64Shl($10580 | 0, $10581 | 0, 1) | 0;
 $10585 = getTempRet0() | 0;
 $10586 = $10582 | $10584;
 $10587 = $10583 | $10585;
 $10588 = $arrayidx3937;
 $10589 = $10588;
 HEAP32[$10589 >> 2] = $10586;
 $10590 = $10588 + 4 | 0;
 $10591 = $10590;
 HEAP32[$10591 >> 2] = $10587;
 $10592 = _i64Add($2928 | 0, $2929 | 0, $1448 | 0, $1449 | 0) | 0;
 $10593 = getTempRet0() | 0;
 $10594 = _bitshift64Shl($1444 | 0, $1445 | 0, 1) | 0;
 $10595 = getTempRet0() | 0;
 $10596 = $10594 & -2;
 $10597 = $10595 & 1;
 $10598 = ___muldi3($2924 | 0, 0, $10596 | 0, $10597 | 0) | 0;
 $10599 = getTempRet0() | 0;
 $10600 = _i64Add($10592 | 0, $10593 | 0, $10598 | 0, $10599 | 0) | 0;
 $10601 = getTempRet0() | 0;
 $10602 = $5888 ^ $10600;
 $10603 = $5889 ^ $10601;
 $10604 = _i64Add($10603 | 0, $10602 | 0, $4408 | 0, $4409 | 0) | 0;
 $10605 = getTempRet0() | 0;
 $10606 = _bitshift64Shl($4404 | 0, $4405 | 0, 1) | 0;
 $10607 = getTempRet0() | 0;
 $10608 = $10606 & -2;
 $10609 = $10607 & 1;
 $10610 = ___muldi3($10603 | 0, 0, $10608 | 0, $10609 | 0) | 0;
 $10611 = getTempRet0() | 0;
 $10612 = _i64Add($10604 | 0, $10605 | 0, $10610 | 0, $10611 | 0) | 0;
 $10613 = getTempRet0() | 0;
 $10614 = $10612 ^ $2928;
 $10615 = $10613 ^ $2929;
 $10616 = _bitshift64Lshr($10614 | 0, $10615 | 0, 24) | 0;
 $10617 = getTempRet0() | 0;
 $10618 = _bitshift64Shl($10614 | 0, $10615 | 0, 40) | 0;
 $10619 = getTempRet0() | 0;
 $10620 = $10616 | $10618;
 $10621 = $10617 | $10619;
 $10622 = _i64Add($10620 | 0, $10621 | 0, $10600 | 0, $10601 | 0) | 0;
 $10623 = getTempRet0() | 0;
 $10624 = _bitshift64Shl($10600 | 0, $10601 | 0, 1) | 0;
 $10625 = getTempRet0() | 0;
 $10626 = $10624 & -2;
 $10627 = $10625 & 1;
 $10628 = ___muldi3($10616 | 0, 0, $10626 | 0, $10627 | 0) | 0;
 $10629 = getTempRet0() | 0;
 $10630 = _i64Add($10622 | 0, $10623 | 0, $10628 | 0, $10629 | 0) | 0;
 $10631 = getTempRet0() | 0;
 $10632 = $arrayidx2081;
 $10633 = $10632;
 HEAP32[$10633 >> 2] = $10630;
 $10634 = $10632 + 4 | 0;
 $10635 = $10634;
 HEAP32[$10635 >> 2] = $10631;
 $10636 = $10630 ^ $10603;
 $10637 = $10631 ^ $10602;
 $10638 = _bitshift64Lshr($10636 | 0, $10637 | 0, 16) | 0;
 $10639 = getTempRet0() | 0;
 $10640 = _bitshift64Shl($10636 | 0, $10637 | 0, 48) | 0;
 $10641 = getTempRet0() | 0;
 $10642 = $10638 | $10640;
 $10643 = $10639 | $10641;
 $10644 = $arrayidx11981;
 $10645 = $10644;
 HEAP32[$10645 >> 2] = $10642;
 $10646 = $10644 + 4 | 0;
 $10647 = $10646;
 HEAP32[$10647 >> 2] = $10643;
 $10648 = _i64Add($10642 | 0, $10643 | 0, $10612 | 0, $10613 | 0) | 0;
 $10649 = getTempRet0() | 0;
 $10650 = _bitshift64Shl($10612 | 0, $10613 | 0, 1) | 0;
 $10651 = getTempRet0() | 0;
 $10652 = $10650 & -2;
 $10653 = $10651 & 1;
 $10654 = ___muldi3($10638 | 0, 0, $10652 | 0, $10653 | 0) | 0;
 $10655 = getTempRet0() | 0;
 $10656 = _i64Add($10648 | 0, $10649 | 0, $10654 | 0, $10655 | 0) | 0;
 $10657 = getTempRet0() | 0;
 $10658 = $10656 ^ $10620;
 $10659 = $10657 ^ $10621;
 $10660 = _bitshift64Lshr($10658 | 0, $10659 | 0, 63) | 0;
 $10661 = getTempRet0() | 0;
 $10662 = _bitshift64Shl($10658 | 0, $10659 | 0, 1) | 0;
 $10663 = getTempRet0() | 0;
 $10664 = $10660 | $10662;
 $10665 = $10661 | $10663;
 $10666 = $arrayidx5381;
 $10667 = $10666;
 HEAP32[$10667 >> 2] = $10664;
 $10668 = $10666 + 4 | 0;
 $10669 = $10668;
 HEAP32[$10669 >> 2] = $10665;
 $10670 = _i64Add($2682 | 0, $2683 | 0, $1202 | 0, $1203 | 0) | 0;
 $10671 = getTempRet0() | 0;
 $10672 = _bitshift64Shl($1198 | 0, $1199 | 0, 1) | 0;
 $10673 = getTempRet0() | 0;
 $10674 = $10672 & -2;
 $10675 = $10673 & 1;
 $10676 = ___muldi3($2678 | 0, 0, $10674 | 0, $10675 | 0) | 0;
 $10677 = getTempRet0() | 0;
 $10678 = _i64Add($10670 | 0, $10671 | 0, $10676 | 0, $10677 | 0) | 0;
 $10679 = getTempRet0() | 0;
 $10680 = $5642 ^ $10678;
 $10681 = $5643 ^ $10679;
 $10682 = _i64Add($10681 | 0, $10680 | 0, $4162 | 0, $4163 | 0) | 0;
 $10683 = getTempRet0() | 0;
 $10684 = _bitshift64Shl($4158 | 0, $4159 | 0, 1) | 0;
 $10685 = getTempRet0() | 0;
 $10686 = $10684 & -2;
 $10687 = $10685 & 1;
 $10688 = ___muldi3($10681 | 0, 0, $10686 | 0, $10687 | 0) | 0;
 $10689 = getTempRet0() | 0;
 $10690 = _i64Add($10682 | 0, $10683 | 0, $10688 | 0, $10689 | 0) | 0;
 $10691 = getTempRet0() | 0;
 $10692 = $10690 ^ $2682;
 $10693 = $10691 ^ $2683;
 $10694 = _bitshift64Lshr($10692 | 0, $10693 | 0, 24) | 0;
 $10695 = getTempRet0() | 0;
 $10696 = _bitshift64Shl($10692 | 0, $10693 | 0, 40) | 0;
 $10697 = getTempRet0() | 0;
 $10698 = $10694 | $10696;
 $10699 = $10695 | $10697;
 $10700 = _i64Add($10698 | 0, $10699 | 0, $10678 | 0, $10679 | 0) | 0;
 $10701 = getTempRet0() | 0;
 $10702 = _bitshift64Shl($10678 | 0, $10679 | 0, 1) | 0;
 $10703 = getTempRet0() | 0;
 $10704 = $10702 & -2;
 $10705 = $10703 & 1;
 $10706 = ___muldi3($10694 | 0, 0, $10704 | 0, $10705 | 0) | 0;
 $10707 = getTempRet0() | 0;
 $10708 = _i64Add($10700 | 0, $10701 | 0, $10706 | 0, $10707 | 0) | 0;
 $10709 = getTempRet0() | 0;
 $10710 = $arrayidx2287;
 $10711 = $10710;
 HEAP32[$10711 >> 2] = $10708;
 $10712 = $10710 + 4 | 0;
 $10713 = $10712;
 HEAP32[$10713 >> 2] = $10709;
 $10714 = $10708 ^ $10681;
 $10715 = $10709 ^ $10680;
 $10716 = _bitshift64Lshr($10714 | 0, $10715 | 0, 16) | 0;
 $10717 = getTempRet0() | 0;
 $10718 = _bitshift64Shl($10714 | 0, $10715 | 0, 48) | 0;
 $10719 = getTempRet0() | 0;
 $10720 = $10716 | $10718;
 $10721 = $10717 | $10719;
 $10722 = _i64Add($10720 | 0, $10721 | 0, $10690 | 0, $10691 | 0) | 0;
 $10723 = getTempRet0() | 0;
 $10724 = _bitshift64Shl($10690 | 0, $10691 | 0, 1) | 0;
 $10725 = getTempRet0() | 0;
 $10726 = $10724 & -2;
 $10727 = $10725 & 1;
 $10728 = ___muldi3($10716 | 0, 0, $10726 | 0, $10727 | 0) | 0;
 $10729 = getTempRet0() | 0;
 $10730 = _i64Add($10722 | 0, $10723 | 0, $10728 | 0, $10729 | 0) | 0;
 $10731 = getTempRet0() | 0;
 $10732 = $10730 ^ $10698;
 $10733 = $10731 ^ $10699;
 $10734 = _bitshift64Lshr($10732 | 0, $10733 | 0, 63) | 0;
 $10735 = getTempRet0() | 0;
 $10736 = _bitshift64Shl($10732 | 0, $10733 | 0, 1) | 0;
 $10737 = getTempRet0() | 0;
 $10738 = $10734 | $10736;
 $10739 = $10735 | $10737;
 $10740 = $arrayidx5587;
 $10741 = $10740;
 HEAP32[$10741 >> 2] = $10738;
 $10742 = $10740 + 4 | 0;
 $10743 = $10742;
 HEAP32[$10743 >> 2] = $10739;
 $10744 = _i64Add($10586 | 0, $10587 | 0, $10466 | 0, $10467 | 0) | 0;
 $10745 = getTempRet0() | 0;
 $10746 = _bitshift64Shl($10466 | 0, $10467 | 0, 1) | 0;
 $10747 = getTempRet0() | 0;
 $10748 = $10746 & -2;
 $10749 = $10747 & 1;
 $10750 = ___muldi3($10586 | 0, 0, $10748 | 0, $10749 | 0) | 0;
 $10751 = getTempRet0() | 0;
 $10752 = _i64Add($10744 | 0, $10745 | 0, $10750 | 0, $10751 | 0) | 0;
 $10753 = getTempRet0() | 0;
 $10754 = $10720 ^ $10752;
 $10755 = $10721 ^ $10753;
 $10756 = _i64Add($10656 | 0, $10657 | 0, $10755 | 0, $10754 | 0) | 0;
 $10757 = getTempRet0() | 0;
 $10758 = _bitshift64Shl($10656 | 0, $10657 | 0, 1) | 0;
 $10759 = getTempRet0() | 0;
 $10760 = $10758 & -2;
 $10761 = $10759 & 1;
 $10762 = ___muldi3($10760 | 0, $10761 | 0, $10755 | 0, 0) | 0;
 $10763 = getTempRet0() | 0;
 $10764 = _i64Add($10756 | 0, $10757 | 0, $10762 | 0, $10763 | 0) | 0;
 $10765 = getTempRet0() | 0;
 $10766 = $10764 ^ $10586;
 $10767 = $10765 ^ $10587;
 $10768 = _bitshift64Lshr($10766 | 0, $10767 | 0, 24) | 0;
 $10769 = getTempRet0() | 0;
 $10770 = _bitshift64Shl($10766 | 0, $10767 | 0, 40) | 0;
 $10771 = getTempRet0() | 0;
 $10772 = $10768 | $10770;
 $10773 = $10769 | $10771;
 $10774 = _i64Add($10772 | 0, $10773 | 0, $10752 | 0, $10753 | 0) | 0;
 $10775 = getTempRet0() | 0;
 $10776 = _bitshift64Shl($10752 | 0, $10753 | 0, 1) | 0;
 $10777 = getTempRet0() | 0;
 $10778 = $10776 & -2;
 $10779 = $10777 & 1;
 $10780 = ___muldi3($10768 | 0, 0, $10778 | 0, $10779 | 0) | 0;
 $10781 = getTempRet0() | 0;
 $10782 = _i64Add($10774 | 0, $10775 | 0, $10780 | 0, $10781 | 0) | 0;
 $10783 = getTempRet0() | 0;
 $10784 = $arrayidx431;
 $10785 = $10784;
 HEAP32[$10785 >> 2] = $10782;
 $10786 = $10784 + 4 | 0;
 $10787 = $10786;
 HEAP32[$10787 >> 2] = $10783;
 $10788 = $10782 ^ $10755;
 $10789 = $10783 ^ $10754;
 $10790 = _bitshift64Lshr($10788 | 0, $10789 | 0, 16) | 0;
 $10791 = getTempRet0() | 0;
 $10792 = _bitshift64Shl($10788 | 0, $10789 | 0, 48) | 0;
 $10793 = getTempRet0() | 0;
 $10794 = $10790 | $10792;
 $10795 = $10791 | $10793;
 $10796 = $arrayidx12187;
 $10797 = $10796;
 HEAP32[$10797 >> 2] = $10794;
 $10798 = $10796 + 4 | 0;
 $10799 = $10798;
 HEAP32[$10799 >> 2] = $10795;
 $10800 = _i64Add($10794 | 0, $10795 | 0, $10764 | 0, $10765 | 0) | 0;
 $10801 = getTempRet0() | 0;
 $10802 = _bitshift64Shl($10764 | 0, $10765 | 0, 1) | 0;
 $10803 = getTempRet0() | 0;
 $10804 = $10802 & -2;
 $10805 = $10803 & 1;
 $10806 = ___muldi3($10790 | 0, 0, $10804 | 0, $10805 | 0) | 0;
 $10807 = getTempRet0() | 0;
 $10808 = _i64Add($10800 | 0, $10801 | 0, $10806 | 0, $10807 | 0) | 0;
 $10809 = getTempRet0() | 0;
 $10810 = $arrayidx8681;
 $10811 = $10810;
 HEAP32[$10811 >> 2] = $10808;
 $10812 = $10810 + 4 | 0;
 $10813 = $10812;
 HEAP32[$10813 >> 2] = $10809;
 $10814 = $10808 ^ $10772;
 $10815 = $10809 ^ $10773;
 $10816 = _bitshift64Lshr($10814 | 0, $10815 | 0, 63) | 0;
 $10817 = getTempRet0() | 0;
 $10818 = _bitshift64Shl($10814 | 0, $10815 | 0, 1) | 0;
 $10819 = getTempRet0() | 0;
 $10820 = $10816 | $10818;
 $10821 = $10817 | $10819;
 $10822 = $arrayidx3937;
 $10823 = $10822;
 HEAP32[$10823 >> 2] = $10820;
 $10824 = $10822 + 4 | 0;
 $10825 = $10824;
 HEAP32[$10825 >> 2] = $10821;
 $10826 = _i64Add($10664 | 0, $10665 | 0, $10548 | 0, $10549 | 0) | 0;
 $10827 = getTempRet0() | 0;
 $10828 = _bitshift64Shl($10548 | 0, $10549 | 0, 1) | 0;
 $10829 = getTempRet0() | 0;
 $10830 = $10828 & -2;
 $10831 = $10829 & 1;
 $10832 = ___muldi3($10664 | 0, 0, $10830 | 0, $10831 | 0) | 0;
 $10833 = getTempRet0() | 0;
 $10834 = _i64Add($10826 | 0, $10827 | 0, $10832 | 0, $10833 | 0) | 0;
 $10835 = getTempRet0() | 0;
 $10836 = $10834 ^ $10478;
 $10837 = $10835 ^ $10479;
 $10838 = _i64Add($10837 | 0, $10836 | 0, $10730 | 0, $10731 | 0) | 0;
 $10839 = getTempRet0() | 0;
 $10840 = _bitshift64Shl($10730 | 0, $10731 | 0, 1) | 0;
 $10841 = getTempRet0() | 0;
 $10842 = $10840 & -2;
 $10843 = $10841 & 1;
 $10844 = ___muldi3($10837 | 0, 0, $10842 | 0, $10843 | 0) | 0;
 $10845 = getTempRet0() | 0;
 $10846 = _i64Add($10838 | 0, $10839 | 0, $10844 | 0, $10845 | 0) | 0;
 $10847 = getTempRet0() | 0;
 $10848 = $10846 ^ $10664;
 $10849 = $10847 ^ $10665;
 $10850 = _bitshift64Lshr($10848 | 0, $10849 | 0, 24) | 0;
 $10851 = getTempRet0() | 0;
 $10852 = _bitshift64Shl($10848 | 0, $10849 | 0, 40) | 0;
 $10853 = getTempRet0() | 0;
 $10854 = $10850 | $10852;
 $10855 = $10851 | $10853;
 $10856 = _i64Add($10854 | 0, $10855 | 0, $10834 | 0, $10835 | 0) | 0;
 $10857 = getTempRet0() | 0;
 $10858 = _bitshift64Shl($10834 | 0, $10835 | 0, 1) | 0;
 $10859 = getTempRet0() | 0;
 $10860 = $10858 & -2;
 $10861 = $10859 & 1;
 $10862 = ___muldi3($10850 | 0, 0, $10860 | 0, $10861 | 0) | 0;
 $10863 = getTempRet0() | 0;
 $10864 = _i64Add($10856 | 0, $10857 | 0, $10862 | 0, $10863 | 0) | 0;
 $10865 = getTempRet0() | 0;
 $10866 = $arrayidx637;
 $10867 = $10866;
 HEAP32[$10867 >> 2] = $10864;
 $10868 = $10866 + 4 | 0;
 $10869 = $10868;
 HEAP32[$10869 >> 2] = $10865;
 $10870 = $10864 ^ $10837;
 $10871 = $10865 ^ $10836;
 $10872 = _bitshift64Lshr($10870 | 0, $10871 | 0, 16) | 0;
 $10873 = getTempRet0() | 0;
 $10874 = _bitshift64Shl($10870 | 0, $10871 | 0, 48) | 0;
 $10875 = getTempRet0() | 0;
 $10876 = $10872 | $10874;
 $10877 = $10873 | $10875;
 $10878 = $arrayidx10331;
 $10879 = $10878;
 HEAP32[$10879 >> 2] = $10876;
 $10880 = $10878 + 4 | 0;
 $10881 = $10880;
 HEAP32[$10881 >> 2] = $10877;
 $10882 = _i64Add($10876 | 0, $10877 | 0, $10846 | 0, $10847 | 0) | 0;
 $10883 = getTempRet0() | 0;
 $10884 = _bitshift64Shl($10846 | 0, $10847 | 0, 1) | 0;
 $10885 = getTempRet0() | 0;
 $10886 = $10884 & -2;
 $10887 = $10885 & 1;
 $10888 = ___muldi3($10872 | 0, 0, $10886 | 0, $10887 | 0) | 0;
 $10889 = getTempRet0() | 0;
 $10890 = _i64Add($10882 | 0, $10883 | 0, $10888 | 0, $10889 | 0) | 0;
 $10891 = getTempRet0() | 0;
 $10892 = $arrayidx8887;
 $10893 = $10892;
 HEAP32[$10893 >> 2] = $10890;
 $10894 = $10892 + 4 | 0;
 $10895 = $10894;
 HEAP32[$10895 >> 2] = $10891;
 $10896 = $10890 ^ $10854;
 $10897 = $10891 ^ $10855;
 $10898 = _bitshift64Lshr($10896 | 0, $10897 | 0, 63) | 0;
 $10899 = getTempRet0() | 0;
 $10900 = _bitshift64Shl($10896 | 0, $10897 | 0, 1) | 0;
 $10901 = getTempRet0() | 0;
 $10902 = $10898 | $10900;
 $10903 = $10899 | $10901;
 $10904 = $arrayidx5381;
 $10905 = $10904;
 HEAP32[$10905 >> 2] = $10902;
 $10906 = $10904 + 4 | 0;
 $10907 = $10906;
 HEAP32[$10907 >> 2] = $10903;
 $10908 = _i64Add($10738 | 0, $10739 | 0, $10630 | 0, $10631 | 0) | 0;
 $10909 = getTempRet0() | 0;
 $10910 = _bitshift64Shl($10630 | 0, $10631 | 0, 1) | 0;
 $10911 = getTempRet0() | 0;
 $10912 = $10910 & -2;
 $10913 = $10911 & 1;
 $10914 = ___muldi3($10738 | 0, 0, $10912 | 0, $10913 | 0) | 0;
 $10915 = getTempRet0() | 0;
 $10916 = _i64Add($10908 | 0, $10909 | 0, $10914 | 0, $10915 | 0) | 0;
 $10917 = getTempRet0() | 0;
 $10918 = $10916 ^ $10560;
 $10919 = $10917 ^ $10561;
 $10920 = _i64Add($10919 | 0, $10918 | 0, $10492 | 0, $10493 | 0) | 0;
 $10921 = getTempRet0() | 0;
 $10922 = _bitshift64Shl($10492 | 0, $10493 | 0, 1) | 0;
 $10923 = getTempRet0() | 0;
 $10924 = $10922 & -2;
 $10925 = $10923 & 1;
 $10926 = ___muldi3($10919 | 0, 0, $10924 | 0, $10925 | 0) | 0;
 $10927 = getTempRet0() | 0;
 $10928 = _i64Add($10920 | 0, $10921 | 0, $10926 | 0, $10927 | 0) | 0;
 $10929 = getTempRet0() | 0;
 $10930 = $10928 ^ $10738;
 $10931 = $10929 ^ $10739;
 $10932 = _bitshift64Lshr($10930 | 0, $10931 | 0, 24) | 0;
 $10933 = getTempRet0() | 0;
 $10934 = _bitshift64Shl($10930 | 0, $10931 | 0, 40) | 0;
 $10935 = getTempRet0() | 0;
 $10936 = $10932 | $10934;
 $10937 = $10933 | $10935;
 $10938 = _i64Add($10936 | 0, $10937 | 0, $10916 | 0, $10917 | 0) | 0;
 $10939 = getTempRet0() | 0;
 $10940 = _bitshift64Shl($10916 | 0, $10917 | 0, 1) | 0;
 $10941 = getTempRet0() | 0;
 $10942 = $10940 & -2;
 $10943 = $10941 & 1;
 $10944 = ___muldi3($10932 | 0, 0, $10942 | 0, $10943 | 0) | 0;
 $10945 = getTempRet0() | 0;
 $10946 = _i64Add($10938 | 0, $10939 | 0, $10944 | 0, $10945 | 0) | 0;
 $10947 = getTempRet0() | 0;
 $10948 = $arrayidx2081;
 $10949 = $10948;
 HEAP32[$10949 >> 2] = $10946;
 $10950 = $10948 + 4 | 0;
 $10951 = $10950;
 HEAP32[$10951 >> 2] = $10947;
 $10952 = $10946 ^ $10919;
 $10953 = $10947 ^ $10918;
 $10954 = _bitshift64Lshr($10952 | 0, $10953 | 0, 16) | 0;
 $10955 = getTempRet0() | 0;
 $10956 = _bitshift64Shl($10952 | 0, $10953 | 0, 48) | 0;
 $10957 = getTempRet0() | 0;
 $10958 = $10954 | $10956;
 $10959 = $10955 | $10957;
 $10960 = $arrayidx10537;
 $10961 = $10960;
 HEAP32[$10961 >> 2] = $10958;
 $10962 = $10960 + 4 | 0;
 $10963 = $10962;
 HEAP32[$10963 >> 2] = $10959;
 $10964 = _i64Add($10958 | 0, $10959 | 0, $10928 | 0, $10929 | 0) | 0;
 $10965 = getTempRet0() | 0;
 $10966 = _bitshift64Shl($10928 | 0, $10929 | 0, 1) | 0;
 $10967 = getTempRet0() | 0;
 $10968 = $10966 & -2;
 $10969 = $10967 & 1;
 $10970 = ___muldi3($10954 | 0, 0, $10968 | 0, $10969 | 0) | 0;
 $10971 = getTempRet0() | 0;
 $10972 = _i64Add($10964 | 0, $10965 | 0, $10970 | 0, $10971 | 0) | 0;
 $10973 = getTempRet0() | 0;
 $10974 = $arrayidx7031;
 $10975 = $10974;
 HEAP32[$10975 >> 2] = $10972;
 $10976 = $10974 + 4 | 0;
 $10977 = $10976;
 HEAP32[$10977 >> 2] = $10973;
 $10978 = $10972 ^ $10936;
 $10979 = $10973 ^ $10937;
 $10980 = _bitshift64Lshr($10978 | 0, $10979 | 0, 63) | 0;
 $10981 = getTempRet0() | 0;
 $10982 = _bitshift64Shl($10978 | 0, $10979 | 0, 1) | 0;
 $10983 = getTempRet0() | 0;
 $10984 = $10980 | $10982;
 $10985 = $10981 | $10983;
 $10986 = $arrayidx5587;
 $10987 = $10986;
 HEAP32[$10987 >> 2] = $10984;
 $10988 = $10986 + 4 | 0;
 $10989 = $10988;
 HEAP32[$10989 >> 2] = $10985;
 $10990 = _i64Add($10708 | 0, $10709 | 0, $10504 | 0, $10505 | 0) | 0;
 $10991 = getTempRet0() | 0;
 $10992 = _bitshift64Shl($10708 | 0, $10709 | 0, 1) | 0;
 $10993 = getTempRet0() | 0;
 $10994 = $10992 & -2;
 $10995 = $10993 & 1;
 $10996 = ___muldi3($10994 | 0, $10995 | 0, $10504 | 0, 0) | 0;
 $10997 = getTempRet0() | 0;
 $10998 = _i64Add($10990 | 0, $10991 | 0, $10996 | 0, $10997 | 0) | 0;
 $10999 = getTempRet0() | 0;
 $11000 = $10642 ^ $10998;
 $11001 = $10643 ^ $10999;
 $11002 = _i64Add($11001 | 0, $11000 | 0, $10574 | 0, $10575 | 0) | 0;
 $11003 = getTempRet0() | 0;
 $11004 = _bitshift64Shl($10574 | 0, $10575 | 0, 1) | 0;
 $11005 = getTempRet0() | 0;
 $11006 = $11004 & -2;
 $11007 = $11005 & 1;
 $11008 = ___muldi3($11001 | 0, 0, $11006 | 0, $11007 | 0) | 0;
 $11009 = getTempRet0() | 0;
 $11010 = _i64Add($11002 | 0, $11003 | 0, $11008 | 0, $11009 | 0) | 0;
 $11011 = getTempRet0() | 0;
 $11012 = $11010 ^ $10504;
 $11013 = $11011 ^ $10505;
 $11014 = _bitshift64Lshr($11012 | 0, $11013 | 0, 24) | 0;
 $11015 = getTempRet0() | 0;
 $11016 = _bitshift64Shl($11012 | 0, $11013 | 0, 40) | 0;
 $11017 = getTempRet0() | 0;
 $11018 = $11014 | $11016;
 $11019 = $11015 | $11017;
 $11020 = _i64Add($11018 | 0, $11019 | 0, $10998 | 0, $10999 | 0) | 0;
 $11021 = getTempRet0() | 0;
 $11022 = _bitshift64Shl($10998 | 0, $10999 | 0, 1) | 0;
 $11023 = getTempRet0() | 0;
 $11024 = $11022 & -2;
 $11025 = $11023 & 1;
 $11026 = ___muldi3($11014 | 0, 0, $11024 | 0, $11025 | 0) | 0;
 $11027 = getTempRet0() | 0;
 $11028 = _i64Add($11020 | 0, $11021 | 0, $11026 | 0, $11027 | 0) | 0;
 $11029 = getTempRet0() | 0;
 $11030 = $arrayidx2287;
 $11031 = $11030;
 HEAP32[$11031 >> 2] = $11028;
 $11032 = $11030 + 4 | 0;
 $11033 = $11032;
 HEAP32[$11033 >> 2] = $11029;
 $11034 = $11028 ^ $11001;
 $11035 = $11029 ^ $11000;
 $11036 = _bitshift64Lshr($11034 | 0, $11035 | 0, 16) | 0;
 $11037 = getTempRet0() | 0;
 $11038 = _bitshift64Shl($11034 | 0, $11035 | 0, 48) | 0;
 $11039 = getTempRet0() | 0;
 $11040 = $11036 | $11038;
 $11041 = $11037 | $11039;
 $11042 = $arrayidx11981;
 $11043 = $11042;
 HEAP32[$11043 >> 2] = $11040;
 $11044 = $11042 + 4 | 0;
 $11045 = $11044;
 HEAP32[$11045 >> 2] = $11041;
 $11046 = _i64Add($11040 | 0, $11041 | 0, $11010 | 0, $11011 | 0) | 0;
 $11047 = getTempRet0() | 0;
 $11048 = _bitshift64Shl($11010 | 0, $11011 | 0, 1) | 0;
 $11049 = getTempRet0() | 0;
 $11050 = $11048 & -2;
 $11051 = $11049 & 1;
 $11052 = ___muldi3($11036 | 0, 0, $11050 | 0, $11051 | 0) | 0;
 $11053 = getTempRet0() | 0;
 $11054 = _i64Add($11046 | 0, $11047 | 0, $11052 | 0, $11053 | 0) | 0;
 $11055 = getTempRet0() | 0;
 $11056 = $arrayidx7237;
 $11057 = $11056;
 HEAP32[$11057 >> 2] = $11054;
 $11058 = $11056 + 4 | 0;
 $11059 = $11058;
 HEAP32[$11059 >> 2] = $11055;
 $11060 = $11054 ^ $11018;
 $11061 = $11055 ^ $11019;
 $11062 = _bitshift64Lshr($11060 | 0, $11061 | 0, 63) | 0;
 $11063 = getTempRet0() | 0;
 $11064 = _bitshift64Shl($11060 | 0, $11061 | 0, 1) | 0;
 $11065 = getTempRet0() | 0;
 $11066 = $11062 | $11064;
 $11067 = $11063 | $11065;
 $11068 = $arrayidx3731;
 $11069 = $11068;
 HEAP32[$11069 >> 2] = $11066;
 $11070 = $11068 + 4 | 0;
 $11071 = $11070;
 HEAP32[$11071 >> 2] = $11067;
 _copy_block($next_block, $block_tmp);
 _xor_block($next_block, $blockR);
 STACKTOP = sp;
 return;
}
function _blake2b_compress($S, $block, $0, $1) {
 $S = $S | 0;
 $block = $block | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0;
 var $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0;
 var $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0;
 var $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0;
 var $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0;
 var $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0;
 var $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0;
 var $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0;
 var $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0;
 var $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0;
 var $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0;
 var $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0;
 var $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0;
 var $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0;
 var $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0;
 var $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0;
 var $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0;
 var $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0;
 var $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0;
 var $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0;
 var $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0;
 var $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0;
 var $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0;
 var $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0;
 var $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0;
 var $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0;
 var $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0;
 var $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0;
 var $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0;
 var $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0;
 var $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0;
 var $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0;
 var $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0;
 var $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0;
 var $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0;
 var $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0;
 var $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0;
 var $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0;
 var $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0;
 var $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0;
 var $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0;
 var $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0;
 var $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0;
 var $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0;
 var $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0;
 var $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0;
 var $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0;
 var $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0;
 var $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0;
 var $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0;
 var $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0;
 var $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0;
 var $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0;
 var $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0;
 var $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0;
 var $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0;
 var $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0;
 var $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0;
 var $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0;
 var $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0;
 var $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0;
 var $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0;
 var $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0;
 var $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0;
 var $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0;
 var $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0;
 var $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0;
 var $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0;
 var $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0;
 var $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0;
 var $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0;
 var $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0;
 var $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0;
 var $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0;
 var $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0;
 var $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0;
 var $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0;
 var $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0;
 var $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0;
 var $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0;
 var $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0;
 var $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0;
 var $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0;
 var $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0, $3500 = 0;
 var $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0, $3519 = 0;
 var $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0, $3537 = 0;
 var $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0, $3555 = 0;
 var $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0, $3573 = 0;
 var $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0, $3591 = 0;
 var $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0, $3609 = 0;
 var $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0, $3627 = 0;
 var $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0, $3645 = 0;
 var $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0, $3663 = 0;
 var $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0, $3681 = 0;
 var $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0, $3699 = 0, $37 = 0;
 var $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0, $3716 = 0, $3717 = 0;
 var $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0, $3735 = 0;
 var $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0, $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0, $3753 = 0;
 var $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0, $3771 = 0;
 var $3772 = 0, $3773 = 0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0, $3789 = 0, $379 = 0;
 var $3790 = 0, $3791 = 0, $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0, $3797 = 0, $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0, $3806 = 0, $3807 = 0;
 var $3808 = 0, $3809 = 0, $381 = 0, $3810 = 0, $3811 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $add$ptr1 = 0, $add$ptr10 = 0, $add$ptr13 = 0, $add$ptr16 = 0, $add$ptr19 = 0, $add$ptr22 = 0, $add$ptr25 = 0, $add$ptr28 = 0, $add$ptr31 = 0, $add$ptr34 = 0;
 var $add$ptr37 = 0, $add$ptr4 = 0, $add$ptr40 = 0, $add$ptr43 = 0, $add$ptr7 = 0, $arrayidx49 = 0, $arrayidx52 = 0, $arrayidx55 = 0, $arrayidx58 = 0, $arrayidx61 = 0, $arrayidx64 = 0, $arrayidx67 = 0, $arrayidx73 = 0, $arrayidx76 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = _load64_484($block) | 0;
 $3 = getTempRet0() | 0;
 $add$ptr1 = $block + 8 | 0;
 $4 = _load64_484($add$ptr1) | 0;
 $5 = getTempRet0() | 0;
 $add$ptr4 = $block + 16 | 0;
 $6 = _load64_484($add$ptr4) | 0;
 $7 = getTempRet0() | 0;
 $add$ptr7 = $block + 24 | 0;
 $8 = _load64_484($add$ptr7) | 0;
 $9 = getTempRet0() | 0;
 $add$ptr10 = $block + 32 | 0;
 $10 = _load64_484($add$ptr10) | 0;
 $11 = getTempRet0() | 0;
 $add$ptr13 = $block + 40 | 0;
 $12 = _load64_484($add$ptr13) | 0;
 $13 = getTempRet0() | 0;
 $add$ptr16 = $block + 48 | 0;
 $14 = _load64_484($add$ptr16) | 0;
 $15 = getTempRet0() | 0;
 $add$ptr19 = $block + 56 | 0;
 $16 = _load64_484($add$ptr19) | 0;
 $17 = getTempRet0() | 0;
 $add$ptr22 = $block + 64 | 0;
 $18 = _load64_484($add$ptr22) | 0;
 $19 = getTempRet0() | 0;
 $add$ptr25 = $block + 72 | 0;
 $20 = _load64_484($add$ptr25) | 0;
 $21 = getTempRet0() | 0;
 $add$ptr28 = $block + 80 | 0;
 $22 = _load64_484($add$ptr28) | 0;
 $23 = getTempRet0() | 0;
 $add$ptr31 = $block + 88 | 0;
 $24 = _load64_484($add$ptr31) | 0;
 $25 = getTempRet0() | 0;
 $add$ptr34 = $block + 96 | 0;
 $26 = _load64_484($add$ptr34) | 0;
 $27 = getTempRet0() | 0;
 $add$ptr37 = $block + 104 | 0;
 $28 = _load64_484($add$ptr37) | 0;
 $29 = getTempRet0() | 0;
 $add$ptr40 = $block + 112 | 0;
 $30 = _load64_484($add$ptr40) | 0;
 $31 = getTempRet0() | 0;
 $add$ptr43 = $block + 120 | 0;
 $32 = _load64_484($add$ptr43) | 0;
 $33 = getTempRet0() | 0;
 $34 = $S;
 $35 = $34;
 $36 = HEAP32[$35 >> 2] | 0;
 $37 = $34 + 4 | 0;
 $38 = $37;
 $39 = HEAP32[$38 >> 2] | 0;
 $arrayidx49 = $S + 8 | 0;
 $40 = $arrayidx49;
 $41 = $40;
 $42 = HEAP32[$41 >> 2] | 0;
 $43 = $40 + 4 | 0;
 $44 = $43;
 $45 = HEAP32[$44 >> 2] | 0;
 $arrayidx52 = $S + 16 | 0;
 $46 = $arrayidx52;
 $47 = $46;
 $48 = HEAP32[$47 >> 2] | 0;
 $49 = $46 + 4 | 0;
 $50 = $49;
 $51 = HEAP32[$50 >> 2] | 0;
 $arrayidx55 = $S + 24 | 0;
 $52 = $arrayidx55;
 $53 = $52;
 $54 = HEAP32[$53 >> 2] | 0;
 $55 = $52 + 4 | 0;
 $56 = $55;
 $57 = HEAP32[$56 >> 2] | 0;
 $arrayidx58 = $S + 32 | 0;
 $58 = $arrayidx58;
 $59 = $58;
 $60 = HEAP32[$59 >> 2] | 0;
 $61 = $58 + 4 | 0;
 $62 = $61;
 $63 = HEAP32[$62 >> 2] | 0;
 $arrayidx61 = $S + 40 | 0;
 $64 = $arrayidx61;
 $65 = $64;
 $66 = HEAP32[$65 >> 2] | 0;
 $67 = $64 + 4 | 0;
 $68 = $67;
 $69 = HEAP32[$68 >> 2] | 0;
 $arrayidx64 = $S + 48 | 0;
 $70 = $arrayidx64;
 $71 = $70;
 $72 = HEAP32[$71 >> 2] | 0;
 $73 = $70 + 4 | 0;
 $74 = $73;
 $75 = HEAP32[$74 >> 2] | 0;
 $arrayidx67 = $S + 56 | 0;
 $76 = $arrayidx67;
 $77 = $76;
 $78 = HEAP32[$77 >> 2] | 0;
 $79 = $76 + 4 | 0;
 $80 = $79;
 $81 = HEAP32[$80 >> 2] | 0;
 $arrayidx73 = $S + 64 | 0;
 $82 = $arrayidx73;
 $83 = $82;
 $84 = HEAP32[$83 >> 2] | 0;
 $85 = $82 + 4 | 0;
 $86 = $85;
 $87 = HEAP32[$86 >> 2] | 0;
 $arrayidx76 = $S + 72 | 0;
 $88 = $arrayidx76;
 $89 = $88;
 $90 = HEAP32[$89 >> 2] | 0;
 $91 = $88 + 4 | 0;
 $92 = $91;
 $93 = HEAP32[$92 >> 2] | 0;
 $94 = $0 ^ -79577749;
 $95 = $1 ^ 528734635;
 $96 = _i64Add($36 | 0, $39 | 0, $2 | 0, $3 | 0) | 0;
 $97 = getTempRet0() | 0;
 $98 = _i64Add($96 | 0, $97 | 0, $60 | 0, $63 | 0) | 0;
 $99 = getTempRet0() | 0;
 $100 = $98 ^ -1377402159;
 $101 = $99 ^ 1359893119;
 $102 = $100 ^ $84;
 $103 = $101 ^ $87;
 $104 = _i64Add($103 | 0, $102 | 0, -205731576, 1779033703) | 0;
 $105 = getTempRet0() | 0;
 $106 = $104 ^ $60;
 $107 = $105 ^ $63;
 $108 = _bitshift64Lshr($106 | 0, $107 | 0, 24) | 0;
 $109 = getTempRet0() | 0;
 $110 = _bitshift64Shl($106 | 0, $107 | 0, 40) | 0;
 $111 = getTempRet0() | 0;
 $112 = $108 | $110;
 $113 = $109 | $111;
 $114 = _i64Add($98 | 0, $99 | 0, $4 | 0, $5 | 0) | 0;
 $115 = getTempRet0() | 0;
 $116 = _i64Add($114 | 0, $115 | 0, $112 | 0, $113 | 0) | 0;
 $117 = getTempRet0() | 0;
 $118 = $116 ^ $103;
 $119 = $117 ^ $102;
 $120 = _bitshift64Lshr($118 | 0, $119 | 0, 16) | 0;
 $121 = getTempRet0() | 0;
 $122 = _bitshift64Shl($118 | 0, $119 | 0, 48) | 0;
 $123 = getTempRet0() | 0;
 $124 = $120 | $122;
 $125 = $121 | $123;
 $126 = _i64Add($124 | 0, $125 | 0, $104 | 0, $105 | 0) | 0;
 $127 = getTempRet0() | 0;
 $128 = $126 ^ $112;
 $129 = $127 ^ $113;
 $130 = _bitshift64Lshr($128 | 0, $129 | 0, 63) | 0;
 $131 = getTempRet0() | 0;
 $132 = _bitshift64Shl($128 | 0, $129 | 0, 1) | 0;
 $133 = getTempRet0() | 0;
 $134 = $130 | $132;
 $135 = $131 | $133;
 $136 = _i64Add($42 | 0, $45 | 0, $6 | 0, $7 | 0) | 0;
 $137 = getTempRet0() | 0;
 $138 = _i64Add($136 | 0, $137 | 0, $66 | 0, $69 | 0) | 0;
 $139 = getTempRet0() | 0;
 $140 = $138 ^ 725511199;
 $141 = $139 ^ -1694144372;
 $142 = $140 ^ $90;
 $143 = $141 ^ $93;
 $144 = _i64Add($143 | 0, $142 | 0, -2067093701, -1150833019) | 0;
 $145 = getTempRet0() | 0;
 $146 = $144 ^ $66;
 $147 = $145 ^ $69;
 $148 = _bitshift64Lshr($146 | 0, $147 | 0, 24) | 0;
 $149 = getTempRet0() | 0;
 $150 = _bitshift64Shl($146 | 0, $147 | 0, 40) | 0;
 $151 = getTempRet0() | 0;
 $152 = $148 | $150;
 $153 = $149 | $151;
 $154 = _i64Add($138 | 0, $139 | 0, $8 | 0, $9 | 0) | 0;
 $155 = getTempRet0() | 0;
 $156 = _i64Add($154 | 0, $155 | 0, $152 | 0, $153 | 0) | 0;
 $157 = getTempRet0() | 0;
 $158 = $156 ^ $143;
 $159 = $157 ^ $142;
 $160 = _bitshift64Lshr($158 | 0, $159 | 0, 16) | 0;
 $161 = getTempRet0() | 0;
 $162 = _bitshift64Shl($158 | 0, $159 | 0, 48) | 0;
 $163 = getTempRet0() | 0;
 $164 = $160 | $162;
 $165 = $161 | $163;
 $166 = _i64Add($164 | 0, $165 | 0, $144 | 0, $145 | 0) | 0;
 $167 = getTempRet0() | 0;
 $168 = $166 ^ $152;
 $169 = $167 ^ $153;
 $170 = _bitshift64Lshr($168 | 0, $169 | 0, 63) | 0;
 $171 = getTempRet0() | 0;
 $172 = _bitshift64Shl($168 | 0, $169 | 0, 1) | 0;
 $173 = getTempRet0() | 0;
 $174 = $170 | $172;
 $175 = $171 | $173;
 $176 = _i64Add($48 | 0, $51 | 0, $10 | 0, $11 | 0) | 0;
 $177 = getTempRet0() | 0;
 $178 = _i64Add($176 | 0, $177 | 0, $72 | 0, $75 | 0) | 0;
 $179 = getTempRet0() | 0;
 $180 = $94 ^ $178;
 $181 = $95 ^ $179;
 $182 = _i64Add($181 | 0, $180 | 0, -23791573, 1013904242) | 0;
 $183 = getTempRet0() | 0;
 $184 = $182 ^ $72;
 $185 = $183 ^ $75;
 $186 = _bitshift64Lshr($184 | 0, $185 | 0, 24) | 0;
 $187 = getTempRet0() | 0;
 $188 = _bitshift64Shl($184 | 0, $185 | 0, 40) | 0;
 $189 = getTempRet0() | 0;
 $190 = $186 | $188;
 $191 = $187 | $189;
 $192 = _i64Add($178 | 0, $179 | 0, $12 | 0, $13 | 0) | 0;
 $193 = getTempRet0() | 0;
 $194 = _i64Add($192 | 0, $193 | 0, $190 | 0, $191 | 0) | 0;
 $195 = getTempRet0() | 0;
 $196 = $194 ^ $181;
 $197 = $195 ^ $180;
 $198 = _bitshift64Lshr($196 | 0, $197 | 0, 16) | 0;
 $199 = getTempRet0() | 0;
 $200 = _bitshift64Shl($196 | 0, $197 | 0, 48) | 0;
 $201 = getTempRet0() | 0;
 $202 = $198 | $200;
 $203 = $199 | $201;
 $204 = _i64Add($202 | 0, $203 | 0, $182 | 0, $183 | 0) | 0;
 $205 = getTempRet0() | 0;
 $206 = $204 ^ $190;
 $207 = $205 ^ $191;
 $208 = _bitshift64Lshr($206 | 0, $207 | 0, 63) | 0;
 $209 = getTempRet0() | 0;
 $210 = _bitshift64Shl($206 | 0, $207 | 0, 1) | 0;
 $211 = getTempRet0() | 0;
 $212 = $208 | $210;
 $213 = $209 | $211;
 $214 = _i64Add($54 | 0, $57 | 0, $14 | 0, $15 | 0) | 0;
 $215 = getTempRet0() | 0;
 $216 = _i64Add($214 | 0, $215 | 0, $78 | 0, $81 | 0) | 0;
 $217 = getTempRet0() | 0;
 $218 = $216 ^ 327033209;
 $219 = $217 ^ 1541459225;
 $220 = _i64Add($219 | 0, $218 | 0, 1595750129, -1521486534) | 0;
 $221 = getTempRet0() | 0;
 $222 = $220 ^ $78;
 $223 = $221 ^ $81;
 $224 = _bitshift64Lshr($222 | 0, $223 | 0, 24) | 0;
 $225 = getTempRet0() | 0;
 $226 = _bitshift64Shl($222 | 0, $223 | 0, 40) | 0;
 $227 = getTempRet0() | 0;
 $228 = $224 | $226;
 $229 = $225 | $227;
 $230 = _i64Add($216 | 0, $217 | 0, $16 | 0, $17 | 0) | 0;
 $231 = getTempRet0() | 0;
 $232 = _i64Add($230 | 0, $231 | 0, $228 | 0, $229 | 0) | 0;
 $233 = getTempRet0() | 0;
 $234 = $232 ^ $219;
 $235 = $233 ^ $218;
 $236 = _bitshift64Lshr($234 | 0, $235 | 0, 16) | 0;
 $237 = getTempRet0() | 0;
 $238 = _bitshift64Shl($234 | 0, $235 | 0, 48) | 0;
 $239 = getTempRet0() | 0;
 $240 = $236 | $238;
 $241 = $237 | $239;
 $242 = _i64Add($240 | 0, $241 | 0, $220 | 0, $221 | 0) | 0;
 $243 = getTempRet0() | 0;
 $244 = $242 ^ $228;
 $245 = $243 ^ $229;
 $246 = _bitshift64Lshr($244 | 0, $245 | 0, 63) | 0;
 $247 = getTempRet0() | 0;
 $248 = _bitshift64Shl($244 | 0, $245 | 0, 1) | 0;
 $249 = getTempRet0() | 0;
 $250 = $246 | $248;
 $251 = $247 | $249;
 $252 = _i64Add($116 | 0, $117 | 0, $18 | 0, $19 | 0) | 0;
 $253 = getTempRet0() | 0;
 $254 = _i64Add($252 | 0, $253 | 0, $174 | 0, $175 | 0) | 0;
 $255 = getTempRet0() | 0;
 $256 = $254 ^ $240;
 $257 = $255 ^ $241;
 $258 = _i64Add($257 | 0, $256 | 0, $204 | 0, $205 | 0) | 0;
 $259 = getTempRet0() | 0;
 $260 = $258 ^ $174;
 $261 = $259 ^ $175;
 $262 = _bitshift64Lshr($260 | 0, $261 | 0, 24) | 0;
 $263 = getTempRet0() | 0;
 $264 = _bitshift64Shl($260 | 0, $261 | 0, 40) | 0;
 $265 = getTempRet0() | 0;
 $266 = $262 | $264;
 $267 = $263 | $265;
 $268 = _i64Add($254 | 0, $255 | 0, $20 | 0, $21 | 0) | 0;
 $269 = getTempRet0() | 0;
 $270 = _i64Add($268 | 0, $269 | 0, $266 | 0, $267 | 0) | 0;
 $271 = getTempRet0() | 0;
 $272 = $270 ^ $257;
 $273 = $271 ^ $256;
 $274 = _bitshift64Lshr($272 | 0, $273 | 0, 16) | 0;
 $275 = getTempRet0() | 0;
 $276 = _bitshift64Shl($272 | 0, $273 | 0, 48) | 0;
 $277 = getTempRet0() | 0;
 $278 = $274 | $276;
 $279 = $275 | $277;
 $280 = _i64Add($278 | 0, $279 | 0, $258 | 0, $259 | 0) | 0;
 $281 = getTempRet0() | 0;
 $282 = $280 ^ $266;
 $283 = $281 ^ $267;
 $284 = _bitshift64Lshr($282 | 0, $283 | 0, 63) | 0;
 $285 = getTempRet0() | 0;
 $286 = _bitshift64Shl($282 | 0, $283 | 0, 1) | 0;
 $287 = getTempRet0() | 0;
 $288 = $284 | $286;
 $289 = $285 | $287;
 $290 = _i64Add($156 | 0, $157 | 0, $22 | 0, $23 | 0) | 0;
 $291 = getTempRet0() | 0;
 $292 = _i64Add($290 | 0, $291 | 0, $212 | 0, $213 | 0) | 0;
 $293 = getTempRet0() | 0;
 $294 = $292 ^ $124;
 $295 = $293 ^ $125;
 $296 = _i64Add($295 | 0, $294 | 0, $242 | 0, $243 | 0) | 0;
 $297 = getTempRet0() | 0;
 $298 = $296 ^ $212;
 $299 = $297 ^ $213;
 $300 = _bitshift64Lshr($298 | 0, $299 | 0, 24) | 0;
 $301 = getTempRet0() | 0;
 $302 = _bitshift64Shl($298 | 0, $299 | 0, 40) | 0;
 $303 = getTempRet0() | 0;
 $304 = $300 | $302;
 $305 = $301 | $303;
 $306 = _i64Add($292 | 0, $293 | 0, $24 | 0, $25 | 0) | 0;
 $307 = getTempRet0() | 0;
 $308 = _i64Add($306 | 0, $307 | 0, $304 | 0, $305 | 0) | 0;
 $309 = getTempRet0() | 0;
 $310 = $308 ^ $295;
 $311 = $309 ^ $294;
 $312 = _bitshift64Lshr($310 | 0, $311 | 0, 16) | 0;
 $313 = getTempRet0() | 0;
 $314 = _bitshift64Shl($310 | 0, $311 | 0, 48) | 0;
 $315 = getTempRet0() | 0;
 $316 = $312 | $314;
 $317 = $313 | $315;
 $318 = _i64Add($316 | 0, $317 | 0, $296 | 0, $297 | 0) | 0;
 $319 = getTempRet0() | 0;
 $320 = $318 ^ $304;
 $321 = $319 ^ $305;
 $322 = _bitshift64Lshr($320 | 0, $321 | 0, 63) | 0;
 $323 = getTempRet0() | 0;
 $324 = _bitshift64Shl($320 | 0, $321 | 0, 1) | 0;
 $325 = getTempRet0() | 0;
 $326 = $322 | $324;
 $327 = $323 | $325;
 $328 = _i64Add($194 | 0, $195 | 0, $26 | 0, $27 | 0) | 0;
 $329 = getTempRet0() | 0;
 $330 = _i64Add($328 | 0, $329 | 0, $250 | 0, $251 | 0) | 0;
 $331 = getTempRet0() | 0;
 $332 = $330 ^ $164;
 $333 = $331 ^ $165;
 $334 = _i64Add($333 | 0, $332 | 0, $126 | 0, $127 | 0) | 0;
 $335 = getTempRet0() | 0;
 $336 = $334 ^ $250;
 $337 = $335 ^ $251;
 $338 = _bitshift64Lshr($336 | 0, $337 | 0, 24) | 0;
 $339 = getTempRet0() | 0;
 $340 = _bitshift64Shl($336 | 0, $337 | 0, 40) | 0;
 $341 = getTempRet0() | 0;
 $342 = $338 | $340;
 $343 = $339 | $341;
 $344 = _i64Add($330 | 0, $331 | 0, $28 | 0, $29 | 0) | 0;
 $345 = getTempRet0() | 0;
 $346 = _i64Add($344 | 0, $345 | 0, $342 | 0, $343 | 0) | 0;
 $347 = getTempRet0() | 0;
 $348 = $346 ^ $333;
 $349 = $347 ^ $332;
 $350 = _bitshift64Lshr($348 | 0, $349 | 0, 16) | 0;
 $351 = getTempRet0() | 0;
 $352 = _bitshift64Shl($348 | 0, $349 | 0, 48) | 0;
 $353 = getTempRet0() | 0;
 $354 = $350 | $352;
 $355 = $351 | $353;
 $356 = _i64Add($354 | 0, $355 | 0, $334 | 0, $335 | 0) | 0;
 $357 = getTempRet0() | 0;
 $358 = $356 ^ $342;
 $359 = $357 ^ $343;
 $360 = _bitshift64Lshr($358 | 0, $359 | 0, 63) | 0;
 $361 = getTempRet0() | 0;
 $362 = _bitshift64Shl($358 | 0, $359 | 0, 1) | 0;
 $363 = getTempRet0() | 0;
 $364 = $360 | $362;
 $365 = $361 | $363;
 $366 = _i64Add($232 | 0, $233 | 0, $30 | 0, $31 | 0) | 0;
 $367 = getTempRet0() | 0;
 $368 = _i64Add($366 | 0, $367 | 0, $134 | 0, $135 | 0) | 0;
 $369 = getTempRet0() | 0;
 $370 = $368 ^ $202;
 $371 = $369 ^ $203;
 $372 = _i64Add($371 | 0, $370 | 0, $166 | 0, $167 | 0) | 0;
 $373 = getTempRet0() | 0;
 $374 = $372 ^ $134;
 $375 = $373 ^ $135;
 $376 = _bitshift64Lshr($374 | 0, $375 | 0, 24) | 0;
 $377 = getTempRet0() | 0;
 $378 = _bitshift64Shl($374 | 0, $375 | 0, 40) | 0;
 $379 = getTempRet0() | 0;
 $380 = $376 | $378;
 $381 = $377 | $379;
 $382 = _i64Add($368 | 0, $369 | 0, $32 | 0, $33 | 0) | 0;
 $383 = getTempRet0() | 0;
 $384 = _i64Add($382 | 0, $383 | 0, $380 | 0, $381 | 0) | 0;
 $385 = getTempRet0() | 0;
 $386 = $384 ^ $371;
 $387 = $385 ^ $370;
 $388 = _bitshift64Lshr($386 | 0, $387 | 0, 16) | 0;
 $389 = getTempRet0() | 0;
 $390 = _bitshift64Shl($386 | 0, $387 | 0, 48) | 0;
 $391 = getTempRet0() | 0;
 $392 = $388 | $390;
 $393 = $389 | $391;
 $394 = _i64Add($392 | 0, $393 | 0, $372 | 0, $373 | 0) | 0;
 $395 = getTempRet0() | 0;
 $396 = $394 ^ $380;
 $397 = $395 ^ $381;
 $398 = _bitshift64Lshr($396 | 0, $397 | 0, 63) | 0;
 $399 = getTempRet0() | 0;
 $400 = _bitshift64Shl($396 | 0, $397 | 0, 1) | 0;
 $401 = getTempRet0() | 0;
 $402 = $398 | $400;
 $403 = $399 | $401;
 $404 = _i64Add($270 | 0, $271 | 0, $30 | 0, $31 | 0) | 0;
 $405 = getTempRet0() | 0;
 $406 = _i64Add($404 | 0, $405 | 0, $402 | 0, $403 | 0) | 0;
 $407 = getTempRet0() | 0;
 $408 = $406 ^ $316;
 $409 = $407 ^ $317;
 $410 = _i64Add($409 | 0, $408 | 0, $356 | 0, $357 | 0) | 0;
 $411 = getTempRet0() | 0;
 $412 = $410 ^ $402;
 $413 = $411 ^ $403;
 $414 = _bitshift64Lshr($412 | 0, $413 | 0, 24) | 0;
 $415 = getTempRet0() | 0;
 $416 = _bitshift64Shl($412 | 0, $413 | 0, 40) | 0;
 $417 = getTempRet0() | 0;
 $418 = $414 | $416;
 $419 = $415 | $417;
 $420 = _i64Add($406 | 0, $407 | 0, $22 | 0, $23 | 0) | 0;
 $421 = getTempRet0() | 0;
 $422 = _i64Add($420 | 0, $421 | 0, $418 | 0, $419 | 0) | 0;
 $423 = getTempRet0() | 0;
 $424 = $422 ^ $409;
 $425 = $423 ^ $408;
 $426 = _bitshift64Lshr($424 | 0, $425 | 0, 16) | 0;
 $427 = getTempRet0() | 0;
 $428 = _bitshift64Shl($424 | 0, $425 | 0, 48) | 0;
 $429 = getTempRet0() | 0;
 $430 = $426 | $428;
 $431 = $427 | $429;
 $432 = _i64Add($430 | 0, $431 | 0, $410 | 0, $411 | 0) | 0;
 $433 = getTempRet0() | 0;
 $434 = $432 ^ $418;
 $435 = $433 ^ $419;
 $436 = _bitshift64Lshr($434 | 0, $435 | 0, 63) | 0;
 $437 = getTempRet0() | 0;
 $438 = _bitshift64Shl($434 | 0, $435 | 0, 1) | 0;
 $439 = getTempRet0() | 0;
 $440 = $436 | $438;
 $441 = $437 | $439;
 $442 = _i64Add($308 | 0, $309 | 0, $10 | 0, $11 | 0) | 0;
 $443 = getTempRet0() | 0;
 $444 = _i64Add($442 | 0, $443 | 0, $288 | 0, $289 | 0) | 0;
 $445 = getTempRet0() | 0;
 $446 = $444 ^ $354;
 $447 = $445 ^ $355;
 $448 = _i64Add($447 | 0, $446 | 0, $394 | 0, $395 | 0) | 0;
 $449 = getTempRet0() | 0;
 $450 = $448 ^ $288;
 $451 = $449 ^ $289;
 $452 = _bitshift64Lshr($450 | 0, $451 | 0, 24) | 0;
 $453 = getTempRet0() | 0;
 $454 = _bitshift64Shl($450 | 0, $451 | 0, 40) | 0;
 $455 = getTempRet0() | 0;
 $456 = $452 | $454;
 $457 = $453 | $455;
 $458 = _i64Add($444 | 0, $445 | 0, $18 | 0, $19 | 0) | 0;
 $459 = getTempRet0() | 0;
 $460 = _i64Add($458 | 0, $459 | 0, $456 | 0, $457 | 0) | 0;
 $461 = getTempRet0() | 0;
 $462 = $460 ^ $447;
 $463 = $461 ^ $446;
 $464 = _bitshift64Lshr($462 | 0, $463 | 0, 16) | 0;
 $465 = getTempRet0() | 0;
 $466 = _bitshift64Shl($462 | 0, $463 | 0, 48) | 0;
 $467 = getTempRet0() | 0;
 $468 = $464 | $466;
 $469 = $465 | $467;
 $470 = _i64Add($468 | 0, $469 | 0, $448 | 0, $449 | 0) | 0;
 $471 = getTempRet0() | 0;
 $472 = $470 ^ $456;
 $473 = $471 ^ $457;
 $474 = _bitshift64Lshr($472 | 0, $473 | 0, 63) | 0;
 $475 = getTempRet0() | 0;
 $476 = _bitshift64Shl($472 | 0, $473 | 0, 1) | 0;
 $477 = getTempRet0() | 0;
 $478 = $474 | $476;
 $479 = $475 | $477;
 $480 = _i64Add($346 | 0, $347 | 0, $20 | 0, $21 | 0) | 0;
 $481 = getTempRet0() | 0;
 $482 = _i64Add($480 | 0, $481 | 0, $326 | 0, $327 | 0) | 0;
 $483 = getTempRet0() | 0;
 $484 = $482 ^ $392;
 $485 = $483 ^ $393;
 $486 = _i64Add($485 | 0, $484 | 0, $280 | 0, $281 | 0) | 0;
 $487 = getTempRet0() | 0;
 $488 = $486 ^ $326;
 $489 = $487 ^ $327;
 $490 = _bitshift64Lshr($488 | 0, $489 | 0, 24) | 0;
 $491 = getTempRet0() | 0;
 $492 = _bitshift64Shl($488 | 0, $489 | 0, 40) | 0;
 $493 = getTempRet0() | 0;
 $494 = $490 | $492;
 $495 = $491 | $493;
 $496 = _i64Add($482 | 0, $483 | 0, $32 | 0, $33 | 0) | 0;
 $497 = getTempRet0() | 0;
 $498 = _i64Add($496 | 0, $497 | 0, $494 | 0, $495 | 0) | 0;
 $499 = getTempRet0() | 0;
 $500 = $498 ^ $485;
 $501 = $499 ^ $484;
 $502 = _bitshift64Lshr($500 | 0, $501 | 0, 16) | 0;
 $503 = getTempRet0() | 0;
 $504 = _bitshift64Shl($500 | 0, $501 | 0, 48) | 0;
 $505 = getTempRet0() | 0;
 $506 = $502 | $504;
 $507 = $503 | $505;
 $508 = _i64Add($506 | 0, $507 | 0, $486 | 0, $487 | 0) | 0;
 $509 = getTempRet0() | 0;
 $510 = $508 ^ $494;
 $511 = $509 ^ $495;
 $512 = _bitshift64Lshr($510 | 0, $511 | 0, 63) | 0;
 $513 = getTempRet0() | 0;
 $514 = _bitshift64Shl($510 | 0, $511 | 0, 1) | 0;
 $515 = getTempRet0() | 0;
 $516 = $512 | $514;
 $517 = $513 | $515;
 $518 = _i64Add($384 | 0, $385 | 0, $28 | 0, $29 | 0) | 0;
 $519 = getTempRet0() | 0;
 $520 = _i64Add($518 | 0, $519 | 0, $364 | 0, $365 | 0) | 0;
 $521 = getTempRet0() | 0;
 $522 = $520 ^ $278;
 $523 = $521 ^ $279;
 $524 = _i64Add($523 | 0, $522 | 0, $318 | 0, $319 | 0) | 0;
 $525 = getTempRet0() | 0;
 $526 = $524 ^ $364;
 $527 = $525 ^ $365;
 $528 = _bitshift64Lshr($526 | 0, $527 | 0, 24) | 0;
 $529 = getTempRet0() | 0;
 $530 = _bitshift64Shl($526 | 0, $527 | 0, 40) | 0;
 $531 = getTempRet0() | 0;
 $532 = $528 | $530;
 $533 = $529 | $531;
 $534 = _i64Add($520 | 0, $521 | 0, $14 | 0, $15 | 0) | 0;
 $535 = getTempRet0() | 0;
 $536 = _i64Add($534 | 0, $535 | 0, $532 | 0, $533 | 0) | 0;
 $537 = getTempRet0() | 0;
 $538 = $536 ^ $523;
 $539 = $537 ^ $522;
 $540 = _bitshift64Lshr($538 | 0, $539 | 0, 16) | 0;
 $541 = getTempRet0() | 0;
 $542 = _bitshift64Shl($538 | 0, $539 | 0, 48) | 0;
 $543 = getTempRet0() | 0;
 $544 = $540 | $542;
 $545 = $541 | $543;
 $546 = _i64Add($544 | 0, $545 | 0, $524 | 0, $525 | 0) | 0;
 $547 = getTempRet0() | 0;
 $548 = $546 ^ $532;
 $549 = $547 ^ $533;
 $550 = _bitshift64Lshr($548 | 0, $549 | 0, 63) | 0;
 $551 = getTempRet0() | 0;
 $552 = _bitshift64Shl($548 | 0, $549 | 0, 1) | 0;
 $553 = getTempRet0() | 0;
 $554 = $550 | $552;
 $555 = $551 | $553;
 $556 = _i64Add($422 | 0, $423 | 0, $4 | 0, $5 | 0) | 0;
 $557 = getTempRet0() | 0;
 $558 = _i64Add($556 | 0, $557 | 0, $478 | 0, $479 | 0) | 0;
 $559 = getTempRet0() | 0;
 $560 = $558 ^ $544;
 $561 = $559 ^ $545;
 $562 = _i64Add($561 | 0, $560 | 0, $508 | 0, $509 | 0) | 0;
 $563 = getTempRet0() | 0;
 $564 = $562 ^ $478;
 $565 = $563 ^ $479;
 $566 = _bitshift64Lshr($564 | 0, $565 | 0, 24) | 0;
 $567 = getTempRet0() | 0;
 $568 = _bitshift64Shl($564 | 0, $565 | 0, 40) | 0;
 $569 = getTempRet0() | 0;
 $570 = $566 | $568;
 $571 = $567 | $569;
 $572 = _i64Add($558 | 0, $559 | 0, $26 | 0, $27 | 0) | 0;
 $573 = getTempRet0() | 0;
 $574 = _i64Add($572 | 0, $573 | 0, $570 | 0, $571 | 0) | 0;
 $575 = getTempRet0() | 0;
 $576 = $574 ^ $561;
 $577 = $575 ^ $560;
 $578 = _bitshift64Lshr($576 | 0, $577 | 0, 16) | 0;
 $579 = getTempRet0() | 0;
 $580 = _bitshift64Shl($576 | 0, $577 | 0, 48) | 0;
 $581 = getTempRet0() | 0;
 $582 = $578 | $580;
 $583 = $579 | $581;
 $584 = _i64Add($582 | 0, $583 | 0, $562 | 0, $563 | 0) | 0;
 $585 = getTempRet0() | 0;
 $586 = $584 ^ $570;
 $587 = $585 ^ $571;
 $588 = _bitshift64Lshr($586 | 0, $587 | 0, 63) | 0;
 $589 = getTempRet0() | 0;
 $590 = _bitshift64Shl($586 | 0, $587 | 0, 1) | 0;
 $591 = getTempRet0() | 0;
 $592 = $588 | $590;
 $593 = $589 | $591;
 $594 = _i64Add($460 | 0, $461 | 0, $2 | 0, $3 | 0) | 0;
 $595 = getTempRet0() | 0;
 $596 = _i64Add($594 | 0, $595 | 0, $516 | 0, $517 | 0) | 0;
 $597 = getTempRet0() | 0;
 $598 = $596 ^ $430;
 $599 = $597 ^ $431;
 $600 = _i64Add($599 | 0, $598 | 0, $546 | 0, $547 | 0) | 0;
 $601 = getTempRet0() | 0;
 $602 = $600 ^ $516;
 $603 = $601 ^ $517;
 $604 = _bitshift64Lshr($602 | 0, $603 | 0, 24) | 0;
 $605 = getTempRet0() | 0;
 $606 = _bitshift64Shl($602 | 0, $603 | 0, 40) | 0;
 $607 = getTempRet0() | 0;
 $608 = $604 | $606;
 $609 = $605 | $607;
 $610 = _i64Add($596 | 0, $597 | 0, $6 | 0, $7 | 0) | 0;
 $611 = getTempRet0() | 0;
 $612 = _i64Add($610 | 0, $611 | 0, $608 | 0, $609 | 0) | 0;
 $613 = getTempRet0() | 0;
 $614 = $612 ^ $599;
 $615 = $613 ^ $598;
 $616 = _bitshift64Lshr($614 | 0, $615 | 0, 16) | 0;
 $617 = getTempRet0() | 0;
 $618 = _bitshift64Shl($614 | 0, $615 | 0, 48) | 0;
 $619 = getTempRet0() | 0;
 $620 = $616 | $618;
 $621 = $617 | $619;
 $622 = _i64Add($620 | 0, $621 | 0, $600 | 0, $601 | 0) | 0;
 $623 = getTempRet0() | 0;
 $624 = $622 ^ $608;
 $625 = $623 ^ $609;
 $626 = _bitshift64Lshr($624 | 0, $625 | 0, 63) | 0;
 $627 = getTempRet0() | 0;
 $628 = _bitshift64Shl($624 | 0, $625 | 0, 1) | 0;
 $629 = getTempRet0() | 0;
 $630 = $626 | $628;
 $631 = $627 | $629;
 $632 = _i64Add($498 | 0, $499 | 0, $24 | 0, $25 | 0) | 0;
 $633 = getTempRet0() | 0;
 $634 = _i64Add($632 | 0, $633 | 0, $554 | 0, $555 | 0) | 0;
 $635 = getTempRet0() | 0;
 $636 = $634 ^ $468;
 $637 = $635 ^ $469;
 $638 = _i64Add($637 | 0, $636 | 0, $432 | 0, $433 | 0) | 0;
 $639 = getTempRet0() | 0;
 $640 = $638 ^ $554;
 $641 = $639 ^ $555;
 $642 = _bitshift64Lshr($640 | 0, $641 | 0, 24) | 0;
 $643 = getTempRet0() | 0;
 $644 = _bitshift64Shl($640 | 0, $641 | 0, 40) | 0;
 $645 = getTempRet0() | 0;
 $646 = $642 | $644;
 $647 = $643 | $645;
 $648 = _i64Add($634 | 0, $635 | 0, $16 | 0, $17 | 0) | 0;
 $649 = getTempRet0() | 0;
 $650 = _i64Add($648 | 0, $649 | 0, $646 | 0, $647 | 0) | 0;
 $651 = getTempRet0() | 0;
 $652 = $650 ^ $637;
 $653 = $651 ^ $636;
 $654 = _bitshift64Lshr($652 | 0, $653 | 0, 16) | 0;
 $655 = getTempRet0() | 0;
 $656 = _bitshift64Shl($652 | 0, $653 | 0, 48) | 0;
 $657 = getTempRet0() | 0;
 $658 = $654 | $656;
 $659 = $655 | $657;
 $660 = _i64Add($658 | 0, $659 | 0, $638 | 0, $639 | 0) | 0;
 $661 = getTempRet0() | 0;
 $662 = $660 ^ $646;
 $663 = $661 ^ $647;
 $664 = _bitshift64Lshr($662 | 0, $663 | 0, 63) | 0;
 $665 = getTempRet0() | 0;
 $666 = _bitshift64Shl($662 | 0, $663 | 0, 1) | 0;
 $667 = getTempRet0() | 0;
 $668 = $664 | $666;
 $669 = $665 | $667;
 $670 = _i64Add($536 | 0, $537 | 0, $12 | 0, $13 | 0) | 0;
 $671 = getTempRet0() | 0;
 $672 = _i64Add($670 | 0, $671 | 0, $440 | 0, $441 | 0) | 0;
 $673 = getTempRet0() | 0;
 $674 = $672 ^ $506;
 $675 = $673 ^ $507;
 $676 = _i64Add($675 | 0, $674 | 0, $470 | 0, $471 | 0) | 0;
 $677 = getTempRet0() | 0;
 $678 = $676 ^ $440;
 $679 = $677 ^ $441;
 $680 = _bitshift64Lshr($678 | 0, $679 | 0, 24) | 0;
 $681 = getTempRet0() | 0;
 $682 = _bitshift64Shl($678 | 0, $679 | 0, 40) | 0;
 $683 = getTempRet0() | 0;
 $684 = $680 | $682;
 $685 = $681 | $683;
 $686 = _i64Add($672 | 0, $673 | 0, $8 | 0, $9 | 0) | 0;
 $687 = getTempRet0() | 0;
 $688 = _i64Add($686 | 0, $687 | 0, $684 | 0, $685 | 0) | 0;
 $689 = getTempRet0() | 0;
 $690 = $688 ^ $675;
 $691 = $689 ^ $674;
 $692 = _bitshift64Lshr($690 | 0, $691 | 0, 16) | 0;
 $693 = getTempRet0() | 0;
 $694 = _bitshift64Shl($690 | 0, $691 | 0, 48) | 0;
 $695 = getTempRet0() | 0;
 $696 = $692 | $694;
 $697 = $693 | $695;
 $698 = _i64Add($696 | 0, $697 | 0, $676 | 0, $677 | 0) | 0;
 $699 = getTempRet0() | 0;
 $700 = $698 ^ $684;
 $701 = $699 ^ $685;
 $702 = _bitshift64Lshr($700 | 0, $701 | 0, 63) | 0;
 $703 = getTempRet0() | 0;
 $704 = _bitshift64Shl($700 | 0, $701 | 0, 1) | 0;
 $705 = getTempRet0() | 0;
 $706 = $702 | $704;
 $707 = $703 | $705;
 $708 = _i64Add($574 | 0, $575 | 0, $24 | 0, $25 | 0) | 0;
 $709 = getTempRet0() | 0;
 $710 = _i64Add($708 | 0, $709 | 0, $706 | 0, $707 | 0) | 0;
 $711 = getTempRet0() | 0;
 $712 = $710 ^ $620;
 $713 = $711 ^ $621;
 $714 = _i64Add($713 | 0, $712 | 0, $660 | 0, $661 | 0) | 0;
 $715 = getTempRet0() | 0;
 $716 = $714 ^ $706;
 $717 = $715 ^ $707;
 $718 = _bitshift64Lshr($716 | 0, $717 | 0, 24) | 0;
 $719 = getTempRet0() | 0;
 $720 = _bitshift64Shl($716 | 0, $717 | 0, 40) | 0;
 $721 = getTempRet0() | 0;
 $722 = $718 | $720;
 $723 = $719 | $721;
 $724 = _i64Add($710 | 0, $711 | 0, $18 | 0, $19 | 0) | 0;
 $725 = getTempRet0() | 0;
 $726 = _i64Add($724 | 0, $725 | 0, $722 | 0, $723 | 0) | 0;
 $727 = getTempRet0() | 0;
 $728 = $726 ^ $713;
 $729 = $727 ^ $712;
 $730 = _bitshift64Lshr($728 | 0, $729 | 0, 16) | 0;
 $731 = getTempRet0() | 0;
 $732 = _bitshift64Shl($728 | 0, $729 | 0, 48) | 0;
 $733 = getTempRet0() | 0;
 $734 = $730 | $732;
 $735 = $731 | $733;
 $736 = _i64Add($734 | 0, $735 | 0, $714 | 0, $715 | 0) | 0;
 $737 = getTempRet0() | 0;
 $738 = $736 ^ $722;
 $739 = $737 ^ $723;
 $740 = _bitshift64Lshr($738 | 0, $739 | 0, 63) | 0;
 $741 = getTempRet0() | 0;
 $742 = _bitshift64Shl($738 | 0, $739 | 0, 1) | 0;
 $743 = getTempRet0() | 0;
 $744 = $740 | $742;
 $745 = $741 | $743;
 $746 = _i64Add($612 | 0, $613 | 0, $26 | 0, $27 | 0) | 0;
 $747 = getTempRet0() | 0;
 $748 = _i64Add($746 | 0, $747 | 0, $592 | 0, $593 | 0) | 0;
 $749 = getTempRet0() | 0;
 $750 = $748 ^ $658;
 $751 = $749 ^ $659;
 $752 = _i64Add($751 | 0, $750 | 0, $698 | 0, $699 | 0) | 0;
 $753 = getTempRet0() | 0;
 $754 = $752 ^ $592;
 $755 = $753 ^ $593;
 $756 = _bitshift64Lshr($754 | 0, $755 | 0, 24) | 0;
 $757 = getTempRet0() | 0;
 $758 = _bitshift64Shl($754 | 0, $755 | 0, 40) | 0;
 $759 = getTempRet0() | 0;
 $760 = $756 | $758;
 $761 = $757 | $759;
 $762 = _i64Add($748 | 0, $749 | 0, $2 | 0, $3 | 0) | 0;
 $763 = getTempRet0() | 0;
 $764 = _i64Add($762 | 0, $763 | 0, $760 | 0, $761 | 0) | 0;
 $765 = getTempRet0() | 0;
 $766 = $764 ^ $751;
 $767 = $765 ^ $750;
 $768 = _bitshift64Lshr($766 | 0, $767 | 0, 16) | 0;
 $769 = getTempRet0() | 0;
 $770 = _bitshift64Shl($766 | 0, $767 | 0, 48) | 0;
 $771 = getTempRet0() | 0;
 $772 = $768 | $770;
 $773 = $769 | $771;
 $774 = _i64Add($772 | 0, $773 | 0, $752 | 0, $753 | 0) | 0;
 $775 = getTempRet0() | 0;
 $776 = $774 ^ $760;
 $777 = $775 ^ $761;
 $778 = _bitshift64Lshr($776 | 0, $777 | 0, 63) | 0;
 $779 = getTempRet0() | 0;
 $780 = _bitshift64Shl($776 | 0, $777 | 0, 1) | 0;
 $781 = getTempRet0() | 0;
 $782 = $778 | $780;
 $783 = $779 | $781;
 $784 = _i64Add($650 | 0, $651 | 0, $12 | 0, $13 | 0) | 0;
 $785 = getTempRet0() | 0;
 $786 = _i64Add($784 | 0, $785 | 0, $630 | 0, $631 | 0) | 0;
 $787 = getTempRet0() | 0;
 $788 = $786 ^ $696;
 $789 = $787 ^ $697;
 $790 = _i64Add($789 | 0, $788 | 0, $584 | 0, $585 | 0) | 0;
 $791 = getTempRet0() | 0;
 $792 = $790 ^ $630;
 $793 = $791 ^ $631;
 $794 = _bitshift64Lshr($792 | 0, $793 | 0, 24) | 0;
 $795 = getTempRet0() | 0;
 $796 = _bitshift64Shl($792 | 0, $793 | 0, 40) | 0;
 $797 = getTempRet0() | 0;
 $798 = $794 | $796;
 $799 = $795 | $797;
 $800 = _i64Add($786 | 0, $787 | 0, $6 | 0, $7 | 0) | 0;
 $801 = getTempRet0() | 0;
 $802 = _i64Add($800 | 0, $801 | 0, $798 | 0, $799 | 0) | 0;
 $803 = getTempRet0() | 0;
 $804 = $802 ^ $789;
 $805 = $803 ^ $788;
 $806 = _bitshift64Lshr($804 | 0, $805 | 0, 16) | 0;
 $807 = getTempRet0() | 0;
 $808 = _bitshift64Shl($804 | 0, $805 | 0, 48) | 0;
 $809 = getTempRet0() | 0;
 $810 = $806 | $808;
 $811 = $807 | $809;
 $812 = _i64Add($810 | 0, $811 | 0, $790 | 0, $791 | 0) | 0;
 $813 = getTempRet0() | 0;
 $814 = $812 ^ $798;
 $815 = $813 ^ $799;
 $816 = _bitshift64Lshr($814 | 0, $815 | 0, 63) | 0;
 $817 = getTempRet0() | 0;
 $818 = _bitshift64Shl($814 | 0, $815 | 0, 1) | 0;
 $819 = getTempRet0() | 0;
 $820 = $816 | $818;
 $821 = $817 | $819;
 $822 = _i64Add($688 | 0, $689 | 0, $32 | 0, $33 | 0) | 0;
 $823 = getTempRet0() | 0;
 $824 = _i64Add($822 | 0, $823 | 0, $668 | 0, $669 | 0) | 0;
 $825 = getTempRet0() | 0;
 $826 = $824 ^ $582;
 $827 = $825 ^ $583;
 $828 = _i64Add($827 | 0, $826 | 0, $622 | 0, $623 | 0) | 0;
 $829 = getTempRet0() | 0;
 $830 = $828 ^ $668;
 $831 = $829 ^ $669;
 $832 = _bitshift64Lshr($830 | 0, $831 | 0, 24) | 0;
 $833 = getTempRet0() | 0;
 $834 = _bitshift64Shl($830 | 0, $831 | 0, 40) | 0;
 $835 = getTempRet0() | 0;
 $836 = $832 | $834;
 $837 = $833 | $835;
 $838 = _i64Add($824 | 0, $825 | 0, $28 | 0, $29 | 0) | 0;
 $839 = getTempRet0() | 0;
 $840 = _i64Add($838 | 0, $839 | 0, $836 | 0, $837 | 0) | 0;
 $841 = getTempRet0() | 0;
 $842 = $840 ^ $827;
 $843 = $841 ^ $826;
 $844 = _bitshift64Lshr($842 | 0, $843 | 0, 16) | 0;
 $845 = getTempRet0() | 0;
 $846 = _bitshift64Shl($842 | 0, $843 | 0, 48) | 0;
 $847 = getTempRet0() | 0;
 $848 = $844 | $846;
 $849 = $845 | $847;
 $850 = _i64Add($848 | 0, $849 | 0, $828 | 0, $829 | 0) | 0;
 $851 = getTempRet0() | 0;
 $852 = $850 ^ $836;
 $853 = $851 ^ $837;
 $854 = _bitshift64Lshr($852 | 0, $853 | 0, 63) | 0;
 $855 = getTempRet0() | 0;
 $856 = _bitshift64Shl($852 | 0, $853 | 0, 1) | 0;
 $857 = getTempRet0() | 0;
 $858 = $854 | $856;
 $859 = $855 | $857;
 $860 = _i64Add($726 | 0, $727 | 0, $22 | 0, $23 | 0) | 0;
 $861 = getTempRet0() | 0;
 $862 = _i64Add($860 | 0, $861 | 0, $782 | 0, $783 | 0) | 0;
 $863 = getTempRet0() | 0;
 $864 = $862 ^ $848;
 $865 = $863 ^ $849;
 $866 = _i64Add($865 | 0, $864 | 0, $812 | 0, $813 | 0) | 0;
 $867 = getTempRet0() | 0;
 $868 = $866 ^ $782;
 $869 = $867 ^ $783;
 $870 = _bitshift64Lshr($868 | 0, $869 | 0, 24) | 0;
 $871 = getTempRet0() | 0;
 $872 = _bitshift64Shl($868 | 0, $869 | 0, 40) | 0;
 $873 = getTempRet0() | 0;
 $874 = $870 | $872;
 $875 = $871 | $873;
 $876 = _i64Add($862 | 0, $863 | 0, $30 | 0, $31 | 0) | 0;
 $877 = getTempRet0() | 0;
 $878 = _i64Add($876 | 0, $877 | 0, $874 | 0, $875 | 0) | 0;
 $879 = getTempRet0() | 0;
 $880 = $878 ^ $865;
 $881 = $879 ^ $864;
 $882 = _bitshift64Lshr($880 | 0, $881 | 0, 16) | 0;
 $883 = getTempRet0() | 0;
 $884 = _bitshift64Shl($880 | 0, $881 | 0, 48) | 0;
 $885 = getTempRet0() | 0;
 $886 = $882 | $884;
 $887 = $883 | $885;
 $888 = _i64Add($886 | 0, $887 | 0, $866 | 0, $867 | 0) | 0;
 $889 = getTempRet0() | 0;
 $890 = $888 ^ $874;
 $891 = $889 ^ $875;
 $892 = _bitshift64Lshr($890 | 0, $891 | 0, 63) | 0;
 $893 = getTempRet0() | 0;
 $894 = _bitshift64Shl($890 | 0, $891 | 0, 1) | 0;
 $895 = getTempRet0() | 0;
 $896 = $892 | $894;
 $897 = $893 | $895;
 $898 = _i64Add($764 | 0, $765 | 0, $8 | 0, $9 | 0) | 0;
 $899 = getTempRet0() | 0;
 $900 = _i64Add($898 | 0, $899 | 0, $820 | 0, $821 | 0) | 0;
 $901 = getTempRet0() | 0;
 $902 = $900 ^ $734;
 $903 = $901 ^ $735;
 $904 = _i64Add($903 | 0, $902 | 0, $850 | 0, $851 | 0) | 0;
 $905 = getTempRet0() | 0;
 $906 = $904 ^ $820;
 $907 = $905 ^ $821;
 $908 = _bitshift64Lshr($906 | 0, $907 | 0, 24) | 0;
 $909 = getTempRet0() | 0;
 $910 = _bitshift64Shl($906 | 0, $907 | 0, 40) | 0;
 $911 = getTempRet0() | 0;
 $912 = $908 | $910;
 $913 = $909 | $911;
 $914 = _i64Add($900 | 0, $901 | 0, $14 | 0, $15 | 0) | 0;
 $915 = getTempRet0() | 0;
 $916 = _i64Add($914 | 0, $915 | 0, $912 | 0, $913 | 0) | 0;
 $917 = getTempRet0() | 0;
 $918 = $916 ^ $903;
 $919 = $917 ^ $902;
 $920 = _bitshift64Lshr($918 | 0, $919 | 0, 16) | 0;
 $921 = getTempRet0() | 0;
 $922 = _bitshift64Shl($918 | 0, $919 | 0, 48) | 0;
 $923 = getTempRet0() | 0;
 $924 = $920 | $922;
 $925 = $921 | $923;
 $926 = _i64Add($924 | 0, $925 | 0, $904 | 0, $905 | 0) | 0;
 $927 = getTempRet0() | 0;
 $928 = $926 ^ $912;
 $929 = $927 ^ $913;
 $930 = _bitshift64Lshr($928 | 0, $929 | 0, 63) | 0;
 $931 = getTempRet0() | 0;
 $932 = _bitshift64Shl($928 | 0, $929 | 0, 1) | 0;
 $933 = getTempRet0() | 0;
 $934 = $930 | $932;
 $935 = $931 | $933;
 $936 = _i64Add($802 | 0, $803 | 0, $16 | 0, $17 | 0) | 0;
 $937 = getTempRet0() | 0;
 $938 = _i64Add($936 | 0, $937 | 0, $858 | 0, $859 | 0) | 0;
 $939 = getTempRet0() | 0;
 $940 = $938 ^ $772;
 $941 = $939 ^ $773;
 $942 = _i64Add($941 | 0, $940 | 0, $736 | 0, $737 | 0) | 0;
 $943 = getTempRet0() | 0;
 $944 = $942 ^ $858;
 $945 = $943 ^ $859;
 $946 = _bitshift64Lshr($944 | 0, $945 | 0, 24) | 0;
 $947 = getTempRet0() | 0;
 $948 = _bitshift64Shl($944 | 0, $945 | 0, 40) | 0;
 $949 = getTempRet0() | 0;
 $950 = $946 | $948;
 $951 = $947 | $949;
 $952 = _i64Add($938 | 0, $939 | 0, $4 | 0, $5 | 0) | 0;
 $953 = getTempRet0() | 0;
 $954 = _i64Add($952 | 0, $953 | 0, $950 | 0, $951 | 0) | 0;
 $955 = getTempRet0() | 0;
 $956 = $954 ^ $941;
 $957 = $955 ^ $940;
 $958 = _bitshift64Lshr($956 | 0, $957 | 0, 16) | 0;
 $959 = getTempRet0() | 0;
 $960 = _bitshift64Shl($956 | 0, $957 | 0, 48) | 0;
 $961 = getTempRet0() | 0;
 $962 = $958 | $960;
 $963 = $959 | $961;
 $964 = _i64Add($962 | 0, $963 | 0, $942 | 0, $943 | 0) | 0;
 $965 = getTempRet0() | 0;
 $966 = $964 ^ $950;
 $967 = $965 ^ $951;
 $968 = _bitshift64Lshr($966 | 0, $967 | 0, 63) | 0;
 $969 = getTempRet0() | 0;
 $970 = _bitshift64Shl($966 | 0, $967 | 0, 1) | 0;
 $971 = getTempRet0() | 0;
 $972 = $968 | $970;
 $973 = $969 | $971;
 $974 = _i64Add($840 | 0, $841 | 0, $20 | 0, $21 | 0) | 0;
 $975 = getTempRet0() | 0;
 $976 = _i64Add($974 | 0, $975 | 0, $744 | 0, $745 | 0) | 0;
 $977 = getTempRet0() | 0;
 $978 = $976 ^ $810;
 $979 = $977 ^ $811;
 $980 = _i64Add($979 | 0, $978 | 0, $774 | 0, $775 | 0) | 0;
 $981 = getTempRet0() | 0;
 $982 = $980 ^ $744;
 $983 = $981 ^ $745;
 $984 = _bitshift64Lshr($982 | 0, $983 | 0, 24) | 0;
 $985 = getTempRet0() | 0;
 $986 = _bitshift64Shl($982 | 0, $983 | 0, 40) | 0;
 $987 = getTempRet0() | 0;
 $988 = $984 | $986;
 $989 = $985 | $987;
 $990 = _i64Add($976 | 0, $977 | 0, $10 | 0, $11 | 0) | 0;
 $991 = getTempRet0() | 0;
 $992 = _i64Add($990 | 0, $991 | 0, $988 | 0, $989 | 0) | 0;
 $993 = getTempRet0() | 0;
 $994 = $992 ^ $979;
 $995 = $993 ^ $978;
 $996 = _bitshift64Lshr($994 | 0, $995 | 0, 16) | 0;
 $997 = getTempRet0() | 0;
 $998 = _bitshift64Shl($994 | 0, $995 | 0, 48) | 0;
 $999 = getTempRet0() | 0;
 $1000 = $996 | $998;
 $1001 = $997 | $999;
 $1002 = _i64Add($1000 | 0, $1001 | 0, $980 | 0, $981 | 0) | 0;
 $1003 = getTempRet0() | 0;
 $1004 = $1002 ^ $988;
 $1005 = $1003 ^ $989;
 $1006 = _bitshift64Lshr($1004 | 0, $1005 | 0, 63) | 0;
 $1007 = getTempRet0() | 0;
 $1008 = _bitshift64Shl($1004 | 0, $1005 | 0, 1) | 0;
 $1009 = getTempRet0() | 0;
 $1010 = $1006 | $1008;
 $1011 = $1007 | $1009;
 $1012 = _i64Add($878 | 0, $879 | 0, $16 | 0, $17 | 0) | 0;
 $1013 = getTempRet0() | 0;
 $1014 = _i64Add($1012 | 0, $1013 | 0, $1010 | 0, $1011 | 0) | 0;
 $1015 = getTempRet0() | 0;
 $1016 = $1014 ^ $924;
 $1017 = $1015 ^ $925;
 $1018 = _i64Add($1017 | 0, $1016 | 0, $964 | 0, $965 | 0) | 0;
 $1019 = getTempRet0() | 0;
 $1020 = $1018 ^ $1010;
 $1021 = $1019 ^ $1011;
 $1022 = _bitshift64Lshr($1020 | 0, $1021 | 0, 24) | 0;
 $1023 = getTempRet0() | 0;
 $1024 = _bitshift64Shl($1020 | 0, $1021 | 0, 40) | 0;
 $1025 = getTempRet0() | 0;
 $1026 = $1022 | $1024;
 $1027 = $1023 | $1025;
 $1028 = _i64Add($1014 | 0, $1015 | 0, $20 | 0, $21 | 0) | 0;
 $1029 = getTempRet0() | 0;
 $1030 = _i64Add($1028 | 0, $1029 | 0, $1026 | 0, $1027 | 0) | 0;
 $1031 = getTempRet0() | 0;
 $1032 = $1030 ^ $1017;
 $1033 = $1031 ^ $1016;
 $1034 = _bitshift64Lshr($1032 | 0, $1033 | 0, 16) | 0;
 $1035 = getTempRet0() | 0;
 $1036 = _bitshift64Shl($1032 | 0, $1033 | 0, 48) | 0;
 $1037 = getTempRet0() | 0;
 $1038 = $1034 | $1036;
 $1039 = $1035 | $1037;
 $1040 = _i64Add($1038 | 0, $1039 | 0, $1018 | 0, $1019 | 0) | 0;
 $1041 = getTempRet0() | 0;
 $1042 = $1040 ^ $1026;
 $1043 = $1041 ^ $1027;
 $1044 = _bitshift64Lshr($1042 | 0, $1043 | 0, 63) | 0;
 $1045 = getTempRet0() | 0;
 $1046 = _bitshift64Shl($1042 | 0, $1043 | 0, 1) | 0;
 $1047 = getTempRet0() | 0;
 $1048 = $1044 | $1046;
 $1049 = $1045 | $1047;
 $1050 = _i64Add($916 | 0, $917 | 0, $8 | 0, $9 | 0) | 0;
 $1051 = getTempRet0() | 0;
 $1052 = _i64Add($1050 | 0, $1051 | 0, $896 | 0, $897 | 0) | 0;
 $1053 = getTempRet0() | 0;
 $1054 = $1052 ^ $962;
 $1055 = $1053 ^ $963;
 $1056 = _i64Add($1055 | 0, $1054 | 0, $1002 | 0, $1003 | 0) | 0;
 $1057 = getTempRet0() | 0;
 $1058 = $1056 ^ $896;
 $1059 = $1057 ^ $897;
 $1060 = _bitshift64Lshr($1058 | 0, $1059 | 0, 24) | 0;
 $1061 = getTempRet0() | 0;
 $1062 = _bitshift64Shl($1058 | 0, $1059 | 0, 40) | 0;
 $1063 = getTempRet0() | 0;
 $1064 = $1060 | $1062;
 $1065 = $1061 | $1063;
 $1066 = _i64Add($1052 | 0, $1053 | 0, $4 | 0, $5 | 0) | 0;
 $1067 = getTempRet0() | 0;
 $1068 = _i64Add($1066 | 0, $1067 | 0, $1064 | 0, $1065 | 0) | 0;
 $1069 = getTempRet0() | 0;
 $1070 = $1068 ^ $1055;
 $1071 = $1069 ^ $1054;
 $1072 = _bitshift64Lshr($1070 | 0, $1071 | 0, 16) | 0;
 $1073 = getTempRet0() | 0;
 $1074 = _bitshift64Shl($1070 | 0, $1071 | 0, 48) | 0;
 $1075 = getTempRet0() | 0;
 $1076 = $1072 | $1074;
 $1077 = $1073 | $1075;
 $1078 = _i64Add($1076 | 0, $1077 | 0, $1056 | 0, $1057 | 0) | 0;
 $1079 = getTempRet0() | 0;
 $1080 = $1078 ^ $1064;
 $1081 = $1079 ^ $1065;
 $1082 = _bitshift64Lshr($1080 | 0, $1081 | 0, 63) | 0;
 $1083 = getTempRet0() | 0;
 $1084 = _bitshift64Shl($1080 | 0, $1081 | 0, 1) | 0;
 $1085 = getTempRet0() | 0;
 $1086 = $1082 | $1084;
 $1087 = $1083 | $1085;
 $1088 = _i64Add($954 | 0, $955 | 0, $28 | 0, $29 | 0) | 0;
 $1089 = getTempRet0() | 0;
 $1090 = _i64Add($1088 | 0, $1089 | 0, $934 | 0, $935 | 0) | 0;
 $1091 = getTempRet0() | 0;
 $1092 = $1090 ^ $1000;
 $1093 = $1091 ^ $1001;
 $1094 = _i64Add($1093 | 0, $1092 | 0, $888 | 0, $889 | 0) | 0;
 $1095 = getTempRet0() | 0;
 $1096 = $1094 ^ $934;
 $1097 = $1095 ^ $935;
 $1098 = _bitshift64Lshr($1096 | 0, $1097 | 0, 24) | 0;
 $1099 = getTempRet0() | 0;
 $1100 = _bitshift64Shl($1096 | 0, $1097 | 0, 40) | 0;
 $1101 = getTempRet0() | 0;
 $1102 = $1098 | $1100;
 $1103 = $1099 | $1101;
 $1104 = _i64Add($1090 | 0, $1091 | 0, $26 | 0, $27 | 0) | 0;
 $1105 = getTempRet0() | 0;
 $1106 = _i64Add($1104 | 0, $1105 | 0, $1102 | 0, $1103 | 0) | 0;
 $1107 = getTempRet0() | 0;
 $1108 = $1106 ^ $1093;
 $1109 = $1107 ^ $1092;
 $1110 = _bitshift64Lshr($1108 | 0, $1109 | 0, 16) | 0;
 $1111 = getTempRet0() | 0;
 $1112 = _bitshift64Shl($1108 | 0, $1109 | 0, 48) | 0;
 $1113 = getTempRet0() | 0;
 $1114 = $1110 | $1112;
 $1115 = $1111 | $1113;
 $1116 = _i64Add($1114 | 0, $1115 | 0, $1094 | 0, $1095 | 0) | 0;
 $1117 = getTempRet0() | 0;
 $1118 = $1116 ^ $1102;
 $1119 = $1117 ^ $1103;
 $1120 = _bitshift64Lshr($1118 | 0, $1119 | 0, 63) | 0;
 $1121 = getTempRet0() | 0;
 $1122 = _bitshift64Shl($1118 | 0, $1119 | 0, 1) | 0;
 $1123 = getTempRet0() | 0;
 $1124 = $1120 | $1122;
 $1125 = $1121 | $1123;
 $1126 = _i64Add($992 | 0, $993 | 0, $24 | 0, $25 | 0) | 0;
 $1127 = getTempRet0() | 0;
 $1128 = _i64Add($1126 | 0, $1127 | 0, $972 | 0, $973 | 0) | 0;
 $1129 = getTempRet0() | 0;
 $1130 = $1128 ^ $886;
 $1131 = $1129 ^ $887;
 $1132 = _i64Add($1131 | 0, $1130 | 0, $926 | 0, $927 | 0) | 0;
 $1133 = getTempRet0() | 0;
 $1134 = $1132 ^ $972;
 $1135 = $1133 ^ $973;
 $1136 = _bitshift64Lshr($1134 | 0, $1135 | 0, 24) | 0;
 $1137 = getTempRet0() | 0;
 $1138 = _bitshift64Shl($1134 | 0, $1135 | 0, 40) | 0;
 $1139 = getTempRet0() | 0;
 $1140 = $1136 | $1138;
 $1141 = $1137 | $1139;
 $1142 = _i64Add($1128 | 0, $1129 | 0, $30 | 0, $31 | 0) | 0;
 $1143 = getTempRet0() | 0;
 $1144 = _i64Add($1142 | 0, $1143 | 0, $1140 | 0, $1141 | 0) | 0;
 $1145 = getTempRet0() | 0;
 $1146 = $1144 ^ $1131;
 $1147 = $1145 ^ $1130;
 $1148 = _bitshift64Lshr($1146 | 0, $1147 | 0, 16) | 0;
 $1149 = getTempRet0() | 0;
 $1150 = _bitshift64Shl($1146 | 0, $1147 | 0, 48) | 0;
 $1151 = getTempRet0() | 0;
 $1152 = $1148 | $1150;
 $1153 = $1149 | $1151;
 $1154 = _i64Add($1152 | 0, $1153 | 0, $1132 | 0, $1133 | 0) | 0;
 $1155 = getTempRet0() | 0;
 $1156 = $1154 ^ $1140;
 $1157 = $1155 ^ $1141;
 $1158 = _bitshift64Lshr($1156 | 0, $1157 | 0, 63) | 0;
 $1159 = getTempRet0() | 0;
 $1160 = _bitshift64Shl($1156 | 0, $1157 | 0, 1) | 0;
 $1161 = getTempRet0() | 0;
 $1162 = $1158 | $1160;
 $1163 = $1159 | $1161;
 $1164 = _i64Add($1030 | 0, $1031 | 0, $6 | 0, $7 | 0) | 0;
 $1165 = getTempRet0() | 0;
 $1166 = _i64Add($1164 | 0, $1165 | 0, $1086 | 0, $1087 | 0) | 0;
 $1167 = getTempRet0() | 0;
 $1168 = $1166 ^ $1152;
 $1169 = $1167 ^ $1153;
 $1170 = _i64Add($1169 | 0, $1168 | 0, $1116 | 0, $1117 | 0) | 0;
 $1171 = getTempRet0() | 0;
 $1172 = $1170 ^ $1086;
 $1173 = $1171 ^ $1087;
 $1174 = _bitshift64Lshr($1172 | 0, $1173 | 0, 24) | 0;
 $1175 = getTempRet0() | 0;
 $1176 = _bitshift64Shl($1172 | 0, $1173 | 0, 40) | 0;
 $1177 = getTempRet0() | 0;
 $1178 = $1174 | $1176;
 $1179 = $1175 | $1177;
 $1180 = _i64Add($1166 | 0, $1167 | 0, $14 | 0, $15 | 0) | 0;
 $1181 = getTempRet0() | 0;
 $1182 = _i64Add($1180 | 0, $1181 | 0, $1178 | 0, $1179 | 0) | 0;
 $1183 = getTempRet0() | 0;
 $1184 = $1182 ^ $1169;
 $1185 = $1183 ^ $1168;
 $1186 = _bitshift64Lshr($1184 | 0, $1185 | 0, 16) | 0;
 $1187 = getTempRet0() | 0;
 $1188 = _bitshift64Shl($1184 | 0, $1185 | 0, 48) | 0;
 $1189 = getTempRet0() | 0;
 $1190 = $1186 | $1188;
 $1191 = $1187 | $1189;
 $1192 = _i64Add($1190 | 0, $1191 | 0, $1170 | 0, $1171 | 0) | 0;
 $1193 = getTempRet0() | 0;
 $1194 = $1192 ^ $1178;
 $1195 = $1193 ^ $1179;
 $1196 = _bitshift64Lshr($1194 | 0, $1195 | 0, 63) | 0;
 $1197 = getTempRet0() | 0;
 $1198 = _bitshift64Shl($1194 | 0, $1195 | 0, 1) | 0;
 $1199 = getTempRet0() | 0;
 $1200 = $1196 | $1198;
 $1201 = $1197 | $1199;
 $1202 = _i64Add($1068 | 0, $1069 | 0, $12 | 0, $13 | 0) | 0;
 $1203 = getTempRet0() | 0;
 $1204 = _i64Add($1202 | 0, $1203 | 0, $1124 | 0, $1125 | 0) | 0;
 $1205 = getTempRet0() | 0;
 $1206 = $1204 ^ $1038;
 $1207 = $1205 ^ $1039;
 $1208 = _i64Add($1207 | 0, $1206 | 0, $1154 | 0, $1155 | 0) | 0;
 $1209 = getTempRet0() | 0;
 $1210 = $1208 ^ $1124;
 $1211 = $1209 ^ $1125;
 $1212 = _bitshift64Lshr($1210 | 0, $1211 | 0, 24) | 0;
 $1213 = getTempRet0() | 0;
 $1214 = _bitshift64Shl($1210 | 0, $1211 | 0, 40) | 0;
 $1215 = getTempRet0() | 0;
 $1216 = $1212 | $1214;
 $1217 = $1213 | $1215;
 $1218 = _i64Add($1204 | 0, $1205 | 0, $22 | 0, $23 | 0) | 0;
 $1219 = getTempRet0() | 0;
 $1220 = _i64Add($1218 | 0, $1219 | 0, $1216 | 0, $1217 | 0) | 0;
 $1221 = getTempRet0() | 0;
 $1222 = $1220 ^ $1207;
 $1223 = $1221 ^ $1206;
 $1224 = _bitshift64Lshr($1222 | 0, $1223 | 0, 16) | 0;
 $1225 = getTempRet0() | 0;
 $1226 = _bitshift64Shl($1222 | 0, $1223 | 0, 48) | 0;
 $1227 = getTempRet0() | 0;
 $1228 = $1224 | $1226;
 $1229 = $1225 | $1227;
 $1230 = _i64Add($1228 | 0, $1229 | 0, $1208 | 0, $1209 | 0) | 0;
 $1231 = getTempRet0() | 0;
 $1232 = $1230 ^ $1216;
 $1233 = $1231 ^ $1217;
 $1234 = _bitshift64Lshr($1232 | 0, $1233 | 0, 63) | 0;
 $1235 = getTempRet0() | 0;
 $1236 = _bitshift64Shl($1232 | 0, $1233 | 0, 1) | 0;
 $1237 = getTempRet0() | 0;
 $1238 = $1234 | $1236;
 $1239 = $1235 | $1237;
 $1240 = _i64Add($1106 | 0, $1107 | 0, $10 | 0, $11 | 0) | 0;
 $1241 = getTempRet0() | 0;
 $1242 = _i64Add($1240 | 0, $1241 | 0, $1162 | 0, $1163 | 0) | 0;
 $1243 = getTempRet0() | 0;
 $1244 = $1242 ^ $1076;
 $1245 = $1243 ^ $1077;
 $1246 = _i64Add($1245 | 0, $1244 | 0, $1040 | 0, $1041 | 0) | 0;
 $1247 = getTempRet0() | 0;
 $1248 = $1246 ^ $1162;
 $1249 = $1247 ^ $1163;
 $1250 = _bitshift64Lshr($1248 | 0, $1249 | 0, 24) | 0;
 $1251 = getTempRet0() | 0;
 $1252 = _bitshift64Shl($1248 | 0, $1249 | 0, 40) | 0;
 $1253 = getTempRet0() | 0;
 $1254 = $1250 | $1252;
 $1255 = $1251 | $1253;
 $1256 = _i64Add($1242 | 0, $1243 | 0, $2 | 0, $3 | 0) | 0;
 $1257 = getTempRet0() | 0;
 $1258 = _i64Add($1256 | 0, $1257 | 0, $1254 | 0, $1255 | 0) | 0;
 $1259 = getTempRet0() | 0;
 $1260 = $1258 ^ $1245;
 $1261 = $1259 ^ $1244;
 $1262 = _bitshift64Lshr($1260 | 0, $1261 | 0, 16) | 0;
 $1263 = getTempRet0() | 0;
 $1264 = _bitshift64Shl($1260 | 0, $1261 | 0, 48) | 0;
 $1265 = getTempRet0() | 0;
 $1266 = $1262 | $1264;
 $1267 = $1263 | $1265;
 $1268 = _i64Add($1266 | 0, $1267 | 0, $1246 | 0, $1247 | 0) | 0;
 $1269 = getTempRet0() | 0;
 $1270 = $1268 ^ $1254;
 $1271 = $1269 ^ $1255;
 $1272 = _bitshift64Lshr($1270 | 0, $1271 | 0, 63) | 0;
 $1273 = getTempRet0() | 0;
 $1274 = _bitshift64Shl($1270 | 0, $1271 | 0, 1) | 0;
 $1275 = getTempRet0() | 0;
 $1276 = $1272 | $1274;
 $1277 = $1273 | $1275;
 $1278 = _i64Add($1144 | 0, $1145 | 0, $32 | 0, $33 | 0) | 0;
 $1279 = getTempRet0() | 0;
 $1280 = _i64Add($1278 | 0, $1279 | 0, $1048 | 0, $1049 | 0) | 0;
 $1281 = getTempRet0() | 0;
 $1282 = $1280 ^ $1114;
 $1283 = $1281 ^ $1115;
 $1284 = _i64Add($1283 | 0, $1282 | 0, $1078 | 0, $1079 | 0) | 0;
 $1285 = getTempRet0() | 0;
 $1286 = $1284 ^ $1048;
 $1287 = $1285 ^ $1049;
 $1288 = _bitshift64Lshr($1286 | 0, $1287 | 0, 24) | 0;
 $1289 = getTempRet0() | 0;
 $1290 = _bitshift64Shl($1286 | 0, $1287 | 0, 40) | 0;
 $1291 = getTempRet0() | 0;
 $1292 = $1288 | $1290;
 $1293 = $1289 | $1291;
 $1294 = _i64Add($1280 | 0, $1281 | 0, $18 | 0, $19 | 0) | 0;
 $1295 = getTempRet0() | 0;
 $1296 = _i64Add($1294 | 0, $1295 | 0, $1292 | 0, $1293 | 0) | 0;
 $1297 = getTempRet0() | 0;
 $1298 = $1296 ^ $1283;
 $1299 = $1297 ^ $1282;
 $1300 = _bitshift64Lshr($1298 | 0, $1299 | 0, 16) | 0;
 $1301 = getTempRet0() | 0;
 $1302 = _bitshift64Shl($1298 | 0, $1299 | 0, 48) | 0;
 $1303 = getTempRet0() | 0;
 $1304 = $1300 | $1302;
 $1305 = $1301 | $1303;
 $1306 = _i64Add($1304 | 0, $1305 | 0, $1284 | 0, $1285 | 0) | 0;
 $1307 = getTempRet0() | 0;
 $1308 = $1306 ^ $1292;
 $1309 = $1307 ^ $1293;
 $1310 = _bitshift64Lshr($1308 | 0, $1309 | 0, 63) | 0;
 $1311 = getTempRet0() | 0;
 $1312 = _bitshift64Shl($1308 | 0, $1309 | 0, 1) | 0;
 $1313 = getTempRet0() | 0;
 $1314 = $1310 | $1312;
 $1315 = $1311 | $1313;
 $1316 = _i64Add($1182 | 0, $1183 | 0, $20 | 0, $21 | 0) | 0;
 $1317 = getTempRet0() | 0;
 $1318 = _i64Add($1316 | 0, $1317 | 0, $1314 | 0, $1315 | 0) | 0;
 $1319 = getTempRet0() | 0;
 $1320 = $1318 ^ $1228;
 $1321 = $1319 ^ $1229;
 $1322 = _i64Add($1321 | 0, $1320 | 0, $1268 | 0, $1269 | 0) | 0;
 $1323 = getTempRet0() | 0;
 $1324 = $1322 ^ $1314;
 $1325 = $1323 ^ $1315;
 $1326 = _bitshift64Lshr($1324 | 0, $1325 | 0, 24) | 0;
 $1327 = getTempRet0() | 0;
 $1328 = _bitshift64Shl($1324 | 0, $1325 | 0, 40) | 0;
 $1329 = getTempRet0() | 0;
 $1330 = $1326 | $1328;
 $1331 = $1327 | $1329;
 $1332 = _i64Add($1318 | 0, $1319 | 0, $2 | 0, $3 | 0) | 0;
 $1333 = getTempRet0() | 0;
 $1334 = _i64Add($1332 | 0, $1333 | 0, $1330 | 0, $1331 | 0) | 0;
 $1335 = getTempRet0() | 0;
 $1336 = $1334 ^ $1321;
 $1337 = $1335 ^ $1320;
 $1338 = _bitshift64Lshr($1336 | 0, $1337 | 0, 16) | 0;
 $1339 = getTempRet0() | 0;
 $1340 = _bitshift64Shl($1336 | 0, $1337 | 0, 48) | 0;
 $1341 = getTempRet0() | 0;
 $1342 = $1338 | $1340;
 $1343 = $1339 | $1341;
 $1344 = _i64Add($1342 | 0, $1343 | 0, $1322 | 0, $1323 | 0) | 0;
 $1345 = getTempRet0() | 0;
 $1346 = $1344 ^ $1330;
 $1347 = $1345 ^ $1331;
 $1348 = _bitshift64Lshr($1346 | 0, $1347 | 0, 63) | 0;
 $1349 = getTempRet0() | 0;
 $1350 = _bitshift64Shl($1346 | 0, $1347 | 0, 1) | 0;
 $1351 = getTempRet0() | 0;
 $1352 = $1348 | $1350;
 $1353 = $1349 | $1351;
 $1354 = _i64Add($1220 | 0, $1221 | 0, $12 | 0, $13 | 0) | 0;
 $1355 = getTempRet0() | 0;
 $1356 = _i64Add($1354 | 0, $1355 | 0, $1200 | 0, $1201 | 0) | 0;
 $1357 = getTempRet0() | 0;
 $1358 = $1356 ^ $1266;
 $1359 = $1357 ^ $1267;
 $1360 = _i64Add($1359 | 0, $1358 | 0, $1306 | 0, $1307 | 0) | 0;
 $1361 = getTempRet0() | 0;
 $1362 = $1360 ^ $1200;
 $1363 = $1361 ^ $1201;
 $1364 = _bitshift64Lshr($1362 | 0, $1363 | 0, 24) | 0;
 $1365 = getTempRet0() | 0;
 $1366 = _bitshift64Shl($1362 | 0, $1363 | 0, 40) | 0;
 $1367 = getTempRet0() | 0;
 $1368 = $1364 | $1366;
 $1369 = $1365 | $1367;
 $1370 = _i64Add($1356 | 0, $1357 | 0, $16 | 0, $17 | 0) | 0;
 $1371 = getTempRet0() | 0;
 $1372 = _i64Add($1370 | 0, $1371 | 0, $1368 | 0, $1369 | 0) | 0;
 $1373 = getTempRet0() | 0;
 $1374 = $1372 ^ $1359;
 $1375 = $1373 ^ $1358;
 $1376 = _bitshift64Lshr($1374 | 0, $1375 | 0, 16) | 0;
 $1377 = getTempRet0() | 0;
 $1378 = _bitshift64Shl($1374 | 0, $1375 | 0, 48) | 0;
 $1379 = getTempRet0() | 0;
 $1380 = $1376 | $1378;
 $1381 = $1377 | $1379;
 $1382 = _i64Add($1380 | 0, $1381 | 0, $1360 | 0, $1361 | 0) | 0;
 $1383 = getTempRet0() | 0;
 $1384 = $1382 ^ $1368;
 $1385 = $1383 ^ $1369;
 $1386 = _bitshift64Lshr($1384 | 0, $1385 | 0, 63) | 0;
 $1387 = getTempRet0() | 0;
 $1388 = _bitshift64Shl($1384 | 0, $1385 | 0, 1) | 0;
 $1389 = getTempRet0() | 0;
 $1390 = $1386 | $1388;
 $1391 = $1387 | $1389;
 $1392 = _i64Add($1258 | 0, $1259 | 0, $6 | 0, $7 | 0) | 0;
 $1393 = getTempRet0() | 0;
 $1394 = _i64Add($1392 | 0, $1393 | 0, $1238 | 0, $1239 | 0) | 0;
 $1395 = getTempRet0() | 0;
 $1396 = $1394 ^ $1304;
 $1397 = $1395 ^ $1305;
 $1398 = _i64Add($1397 | 0, $1396 | 0, $1192 | 0, $1193 | 0) | 0;
 $1399 = getTempRet0() | 0;
 $1400 = $1398 ^ $1238;
 $1401 = $1399 ^ $1239;
 $1402 = _bitshift64Lshr($1400 | 0, $1401 | 0, 24) | 0;
 $1403 = getTempRet0() | 0;
 $1404 = _bitshift64Shl($1400 | 0, $1401 | 0, 40) | 0;
 $1405 = getTempRet0() | 0;
 $1406 = $1402 | $1404;
 $1407 = $1403 | $1405;
 $1408 = _i64Add($1394 | 0, $1395 | 0, $10 | 0, $11 | 0) | 0;
 $1409 = getTempRet0() | 0;
 $1410 = _i64Add($1408 | 0, $1409 | 0, $1406 | 0, $1407 | 0) | 0;
 $1411 = getTempRet0() | 0;
 $1412 = $1410 ^ $1397;
 $1413 = $1411 ^ $1396;
 $1414 = _bitshift64Lshr($1412 | 0, $1413 | 0, 16) | 0;
 $1415 = getTempRet0() | 0;
 $1416 = _bitshift64Shl($1412 | 0, $1413 | 0, 48) | 0;
 $1417 = getTempRet0() | 0;
 $1418 = $1414 | $1416;
 $1419 = $1415 | $1417;
 $1420 = _i64Add($1418 | 0, $1419 | 0, $1398 | 0, $1399 | 0) | 0;
 $1421 = getTempRet0() | 0;
 $1422 = $1420 ^ $1406;
 $1423 = $1421 ^ $1407;
 $1424 = _bitshift64Lshr($1422 | 0, $1423 | 0, 63) | 0;
 $1425 = getTempRet0() | 0;
 $1426 = _bitshift64Shl($1422 | 0, $1423 | 0, 1) | 0;
 $1427 = getTempRet0() | 0;
 $1428 = $1424 | $1426;
 $1429 = $1425 | $1427;
 $1430 = _i64Add($1296 | 0, $1297 | 0, $22 | 0, $23 | 0) | 0;
 $1431 = getTempRet0() | 0;
 $1432 = _i64Add($1430 | 0, $1431 | 0, $1276 | 0, $1277 | 0) | 0;
 $1433 = getTempRet0() | 0;
 $1434 = $1432 ^ $1190;
 $1435 = $1433 ^ $1191;
 $1436 = _i64Add($1435 | 0, $1434 | 0, $1230 | 0, $1231 | 0) | 0;
 $1437 = getTempRet0() | 0;
 $1438 = $1436 ^ $1276;
 $1439 = $1437 ^ $1277;
 $1440 = _bitshift64Lshr($1438 | 0, $1439 | 0, 24) | 0;
 $1441 = getTempRet0() | 0;
 $1442 = _bitshift64Shl($1438 | 0, $1439 | 0, 40) | 0;
 $1443 = getTempRet0() | 0;
 $1444 = $1440 | $1442;
 $1445 = $1441 | $1443;
 $1446 = _i64Add($1432 | 0, $1433 | 0, $32 | 0, $33 | 0) | 0;
 $1447 = getTempRet0() | 0;
 $1448 = _i64Add($1446 | 0, $1447 | 0, $1444 | 0, $1445 | 0) | 0;
 $1449 = getTempRet0() | 0;
 $1450 = $1448 ^ $1435;
 $1451 = $1449 ^ $1434;
 $1452 = _bitshift64Lshr($1450 | 0, $1451 | 0, 16) | 0;
 $1453 = getTempRet0() | 0;
 $1454 = _bitshift64Shl($1450 | 0, $1451 | 0, 48) | 0;
 $1455 = getTempRet0() | 0;
 $1456 = $1452 | $1454;
 $1457 = $1453 | $1455;
 $1458 = _i64Add($1456 | 0, $1457 | 0, $1436 | 0, $1437 | 0) | 0;
 $1459 = getTempRet0() | 0;
 $1460 = $1458 ^ $1444;
 $1461 = $1459 ^ $1445;
 $1462 = _bitshift64Lshr($1460 | 0, $1461 | 0, 63) | 0;
 $1463 = getTempRet0() | 0;
 $1464 = _bitshift64Shl($1460 | 0, $1461 | 0, 1) | 0;
 $1465 = getTempRet0() | 0;
 $1466 = $1462 | $1464;
 $1467 = $1463 | $1465;
 $1468 = _i64Add($1334 | 0, $1335 | 0, $30 | 0, $31 | 0) | 0;
 $1469 = getTempRet0() | 0;
 $1470 = _i64Add($1468 | 0, $1469 | 0, $1390 | 0, $1391 | 0) | 0;
 $1471 = getTempRet0() | 0;
 $1472 = $1470 ^ $1456;
 $1473 = $1471 ^ $1457;
 $1474 = _i64Add($1473 | 0, $1472 | 0, $1420 | 0, $1421 | 0) | 0;
 $1475 = getTempRet0() | 0;
 $1476 = $1474 ^ $1390;
 $1477 = $1475 ^ $1391;
 $1478 = _bitshift64Lshr($1476 | 0, $1477 | 0, 24) | 0;
 $1479 = getTempRet0() | 0;
 $1480 = _bitshift64Shl($1476 | 0, $1477 | 0, 40) | 0;
 $1481 = getTempRet0() | 0;
 $1482 = $1478 | $1480;
 $1483 = $1479 | $1481;
 $1484 = _i64Add($1470 | 0, $1471 | 0, $4 | 0, $5 | 0) | 0;
 $1485 = getTempRet0() | 0;
 $1486 = _i64Add($1484 | 0, $1485 | 0, $1482 | 0, $1483 | 0) | 0;
 $1487 = getTempRet0() | 0;
 $1488 = $1486 ^ $1473;
 $1489 = $1487 ^ $1472;
 $1490 = _bitshift64Lshr($1488 | 0, $1489 | 0, 16) | 0;
 $1491 = getTempRet0() | 0;
 $1492 = _bitshift64Shl($1488 | 0, $1489 | 0, 48) | 0;
 $1493 = getTempRet0() | 0;
 $1494 = $1490 | $1492;
 $1495 = $1491 | $1493;
 $1496 = _i64Add($1494 | 0, $1495 | 0, $1474 | 0, $1475 | 0) | 0;
 $1497 = getTempRet0() | 0;
 $1498 = $1496 ^ $1482;
 $1499 = $1497 ^ $1483;
 $1500 = _bitshift64Lshr($1498 | 0, $1499 | 0, 63) | 0;
 $1501 = getTempRet0() | 0;
 $1502 = _bitshift64Shl($1498 | 0, $1499 | 0, 1) | 0;
 $1503 = getTempRet0() | 0;
 $1504 = $1500 | $1502;
 $1505 = $1501 | $1503;
 $1506 = _i64Add($1372 | 0, $1373 | 0, $24 | 0, $25 | 0) | 0;
 $1507 = getTempRet0() | 0;
 $1508 = _i64Add($1506 | 0, $1507 | 0, $1428 | 0, $1429 | 0) | 0;
 $1509 = getTempRet0() | 0;
 $1510 = $1508 ^ $1342;
 $1511 = $1509 ^ $1343;
 $1512 = _i64Add($1511 | 0, $1510 | 0, $1458 | 0, $1459 | 0) | 0;
 $1513 = getTempRet0() | 0;
 $1514 = $1512 ^ $1428;
 $1515 = $1513 ^ $1429;
 $1516 = _bitshift64Lshr($1514 | 0, $1515 | 0, 24) | 0;
 $1517 = getTempRet0() | 0;
 $1518 = _bitshift64Shl($1514 | 0, $1515 | 0, 40) | 0;
 $1519 = getTempRet0() | 0;
 $1520 = $1516 | $1518;
 $1521 = $1517 | $1519;
 $1522 = _i64Add($1508 | 0, $1509 | 0, $26 | 0, $27 | 0) | 0;
 $1523 = getTempRet0() | 0;
 $1524 = _i64Add($1522 | 0, $1523 | 0, $1520 | 0, $1521 | 0) | 0;
 $1525 = getTempRet0() | 0;
 $1526 = $1524 ^ $1511;
 $1527 = $1525 ^ $1510;
 $1528 = _bitshift64Lshr($1526 | 0, $1527 | 0, 16) | 0;
 $1529 = getTempRet0() | 0;
 $1530 = _bitshift64Shl($1526 | 0, $1527 | 0, 48) | 0;
 $1531 = getTempRet0() | 0;
 $1532 = $1528 | $1530;
 $1533 = $1529 | $1531;
 $1534 = _i64Add($1532 | 0, $1533 | 0, $1512 | 0, $1513 | 0) | 0;
 $1535 = getTempRet0() | 0;
 $1536 = $1534 ^ $1520;
 $1537 = $1535 ^ $1521;
 $1538 = _bitshift64Lshr($1536 | 0, $1537 | 0, 63) | 0;
 $1539 = getTempRet0() | 0;
 $1540 = _bitshift64Shl($1536 | 0, $1537 | 0, 1) | 0;
 $1541 = getTempRet0() | 0;
 $1542 = $1538 | $1540;
 $1543 = $1539 | $1541;
 $1544 = _i64Add($1410 | 0, $1411 | 0, $14 | 0, $15 | 0) | 0;
 $1545 = getTempRet0() | 0;
 $1546 = _i64Add($1544 | 0, $1545 | 0, $1466 | 0, $1467 | 0) | 0;
 $1547 = getTempRet0() | 0;
 $1548 = $1546 ^ $1380;
 $1549 = $1547 ^ $1381;
 $1550 = _i64Add($1549 | 0, $1548 | 0, $1344 | 0, $1345 | 0) | 0;
 $1551 = getTempRet0() | 0;
 $1552 = $1550 ^ $1466;
 $1553 = $1551 ^ $1467;
 $1554 = _bitshift64Lshr($1552 | 0, $1553 | 0, 24) | 0;
 $1555 = getTempRet0() | 0;
 $1556 = _bitshift64Shl($1552 | 0, $1553 | 0, 40) | 0;
 $1557 = getTempRet0() | 0;
 $1558 = $1554 | $1556;
 $1559 = $1555 | $1557;
 $1560 = _i64Add($1546 | 0, $1547 | 0, $18 | 0, $19 | 0) | 0;
 $1561 = getTempRet0() | 0;
 $1562 = _i64Add($1560 | 0, $1561 | 0, $1558 | 0, $1559 | 0) | 0;
 $1563 = getTempRet0() | 0;
 $1564 = $1562 ^ $1549;
 $1565 = $1563 ^ $1548;
 $1566 = _bitshift64Lshr($1564 | 0, $1565 | 0, 16) | 0;
 $1567 = getTempRet0() | 0;
 $1568 = _bitshift64Shl($1564 | 0, $1565 | 0, 48) | 0;
 $1569 = getTempRet0() | 0;
 $1570 = $1566 | $1568;
 $1571 = $1567 | $1569;
 $1572 = _i64Add($1570 | 0, $1571 | 0, $1550 | 0, $1551 | 0) | 0;
 $1573 = getTempRet0() | 0;
 $1574 = $1572 ^ $1558;
 $1575 = $1573 ^ $1559;
 $1576 = _bitshift64Lshr($1574 | 0, $1575 | 0, 63) | 0;
 $1577 = getTempRet0() | 0;
 $1578 = _bitshift64Shl($1574 | 0, $1575 | 0, 1) | 0;
 $1579 = getTempRet0() | 0;
 $1580 = $1576 | $1578;
 $1581 = $1577 | $1579;
 $1582 = _i64Add($1448 | 0, $1449 | 0, $8 | 0, $9 | 0) | 0;
 $1583 = getTempRet0() | 0;
 $1584 = _i64Add($1582 | 0, $1583 | 0, $1352 | 0, $1353 | 0) | 0;
 $1585 = getTempRet0() | 0;
 $1586 = $1584 ^ $1418;
 $1587 = $1585 ^ $1419;
 $1588 = _i64Add($1587 | 0, $1586 | 0, $1382 | 0, $1383 | 0) | 0;
 $1589 = getTempRet0() | 0;
 $1590 = $1588 ^ $1352;
 $1591 = $1589 ^ $1353;
 $1592 = _bitshift64Lshr($1590 | 0, $1591 | 0, 24) | 0;
 $1593 = getTempRet0() | 0;
 $1594 = _bitshift64Shl($1590 | 0, $1591 | 0, 40) | 0;
 $1595 = getTempRet0() | 0;
 $1596 = $1592 | $1594;
 $1597 = $1593 | $1595;
 $1598 = _i64Add($1584 | 0, $1585 | 0, $28 | 0, $29 | 0) | 0;
 $1599 = getTempRet0() | 0;
 $1600 = _i64Add($1598 | 0, $1599 | 0, $1596 | 0, $1597 | 0) | 0;
 $1601 = getTempRet0() | 0;
 $1602 = $1600 ^ $1587;
 $1603 = $1601 ^ $1586;
 $1604 = _bitshift64Lshr($1602 | 0, $1603 | 0, 16) | 0;
 $1605 = getTempRet0() | 0;
 $1606 = _bitshift64Shl($1602 | 0, $1603 | 0, 48) | 0;
 $1607 = getTempRet0() | 0;
 $1608 = $1604 | $1606;
 $1609 = $1605 | $1607;
 $1610 = _i64Add($1608 | 0, $1609 | 0, $1588 | 0, $1589 | 0) | 0;
 $1611 = getTempRet0() | 0;
 $1612 = $1610 ^ $1596;
 $1613 = $1611 ^ $1597;
 $1614 = _bitshift64Lshr($1612 | 0, $1613 | 0, 63) | 0;
 $1615 = getTempRet0() | 0;
 $1616 = _bitshift64Shl($1612 | 0, $1613 | 0, 1) | 0;
 $1617 = getTempRet0() | 0;
 $1618 = $1614 | $1616;
 $1619 = $1615 | $1617;
 $1620 = _i64Add($1486 | 0, $1487 | 0, $6 | 0, $7 | 0) | 0;
 $1621 = getTempRet0() | 0;
 $1622 = _i64Add($1620 | 0, $1621 | 0, $1618 | 0, $1619 | 0) | 0;
 $1623 = getTempRet0() | 0;
 $1624 = $1622 ^ $1532;
 $1625 = $1623 ^ $1533;
 $1626 = _i64Add($1625 | 0, $1624 | 0, $1572 | 0, $1573 | 0) | 0;
 $1627 = getTempRet0() | 0;
 $1628 = $1626 ^ $1618;
 $1629 = $1627 ^ $1619;
 $1630 = _bitshift64Lshr($1628 | 0, $1629 | 0, 24) | 0;
 $1631 = getTempRet0() | 0;
 $1632 = _bitshift64Shl($1628 | 0, $1629 | 0, 40) | 0;
 $1633 = getTempRet0() | 0;
 $1634 = $1630 | $1632;
 $1635 = $1631 | $1633;
 $1636 = _i64Add($1622 | 0, $1623 | 0, $26 | 0, $27 | 0) | 0;
 $1637 = getTempRet0() | 0;
 $1638 = _i64Add($1636 | 0, $1637 | 0, $1634 | 0, $1635 | 0) | 0;
 $1639 = getTempRet0() | 0;
 $1640 = $1638 ^ $1625;
 $1641 = $1639 ^ $1624;
 $1642 = _bitshift64Lshr($1640 | 0, $1641 | 0, 16) | 0;
 $1643 = getTempRet0() | 0;
 $1644 = _bitshift64Shl($1640 | 0, $1641 | 0, 48) | 0;
 $1645 = getTempRet0() | 0;
 $1646 = $1642 | $1644;
 $1647 = $1643 | $1645;
 $1648 = _i64Add($1646 | 0, $1647 | 0, $1626 | 0, $1627 | 0) | 0;
 $1649 = getTempRet0() | 0;
 $1650 = $1648 ^ $1634;
 $1651 = $1649 ^ $1635;
 $1652 = _bitshift64Lshr($1650 | 0, $1651 | 0, 63) | 0;
 $1653 = getTempRet0() | 0;
 $1654 = _bitshift64Shl($1650 | 0, $1651 | 0, 1) | 0;
 $1655 = getTempRet0() | 0;
 $1656 = $1652 | $1654;
 $1657 = $1653 | $1655;
 $1658 = _i64Add($1524 | 0, $1525 | 0, $14 | 0, $15 | 0) | 0;
 $1659 = getTempRet0() | 0;
 $1660 = _i64Add($1658 | 0, $1659 | 0, $1504 | 0, $1505 | 0) | 0;
 $1661 = getTempRet0() | 0;
 $1662 = $1660 ^ $1570;
 $1663 = $1661 ^ $1571;
 $1664 = _i64Add($1663 | 0, $1662 | 0, $1610 | 0, $1611 | 0) | 0;
 $1665 = getTempRet0() | 0;
 $1666 = $1664 ^ $1504;
 $1667 = $1665 ^ $1505;
 $1668 = _bitshift64Lshr($1666 | 0, $1667 | 0, 24) | 0;
 $1669 = getTempRet0() | 0;
 $1670 = _bitshift64Shl($1666 | 0, $1667 | 0, 40) | 0;
 $1671 = getTempRet0() | 0;
 $1672 = $1668 | $1670;
 $1673 = $1669 | $1671;
 $1674 = _i64Add($1660 | 0, $1661 | 0, $22 | 0, $23 | 0) | 0;
 $1675 = getTempRet0() | 0;
 $1676 = _i64Add($1674 | 0, $1675 | 0, $1672 | 0, $1673 | 0) | 0;
 $1677 = getTempRet0() | 0;
 $1678 = $1676 ^ $1663;
 $1679 = $1677 ^ $1662;
 $1680 = _bitshift64Lshr($1678 | 0, $1679 | 0, 16) | 0;
 $1681 = getTempRet0() | 0;
 $1682 = _bitshift64Shl($1678 | 0, $1679 | 0, 48) | 0;
 $1683 = getTempRet0() | 0;
 $1684 = $1680 | $1682;
 $1685 = $1681 | $1683;
 $1686 = _i64Add($1684 | 0, $1685 | 0, $1664 | 0, $1665 | 0) | 0;
 $1687 = getTempRet0() | 0;
 $1688 = $1686 ^ $1672;
 $1689 = $1687 ^ $1673;
 $1690 = _bitshift64Lshr($1688 | 0, $1689 | 0, 63) | 0;
 $1691 = getTempRet0() | 0;
 $1692 = _bitshift64Shl($1688 | 0, $1689 | 0, 1) | 0;
 $1693 = getTempRet0() | 0;
 $1694 = $1690 | $1692;
 $1695 = $1691 | $1693;
 $1696 = _i64Add($1562 | 0, $1563 | 0, $2 | 0, $3 | 0) | 0;
 $1697 = getTempRet0() | 0;
 $1698 = _i64Add($1696 | 0, $1697 | 0, $1542 | 0, $1543 | 0) | 0;
 $1699 = getTempRet0() | 0;
 $1700 = $1698 ^ $1608;
 $1701 = $1699 ^ $1609;
 $1702 = _i64Add($1701 | 0, $1700 | 0, $1496 | 0, $1497 | 0) | 0;
 $1703 = getTempRet0() | 0;
 $1704 = $1702 ^ $1542;
 $1705 = $1703 ^ $1543;
 $1706 = _bitshift64Lshr($1704 | 0, $1705 | 0, 24) | 0;
 $1707 = getTempRet0() | 0;
 $1708 = _bitshift64Shl($1704 | 0, $1705 | 0, 40) | 0;
 $1709 = getTempRet0() | 0;
 $1710 = $1706 | $1708;
 $1711 = $1707 | $1709;
 $1712 = _i64Add($1698 | 0, $1699 | 0, $24 | 0, $25 | 0) | 0;
 $1713 = getTempRet0() | 0;
 $1714 = _i64Add($1712 | 0, $1713 | 0, $1710 | 0, $1711 | 0) | 0;
 $1715 = getTempRet0() | 0;
 $1716 = $1714 ^ $1701;
 $1717 = $1715 ^ $1700;
 $1718 = _bitshift64Lshr($1716 | 0, $1717 | 0, 16) | 0;
 $1719 = getTempRet0() | 0;
 $1720 = _bitshift64Shl($1716 | 0, $1717 | 0, 48) | 0;
 $1721 = getTempRet0() | 0;
 $1722 = $1718 | $1720;
 $1723 = $1719 | $1721;
 $1724 = _i64Add($1722 | 0, $1723 | 0, $1702 | 0, $1703 | 0) | 0;
 $1725 = getTempRet0() | 0;
 $1726 = $1724 ^ $1710;
 $1727 = $1725 ^ $1711;
 $1728 = _bitshift64Lshr($1726 | 0, $1727 | 0, 63) | 0;
 $1729 = getTempRet0() | 0;
 $1730 = _bitshift64Shl($1726 | 0, $1727 | 0, 1) | 0;
 $1731 = getTempRet0() | 0;
 $1732 = $1728 | $1730;
 $1733 = $1729 | $1731;
 $1734 = _i64Add($1600 | 0, $1601 | 0, $18 | 0, $19 | 0) | 0;
 $1735 = getTempRet0() | 0;
 $1736 = _i64Add($1734 | 0, $1735 | 0, $1580 | 0, $1581 | 0) | 0;
 $1737 = getTempRet0() | 0;
 $1738 = $1736 ^ $1494;
 $1739 = $1737 ^ $1495;
 $1740 = _i64Add($1739 | 0, $1738 | 0, $1534 | 0, $1535 | 0) | 0;
 $1741 = getTempRet0() | 0;
 $1742 = $1740 ^ $1580;
 $1743 = $1741 ^ $1581;
 $1744 = _bitshift64Lshr($1742 | 0, $1743 | 0, 24) | 0;
 $1745 = getTempRet0() | 0;
 $1746 = _bitshift64Shl($1742 | 0, $1743 | 0, 40) | 0;
 $1747 = getTempRet0() | 0;
 $1748 = $1744 | $1746;
 $1749 = $1745 | $1747;
 $1750 = _i64Add($1736 | 0, $1737 | 0, $8 | 0, $9 | 0) | 0;
 $1751 = getTempRet0() | 0;
 $1752 = _i64Add($1750 | 0, $1751 | 0, $1748 | 0, $1749 | 0) | 0;
 $1753 = getTempRet0() | 0;
 $1754 = $1752 ^ $1739;
 $1755 = $1753 ^ $1738;
 $1756 = _bitshift64Lshr($1754 | 0, $1755 | 0, 16) | 0;
 $1757 = getTempRet0() | 0;
 $1758 = _bitshift64Shl($1754 | 0, $1755 | 0, 48) | 0;
 $1759 = getTempRet0() | 0;
 $1760 = $1756 | $1758;
 $1761 = $1757 | $1759;
 $1762 = _i64Add($1760 | 0, $1761 | 0, $1740 | 0, $1741 | 0) | 0;
 $1763 = getTempRet0() | 0;
 $1764 = $1762 ^ $1748;
 $1765 = $1763 ^ $1749;
 $1766 = _bitshift64Lshr($1764 | 0, $1765 | 0, 63) | 0;
 $1767 = getTempRet0() | 0;
 $1768 = _bitshift64Shl($1764 | 0, $1765 | 0, 1) | 0;
 $1769 = getTempRet0() | 0;
 $1770 = $1766 | $1768;
 $1771 = $1767 | $1769;
 $1772 = _i64Add($1638 | 0, $1639 | 0, $10 | 0, $11 | 0) | 0;
 $1773 = getTempRet0() | 0;
 $1774 = _i64Add($1772 | 0, $1773 | 0, $1694 | 0, $1695 | 0) | 0;
 $1775 = getTempRet0() | 0;
 $1776 = $1774 ^ $1760;
 $1777 = $1775 ^ $1761;
 $1778 = _i64Add($1777 | 0, $1776 | 0, $1724 | 0, $1725 | 0) | 0;
 $1779 = getTempRet0() | 0;
 $1780 = $1778 ^ $1694;
 $1781 = $1779 ^ $1695;
 $1782 = _bitshift64Lshr($1780 | 0, $1781 | 0, 24) | 0;
 $1783 = getTempRet0() | 0;
 $1784 = _bitshift64Shl($1780 | 0, $1781 | 0, 40) | 0;
 $1785 = getTempRet0() | 0;
 $1786 = $1782 | $1784;
 $1787 = $1783 | $1785;
 $1788 = _i64Add($1774 | 0, $1775 | 0, $28 | 0, $29 | 0) | 0;
 $1789 = getTempRet0() | 0;
 $1790 = _i64Add($1788 | 0, $1789 | 0, $1786 | 0, $1787 | 0) | 0;
 $1791 = getTempRet0() | 0;
 $1792 = $1790 ^ $1777;
 $1793 = $1791 ^ $1776;
 $1794 = _bitshift64Lshr($1792 | 0, $1793 | 0, 16) | 0;
 $1795 = getTempRet0() | 0;
 $1796 = _bitshift64Shl($1792 | 0, $1793 | 0, 48) | 0;
 $1797 = getTempRet0() | 0;
 $1798 = $1794 | $1796;
 $1799 = $1795 | $1797;
 $1800 = _i64Add($1798 | 0, $1799 | 0, $1778 | 0, $1779 | 0) | 0;
 $1801 = getTempRet0() | 0;
 $1802 = $1800 ^ $1786;
 $1803 = $1801 ^ $1787;
 $1804 = _bitshift64Lshr($1802 | 0, $1803 | 0, 63) | 0;
 $1805 = getTempRet0() | 0;
 $1806 = _bitshift64Shl($1802 | 0, $1803 | 0, 1) | 0;
 $1807 = getTempRet0() | 0;
 $1808 = $1804 | $1806;
 $1809 = $1805 | $1807;
 $1810 = _i64Add($1676 | 0, $1677 | 0, $16 | 0, $17 | 0) | 0;
 $1811 = getTempRet0() | 0;
 $1812 = _i64Add($1810 | 0, $1811 | 0, $1732 | 0, $1733 | 0) | 0;
 $1813 = getTempRet0() | 0;
 $1814 = $1812 ^ $1646;
 $1815 = $1813 ^ $1647;
 $1816 = _i64Add($1815 | 0, $1814 | 0, $1762 | 0, $1763 | 0) | 0;
 $1817 = getTempRet0() | 0;
 $1818 = $1816 ^ $1732;
 $1819 = $1817 ^ $1733;
 $1820 = _bitshift64Lshr($1818 | 0, $1819 | 0, 24) | 0;
 $1821 = getTempRet0() | 0;
 $1822 = _bitshift64Shl($1818 | 0, $1819 | 0, 40) | 0;
 $1823 = getTempRet0() | 0;
 $1824 = $1820 | $1822;
 $1825 = $1821 | $1823;
 $1826 = _i64Add($1812 | 0, $1813 | 0, $12 | 0, $13 | 0) | 0;
 $1827 = getTempRet0() | 0;
 $1828 = _i64Add($1826 | 0, $1827 | 0, $1824 | 0, $1825 | 0) | 0;
 $1829 = getTempRet0() | 0;
 $1830 = $1828 ^ $1815;
 $1831 = $1829 ^ $1814;
 $1832 = _bitshift64Lshr($1830 | 0, $1831 | 0, 16) | 0;
 $1833 = getTempRet0() | 0;
 $1834 = _bitshift64Shl($1830 | 0, $1831 | 0, 48) | 0;
 $1835 = getTempRet0() | 0;
 $1836 = $1832 | $1834;
 $1837 = $1833 | $1835;
 $1838 = _i64Add($1836 | 0, $1837 | 0, $1816 | 0, $1817 | 0) | 0;
 $1839 = getTempRet0() | 0;
 $1840 = $1838 ^ $1824;
 $1841 = $1839 ^ $1825;
 $1842 = _bitshift64Lshr($1840 | 0, $1841 | 0, 63) | 0;
 $1843 = getTempRet0() | 0;
 $1844 = _bitshift64Shl($1840 | 0, $1841 | 0, 1) | 0;
 $1845 = getTempRet0() | 0;
 $1846 = $1842 | $1844;
 $1847 = $1843 | $1845;
 $1848 = _i64Add($1714 | 0, $1715 | 0, $32 | 0, $33 | 0) | 0;
 $1849 = getTempRet0() | 0;
 $1850 = _i64Add($1848 | 0, $1849 | 0, $1770 | 0, $1771 | 0) | 0;
 $1851 = getTempRet0() | 0;
 $1852 = $1850 ^ $1684;
 $1853 = $1851 ^ $1685;
 $1854 = _i64Add($1853 | 0, $1852 | 0, $1648 | 0, $1649 | 0) | 0;
 $1855 = getTempRet0() | 0;
 $1856 = $1854 ^ $1770;
 $1857 = $1855 ^ $1771;
 $1858 = _bitshift64Lshr($1856 | 0, $1857 | 0, 24) | 0;
 $1859 = getTempRet0() | 0;
 $1860 = _bitshift64Shl($1856 | 0, $1857 | 0, 40) | 0;
 $1861 = getTempRet0() | 0;
 $1862 = $1858 | $1860;
 $1863 = $1859 | $1861;
 $1864 = _i64Add($1850 | 0, $1851 | 0, $30 | 0, $31 | 0) | 0;
 $1865 = getTempRet0() | 0;
 $1866 = _i64Add($1864 | 0, $1865 | 0, $1862 | 0, $1863 | 0) | 0;
 $1867 = getTempRet0() | 0;
 $1868 = $1866 ^ $1853;
 $1869 = $1867 ^ $1852;
 $1870 = _bitshift64Lshr($1868 | 0, $1869 | 0, 16) | 0;
 $1871 = getTempRet0() | 0;
 $1872 = _bitshift64Shl($1868 | 0, $1869 | 0, 48) | 0;
 $1873 = getTempRet0() | 0;
 $1874 = $1870 | $1872;
 $1875 = $1871 | $1873;
 $1876 = _i64Add($1874 | 0, $1875 | 0, $1854 | 0, $1855 | 0) | 0;
 $1877 = getTempRet0() | 0;
 $1878 = $1876 ^ $1862;
 $1879 = $1877 ^ $1863;
 $1880 = _bitshift64Lshr($1878 | 0, $1879 | 0, 63) | 0;
 $1881 = getTempRet0() | 0;
 $1882 = _bitshift64Shl($1878 | 0, $1879 | 0, 1) | 0;
 $1883 = getTempRet0() | 0;
 $1884 = $1880 | $1882;
 $1885 = $1881 | $1883;
 $1886 = _i64Add($1752 | 0, $1753 | 0, $4 | 0, $5 | 0) | 0;
 $1887 = getTempRet0() | 0;
 $1888 = _i64Add($1886 | 0, $1887 | 0, $1656 | 0, $1657 | 0) | 0;
 $1889 = getTempRet0() | 0;
 $1890 = $1888 ^ $1722;
 $1891 = $1889 ^ $1723;
 $1892 = _i64Add($1891 | 0, $1890 | 0, $1686 | 0, $1687 | 0) | 0;
 $1893 = getTempRet0() | 0;
 $1894 = $1892 ^ $1656;
 $1895 = $1893 ^ $1657;
 $1896 = _bitshift64Lshr($1894 | 0, $1895 | 0, 24) | 0;
 $1897 = getTempRet0() | 0;
 $1898 = _bitshift64Shl($1894 | 0, $1895 | 0, 40) | 0;
 $1899 = getTempRet0() | 0;
 $1900 = $1896 | $1898;
 $1901 = $1897 | $1899;
 $1902 = _i64Add($1888 | 0, $1889 | 0, $20 | 0, $21 | 0) | 0;
 $1903 = getTempRet0() | 0;
 $1904 = _i64Add($1902 | 0, $1903 | 0, $1900 | 0, $1901 | 0) | 0;
 $1905 = getTempRet0() | 0;
 $1906 = $1904 ^ $1891;
 $1907 = $1905 ^ $1890;
 $1908 = _bitshift64Lshr($1906 | 0, $1907 | 0, 16) | 0;
 $1909 = getTempRet0() | 0;
 $1910 = _bitshift64Shl($1906 | 0, $1907 | 0, 48) | 0;
 $1911 = getTempRet0() | 0;
 $1912 = $1908 | $1910;
 $1913 = $1909 | $1911;
 $1914 = _i64Add($1912 | 0, $1913 | 0, $1892 | 0, $1893 | 0) | 0;
 $1915 = getTempRet0() | 0;
 $1916 = $1914 ^ $1900;
 $1917 = $1915 ^ $1901;
 $1918 = _bitshift64Lshr($1916 | 0, $1917 | 0, 63) | 0;
 $1919 = getTempRet0() | 0;
 $1920 = _bitshift64Shl($1916 | 0, $1917 | 0, 1) | 0;
 $1921 = getTempRet0() | 0;
 $1922 = $1918 | $1920;
 $1923 = $1919 | $1921;
 $1924 = _i64Add($1790 | 0, $1791 | 0, $26 | 0, $27 | 0) | 0;
 $1925 = getTempRet0() | 0;
 $1926 = _i64Add($1924 | 0, $1925 | 0, $1922 | 0, $1923 | 0) | 0;
 $1927 = getTempRet0() | 0;
 $1928 = $1926 ^ $1836;
 $1929 = $1927 ^ $1837;
 $1930 = _i64Add($1929 | 0, $1928 | 0, $1876 | 0, $1877 | 0) | 0;
 $1931 = getTempRet0() | 0;
 $1932 = $1930 ^ $1922;
 $1933 = $1931 ^ $1923;
 $1934 = _bitshift64Lshr($1932 | 0, $1933 | 0, 24) | 0;
 $1935 = getTempRet0() | 0;
 $1936 = _bitshift64Shl($1932 | 0, $1933 | 0, 40) | 0;
 $1937 = getTempRet0() | 0;
 $1938 = $1934 | $1936;
 $1939 = $1935 | $1937;
 $1940 = _i64Add($1926 | 0, $1927 | 0, $12 | 0, $13 | 0) | 0;
 $1941 = getTempRet0() | 0;
 $1942 = _i64Add($1940 | 0, $1941 | 0, $1938 | 0, $1939 | 0) | 0;
 $1943 = getTempRet0() | 0;
 $1944 = $1942 ^ $1929;
 $1945 = $1943 ^ $1928;
 $1946 = _bitshift64Lshr($1944 | 0, $1945 | 0, 16) | 0;
 $1947 = getTempRet0() | 0;
 $1948 = _bitshift64Shl($1944 | 0, $1945 | 0, 48) | 0;
 $1949 = getTempRet0() | 0;
 $1950 = $1946 | $1948;
 $1951 = $1947 | $1949;
 $1952 = _i64Add($1950 | 0, $1951 | 0, $1930 | 0, $1931 | 0) | 0;
 $1953 = getTempRet0() | 0;
 $1954 = $1952 ^ $1938;
 $1955 = $1953 ^ $1939;
 $1956 = _bitshift64Lshr($1954 | 0, $1955 | 0, 63) | 0;
 $1957 = getTempRet0() | 0;
 $1958 = _bitshift64Shl($1954 | 0, $1955 | 0, 1) | 0;
 $1959 = getTempRet0() | 0;
 $1960 = $1956 | $1958;
 $1961 = $1957 | $1959;
 $1962 = _i64Add($1828 | 0, $1829 | 0, $4 | 0, $5 | 0) | 0;
 $1963 = getTempRet0() | 0;
 $1964 = _i64Add($1962 | 0, $1963 | 0, $1808 | 0, $1809 | 0) | 0;
 $1965 = getTempRet0() | 0;
 $1966 = $1964 ^ $1874;
 $1967 = $1965 ^ $1875;
 $1968 = _i64Add($1967 | 0, $1966 | 0, $1914 | 0, $1915 | 0) | 0;
 $1969 = getTempRet0() | 0;
 $1970 = $1968 ^ $1808;
 $1971 = $1969 ^ $1809;
 $1972 = _bitshift64Lshr($1970 | 0, $1971 | 0, 24) | 0;
 $1973 = getTempRet0() | 0;
 $1974 = _bitshift64Shl($1970 | 0, $1971 | 0, 40) | 0;
 $1975 = getTempRet0() | 0;
 $1976 = $1972 | $1974;
 $1977 = $1973 | $1975;
 $1978 = _i64Add($1964 | 0, $1965 | 0, $32 | 0, $33 | 0) | 0;
 $1979 = getTempRet0() | 0;
 $1980 = _i64Add($1978 | 0, $1979 | 0, $1976 | 0, $1977 | 0) | 0;
 $1981 = getTempRet0() | 0;
 $1982 = $1980 ^ $1967;
 $1983 = $1981 ^ $1966;
 $1984 = _bitshift64Lshr($1982 | 0, $1983 | 0, 16) | 0;
 $1985 = getTempRet0() | 0;
 $1986 = _bitshift64Shl($1982 | 0, $1983 | 0, 48) | 0;
 $1987 = getTempRet0() | 0;
 $1988 = $1984 | $1986;
 $1989 = $1985 | $1987;
 $1990 = _i64Add($1988 | 0, $1989 | 0, $1968 | 0, $1969 | 0) | 0;
 $1991 = getTempRet0() | 0;
 $1992 = $1990 ^ $1976;
 $1993 = $1991 ^ $1977;
 $1994 = _bitshift64Lshr($1992 | 0, $1993 | 0, 63) | 0;
 $1995 = getTempRet0() | 0;
 $1996 = _bitshift64Shl($1992 | 0, $1993 | 0, 1) | 0;
 $1997 = getTempRet0() | 0;
 $1998 = $1994 | $1996;
 $1999 = $1995 | $1997;
 $2000 = _i64Add($1866 | 0, $1867 | 0, $30 | 0, $31 | 0) | 0;
 $2001 = getTempRet0() | 0;
 $2002 = _i64Add($2000 | 0, $2001 | 0, $1846 | 0, $1847 | 0) | 0;
 $2003 = getTempRet0() | 0;
 $2004 = $2002 ^ $1912;
 $2005 = $2003 ^ $1913;
 $2006 = _i64Add($2005 | 0, $2004 | 0, $1800 | 0, $1801 | 0) | 0;
 $2007 = getTempRet0() | 0;
 $2008 = $2006 ^ $1846;
 $2009 = $2007 ^ $1847;
 $2010 = _bitshift64Lshr($2008 | 0, $2009 | 0, 24) | 0;
 $2011 = getTempRet0() | 0;
 $2012 = _bitshift64Shl($2008 | 0, $2009 | 0, 40) | 0;
 $2013 = getTempRet0() | 0;
 $2014 = $2010 | $2012;
 $2015 = $2011 | $2013;
 $2016 = _i64Add($2002 | 0, $2003 | 0, $28 | 0, $29 | 0) | 0;
 $2017 = getTempRet0() | 0;
 $2018 = _i64Add($2016 | 0, $2017 | 0, $2014 | 0, $2015 | 0) | 0;
 $2019 = getTempRet0() | 0;
 $2020 = $2018 ^ $2005;
 $2021 = $2019 ^ $2004;
 $2022 = _bitshift64Lshr($2020 | 0, $2021 | 0, 16) | 0;
 $2023 = getTempRet0() | 0;
 $2024 = _bitshift64Shl($2020 | 0, $2021 | 0, 48) | 0;
 $2025 = getTempRet0() | 0;
 $2026 = $2022 | $2024;
 $2027 = $2023 | $2025;
 $2028 = _i64Add($2026 | 0, $2027 | 0, $2006 | 0, $2007 | 0) | 0;
 $2029 = getTempRet0() | 0;
 $2030 = $2028 ^ $2014;
 $2031 = $2029 ^ $2015;
 $2032 = _bitshift64Lshr($2030 | 0, $2031 | 0, 63) | 0;
 $2033 = getTempRet0() | 0;
 $2034 = _bitshift64Shl($2030 | 0, $2031 | 0, 1) | 0;
 $2035 = getTempRet0() | 0;
 $2036 = $2032 | $2034;
 $2037 = $2033 | $2035;
 $2038 = _i64Add($1904 | 0, $1905 | 0, $10 | 0, $11 | 0) | 0;
 $2039 = getTempRet0() | 0;
 $2040 = _i64Add($2038 | 0, $2039 | 0, $1884 | 0, $1885 | 0) | 0;
 $2041 = getTempRet0() | 0;
 $2042 = $2040 ^ $1798;
 $2043 = $2041 ^ $1799;
 $2044 = _i64Add($2043 | 0, $2042 | 0, $1838 | 0, $1839 | 0) | 0;
 $2045 = getTempRet0() | 0;
 $2046 = $2044 ^ $1884;
 $2047 = $2045 ^ $1885;
 $2048 = _bitshift64Lshr($2046 | 0, $2047 | 0, 24) | 0;
 $2049 = getTempRet0() | 0;
 $2050 = _bitshift64Shl($2046 | 0, $2047 | 0, 40) | 0;
 $2051 = getTempRet0() | 0;
 $2052 = $2048 | $2050;
 $2053 = $2049 | $2051;
 $2054 = _i64Add($2040 | 0, $2041 | 0, $22 | 0, $23 | 0) | 0;
 $2055 = getTempRet0() | 0;
 $2056 = _i64Add($2054 | 0, $2055 | 0, $2052 | 0, $2053 | 0) | 0;
 $2057 = getTempRet0() | 0;
 $2058 = $2056 ^ $2043;
 $2059 = $2057 ^ $2042;
 $2060 = _bitshift64Lshr($2058 | 0, $2059 | 0, 16) | 0;
 $2061 = getTempRet0() | 0;
 $2062 = _bitshift64Shl($2058 | 0, $2059 | 0, 48) | 0;
 $2063 = getTempRet0() | 0;
 $2064 = $2060 | $2062;
 $2065 = $2061 | $2063;
 $2066 = _i64Add($2064 | 0, $2065 | 0, $2044 | 0, $2045 | 0) | 0;
 $2067 = getTempRet0() | 0;
 $2068 = $2066 ^ $2052;
 $2069 = $2067 ^ $2053;
 $2070 = _bitshift64Lshr($2068 | 0, $2069 | 0, 63) | 0;
 $2071 = getTempRet0() | 0;
 $2072 = _bitshift64Shl($2068 | 0, $2069 | 0, 1) | 0;
 $2073 = getTempRet0() | 0;
 $2074 = $2070 | $2072;
 $2075 = $2071 | $2073;
 $2076 = _i64Add($1942 | 0, $1943 | 0, $2 | 0, $3 | 0) | 0;
 $2077 = getTempRet0() | 0;
 $2078 = _i64Add($2076 | 0, $2077 | 0, $1998 | 0, $1999 | 0) | 0;
 $2079 = getTempRet0() | 0;
 $2080 = $2078 ^ $2064;
 $2081 = $2079 ^ $2065;
 $2082 = _i64Add($2081 | 0, $2080 | 0, $2028 | 0, $2029 | 0) | 0;
 $2083 = getTempRet0() | 0;
 $2084 = $2082 ^ $1998;
 $2085 = $2083 ^ $1999;
 $2086 = _bitshift64Lshr($2084 | 0, $2085 | 0, 24) | 0;
 $2087 = getTempRet0() | 0;
 $2088 = _bitshift64Shl($2084 | 0, $2085 | 0, 40) | 0;
 $2089 = getTempRet0() | 0;
 $2090 = $2086 | $2088;
 $2091 = $2087 | $2089;
 $2092 = _i64Add($2078 | 0, $2079 | 0, $16 | 0, $17 | 0) | 0;
 $2093 = getTempRet0() | 0;
 $2094 = _i64Add($2092 | 0, $2093 | 0, $2090 | 0, $2091 | 0) | 0;
 $2095 = getTempRet0() | 0;
 $2096 = $2094 ^ $2081;
 $2097 = $2095 ^ $2080;
 $2098 = _bitshift64Lshr($2096 | 0, $2097 | 0, 16) | 0;
 $2099 = getTempRet0() | 0;
 $2100 = _bitshift64Shl($2096 | 0, $2097 | 0, 48) | 0;
 $2101 = getTempRet0() | 0;
 $2102 = $2098 | $2100;
 $2103 = $2099 | $2101;
 $2104 = _i64Add($2102 | 0, $2103 | 0, $2082 | 0, $2083 | 0) | 0;
 $2105 = getTempRet0() | 0;
 $2106 = $2104 ^ $2090;
 $2107 = $2105 ^ $2091;
 $2108 = _bitshift64Lshr($2106 | 0, $2107 | 0, 63) | 0;
 $2109 = getTempRet0() | 0;
 $2110 = _bitshift64Shl($2106 | 0, $2107 | 0, 1) | 0;
 $2111 = getTempRet0() | 0;
 $2112 = $2108 | $2110;
 $2113 = $2109 | $2111;
 $2114 = _i64Add($1980 | 0, $1981 | 0, $14 | 0, $15 | 0) | 0;
 $2115 = getTempRet0() | 0;
 $2116 = _i64Add($2114 | 0, $2115 | 0, $2036 | 0, $2037 | 0) | 0;
 $2117 = getTempRet0() | 0;
 $2118 = $2116 ^ $1950;
 $2119 = $2117 ^ $1951;
 $2120 = _i64Add($2119 | 0, $2118 | 0, $2066 | 0, $2067 | 0) | 0;
 $2121 = getTempRet0() | 0;
 $2122 = $2120 ^ $2036;
 $2123 = $2121 ^ $2037;
 $2124 = _bitshift64Lshr($2122 | 0, $2123 | 0, 24) | 0;
 $2125 = getTempRet0() | 0;
 $2126 = _bitshift64Shl($2122 | 0, $2123 | 0, 40) | 0;
 $2127 = getTempRet0() | 0;
 $2128 = $2124 | $2126;
 $2129 = $2125 | $2127;
 $2130 = _i64Add($2116 | 0, $2117 | 0, $8 | 0, $9 | 0) | 0;
 $2131 = getTempRet0() | 0;
 $2132 = _i64Add($2130 | 0, $2131 | 0, $2128 | 0, $2129 | 0) | 0;
 $2133 = getTempRet0() | 0;
 $2134 = $2132 ^ $2119;
 $2135 = $2133 ^ $2118;
 $2136 = _bitshift64Lshr($2134 | 0, $2135 | 0, 16) | 0;
 $2137 = getTempRet0() | 0;
 $2138 = _bitshift64Shl($2134 | 0, $2135 | 0, 48) | 0;
 $2139 = getTempRet0() | 0;
 $2140 = $2136 | $2138;
 $2141 = $2137 | $2139;
 $2142 = _i64Add($2140 | 0, $2141 | 0, $2120 | 0, $2121 | 0) | 0;
 $2143 = getTempRet0() | 0;
 $2144 = $2142 ^ $2128;
 $2145 = $2143 ^ $2129;
 $2146 = _bitshift64Lshr($2144 | 0, $2145 | 0, 63) | 0;
 $2147 = getTempRet0() | 0;
 $2148 = _bitshift64Shl($2144 | 0, $2145 | 0, 1) | 0;
 $2149 = getTempRet0() | 0;
 $2150 = $2146 | $2148;
 $2151 = $2147 | $2149;
 $2152 = _i64Add($2018 | 0, $2019 | 0, $20 | 0, $21 | 0) | 0;
 $2153 = getTempRet0() | 0;
 $2154 = _i64Add($2152 | 0, $2153 | 0, $2074 | 0, $2075 | 0) | 0;
 $2155 = getTempRet0() | 0;
 $2156 = $2154 ^ $1988;
 $2157 = $2155 ^ $1989;
 $2158 = _i64Add($2157 | 0, $2156 | 0, $1952 | 0, $1953 | 0) | 0;
 $2159 = getTempRet0() | 0;
 $2160 = $2158 ^ $2074;
 $2161 = $2159 ^ $2075;
 $2162 = _bitshift64Lshr($2160 | 0, $2161 | 0, 24) | 0;
 $2163 = getTempRet0() | 0;
 $2164 = _bitshift64Shl($2160 | 0, $2161 | 0, 40) | 0;
 $2165 = getTempRet0() | 0;
 $2166 = $2162 | $2164;
 $2167 = $2163 | $2165;
 $2168 = _i64Add($2154 | 0, $2155 | 0, $6 | 0, $7 | 0) | 0;
 $2169 = getTempRet0() | 0;
 $2170 = _i64Add($2168 | 0, $2169 | 0, $2166 | 0, $2167 | 0) | 0;
 $2171 = getTempRet0() | 0;
 $2172 = $2170 ^ $2157;
 $2173 = $2171 ^ $2156;
 $2174 = _bitshift64Lshr($2172 | 0, $2173 | 0, 16) | 0;
 $2175 = getTempRet0() | 0;
 $2176 = _bitshift64Shl($2172 | 0, $2173 | 0, 48) | 0;
 $2177 = getTempRet0() | 0;
 $2178 = $2174 | $2176;
 $2179 = $2175 | $2177;
 $2180 = _i64Add($2178 | 0, $2179 | 0, $2158 | 0, $2159 | 0) | 0;
 $2181 = getTempRet0() | 0;
 $2182 = $2180 ^ $2166;
 $2183 = $2181 ^ $2167;
 $2184 = _bitshift64Lshr($2182 | 0, $2183 | 0, 63) | 0;
 $2185 = getTempRet0() | 0;
 $2186 = _bitshift64Shl($2182 | 0, $2183 | 0, 1) | 0;
 $2187 = getTempRet0() | 0;
 $2188 = $2184 | $2186;
 $2189 = $2185 | $2187;
 $2190 = _i64Add($2056 | 0, $2057 | 0, $18 | 0, $19 | 0) | 0;
 $2191 = getTempRet0() | 0;
 $2192 = _i64Add($2190 | 0, $2191 | 0, $1960 | 0, $1961 | 0) | 0;
 $2193 = getTempRet0() | 0;
 $2194 = $2192 ^ $2026;
 $2195 = $2193 ^ $2027;
 $2196 = _i64Add($2195 | 0, $2194 | 0, $1990 | 0, $1991 | 0) | 0;
 $2197 = getTempRet0() | 0;
 $2198 = $2196 ^ $1960;
 $2199 = $2197 ^ $1961;
 $2200 = _bitshift64Lshr($2198 | 0, $2199 | 0, 24) | 0;
 $2201 = getTempRet0() | 0;
 $2202 = _bitshift64Shl($2198 | 0, $2199 | 0, 40) | 0;
 $2203 = getTempRet0() | 0;
 $2204 = $2200 | $2202;
 $2205 = $2201 | $2203;
 $2206 = _i64Add($2192 | 0, $2193 | 0, $24 | 0, $25 | 0) | 0;
 $2207 = getTempRet0() | 0;
 $2208 = _i64Add($2206 | 0, $2207 | 0, $2204 | 0, $2205 | 0) | 0;
 $2209 = getTempRet0() | 0;
 $2210 = $2208 ^ $2195;
 $2211 = $2209 ^ $2194;
 $2212 = _bitshift64Lshr($2210 | 0, $2211 | 0, 16) | 0;
 $2213 = getTempRet0() | 0;
 $2214 = _bitshift64Shl($2210 | 0, $2211 | 0, 48) | 0;
 $2215 = getTempRet0() | 0;
 $2216 = $2212 | $2214;
 $2217 = $2213 | $2215;
 $2218 = _i64Add($2216 | 0, $2217 | 0, $2196 | 0, $2197 | 0) | 0;
 $2219 = getTempRet0() | 0;
 $2220 = $2218 ^ $2204;
 $2221 = $2219 ^ $2205;
 $2222 = _bitshift64Lshr($2220 | 0, $2221 | 0, 63) | 0;
 $2223 = getTempRet0() | 0;
 $2224 = _bitshift64Shl($2220 | 0, $2221 | 0, 1) | 0;
 $2225 = getTempRet0() | 0;
 $2226 = $2222 | $2224;
 $2227 = $2223 | $2225;
 $2228 = _i64Add($2094 | 0, $2095 | 0, $28 | 0, $29 | 0) | 0;
 $2229 = getTempRet0() | 0;
 $2230 = _i64Add($2228 | 0, $2229 | 0, $2226 | 0, $2227 | 0) | 0;
 $2231 = getTempRet0() | 0;
 $2232 = $2230 ^ $2140;
 $2233 = $2231 ^ $2141;
 $2234 = _i64Add($2233 | 0, $2232 | 0, $2180 | 0, $2181 | 0) | 0;
 $2235 = getTempRet0() | 0;
 $2236 = $2234 ^ $2226;
 $2237 = $2235 ^ $2227;
 $2238 = _bitshift64Lshr($2236 | 0, $2237 | 0, 24) | 0;
 $2239 = getTempRet0() | 0;
 $2240 = _bitshift64Shl($2236 | 0, $2237 | 0, 40) | 0;
 $2241 = getTempRet0() | 0;
 $2242 = $2238 | $2240;
 $2243 = $2239 | $2241;
 $2244 = _i64Add($2230 | 0, $2231 | 0, $24 | 0, $25 | 0) | 0;
 $2245 = getTempRet0() | 0;
 $2246 = _i64Add($2244 | 0, $2245 | 0, $2242 | 0, $2243 | 0) | 0;
 $2247 = getTempRet0() | 0;
 $2248 = $2246 ^ $2233;
 $2249 = $2247 ^ $2232;
 $2250 = _bitshift64Lshr($2248 | 0, $2249 | 0, 16) | 0;
 $2251 = getTempRet0() | 0;
 $2252 = _bitshift64Shl($2248 | 0, $2249 | 0, 48) | 0;
 $2253 = getTempRet0() | 0;
 $2254 = $2250 | $2252;
 $2255 = $2251 | $2253;
 $2256 = _i64Add($2254 | 0, $2255 | 0, $2234 | 0, $2235 | 0) | 0;
 $2257 = getTempRet0() | 0;
 $2258 = $2256 ^ $2242;
 $2259 = $2257 ^ $2243;
 $2260 = _bitshift64Lshr($2258 | 0, $2259 | 0, 63) | 0;
 $2261 = getTempRet0() | 0;
 $2262 = _bitshift64Shl($2258 | 0, $2259 | 0, 1) | 0;
 $2263 = getTempRet0() | 0;
 $2264 = $2260 | $2262;
 $2265 = $2261 | $2263;
 $2266 = _i64Add($2132 | 0, $2133 | 0, $16 | 0, $17 | 0) | 0;
 $2267 = getTempRet0() | 0;
 $2268 = _i64Add($2266 | 0, $2267 | 0, $2112 | 0, $2113 | 0) | 0;
 $2269 = getTempRet0() | 0;
 $2270 = $2268 ^ $2178;
 $2271 = $2269 ^ $2179;
 $2272 = _i64Add($2271 | 0, $2270 | 0, $2218 | 0, $2219 | 0) | 0;
 $2273 = getTempRet0() | 0;
 $2274 = $2272 ^ $2112;
 $2275 = $2273 ^ $2113;
 $2276 = _bitshift64Lshr($2274 | 0, $2275 | 0, 24) | 0;
 $2277 = getTempRet0() | 0;
 $2278 = _bitshift64Shl($2274 | 0, $2275 | 0, 40) | 0;
 $2279 = getTempRet0() | 0;
 $2280 = $2276 | $2278;
 $2281 = $2277 | $2279;
 $2282 = _i64Add($2268 | 0, $2269 | 0, $30 | 0, $31 | 0) | 0;
 $2283 = getTempRet0() | 0;
 $2284 = _i64Add($2282 | 0, $2283 | 0, $2280 | 0, $2281 | 0) | 0;
 $2285 = getTempRet0() | 0;
 $2286 = $2284 ^ $2271;
 $2287 = $2285 ^ $2270;
 $2288 = _bitshift64Lshr($2286 | 0, $2287 | 0, 16) | 0;
 $2289 = getTempRet0() | 0;
 $2290 = _bitshift64Shl($2286 | 0, $2287 | 0, 48) | 0;
 $2291 = getTempRet0() | 0;
 $2292 = $2288 | $2290;
 $2293 = $2289 | $2291;
 $2294 = _i64Add($2292 | 0, $2293 | 0, $2272 | 0, $2273 | 0) | 0;
 $2295 = getTempRet0() | 0;
 $2296 = $2294 ^ $2280;
 $2297 = $2295 ^ $2281;
 $2298 = _bitshift64Lshr($2296 | 0, $2297 | 0, 63) | 0;
 $2299 = getTempRet0() | 0;
 $2300 = _bitshift64Shl($2296 | 0, $2297 | 0, 1) | 0;
 $2301 = getTempRet0() | 0;
 $2302 = $2298 | $2300;
 $2303 = $2299 | $2301;
 $2304 = _i64Add($2170 | 0, $2171 | 0, $26 | 0, $27 | 0) | 0;
 $2305 = getTempRet0() | 0;
 $2306 = _i64Add($2304 | 0, $2305 | 0, $2150 | 0, $2151 | 0) | 0;
 $2307 = getTempRet0() | 0;
 $2308 = $2306 ^ $2216;
 $2309 = $2307 ^ $2217;
 $2310 = _i64Add($2309 | 0, $2308 | 0, $2104 | 0, $2105 | 0) | 0;
 $2311 = getTempRet0() | 0;
 $2312 = $2310 ^ $2150;
 $2313 = $2311 ^ $2151;
 $2314 = _bitshift64Lshr($2312 | 0, $2313 | 0, 24) | 0;
 $2315 = getTempRet0() | 0;
 $2316 = _bitshift64Shl($2312 | 0, $2313 | 0, 40) | 0;
 $2317 = getTempRet0() | 0;
 $2318 = $2314 | $2316;
 $2319 = $2315 | $2317;
 $2320 = _i64Add($2306 | 0, $2307 | 0, $4 | 0, $5 | 0) | 0;
 $2321 = getTempRet0() | 0;
 $2322 = _i64Add($2320 | 0, $2321 | 0, $2318 | 0, $2319 | 0) | 0;
 $2323 = getTempRet0() | 0;
 $2324 = $2322 ^ $2309;
 $2325 = $2323 ^ $2308;
 $2326 = _bitshift64Lshr($2324 | 0, $2325 | 0, 16) | 0;
 $2327 = getTempRet0() | 0;
 $2328 = _bitshift64Shl($2324 | 0, $2325 | 0, 48) | 0;
 $2329 = getTempRet0() | 0;
 $2330 = $2326 | $2328;
 $2331 = $2327 | $2329;
 $2332 = _i64Add($2330 | 0, $2331 | 0, $2310 | 0, $2311 | 0) | 0;
 $2333 = getTempRet0() | 0;
 $2334 = $2332 ^ $2318;
 $2335 = $2333 ^ $2319;
 $2336 = _bitshift64Lshr($2334 | 0, $2335 | 0, 63) | 0;
 $2337 = getTempRet0() | 0;
 $2338 = _bitshift64Shl($2334 | 0, $2335 | 0, 1) | 0;
 $2339 = getTempRet0() | 0;
 $2340 = $2336 | $2338;
 $2341 = $2337 | $2339;
 $2342 = _i64Add($2208 | 0, $2209 | 0, $8 | 0, $9 | 0) | 0;
 $2343 = getTempRet0() | 0;
 $2344 = _i64Add($2342 | 0, $2343 | 0, $2188 | 0, $2189 | 0) | 0;
 $2345 = getTempRet0() | 0;
 $2346 = $2344 ^ $2102;
 $2347 = $2345 ^ $2103;
 $2348 = _i64Add($2347 | 0, $2346 | 0, $2142 | 0, $2143 | 0) | 0;
 $2349 = getTempRet0() | 0;
 $2350 = $2348 ^ $2188;
 $2351 = $2349 ^ $2189;
 $2352 = _bitshift64Lshr($2350 | 0, $2351 | 0, 24) | 0;
 $2353 = getTempRet0() | 0;
 $2354 = _bitshift64Shl($2350 | 0, $2351 | 0, 40) | 0;
 $2355 = getTempRet0() | 0;
 $2356 = $2352 | $2354;
 $2357 = $2353 | $2355;
 $2358 = _i64Add($2344 | 0, $2345 | 0, $20 | 0, $21 | 0) | 0;
 $2359 = getTempRet0() | 0;
 $2360 = _i64Add($2358 | 0, $2359 | 0, $2356 | 0, $2357 | 0) | 0;
 $2361 = getTempRet0() | 0;
 $2362 = $2360 ^ $2347;
 $2363 = $2361 ^ $2346;
 $2364 = _bitshift64Lshr($2362 | 0, $2363 | 0, 16) | 0;
 $2365 = getTempRet0() | 0;
 $2366 = _bitshift64Shl($2362 | 0, $2363 | 0, 48) | 0;
 $2367 = getTempRet0() | 0;
 $2368 = $2364 | $2366;
 $2369 = $2365 | $2367;
 $2370 = _i64Add($2368 | 0, $2369 | 0, $2348 | 0, $2349 | 0) | 0;
 $2371 = getTempRet0() | 0;
 $2372 = $2370 ^ $2356;
 $2373 = $2371 ^ $2357;
 $2374 = _bitshift64Lshr($2372 | 0, $2373 | 0, 63) | 0;
 $2375 = getTempRet0() | 0;
 $2376 = _bitshift64Shl($2372 | 0, $2373 | 0, 1) | 0;
 $2377 = getTempRet0() | 0;
 $2378 = $2374 | $2376;
 $2379 = $2375 | $2377;
 $2380 = _i64Add($2246 | 0, $2247 | 0, $12 | 0, $13 | 0) | 0;
 $2381 = getTempRet0() | 0;
 $2382 = _i64Add($2380 | 0, $2381 | 0, $2302 | 0, $2303 | 0) | 0;
 $2383 = getTempRet0() | 0;
 $2384 = $2382 ^ $2368;
 $2385 = $2383 ^ $2369;
 $2386 = _i64Add($2385 | 0, $2384 | 0, $2332 | 0, $2333 | 0) | 0;
 $2387 = getTempRet0() | 0;
 $2388 = $2386 ^ $2302;
 $2389 = $2387 ^ $2303;
 $2390 = _bitshift64Lshr($2388 | 0, $2389 | 0, 24) | 0;
 $2391 = getTempRet0() | 0;
 $2392 = _bitshift64Shl($2388 | 0, $2389 | 0, 40) | 0;
 $2393 = getTempRet0() | 0;
 $2394 = $2390 | $2392;
 $2395 = $2391 | $2393;
 $2396 = _i64Add($2382 | 0, $2383 | 0, $2 | 0, $3 | 0) | 0;
 $2397 = getTempRet0() | 0;
 $2398 = _i64Add($2396 | 0, $2397 | 0, $2394 | 0, $2395 | 0) | 0;
 $2399 = getTempRet0() | 0;
 $2400 = $2398 ^ $2385;
 $2401 = $2399 ^ $2384;
 $2402 = _bitshift64Lshr($2400 | 0, $2401 | 0, 16) | 0;
 $2403 = getTempRet0() | 0;
 $2404 = _bitshift64Shl($2400 | 0, $2401 | 0, 48) | 0;
 $2405 = getTempRet0() | 0;
 $2406 = $2402 | $2404;
 $2407 = $2403 | $2405;
 $2408 = _i64Add($2406 | 0, $2407 | 0, $2386 | 0, $2387 | 0) | 0;
 $2409 = getTempRet0() | 0;
 $2410 = $2408 ^ $2394;
 $2411 = $2409 ^ $2395;
 $2412 = _bitshift64Lshr($2410 | 0, $2411 | 0, 63) | 0;
 $2413 = getTempRet0() | 0;
 $2414 = _bitshift64Shl($2410 | 0, $2411 | 0, 1) | 0;
 $2415 = getTempRet0() | 0;
 $2416 = $2412 | $2414;
 $2417 = $2413 | $2415;
 $2418 = _i64Add($2284 | 0, $2285 | 0, $32 | 0, $33 | 0) | 0;
 $2419 = getTempRet0() | 0;
 $2420 = _i64Add($2418 | 0, $2419 | 0, $2340 | 0, $2341 | 0) | 0;
 $2421 = getTempRet0() | 0;
 $2422 = $2420 ^ $2254;
 $2423 = $2421 ^ $2255;
 $2424 = _i64Add($2423 | 0, $2422 | 0, $2370 | 0, $2371 | 0) | 0;
 $2425 = getTempRet0() | 0;
 $2426 = $2424 ^ $2340;
 $2427 = $2425 ^ $2341;
 $2428 = _bitshift64Lshr($2426 | 0, $2427 | 0, 24) | 0;
 $2429 = getTempRet0() | 0;
 $2430 = _bitshift64Shl($2426 | 0, $2427 | 0, 40) | 0;
 $2431 = getTempRet0() | 0;
 $2432 = $2428 | $2430;
 $2433 = $2429 | $2431;
 $2434 = _i64Add($2420 | 0, $2421 | 0, $10 | 0, $11 | 0) | 0;
 $2435 = getTempRet0() | 0;
 $2436 = _i64Add($2434 | 0, $2435 | 0, $2432 | 0, $2433 | 0) | 0;
 $2437 = getTempRet0() | 0;
 $2438 = $2436 ^ $2423;
 $2439 = $2437 ^ $2422;
 $2440 = _bitshift64Lshr($2438 | 0, $2439 | 0, 16) | 0;
 $2441 = getTempRet0() | 0;
 $2442 = _bitshift64Shl($2438 | 0, $2439 | 0, 48) | 0;
 $2443 = getTempRet0() | 0;
 $2444 = $2440 | $2442;
 $2445 = $2441 | $2443;
 $2446 = _i64Add($2444 | 0, $2445 | 0, $2424 | 0, $2425 | 0) | 0;
 $2447 = getTempRet0() | 0;
 $2448 = $2446 ^ $2432;
 $2449 = $2447 ^ $2433;
 $2450 = _bitshift64Lshr($2448 | 0, $2449 | 0, 63) | 0;
 $2451 = getTempRet0() | 0;
 $2452 = _bitshift64Shl($2448 | 0, $2449 | 0, 1) | 0;
 $2453 = getTempRet0() | 0;
 $2454 = $2450 | $2452;
 $2455 = $2451 | $2453;
 $2456 = _i64Add($2322 | 0, $2323 | 0, $18 | 0, $19 | 0) | 0;
 $2457 = getTempRet0() | 0;
 $2458 = _i64Add($2456 | 0, $2457 | 0, $2378 | 0, $2379 | 0) | 0;
 $2459 = getTempRet0() | 0;
 $2460 = $2458 ^ $2292;
 $2461 = $2459 ^ $2293;
 $2462 = _i64Add($2461 | 0, $2460 | 0, $2256 | 0, $2257 | 0) | 0;
 $2463 = getTempRet0() | 0;
 $2464 = $2462 ^ $2378;
 $2465 = $2463 ^ $2379;
 $2466 = _bitshift64Lshr($2464 | 0, $2465 | 0, 24) | 0;
 $2467 = getTempRet0() | 0;
 $2468 = _bitshift64Shl($2464 | 0, $2465 | 0, 40) | 0;
 $2469 = getTempRet0() | 0;
 $2470 = $2466 | $2468;
 $2471 = $2467 | $2469;
 $2472 = _i64Add($2458 | 0, $2459 | 0, $14 | 0, $15 | 0) | 0;
 $2473 = getTempRet0() | 0;
 $2474 = _i64Add($2472 | 0, $2473 | 0, $2470 | 0, $2471 | 0) | 0;
 $2475 = getTempRet0() | 0;
 $2476 = $2474 ^ $2461;
 $2477 = $2475 ^ $2460;
 $2478 = _bitshift64Lshr($2476 | 0, $2477 | 0, 16) | 0;
 $2479 = getTempRet0() | 0;
 $2480 = _bitshift64Shl($2476 | 0, $2477 | 0, 48) | 0;
 $2481 = getTempRet0() | 0;
 $2482 = $2478 | $2480;
 $2483 = $2479 | $2481;
 $2484 = _i64Add($2482 | 0, $2483 | 0, $2462 | 0, $2463 | 0) | 0;
 $2485 = getTempRet0() | 0;
 $2486 = $2484 ^ $2470;
 $2487 = $2485 ^ $2471;
 $2488 = _bitshift64Lshr($2486 | 0, $2487 | 0, 63) | 0;
 $2489 = getTempRet0() | 0;
 $2490 = _bitshift64Shl($2486 | 0, $2487 | 0, 1) | 0;
 $2491 = getTempRet0() | 0;
 $2492 = $2488 | $2490;
 $2493 = $2489 | $2491;
 $2494 = _i64Add($2360 | 0, $2361 | 0, $6 | 0, $7 | 0) | 0;
 $2495 = getTempRet0() | 0;
 $2496 = _i64Add($2494 | 0, $2495 | 0, $2264 | 0, $2265 | 0) | 0;
 $2497 = getTempRet0() | 0;
 $2498 = $2496 ^ $2330;
 $2499 = $2497 ^ $2331;
 $2500 = _i64Add($2499 | 0, $2498 | 0, $2294 | 0, $2295 | 0) | 0;
 $2501 = getTempRet0() | 0;
 $2502 = $2500 ^ $2264;
 $2503 = $2501 ^ $2265;
 $2504 = _bitshift64Lshr($2502 | 0, $2503 | 0, 24) | 0;
 $2505 = getTempRet0() | 0;
 $2506 = _bitshift64Shl($2502 | 0, $2503 | 0, 40) | 0;
 $2507 = getTempRet0() | 0;
 $2508 = $2504 | $2506;
 $2509 = $2505 | $2507;
 $2510 = _i64Add($2496 | 0, $2497 | 0, $22 | 0, $23 | 0) | 0;
 $2511 = getTempRet0() | 0;
 $2512 = _i64Add($2510 | 0, $2511 | 0, $2508 | 0, $2509 | 0) | 0;
 $2513 = getTempRet0() | 0;
 $2514 = $2512 ^ $2499;
 $2515 = $2513 ^ $2498;
 $2516 = _bitshift64Lshr($2514 | 0, $2515 | 0, 16) | 0;
 $2517 = getTempRet0() | 0;
 $2518 = _bitshift64Shl($2514 | 0, $2515 | 0, 48) | 0;
 $2519 = getTempRet0() | 0;
 $2520 = $2516 | $2518;
 $2521 = $2517 | $2519;
 $2522 = _i64Add($2520 | 0, $2521 | 0, $2500 | 0, $2501 | 0) | 0;
 $2523 = getTempRet0() | 0;
 $2524 = $2522 ^ $2508;
 $2525 = $2523 ^ $2509;
 $2526 = _bitshift64Lshr($2524 | 0, $2525 | 0, 63) | 0;
 $2527 = getTempRet0() | 0;
 $2528 = _bitshift64Shl($2524 | 0, $2525 | 0, 1) | 0;
 $2529 = getTempRet0() | 0;
 $2530 = $2526 | $2528;
 $2531 = $2527 | $2529;
 $2532 = _i64Add($2398 | 0, $2399 | 0, $14 | 0, $15 | 0) | 0;
 $2533 = getTempRet0() | 0;
 $2534 = _i64Add($2532 | 0, $2533 | 0, $2530 | 0, $2531 | 0) | 0;
 $2535 = getTempRet0() | 0;
 $2536 = $2534 ^ $2444;
 $2537 = $2535 ^ $2445;
 $2538 = _i64Add($2537 | 0, $2536 | 0, $2484 | 0, $2485 | 0) | 0;
 $2539 = getTempRet0() | 0;
 $2540 = $2538 ^ $2530;
 $2541 = $2539 ^ $2531;
 $2542 = _bitshift64Lshr($2540 | 0, $2541 | 0, 24) | 0;
 $2543 = getTempRet0() | 0;
 $2544 = _bitshift64Shl($2540 | 0, $2541 | 0, 40) | 0;
 $2545 = getTempRet0() | 0;
 $2546 = $2542 | $2544;
 $2547 = $2543 | $2545;
 $2548 = _i64Add($2534 | 0, $2535 | 0, $32 | 0, $33 | 0) | 0;
 $2549 = getTempRet0() | 0;
 $2550 = _i64Add($2548 | 0, $2549 | 0, $2546 | 0, $2547 | 0) | 0;
 $2551 = getTempRet0() | 0;
 $2552 = $2550 ^ $2537;
 $2553 = $2551 ^ $2536;
 $2554 = _bitshift64Lshr($2552 | 0, $2553 | 0, 16) | 0;
 $2555 = getTempRet0() | 0;
 $2556 = _bitshift64Shl($2552 | 0, $2553 | 0, 48) | 0;
 $2557 = getTempRet0() | 0;
 $2558 = $2554 | $2556;
 $2559 = $2555 | $2557;
 $2560 = _i64Add($2558 | 0, $2559 | 0, $2538 | 0, $2539 | 0) | 0;
 $2561 = getTempRet0() | 0;
 $2562 = $2560 ^ $2546;
 $2563 = $2561 ^ $2547;
 $2564 = _bitshift64Lshr($2562 | 0, $2563 | 0, 63) | 0;
 $2565 = getTempRet0() | 0;
 $2566 = _bitshift64Shl($2562 | 0, $2563 | 0, 1) | 0;
 $2567 = getTempRet0() | 0;
 $2568 = $2564 | $2566;
 $2569 = $2565 | $2567;
 $2570 = _i64Add($2436 | 0, $2437 | 0, $30 | 0, $31 | 0) | 0;
 $2571 = getTempRet0() | 0;
 $2572 = _i64Add($2570 | 0, $2571 | 0, $2416 | 0, $2417 | 0) | 0;
 $2573 = getTempRet0() | 0;
 $2574 = $2572 ^ $2482;
 $2575 = $2573 ^ $2483;
 $2576 = _i64Add($2575 | 0, $2574 | 0, $2522 | 0, $2523 | 0) | 0;
 $2577 = getTempRet0() | 0;
 $2578 = $2576 ^ $2416;
 $2579 = $2577 ^ $2417;
 $2580 = _bitshift64Lshr($2578 | 0, $2579 | 0, 24) | 0;
 $2581 = getTempRet0() | 0;
 $2582 = _bitshift64Shl($2578 | 0, $2579 | 0, 40) | 0;
 $2583 = getTempRet0() | 0;
 $2584 = $2580 | $2582;
 $2585 = $2581 | $2583;
 $2586 = _i64Add($2572 | 0, $2573 | 0, $20 | 0, $21 | 0) | 0;
 $2587 = getTempRet0() | 0;
 $2588 = _i64Add($2586 | 0, $2587 | 0, $2584 | 0, $2585 | 0) | 0;
 $2589 = getTempRet0() | 0;
 $2590 = $2588 ^ $2575;
 $2591 = $2589 ^ $2574;
 $2592 = _bitshift64Lshr($2590 | 0, $2591 | 0, 16) | 0;
 $2593 = getTempRet0() | 0;
 $2594 = _bitshift64Shl($2590 | 0, $2591 | 0, 48) | 0;
 $2595 = getTempRet0() | 0;
 $2596 = $2592 | $2594;
 $2597 = $2593 | $2595;
 $2598 = _i64Add($2596 | 0, $2597 | 0, $2576 | 0, $2577 | 0) | 0;
 $2599 = getTempRet0() | 0;
 $2600 = $2598 ^ $2584;
 $2601 = $2599 ^ $2585;
 $2602 = _bitshift64Lshr($2600 | 0, $2601 | 0, 63) | 0;
 $2603 = getTempRet0() | 0;
 $2604 = _bitshift64Shl($2600 | 0, $2601 | 0, 1) | 0;
 $2605 = getTempRet0() | 0;
 $2606 = $2602 | $2604;
 $2607 = $2603 | $2605;
 $2608 = _i64Add($2474 | 0, $2475 | 0, $24 | 0, $25 | 0) | 0;
 $2609 = getTempRet0() | 0;
 $2610 = _i64Add($2608 | 0, $2609 | 0, $2454 | 0, $2455 | 0) | 0;
 $2611 = getTempRet0() | 0;
 $2612 = $2610 ^ $2520;
 $2613 = $2611 ^ $2521;
 $2614 = _i64Add($2613 | 0, $2612 | 0, $2408 | 0, $2409 | 0) | 0;
 $2615 = getTempRet0() | 0;
 $2616 = $2614 ^ $2454;
 $2617 = $2615 ^ $2455;
 $2618 = _bitshift64Lshr($2616 | 0, $2617 | 0, 24) | 0;
 $2619 = getTempRet0() | 0;
 $2620 = _bitshift64Shl($2616 | 0, $2617 | 0, 40) | 0;
 $2621 = getTempRet0() | 0;
 $2622 = $2618 | $2620;
 $2623 = $2619 | $2621;
 $2624 = _i64Add($2610 | 0, $2611 | 0, $8 | 0, $9 | 0) | 0;
 $2625 = getTempRet0() | 0;
 $2626 = _i64Add($2624 | 0, $2625 | 0, $2622 | 0, $2623 | 0) | 0;
 $2627 = getTempRet0() | 0;
 $2628 = $2626 ^ $2613;
 $2629 = $2627 ^ $2612;
 $2630 = _bitshift64Lshr($2628 | 0, $2629 | 0, 16) | 0;
 $2631 = getTempRet0() | 0;
 $2632 = _bitshift64Shl($2628 | 0, $2629 | 0, 48) | 0;
 $2633 = getTempRet0() | 0;
 $2634 = $2630 | $2632;
 $2635 = $2631 | $2633;
 $2636 = _i64Add($2634 | 0, $2635 | 0, $2614 | 0, $2615 | 0) | 0;
 $2637 = getTempRet0() | 0;
 $2638 = $2636 ^ $2622;
 $2639 = $2637 ^ $2623;
 $2640 = _bitshift64Lshr($2638 | 0, $2639 | 0, 63) | 0;
 $2641 = getTempRet0() | 0;
 $2642 = _bitshift64Shl($2638 | 0, $2639 | 0, 1) | 0;
 $2643 = getTempRet0() | 0;
 $2644 = $2640 | $2642;
 $2645 = $2641 | $2643;
 $2646 = _i64Add($2512 | 0, $2513 | 0, $2 | 0, $3 | 0) | 0;
 $2647 = getTempRet0() | 0;
 $2648 = _i64Add($2646 | 0, $2647 | 0, $2492 | 0, $2493 | 0) | 0;
 $2649 = getTempRet0() | 0;
 $2650 = $2648 ^ $2406;
 $2651 = $2649 ^ $2407;
 $2652 = _i64Add($2651 | 0, $2650 | 0, $2446 | 0, $2447 | 0) | 0;
 $2653 = getTempRet0() | 0;
 $2654 = $2652 ^ $2492;
 $2655 = $2653 ^ $2493;
 $2656 = _bitshift64Lshr($2654 | 0, $2655 | 0, 24) | 0;
 $2657 = getTempRet0() | 0;
 $2658 = _bitshift64Shl($2654 | 0, $2655 | 0, 40) | 0;
 $2659 = getTempRet0() | 0;
 $2660 = $2656 | $2658;
 $2661 = $2657 | $2659;
 $2662 = _i64Add($2648 | 0, $2649 | 0, $18 | 0, $19 | 0) | 0;
 $2663 = getTempRet0() | 0;
 $2664 = _i64Add($2662 | 0, $2663 | 0, $2660 | 0, $2661 | 0) | 0;
 $2665 = getTempRet0() | 0;
 $2666 = $2664 ^ $2651;
 $2667 = $2665 ^ $2650;
 $2668 = _bitshift64Lshr($2666 | 0, $2667 | 0, 16) | 0;
 $2669 = getTempRet0() | 0;
 $2670 = _bitshift64Shl($2666 | 0, $2667 | 0, 48) | 0;
 $2671 = getTempRet0() | 0;
 $2672 = $2668 | $2670;
 $2673 = $2669 | $2671;
 $2674 = _i64Add($2672 | 0, $2673 | 0, $2652 | 0, $2653 | 0) | 0;
 $2675 = getTempRet0() | 0;
 $2676 = $2674 ^ $2660;
 $2677 = $2675 ^ $2661;
 $2678 = _bitshift64Lshr($2676 | 0, $2677 | 0, 63) | 0;
 $2679 = getTempRet0() | 0;
 $2680 = _bitshift64Shl($2676 | 0, $2677 | 0, 1) | 0;
 $2681 = getTempRet0() | 0;
 $2682 = $2678 | $2680;
 $2683 = $2679 | $2681;
 $2684 = _i64Add($2550 | 0, $2551 | 0, $26 | 0, $27 | 0) | 0;
 $2685 = getTempRet0() | 0;
 $2686 = _i64Add($2684 | 0, $2685 | 0, $2606 | 0, $2607 | 0) | 0;
 $2687 = getTempRet0() | 0;
 $2688 = $2686 ^ $2672;
 $2689 = $2687 ^ $2673;
 $2690 = _i64Add($2689 | 0, $2688 | 0, $2636 | 0, $2637 | 0) | 0;
 $2691 = getTempRet0() | 0;
 $2692 = $2690 ^ $2606;
 $2693 = $2691 ^ $2607;
 $2694 = _bitshift64Lshr($2692 | 0, $2693 | 0, 24) | 0;
 $2695 = getTempRet0() | 0;
 $2696 = _bitshift64Shl($2692 | 0, $2693 | 0, 40) | 0;
 $2697 = getTempRet0() | 0;
 $2698 = $2694 | $2696;
 $2699 = $2695 | $2697;
 $2700 = _i64Add($2686 | 0, $2687 | 0, $6 | 0, $7 | 0) | 0;
 $2701 = getTempRet0() | 0;
 $2702 = _i64Add($2700 | 0, $2701 | 0, $2698 | 0, $2699 | 0) | 0;
 $2703 = getTempRet0() | 0;
 $2704 = $2702 ^ $2689;
 $2705 = $2703 ^ $2688;
 $2706 = _bitshift64Lshr($2704 | 0, $2705 | 0, 16) | 0;
 $2707 = getTempRet0() | 0;
 $2708 = _bitshift64Shl($2704 | 0, $2705 | 0, 48) | 0;
 $2709 = getTempRet0() | 0;
 $2710 = $2706 | $2708;
 $2711 = $2707 | $2709;
 $2712 = _i64Add($2710 | 0, $2711 | 0, $2690 | 0, $2691 | 0) | 0;
 $2713 = getTempRet0() | 0;
 $2714 = $2712 ^ $2698;
 $2715 = $2713 ^ $2699;
 $2716 = _bitshift64Lshr($2714 | 0, $2715 | 0, 63) | 0;
 $2717 = getTempRet0() | 0;
 $2718 = _bitshift64Shl($2714 | 0, $2715 | 0, 1) | 0;
 $2719 = getTempRet0() | 0;
 $2720 = $2716 | $2718;
 $2721 = $2717 | $2719;
 $2722 = _i64Add($2588 | 0, $2589 | 0, $28 | 0, $29 | 0) | 0;
 $2723 = getTempRet0() | 0;
 $2724 = _i64Add($2722 | 0, $2723 | 0, $2644 | 0, $2645 | 0) | 0;
 $2725 = getTempRet0() | 0;
 $2726 = $2724 ^ $2558;
 $2727 = $2725 ^ $2559;
 $2728 = _i64Add($2727 | 0, $2726 | 0, $2674 | 0, $2675 | 0) | 0;
 $2729 = getTempRet0() | 0;
 $2730 = $2728 ^ $2644;
 $2731 = $2729 ^ $2645;
 $2732 = _bitshift64Lshr($2730 | 0, $2731 | 0, 24) | 0;
 $2733 = getTempRet0() | 0;
 $2734 = _bitshift64Shl($2730 | 0, $2731 | 0, 40) | 0;
 $2735 = getTempRet0() | 0;
 $2736 = $2732 | $2734;
 $2737 = $2733 | $2735;
 $2738 = _i64Add($2724 | 0, $2725 | 0, $16 | 0, $17 | 0) | 0;
 $2739 = getTempRet0() | 0;
 $2740 = _i64Add($2738 | 0, $2739 | 0, $2736 | 0, $2737 | 0) | 0;
 $2741 = getTempRet0() | 0;
 $2742 = $2740 ^ $2727;
 $2743 = $2741 ^ $2726;
 $2744 = _bitshift64Lshr($2742 | 0, $2743 | 0, 16) | 0;
 $2745 = getTempRet0() | 0;
 $2746 = _bitshift64Shl($2742 | 0, $2743 | 0, 48) | 0;
 $2747 = getTempRet0() | 0;
 $2748 = $2744 | $2746;
 $2749 = $2745 | $2747;
 $2750 = _i64Add($2748 | 0, $2749 | 0, $2728 | 0, $2729 | 0) | 0;
 $2751 = getTempRet0() | 0;
 $2752 = $2750 ^ $2736;
 $2753 = $2751 ^ $2737;
 $2754 = _bitshift64Lshr($2752 | 0, $2753 | 0, 63) | 0;
 $2755 = getTempRet0() | 0;
 $2756 = _bitshift64Shl($2752 | 0, $2753 | 0, 1) | 0;
 $2757 = getTempRet0() | 0;
 $2758 = $2754 | $2756;
 $2759 = $2755 | $2757;
 $2760 = _i64Add($2626 | 0, $2627 | 0, $4 | 0, $5 | 0) | 0;
 $2761 = getTempRet0() | 0;
 $2762 = _i64Add($2760 | 0, $2761 | 0, $2682 | 0, $2683 | 0) | 0;
 $2763 = getTempRet0() | 0;
 $2764 = $2762 ^ $2596;
 $2765 = $2763 ^ $2597;
 $2766 = _i64Add($2765 | 0, $2764 | 0, $2560 | 0, $2561 | 0) | 0;
 $2767 = getTempRet0() | 0;
 $2768 = $2766 ^ $2682;
 $2769 = $2767 ^ $2683;
 $2770 = _bitshift64Lshr($2768 | 0, $2769 | 0, 24) | 0;
 $2771 = getTempRet0() | 0;
 $2772 = _bitshift64Shl($2768 | 0, $2769 | 0, 40) | 0;
 $2773 = getTempRet0() | 0;
 $2774 = $2770 | $2772;
 $2775 = $2771 | $2773;
 $2776 = _i64Add($2762 | 0, $2763 | 0, $10 | 0, $11 | 0) | 0;
 $2777 = getTempRet0() | 0;
 $2778 = _i64Add($2776 | 0, $2777 | 0, $2774 | 0, $2775 | 0) | 0;
 $2779 = getTempRet0() | 0;
 $2780 = $2778 ^ $2765;
 $2781 = $2779 ^ $2764;
 $2782 = _bitshift64Lshr($2780 | 0, $2781 | 0, 16) | 0;
 $2783 = getTempRet0() | 0;
 $2784 = _bitshift64Shl($2780 | 0, $2781 | 0, 48) | 0;
 $2785 = getTempRet0() | 0;
 $2786 = $2782 | $2784;
 $2787 = $2783 | $2785;
 $2788 = _i64Add($2786 | 0, $2787 | 0, $2766 | 0, $2767 | 0) | 0;
 $2789 = getTempRet0() | 0;
 $2790 = $2788 ^ $2774;
 $2791 = $2789 ^ $2775;
 $2792 = _bitshift64Lshr($2790 | 0, $2791 | 0, 63) | 0;
 $2793 = getTempRet0() | 0;
 $2794 = _bitshift64Shl($2790 | 0, $2791 | 0, 1) | 0;
 $2795 = getTempRet0() | 0;
 $2796 = $2792 | $2794;
 $2797 = $2793 | $2795;
 $2798 = _i64Add($2664 | 0, $2665 | 0, $22 | 0, $23 | 0) | 0;
 $2799 = getTempRet0() | 0;
 $2800 = _i64Add($2798 | 0, $2799 | 0, $2568 | 0, $2569 | 0) | 0;
 $2801 = getTempRet0() | 0;
 $2802 = $2800 ^ $2634;
 $2803 = $2801 ^ $2635;
 $2804 = _i64Add($2803 | 0, $2802 | 0, $2598 | 0, $2599 | 0) | 0;
 $2805 = getTempRet0() | 0;
 $2806 = $2804 ^ $2568;
 $2807 = $2805 ^ $2569;
 $2808 = _bitshift64Lshr($2806 | 0, $2807 | 0, 24) | 0;
 $2809 = getTempRet0() | 0;
 $2810 = _bitshift64Shl($2806 | 0, $2807 | 0, 40) | 0;
 $2811 = getTempRet0() | 0;
 $2812 = $2808 | $2810;
 $2813 = $2809 | $2811;
 $2814 = _i64Add($2800 | 0, $2801 | 0, $12 | 0, $13 | 0) | 0;
 $2815 = getTempRet0() | 0;
 $2816 = _i64Add($2814 | 0, $2815 | 0, $2812 | 0, $2813 | 0) | 0;
 $2817 = getTempRet0() | 0;
 $2818 = $2816 ^ $2803;
 $2819 = $2817 ^ $2802;
 $2820 = _bitshift64Lshr($2818 | 0, $2819 | 0, 16) | 0;
 $2821 = getTempRet0() | 0;
 $2822 = _bitshift64Shl($2818 | 0, $2819 | 0, 48) | 0;
 $2823 = getTempRet0() | 0;
 $2824 = $2820 | $2822;
 $2825 = $2821 | $2823;
 $2826 = _i64Add($2824 | 0, $2825 | 0, $2804 | 0, $2805 | 0) | 0;
 $2827 = getTempRet0() | 0;
 $2828 = $2826 ^ $2812;
 $2829 = $2827 ^ $2813;
 $2830 = _bitshift64Lshr($2828 | 0, $2829 | 0, 63) | 0;
 $2831 = getTempRet0() | 0;
 $2832 = _bitshift64Shl($2828 | 0, $2829 | 0, 1) | 0;
 $2833 = getTempRet0() | 0;
 $2834 = $2830 | $2832;
 $2835 = $2831 | $2833;
 $2836 = _i64Add($2702 | 0, $2703 | 0, $22 | 0, $23 | 0) | 0;
 $2837 = getTempRet0() | 0;
 $2838 = _i64Add($2836 | 0, $2837 | 0, $2834 | 0, $2835 | 0) | 0;
 $2839 = getTempRet0() | 0;
 $2840 = $2838 ^ $2748;
 $2841 = $2839 ^ $2749;
 $2842 = _i64Add($2841 | 0, $2840 | 0, $2788 | 0, $2789 | 0) | 0;
 $2843 = getTempRet0() | 0;
 $2844 = $2842 ^ $2834;
 $2845 = $2843 ^ $2835;
 $2846 = _bitshift64Lshr($2844 | 0, $2845 | 0, 24) | 0;
 $2847 = getTempRet0() | 0;
 $2848 = _bitshift64Shl($2844 | 0, $2845 | 0, 40) | 0;
 $2849 = getTempRet0() | 0;
 $2850 = $2846 | $2848;
 $2851 = $2847 | $2849;
 $2852 = _i64Add($2838 | 0, $2839 | 0, $6 | 0, $7 | 0) | 0;
 $2853 = getTempRet0() | 0;
 $2854 = _i64Add($2852 | 0, $2853 | 0, $2850 | 0, $2851 | 0) | 0;
 $2855 = getTempRet0() | 0;
 $2856 = $2854 ^ $2841;
 $2857 = $2855 ^ $2840;
 $2858 = _bitshift64Lshr($2856 | 0, $2857 | 0, 16) | 0;
 $2859 = getTempRet0() | 0;
 $2860 = _bitshift64Shl($2856 | 0, $2857 | 0, 48) | 0;
 $2861 = getTempRet0() | 0;
 $2862 = $2858 | $2860;
 $2863 = $2859 | $2861;
 $2864 = _i64Add($2862 | 0, $2863 | 0, $2842 | 0, $2843 | 0) | 0;
 $2865 = getTempRet0() | 0;
 $2866 = $2864 ^ $2850;
 $2867 = $2865 ^ $2851;
 $2868 = _bitshift64Lshr($2866 | 0, $2867 | 0, 63) | 0;
 $2869 = getTempRet0() | 0;
 $2870 = _bitshift64Shl($2866 | 0, $2867 | 0, 1) | 0;
 $2871 = getTempRet0() | 0;
 $2872 = $2868 | $2870;
 $2873 = $2869 | $2871;
 $2874 = _i64Add($2740 | 0, $2741 | 0, $18 | 0, $19 | 0) | 0;
 $2875 = getTempRet0() | 0;
 $2876 = _i64Add($2874 | 0, $2875 | 0, $2720 | 0, $2721 | 0) | 0;
 $2877 = getTempRet0() | 0;
 $2878 = $2876 ^ $2786;
 $2879 = $2877 ^ $2787;
 $2880 = _i64Add($2879 | 0, $2878 | 0, $2826 | 0, $2827 | 0) | 0;
 $2881 = getTempRet0() | 0;
 $2882 = $2880 ^ $2720;
 $2883 = $2881 ^ $2721;
 $2884 = _bitshift64Lshr($2882 | 0, $2883 | 0, 24) | 0;
 $2885 = getTempRet0() | 0;
 $2886 = _bitshift64Shl($2882 | 0, $2883 | 0, 40) | 0;
 $2887 = getTempRet0() | 0;
 $2888 = $2884 | $2886;
 $2889 = $2885 | $2887;
 $2890 = _i64Add($2876 | 0, $2877 | 0, $10 | 0, $11 | 0) | 0;
 $2891 = getTempRet0() | 0;
 $2892 = _i64Add($2890 | 0, $2891 | 0, $2888 | 0, $2889 | 0) | 0;
 $2893 = getTempRet0() | 0;
 $2894 = $2892 ^ $2879;
 $2895 = $2893 ^ $2878;
 $2896 = _bitshift64Lshr($2894 | 0, $2895 | 0, 16) | 0;
 $2897 = getTempRet0() | 0;
 $2898 = _bitshift64Shl($2894 | 0, $2895 | 0, 48) | 0;
 $2899 = getTempRet0() | 0;
 $2900 = $2896 | $2898;
 $2901 = $2897 | $2899;
 $2902 = _i64Add($2900 | 0, $2901 | 0, $2880 | 0, $2881 | 0) | 0;
 $2903 = getTempRet0() | 0;
 $2904 = $2902 ^ $2888;
 $2905 = $2903 ^ $2889;
 $2906 = _bitshift64Lshr($2904 | 0, $2905 | 0, 63) | 0;
 $2907 = getTempRet0() | 0;
 $2908 = _bitshift64Shl($2904 | 0, $2905 | 0, 1) | 0;
 $2909 = getTempRet0() | 0;
 $2910 = $2906 | $2908;
 $2911 = $2907 | $2909;
 $2912 = _i64Add($2778 | 0, $2779 | 0, $16 | 0, $17 | 0) | 0;
 $2913 = getTempRet0() | 0;
 $2914 = _i64Add($2912 | 0, $2913 | 0, $2758 | 0, $2759 | 0) | 0;
 $2915 = getTempRet0() | 0;
 $2916 = $2914 ^ $2824;
 $2917 = $2915 ^ $2825;
 $2918 = _i64Add($2917 | 0, $2916 | 0, $2712 | 0, $2713 | 0) | 0;
 $2919 = getTempRet0() | 0;
 $2920 = $2918 ^ $2758;
 $2921 = $2919 ^ $2759;
 $2922 = _bitshift64Lshr($2920 | 0, $2921 | 0, 24) | 0;
 $2923 = getTempRet0() | 0;
 $2924 = _bitshift64Shl($2920 | 0, $2921 | 0, 40) | 0;
 $2925 = getTempRet0() | 0;
 $2926 = $2922 | $2924;
 $2927 = $2923 | $2925;
 $2928 = _i64Add($2914 | 0, $2915 | 0, $14 | 0, $15 | 0) | 0;
 $2929 = getTempRet0() | 0;
 $2930 = _i64Add($2928 | 0, $2929 | 0, $2926 | 0, $2927 | 0) | 0;
 $2931 = getTempRet0() | 0;
 $2932 = $2930 ^ $2917;
 $2933 = $2931 ^ $2916;
 $2934 = _bitshift64Lshr($2932 | 0, $2933 | 0, 16) | 0;
 $2935 = getTempRet0() | 0;
 $2936 = _bitshift64Shl($2932 | 0, $2933 | 0, 48) | 0;
 $2937 = getTempRet0() | 0;
 $2938 = $2934 | $2936;
 $2939 = $2935 | $2937;
 $2940 = _i64Add($2938 | 0, $2939 | 0, $2918 | 0, $2919 | 0) | 0;
 $2941 = getTempRet0() | 0;
 $2942 = $2940 ^ $2926;
 $2943 = $2941 ^ $2927;
 $2944 = _bitshift64Lshr($2942 | 0, $2943 | 0, 63) | 0;
 $2945 = getTempRet0() | 0;
 $2946 = _bitshift64Shl($2942 | 0, $2943 | 0, 1) | 0;
 $2947 = getTempRet0() | 0;
 $2948 = $2944 | $2946;
 $2949 = $2945 | $2947;
 $2950 = _i64Add($2816 | 0, $2817 | 0, $4 | 0, $5 | 0) | 0;
 $2951 = getTempRet0() | 0;
 $2952 = _i64Add($2950 | 0, $2951 | 0, $2796 | 0, $2797 | 0) | 0;
 $2953 = getTempRet0() | 0;
 $2954 = $2952 ^ $2710;
 $2955 = $2953 ^ $2711;
 $2956 = _i64Add($2955 | 0, $2954 | 0, $2750 | 0, $2751 | 0) | 0;
 $2957 = getTempRet0() | 0;
 $2958 = $2956 ^ $2796;
 $2959 = $2957 ^ $2797;
 $2960 = _bitshift64Lshr($2958 | 0, $2959 | 0, 24) | 0;
 $2961 = getTempRet0() | 0;
 $2962 = _bitshift64Shl($2958 | 0, $2959 | 0, 40) | 0;
 $2963 = getTempRet0() | 0;
 $2964 = $2960 | $2962;
 $2965 = $2961 | $2963;
 $2966 = _i64Add($2952 | 0, $2953 | 0, $12 | 0, $13 | 0) | 0;
 $2967 = getTempRet0() | 0;
 $2968 = _i64Add($2966 | 0, $2967 | 0, $2964 | 0, $2965 | 0) | 0;
 $2969 = getTempRet0() | 0;
 $2970 = $2968 ^ $2955;
 $2971 = $2969 ^ $2954;
 $2972 = _bitshift64Lshr($2970 | 0, $2971 | 0, 16) | 0;
 $2973 = getTempRet0() | 0;
 $2974 = _bitshift64Shl($2970 | 0, $2971 | 0, 48) | 0;
 $2975 = getTempRet0() | 0;
 $2976 = $2972 | $2974;
 $2977 = $2973 | $2975;
 $2978 = _i64Add($2976 | 0, $2977 | 0, $2956 | 0, $2957 | 0) | 0;
 $2979 = getTempRet0() | 0;
 $2980 = $2978 ^ $2964;
 $2981 = $2979 ^ $2965;
 $2982 = _bitshift64Lshr($2980 | 0, $2981 | 0, 63) | 0;
 $2983 = getTempRet0() | 0;
 $2984 = _bitshift64Shl($2980 | 0, $2981 | 0, 1) | 0;
 $2985 = getTempRet0() | 0;
 $2986 = $2982 | $2984;
 $2987 = $2983 | $2985;
 $2988 = _i64Add($2854 | 0, $2855 | 0, $32 | 0, $33 | 0) | 0;
 $2989 = getTempRet0() | 0;
 $2990 = _i64Add($2988 | 0, $2989 | 0, $2910 | 0, $2911 | 0) | 0;
 $2991 = getTempRet0() | 0;
 $2992 = $2990 ^ $2976;
 $2993 = $2991 ^ $2977;
 $2994 = _i64Add($2993 | 0, $2992 | 0, $2940 | 0, $2941 | 0) | 0;
 $2995 = getTempRet0() | 0;
 $2996 = $2994 ^ $2910;
 $2997 = $2995 ^ $2911;
 $2998 = _bitshift64Lshr($2996 | 0, $2997 | 0, 24) | 0;
 $2999 = getTempRet0() | 0;
 $3000 = _bitshift64Shl($2996 | 0, $2997 | 0, 40) | 0;
 $3001 = getTempRet0() | 0;
 $3002 = $2998 | $3000;
 $3003 = $2999 | $3001;
 $3004 = _i64Add($2990 | 0, $2991 | 0, $24 | 0, $25 | 0) | 0;
 $3005 = getTempRet0() | 0;
 $3006 = _i64Add($3004 | 0, $3005 | 0, $3002 | 0, $3003 | 0) | 0;
 $3007 = getTempRet0() | 0;
 $3008 = $3006 ^ $2993;
 $3009 = $3007 ^ $2992;
 $3010 = _bitshift64Lshr($3008 | 0, $3009 | 0, 16) | 0;
 $3011 = getTempRet0() | 0;
 $3012 = _bitshift64Shl($3008 | 0, $3009 | 0, 48) | 0;
 $3013 = getTempRet0() | 0;
 $3014 = $3010 | $3012;
 $3015 = $3011 | $3013;
 $3016 = _i64Add($3014 | 0, $3015 | 0, $2994 | 0, $2995 | 0) | 0;
 $3017 = getTempRet0() | 0;
 $3018 = $3016 ^ $3002;
 $3019 = $3017 ^ $3003;
 $3020 = _bitshift64Lshr($3018 | 0, $3019 | 0, 63) | 0;
 $3021 = getTempRet0() | 0;
 $3022 = _bitshift64Shl($3018 | 0, $3019 | 0, 1) | 0;
 $3023 = getTempRet0() | 0;
 $3024 = $3020 | $3022;
 $3025 = $3021 | $3023;
 $3026 = _i64Add($2892 | 0, $2893 | 0, $20 | 0, $21 | 0) | 0;
 $3027 = getTempRet0() | 0;
 $3028 = _i64Add($3026 | 0, $3027 | 0, $2948 | 0, $2949 | 0) | 0;
 $3029 = getTempRet0() | 0;
 $3030 = $3028 ^ $2862;
 $3031 = $3029 ^ $2863;
 $3032 = _i64Add($3031 | 0, $3030 | 0, $2978 | 0, $2979 | 0) | 0;
 $3033 = getTempRet0() | 0;
 $3034 = $3032 ^ $2948;
 $3035 = $3033 ^ $2949;
 $3036 = _bitshift64Lshr($3034 | 0, $3035 | 0, 24) | 0;
 $3037 = getTempRet0() | 0;
 $3038 = _bitshift64Shl($3034 | 0, $3035 | 0, 40) | 0;
 $3039 = getTempRet0() | 0;
 $3040 = $3036 | $3038;
 $3041 = $3037 | $3039;
 $3042 = _i64Add($3028 | 0, $3029 | 0, $30 | 0, $31 | 0) | 0;
 $3043 = getTempRet0() | 0;
 $3044 = _i64Add($3042 | 0, $3043 | 0, $3040 | 0, $3041 | 0) | 0;
 $3045 = getTempRet0() | 0;
 $3046 = $3044 ^ $3031;
 $3047 = $3045 ^ $3030;
 $3048 = _bitshift64Lshr($3046 | 0, $3047 | 0, 16) | 0;
 $3049 = getTempRet0() | 0;
 $3050 = _bitshift64Shl($3046 | 0, $3047 | 0, 48) | 0;
 $3051 = getTempRet0() | 0;
 $3052 = $3048 | $3050;
 $3053 = $3049 | $3051;
 $3054 = _i64Add($3052 | 0, $3053 | 0, $3032 | 0, $3033 | 0) | 0;
 $3055 = getTempRet0() | 0;
 $3056 = $3054 ^ $3040;
 $3057 = $3055 ^ $3041;
 $3058 = _bitshift64Lshr($3056 | 0, $3057 | 0, 63) | 0;
 $3059 = getTempRet0() | 0;
 $3060 = _bitshift64Shl($3056 | 0, $3057 | 0, 1) | 0;
 $3061 = getTempRet0() | 0;
 $3062 = $3058 | $3060;
 $3063 = $3059 | $3061;
 $3064 = _i64Add($2930 | 0, $2931 | 0, $8 | 0, $9 | 0) | 0;
 $3065 = getTempRet0() | 0;
 $3066 = _i64Add($3064 | 0, $3065 | 0, $2986 | 0, $2987 | 0) | 0;
 $3067 = getTempRet0() | 0;
 $3068 = $3066 ^ $2900;
 $3069 = $3067 ^ $2901;
 $3070 = _i64Add($3069 | 0, $3068 | 0, $2864 | 0, $2865 | 0) | 0;
 $3071 = getTempRet0() | 0;
 $3072 = $3070 ^ $2986;
 $3073 = $3071 ^ $2987;
 $3074 = _bitshift64Lshr($3072 | 0, $3073 | 0, 24) | 0;
 $3075 = getTempRet0() | 0;
 $3076 = _bitshift64Shl($3072 | 0, $3073 | 0, 40) | 0;
 $3077 = getTempRet0() | 0;
 $3078 = $3074 | $3076;
 $3079 = $3075 | $3077;
 $3080 = _i64Add($3066 | 0, $3067 | 0, $26 | 0, $27 | 0) | 0;
 $3081 = getTempRet0() | 0;
 $3082 = _i64Add($3080 | 0, $3081 | 0, $3078 | 0, $3079 | 0) | 0;
 $3083 = getTempRet0() | 0;
 $3084 = $3082 ^ $3069;
 $3085 = $3083 ^ $3068;
 $3086 = _bitshift64Lshr($3084 | 0, $3085 | 0, 16) | 0;
 $3087 = getTempRet0() | 0;
 $3088 = _bitshift64Shl($3084 | 0, $3085 | 0, 48) | 0;
 $3089 = getTempRet0() | 0;
 $3090 = $3086 | $3088;
 $3091 = $3087 | $3089;
 $3092 = _i64Add($3090 | 0, $3091 | 0, $3070 | 0, $3071 | 0) | 0;
 $3093 = getTempRet0() | 0;
 $3094 = $3092 ^ $3078;
 $3095 = $3093 ^ $3079;
 $3096 = _bitshift64Lshr($3094 | 0, $3095 | 0, 63) | 0;
 $3097 = getTempRet0() | 0;
 $3098 = _bitshift64Shl($3094 | 0, $3095 | 0, 1) | 0;
 $3099 = getTempRet0() | 0;
 $3100 = $3096 | $3098;
 $3101 = $3097 | $3099;
 $3102 = _i64Add($2968 | 0, $2969 | 0, $28 | 0, $29 | 0) | 0;
 $3103 = getTempRet0() | 0;
 $3104 = _i64Add($3102 | 0, $3103 | 0, $2872 | 0, $2873 | 0) | 0;
 $3105 = getTempRet0() | 0;
 $3106 = $3104 ^ $2938;
 $3107 = $3105 ^ $2939;
 $3108 = _i64Add($3107 | 0, $3106 | 0, $2902 | 0, $2903 | 0) | 0;
 $3109 = getTempRet0() | 0;
 $3110 = $3108 ^ $2872;
 $3111 = $3109 ^ $2873;
 $3112 = _bitshift64Lshr($3110 | 0, $3111 | 0, 24) | 0;
 $3113 = getTempRet0() | 0;
 $3114 = _bitshift64Shl($3110 | 0, $3111 | 0, 40) | 0;
 $3115 = getTempRet0() | 0;
 $3116 = $3112 | $3114;
 $3117 = $3113 | $3115;
 $3118 = _i64Add($3104 | 0, $3105 | 0, $2 | 0, $3 | 0) | 0;
 $3119 = getTempRet0() | 0;
 $3120 = _i64Add($3118 | 0, $3119 | 0, $3116 | 0, $3117 | 0) | 0;
 $3121 = getTempRet0() | 0;
 $3122 = $3120 ^ $3107;
 $3123 = $3121 ^ $3106;
 $3124 = _bitshift64Lshr($3122 | 0, $3123 | 0, 16) | 0;
 $3125 = getTempRet0() | 0;
 $3126 = _bitshift64Shl($3122 | 0, $3123 | 0, 48) | 0;
 $3127 = getTempRet0() | 0;
 $3128 = $3124 | $3126;
 $3129 = $3125 | $3127;
 $3130 = _i64Add($3128 | 0, $3129 | 0, $3108 | 0, $3109 | 0) | 0;
 $3131 = getTempRet0() | 0;
 $3132 = $3130 ^ $3116;
 $3133 = $3131 ^ $3117;
 $3134 = _bitshift64Lshr($3132 | 0, $3133 | 0, 63) | 0;
 $3135 = getTempRet0() | 0;
 $3136 = _bitshift64Shl($3132 | 0, $3133 | 0, 1) | 0;
 $3137 = getTempRet0() | 0;
 $3138 = $3134 | $3136;
 $3139 = $3135 | $3137;
 $3140 = _i64Add($3006 | 0, $3007 | 0, $2 | 0, $3 | 0) | 0;
 $3141 = getTempRet0() | 0;
 $3142 = _i64Add($3140 | 0, $3141 | 0, $3138 | 0, $3139 | 0) | 0;
 $3143 = getTempRet0() | 0;
 $3144 = $3142 ^ $3052;
 $3145 = $3143 ^ $3053;
 $3146 = _i64Add($3145 | 0, $3144 | 0, $3092 | 0, $3093 | 0) | 0;
 $3147 = getTempRet0() | 0;
 $3148 = $3146 ^ $3138;
 $3149 = $3147 ^ $3139;
 $3150 = _bitshift64Lshr($3148 | 0, $3149 | 0, 24) | 0;
 $3151 = getTempRet0() | 0;
 $3152 = _bitshift64Shl($3148 | 0, $3149 | 0, 40) | 0;
 $3153 = getTempRet0() | 0;
 $3154 = $3150 | $3152;
 $3155 = $3151 | $3153;
 $3156 = _i64Add($3142 | 0, $3143 | 0, $4 | 0, $5 | 0) | 0;
 $3157 = getTempRet0() | 0;
 $3158 = _i64Add($3156 | 0, $3157 | 0, $3154 | 0, $3155 | 0) | 0;
 $3159 = getTempRet0() | 0;
 $3160 = $3158 ^ $3145;
 $3161 = $3159 ^ $3144;
 $3162 = _bitshift64Lshr($3160 | 0, $3161 | 0, 16) | 0;
 $3163 = getTempRet0() | 0;
 $3164 = _bitshift64Shl($3160 | 0, $3161 | 0, 48) | 0;
 $3165 = getTempRet0() | 0;
 $3166 = $3162 | $3164;
 $3167 = $3163 | $3165;
 $3168 = _i64Add($3166 | 0, $3167 | 0, $3146 | 0, $3147 | 0) | 0;
 $3169 = getTempRet0() | 0;
 $3170 = $3168 ^ $3154;
 $3171 = $3169 ^ $3155;
 $3172 = _bitshift64Lshr($3170 | 0, $3171 | 0, 63) | 0;
 $3173 = getTempRet0() | 0;
 $3174 = _bitshift64Shl($3170 | 0, $3171 | 0, 1) | 0;
 $3175 = getTempRet0() | 0;
 $3176 = $3172 | $3174;
 $3177 = $3173 | $3175;
 $3178 = _i64Add($3044 | 0, $3045 | 0, $6 | 0, $7 | 0) | 0;
 $3179 = getTempRet0() | 0;
 $3180 = _i64Add($3178 | 0, $3179 | 0, $3024 | 0, $3025 | 0) | 0;
 $3181 = getTempRet0() | 0;
 $3182 = $3180 ^ $3090;
 $3183 = $3181 ^ $3091;
 $3184 = _i64Add($3183 | 0, $3182 | 0, $3130 | 0, $3131 | 0) | 0;
 $3185 = getTempRet0() | 0;
 $3186 = $3184 ^ $3024;
 $3187 = $3185 ^ $3025;
 $3188 = _bitshift64Lshr($3186 | 0, $3187 | 0, 24) | 0;
 $3189 = getTempRet0() | 0;
 $3190 = _bitshift64Shl($3186 | 0, $3187 | 0, 40) | 0;
 $3191 = getTempRet0() | 0;
 $3192 = $3188 | $3190;
 $3193 = $3189 | $3191;
 $3194 = _i64Add($3180 | 0, $3181 | 0, $8 | 0, $9 | 0) | 0;
 $3195 = getTempRet0() | 0;
 $3196 = _i64Add($3194 | 0, $3195 | 0, $3192 | 0, $3193 | 0) | 0;
 $3197 = getTempRet0() | 0;
 $3198 = $3196 ^ $3183;
 $3199 = $3197 ^ $3182;
 $3200 = _bitshift64Lshr($3198 | 0, $3199 | 0, 16) | 0;
 $3201 = getTempRet0() | 0;
 $3202 = _bitshift64Shl($3198 | 0, $3199 | 0, 48) | 0;
 $3203 = getTempRet0() | 0;
 $3204 = $3200 | $3202;
 $3205 = $3201 | $3203;
 $3206 = _i64Add($3204 | 0, $3205 | 0, $3184 | 0, $3185 | 0) | 0;
 $3207 = getTempRet0() | 0;
 $3208 = $3206 ^ $3192;
 $3209 = $3207 ^ $3193;
 $3210 = _bitshift64Lshr($3208 | 0, $3209 | 0, 63) | 0;
 $3211 = getTempRet0() | 0;
 $3212 = _bitshift64Shl($3208 | 0, $3209 | 0, 1) | 0;
 $3213 = getTempRet0() | 0;
 $3214 = $3210 | $3212;
 $3215 = $3211 | $3213;
 $3216 = _i64Add($3082 | 0, $3083 | 0, $10 | 0, $11 | 0) | 0;
 $3217 = getTempRet0() | 0;
 $3218 = _i64Add($3216 | 0, $3217 | 0, $3062 | 0, $3063 | 0) | 0;
 $3219 = getTempRet0() | 0;
 $3220 = $3218 ^ $3128;
 $3221 = $3219 ^ $3129;
 $3222 = _i64Add($3221 | 0, $3220 | 0, $3016 | 0, $3017 | 0) | 0;
 $3223 = getTempRet0() | 0;
 $3224 = $3222 ^ $3062;
 $3225 = $3223 ^ $3063;
 $3226 = _bitshift64Lshr($3224 | 0, $3225 | 0, 24) | 0;
 $3227 = getTempRet0() | 0;
 $3228 = _bitshift64Shl($3224 | 0, $3225 | 0, 40) | 0;
 $3229 = getTempRet0() | 0;
 $3230 = $3226 | $3228;
 $3231 = $3227 | $3229;
 $3232 = _i64Add($3218 | 0, $3219 | 0, $12 | 0, $13 | 0) | 0;
 $3233 = getTempRet0() | 0;
 $3234 = _i64Add($3232 | 0, $3233 | 0, $3230 | 0, $3231 | 0) | 0;
 $3235 = getTempRet0() | 0;
 $3236 = $3234 ^ $3221;
 $3237 = $3235 ^ $3220;
 $3238 = _bitshift64Lshr($3236 | 0, $3237 | 0, 16) | 0;
 $3239 = getTempRet0() | 0;
 $3240 = _bitshift64Shl($3236 | 0, $3237 | 0, 48) | 0;
 $3241 = getTempRet0() | 0;
 $3242 = $3238 | $3240;
 $3243 = $3239 | $3241;
 $3244 = _i64Add($3242 | 0, $3243 | 0, $3222 | 0, $3223 | 0) | 0;
 $3245 = getTempRet0() | 0;
 $3246 = $3244 ^ $3230;
 $3247 = $3245 ^ $3231;
 $3248 = _bitshift64Lshr($3246 | 0, $3247 | 0, 63) | 0;
 $3249 = getTempRet0() | 0;
 $3250 = _bitshift64Shl($3246 | 0, $3247 | 0, 1) | 0;
 $3251 = getTempRet0() | 0;
 $3252 = $3248 | $3250;
 $3253 = $3249 | $3251;
 $3254 = _i64Add($3120 | 0, $3121 | 0, $14 | 0, $15 | 0) | 0;
 $3255 = getTempRet0() | 0;
 $3256 = _i64Add($3254 | 0, $3255 | 0, $3100 | 0, $3101 | 0) | 0;
 $3257 = getTempRet0() | 0;
 $3258 = $3256 ^ $3014;
 $3259 = $3257 ^ $3015;
 $3260 = _i64Add($3259 | 0, $3258 | 0, $3054 | 0, $3055 | 0) | 0;
 $3261 = getTempRet0() | 0;
 $3262 = $3260 ^ $3100;
 $3263 = $3261 ^ $3101;
 $3264 = _bitshift64Lshr($3262 | 0, $3263 | 0, 24) | 0;
 $3265 = getTempRet0() | 0;
 $3266 = _bitshift64Shl($3262 | 0, $3263 | 0, 40) | 0;
 $3267 = getTempRet0() | 0;
 $3268 = $3264 | $3266;
 $3269 = $3265 | $3267;
 $3270 = _i64Add($3256 | 0, $3257 | 0, $16 | 0, $17 | 0) | 0;
 $3271 = getTempRet0() | 0;
 $3272 = _i64Add($3270 | 0, $3271 | 0, $3268 | 0, $3269 | 0) | 0;
 $3273 = getTempRet0() | 0;
 $3274 = $3272 ^ $3259;
 $3275 = $3273 ^ $3258;
 $3276 = _bitshift64Lshr($3274 | 0, $3275 | 0, 16) | 0;
 $3277 = getTempRet0() | 0;
 $3278 = _bitshift64Shl($3274 | 0, $3275 | 0, 48) | 0;
 $3279 = getTempRet0() | 0;
 $3280 = $3276 | $3278;
 $3281 = $3277 | $3279;
 $3282 = _i64Add($3280 | 0, $3281 | 0, $3260 | 0, $3261 | 0) | 0;
 $3283 = getTempRet0() | 0;
 $3284 = $3282 ^ $3268;
 $3285 = $3283 ^ $3269;
 $3286 = _bitshift64Lshr($3284 | 0, $3285 | 0, 63) | 0;
 $3287 = getTempRet0() | 0;
 $3288 = _bitshift64Shl($3284 | 0, $3285 | 0, 1) | 0;
 $3289 = getTempRet0() | 0;
 $3290 = $3286 | $3288;
 $3291 = $3287 | $3289;
 $3292 = _i64Add($3158 | 0, $3159 | 0, $18 | 0, $19 | 0) | 0;
 $3293 = getTempRet0() | 0;
 $3294 = _i64Add($3292 | 0, $3293 | 0, $3214 | 0, $3215 | 0) | 0;
 $3295 = getTempRet0() | 0;
 $3296 = $3294 ^ $3280;
 $3297 = $3295 ^ $3281;
 $3298 = _i64Add($3297 | 0, $3296 | 0, $3244 | 0, $3245 | 0) | 0;
 $3299 = getTempRet0() | 0;
 $3300 = $3298 ^ $3214;
 $3301 = $3299 ^ $3215;
 $3302 = _bitshift64Lshr($3300 | 0, $3301 | 0, 24) | 0;
 $3303 = getTempRet0() | 0;
 $3304 = _bitshift64Shl($3300 | 0, $3301 | 0, 40) | 0;
 $3305 = getTempRet0() | 0;
 $3306 = $3302 | $3304;
 $3307 = $3303 | $3305;
 $3308 = _i64Add($3294 | 0, $3295 | 0, $20 | 0, $21 | 0) | 0;
 $3309 = getTempRet0() | 0;
 $3310 = _i64Add($3308 | 0, $3309 | 0, $3306 | 0, $3307 | 0) | 0;
 $3311 = getTempRet0() | 0;
 $3312 = $3310 ^ $3297;
 $3313 = $3311 ^ $3296;
 $3314 = _bitshift64Lshr($3312 | 0, $3313 | 0, 16) | 0;
 $3315 = getTempRet0() | 0;
 $3316 = _bitshift64Shl($3312 | 0, $3313 | 0, 48) | 0;
 $3317 = getTempRet0() | 0;
 $3318 = $3314 | $3316;
 $3319 = $3315 | $3317;
 $3320 = _i64Add($3318 | 0, $3319 | 0, $3298 | 0, $3299 | 0) | 0;
 $3321 = getTempRet0() | 0;
 $3322 = $3320 ^ $3306;
 $3323 = $3321 ^ $3307;
 $3324 = _bitshift64Lshr($3322 | 0, $3323 | 0, 63) | 0;
 $3325 = getTempRet0() | 0;
 $3326 = _bitshift64Shl($3322 | 0, $3323 | 0, 1) | 0;
 $3327 = getTempRet0() | 0;
 $3328 = $3324 | $3326;
 $3329 = $3325 | $3327;
 $3330 = _i64Add($3196 | 0, $3197 | 0, $22 | 0, $23 | 0) | 0;
 $3331 = getTempRet0() | 0;
 $3332 = _i64Add($3330 | 0, $3331 | 0, $3252 | 0, $3253 | 0) | 0;
 $3333 = getTempRet0() | 0;
 $3334 = $3332 ^ $3166;
 $3335 = $3333 ^ $3167;
 $3336 = _i64Add($3335 | 0, $3334 | 0, $3282 | 0, $3283 | 0) | 0;
 $3337 = getTempRet0() | 0;
 $3338 = $3336 ^ $3252;
 $3339 = $3337 ^ $3253;
 $3340 = _bitshift64Lshr($3338 | 0, $3339 | 0, 24) | 0;
 $3341 = getTempRet0() | 0;
 $3342 = _bitshift64Shl($3338 | 0, $3339 | 0, 40) | 0;
 $3343 = getTempRet0() | 0;
 $3344 = $3340 | $3342;
 $3345 = $3341 | $3343;
 $3346 = _i64Add($3332 | 0, $3333 | 0, $24 | 0, $25 | 0) | 0;
 $3347 = getTempRet0() | 0;
 $3348 = _i64Add($3346 | 0, $3347 | 0, $3344 | 0, $3345 | 0) | 0;
 $3349 = getTempRet0() | 0;
 $3350 = $3348 ^ $3335;
 $3351 = $3349 ^ $3334;
 $3352 = _bitshift64Lshr($3350 | 0, $3351 | 0, 16) | 0;
 $3353 = getTempRet0() | 0;
 $3354 = _bitshift64Shl($3350 | 0, $3351 | 0, 48) | 0;
 $3355 = getTempRet0() | 0;
 $3356 = $3352 | $3354;
 $3357 = $3353 | $3355;
 $3358 = _i64Add($3356 | 0, $3357 | 0, $3336 | 0, $3337 | 0) | 0;
 $3359 = getTempRet0() | 0;
 $3360 = $3358 ^ $3344;
 $3361 = $3359 ^ $3345;
 $3362 = _bitshift64Lshr($3360 | 0, $3361 | 0, 63) | 0;
 $3363 = getTempRet0() | 0;
 $3364 = _bitshift64Shl($3360 | 0, $3361 | 0, 1) | 0;
 $3365 = getTempRet0() | 0;
 $3366 = $3362 | $3364;
 $3367 = $3363 | $3365;
 $3368 = _i64Add($3234 | 0, $3235 | 0, $26 | 0, $27 | 0) | 0;
 $3369 = getTempRet0() | 0;
 $3370 = _i64Add($3368 | 0, $3369 | 0, $3290 | 0, $3291 | 0) | 0;
 $3371 = getTempRet0() | 0;
 $3372 = $3370 ^ $3204;
 $3373 = $3371 ^ $3205;
 $3374 = _i64Add($3373 | 0, $3372 | 0, $3168 | 0, $3169 | 0) | 0;
 $3375 = getTempRet0() | 0;
 $3376 = $3374 ^ $3290;
 $3377 = $3375 ^ $3291;
 $3378 = _bitshift64Lshr($3376 | 0, $3377 | 0, 24) | 0;
 $3379 = getTempRet0() | 0;
 $3380 = _bitshift64Shl($3376 | 0, $3377 | 0, 40) | 0;
 $3381 = getTempRet0() | 0;
 $3382 = $3378 | $3380;
 $3383 = $3379 | $3381;
 $3384 = _i64Add($3370 | 0, $3371 | 0, $28 | 0, $29 | 0) | 0;
 $3385 = getTempRet0() | 0;
 $3386 = _i64Add($3384 | 0, $3385 | 0, $3382 | 0, $3383 | 0) | 0;
 $3387 = getTempRet0() | 0;
 $3388 = $3386 ^ $3373;
 $3389 = $3387 ^ $3372;
 $3390 = _bitshift64Lshr($3388 | 0, $3389 | 0, 16) | 0;
 $3391 = getTempRet0() | 0;
 $3392 = _bitshift64Shl($3388 | 0, $3389 | 0, 48) | 0;
 $3393 = getTempRet0() | 0;
 $3394 = $3390 | $3392;
 $3395 = $3391 | $3393;
 $3396 = _i64Add($3394 | 0, $3395 | 0, $3374 | 0, $3375 | 0) | 0;
 $3397 = getTempRet0() | 0;
 $3398 = $3396 ^ $3382;
 $3399 = $3397 ^ $3383;
 $3400 = _bitshift64Lshr($3398 | 0, $3399 | 0, 63) | 0;
 $3401 = getTempRet0() | 0;
 $3402 = _bitshift64Shl($3398 | 0, $3399 | 0, 1) | 0;
 $3403 = getTempRet0() | 0;
 $3404 = $3400 | $3402;
 $3405 = $3401 | $3403;
 $3406 = _i64Add($3272 | 0, $3273 | 0, $30 | 0, $31 | 0) | 0;
 $3407 = getTempRet0() | 0;
 $3408 = _i64Add($3406 | 0, $3407 | 0, $3176 | 0, $3177 | 0) | 0;
 $3409 = getTempRet0() | 0;
 $3410 = $3408 ^ $3242;
 $3411 = $3409 ^ $3243;
 $3412 = _i64Add($3411 | 0, $3410 | 0, $3206 | 0, $3207 | 0) | 0;
 $3413 = getTempRet0() | 0;
 $3414 = $3412 ^ $3176;
 $3415 = $3413 ^ $3177;
 $3416 = _bitshift64Lshr($3414 | 0, $3415 | 0, 24) | 0;
 $3417 = getTempRet0() | 0;
 $3418 = _bitshift64Shl($3414 | 0, $3415 | 0, 40) | 0;
 $3419 = getTempRet0() | 0;
 $3420 = $3416 | $3418;
 $3421 = $3417 | $3419;
 $3422 = _i64Add($3408 | 0, $3409 | 0, $32 | 0, $33 | 0) | 0;
 $3423 = getTempRet0() | 0;
 $3424 = _i64Add($3422 | 0, $3423 | 0, $3420 | 0, $3421 | 0) | 0;
 $3425 = getTempRet0() | 0;
 $3426 = $3424 ^ $3411;
 $3427 = $3425 ^ $3410;
 $3428 = _bitshift64Lshr($3426 | 0, $3427 | 0, 16) | 0;
 $3429 = getTempRet0() | 0;
 $3430 = _bitshift64Shl($3426 | 0, $3427 | 0, 48) | 0;
 $3431 = getTempRet0() | 0;
 $3432 = $3428 | $3430;
 $3433 = $3429 | $3431;
 $3434 = _i64Add($3432 | 0, $3433 | 0, $3412 | 0, $3413 | 0) | 0;
 $3435 = getTempRet0() | 0;
 $3436 = $3434 ^ $3420;
 $3437 = $3435 ^ $3421;
 $3438 = _bitshift64Lshr($3436 | 0, $3437 | 0, 63) | 0;
 $3439 = getTempRet0() | 0;
 $3440 = _bitshift64Shl($3436 | 0, $3437 | 0, 1) | 0;
 $3441 = getTempRet0() | 0;
 $3442 = $3438 | $3440;
 $3443 = $3439 | $3441;
 $3444 = _i64Add($3310 | 0, $3311 | 0, $30 | 0, $31 | 0) | 0;
 $3445 = getTempRet0() | 0;
 $3446 = _i64Add($3444 | 0, $3445 | 0, $3442 | 0, $3443 | 0) | 0;
 $3447 = getTempRet0() | 0;
 $3448 = $3446 ^ $3356;
 $3449 = $3447 ^ $3357;
 $3450 = _i64Add($3449 | 0, $3448 | 0, $3396 | 0, $3397 | 0) | 0;
 $3451 = getTempRet0() | 0;
 $3452 = $3450 ^ $3442;
 $3453 = $3451 ^ $3443;
 $3454 = _bitshift64Lshr($3452 | 0, $3453 | 0, 24) | 0;
 $3455 = getTempRet0() | 0;
 $3456 = _bitshift64Shl($3452 | 0, $3453 | 0, 40) | 0;
 $3457 = getTempRet0() | 0;
 $3458 = $3454 | $3456;
 $3459 = $3455 | $3457;
 $3460 = _i64Add($3446 | 0, $3447 | 0, $22 | 0, $23 | 0) | 0;
 $3461 = getTempRet0() | 0;
 $3462 = _i64Add($3460 | 0, $3461 | 0, $3458 | 0, $3459 | 0) | 0;
 $3463 = getTempRet0() | 0;
 $3464 = $3462 ^ $3449;
 $3465 = $3463 ^ $3448;
 $3466 = _bitshift64Lshr($3464 | 0, $3465 | 0, 16) | 0;
 $3467 = getTempRet0() | 0;
 $3468 = _bitshift64Shl($3464 | 0, $3465 | 0, 48) | 0;
 $3469 = getTempRet0() | 0;
 $3470 = $3466 | $3468;
 $3471 = $3467 | $3469;
 $3472 = _i64Add($3470 | 0, $3471 | 0, $3450 | 0, $3451 | 0) | 0;
 $3473 = getTempRet0() | 0;
 $3474 = $3472 ^ $3458;
 $3475 = $3473 ^ $3459;
 $3476 = _bitshift64Lshr($3474 | 0, $3475 | 0, 63) | 0;
 $3477 = getTempRet0() | 0;
 $3478 = _bitshift64Shl($3474 | 0, $3475 | 0, 1) | 0;
 $3479 = getTempRet0() | 0;
 $3480 = $3476 | $3478;
 $3481 = $3477 | $3479;
 $3482 = _i64Add($3348 | 0, $3349 | 0, $10 | 0, $11 | 0) | 0;
 $3483 = getTempRet0() | 0;
 $3484 = _i64Add($3482 | 0, $3483 | 0, $3328 | 0, $3329 | 0) | 0;
 $3485 = getTempRet0() | 0;
 $3486 = $3484 ^ $3394;
 $3487 = $3485 ^ $3395;
 $3488 = _i64Add($3487 | 0, $3486 | 0, $3434 | 0, $3435 | 0) | 0;
 $3489 = getTempRet0() | 0;
 $3490 = $3488 ^ $3328;
 $3491 = $3489 ^ $3329;
 $3492 = _bitshift64Lshr($3490 | 0, $3491 | 0, 24) | 0;
 $3493 = getTempRet0() | 0;
 $3494 = _bitshift64Shl($3490 | 0, $3491 | 0, 40) | 0;
 $3495 = getTempRet0() | 0;
 $3496 = $3492 | $3494;
 $3497 = $3493 | $3495;
 $3498 = _i64Add($3484 | 0, $3485 | 0, $18 | 0, $19 | 0) | 0;
 $3499 = getTempRet0() | 0;
 $3500 = _i64Add($3498 | 0, $3499 | 0, $3496 | 0, $3497 | 0) | 0;
 $3501 = getTempRet0() | 0;
 $3502 = $3500 ^ $3487;
 $3503 = $3501 ^ $3486;
 $3504 = _bitshift64Lshr($3502 | 0, $3503 | 0, 16) | 0;
 $3505 = getTempRet0() | 0;
 $3506 = _bitshift64Shl($3502 | 0, $3503 | 0, 48) | 0;
 $3507 = getTempRet0() | 0;
 $3508 = $3504 | $3506;
 $3509 = $3505 | $3507;
 $3510 = _i64Add($3508 | 0, $3509 | 0, $3488 | 0, $3489 | 0) | 0;
 $3511 = getTempRet0() | 0;
 $3512 = $3510 ^ $3496;
 $3513 = $3511 ^ $3497;
 $3514 = _bitshift64Lshr($3512 | 0, $3513 | 0, 63) | 0;
 $3515 = getTempRet0() | 0;
 $3516 = _bitshift64Shl($3512 | 0, $3513 | 0, 1) | 0;
 $3517 = getTempRet0() | 0;
 $3518 = $3514 | $3516;
 $3519 = $3515 | $3517;
 $3520 = _i64Add($3386 | 0, $3387 | 0, $20 | 0, $21 | 0) | 0;
 $3521 = getTempRet0() | 0;
 $3522 = _i64Add($3520 | 0, $3521 | 0, $3366 | 0, $3367 | 0) | 0;
 $3523 = getTempRet0() | 0;
 $3524 = $3522 ^ $3432;
 $3525 = $3523 ^ $3433;
 $3526 = _i64Add($3525 | 0, $3524 | 0, $3320 | 0, $3321 | 0) | 0;
 $3527 = getTempRet0() | 0;
 $3528 = $3526 ^ $3366;
 $3529 = $3527 ^ $3367;
 $3530 = _bitshift64Lshr($3528 | 0, $3529 | 0, 24) | 0;
 $3531 = getTempRet0() | 0;
 $3532 = _bitshift64Shl($3528 | 0, $3529 | 0, 40) | 0;
 $3533 = getTempRet0() | 0;
 $3534 = $3530 | $3532;
 $3535 = $3531 | $3533;
 $3536 = _i64Add($3522 | 0, $3523 | 0, $32 | 0, $33 | 0) | 0;
 $3537 = getTempRet0() | 0;
 $3538 = _i64Add($3536 | 0, $3537 | 0, $3534 | 0, $3535 | 0) | 0;
 $3539 = getTempRet0() | 0;
 $3540 = $3538 ^ $3525;
 $3541 = $3539 ^ $3524;
 $3542 = _bitshift64Lshr($3540 | 0, $3541 | 0, 16) | 0;
 $3543 = getTempRet0() | 0;
 $3544 = _bitshift64Shl($3540 | 0, $3541 | 0, 48) | 0;
 $3545 = getTempRet0() | 0;
 $3546 = $3542 | $3544;
 $3547 = $3543 | $3545;
 $3548 = _i64Add($3546 | 0, $3547 | 0, $3526 | 0, $3527 | 0) | 0;
 $3549 = getTempRet0() | 0;
 $3550 = $3548 ^ $3534;
 $3551 = $3549 ^ $3535;
 $3552 = _bitshift64Lshr($3550 | 0, $3551 | 0, 63) | 0;
 $3553 = getTempRet0() | 0;
 $3554 = _bitshift64Shl($3550 | 0, $3551 | 0, 1) | 0;
 $3555 = getTempRet0() | 0;
 $3556 = $3552 | $3554;
 $3557 = $3553 | $3555;
 $3558 = _i64Add($3424 | 0, $3425 | 0, $28 | 0, $29 | 0) | 0;
 $3559 = getTempRet0() | 0;
 $3560 = _i64Add($3558 | 0, $3559 | 0, $3404 | 0, $3405 | 0) | 0;
 $3561 = getTempRet0() | 0;
 $3562 = $3560 ^ $3318;
 $3563 = $3561 ^ $3319;
 $3564 = _i64Add($3563 | 0, $3562 | 0, $3358 | 0, $3359 | 0) | 0;
 $3565 = getTempRet0() | 0;
 $3566 = $3564 ^ $3404;
 $3567 = $3565 ^ $3405;
 $3568 = _bitshift64Lshr($3566 | 0, $3567 | 0, 24) | 0;
 $3569 = getTempRet0() | 0;
 $3570 = _bitshift64Shl($3566 | 0, $3567 | 0, 40) | 0;
 $3571 = getTempRet0() | 0;
 $3572 = $3568 | $3570;
 $3573 = $3569 | $3571;
 $3574 = _i64Add($3560 | 0, $3561 | 0, $14 | 0, $15 | 0) | 0;
 $3575 = getTempRet0() | 0;
 $3576 = _i64Add($3574 | 0, $3575 | 0, $3572 | 0, $3573 | 0) | 0;
 $3577 = getTempRet0() | 0;
 $3578 = $3576 ^ $3563;
 $3579 = $3577 ^ $3562;
 $3580 = _bitshift64Lshr($3578 | 0, $3579 | 0, 16) | 0;
 $3581 = getTempRet0() | 0;
 $3582 = _bitshift64Shl($3578 | 0, $3579 | 0, 48) | 0;
 $3583 = getTempRet0() | 0;
 $3584 = $3580 | $3582;
 $3585 = $3581 | $3583;
 $3586 = _i64Add($3584 | 0, $3585 | 0, $3564 | 0, $3565 | 0) | 0;
 $3587 = getTempRet0() | 0;
 $3588 = $3586 ^ $3572;
 $3589 = $3587 ^ $3573;
 $3590 = _bitshift64Lshr($3588 | 0, $3589 | 0, 63) | 0;
 $3591 = getTempRet0() | 0;
 $3592 = _bitshift64Shl($3588 | 0, $3589 | 0, 1) | 0;
 $3593 = getTempRet0() | 0;
 $3594 = $3590 | $3592;
 $3595 = $3591 | $3593;
 $3596 = _i64Add($3462 | 0, $3463 | 0, $4 | 0, $5 | 0) | 0;
 $3597 = getTempRet0() | 0;
 $3598 = _i64Add($3596 | 0, $3597 | 0, $3518 | 0, $3519 | 0) | 0;
 $3599 = getTempRet0() | 0;
 $3600 = $3598 ^ $3584;
 $3601 = $3599 ^ $3585;
 $3602 = _i64Add($3601 | 0, $3600 | 0, $3548 | 0, $3549 | 0) | 0;
 $3603 = getTempRet0() | 0;
 $3604 = $3602 ^ $3518;
 $3605 = $3603 ^ $3519;
 $3606 = _bitshift64Lshr($3604 | 0, $3605 | 0, 24) | 0;
 $3607 = getTempRet0() | 0;
 $3608 = _bitshift64Shl($3604 | 0, $3605 | 0, 40) | 0;
 $3609 = getTempRet0() | 0;
 $3610 = $3606 | $3608;
 $3611 = $3607 | $3609;
 $3612 = _i64Add($3598 | 0, $3599 | 0, $26 | 0, $27 | 0) | 0;
 $3613 = getTempRet0() | 0;
 $3614 = _i64Add($3612 | 0, $3613 | 0, $3610 | 0, $3611 | 0) | 0;
 $3615 = getTempRet0() | 0;
 $3616 = $3614 ^ $3601;
 $3617 = $3615 ^ $3600;
 $3618 = _bitshift64Lshr($3616 | 0, $3617 | 0, 16) | 0;
 $3619 = getTempRet0() | 0;
 $3620 = _bitshift64Shl($3616 | 0, $3617 | 0, 48) | 0;
 $3621 = getTempRet0() | 0;
 $3622 = $3618 | $3620;
 $3623 = $3619 | $3621;
 $3624 = _i64Add($3622 | 0, $3623 | 0, $3602 | 0, $3603 | 0) | 0;
 $3625 = getTempRet0() | 0;
 $3626 = $3624 ^ $3610;
 $3627 = $3625 ^ $3611;
 $3628 = _bitshift64Lshr($3626 | 0, $3627 | 0, 63) | 0;
 $3629 = getTempRet0() | 0;
 $3630 = _bitshift64Shl($3626 | 0, $3627 | 0, 1) | 0;
 $3631 = getTempRet0() | 0;
 $3632 = $3628 | $3630;
 $3633 = $3629 | $3631;
 $3634 = _i64Add($3500 | 0, $3501 | 0, $2 | 0, $3 | 0) | 0;
 $3635 = getTempRet0() | 0;
 $3636 = _i64Add($3634 | 0, $3635 | 0, $3556 | 0, $3557 | 0) | 0;
 $3637 = getTempRet0() | 0;
 $3638 = $3636 ^ $3470;
 $3639 = $3637 ^ $3471;
 $3640 = _i64Add($3639 | 0, $3638 | 0, $3586 | 0, $3587 | 0) | 0;
 $3641 = getTempRet0() | 0;
 $3642 = $3640 ^ $3556;
 $3643 = $3641 ^ $3557;
 $3644 = _bitshift64Lshr($3642 | 0, $3643 | 0, 24) | 0;
 $3645 = getTempRet0() | 0;
 $3646 = _bitshift64Shl($3642 | 0, $3643 | 0, 40) | 0;
 $3647 = getTempRet0() | 0;
 $3648 = $3644 | $3646;
 $3649 = $3645 | $3647;
 $3650 = _i64Add($3636 | 0, $3637 | 0, $6 | 0, $7 | 0) | 0;
 $3651 = getTempRet0() | 0;
 $3652 = _i64Add($3650 | 0, $3651 | 0, $3648 | 0, $3649 | 0) | 0;
 $3653 = getTempRet0() | 0;
 $3654 = $3652 ^ $3639;
 $3655 = $3653 ^ $3638;
 $3656 = _bitshift64Lshr($3654 | 0, $3655 | 0, 16) | 0;
 $3657 = getTempRet0() | 0;
 $3658 = _bitshift64Shl($3654 | 0, $3655 | 0, 48) | 0;
 $3659 = getTempRet0() | 0;
 $3660 = $3656 | $3658;
 $3661 = $3657 | $3659;
 $3662 = _i64Add($3660 | 0, $3661 | 0, $3640 | 0, $3641 | 0) | 0;
 $3663 = getTempRet0() | 0;
 $3664 = $3662 ^ $3648;
 $3665 = $3663 ^ $3649;
 $3666 = _bitshift64Lshr($3664 | 0, $3665 | 0, 63) | 0;
 $3667 = getTempRet0() | 0;
 $3668 = _bitshift64Shl($3664 | 0, $3665 | 0, 1) | 0;
 $3669 = getTempRet0() | 0;
 $3670 = $3666 | $3668;
 $3671 = $3667 | $3669;
 $3672 = _i64Add($3538 | 0, $3539 | 0, $24 | 0, $25 | 0) | 0;
 $3673 = getTempRet0() | 0;
 $3674 = _i64Add($3672 | 0, $3673 | 0, $3594 | 0, $3595 | 0) | 0;
 $3675 = getTempRet0() | 0;
 $3676 = $3674 ^ $3508;
 $3677 = $3675 ^ $3509;
 $3678 = _i64Add($3677 | 0, $3676 | 0, $3472 | 0, $3473 | 0) | 0;
 $3679 = getTempRet0() | 0;
 $3680 = $3678 ^ $3594;
 $3681 = $3679 ^ $3595;
 $3682 = _bitshift64Lshr($3680 | 0, $3681 | 0, 24) | 0;
 $3683 = getTempRet0() | 0;
 $3684 = _bitshift64Shl($3680 | 0, $3681 | 0, 40) | 0;
 $3685 = getTempRet0() | 0;
 $3686 = $3682 | $3684;
 $3687 = $3683 | $3685;
 $3688 = _i64Add($3674 | 0, $3675 | 0, $16 | 0, $17 | 0) | 0;
 $3689 = getTempRet0() | 0;
 $3690 = _i64Add($3688 | 0, $3689 | 0, $3686 | 0, $3687 | 0) | 0;
 $3691 = getTempRet0() | 0;
 $3692 = $3690 ^ $3677;
 $3693 = $3691 ^ $3676;
 $3694 = _bitshift64Lshr($3692 | 0, $3693 | 0, 16) | 0;
 $3695 = getTempRet0() | 0;
 $3696 = _bitshift64Shl($3692 | 0, $3693 | 0, 48) | 0;
 $3697 = getTempRet0() | 0;
 $3698 = $3694 | $3696;
 $3699 = $3695 | $3697;
 $3700 = _i64Add($3698 | 0, $3699 | 0, $3678 | 0, $3679 | 0) | 0;
 $3701 = getTempRet0() | 0;
 $3702 = $3700 ^ $3686;
 $3703 = $3701 ^ $3687;
 $3704 = _bitshift64Lshr($3702 | 0, $3703 | 0, 63) | 0;
 $3705 = getTempRet0() | 0;
 $3706 = _bitshift64Shl($3702 | 0, $3703 | 0, 1) | 0;
 $3707 = getTempRet0() | 0;
 $3708 = $3704 | $3706;
 $3709 = $3705 | $3707;
 $3710 = _i64Add($3576 | 0, $3577 | 0, $12 | 0, $13 | 0) | 0;
 $3711 = getTempRet0() | 0;
 $3712 = _i64Add($3710 | 0, $3711 | 0, $3480 | 0, $3481 | 0) | 0;
 $3713 = getTempRet0() | 0;
 $3714 = $3712 ^ $3546;
 $3715 = $3713 ^ $3547;
 $3716 = _i64Add($3715 | 0, $3714 | 0, $3510 | 0, $3511 | 0) | 0;
 $3717 = getTempRet0() | 0;
 $3718 = $3716 ^ $3480;
 $3719 = $3717 ^ $3481;
 $3720 = _bitshift64Lshr($3718 | 0, $3719 | 0, 24) | 0;
 $3721 = getTempRet0() | 0;
 $3722 = _bitshift64Shl($3718 | 0, $3719 | 0, 40) | 0;
 $3723 = getTempRet0() | 0;
 $3724 = $3720 | $3722;
 $3725 = $3721 | $3723;
 $3726 = _i64Add($3712 | 0, $3713 | 0, $8 | 0, $9 | 0) | 0;
 $3727 = getTempRet0() | 0;
 $3728 = _i64Add($3726 | 0, $3727 | 0, $3724 | 0, $3725 | 0) | 0;
 $3729 = getTempRet0() | 0;
 $3730 = $3728 ^ $3715;
 $3731 = $3729 ^ $3714;
 $3732 = _bitshift64Lshr($3730 | 0, $3731 | 0, 16) | 0;
 $3733 = getTempRet0() | 0;
 $3734 = _bitshift64Shl($3730 | 0, $3731 | 0, 48) | 0;
 $3735 = getTempRet0() | 0;
 $3736 = $3732 | $3734;
 $3737 = $3733 | $3735;
 $3738 = _i64Add($3736 | 0, $3737 | 0, $3716 | 0, $3717 | 0) | 0;
 $3739 = getTempRet0() | 0;
 $3740 = $3738 ^ $3724;
 $3741 = $3739 ^ $3725;
 $3742 = _bitshift64Lshr($3740 | 0, $3741 | 0, 63) | 0;
 $3743 = getTempRet0() | 0;
 $3744 = _bitshift64Shl($3740 | 0, $3741 | 0, 1) | 0;
 $3745 = getTempRet0() | 0;
 $3746 = $3742 | $3744;
 $3747 = $3743 | $3745;
 $3748 = $3614 ^ $36;
 $3749 = $3615 ^ $39;
 $3750 = $3748 ^ $3700;
 $3751 = $3749 ^ $3701;
 $3752 = $S;
 $3753 = $3752;
 HEAP32[$3753 >> 2] = $3750;
 $3754 = $3752 + 4 | 0;
 $3755 = $3754;
 HEAP32[$3755 >> 2] = $3751;
 $3756 = $3652 ^ $42;
 $3757 = $3653 ^ $45;
 $3758 = $3756 ^ $3738;
 $3759 = $3757 ^ $3739;
 $3760 = $arrayidx49;
 $3761 = $3760;
 HEAP32[$3761 >> 2] = $3758;
 $3762 = $3760 + 4 | 0;
 $3763 = $3762;
 HEAP32[$3763 >> 2] = $3759;
 $3764 = $3690 ^ $48;
 $3765 = $3691 ^ $51;
 $3766 = $3764 ^ $3624;
 $3767 = $3765 ^ $3625;
 $3768 = $arrayidx52;
 $3769 = $3768;
 HEAP32[$3769 >> 2] = $3766;
 $3770 = $3768 + 4 | 0;
 $3771 = $3770;
 HEAP32[$3771 >> 2] = $3767;
 $3772 = $3728 ^ $54;
 $3773 = $3729 ^ $57;
 $3774 = $3772 ^ $3662;
 $3775 = $3773 ^ $3663;
 $3776 = $arrayidx55;
 $3777 = $3776;
 HEAP32[$3777 >> 2] = $3774;
 $3778 = $3776 + 4 | 0;
 $3779 = $3778;
 HEAP32[$3779 >> 2] = $3775;
 $3780 = $3660 ^ $60;
 $3781 = $3661 ^ $63;
 $3782 = $3780 ^ $3746;
 $3783 = $3781 ^ $3747;
 $3784 = $arrayidx58;
 $3785 = $3784;
 HEAP32[$3785 >> 2] = $3782;
 $3786 = $3784 + 4 | 0;
 $3787 = $3786;
 HEAP32[$3787 >> 2] = $3783;
 $3788 = $3698 ^ $66;
 $3789 = $3699 ^ $69;
 $3790 = $3788 ^ $3632;
 $3791 = $3789 ^ $3633;
 $3792 = $arrayidx61;
 $3793 = $3792;
 HEAP32[$3793 >> 2] = $3790;
 $3794 = $3792 + 4 | 0;
 $3795 = $3794;
 HEAP32[$3795 >> 2] = $3791;
 $3796 = $3736 ^ $72;
 $3797 = $3737 ^ $75;
 $3798 = $3796 ^ $3670;
 $3799 = $3797 ^ $3671;
 $3800 = $arrayidx64;
 $3801 = $3800;
 HEAP32[$3801 >> 2] = $3798;
 $3802 = $3800 + 4 | 0;
 $3803 = $3802;
 HEAP32[$3803 >> 2] = $3799;
 $3804 = $3622 ^ $78;
 $3805 = $3623 ^ $81;
 $3806 = $3804 ^ $3708;
 $3807 = $3805 ^ $3709;
 $3808 = $arrayidx67;
 $3809 = $3808;
 HEAP32[$3809 >> 2] = $3806;
 $3810 = $3808 + 4 | 0;
 $3811 = $3810;
 HEAP32[$3811 >> 2] = $3807;
 return;
}
function _Skein_512_Process_Block($ctx, $blkPtr, $blkCnt, $byteCntAdd) {
 $ctx = $ctx | 0;
 $blkPtr = $blkPtr | 0;
 $blkCnt = $blkCnt | 0;
 $byteCntAdd = $byteCntAdd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $100$phi = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0;
 var $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0;
 var $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0;
 var $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0;
 var $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0;
 var $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0;
 var $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0;
 var $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0;
 var $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0;
 var $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0;
 var $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0;
 var $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0;
 var $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0;
 var $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0;
 var $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0;
 var $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0;
 var $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0;
 var $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0;
 var $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0;
 var $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0;
 var $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0;
 var $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0;
 var $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0;
 var $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0;
 var $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0;
 var $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0;
 var $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0;
 var $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0;
 var $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0;
 var $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0;
 var $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0;
 var $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0;
 var $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0;
 var $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0;
 var $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0;
 var $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0;
 var $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0;
 var $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0;
 var $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0;
 var $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0;
 var $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0;
 var $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0;
 var $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0;
 var $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0;
 var $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0;
 var $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0;
 var $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0;
 var $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0;
 var $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0;
 var $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0;
 var $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0;
 var $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0;
 var $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0;
 var $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0;
 var $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0;
 var $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0;
 var $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0;
 var $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0;
 var $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0;
 var $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0;
 var $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0;
 var $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0;
 var $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0;
 var $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0;
 var $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0;
 var $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0;
 var $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0;
 var $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0;
 var $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0;
 var $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0;
 var $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0;
 var $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0;
 var $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0;
 var $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0;
 var $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0;
 var $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0;
 var $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0;
 var $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0;
 var $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0;
 var $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0;
 var $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0;
 var $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0;
 var $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0;
 var $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0;
 var $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0;
 var $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0;
 var $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0;
 var $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0;
 var $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0;
 var $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0;
 var $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0;
 var $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0;
 var $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0;
 var $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0;
 var $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0;
 var $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0;
 var $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0;
 var $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0;
 var $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0;
 var $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0;
 var $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0;
 var $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0;
 var $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0;
 var $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0;
 var $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0;
 var $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0;
 var $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0;
 var $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0;
 var $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0;
 var $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0;
 var $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0;
 var $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0;
 var $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0;
 var $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0;
 var $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0;
 var $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0;
 var $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0;
 var $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0;
 var $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0;
 var $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0;
 var $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0;
 var $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0;
 var $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0;
 var $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0;
 var $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0;
 var $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0;
 var $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0;
 var $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0;
 var $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0;
 var $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0;
 var $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0;
 var $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0;
 var $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0;
 var $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0;
 var $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0;
 var $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $add$ptr143 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx16 = 0, $arrayidx21 = 0, $arrayidx26 = 0, $arrayidx31 = 0, $arrayidx36 = 0, $arrayidx4 = 0;
 var $arrayidx41 = 0, $arrayidx46 = 0, $blkCnt$addr$0 = 0, $blkPtr$addr$0 = 0, $dec = 0, $tobool = 0, $w$sroa$11$0$$sroa_idx = 0, $w$sroa$13$0$$sroa_idx = 0, $w$sroa$15$0$$sroa_idx = 0, $w$sroa$3$0$$sroa_idx = 0, $w$sroa$5$0$$sroa_idx = 0, $w$sroa$7$0$$sroa_idx = 0, $w$sroa$9$0$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arrayidx = $ctx + 8 | 0;
 $0 = $arrayidx;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $arrayidx4 = $ctx + 16 | 0;
 $6 = $arrayidx4;
 $7 = $6;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $6 + 4 | 0;
 $10 = $9;
 $11 = HEAP32[$10 >> 2] | 0;
 $arrayidx11 = $ctx + 24 | 0;
 $arrayidx16 = $ctx + 32 | 0;
 $arrayidx21 = $ctx + 40 | 0;
 $arrayidx26 = $ctx + 48 | 0;
 $arrayidx31 = $ctx + 56 | 0;
 $arrayidx36 = $ctx + 64 | 0;
 $arrayidx41 = $ctx + 72 | 0;
 $arrayidx46 = $ctx + 80 | 0;
 $12 = $blkCnt + -1 | 0;
 $13 = _i64Add($12 | 0, 0, 1, 0) | 0;
 $14 = getTempRet0() | 0;
 $15 = $arrayidx11;
 $16 = $15;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = $15 + 4 | 0;
 $19 = $18;
 $20 = HEAP32[$19 >> 2] | 0;
 $21 = $arrayidx16;
 $22 = $21;
 $23 = HEAP32[$22 >> 2] | 0;
 $24 = $21 + 4 | 0;
 $25 = $24;
 $26 = HEAP32[$25 >> 2] | 0;
 $27 = $arrayidx21;
 $28 = $27;
 $29 = HEAP32[$28 >> 2] | 0;
 $30 = $27 + 4 | 0;
 $31 = $30;
 $32 = HEAP32[$31 >> 2] | 0;
 $33 = $arrayidx26;
 $34 = $33;
 $35 = HEAP32[$34 >> 2] | 0;
 $36 = $33 + 4 | 0;
 $37 = $36;
 $38 = HEAP32[$37 >> 2] | 0;
 $39 = $arrayidx31;
 $40 = $39;
 $41 = HEAP32[$40 >> 2] | 0;
 $42 = $39 + 4 | 0;
 $43 = $42;
 $44 = HEAP32[$43 >> 2] | 0;
 $45 = $arrayidx36;
 $46 = $45;
 $47 = HEAP32[$46 >> 2] | 0;
 $48 = $45 + 4 | 0;
 $49 = $48;
 $50 = HEAP32[$49 >> 2] | 0;
 $51 = $arrayidx41;
 $52 = $51;
 $53 = HEAP32[$52 >> 2] | 0;
 $54 = $51 + 4 | 0;
 $55 = $54;
 $56 = HEAP32[$55 >> 2] | 0;
 $57 = $arrayidx46;
 $58 = $57;
 $59 = HEAP32[$58 >> 2] | 0;
 $60 = $57 + 4 | 0;
 $61 = $60;
 $62 = HEAP32[$61 >> 2] | 0;
 $100 = $8;
 $102 = $11;
 $63 = $2;
 $64 = $5;
 $68 = $17;
 $70 = $20;
 $72 = $23;
 $74 = $26;
 $76 = $29;
 $78 = $32;
 $80 = $35;
 $82 = $38;
 $84 = $41;
 $86 = $44;
 $88 = $47;
 $90 = $50;
 $92 = $53;
 $94 = $56;
 $96 = $59;
 $98 = $62;
 $blkCnt$addr$0 = $blkCnt;
 $blkPtr$addr$0 = $blkPtr;
 while (1) {
  $65 = _i64Add($63 | 0, $64 | 0, $byteCntAdd | 0, 0) | 0;
  $66 = getTempRet0() | 0;
  $67 = $68 ^ -1443096030;
  $69 = $70 ^ 466688986;
  $71 = $67 ^ $72;
  $73 = $69 ^ $74;
  $75 = $71 ^ $76;
  $77 = $73 ^ $78;
  $79 = $75 ^ $80;
  $81 = $77 ^ $82;
  $83 = $79 ^ $84;
  $85 = $81 ^ $86;
  $87 = $83 ^ $88;
  $89 = $85 ^ $90;
  $91 = $87 ^ $92;
  $93 = $89 ^ $94;
  $95 = $91 ^ $96;
  $97 = $93 ^ $98;
  $99 = $65 ^ $100;
  $101 = $66 ^ $102;
  $103 = $blkPtr$addr$0;
  $104 = $103;
  $105 = HEAPU8[$104 >> 0] | HEAPU8[$104 + 1 >> 0] << 8 | HEAPU8[$104 + 2 >> 0] << 16 | HEAPU8[$104 + 3 >> 0] << 24;
  $106 = $103 + 4 | 0;
  $107 = $106;
  $108 = HEAPU8[$107 >> 0] | HEAPU8[$107 + 1 >> 0] << 8 | HEAPU8[$107 + 2 >> 0] << 16 | HEAPU8[$107 + 3 >> 0] << 24;
  $w$sroa$3$0$$sroa_idx = $blkPtr$addr$0 + 8 | 0;
  $109 = $w$sroa$3$0$$sroa_idx;
  $110 = $109;
  $111 = HEAPU8[$110 >> 0] | HEAPU8[$110 + 1 >> 0] << 8 | HEAPU8[$110 + 2 >> 0] << 16 | HEAPU8[$110 + 3 >> 0] << 24;
  $112 = $109 + 4 | 0;
  $113 = $112;
  $114 = HEAPU8[$113 >> 0] | HEAPU8[$113 + 1 >> 0] << 8 | HEAPU8[$113 + 2 >> 0] << 16 | HEAPU8[$113 + 3 >> 0] << 24;
  $w$sroa$5$0$$sroa_idx = $blkPtr$addr$0 + 16 | 0;
  $115 = $w$sroa$5$0$$sroa_idx;
  $116 = $115;
  $117 = HEAPU8[$116 >> 0] | HEAPU8[$116 + 1 >> 0] << 8 | HEAPU8[$116 + 2 >> 0] << 16 | HEAPU8[$116 + 3 >> 0] << 24;
  $118 = $115 + 4 | 0;
  $119 = $118;
  $120 = HEAPU8[$119 >> 0] | HEAPU8[$119 + 1 >> 0] << 8 | HEAPU8[$119 + 2 >> 0] << 16 | HEAPU8[$119 + 3 >> 0] << 24;
  $w$sroa$7$0$$sroa_idx = $blkPtr$addr$0 + 24 | 0;
  $121 = $w$sroa$7$0$$sroa_idx;
  $122 = $121;
  $123 = HEAPU8[$122 >> 0] | HEAPU8[$122 + 1 >> 0] << 8 | HEAPU8[$122 + 2 >> 0] << 16 | HEAPU8[$122 + 3 >> 0] << 24;
  $124 = $121 + 4 | 0;
  $125 = $124;
  $126 = HEAPU8[$125 >> 0] | HEAPU8[$125 + 1 >> 0] << 8 | HEAPU8[$125 + 2 >> 0] << 16 | HEAPU8[$125 + 3 >> 0] << 24;
  $w$sroa$9$0$$sroa_idx = $blkPtr$addr$0 + 32 | 0;
  $127 = $w$sroa$9$0$$sroa_idx;
  $128 = $127;
  $129 = HEAPU8[$128 >> 0] | HEAPU8[$128 + 1 >> 0] << 8 | HEAPU8[$128 + 2 >> 0] << 16 | HEAPU8[$128 + 3 >> 0] << 24;
  $130 = $127 + 4 | 0;
  $131 = $130;
  $132 = HEAPU8[$131 >> 0] | HEAPU8[$131 + 1 >> 0] << 8 | HEAPU8[$131 + 2 >> 0] << 16 | HEAPU8[$131 + 3 >> 0] << 24;
  $w$sroa$11$0$$sroa_idx = $blkPtr$addr$0 + 40 | 0;
  $133 = $w$sroa$11$0$$sroa_idx;
  $134 = $133;
  $135 = HEAPU8[$134 >> 0] | HEAPU8[$134 + 1 >> 0] << 8 | HEAPU8[$134 + 2 >> 0] << 16 | HEAPU8[$134 + 3 >> 0] << 24;
  $136 = $133 + 4 | 0;
  $137 = $136;
  $138 = HEAPU8[$137 >> 0] | HEAPU8[$137 + 1 >> 0] << 8 | HEAPU8[$137 + 2 >> 0] << 16 | HEAPU8[$137 + 3 >> 0] << 24;
  $w$sroa$13$0$$sroa_idx = $blkPtr$addr$0 + 48 | 0;
  $139 = $w$sroa$13$0$$sroa_idx;
  $140 = $139;
  $141 = HEAPU8[$140 >> 0] | HEAPU8[$140 + 1 >> 0] << 8 | HEAPU8[$140 + 2 >> 0] << 16 | HEAPU8[$140 + 3 >> 0] << 24;
  $142 = $139 + 4 | 0;
  $143 = $142;
  $144 = HEAPU8[$143 >> 0] | HEAPU8[$143 + 1 >> 0] << 8 | HEAPU8[$143 + 2 >> 0] << 16 | HEAPU8[$143 + 3 >> 0] << 24;
  $w$sroa$15$0$$sroa_idx = $blkPtr$addr$0 + 56 | 0;
  $145 = $w$sroa$15$0$$sroa_idx;
  $146 = $145;
  $147 = HEAPU8[$146 >> 0] | HEAPU8[$146 + 1 >> 0] << 8 | HEAPU8[$146 + 2 >> 0] << 16 | HEAPU8[$146 + 3 >> 0] << 24;
  $148 = $145 + 4 | 0;
  $149 = $148;
  $150 = HEAPU8[$149 >> 0] | HEAPU8[$149 + 1 >> 0] << 8 | HEAPU8[$149 + 2 >> 0] << 16 | HEAPU8[$149 + 3 >> 0] << 24;
  $151 = _i64Add($105 | 0, $108 | 0, $68 | 0, $70 | 0) | 0;
  $152 = getTempRet0() | 0;
  $153 = _i64Add($111 | 0, $114 | 0, $72 | 0, $74 | 0) | 0;
  $154 = getTempRet0() | 0;
  $155 = _i64Add($117 | 0, $120 | 0, $76 | 0, $78 | 0) | 0;
  $156 = getTempRet0() | 0;
  $157 = _i64Add($123 | 0, $126 | 0, $80 | 0, $82 | 0) | 0;
  $158 = getTempRet0() | 0;
  $159 = _i64Add($129 | 0, $132 | 0, $84 | 0, $86 | 0) | 0;
  $160 = getTempRet0() | 0;
  $161 = _i64Add($88 | 0, $90 | 0, $65 | 0, $66 | 0) | 0;
  $162 = getTempRet0() | 0;
  $163 = _i64Add($161 | 0, $162 | 0, $135 | 0, $138 | 0) | 0;
  $164 = getTempRet0() | 0;
  $165 = _i64Add($147 | 0, $150 | 0, $96 | 0, $98 | 0) | 0;
  $166 = getTempRet0() | 0;
  $add$ptr143 = $blkPtr$addr$0 + 64 | 0;
  $167 = _i64Add($151 | 0, $152 | 0, $153 | 0, $154 | 0) | 0;
  $168 = getTempRet0() | 0;
  $169 = _bitshift64Shl($153 | 0, $154 | 0, 46) | 0;
  $170 = getTempRet0() | 0;
  $171 = _bitshift64Lshr($153 | 0, $154 | 0, 18) | 0;
  $172 = getTempRet0() | 0;
  $173 = $169 | $171;
  $174 = $170 | $172;
  $175 = $173 ^ $167;
  $176 = $174 ^ $168;
  $177 = _i64Add($155 | 0, $156 | 0, $157 | 0, $158 | 0) | 0;
  $178 = getTempRet0() | 0;
  $179 = _bitshift64Shl($157 | 0, $158 | 0, 36) | 0;
  $180 = getTempRet0() | 0;
  $181 = _bitshift64Lshr($157 | 0, $158 | 0, 28) | 0;
  $182 = getTempRet0() | 0;
  $183 = $179 | $181;
  $184 = $180 | $182;
  $185 = $183 ^ $177;
  $186 = $184 ^ $178;
  $187 = _i64Add($159 | 0, $160 | 0, $163 | 0, $164 | 0) | 0;
  $188 = getTempRet0() | 0;
  $189 = _bitshift64Shl($163 | 0, $164 | 0, 19) | 0;
  $190 = getTempRet0() | 0;
  $191 = _bitshift64Lshr($163 | 0, $164 | 0, 45) | 0;
  $192 = getTempRet0() | 0;
  $193 = $189 | $191;
  $194 = $190 | $192;
  $195 = $193 ^ $187;
  $196 = $194 ^ $188;
  $197 = _i64Add($92 | 0, $94 | 0, $100 | 0, $102 | 0) | 0;
  $198 = getTempRet0() | 0;
  $199 = _i64Add($197 | 0, $198 | 0, $141 | 0, $144 | 0) | 0;
  $200 = getTempRet0() | 0;
  $201 = _i64Add($199 | 0, $200 | 0, $165 | 0, $166 | 0) | 0;
  $202 = getTempRet0() | 0;
  $203 = _bitshift64Shl($165 | 0, $166 | 0, 37) | 0;
  $204 = getTempRet0() | 0;
  $205 = _bitshift64Lshr($165 | 0, $166 | 0, 27) | 0;
  $206 = getTempRet0() | 0;
  $207 = $203 | $205;
  $208 = $204 | $206;
  $209 = $207 ^ $201;
  $210 = $208 ^ $202;
  $211 = _i64Add($177 | 0, $178 | 0, $175 | 0, $176 | 0) | 0;
  $212 = getTempRet0() | 0;
  $213 = _bitshift64Shl($175 | 0, $176 | 0, 33) | 0;
  $214 = getTempRet0() | 0;
  $215 = _bitshift64Lshr($175 | 0, $176 | 0, 31) | 0;
  $216 = getTempRet0() | 0;
  $217 = $213 | $215;
  $218 = $214 | $216;
  $219 = $217 ^ $211;
  $220 = $218 ^ $212;
  $221 = _i64Add($209 | 0, $210 | 0, $187 | 0, $188 | 0) | 0;
  $222 = getTempRet0() | 0;
  $223 = _bitshift64Shl($209 | 0, $210 | 0, 27) | 0;
  $224 = getTempRet0() | 0;
  $225 = _bitshift64Lshr($209 | 0, $210 | 0, 37) | 0;
  $226 = getTempRet0() | 0;
  $227 = $223 | $225;
  $228 = $224 | $226;
  $229 = $227 ^ $221;
  $230 = $228 ^ $222;
  $231 = _i64Add($195 | 0, $196 | 0, $201 | 0, $202 | 0) | 0;
  $232 = getTempRet0() | 0;
  $233 = _bitshift64Shl($195 | 0, $196 | 0, 14) | 0;
  $234 = getTempRet0() | 0;
  $235 = _bitshift64Lshr($195 | 0, $196 | 0, 50) | 0;
  $236 = getTempRet0() | 0;
  $237 = $233 | $235;
  $238 = $234 | $236;
  $239 = $237 ^ $231;
  $240 = $238 ^ $232;
  $241 = _i64Add($185 | 0, $186 | 0, $167 | 0, $168 | 0) | 0;
  $242 = getTempRet0() | 0;
  $243 = _bitshift64Shl($185 | 0, $186 | 0, 42) | 0;
  $244 = getTempRet0() | 0;
  $245 = _bitshift64Lshr($185 | 0, $186 | 0, 22) | 0;
  $246 = getTempRet0() | 0;
  $247 = $243 | $245;
  $248 = $244 | $246;
  $249 = $247 ^ $241;
  $250 = $248 ^ $242;
  $251 = _i64Add($221 | 0, $222 | 0, $219 | 0, $220 | 0) | 0;
  $252 = getTempRet0() | 0;
  $253 = _bitshift64Shl($219 | 0, $220 | 0, 17) | 0;
  $254 = getTempRet0() | 0;
  $255 = _bitshift64Lshr($219 | 0, $220 | 0, 47) | 0;
  $256 = getTempRet0() | 0;
  $257 = $253 | $255;
  $258 = $254 | $256;
  $259 = $251 ^ $257;
  $260 = $252 ^ $258;
  $261 = _i64Add($231 | 0, $232 | 0, $249 | 0, $250 | 0) | 0;
  $262 = getTempRet0() | 0;
  $263 = _bitshift64Shl($249 | 0, $250 | 0, 49) | 0;
  $264 = getTempRet0() | 0;
  $265 = _bitshift64Lshr($249 | 0, $250 | 0, 15) | 0;
  $266 = getTempRet0() | 0;
  $267 = $263 | $265;
  $268 = $264 | $266;
  $269 = $267 ^ $261;
  $270 = $268 ^ $262;
  $271 = _i64Add($239 | 0, $240 | 0, $241 | 0, $242 | 0) | 0;
  $272 = getTempRet0() | 0;
  $273 = _bitshift64Shl($239 | 0, $240 | 0, 36) | 0;
  $274 = getTempRet0() | 0;
  $275 = _bitshift64Lshr($239 | 0, $240 | 0, 28) | 0;
  $276 = getTempRet0() | 0;
  $277 = $273 | $275;
  $278 = $274 | $276;
  $279 = $277 ^ $271;
  $280 = $278 ^ $272;
  $281 = _i64Add($229 | 0, $230 | 0, $211 | 0, $212 | 0) | 0;
  $282 = getTempRet0() | 0;
  $283 = _bitshift64Shl($229 | 0, $230 | 0, 39) | 0;
  $284 = getTempRet0() | 0;
  $285 = _bitshift64Lshr($229 | 0, $230 | 0, 25) | 0;
  $286 = getTempRet0() | 0;
  $287 = $283 | $285;
  $288 = $284 | $286;
  $289 = $287 ^ $281;
  $290 = $288 ^ $282;
  $291 = _i64Add($259 | 0, $260 | 0, $261 | 0, $262 | 0) | 0;
  $292 = getTempRet0() | 0;
  $293 = _bitshift64Shl($259 | 0, $260 | 0, 44) | 0;
  $294 = getTempRet0() | 0;
  $295 = _bitshift64Lshr($259 | 0, $260 | 0, 20) | 0;
  $296 = getTempRet0() | 0;
  $297 = $293 | $295;
  $298 = $294 | $296;
  $299 = $297 ^ $291;
  $300 = $298 ^ $292;
  $301 = _i64Add($289 | 0, $290 | 0, $271 | 0, $272 | 0) | 0;
  $302 = getTempRet0() | 0;
  $303 = _bitshift64Shl($289 | 0, $290 | 0, 9) | 0;
  $304 = getTempRet0() | 0;
  $305 = _bitshift64Lshr($289 | 0, $290 | 0, 55) | 0;
  $306 = getTempRet0() | 0;
  $307 = $303 | $305;
  $308 = $304 | $306;
  $309 = $307 ^ $301;
  $310 = $308 ^ $302;
  $311 = _i64Add($279 | 0, $280 | 0, $281 | 0, $282 | 0) | 0;
  $312 = getTempRet0() | 0;
  $313 = _bitshift64Shl($279 | 0, $280 | 0, 54) | 0;
  $314 = getTempRet0() | 0;
  $315 = _bitshift64Lshr($279 | 0, $280 | 0, 10) | 0;
  $316 = getTempRet0() | 0;
  $317 = $313 | $315;
  $318 = $314 | $316;
  $319 = $317 ^ $311;
  $320 = $318 ^ $312;
  $321 = _i64Add($251 | 0, $252 | 0, $269 | 0, $270 | 0) | 0;
  $322 = getTempRet0() | 0;
  $323 = _bitshift64Shl($269 | 0, $270 | 0, 56) | 0;
  $324 = getTempRet0() | 0;
  $325 = _bitshift64Lshr($269 | 0, $270 | 0, 8) | 0;
  $326 = getTempRet0() | 0;
  $327 = $323 | $325;
  $328 = $324 | $326;
  $329 = $327 ^ $321;
  $330 = $328 ^ $322;
  $331 = _i64Add($301 | 0, $302 | 0, $72 | 0, $74 | 0) | 0;
  $332 = getTempRet0() | 0;
  $333 = _i64Add($299 | 0, $300 | 0, $76 | 0, $78 | 0) | 0;
  $334 = getTempRet0() | 0;
  $335 = _i64Add($311 | 0, $312 | 0, $80 | 0, $82 | 0) | 0;
  $336 = getTempRet0() | 0;
  $337 = _i64Add($329 | 0, $330 | 0, $84 | 0, $86 | 0) | 0;
  $338 = getTempRet0() | 0;
  $339 = _i64Add($321 | 0, $322 | 0, $88 | 0, $90 | 0) | 0;
  $340 = getTempRet0() | 0;
  $341 = _i64Add($319 | 0, $320 | 0, $197 | 0, $198 | 0) | 0;
  $342 = getTempRet0() | 0;
  $343 = _i64Add($96 | 0, $98 | 0, $99 | 0, $101 | 0) | 0;
  $344 = getTempRet0() | 0;
  $345 = _i64Add($291 | 0, $292 | 0, $343 | 0, $344 | 0) | 0;
  $346 = getTempRet0() | 0;
  $347 = _i64Add($95 | 0, $97 | 0, 1, 0) | 0;
  $348 = getTempRet0() | 0;
  $349 = _i64Add($347 | 0, $348 | 0, $309 | 0, $310 | 0) | 0;
  $350 = getTempRet0() | 0;
  $351 = _i64Add($331 | 0, $332 | 0, $333 | 0, $334 | 0) | 0;
  $352 = getTempRet0() | 0;
  $353 = _bitshift64Shl($333 | 0, $334 | 0, 39) | 0;
  $354 = getTempRet0() | 0;
  $355 = _bitshift64Lshr($333 | 0, $334 | 0, 25) | 0;
  $356 = getTempRet0() | 0;
  $357 = $353 | $355;
  $358 = $354 | $356;
  $359 = $357 ^ $351;
  $360 = $358 ^ $352;
  $361 = _i64Add($335 | 0, $336 | 0, $337 | 0, $338 | 0) | 0;
  $362 = getTempRet0() | 0;
  $363 = _bitshift64Shl($337 | 0, $338 | 0, 30) | 0;
  $364 = getTempRet0() | 0;
  $365 = _bitshift64Lshr($337 | 0, $338 | 0, 34) | 0;
  $366 = getTempRet0() | 0;
  $367 = $363 | $365;
  $368 = $364 | $366;
  $369 = $367 ^ $361;
  $370 = $368 ^ $362;
  $371 = _i64Add($339 | 0, $340 | 0, $341 | 0, $342 | 0) | 0;
  $372 = getTempRet0() | 0;
  $373 = _bitshift64Shl($341 | 0, $342 | 0, 34) | 0;
  $374 = getTempRet0() | 0;
  $375 = _bitshift64Lshr($341 | 0, $342 | 0, 30) | 0;
  $376 = getTempRet0() | 0;
  $377 = $373 | $375;
  $378 = $374 | $376;
  $379 = $377 ^ $371;
  $380 = $378 ^ $372;
  $381 = _i64Add($345 | 0, $346 | 0, $349 | 0, $350 | 0) | 0;
  $382 = getTempRet0() | 0;
  $383 = _bitshift64Shl($349 | 0, $350 | 0, 24) | 0;
  $384 = getTempRet0() | 0;
  $385 = _bitshift64Lshr($349 | 0, $350 | 0, 40) | 0;
  $386 = getTempRet0() | 0;
  $387 = $383 | $385;
  $388 = $384 | $386;
  $389 = $387 ^ $381;
  $390 = $388 ^ $382;
  $391 = _i64Add($359 | 0, $360 | 0, $361 | 0, $362 | 0) | 0;
  $392 = getTempRet0() | 0;
  $393 = _bitshift64Shl($359 | 0, $360 | 0, 13) | 0;
  $394 = getTempRet0() | 0;
  $395 = _bitshift64Lshr($359 | 0, $360 | 0, 51) | 0;
  $396 = getTempRet0() | 0;
  $397 = $393 | $395;
  $398 = $394 | $396;
  $399 = $397 ^ $391;
  $400 = $398 ^ $392;
  $401 = _i64Add($389 | 0, $390 | 0, $371 | 0, $372 | 0) | 0;
  $402 = getTempRet0() | 0;
  $403 = _bitshift64Shl($389 | 0, $390 | 0, 50) | 0;
  $404 = getTempRet0() | 0;
  $405 = _bitshift64Lshr($389 | 0, $390 | 0, 14) | 0;
  $406 = getTempRet0() | 0;
  $407 = $403 | $405;
  $408 = $404 | $406;
  $409 = $407 ^ $401;
  $410 = $408 ^ $402;
  $411 = _i64Add($379 | 0, $380 | 0, $381 | 0, $382 | 0) | 0;
  $412 = getTempRet0() | 0;
  $413 = _bitshift64Shl($379 | 0, $380 | 0, 10) | 0;
  $414 = getTempRet0() | 0;
  $415 = _bitshift64Lshr($379 | 0, $380 | 0, 54) | 0;
  $416 = getTempRet0() | 0;
  $417 = $413 | $415;
  $418 = $414 | $416;
  $419 = $417 ^ $411;
  $420 = $418 ^ $412;
  $421 = _i64Add($351 | 0, $352 | 0, $369 | 0, $370 | 0) | 0;
  $422 = getTempRet0() | 0;
  $423 = _bitshift64Shl($369 | 0, $370 | 0, 17) | 0;
  $424 = getTempRet0() | 0;
  $425 = _bitshift64Lshr($369 | 0, $370 | 0, 47) | 0;
  $426 = getTempRet0() | 0;
  $427 = $423 | $425;
  $428 = $424 | $426;
  $429 = $427 ^ $421;
  $430 = $428 ^ $422;
  $431 = _i64Add($401 | 0, $402 | 0, $399 | 0, $400 | 0) | 0;
  $432 = getTempRet0() | 0;
  $433 = _bitshift64Shl($399 | 0, $400 | 0, 25) | 0;
  $434 = getTempRet0() | 0;
  $435 = _bitshift64Lshr($399 | 0, $400 | 0, 39) | 0;
  $436 = getTempRet0() | 0;
  $437 = $433 | $435;
  $438 = $434 | $436;
  $439 = $437 ^ $431;
  $440 = $438 ^ $432;
  $441 = _i64Add($411 | 0, $412 | 0, $429 | 0, $430 | 0) | 0;
  $442 = getTempRet0() | 0;
  $443 = _bitshift64Shl($429 | 0, $430 | 0, 29) | 0;
  $444 = getTempRet0() | 0;
  $445 = _bitshift64Lshr($429 | 0, $430 | 0, 35) | 0;
  $446 = getTempRet0() | 0;
  $447 = $443 | $445;
  $448 = $444 | $446;
  $449 = $447 ^ $441;
  $450 = $448 ^ $442;
  $451 = _i64Add($419 | 0, $420 | 0, $421 | 0, $422 | 0) | 0;
  $452 = getTempRet0() | 0;
  $453 = _bitshift64Shl($419 | 0, $420 | 0, 39) | 0;
  $454 = getTempRet0() | 0;
  $455 = _bitshift64Lshr($419 | 0, $420 | 0, 25) | 0;
  $456 = getTempRet0() | 0;
  $457 = $453 | $455;
  $458 = $454 | $456;
  $459 = $457 ^ $451;
  $460 = $458 ^ $452;
  $461 = _i64Add($409 | 0, $410 | 0, $391 | 0, $392 | 0) | 0;
  $462 = getTempRet0() | 0;
  $463 = _bitshift64Shl($409 | 0, $410 | 0, 43) | 0;
  $464 = getTempRet0() | 0;
  $465 = _bitshift64Lshr($409 | 0, $410 | 0, 21) | 0;
  $466 = getTempRet0() | 0;
  $467 = $463 | $465;
  $468 = $464 | $466;
  $469 = $467 ^ $461;
  $470 = $468 ^ $462;
  $471 = _i64Add($439 | 0, $440 | 0, $441 | 0, $442 | 0) | 0;
  $472 = getTempRet0() | 0;
  $473 = _bitshift64Shl($439 | 0, $440 | 0, 8) | 0;
  $474 = getTempRet0() | 0;
  $475 = _bitshift64Lshr($439 | 0, $440 | 0, 56) | 0;
  $476 = getTempRet0() | 0;
  $477 = $473 | $475;
  $478 = $474 | $476;
  $479 = $477 ^ $471;
  $480 = $478 ^ $472;
  $481 = _i64Add($469 | 0, $470 | 0, $451 | 0, $452 | 0) | 0;
  $482 = getTempRet0() | 0;
  $483 = _bitshift64Shl($469 | 0, $470 | 0, 35) | 0;
  $484 = getTempRet0() | 0;
  $485 = _bitshift64Lshr($469 | 0, $470 | 0, 29) | 0;
  $486 = getTempRet0() | 0;
  $487 = $483 | $485;
  $488 = $484 | $486;
  $489 = $487 ^ $481;
  $490 = $488 ^ $482;
  $491 = _i64Add($459 | 0, $460 | 0, $461 | 0, $462 | 0) | 0;
  $492 = getTempRet0() | 0;
  $493 = _bitshift64Shl($459 | 0, $460 | 0, 56) | 0;
  $494 = getTempRet0() | 0;
  $495 = _bitshift64Lshr($459 | 0, $460 | 0, 8) | 0;
  $496 = getTempRet0() | 0;
  $497 = $493 | $495;
  $498 = $494 | $496;
  $499 = $497 ^ $491;
  $500 = $498 ^ $492;
  $501 = _i64Add($431 | 0, $432 | 0, $449 | 0, $450 | 0) | 0;
  $502 = getTempRet0() | 0;
  $503 = _bitshift64Shl($449 | 0, $450 | 0, 22) | 0;
  $504 = getTempRet0() | 0;
  $505 = _bitshift64Lshr($449 | 0, $450 | 0, 42) | 0;
  $506 = getTempRet0() | 0;
  $507 = $503 | $505;
  $508 = $504 | $506;
  $509 = $507 ^ $501;
  $510 = $508 ^ $502;
  $511 = _i64Add($481 | 0, $482 | 0, $76 | 0, $78 | 0) | 0;
  $512 = getTempRet0() | 0;
  $513 = _i64Add($479 | 0, $480 | 0, $80 | 0, $82 | 0) | 0;
  $514 = getTempRet0() | 0;
  $515 = _i64Add($491 | 0, $492 | 0, $84 | 0, $86 | 0) | 0;
  $516 = getTempRet0() | 0;
  $517 = _i64Add($509 | 0, $510 | 0, $88 | 0, $90 | 0) | 0;
  $518 = getTempRet0() | 0;
  $519 = _i64Add($501 | 0, $502 | 0, $92 | 0, $94 | 0) | 0;
  $520 = getTempRet0() | 0;
  $521 = _i64Add($499 | 0, $500 | 0, $343 | 0, $344 | 0) | 0;
  $522 = getTempRet0() | 0;
  $523 = _i64Add($95 | 0, $97 | 0, $65 | 0, $66 | 0) | 0;
  $524 = getTempRet0() | 0;
  $525 = _i64Add($471 | 0, $472 | 0, $523 | 0, $524 | 0) | 0;
  $526 = getTempRet0() | 0;
  $527 = _i64Add($68 | 0, $70 | 0, 2, 0) | 0;
  $528 = getTempRet0() | 0;
  $529 = _i64Add($527 | 0, $528 | 0, $489 | 0, $490 | 0) | 0;
  $530 = getTempRet0() | 0;
  $531 = _i64Add($511 | 0, $512 | 0, $513 | 0, $514 | 0) | 0;
  $532 = getTempRet0() | 0;
  $533 = _bitshift64Shl($513 | 0, $514 | 0, 46) | 0;
  $534 = getTempRet0() | 0;
  $535 = _bitshift64Lshr($513 | 0, $514 | 0, 18) | 0;
  $536 = getTempRet0() | 0;
  $537 = $533 | $535;
  $538 = $534 | $536;
  $539 = $537 ^ $531;
  $540 = $538 ^ $532;
  $541 = _i64Add($515 | 0, $516 | 0, $517 | 0, $518 | 0) | 0;
  $542 = getTempRet0() | 0;
  $543 = _bitshift64Shl($517 | 0, $518 | 0, 36) | 0;
  $544 = getTempRet0() | 0;
  $545 = _bitshift64Lshr($517 | 0, $518 | 0, 28) | 0;
  $546 = getTempRet0() | 0;
  $547 = $543 | $545;
  $548 = $544 | $546;
  $549 = $547 ^ $541;
  $550 = $548 ^ $542;
  $551 = _i64Add($519 | 0, $520 | 0, $521 | 0, $522 | 0) | 0;
  $552 = getTempRet0() | 0;
  $553 = _bitshift64Shl($521 | 0, $522 | 0, 19) | 0;
  $554 = getTempRet0() | 0;
  $555 = _bitshift64Lshr($521 | 0, $522 | 0, 45) | 0;
  $556 = getTempRet0() | 0;
  $557 = $553 | $555;
  $558 = $554 | $556;
  $559 = $557 ^ $551;
  $560 = $558 ^ $552;
  $561 = _i64Add($525 | 0, $526 | 0, $529 | 0, $530 | 0) | 0;
  $562 = getTempRet0() | 0;
  $563 = _bitshift64Shl($529 | 0, $530 | 0, 37) | 0;
  $564 = getTempRet0() | 0;
  $565 = _bitshift64Lshr($529 | 0, $530 | 0, 27) | 0;
  $566 = getTempRet0() | 0;
  $567 = $563 | $565;
  $568 = $564 | $566;
  $569 = $567 ^ $561;
  $570 = $568 ^ $562;
  $571 = _i64Add($539 | 0, $540 | 0, $541 | 0, $542 | 0) | 0;
  $572 = getTempRet0() | 0;
  $573 = _bitshift64Shl($539 | 0, $540 | 0, 33) | 0;
  $574 = getTempRet0() | 0;
  $575 = _bitshift64Lshr($539 | 0, $540 | 0, 31) | 0;
  $576 = getTempRet0() | 0;
  $577 = $573 | $575;
  $578 = $574 | $576;
  $579 = $577 ^ $571;
  $580 = $578 ^ $572;
  $581 = _i64Add($569 | 0, $570 | 0, $551 | 0, $552 | 0) | 0;
  $582 = getTempRet0() | 0;
  $583 = _bitshift64Shl($569 | 0, $570 | 0, 27) | 0;
  $584 = getTempRet0() | 0;
  $585 = _bitshift64Lshr($569 | 0, $570 | 0, 37) | 0;
  $586 = getTempRet0() | 0;
  $587 = $583 | $585;
  $588 = $584 | $586;
  $589 = $587 ^ $581;
  $590 = $588 ^ $582;
  $591 = _i64Add($559 | 0, $560 | 0, $561 | 0, $562 | 0) | 0;
  $592 = getTempRet0() | 0;
  $593 = _bitshift64Shl($559 | 0, $560 | 0, 14) | 0;
  $594 = getTempRet0() | 0;
  $595 = _bitshift64Lshr($559 | 0, $560 | 0, 50) | 0;
  $596 = getTempRet0() | 0;
  $597 = $593 | $595;
  $598 = $594 | $596;
  $599 = $597 ^ $591;
  $600 = $598 ^ $592;
  $601 = _i64Add($531 | 0, $532 | 0, $549 | 0, $550 | 0) | 0;
  $602 = getTempRet0() | 0;
  $603 = _bitshift64Shl($549 | 0, $550 | 0, 42) | 0;
  $604 = getTempRet0() | 0;
  $605 = _bitshift64Lshr($549 | 0, $550 | 0, 22) | 0;
  $606 = getTempRet0() | 0;
  $607 = $603 | $605;
  $608 = $604 | $606;
  $609 = $607 ^ $601;
  $610 = $608 ^ $602;
  $611 = _i64Add($581 | 0, $582 | 0, $579 | 0, $580 | 0) | 0;
  $612 = getTempRet0() | 0;
  $613 = _bitshift64Shl($579 | 0, $580 | 0, 17) | 0;
  $614 = getTempRet0() | 0;
  $615 = _bitshift64Lshr($579 | 0, $580 | 0, 47) | 0;
  $616 = getTempRet0() | 0;
  $617 = $613 | $615;
  $618 = $614 | $616;
  $619 = $617 ^ $611;
  $620 = $618 ^ $612;
  $621 = _i64Add($591 | 0, $592 | 0, $609 | 0, $610 | 0) | 0;
  $622 = getTempRet0() | 0;
  $623 = _bitshift64Shl($609 | 0, $610 | 0, 49) | 0;
  $624 = getTempRet0() | 0;
  $625 = _bitshift64Lshr($609 | 0, $610 | 0, 15) | 0;
  $626 = getTempRet0() | 0;
  $627 = $623 | $625;
  $628 = $624 | $626;
  $629 = $627 ^ $621;
  $630 = $628 ^ $622;
  $631 = _i64Add($599 | 0, $600 | 0, $601 | 0, $602 | 0) | 0;
  $632 = getTempRet0() | 0;
  $633 = _bitshift64Shl($599 | 0, $600 | 0, 36) | 0;
  $634 = getTempRet0() | 0;
  $635 = _bitshift64Lshr($599 | 0, $600 | 0, 28) | 0;
  $636 = getTempRet0() | 0;
  $637 = $633 | $635;
  $638 = $634 | $636;
  $639 = $637 ^ $631;
  $640 = $638 ^ $632;
  $641 = _i64Add($589 | 0, $590 | 0, $571 | 0, $572 | 0) | 0;
  $642 = getTempRet0() | 0;
  $643 = _bitshift64Shl($589 | 0, $590 | 0, 39) | 0;
  $644 = getTempRet0() | 0;
  $645 = _bitshift64Lshr($589 | 0, $590 | 0, 25) | 0;
  $646 = getTempRet0() | 0;
  $647 = $643 | $645;
  $648 = $644 | $646;
  $649 = $647 ^ $641;
  $650 = $648 ^ $642;
  $651 = _i64Add($619 | 0, $620 | 0, $621 | 0, $622 | 0) | 0;
  $652 = getTempRet0() | 0;
  $653 = _bitshift64Shl($619 | 0, $620 | 0, 44) | 0;
  $654 = getTempRet0() | 0;
  $655 = _bitshift64Lshr($619 | 0, $620 | 0, 20) | 0;
  $656 = getTempRet0() | 0;
  $657 = $653 | $655;
  $658 = $654 | $656;
  $659 = $657 ^ $651;
  $660 = $658 ^ $652;
  $661 = _i64Add($649 | 0, $650 | 0, $631 | 0, $632 | 0) | 0;
  $662 = getTempRet0() | 0;
  $663 = _bitshift64Shl($649 | 0, $650 | 0, 9) | 0;
  $664 = getTempRet0() | 0;
  $665 = _bitshift64Lshr($649 | 0, $650 | 0, 55) | 0;
  $666 = getTempRet0() | 0;
  $667 = $663 | $665;
  $668 = $664 | $666;
  $669 = $667 ^ $661;
  $670 = $668 ^ $662;
  $671 = _i64Add($639 | 0, $640 | 0, $641 | 0, $642 | 0) | 0;
  $672 = getTempRet0() | 0;
  $673 = _bitshift64Shl($639 | 0, $640 | 0, 54) | 0;
  $674 = getTempRet0() | 0;
  $675 = _bitshift64Lshr($639 | 0, $640 | 0, 10) | 0;
  $676 = getTempRet0() | 0;
  $677 = $673 | $675;
  $678 = $674 | $676;
  $679 = $677 ^ $671;
  $680 = $678 ^ $672;
  $681 = _i64Add($611 | 0, $612 | 0, $629 | 0, $630 | 0) | 0;
  $682 = getTempRet0() | 0;
  $683 = _bitshift64Shl($629 | 0, $630 | 0, 56) | 0;
  $684 = getTempRet0() | 0;
  $685 = _bitshift64Lshr($629 | 0, $630 | 0, 8) | 0;
  $686 = getTempRet0() | 0;
  $687 = $683 | $685;
  $688 = $684 | $686;
  $689 = $687 ^ $681;
  $690 = $688 ^ $682;
  $691 = _i64Add($661 | 0, $662 | 0, $80 | 0, $82 | 0) | 0;
  $692 = getTempRet0() | 0;
  $693 = _i64Add($659 | 0, $660 | 0, $84 | 0, $86 | 0) | 0;
  $694 = getTempRet0() | 0;
  $695 = _i64Add($671 | 0, $672 | 0, $88 | 0, $90 | 0) | 0;
  $696 = getTempRet0() | 0;
  $697 = _i64Add($689 | 0, $690 | 0, $92 | 0, $94 | 0) | 0;
  $698 = getTempRet0() | 0;
  $699 = _i64Add($681 | 0, $682 | 0, $96 | 0, $98 | 0) | 0;
  $700 = getTempRet0() | 0;
  $701 = _i64Add($679 | 0, $680 | 0, $523 | 0, $524 | 0) | 0;
  $702 = getTempRet0() | 0;
  $703 = _i64Add($68 | 0, $70 | 0, $100 | 0, $102 | 0) | 0;
  $704 = getTempRet0() | 0;
  $705 = _i64Add($651 | 0, $652 | 0, $703 | 0, $704 | 0) | 0;
  $706 = getTempRet0() | 0;
  $707 = _i64Add($72 | 0, $74 | 0, 3, 0) | 0;
  $708 = getTempRet0() | 0;
  $709 = _i64Add($707 | 0, $708 | 0, $669 | 0, $670 | 0) | 0;
  $710 = getTempRet0() | 0;
  $711 = _i64Add($691 | 0, $692 | 0, $693 | 0, $694 | 0) | 0;
  $712 = getTempRet0() | 0;
  $713 = _bitshift64Shl($693 | 0, $694 | 0, 39) | 0;
  $714 = getTempRet0() | 0;
  $715 = _bitshift64Lshr($693 | 0, $694 | 0, 25) | 0;
  $716 = getTempRet0() | 0;
  $717 = $713 | $715;
  $718 = $714 | $716;
  $719 = $717 ^ $711;
  $720 = $718 ^ $712;
  $721 = _i64Add($695 | 0, $696 | 0, $697 | 0, $698 | 0) | 0;
  $722 = getTempRet0() | 0;
  $723 = _bitshift64Shl($697 | 0, $698 | 0, 30) | 0;
  $724 = getTempRet0() | 0;
  $725 = _bitshift64Lshr($697 | 0, $698 | 0, 34) | 0;
  $726 = getTempRet0() | 0;
  $727 = $723 | $725;
  $728 = $724 | $726;
  $729 = $727 ^ $721;
  $730 = $728 ^ $722;
  $731 = _i64Add($699 | 0, $700 | 0, $701 | 0, $702 | 0) | 0;
  $732 = getTempRet0() | 0;
  $733 = _bitshift64Shl($701 | 0, $702 | 0, 34) | 0;
  $734 = getTempRet0() | 0;
  $735 = _bitshift64Lshr($701 | 0, $702 | 0, 30) | 0;
  $736 = getTempRet0() | 0;
  $737 = $733 | $735;
  $738 = $734 | $736;
  $739 = $737 ^ $731;
  $740 = $738 ^ $732;
  $741 = _i64Add($705 | 0, $706 | 0, $709 | 0, $710 | 0) | 0;
  $742 = getTempRet0() | 0;
  $743 = _bitshift64Shl($709 | 0, $710 | 0, 24) | 0;
  $744 = getTempRet0() | 0;
  $745 = _bitshift64Lshr($709 | 0, $710 | 0, 40) | 0;
  $746 = getTempRet0() | 0;
  $747 = $743 | $745;
  $748 = $744 | $746;
  $749 = $747 ^ $741;
  $750 = $748 ^ $742;
  $751 = _i64Add($719 | 0, $720 | 0, $721 | 0, $722 | 0) | 0;
  $752 = getTempRet0() | 0;
  $753 = _bitshift64Shl($719 | 0, $720 | 0, 13) | 0;
  $754 = getTempRet0() | 0;
  $755 = _bitshift64Lshr($719 | 0, $720 | 0, 51) | 0;
  $756 = getTempRet0() | 0;
  $757 = $753 | $755;
  $758 = $754 | $756;
  $759 = $757 ^ $751;
  $760 = $758 ^ $752;
  $761 = _i64Add($749 | 0, $750 | 0, $731 | 0, $732 | 0) | 0;
  $762 = getTempRet0() | 0;
  $763 = _bitshift64Shl($749 | 0, $750 | 0, 50) | 0;
  $764 = getTempRet0() | 0;
  $765 = _bitshift64Lshr($749 | 0, $750 | 0, 14) | 0;
  $766 = getTempRet0() | 0;
  $767 = $763 | $765;
  $768 = $764 | $766;
  $769 = $767 ^ $761;
  $770 = $768 ^ $762;
  $771 = _i64Add($739 | 0, $740 | 0, $741 | 0, $742 | 0) | 0;
  $772 = getTempRet0() | 0;
  $773 = _bitshift64Shl($739 | 0, $740 | 0, 10) | 0;
  $774 = getTempRet0() | 0;
  $775 = _bitshift64Lshr($739 | 0, $740 | 0, 54) | 0;
  $776 = getTempRet0() | 0;
  $777 = $773 | $775;
  $778 = $774 | $776;
  $779 = $777 ^ $771;
  $780 = $778 ^ $772;
  $781 = _i64Add($711 | 0, $712 | 0, $729 | 0, $730 | 0) | 0;
  $782 = getTempRet0() | 0;
  $783 = _bitshift64Shl($729 | 0, $730 | 0, 17) | 0;
  $784 = getTempRet0() | 0;
  $785 = _bitshift64Lshr($729 | 0, $730 | 0, 47) | 0;
  $786 = getTempRet0() | 0;
  $787 = $783 | $785;
  $788 = $784 | $786;
  $789 = $787 ^ $781;
  $790 = $788 ^ $782;
  $791 = _i64Add($761 | 0, $762 | 0, $759 | 0, $760 | 0) | 0;
  $792 = getTempRet0() | 0;
  $793 = _bitshift64Shl($759 | 0, $760 | 0, 25) | 0;
  $794 = getTempRet0() | 0;
  $795 = _bitshift64Lshr($759 | 0, $760 | 0, 39) | 0;
  $796 = getTempRet0() | 0;
  $797 = $793 | $795;
  $798 = $794 | $796;
  $799 = $797 ^ $791;
  $800 = $798 ^ $792;
  $801 = _i64Add($771 | 0, $772 | 0, $789 | 0, $790 | 0) | 0;
  $802 = getTempRet0() | 0;
  $803 = _bitshift64Shl($789 | 0, $790 | 0, 29) | 0;
  $804 = getTempRet0() | 0;
  $805 = _bitshift64Lshr($789 | 0, $790 | 0, 35) | 0;
  $806 = getTempRet0() | 0;
  $807 = $803 | $805;
  $808 = $804 | $806;
  $809 = $807 ^ $801;
  $810 = $808 ^ $802;
  $811 = _i64Add($779 | 0, $780 | 0, $781 | 0, $782 | 0) | 0;
  $812 = getTempRet0() | 0;
  $813 = _bitshift64Shl($779 | 0, $780 | 0, 39) | 0;
  $814 = getTempRet0() | 0;
  $815 = _bitshift64Lshr($779 | 0, $780 | 0, 25) | 0;
  $816 = getTempRet0() | 0;
  $817 = $813 | $815;
  $818 = $814 | $816;
  $819 = $817 ^ $811;
  $820 = $818 ^ $812;
  $821 = _i64Add($769 | 0, $770 | 0, $751 | 0, $752 | 0) | 0;
  $822 = getTempRet0() | 0;
  $823 = _bitshift64Shl($769 | 0, $770 | 0, 43) | 0;
  $824 = getTempRet0() | 0;
  $825 = _bitshift64Lshr($769 | 0, $770 | 0, 21) | 0;
  $826 = getTempRet0() | 0;
  $827 = $823 | $825;
  $828 = $824 | $826;
  $829 = $827 ^ $821;
  $830 = $828 ^ $822;
  $831 = _i64Add($799 | 0, $800 | 0, $801 | 0, $802 | 0) | 0;
  $832 = getTempRet0() | 0;
  $833 = _bitshift64Shl($799 | 0, $800 | 0, 8) | 0;
  $834 = getTempRet0() | 0;
  $835 = _bitshift64Lshr($799 | 0, $800 | 0, 56) | 0;
  $836 = getTempRet0() | 0;
  $837 = $833 | $835;
  $838 = $834 | $836;
  $839 = $837 ^ $831;
  $840 = $838 ^ $832;
  $841 = _i64Add($829 | 0, $830 | 0, $811 | 0, $812 | 0) | 0;
  $842 = getTempRet0() | 0;
  $843 = _bitshift64Shl($829 | 0, $830 | 0, 35) | 0;
  $844 = getTempRet0() | 0;
  $845 = _bitshift64Lshr($829 | 0, $830 | 0, 29) | 0;
  $846 = getTempRet0() | 0;
  $847 = $843 | $845;
  $848 = $844 | $846;
  $849 = $847 ^ $841;
  $850 = $848 ^ $842;
  $851 = _i64Add($819 | 0, $820 | 0, $821 | 0, $822 | 0) | 0;
  $852 = getTempRet0() | 0;
  $853 = _bitshift64Shl($819 | 0, $820 | 0, 56) | 0;
  $854 = getTempRet0() | 0;
  $855 = _bitshift64Lshr($819 | 0, $820 | 0, 8) | 0;
  $856 = getTempRet0() | 0;
  $857 = $853 | $855;
  $858 = $854 | $856;
  $859 = $857 ^ $851;
  $860 = $858 ^ $852;
  $861 = _i64Add($791 | 0, $792 | 0, $809 | 0, $810 | 0) | 0;
  $862 = getTempRet0() | 0;
  $863 = _bitshift64Shl($809 | 0, $810 | 0, 22) | 0;
  $864 = getTempRet0() | 0;
  $865 = _bitshift64Lshr($809 | 0, $810 | 0, 42) | 0;
  $866 = getTempRet0() | 0;
  $867 = $863 | $865;
  $868 = $864 | $866;
  $869 = $867 ^ $861;
  $870 = $868 ^ $862;
  $871 = _i64Add($841 | 0, $842 | 0, $84 | 0, $86 | 0) | 0;
  $872 = getTempRet0() | 0;
  $873 = _i64Add($839 | 0, $840 | 0, $88 | 0, $90 | 0) | 0;
  $874 = getTempRet0() | 0;
  $875 = _i64Add($851 | 0, $852 | 0, $92 | 0, $94 | 0) | 0;
  $876 = getTempRet0() | 0;
  $877 = _i64Add($869 | 0, $870 | 0, $96 | 0, $98 | 0) | 0;
  $878 = getTempRet0() | 0;
  $879 = _i64Add($861 | 0, $862 | 0, $95 | 0, $97 | 0) | 0;
  $880 = getTempRet0() | 0;
  $881 = _i64Add($859 | 0, $860 | 0, $703 | 0, $704 | 0) | 0;
  $882 = getTempRet0() | 0;
  $883 = _i64Add($72 | 0, $74 | 0, $99 | 0, $101 | 0) | 0;
  $884 = getTempRet0() | 0;
  $885 = _i64Add($831 | 0, $832 | 0, $883 | 0, $884 | 0) | 0;
  $886 = getTempRet0() | 0;
  $887 = _i64Add($76 | 0, $78 | 0, 4, 0) | 0;
  $888 = getTempRet0() | 0;
  $889 = _i64Add($887 | 0, $888 | 0, $849 | 0, $850 | 0) | 0;
  $890 = getTempRet0() | 0;
  $891 = _i64Add($871 | 0, $872 | 0, $873 | 0, $874 | 0) | 0;
  $892 = getTempRet0() | 0;
  $893 = _bitshift64Shl($873 | 0, $874 | 0, 46) | 0;
  $894 = getTempRet0() | 0;
  $895 = _bitshift64Lshr($873 | 0, $874 | 0, 18) | 0;
  $896 = getTempRet0() | 0;
  $897 = $893 | $895;
  $898 = $894 | $896;
  $899 = $897 ^ $891;
  $900 = $898 ^ $892;
  $901 = _i64Add($875 | 0, $876 | 0, $877 | 0, $878 | 0) | 0;
  $902 = getTempRet0() | 0;
  $903 = _bitshift64Shl($877 | 0, $878 | 0, 36) | 0;
  $904 = getTempRet0() | 0;
  $905 = _bitshift64Lshr($877 | 0, $878 | 0, 28) | 0;
  $906 = getTempRet0() | 0;
  $907 = $903 | $905;
  $908 = $904 | $906;
  $909 = $907 ^ $901;
  $910 = $908 ^ $902;
  $911 = _i64Add($879 | 0, $880 | 0, $881 | 0, $882 | 0) | 0;
  $912 = getTempRet0() | 0;
  $913 = _bitshift64Shl($881 | 0, $882 | 0, 19) | 0;
  $914 = getTempRet0() | 0;
  $915 = _bitshift64Lshr($881 | 0, $882 | 0, 45) | 0;
  $916 = getTempRet0() | 0;
  $917 = $913 | $915;
  $918 = $914 | $916;
  $919 = $917 ^ $911;
  $920 = $918 ^ $912;
  $921 = _i64Add($885 | 0, $886 | 0, $889 | 0, $890 | 0) | 0;
  $922 = getTempRet0() | 0;
  $923 = _bitshift64Shl($889 | 0, $890 | 0, 37) | 0;
  $924 = getTempRet0() | 0;
  $925 = _bitshift64Lshr($889 | 0, $890 | 0, 27) | 0;
  $926 = getTempRet0() | 0;
  $927 = $923 | $925;
  $928 = $924 | $926;
  $929 = $927 ^ $921;
  $930 = $928 ^ $922;
  $931 = _i64Add($899 | 0, $900 | 0, $901 | 0, $902 | 0) | 0;
  $932 = getTempRet0() | 0;
  $933 = _bitshift64Shl($899 | 0, $900 | 0, 33) | 0;
  $934 = getTempRet0() | 0;
  $935 = _bitshift64Lshr($899 | 0, $900 | 0, 31) | 0;
  $936 = getTempRet0() | 0;
  $937 = $933 | $935;
  $938 = $934 | $936;
  $939 = $937 ^ $931;
  $940 = $938 ^ $932;
  $941 = _i64Add($929 | 0, $930 | 0, $911 | 0, $912 | 0) | 0;
  $942 = getTempRet0() | 0;
  $943 = _bitshift64Shl($929 | 0, $930 | 0, 27) | 0;
  $944 = getTempRet0() | 0;
  $945 = _bitshift64Lshr($929 | 0, $930 | 0, 37) | 0;
  $946 = getTempRet0() | 0;
  $947 = $943 | $945;
  $948 = $944 | $946;
  $949 = $947 ^ $941;
  $950 = $948 ^ $942;
  $951 = _i64Add($919 | 0, $920 | 0, $921 | 0, $922 | 0) | 0;
  $952 = getTempRet0() | 0;
  $953 = _bitshift64Shl($919 | 0, $920 | 0, 14) | 0;
  $954 = getTempRet0() | 0;
  $955 = _bitshift64Lshr($919 | 0, $920 | 0, 50) | 0;
  $956 = getTempRet0() | 0;
  $957 = $953 | $955;
  $958 = $954 | $956;
  $959 = $957 ^ $951;
  $960 = $958 ^ $952;
  $961 = _i64Add($891 | 0, $892 | 0, $909 | 0, $910 | 0) | 0;
  $962 = getTempRet0() | 0;
  $963 = _bitshift64Shl($909 | 0, $910 | 0, 42) | 0;
  $964 = getTempRet0() | 0;
  $965 = _bitshift64Lshr($909 | 0, $910 | 0, 22) | 0;
  $966 = getTempRet0() | 0;
  $967 = $963 | $965;
  $968 = $964 | $966;
  $969 = $967 ^ $961;
  $970 = $968 ^ $962;
  $971 = _i64Add($941 | 0, $942 | 0, $939 | 0, $940 | 0) | 0;
  $972 = getTempRet0() | 0;
  $973 = _bitshift64Shl($939 | 0, $940 | 0, 17) | 0;
  $974 = getTempRet0() | 0;
  $975 = _bitshift64Lshr($939 | 0, $940 | 0, 47) | 0;
  $976 = getTempRet0() | 0;
  $977 = $973 | $975;
  $978 = $974 | $976;
  $979 = $977 ^ $971;
  $980 = $978 ^ $972;
  $981 = _i64Add($951 | 0, $952 | 0, $969 | 0, $970 | 0) | 0;
  $982 = getTempRet0() | 0;
  $983 = _bitshift64Shl($969 | 0, $970 | 0, 49) | 0;
  $984 = getTempRet0() | 0;
  $985 = _bitshift64Lshr($969 | 0, $970 | 0, 15) | 0;
  $986 = getTempRet0() | 0;
  $987 = $983 | $985;
  $988 = $984 | $986;
  $989 = $987 ^ $981;
  $990 = $988 ^ $982;
  $991 = _i64Add($959 | 0, $960 | 0, $961 | 0, $962 | 0) | 0;
  $992 = getTempRet0() | 0;
  $993 = _bitshift64Shl($959 | 0, $960 | 0, 36) | 0;
  $994 = getTempRet0() | 0;
  $995 = _bitshift64Lshr($959 | 0, $960 | 0, 28) | 0;
  $996 = getTempRet0() | 0;
  $997 = $993 | $995;
  $998 = $994 | $996;
  $999 = $997 ^ $991;
  $1000 = $998 ^ $992;
  $1001 = _i64Add($949 | 0, $950 | 0, $931 | 0, $932 | 0) | 0;
  $1002 = getTempRet0() | 0;
  $1003 = _bitshift64Shl($949 | 0, $950 | 0, 39) | 0;
  $1004 = getTempRet0() | 0;
  $1005 = _bitshift64Lshr($949 | 0, $950 | 0, 25) | 0;
  $1006 = getTempRet0() | 0;
  $1007 = $1003 | $1005;
  $1008 = $1004 | $1006;
  $1009 = $1007 ^ $1001;
  $1010 = $1008 ^ $1002;
  $1011 = _i64Add($979 | 0, $980 | 0, $981 | 0, $982 | 0) | 0;
  $1012 = getTempRet0() | 0;
  $1013 = _bitshift64Shl($979 | 0, $980 | 0, 44) | 0;
  $1014 = getTempRet0() | 0;
  $1015 = _bitshift64Lshr($979 | 0, $980 | 0, 20) | 0;
  $1016 = getTempRet0() | 0;
  $1017 = $1013 | $1015;
  $1018 = $1014 | $1016;
  $1019 = $1017 ^ $1011;
  $1020 = $1018 ^ $1012;
  $1021 = _i64Add($1009 | 0, $1010 | 0, $991 | 0, $992 | 0) | 0;
  $1022 = getTempRet0() | 0;
  $1023 = _bitshift64Shl($1009 | 0, $1010 | 0, 9) | 0;
  $1024 = getTempRet0() | 0;
  $1025 = _bitshift64Lshr($1009 | 0, $1010 | 0, 55) | 0;
  $1026 = getTempRet0() | 0;
  $1027 = $1023 | $1025;
  $1028 = $1024 | $1026;
  $1029 = $1027 ^ $1021;
  $1030 = $1028 ^ $1022;
  $1031 = _i64Add($999 | 0, $1000 | 0, $1001 | 0, $1002 | 0) | 0;
  $1032 = getTempRet0() | 0;
  $1033 = _bitshift64Shl($999 | 0, $1000 | 0, 54) | 0;
  $1034 = getTempRet0() | 0;
  $1035 = _bitshift64Lshr($999 | 0, $1000 | 0, 10) | 0;
  $1036 = getTempRet0() | 0;
  $1037 = $1033 | $1035;
  $1038 = $1034 | $1036;
  $1039 = $1037 ^ $1031;
  $1040 = $1038 ^ $1032;
  $1041 = _i64Add($971 | 0, $972 | 0, $989 | 0, $990 | 0) | 0;
  $1042 = getTempRet0() | 0;
  $1043 = _bitshift64Shl($989 | 0, $990 | 0, 56) | 0;
  $1044 = getTempRet0() | 0;
  $1045 = _bitshift64Lshr($989 | 0, $990 | 0, 8) | 0;
  $1046 = getTempRet0() | 0;
  $1047 = $1043 | $1045;
  $1048 = $1044 | $1046;
  $1049 = $1047 ^ $1041;
  $1050 = $1048 ^ $1042;
  $1051 = _i64Add($1021 | 0, $1022 | 0, $88 | 0, $90 | 0) | 0;
  $1052 = getTempRet0() | 0;
  $1053 = _i64Add($1019 | 0, $1020 | 0, $92 | 0, $94 | 0) | 0;
  $1054 = getTempRet0() | 0;
  $1055 = _i64Add($1031 | 0, $1032 | 0, $96 | 0, $98 | 0) | 0;
  $1056 = getTempRet0() | 0;
  $1057 = _i64Add($1049 | 0, $1050 | 0, $95 | 0, $97 | 0) | 0;
  $1058 = getTempRet0() | 0;
  $1059 = _i64Add($1041 | 0, $1042 | 0, $68 | 0, $70 | 0) | 0;
  $1060 = getTempRet0() | 0;
  $1061 = _i64Add($1039 | 0, $1040 | 0, $883 | 0, $884 | 0) | 0;
  $1062 = getTempRet0() | 0;
  $1063 = _i64Add($76 | 0, $78 | 0, $65 | 0, $66 | 0) | 0;
  $1064 = getTempRet0() | 0;
  $1065 = _i64Add($1011 | 0, $1012 | 0, $1063 | 0, $1064 | 0) | 0;
  $1066 = getTempRet0() | 0;
  $1067 = _i64Add($80 | 0, $82 | 0, 5, 0) | 0;
  $1068 = getTempRet0() | 0;
  $1069 = _i64Add($1067 | 0, $1068 | 0, $1029 | 0, $1030 | 0) | 0;
  $1070 = getTempRet0() | 0;
  $1071 = _i64Add($1051 | 0, $1052 | 0, $1053 | 0, $1054 | 0) | 0;
  $1072 = getTempRet0() | 0;
  $1073 = _bitshift64Shl($1053 | 0, $1054 | 0, 39) | 0;
  $1074 = getTempRet0() | 0;
  $1075 = _bitshift64Lshr($1053 | 0, $1054 | 0, 25) | 0;
  $1076 = getTempRet0() | 0;
  $1077 = $1073 | $1075;
  $1078 = $1074 | $1076;
  $1079 = $1077 ^ $1071;
  $1080 = $1078 ^ $1072;
  $1081 = _i64Add($1055 | 0, $1056 | 0, $1057 | 0, $1058 | 0) | 0;
  $1082 = getTempRet0() | 0;
  $1083 = _bitshift64Shl($1057 | 0, $1058 | 0, 30) | 0;
  $1084 = getTempRet0() | 0;
  $1085 = _bitshift64Lshr($1057 | 0, $1058 | 0, 34) | 0;
  $1086 = getTempRet0() | 0;
  $1087 = $1083 | $1085;
  $1088 = $1084 | $1086;
  $1089 = $1087 ^ $1081;
  $1090 = $1088 ^ $1082;
  $1091 = _i64Add($1059 | 0, $1060 | 0, $1061 | 0, $1062 | 0) | 0;
  $1092 = getTempRet0() | 0;
  $1093 = _bitshift64Shl($1061 | 0, $1062 | 0, 34) | 0;
  $1094 = getTempRet0() | 0;
  $1095 = _bitshift64Lshr($1061 | 0, $1062 | 0, 30) | 0;
  $1096 = getTempRet0() | 0;
  $1097 = $1093 | $1095;
  $1098 = $1094 | $1096;
  $1099 = $1097 ^ $1091;
  $1100 = $1098 ^ $1092;
  $1101 = _i64Add($1065 | 0, $1066 | 0, $1069 | 0, $1070 | 0) | 0;
  $1102 = getTempRet0() | 0;
  $1103 = _bitshift64Shl($1069 | 0, $1070 | 0, 24) | 0;
  $1104 = getTempRet0() | 0;
  $1105 = _bitshift64Lshr($1069 | 0, $1070 | 0, 40) | 0;
  $1106 = getTempRet0() | 0;
  $1107 = $1103 | $1105;
  $1108 = $1104 | $1106;
  $1109 = $1107 ^ $1101;
  $1110 = $1108 ^ $1102;
  $1111 = _i64Add($1079 | 0, $1080 | 0, $1081 | 0, $1082 | 0) | 0;
  $1112 = getTempRet0() | 0;
  $1113 = _bitshift64Shl($1079 | 0, $1080 | 0, 13) | 0;
  $1114 = getTempRet0() | 0;
  $1115 = _bitshift64Lshr($1079 | 0, $1080 | 0, 51) | 0;
  $1116 = getTempRet0() | 0;
  $1117 = $1113 | $1115;
  $1118 = $1114 | $1116;
  $1119 = $1117 ^ $1111;
  $1120 = $1118 ^ $1112;
  $1121 = _i64Add($1109 | 0, $1110 | 0, $1091 | 0, $1092 | 0) | 0;
  $1122 = getTempRet0() | 0;
  $1123 = _bitshift64Shl($1109 | 0, $1110 | 0, 50) | 0;
  $1124 = getTempRet0() | 0;
  $1125 = _bitshift64Lshr($1109 | 0, $1110 | 0, 14) | 0;
  $1126 = getTempRet0() | 0;
  $1127 = $1123 | $1125;
  $1128 = $1124 | $1126;
  $1129 = $1127 ^ $1121;
  $1130 = $1128 ^ $1122;
  $1131 = _i64Add($1099 | 0, $1100 | 0, $1101 | 0, $1102 | 0) | 0;
  $1132 = getTempRet0() | 0;
  $1133 = _bitshift64Shl($1099 | 0, $1100 | 0, 10) | 0;
  $1134 = getTempRet0() | 0;
  $1135 = _bitshift64Lshr($1099 | 0, $1100 | 0, 54) | 0;
  $1136 = getTempRet0() | 0;
  $1137 = $1133 | $1135;
  $1138 = $1134 | $1136;
  $1139 = $1137 ^ $1131;
  $1140 = $1138 ^ $1132;
  $1141 = _i64Add($1071 | 0, $1072 | 0, $1089 | 0, $1090 | 0) | 0;
  $1142 = getTempRet0() | 0;
  $1143 = _bitshift64Shl($1089 | 0, $1090 | 0, 17) | 0;
  $1144 = getTempRet0() | 0;
  $1145 = _bitshift64Lshr($1089 | 0, $1090 | 0, 47) | 0;
  $1146 = getTempRet0() | 0;
  $1147 = $1143 | $1145;
  $1148 = $1144 | $1146;
  $1149 = $1147 ^ $1141;
  $1150 = $1148 ^ $1142;
  $1151 = _i64Add($1121 | 0, $1122 | 0, $1119 | 0, $1120 | 0) | 0;
  $1152 = getTempRet0() | 0;
  $1153 = _bitshift64Shl($1119 | 0, $1120 | 0, 25) | 0;
  $1154 = getTempRet0() | 0;
  $1155 = _bitshift64Lshr($1119 | 0, $1120 | 0, 39) | 0;
  $1156 = getTempRet0() | 0;
  $1157 = $1153 | $1155;
  $1158 = $1154 | $1156;
  $1159 = $1157 ^ $1151;
  $1160 = $1158 ^ $1152;
  $1161 = _i64Add($1131 | 0, $1132 | 0, $1149 | 0, $1150 | 0) | 0;
  $1162 = getTempRet0() | 0;
  $1163 = _bitshift64Shl($1149 | 0, $1150 | 0, 29) | 0;
  $1164 = getTempRet0() | 0;
  $1165 = _bitshift64Lshr($1149 | 0, $1150 | 0, 35) | 0;
  $1166 = getTempRet0() | 0;
  $1167 = $1163 | $1165;
  $1168 = $1164 | $1166;
  $1169 = $1167 ^ $1161;
  $1170 = $1168 ^ $1162;
  $1171 = _i64Add($1139 | 0, $1140 | 0, $1141 | 0, $1142 | 0) | 0;
  $1172 = getTempRet0() | 0;
  $1173 = _bitshift64Shl($1139 | 0, $1140 | 0, 39) | 0;
  $1174 = getTempRet0() | 0;
  $1175 = _bitshift64Lshr($1139 | 0, $1140 | 0, 25) | 0;
  $1176 = getTempRet0() | 0;
  $1177 = $1173 | $1175;
  $1178 = $1174 | $1176;
  $1179 = $1177 ^ $1171;
  $1180 = $1178 ^ $1172;
  $1181 = _i64Add($1129 | 0, $1130 | 0, $1111 | 0, $1112 | 0) | 0;
  $1182 = getTempRet0() | 0;
  $1183 = _bitshift64Shl($1129 | 0, $1130 | 0, 43) | 0;
  $1184 = getTempRet0() | 0;
  $1185 = _bitshift64Lshr($1129 | 0, $1130 | 0, 21) | 0;
  $1186 = getTempRet0() | 0;
  $1187 = $1183 | $1185;
  $1188 = $1184 | $1186;
  $1189 = $1187 ^ $1181;
  $1190 = $1188 ^ $1182;
  $1191 = _i64Add($1159 | 0, $1160 | 0, $1161 | 0, $1162 | 0) | 0;
  $1192 = getTempRet0() | 0;
  $1193 = _bitshift64Shl($1159 | 0, $1160 | 0, 8) | 0;
  $1194 = getTempRet0() | 0;
  $1195 = _bitshift64Lshr($1159 | 0, $1160 | 0, 56) | 0;
  $1196 = getTempRet0() | 0;
  $1197 = $1193 | $1195;
  $1198 = $1194 | $1196;
  $1199 = $1197 ^ $1191;
  $1200 = $1198 ^ $1192;
  $1201 = _i64Add($1189 | 0, $1190 | 0, $1171 | 0, $1172 | 0) | 0;
  $1202 = getTempRet0() | 0;
  $1203 = _bitshift64Shl($1189 | 0, $1190 | 0, 35) | 0;
  $1204 = getTempRet0() | 0;
  $1205 = _bitshift64Lshr($1189 | 0, $1190 | 0, 29) | 0;
  $1206 = getTempRet0() | 0;
  $1207 = $1203 | $1205;
  $1208 = $1204 | $1206;
  $1209 = $1207 ^ $1201;
  $1210 = $1208 ^ $1202;
  $1211 = _i64Add($1179 | 0, $1180 | 0, $1181 | 0, $1182 | 0) | 0;
  $1212 = getTempRet0() | 0;
  $1213 = _bitshift64Shl($1179 | 0, $1180 | 0, 56) | 0;
  $1214 = getTempRet0() | 0;
  $1215 = _bitshift64Lshr($1179 | 0, $1180 | 0, 8) | 0;
  $1216 = getTempRet0() | 0;
  $1217 = $1213 | $1215;
  $1218 = $1214 | $1216;
  $1219 = $1217 ^ $1211;
  $1220 = $1218 ^ $1212;
  $1221 = _i64Add($1151 | 0, $1152 | 0, $1169 | 0, $1170 | 0) | 0;
  $1222 = getTempRet0() | 0;
  $1223 = _bitshift64Shl($1169 | 0, $1170 | 0, 22) | 0;
  $1224 = getTempRet0() | 0;
  $1225 = _bitshift64Lshr($1169 | 0, $1170 | 0, 42) | 0;
  $1226 = getTempRet0() | 0;
  $1227 = $1223 | $1225;
  $1228 = $1224 | $1226;
  $1229 = $1227 ^ $1221;
  $1230 = $1228 ^ $1222;
  $1231 = _i64Add($1201 | 0, $1202 | 0, $92 | 0, $94 | 0) | 0;
  $1232 = getTempRet0() | 0;
  $1233 = _i64Add($1199 | 0, $1200 | 0, $96 | 0, $98 | 0) | 0;
  $1234 = getTempRet0() | 0;
  $1235 = _i64Add($1211 | 0, $1212 | 0, $95 | 0, $97 | 0) | 0;
  $1236 = getTempRet0() | 0;
  $1237 = _i64Add($1229 | 0, $1230 | 0, $68 | 0, $70 | 0) | 0;
  $1238 = getTempRet0() | 0;
  $1239 = _i64Add($1221 | 0, $1222 | 0, $72 | 0, $74 | 0) | 0;
  $1240 = getTempRet0() | 0;
  $1241 = _i64Add($1219 | 0, $1220 | 0, $1063 | 0, $1064 | 0) | 0;
  $1242 = getTempRet0() | 0;
  $1243 = _i64Add($80 | 0, $82 | 0, $100 | 0, $102 | 0) | 0;
  $1244 = getTempRet0() | 0;
  $1245 = _i64Add($1191 | 0, $1192 | 0, $1243 | 0, $1244 | 0) | 0;
  $1246 = getTempRet0() | 0;
  $1247 = _i64Add($84 | 0, $86 | 0, 6, 0) | 0;
  $1248 = getTempRet0() | 0;
  $1249 = _i64Add($1247 | 0, $1248 | 0, $1209 | 0, $1210 | 0) | 0;
  $1250 = getTempRet0() | 0;
  $1251 = _i64Add($1231 | 0, $1232 | 0, $1233 | 0, $1234 | 0) | 0;
  $1252 = getTempRet0() | 0;
  $1253 = _bitshift64Shl($1233 | 0, $1234 | 0, 46) | 0;
  $1254 = getTempRet0() | 0;
  $1255 = _bitshift64Lshr($1233 | 0, $1234 | 0, 18) | 0;
  $1256 = getTempRet0() | 0;
  $1257 = $1253 | $1255;
  $1258 = $1254 | $1256;
  $1259 = $1257 ^ $1251;
  $1260 = $1258 ^ $1252;
  $1261 = _i64Add($1235 | 0, $1236 | 0, $1237 | 0, $1238 | 0) | 0;
  $1262 = getTempRet0() | 0;
  $1263 = _bitshift64Shl($1237 | 0, $1238 | 0, 36) | 0;
  $1264 = getTempRet0() | 0;
  $1265 = _bitshift64Lshr($1237 | 0, $1238 | 0, 28) | 0;
  $1266 = getTempRet0() | 0;
  $1267 = $1263 | $1265;
  $1268 = $1264 | $1266;
  $1269 = $1267 ^ $1261;
  $1270 = $1268 ^ $1262;
  $1271 = _i64Add($1239 | 0, $1240 | 0, $1241 | 0, $1242 | 0) | 0;
  $1272 = getTempRet0() | 0;
  $1273 = _bitshift64Shl($1241 | 0, $1242 | 0, 19) | 0;
  $1274 = getTempRet0() | 0;
  $1275 = _bitshift64Lshr($1241 | 0, $1242 | 0, 45) | 0;
  $1276 = getTempRet0() | 0;
  $1277 = $1273 | $1275;
  $1278 = $1274 | $1276;
  $1279 = $1277 ^ $1271;
  $1280 = $1278 ^ $1272;
  $1281 = _i64Add($1245 | 0, $1246 | 0, $1249 | 0, $1250 | 0) | 0;
  $1282 = getTempRet0() | 0;
  $1283 = _bitshift64Shl($1249 | 0, $1250 | 0, 37) | 0;
  $1284 = getTempRet0() | 0;
  $1285 = _bitshift64Lshr($1249 | 0, $1250 | 0, 27) | 0;
  $1286 = getTempRet0() | 0;
  $1287 = $1283 | $1285;
  $1288 = $1284 | $1286;
  $1289 = $1287 ^ $1281;
  $1290 = $1288 ^ $1282;
  $1291 = _i64Add($1259 | 0, $1260 | 0, $1261 | 0, $1262 | 0) | 0;
  $1292 = getTempRet0() | 0;
  $1293 = _bitshift64Shl($1259 | 0, $1260 | 0, 33) | 0;
  $1294 = getTempRet0() | 0;
  $1295 = _bitshift64Lshr($1259 | 0, $1260 | 0, 31) | 0;
  $1296 = getTempRet0() | 0;
  $1297 = $1293 | $1295;
  $1298 = $1294 | $1296;
  $1299 = $1297 ^ $1291;
  $1300 = $1298 ^ $1292;
  $1301 = _i64Add($1289 | 0, $1290 | 0, $1271 | 0, $1272 | 0) | 0;
  $1302 = getTempRet0() | 0;
  $1303 = _bitshift64Shl($1289 | 0, $1290 | 0, 27) | 0;
  $1304 = getTempRet0() | 0;
  $1305 = _bitshift64Lshr($1289 | 0, $1290 | 0, 37) | 0;
  $1306 = getTempRet0() | 0;
  $1307 = $1303 | $1305;
  $1308 = $1304 | $1306;
  $1309 = $1307 ^ $1301;
  $1310 = $1308 ^ $1302;
  $1311 = _i64Add($1279 | 0, $1280 | 0, $1281 | 0, $1282 | 0) | 0;
  $1312 = getTempRet0() | 0;
  $1313 = _bitshift64Shl($1279 | 0, $1280 | 0, 14) | 0;
  $1314 = getTempRet0() | 0;
  $1315 = _bitshift64Lshr($1279 | 0, $1280 | 0, 50) | 0;
  $1316 = getTempRet0() | 0;
  $1317 = $1313 | $1315;
  $1318 = $1314 | $1316;
  $1319 = $1317 ^ $1311;
  $1320 = $1318 ^ $1312;
  $1321 = _i64Add($1251 | 0, $1252 | 0, $1269 | 0, $1270 | 0) | 0;
  $1322 = getTempRet0() | 0;
  $1323 = _bitshift64Shl($1269 | 0, $1270 | 0, 42) | 0;
  $1324 = getTempRet0() | 0;
  $1325 = _bitshift64Lshr($1269 | 0, $1270 | 0, 22) | 0;
  $1326 = getTempRet0() | 0;
  $1327 = $1323 | $1325;
  $1328 = $1324 | $1326;
  $1329 = $1327 ^ $1321;
  $1330 = $1328 ^ $1322;
  $1331 = _i64Add($1301 | 0, $1302 | 0, $1299 | 0, $1300 | 0) | 0;
  $1332 = getTempRet0() | 0;
  $1333 = _bitshift64Shl($1299 | 0, $1300 | 0, 17) | 0;
  $1334 = getTempRet0() | 0;
  $1335 = _bitshift64Lshr($1299 | 0, $1300 | 0, 47) | 0;
  $1336 = getTempRet0() | 0;
  $1337 = $1333 | $1335;
  $1338 = $1334 | $1336;
  $1339 = $1337 ^ $1331;
  $1340 = $1338 ^ $1332;
  $1341 = _i64Add($1311 | 0, $1312 | 0, $1329 | 0, $1330 | 0) | 0;
  $1342 = getTempRet0() | 0;
  $1343 = _bitshift64Shl($1329 | 0, $1330 | 0, 49) | 0;
  $1344 = getTempRet0() | 0;
  $1345 = _bitshift64Lshr($1329 | 0, $1330 | 0, 15) | 0;
  $1346 = getTempRet0() | 0;
  $1347 = $1343 | $1345;
  $1348 = $1344 | $1346;
  $1349 = $1347 ^ $1341;
  $1350 = $1348 ^ $1342;
  $1351 = _i64Add($1319 | 0, $1320 | 0, $1321 | 0, $1322 | 0) | 0;
  $1352 = getTempRet0() | 0;
  $1353 = _bitshift64Shl($1319 | 0, $1320 | 0, 36) | 0;
  $1354 = getTempRet0() | 0;
  $1355 = _bitshift64Lshr($1319 | 0, $1320 | 0, 28) | 0;
  $1356 = getTempRet0() | 0;
  $1357 = $1353 | $1355;
  $1358 = $1354 | $1356;
  $1359 = $1357 ^ $1351;
  $1360 = $1358 ^ $1352;
  $1361 = _i64Add($1309 | 0, $1310 | 0, $1291 | 0, $1292 | 0) | 0;
  $1362 = getTempRet0() | 0;
  $1363 = _bitshift64Shl($1309 | 0, $1310 | 0, 39) | 0;
  $1364 = getTempRet0() | 0;
  $1365 = _bitshift64Lshr($1309 | 0, $1310 | 0, 25) | 0;
  $1366 = getTempRet0() | 0;
  $1367 = $1363 | $1365;
  $1368 = $1364 | $1366;
  $1369 = $1367 ^ $1361;
  $1370 = $1368 ^ $1362;
  $1371 = _i64Add($1339 | 0, $1340 | 0, $1341 | 0, $1342 | 0) | 0;
  $1372 = getTempRet0() | 0;
  $1373 = _bitshift64Shl($1339 | 0, $1340 | 0, 44) | 0;
  $1374 = getTempRet0() | 0;
  $1375 = _bitshift64Lshr($1339 | 0, $1340 | 0, 20) | 0;
  $1376 = getTempRet0() | 0;
  $1377 = $1373 | $1375;
  $1378 = $1374 | $1376;
  $1379 = $1377 ^ $1371;
  $1380 = $1378 ^ $1372;
  $1381 = _i64Add($1369 | 0, $1370 | 0, $1351 | 0, $1352 | 0) | 0;
  $1382 = getTempRet0() | 0;
  $1383 = _bitshift64Shl($1369 | 0, $1370 | 0, 9) | 0;
  $1384 = getTempRet0() | 0;
  $1385 = _bitshift64Lshr($1369 | 0, $1370 | 0, 55) | 0;
  $1386 = getTempRet0() | 0;
  $1387 = $1383 | $1385;
  $1388 = $1384 | $1386;
  $1389 = $1387 ^ $1381;
  $1390 = $1388 ^ $1382;
  $1391 = _i64Add($1359 | 0, $1360 | 0, $1361 | 0, $1362 | 0) | 0;
  $1392 = getTempRet0() | 0;
  $1393 = _bitshift64Shl($1359 | 0, $1360 | 0, 54) | 0;
  $1394 = getTempRet0() | 0;
  $1395 = _bitshift64Lshr($1359 | 0, $1360 | 0, 10) | 0;
  $1396 = getTempRet0() | 0;
  $1397 = $1393 | $1395;
  $1398 = $1394 | $1396;
  $1399 = $1397 ^ $1391;
  $1400 = $1398 ^ $1392;
  $1401 = _i64Add($1331 | 0, $1332 | 0, $1349 | 0, $1350 | 0) | 0;
  $1402 = getTempRet0() | 0;
  $1403 = _bitshift64Shl($1349 | 0, $1350 | 0, 56) | 0;
  $1404 = getTempRet0() | 0;
  $1405 = _bitshift64Lshr($1349 | 0, $1350 | 0, 8) | 0;
  $1406 = getTempRet0() | 0;
  $1407 = $1403 | $1405;
  $1408 = $1404 | $1406;
  $1409 = $1407 ^ $1401;
  $1410 = $1408 ^ $1402;
  $1411 = _i64Add($1381 | 0, $1382 | 0, $96 | 0, $98 | 0) | 0;
  $1412 = getTempRet0() | 0;
  $1413 = _i64Add($1379 | 0, $1380 | 0, $95 | 0, $97 | 0) | 0;
  $1414 = getTempRet0() | 0;
  $1415 = _i64Add($1391 | 0, $1392 | 0, $68 | 0, $70 | 0) | 0;
  $1416 = getTempRet0() | 0;
  $1417 = _i64Add($1409 | 0, $1410 | 0, $72 | 0, $74 | 0) | 0;
  $1418 = getTempRet0() | 0;
  $1419 = _i64Add($1401 | 0, $1402 | 0, $76 | 0, $78 | 0) | 0;
  $1420 = getTempRet0() | 0;
  $1421 = _i64Add($1399 | 0, $1400 | 0, $1243 | 0, $1244 | 0) | 0;
  $1422 = getTempRet0() | 0;
  $1423 = _i64Add($84 | 0, $86 | 0, $99 | 0, $101 | 0) | 0;
  $1424 = getTempRet0() | 0;
  $1425 = _i64Add($1371 | 0, $1372 | 0, $1423 | 0, $1424 | 0) | 0;
  $1426 = getTempRet0() | 0;
  $1427 = _i64Add($88 | 0, $90 | 0, 7, 0) | 0;
  $1428 = getTempRet0() | 0;
  $1429 = _i64Add($1427 | 0, $1428 | 0, $1389 | 0, $1390 | 0) | 0;
  $1430 = getTempRet0() | 0;
  $1431 = _i64Add($1411 | 0, $1412 | 0, $1413 | 0, $1414 | 0) | 0;
  $1432 = getTempRet0() | 0;
  $1433 = _bitshift64Shl($1413 | 0, $1414 | 0, 39) | 0;
  $1434 = getTempRet0() | 0;
  $1435 = _bitshift64Lshr($1413 | 0, $1414 | 0, 25) | 0;
  $1436 = getTempRet0() | 0;
  $1437 = $1433 | $1435;
  $1438 = $1434 | $1436;
  $1439 = $1437 ^ $1431;
  $1440 = $1438 ^ $1432;
  $1441 = _i64Add($1415 | 0, $1416 | 0, $1417 | 0, $1418 | 0) | 0;
  $1442 = getTempRet0() | 0;
  $1443 = _bitshift64Shl($1417 | 0, $1418 | 0, 30) | 0;
  $1444 = getTempRet0() | 0;
  $1445 = _bitshift64Lshr($1417 | 0, $1418 | 0, 34) | 0;
  $1446 = getTempRet0() | 0;
  $1447 = $1443 | $1445;
  $1448 = $1444 | $1446;
  $1449 = $1447 ^ $1441;
  $1450 = $1448 ^ $1442;
  $1451 = _i64Add($1419 | 0, $1420 | 0, $1421 | 0, $1422 | 0) | 0;
  $1452 = getTempRet0() | 0;
  $1453 = _bitshift64Shl($1421 | 0, $1422 | 0, 34) | 0;
  $1454 = getTempRet0() | 0;
  $1455 = _bitshift64Lshr($1421 | 0, $1422 | 0, 30) | 0;
  $1456 = getTempRet0() | 0;
  $1457 = $1453 | $1455;
  $1458 = $1454 | $1456;
  $1459 = $1457 ^ $1451;
  $1460 = $1458 ^ $1452;
  $1461 = _i64Add($1425 | 0, $1426 | 0, $1429 | 0, $1430 | 0) | 0;
  $1462 = getTempRet0() | 0;
  $1463 = _bitshift64Shl($1429 | 0, $1430 | 0, 24) | 0;
  $1464 = getTempRet0() | 0;
  $1465 = _bitshift64Lshr($1429 | 0, $1430 | 0, 40) | 0;
  $1466 = getTempRet0() | 0;
  $1467 = $1463 | $1465;
  $1468 = $1464 | $1466;
  $1469 = $1467 ^ $1461;
  $1470 = $1468 ^ $1462;
  $1471 = _i64Add($1439 | 0, $1440 | 0, $1441 | 0, $1442 | 0) | 0;
  $1472 = getTempRet0() | 0;
  $1473 = _bitshift64Shl($1439 | 0, $1440 | 0, 13) | 0;
  $1474 = getTempRet0() | 0;
  $1475 = _bitshift64Lshr($1439 | 0, $1440 | 0, 51) | 0;
  $1476 = getTempRet0() | 0;
  $1477 = $1473 | $1475;
  $1478 = $1474 | $1476;
  $1479 = $1477 ^ $1471;
  $1480 = $1478 ^ $1472;
  $1481 = _i64Add($1469 | 0, $1470 | 0, $1451 | 0, $1452 | 0) | 0;
  $1482 = getTempRet0() | 0;
  $1483 = _bitshift64Shl($1469 | 0, $1470 | 0, 50) | 0;
  $1484 = getTempRet0() | 0;
  $1485 = _bitshift64Lshr($1469 | 0, $1470 | 0, 14) | 0;
  $1486 = getTempRet0() | 0;
  $1487 = $1483 | $1485;
  $1488 = $1484 | $1486;
  $1489 = $1487 ^ $1481;
  $1490 = $1488 ^ $1482;
  $1491 = _i64Add($1459 | 0, $1460 | 0, $1461 | 0, $1462 | 0) | 0;
  $1492 = getTempRet0() | 0;
  $1493 = _bitshift64Shl($1459 | 0, $1460 | 0, 10) | 0;
  $1494 = getTempRet0() | 0;
  $1495 = _bitshift64Lshr($1459 | 0, $1460 | 0, 54) | 0;
  $1496 = getTempRet0() | 0;
  $1497 = $1493 | $1495;
  $1498 = $1494 | $1496;
  $1499 = $1497 ^ $1491;
  $1500 = $1498 ^ $1492;
  $1501 = _i64Add($1431 | 0, $1432 | 0, $1449 | 0, $1450 | 0) | 0;
  $1502 = getTempRet0() | 0;
  $1503 = _bitshift64Shl($1449 | 0, $1450 | 0, 17) | 0;
  $1504 = getTempRet0() | 0;
  $1505 = _bitshift64Lshr($1449 | 0, $1450 | 0, 47) | 0;
  $1506 = getTempRet0() | 0;
  $1507 = $1503 | $1505;
  $1508 = $1504 | $1506;
  $1509 = $1507 ^ $1501;
  $1510 = $1508 ^ $1502;
  $1511 = _i64Add($1481 | 0, $1482 | 0, $1479 | 0, $1480 | 0) | 0;
  $1512 = getTempRet0() | 0;
  $1513 = _bitshift64Shl($1479 | 0, $1480 | 0, 25) | 0;
  $1514 = getTempRet0() | 0;
  $1515 = _bitshift64Lshr($1479 | 0, $1480 | 0, 39) | 0;
  $1516 = getTempRet0() | 0;
  $1517 = $1513 | $1515;
  $1518 = $1514 | $1516;
  $1519 = $1517 ^ $1511;
  $1520 = $1518 ^ $1512;
  $1521 = _i64Add($1491 | 0, $1492 | 0, $1509 | 0, $1510 | 0) | 0;
  $1522 = getTempRet0() | 0;
  $1523 = _bitshift64Shl($1509 | 0, $1510 | 0, 29) | 0;
  $1524 = getTempRet0() | 0;
  $1525 = _bitshift64Lshr($1509 | 0, $1510 | 0, 35) | 0;
  $1526 = getTempRet0() | 0;
  $1527 = $1523 | $1525;
  $1528 = $1524 | $1526;
  $1529 = $1527 ^ $1521;
  $1530 = $1528 ^ $1522;
  $1531 = _i64Add($1499 | 0, $1500 | 0, $1501 | 0, $1502 | 0) | 0;
  $1532 = getTempRet0() | 0;
  $1533 = _bitshift64Shl($1499 | 0, $1500 | 0, 39) | 0;
  $1534 = getTempRet0() | 0;
  $1535 = _bitshift64Lshr($1499 | 0, $1500 | 0, 25) | 0;
  $1536 = getTempRet0() | 0;
  $1537 = $1533 | $1535;
  $1538 = $1534 | $1536;
  $1539 = $1537 ^ $1531;
  $1540 = $1538 ^ $1532;
  $1541 = _i64Add($1489 | 0, $1490 | 0, $1471 | 0, $1472 | 0) | 0;
  $1542 = getTempRet0() | 0;
  $1543 = _bitshift64Shl($1489 | 0, $1490 | 0, 43) | 0;
  $1544 = getTempRet0() | 0;
  $1545 = _bitshift64Lshr($1489 | 0, $1490 | 0, 21) | 0;
  $1546 = getTempRet0() | 0;
  $1547 = $1543 | $1545;
  $1548 = $1544 | $1546;
  $1549 = $1547 ^ $1541;
  $1550 = $1548 ^ $1542;
  $1551 = _i64Add($1519 | 0, $1520 | 0, $1521 | 0, $1522 | 0) | 0;
  $1552 = getTempRet0() | 0;
  $1553 = _bitshift64Shl($1519 | 0, $1520 | 0, 8) | 0;
  $1554 = getTempRet0() | 0;
  $1555 = _bitshift64Lshr($1519 | 0, $1520 | 0, 56) | 0;
  $1556 = getTempRet0() | 0;
  $1557 = $1553 | $1555;
  $1558 = $1554 | $1556;
  $1559 = $1557 ^ $1551;
  $1560 = $1558 ^ $1552;
  $1561 = _i64Add($1549 | 0, $1550 | 0, $1531 | 0, $1532 | 0) | 0;
  $1562 = getTempRet0() | 0;
  $1563 = _bitshift64Shl($1549 | 0, $1550 | 0, 35) | 0;
  $1564 = getTempRet0() | 0;
  $1565 = _bitshift64Lshr($1549 | 0, $1550 | 0, 29) | 0;
  $1566 = getTempRet0() | 0;
  $1567 = $1563 | $1565;
  $1568 = $1564 | $1566;
  $1569 = $1567 ^ $1561;
  $1570 = $1568 ^ $1562;
  $1571 = _i64Add($1539 | 0, $1540 | 0, $1541 | 0, $1542 | 0) | 0;
  $1572 = getTempRet0() | 0;
  $1573 = _bitshift64Shl($1539 | 0, $1540 | 0, 56) | 0;
  $1574 = getTempRet0() | 0;
  $1575 = _bitshift64Lshr($1539 | 0, $1540 | 0, 8) | 0;
  $1576 = getTempRet0() | 0;
  $1577 = $1573 | $1575;
  $1578 = $1574 | $1576;
  $1579 = $1577 ^ $1571;
  $1580 = $1578 ^ $1572;
  $1581 = _i64Add($1511 | 0, $1512 | 0, $1529 | 0, $1530 | 0) | 0;
  $1582 = getTempRet0() | 0;
  $1583 = _bitshift64Shl($1529 | 0, $1530 | 0, 22) | 0;
  $1584 = getTempRet0() | 0;
  $1585 = _bitshift64Lshr($1529 | 0, $1530 | 0, 42) | 0;
  $1586 = getTempRet0() | 0;
  $1587 = $1583 | $1585;
  $1588 = $1584 | $1586;
  $1589 = $1587 ^ $1581;
  $1590 = $1588 ^ $1582;
  $1591 = _i64Add($1561 | 0, $1562 | 0, $95 | 0, $97 | 0) | 0;
  $1592 = getTempRet0() | 0;
  $1593 = _i64Add($1559 | 0, $1560 | 0, $68 | 0, $70 | 0) | 0;
  $1594 = getTempRet0() | 0;
  $1595 = _i64Add($1571 | 0, $1572 | 0, $72 | 0, $74 | 0) | 0;
  $1596 = getTempRet0() | 0;
  $1597 = _i64Add($1589 | 0, $1590 | 0, $76 | 0, $78 | 0) | 0;
  $1598 = getTempRet0() | 0;
  $1599 = _i64Add($1581 | 0, $1582 | 0, $80 | 0, $82 | 0) | 0;
  $1600 = getTempRet0() | 0;
  $1601 = _i64Add($1579 | 0, $1580 | 0, $1423 | 0, $1424 | 0) | 0;
  $1602 = getTempRet0() | 0;
  $1603 = _i64Add($1551 | 0, $1552 | 0, $161 | 0, $162 | 0) | 0;
  $1604 = getTempRet0() | 0;
  $1605 = _i64Add($92 | 0, $94 | 0, 8, 0) | 0;
  $1606 = getTempRet0() | 0;
  $1607 = _i64Add($1605 | 0, $1606 | 0, $1569 | 0, $1570 | 0) | 0;
  $1608 = getTempRet0() | 0;
  $1609 = _i64Add($1591 | 0, $1592 | 0, $1593 | 0, $1594 | 0) | 0;
  $1610 = getTempRet0() | 0;
  $1611 = _bitshift64Shl($1593 | 0, $1594 | 0, 46) | 0;
  $1612 = getTempRet0() | 0;
  $1613 = _bitshift64Lshr($1593 | 0, $1594 | 0, 18) | 0;
  $1614 = getTempRet0() | 0;
  $1615 = $1611 | $1613;
  $1616 = $1612 | $1614;
  $1617 = $1615 ^ $1609;
  $1618 = $1616 ^ $1610;
  $1619 = _i64Add($1595 | 0, $1596 | 0, $1597 | 0, $1598 | 0) | 0;
  $1620 = getTempRet0() | 0;
  $1621 = _bitshift64Shl($1597 | 0, $1598 | 0, 36) | 0;
  $1622 = getTempRet0() | 0;
  $1623 = _bitshift64Lshr($1597 | 0, $1598 | 0, 28) | 0;
  $1624 = getTempRet0() | 0;
  $1625 = $1621 | $1623;
  $1626 = $1622 | $1624;
  $1627 = $1625 ^ $1619;
  $1628 = $1626 ^ $1620;
  $1629 = _i64Add($1599 | 0, $1600 | 0, $1601 | 0, $1602 | 0) | 0;
  $1630 = getTempRet0() | 0;
  $1631 = _bitshift64Shl($1601 | 0, $1602 | 0, 19) | 0;
  $1632 = getTempRet0() | 0;
  $1633 = _bitshift64Lshr($1601 | 0, $1602 | 0, 45) | 0;
  $1634 = getTempRet0() | 0;
  $1635 = $1631 | $1633;
  $1636 = $1632 | $1634;
  $1637 = $1635 ^ $1629;
  $1638 = $1636 ^ $1630;
  $1639 = _i64Add($1603 | 0, $1604 | 0, $1607 | 0, $1608 | 0) | 0;
  $1640 = getTempRet0() | 0;
  $1641 = _bitshift64Shl($1607 | 0, $1608 | 0, 37) | 0;
  $1642 = getTempRet0() | 0;
  $1643 = _bitshift64Lshr($1607 | 0, $1608 | 0, 27) | 0;
  $1644 = getTempRet0() | 0;
  $1645 = $1641 | $1643;
  $1646 = $1642 | $1644;
  $1647 = $1645 ^ $1639;
  $1648 = $1646 ^ $1640;
  $1649 = _i64Add($1617 | 0, $1618 | 0, $1619 | 0, $1620 | 0) | 0;
  $1650 = getTempRet0() | 0;
  $1651 = _bitshift64Shl($1617 | 0, $1618 | 0, 33) | 0;
  $1652 = getTempRet0() | 0;
  $1653 = _bitshift64Lshr($1617 | 0, $1618 | 0, 31) | 0;
  $1654 = getTempRet0() | 0;
  $1655 = $1651 | $1653;
  $1656 = $1652 | $1654;
  $1657 = $1655 ^ $1649;
  $1658 = $1656 ^ $1650;
  $1659 = _i64Add($1647 | 0, $1648 | 0, $1629 | 0, $1630 | 0) | 0;
  $1660 = getTempRet0() | 0;
  $1661 = _bitshift64Shl($1647 | 0, $1648 | 0, 27) | 0;
  $1662 = getTempRet0() | 0;
  $1663 = _bitshift64Lshr($1647 | 0, $1648 | 0, 37) | 0;
  $1664 = getTempRet0() | 0;
  $1665 = $1661 | $1663;
  $1666 = $1662 | $1664;
  $1667 = $1665 ^ $1659;
  $1668 = $1666 ^ $1660;
  $1669 = _i64Add($1637 | 0, $1638 | 0, $1639 | 0, $1640 | 0) | 0;
  $1670 = getTempRet0() | 0;
  $1671 = _bitshift64Shl($1637 | 0, $1638 | 0, 14) | 0;
  $1672 = getTempRet0() | 0;
  $1673 = _bitshift64Lshr($1637 | 0, $1638 | 0, 50) | 0;
  $1674 = getTempRet0() | 0;
  $1675 = $1671 | $1673;
  $1676 = $1672 | $1674;
  $1677 = $1675 ^ $1669;
  $1678 = $1676 ^ $1670;
  $1679 = _i64Add($1609 | 0, $1610 | 0, $1627 | 0, $1628 | 0) | 0;
  $1680 = getTempRet0() | 0;
  $1681 = _bitshift64Shl($1627 | 0, $1628 | 0, 42) | 0;
  $1682 = getTempRet0() | 0;
  $1683 = _bitshift64Lshr($1627 | 0, $1628 | 0, 22) | 0;
  $1684 = getTempRet0() | 0;
  $1685 = $1681 | $1683;
  $1686 = $1682 | $1684;
  $1687 = $1685 ^ $1679;
  $1688 = $1686 ^ $1680;
  $1689 = _i64Add($1659 | 0, $1660 | 0, $1657 | 0, $1658 | 0) | 0;
  $1690 = getTempRet0() | 0;
  $1691 = _bitshift64Shl($1657 | 0, $1658 | 0, 17) | 0;
  $1692 = getTempRet0() | 0;
  $1693 = _bitshift64Lshr($1657 | 0, $1658 | 0, 47) | 0;
  $1694 = getTempRet0() | 0;
  $1695 = $1691 | $1693;
  $1696 = $1692 | $1694;
  $1697 = $1695 ^ $1689;
  $1698 = $1696 ^ $1690;
  $1699 = _i64Add($1669 | 0, $1670 | 0, $1687 | 0, $1688 | 0) | 0;
  $1700 = getTempRet0() | 0;
  $1701 = _bitshift64Shl($1687 | 0, $1688 | 0, 49) | 0;
  $1702 = getTempRet0() | 0;
  $1703 = _bitshift64Lshr($1687 | 0, $1688 | 0, 15) | 0;
  $1704 = getTempRet0() | 0;
  $1705 = $1701 | $1703;
  $1706 = $1702 | $1704;
  $1707 = $1705 ^ $1699;
  $1708 = $1706 ^ $1700;
  $1709 = _i64Add($1677 | 0, $1678 | 0, $1679 | 0, $1680 | 0) | 0;
  $1710 = getTempRet0() | 0;
  $1711 = _bitshift64Shl($1677 | 0, $1678 | 0, 36) | 0;
  $1712 = getTempRet0() | 0;
  $1713 = _bitshift64Lshr($1677 | 0, $1678 | 0, 28) | 0;
  $1714 = getTempRet0() | 0;
  $1715 = $1711 | $1713;
  $1716 = $1712 | $1714;
  $1717 = $1715 ^ $1709;
  $1718 = $1716 ^ $1710;
  $1719 = _i64Add($1667 | 0, $1668 | 0, $1649 | 0, $1650 | 0) | 0;
  $1720 = getTempRet0() | 0;
  $1721 = _bitshift64Shl($1667 | 0, $1668 | 0, 39) | 0;
  $1722 = getTempRet0() | 0;
  $1723 = _bitshift64Lshr($1667 | 0, $1668 | 0, 25) | 0;
  $1724 = getTempRet0() | 0;
  $1725 = $1721 | $1723;
  $1726 = $1722 | $1724;
  $1727 = $1725 ^ $1719;
  $1728 = $1726 ^ $1720;
  $1729 = _i64Add($1697 | 0, $1698 | 0, $1699 | 0, $1700 | 0) | 0;
  $1730 = getTempRet0() | 0;
  $1731 = _bitshift64Shl($1697 | 0, $1698 | 0, 44) | 0;
  $1732 = getTempRet0() | 0;
  $1733 = _bitshift64Lshr($1697 | 0, $1698 | 0, 20) | 0;
  $1734 = getTempRet0() | 0;
  $1735 = $1731 | $1733;
  $1736 = $1732 | $1734;
  $1737 = $1735 ^ $1729;
  $1738 = $1736 ^ $1730;
  $1739 = _i64Add($1727 | 0, $1728 | 0, $1709 | 0, $1710 | 0) | 0;
  $1740 = getTempRet0() | 0;
  $1741 = _bitshift64Shl($1727 | 0, $1728 | 0, 9) | 0;
  $1742 = getTempRet0() | 0;
  $1743 = _bitshift64Lshr($1727 | 0, $1728 | 0, 55) | 0;
  $1744 = getTempRet0() | 0;
  $1745 = $1741 | $1743;
  $1746 = $1742 | $1744;
  $1747 = $1745 ^ $1739;
  $1748 = $1746 ^ $1740;
  $1749 = _i64Add($1717 | 0, $1718 | 0, $1719 | 0, $1720 | 0) | 0;
  $1750 = getTempRet0() | 0;
  $1751 = _bitshift64Shl($1717 | 0, $1718 | 0, 54) | 0;
  $1752 = getTempRet0() | 0;
  $1753 = _bitshift64Lshr($1717 | 0, $1718 | 0, 10) | 0;
  $1754 = getTempRet0() | 0;
  $1755 = $1751 | $1753;
  $1756 = $1752 | $1754;
  $1757 = $1755 ^ $1749;
  $1758 = $1756 ^ $1750;
  $1759 = _i64Add($1689 | 0, $1690 | 0, $1707 | 0, $1708 | 0) | 0;
  $1760 = getTempRet0() | 0;
  $1761 = _bitshift64Shl($1707 | 0, $1708 | 0, 56) | 0;
  $1762 = getTempRet0() | 0;
  $1763 = _bitshift64Lshr($1707 | 0, $1708 | 0, 8) | 0;
  $1764 = getTempRet0() | 0;
  $1765 = $1761 | $1763;
  $1766 = $1762 | $1764;
  $1767 = $1765 ^ $1759;
  $1768 = $1766 ^ $1760;
  $1769 = _i64Add($1739 | 0, $1740 | 0, $68 | 0, $70 | 0) | 0;
  $1770 = getTempRet0() | 0;
  $1771 = _i64Add($1737 | 0, $1738 | 0, $72 | 0, $74 | 0) | 0;
  $1772 = getTempRet0() | 0;
  $1773 = _i64Add($1749 | 0, $1750 | 0, $76 | 0, $78 | 0) | 0;
  $1774 = getTempRet0() | 0;
  $1775 = _i64Add($1767 | 0, $1768 | 0, $80 | 0, $82 | 0) | 0;
  $1776 = getTempRet0() | 0;
  $1777 = _i64Add($1759 | 0, $1760 | 0, $84 | 0, $86 | 0) | 0;
  $1778 = getTempRet0() | 0;
  $1779 = _i64Add($1757 | 0, $1758 | 0, $161 | 0, $162 | 0) | 0;
  $1780 = getTempRet0() | 0;
  $1781 = _i64Add($1729 | 0, $1730 | 0, $197 | 0, $198 | 0) | 0;
  $1782 = getTempRet0() | 0;
  $1783 = _i64Add($96 | 0, $98 | 0, 9, 0) | 0;
  $1784 = getTempRet0() | 0;
  $1785 = _i64Add($1783 | 0, $1784 | 0, $1747 | 0, $1748 | 0) | 0;
  $1786 = getTempRet0() | 0;
  $1787 = _i64Add($1769 | 0, $1770 | 0, $1771 | 0, $1772 | 0) | 0;
  $1788 = getTempRet0() | 0;
  $1789 = _bitshift64Shl($1771 | 0, $1772 | 0, 39) | 0;
  $1790 = getTempRet0() | 0;
  $1791 = _bitshift64Lshr($1771 | 0, $1772 | 0, 25) | 0;
  $1792 = getTempRet0() | 0;
  $1793 = $1789 | $1791;
  $1794 = $1790 | $1792;
  $1795 = $1793 ^ $1787;
  $1796 = $1794 ^ $1788;
  $1797 = _i64Add($1773 | 0, $1774 | 0, $1775 | 0, $1776 | 0) | 0;
  $1798 = getTempRet0() | 0;
  $1799 = _bitshift64Shl($1775 | 0, $1776 | 0, 30) | 0;
  $1800 = getTempRet0() | 0;
  $1801 = _bitshift64Lshr($1775 | 0, $1776 | 0, 34) | 0;
  $1802 = getTempRet0() | 0;
  $1803 = $1799 | $1801;
  $1804 = $1800 | $1802;
  $1805 = $1803 ^ $1797;
  $1806 = $1804 ^ $1798;
  $1807 = _i64Add($1777 | 0, $1778 | 0, $1779 | 0, $1780 | 0) | 0;
  $1808 = getTempRet0() | 0;
  $1809 = _bitshift64Shl($1779 | 0, $1780 | 0, 34) | 0;
  $1810 = getTempRet0() | 0;
  $1811 = _bitshift64Lshr($1779 | 0, $1780 | 0, 30) | 0;
  $1812 = getTempRet0() | 0;
  $1813 = $1809 | $1811;
  $1814 = $1810 | $1812;
  $1815 = $1813 ^ $1807;
  $1816 = $1814 ^ $1808;
  $1817 = _i64Add($1781 | 0, $1782 | 0, $1785 | 0, $1786 | 0) | 0;
  $1818 = getTempRet0() | 0;
  $1819 = _bitshift64Shl($1785 | 0, $1786 | 0, 24) | 0;
  $1820 = getTempRet0() | 0;
  $1821 = _bitshift64Lshr($1785 | 0, $1786 | 0, 40) | 0;
  $1822 = getTempRet0() | 0;
  $1823 = $1819 | $1821;
  $1824 = $1820 | $1822;
  $1825 = $1823 ^ $1817;
  $1826 = $1824 ^ $1818;
  $1827 = _i64Add($1795 | 0, $1796 | 0, $1797 | 0, $1798 | 0) | 0;
  $1828 = getTempRet0() | 0;
  $1829 = _bitshift64Shl($1795 | 0, $1796 | 0, 13) | 0;
  $1830 = getTempRet0() | 0;
  $1831 = _bitshift64Lshr($1795 | 0, $1796 | 0, 51) | 0;
  $1832 = getTempRet0() | 0;
  $1833 = $1829 | $1831;
  $1834 = $1830 | $1832;
  $1835 = $1833 ^ $1827;
  $1836 = $1834 ^ $1828;
  $1837 = _i64Add($1825 | 0, $1826 | 0, $1807 | 0, $1808 | 0) | 0;
  $1838 = getTempRet0() | 0;
  $1839 = _bitshift64Shl($1825 | 0, $1826 | 0, 50) | 0;
  $1840 = getTempRet0() | 0;
  $1841 = _bitshift64Lshr($1825 | 0, $1826 | 0, 14) | 0;
  $1842 = getTempRet0() | 0;
  $1843 = $1839 | $1841;
  $1844 = $1840 | $1842;
  $1845 = $1843 ^ $1837;
  $1846 = $1844 ^ $1838;
  $1847 = _i64Add($1815 | 0, $1816 | 0, $1817 | 0, $1818 | 0) | 0;
  $1848 = getTempRet0() | 0;
  $1849 = _bitshift64Shl($1815 | 0, $1816 | 0, 10) | 0;
  $1850 = getTempRet0() | 0;
  $1851 = _bitshift64Lshr($1815 | 0, $1816 | 0, 54) | 0;
  $1852 = getTempRet0() | 0;
  $1853 = $1849 | $1851;
  $1854 = $1850 | $1852;
  $1855 = $1853 ^ $1847;
  $1856 = $1854 ^ $1848;
  $1857 = _i64Add($1787 | 0, $1788 | 0, $1805 | 0, $1806 | 0) | 0;
  $1858 = getTempRet0() | 0;
  $1859 = _bitshift64Shl($1805 | 0, $1806 | 0, 17) | 0;
  $1860 = getTempRet0() | 0;
  $1861 = _bitshift64Lshr($1805 | 0, $1806 | 0, 47) | 0;
  $1862 = getTempRet0() | 0;
  $1863 = $1859 | $1861;
  $1864 = $1860 | $1862;
  $1865 = $1863 ^ $1857;
  $1866 = $1864 ^ $1858;
  $1867 = _i64Add($1837 | 0, $1838 | 0, $1835 | 0, $1836 | 0) | 0;
  $1868 = getTempRet0() | 0;
  $1869 = _bitshift64Shl($1835 | 0, $1836 | 0, 25) | 0;
  $1870 = getTempRet0() | 0;
  $1871 = _bitshift64Lshr($1835 | 0, $1836 | 0, 39) | 0;
  $1872 = getTempRet0() | 0;
  $1873 = $1869 | $1871;
  $1874 = $1870 | $1872;
  $1875 = $1873 ^ $1867;
  $1876 = $1874 ^ $1868;
  $1877 = _i64Add($1847 | 0, $1848 | 0, $1865 | 0, $1866 | 0) | 0;
  $1878 = getTempRet0() | 0;
  $1879 = _bitshift64Shl($1865 | 0, $1866 | 0, 29) | 0;
  $1880 = getTempRet0() | 0;
  $1881 = _bitshift64Lshr($1865 | 0, $1866 | 0, 35) | 0;
  $1882 = getTempRet0() | 0;
  $1883 = $1879 | $1881;
  $1884 = $1880 | $1882;
  $1885 = $1883 ^ $1877;
  $1886 = $1884 ^ $1878;
  $1887 = _i64Add($1855 | 0, $1856 | 0, $1857 | 0, $1858 | 0) | 0;
  $1888 = getTempRet0() | 0;
  $1889 = _bitshift64Shl($1855 | 0, $1856 | 0, 39) | 0;
  $1890 = getTempRet0() | 0;
  $1891 = _bitshift64Lshr($1855 | 0, $1856 | 0, 25) | 0;
  $1892 = getTempRet0() | 0;
  $1893 = $1889 | $1891;
  $1894 = $1890 | $1892;
  $1895 = $1893 ^ $1887;
  $1896 = $1894 ^ $1888;
  $1897 = _i64Add($1845 | 0, $1846 | 0, $1827 | 0, $1828 | 0) | 0;
  $1898 = getTempRet0() | 0;
  $1899 = _bitshift64Shl($1845 | 0, $1846 | 0, 43) | 0;
  $1900 = getTempRet0() | 0;
  $1901 = _bitshift64Lshr($1845 | 0, $1846 | 0, 21) | 0;
  $1902 = getTempRet0() | 0;
  $1903 = $1899 | $1901;
  $1904 = $1900 | $1902;
  $1905 = $1903 ^ $1897;
  $1906 = $1904 ^ $1898;
  $1907 = _i64Add($1875 | 0, $1876 | 0, $1877 | 0, $1878 | 0) | 0;
  $1908 = getTempRet0() | 0;
  $1909 = _bitshift64Shl($1875 | 0, $1876 | 0, 8) | 0;
  $1910 = getTempRet0() | 0;
  $1911 = _bitshift64Lshr($1875 | 0, $1876 | 0, 56) | 0;
  $1912 = getTempRet0() | 0;
  $1913 = $1909 | $1911;
  $1914 = $1910 | $1912;
  $1915 = $1913 ^ $1907;
  $1916 = $1914 ^ $1908;
  $1917 = _i64Add($1905 | 0, $1906 | 0, $1887 | 0, $1888 | 0) | 0;
  $1918 = getTempRet0() | 0;
  $1919 = _bitshift64Shl($1905 | 0, $1906 | 0, 35) | 0;
  $1920 = getTempRet0() | 0;
  $1921 = _bitshift64Lshr($1905 | 0, $1906 | 0, 29) | 0;
  $1922 = getTempRet0() | 0;
  $1923 = $1919 | $1921;
  $1924 = $1920 | $1922;
  $1925 = $1923 ^ $1917;
  $1926 = $1924 ^ $1918;
  $1927 = _i64Add($1895 | 0, $1896 | 0, $1897 | 0, $1898 | 0) | 0;
  $1928 = getTempRet0() | 0;
  $1929 = _bitshift64Shl($1895 | 0, $1896 | 0, 56) | 0;
  $1930 = getTempRet0() | 0;
  $1931 = _bitshift64Lshr($1895 | 0, $1896 | 0, 8) | 0;
  $1932 = getTempRet0() | 0;
  $1933 = $1929 | $1931;
  $1934 = $1930 | $1932;
  $1935 = $1933 ^ $1927;
  $1936 = $1934 ^ $1928;
  $1937 = _i64Add($1867 | 0, $1868 | 0, $1885 | 0, $1886 | 0) | 0;
  $1938 = getTempRet0() | 0;
  $1939 = _bitshift64Shl($1885 | 0, $1886 | 0, 22) | 0;
  $1940 = getTempRet0() | 0;
  $1941 = _bitshift64Lshr($1885 | 0, $1886 | 0, 42) | 0;
  $1942 = getTempRet0() | 0;
  $1943 = $1939 | $1941;
  $1944 = $1940 | $1942;
  $1945 = $1943 ^ $1937;
  $1946 = $1944 ^ $1938;
  $1947 = _i64Add($1917 | 0, $1918 | 0, $72 | 0, $74 | 0) | 0;
  $1948 = getTempRet0() | 0;
  $1949 = _i64Add($1915 | 0, $1916 | 0, $76 | 0, $78 | 0) | 0;
  $1950 = getTempRet0() | 0;
  $1951 = _i64Add($1927 | 0, $1928 | 0, $80 | 0, $82 | 0) | 0;
  $1952 = getTempRet0() | 0;
  $1953 = _i64Add($1945 | 0, $1946 | 0, $84 | 0, $86 | 0) | 0;
  $1954 = getTempRet0() | 0;
  $1955 = _i64Add($1937 | 0, $1938 | 0, $88 | 0, $90 | 0) | 0;
  $1956 = getTempRet0() | 0;
  $1957 = _i64Add($1935 | 0, $1936 | 0, $197 | 0, $198 | 0) | 0;
  $1958 = getTempRet0() | 0;
  $1959 = _i64Add($1907 | 0, $1908 | 0, $343 | 0, $344 | 0) | 0;
  $1960 = getTempRet0() | 0;
  $1961 = _i64Add($95 | 0, $97 | 0, 10, 0) | 0;
  $1962 = getTempRet0() | 0;
  $1963 = _i64Add($1961 | 0, $1962 | 0, $1925 | 0, $1926 | 0) | 0;
  $1964 = getTempRet0() | 0;
  $1965 = _i64Add($1947 | 0, $1948 | 0, $1949 | 0, $1950 | 0) | 0;
  $1966 = getTempRet0() | 0;
  $1967 = _bitshift64Shl($1949 | 0, $1950 | 0, 46) | 0;
  $1968 = getTempRet0() | 0;
  $1969 = _bitshift64Lshr($1949 | 0, $1950 | 0, 18) | 0;
  $1970 = getTempRet0() | 0;
  $1971 = $1967 | $1969;
  $1972 = $1968 | $1970;
  $1973 = $1971 ^ $1965;
  $1974 = $1972 ^ $1966;
  $1975 = _i64Add($1951 | 0, $1952 | 0, $1953 | 0, $1954 | 0) | 0;
  $1976 = getTempRet0() | 0;
  $1977 = _bitshift64Shl($1953 | 0, $1954 | 0, 36) | 0;
  $1978 = getTempRet0() | 0;
  $1979 = _bitshift64Lshr($1953 | 0, $1954 | 0, 28) | 0;
  $1980 = getTempRet0() | 0;
  $1981 = $1977 | $1979;
  $1982 = $1978 | $1980;
  $1983 = $1981 ^ $1975;
  $1984 = $1982 ^ $1976;
  $1985 = _i64Add($1955 | 0, $1956 | 0, $1957 | 0, $1958 | 0) | 0;
  $1986 = getTempRet0() | 0;
  $1987 = _bitshift64Shl($1957 | 0, $1958 | 0, 19) | 0;
  $1988 = getTempRet0() | 0;
  $1989 = _bitshift64Lshr($1957 | 0, $1958 | 0, 45) | 0;
  $1990 = getTempRet0() | 0;
  $1991 = $1987 | $1989;
  $1992 = $1988 | $1990;
  $1993 = $1991 ^ $1985;
  $1994 = $1992 ^ $1986;
  $1995 = _i64Add($1959 | 0, $1960 | 0, $1963 | 0, $1964 | 0) | 0;
  $1996 = getTempRet0() | 0;
  $1997 = _bitshift64Shl($1963 | 0, $1964 | 0, 37) | 0;
  $1998 = getTempRet0() | 0;
  $1999 = _bitshift64Lshr($1963 | 0, $1964 | 0, 27) | 0;
  $2000 = getTempRet0() | 0;
  $2001 = $1997 | $1999;
  $2002 = $1998 | $2000;
  $2003 = $2001 ^ $1995;
  $2004 = $2002 ^ $1996;
  $2005 = _i64Add($1973 | 0, $1974 | 0, $1975 | 0, $1976 | 0) | 0;
  $2006 = getTempRet0() | 0;
  $2007 = _bitshift64Shl($1973 | 0, $1974 | 0, 33) | 0;
  $2008 = getTempRet0() | 0;
  $2009 = _bitshift64Lshr($1973 | 0, $1974 | 0, 31) | 0;
  $2010 = getTempRet0() | 0;
  $2011 = $2007 | $2009;
  $2012 = $2008 | $2010;
  $2013 = $2011 ^ $2005;
  $2014 = $2012 ^ $2006;
  $2015 = _i64Add($2003 | 0, $2004 | 0, $1985 | 0, $1986 | 0) | 0;
  $2016 = getTempRet0() | 0;
  $2017 = _bitshift64Shl($2003 | 0, $2004 | 0, 27) | 0;
  $2018 = getTempRet0() | 0;
  $2019 = _bitshift64Lshr($2003 | 0, $2004 | 0, 37) | 0;
  $2020 = getTempRet0() | 0;
  $2021 = $2017 | $2019;
  $2022 = $2018 | $2020;
  $2023 = $2021 ^ $2015;
  $2024 = $2022 ^ $2016;
  $2025 = _i64Add($1993 | 0, $1994 | 0, $1995 | 0, $1996 | 0) | 0;
  $2026 = getTempRet0() | 0;
  $2027 = _bitshift64Shl($1993 | 0, $1994 | 0, 14) | 0;
  $2028 = getTempRet0() | 0;
  $2029 = _bitshift64Lshr($1993 | 0, $1994 | 0, 50) | 0;
  $2030 = getTempRet0() | 0;
  $2031 = $2027 | $2029;
  $2032 = $2028 | $2030;
  $2033 = $2031 ^ $2025;
  $2034 = $2032 ^ $2026;
  $2035 = _i64Add($1965 | 0, $1966 | 0, $1983 | 0, $1984 | 0) | 0;
  $2036 = getTempRet0() | 0;
  $2037 = _bitshift64Shl($1983 | 0, $1984 | 0, 42) | 0;
  $2038 = getTempRet0() | 0;
  $2039 = _bitshift64Lshr($1983 | 0, $1984 | 0, 22) | 0;
  $2040 = getTempRet0() | 0;
  $2041 = $2037 | $2039;
  $2042 = $2038 | $2040;
  $2043 = $2041 ^ $2035;
  $2044 = $2042 ^ $2036;
  $2045 = _i64Add($2015 | 0, $2016 | 0, $2013 | 0, $2014 | 0) | 0;
  $2046 = getTempRet0() | 0;
  $2047 = _bitshift64Shl($2013 | 0, $2014 | 0, 17) | 0;
  $2048 = getTempRet0() | 0;
  $2049 = _bitshift64Lshr($2013 | 0, $2014 | 0, 47) | 0;
  $2050 = getTempRet0() | 0;
  $2051 = $2047 | $2049;
  $2052 = $2048 | $2050;
  $2053 = $2051 ^ $2045;
  $2054 = $2052 ^ $2046;
  $2055 = _i64Add($2025 | 0, $2026 | 0, $2043 | 0, $2044 | 0) | 0;
  $2056 = getTempRet0() | 0;
  $2057 = _bitshift64Shl($2043 | 0, $2044 | 0, 49) | 0;
  $2058 = getTempRet0() | 0;
  $2059 = _bitshift64Lshr($2043 | 0, $2044 | 0, 15) | 0;
  $2060 = getTempRet0() | 0;
  $2061 = $2057 | $2059;
  $2062 = $2058 | $2060;
  $2063 = $2061 ^ $2055;
  $2064 = $2062 ^ $2056;
  $2065 = _i64Add($2033 | 0, $2034 | 0, $2035 | 0, $2036 | 0) | 0;
  $2066 = getTempRet0() | 0;
  $2067 = _bitshift64Shl($2033 | 0, $2034 | 0, 36) | 0;
  $2068 = getTempRet0() | 0;
  $2069 = _bitshift64Lshr($2033 | 0, $2034 | 0, 28) | 0;
  $2070 = getTempRet0() | 0;
  $2071 = $2067 | $2069;
  $2072 = $2068 | $2070;
  $2073 = $2071 ^ $2065;
  $2074 = $2072 ^ $2066;
  $2075 = _i64Add($2023 | 0, $2024 | 0, $2005 | 0, $2006 | 0) | 0;
  $2076 = getTempRet0() | 0;
  $2077 = _bitshift64Shl($2023 | 0, $2024 | 0, 39) | 0;
  $2078 = getTempRet0() | 0;
  $2079 = _bitshift64Lshr($2023 | 0, $2024 | 0, 25) | 0;
  $2080 = getTempRet0() | 0;
  $2081 = $2077 | $2079;
  $2082 = $2078 | $2080;
  $2083 = $2081 ^ $2075;
  $2084 = $2082 ^ $2076;
  $2085 = _i64Add($2053 | 0, $2054 | 0, $2055 | 0, $2056 | 0) | 0;
  $2086 = getTempRet0() | 0;
  $2087 = _bitshift64Shl($2053 | 0, $2054 | 0, 44) | 0;
  $2088 = getTempRet0() | 0;
  $2089 = _bitshift64Lshr($2053 | 0, $2054 | 0, 20) | 0;
  $2090 = getTempRet0() | 0;
  $2091 = $2087 | $2089;
  $2092 = $2088 | $2090;
  $2093 = $2091 ^ $2085;
  $2094 = $2092 ^ $2086;
  $2095 = _i64Add($2083 | 0, $2084 | 0, $2065 | 0, $2066 | 0) | 0;
  $2096 = getTempRet0() | 0;
  $2097 = _bitshift64Shl($2083 | 0, $2084 | 0, 9) | 0;
  $2098 = getTempRet0() | 0;
  $2099 = _bitshift64Lshr($2083 | 0, $2084 | 0, 55) | 0;
  $2100 = getTempRet0() | 0;
  $2101 = $2097 | $2099;
  $2102 = $2098 | $2100;
  $2103 = $2101 ^ $2095;
  $2104 = $2102 ^ $2096;
  $2105 = _i64Add($2073 | 0, $2074 | 0, $2075 | 0, $2076 | 0) | 0;
  $2106 = getTempRet0() | 0;
  $2107 = _bitshift64Shl($2073 | 0, $2074 | 0, 54) | 0;
  $2108 = getTempRet0() | 0;
  $2109 = _bitshift64Lshr($2073 | 0, $2074 | 0, 10) | 0;
  $2110 = getTempRet0() | 0;
  $2111 = $2107 | $2109;
  $2112 = $2108 | $2110;
  $2113 = $2111 ^ $2105;
  $2114 = $2112 ^ $2106;
  $2115 = _i64Add($2045 | 0, $2046 | 0, $2063 | 0, $2064 | 0) | 0;
  $2116 = getTempRet0() | 0;
  $2117 = _bitshift64Shl($2063 | 0, $2064 | 0, 56) | 0;
  $2118 = getTempRet0() | 0;
  $2119 = _bitshift64Lshr($2063 | 0, $2064 | 0, 8) | 0;
  $2120 = getTempRet0() | 0;
  $2121 = $2117 | $2119;
  $2122 = $2118 | $2120;
  $2123 = $2121 ^ $2115;
  $2124 = $2122 ^ $2116;
  $2125 = _i64Add($2095 | 0, $2096 | 0, $76 | 0, $78 | 0) | 0;
  $2126 = getTempRet0() | 0;
  $2127 = _i64Add($2093 | 0, $2094 | 0, $80 | 0, $82 | 0) | 0;
  $2128 = getTempRet0() | 0;
  $2129 = _i64Add($2105 | 0, $2106 | 0, $84 | 0, $86 | 0) | 0;
  $2130 = getTempRet0() | 0;
  $2131 = _i64Add($2123 | 0, $2124 | 0, $88 | 0, $90 | 0) | 0;
  $2132 = getTempRet0() | 0;
  $2133 = _i64Add($2115 | 0, $2116 | 0, $92 | 0, $94 | 0) | 0;
  $2134 = getTempRet0() | 0;
  $2135 = _i64Add($2113 | 0, $2114 | 0, $343 | 0, $344 | 0) | 0;
  $2136 = getTempRet0() | 0;
  $2137 = _i64Add($2085 | 0, $2086 | 0, $523 | 0, $524 | 0) | 0;
  $2138 = getTempRet0() | 0;
  $2139 = _i64Add($68 | 0, $70 | 0, 11, 0) | 0;
  $2140 = getTempRet0() | 0;
  $2141 = _i64Add($2139 | 0, $2140 | 0, $2103 | 0, $2104 | 0) | 0;
  $2142 = getTempRet0() | 0;
  $2143 = _i64Add($2125 | 0, $2126 | 0, $2127 | 0, $2128 | 0) | 0;
  $2144 = getTempRet0() | 0;
  $2145 = _bitshift64Shl($2127 | 0, $2128 | 0, 39) | 0;
  $2146 = getTempRet0() | 0;
  $2147 = _bitshift64Lshr($2127 | 0, $2128 | 0, 25) | 0;
  $2148 = getTempRet0() | 0;
  $2149 = $2145 | $2147;
  $2150 = $2146 | $2148;
  $2151 = $2149 ^ $2143;
  $2152 = $2150 ^ $2144;
  $2153 = _i64Add($2129 | 0, $2130 | 0, $2131 | 0, $2132 | 0) | 0;
  $2154 = getTempRet0() | 0;
  $2155 = _bitshift64Shl($2131 | 0, $2132 | 0, 30) | 0;
  $2156 = getTempRet0() | 0;
  $2157 = _bitshift64Lshr($2131 | 0, $2132 | 0, 34) | 0;
  $2158 = getTempRet0() | 0;
  $2159 = $2155 | $2157;
  $2160 = $2156 | $2158;
  $2161 = $2159 ^ $2153;
  $2162 = $2160 ^ $2154;
  $2163 = _i64Add($2133 | 0, $2134 | 0, $2135 | 0, $2136 | 0) | 0;
  $2164 = getTempRet0() | 0;
  $2165 = _bitshift64Shl($2135 | 0, $2136 | 0, 34) | 0;
  $2166 = getTempRet0() | 0;
  $2167 = _bitshift64Lshr($2135 | 0, $2136 | 0, 30) | 0;
  $2168 = getTempRet0() | 0;
  $2169 = $2165 | $2167;
  $2170 = $2166 | $2168;
  $2171 = $2169 ^ $2163;
  $2172 = $2170 ^ $2164;
  $2173 = _i64Add($2137 | 0, $2138 | 0, $2141 | 0, $2142 | 0) | 0;
  $2174 = getTempRet0() | 0;
  $2175 = _bitshift64Shl($2141 | 0, $2142 | 0, 24) | 0;
  $2176 = getTempRet0() | 0;
  $2177 = _bitshift64Lshr($2141 | 0, $2142 | 0, 40) | 0;
  $2178 = getTempRet0() | 0;
  $2179 = $2175 | $2177;
  $2180 = $2176 | $2178;
  $2181 = $2179 ^ $2173;
  $2182 = $2180 ^ $2174;
  $2183 = _i64Add($2151 | 0, $2152 | 0, $2153 | 0, $2154 | 0) | 0;
  $2184 = getTempRet0() | 0;
  $2185 = _bitshift64Shl($2151 | 0, $2152 | 0, 13) | 0;
  $2186 = getTempRet0() | 0;
  $2187 = _bitshift64Lshr($2151 | 0, $2152 | 0, 51) | 0;
  $2188 = getTempRet0() | 0;
  $2189 = $2185 | $2187;
  $2190 = $2186 | $2188;
  $2191 = $2189 ^ $2183;
  $2192 = $2190 ^ $2184;
  $2193 = _i64Add($2181 | 0, $2182 | 0, $2163 | 0, $2164 | 0) | 0;
  $2194 = getTempRet0() | 0;
  $2195 = _bitshift64Shl($2181 | 0, $2182 | 0, 50) | 0;
  $2196 = getTempRet0() | 0;
  $2197 = _bitshift64Lshr($2181 | 0, $2182 | 0, 14) | 0;
  $2198 = getTempRet0() | 0;
  $2199 = $2195 | $2197;
  $2200 = $2196 | $2198;
  $2201 = $2199 ^ $2193;
  $2202 = $2200 ^ $2194;
  $2203 = _i64Add($2171 | 0, $2172 | 0, $2173 | 0, $2174 | 0) | 0;
  $2204 = getTempRet0() | 0;
  $2205 = _bitshift64Shl($2171 | 0, $2172 | 0, 10) | 0;
  $2206 = getTempRet0() | 0;
  $2207 = _bitshift64Lshr($2171 | 0, $2172 | 0, 54) | 0;
  $2208 = getTempRet0() | 0;
  $2209 = $2205 | $2207;
  $2210 = $2206 | $2208;
  $2211 = $2209 ^ $2203;
  $2212 = $2210 ^ $2204;
  $2213 = _i64Add($2143 | 0, $2144 | 0, $2161 | 0, $2162 | 0) | 0;
  $2214 = getTempRet0() | 0;
  $2215 = _bitshift64Shl($2161 | 0, $2162 | 0, 17) | 0;
  $2216 = getTempRet0() | 0;
  $2217 = _bitshift64Lshr($2161 | 0, $2162 | 0, 47) | 0;
  $2218 = getTempRet0() | 0;
  $2219 = $2215 | $2217;
  $2220 = $2216 | $2218;
  $2221 = $2219 ^ $2213;
  $2222 = $2220 ^ $2214;
  $2223 = _i64Add($2193 | 0, $2194 | 0, $2191 | 0, $2192 | 0) | 0;
  $2224 = getTempRet0() | 0;
  $2225 = _bitshift64Shl($2191 | 0, $2192 | 0, 25) | 0;
  $2226 = getTempRet0() | 0;
  $2227 = _bitshift64Lshr($2191 | 0, $2192 | 0, 39) | 0;
  $2228 = getTempRet0() | 0;
  $2229 = $2225 | $2227;
  $2230 = $2226 | $2228;
  $2231 = $2229 ^ $2223;
  $2232 = $2230 ^ $2224;
  $2233 = _i64Add($2203 | 0, $2204 | 0, $2221 | 0, $2222 | 0) | 0;
  $2234 = getTempRet0() | 0;
  $2235 = _bitshift64Shl($2221 | 0, $2222 | 0, 29) | 0;
  $2236 = getTempRet0() | 0;
  $2237 = _bitshift64Lshr($2221 | 0, $2222 | 0, 35) | 0;
  $2238 = getTempRet0() | 0;
  $2239 = $2235 | $2237;
  $2240 = $2236 | $2238;
  $2241 = $2239 ^ $2233;
  $2242 = $2240 ^ $2234;
  $2243 = _i64Add($2211 | 0, $2212 | 0, $2213 | 0, $2214 | 0) | 0;
  $2244 = getTempRet0() | 0;
  $2245 = _bitshift64Shl($2211 | 0, $2212 | 0, 39) | 0;
  $2246 = getTempRet0() | 0;
  $2247 = _bitshift64Lshr($2211 | 0, $2212 | 0, 25) | 0;
  $2248 = getTempRet0() | 0;
  $2249 = $2245 | $2247;
  $2250 = $2246 | $2248;
  $2251 = $2249 ^ $2243;
  $2252 = $2250 ^ $2244;
  $2253 = _i64Add($2201 | 0, $2202 | 0, $2183 | 0, $2184 | 0) | 0;
  $2254 = getTempRet0() | 0;
  $2255 = _bitshift64Shl($2201 | 0, $2202 | 0, 43) | 0;
  $2256 = getTempRet0() | 0;
  $2257 = _bitshift64Lshr($2201 | 0, $2202 | 0, 21) | 0;
  $2258 = getTempRet0() | 0;
  $2259 = $2255 | $2257;
  $2260 = $2256 | $2258;
  $2261 = $2259 ^ $2253;
  $2262 = $2260 ^ $2254;
  $2263 = _i64Add($2231 | 0, $2232 | 0, $2233 | 0, $2234 | 0) | 0;
  $2264 = getTempRet0() | 0;
  $2265 = _bitshift64Shl($2231 | 0, $2232 | 0, 8) | 0;
  $2266 = getTempRet0() | 0;
  $2267 = _bitshift64Lshr($2231 | 0, $2232 | 0, 56) | 0;
  $2268 = getTempRet0() | 0;
  $2269 = $2265 | $2267;
  $2270 = $2266 | $2268;
  $2271 = $2269 ^ $2263;
  $2272 = $2270 ^ $2264;
  $2273 = _i64Add($2261 | 0, $2262 | 0, $2243 | 0, $2244 | 0) | 0;
  $2274 = getTempRet0() | 0;
  $2275 = _bitshift64Shl($2261 | 0, $2262 | 0, 35) | 0;
  $2276 = getTempRet0() | 0;
  $2277 = _bitshift64Lshr($2261 | 0, $2262 | 0, 29) | 0;
  $2278 = getTempRet0() | 0;
  $2279 = $2275 | $2277;
  $2280 = $2276 | $2278;
  $2281 = $2279 ^ $2273;
  $2282 = $2280 ^ $2274;
  $2283 = _i64Add($2251 | 0, $2252 | 0, $2253 | 0, $2254 | 0) | 0;
  $2284 = getTempRet0() | 0;
  $2285 = _bitshift64Shl($2251 | 0, $2252 | 0, 56) | 0;
  $2286 = getTempRet0() | 0;
  $2287 = _bitshift64Lshr($2251 | 0, $2252 | 0, 8) | 0;
  $2288 = getTempRet0() | 0;
  $2289 = $2285 | $2287;
  $2290 = $2286 | $2288;
  $2291 = $2289 ^ $2283;
  $2292 = $2290 ^ $2284;
  $2293 = _i64Add($2223 | 0, $2224 | 0, $2241 | 0, $2242 | 0) | 0;
  $2294 = getTempRet0() | 0;
  $2295 = _bitshift64Shl($2241 | 0, $2242 | 0, 22) | 0;
  $2296 = getTempRet0() | 0;
  $2297 = _bitshift64Lshr($2241 | 0, $2242 | 0, 42) | 0;
  $2298 = getTempRet0() | 0;
  $2299 = $2295 | $2297;
  $2300 = $2296 | $2298;
  $2301 = $2299 ^ $2293;
  $2302 = $2300 ^ $2294;
  $2303 = _i64Add($2273 | 0, $2274 | 0, $80 | 0, $82 | 0) | 0;
  $2304 = getTempRet0() | 0;
  $2305 = _i64Add($2271 | 0, $2272 | 0, $84 | 0, $86 | 0) | 0;
  $2306 = getTempRet0() | 0;
  $2307 = _i64Add($2283 | 0, $2284 | 0, $88 | 0, $90 | 0) | 0;
  $2308 = getTempRet0() | 0;
  $2309 = _i64Add($2301 | 0, $2302 | 0, $92 | 0, $94 | 0) | 0;
  $2310 = getTempRet0() | 0;
  $2311 = _i64Add($2293 | 0, $2294 | 0, $96 | 0, $98 | 0) | 0;
  $2312 = getTempRet0() | 0;
  $2313 = _i64Add($2291 | 0, $2292 | 0, $523 | 0, $524 | 0) | 0;
  $2314 = getTempRet0() | 0;
  $2315 = _i64Add($2263 | 0, $2264 | 0, $703 | 0, $704 | 0) | 0;
  $2316 = getTempRet0() | 0;
  $2317 = _i64Add($72 | 0, $74 | 0, 12, 0) | 0;
  $2318 = getTempRet0() | 0;
  $2319 = _i64Add($2317 | 0, $2318 | 0, $2281 | 0, $2282 | 0) | 0;
  $2320 = getTempRet0() | 0;
  $2321 = _i64Add($2303 | 0, $2304 | 0, $2305 | 0, $2306 | 0) | 0;
  $2322 = getTempRet0() | 0;
  $2323 = _bitshift64Shl($2305 | 0, $2306 | 0, 46) | 0;
  $2324 = getTempRet0() | 0;
  $2325 = _bitshift64Lshr($2305 | 0, $2306 | 0, 18) | 0;
  $2326 = getTempRet0() | 0;
  $2327 = $2323 | $2325;
  $2328 = $2324 | $2326;
  $2329 = $2327 ^ $2321;
  $2330 = $2328 ^ $2322;
  $2331 = _i64Add($2307 | 0, $2308 | 0, $2309 | 0, $2310 | 0) | 0;
  $2332 = getTempRet0() | 0;
  $2333 = _bitshift64Shl($2309 | 0, $2310 | 0, 36) | 0;
  $2334 = getTempRet0() | 0;
  $2335 = _bitshift64Lshr($2309 | 0, $2310 | 0, 28) | 0;
  $2336 = getTempRet0() | 0;
  $2337 = $2333 | $2335;
  $2338 = $2334 | $2336;
  $2339 = $2337 ^ $2331;
  $2340 = $2338 ^ $2332;
  $2341 = _i64Add($2311 | 0, $2312 | 0, $2313 | 0, $2314 | 0) | 0;
  $2342 = getTempRet0() | 0;
  $2343 = _bitshift64Shl($2313 | 0, $2314 | 0, 19) | 0;
  $2344 = getTempRet0() | 0;
  $2345 = _bitshift64Lshr($2313 | 0, $2314 | 0, 45) | 0;
  $2346 = getTempRet0() | 0;
  $2347 = $2343 | $2345;
  $2348 = $2344 | $2346;
  $2349 = $2347 ^ $2341;
  $2350 = $2348 ^ $2342;
  $2351 = _i64Add($2315 | 0, $2316 | 0, $2319 | 0, $2320 | 0) | 0;
  $2352 = getTempRet0() | 0;
  $2353 = _bitshift64Shl($2319 | 0, $2320 | 0, 37) | 0;
  $2354 = getTempRet0() | 0;
  $2355 = _bitshift64Lshr($2319 | 0, $2320 | 0, 27) | 0;
  $2356 = getTempRet0() | 0;
  $2357 = $2353 | $2355;
  $2358 = $2354 | $2356;
  $2359 = $2357 ^ $2351;
  $2360 = $2358 ^ $2352;
  $2361 = _i64Add($2329 | 0, $2330 | 0, $2331 | 0, $2332 | 0) | 0;
  $2362 = getTempRet0() | 0;
  $2363 = _bitshift64Shl($2329 | 0, $2330 | 0, 33) | 0;
  $2364 = getTempRet0() | 0;
  $2365 = _bitshift64Lshr($2329 | 0, $2330 | 0, 31) | 0;
  $2366 = getTempRet0() | 0;
  $2367 = $2363 | $2365;
  $2368 = $2364 | $2366;
  $2369 = $2367 ^ $2361;
  $2370 = $2368 ^ $2362;
  $2371 = _i64Add($2359 | 0, $2360 | 0, $2341 | 0, $2342 | 0) | 0;
  $2372 = getTempRet0() | 0;
  $2373 = _bitshift64Shl($2359 | 0, $2360 | 0, 27) | 0;
  $2374 = getTempRet0() | 0;
  $2375 = _bitshift64Lshr($2359 | 0, $2360 | 0, 37) | 0;
  $2376 = getTempRet0() | 0;
  $2377 = $2373 | $2375;
  $2378 = $2374 | $2376;
  $2379 = $2377 ^ $2371;
  $2380 = $2378 ^ $2372;
  $2381 = _i64Add($2349 | 0, $2350 | 0, $2351 | 0, $2352 | 0) | 0;
  $2382 = getTempRet0() | 0;
  $2383 = _bitshift64Shl($2349 | 0, $2350 | 0, 14) | 0;
  $2384 = getTempRet0() | 0;
  $2385 = _bitshift64Lshr($2349 | 0, $2350 | 0, 50) | 0;
  $2386 = getTempRet0() | 0;
  $2387 = $2383 | $2385;
  $2388 = $2384 | $2386;
  $2389 = $2387 ^ $2381;
  $2390 = $2388 ^ $2382;
  $2391 = _i64Add($2321 | 0, $2322 | 0, $2339 | 0, $2340 | 0) | 0;
  $2392 = getTempRet0() | 0;
  $2393 = _bitshift64Shl($2339 | 0, $2340 | 0, 42) | 0;
  $2394 = getTempRet0() | 0;
  $2395 = _bitshift64Lshr($2339 | 0, $2340 | 0, 22) | 0;
  $2396 = getTempRet0() | 0;
  $2397 = $2393 | $2395;
  $2398 = $2394 | $2396;
  $2399 = $2397 ^ $2391;
  $2400 = $2398 ^ $2392;
  $2401 = _i64Add($2371 | 0, $2372 | 0, $2369 | 0, $2370 | 0) | 0;
  $2402 = getTempRet0() | 0;
  $2403 = _bitshift64Shl($2369 | 0, $2370 | 0, 17) | 0;
  $2404 = getTempRet0() | 0;
  $2405 = _bitshift64Lshr($2369 | 0, $2370 | 0, 47) | 0;
  $2406 = getTempRet0() | 0;
  $2407 = $2403 | $2405;
  $2408 = $2404 | $2406;
  $2409 = $2407 ^ $2401;
  $2410 = $2408 ^ $2402;
  $2411 = _i64Add($2381 | 0, $2382 | 0, $2399 | 0, $2400 | 0) | 0;
  $2412 = getTempRet0() | 0;
  $2413 = _bitshift64Shl($2399 | 0, $2400 | 0, 49) | 0;
  $2414 = getTempRet0() | 0;
  $2415 = _bitshift64Lshr($2399 | 0, $2400 | 0, 15) | 0;
  $2416 = getTempRet0() | 0;
  $2417 = $2413 | $2415;
  $2418 = $2414 | $2416;
  $2419 = $2417 ^ $2411;
  $2420 = $2418 ^ $2412;
  $2421 = _i64Add($2389 | 0, $2390 | 0, $2391 | 0, $2392 | 0) | 0;
  $2422 = getTempRet0() | 0;
  $2423 = _bitshift64Shl($2389 | 0, $2390 | 0, 36) | 0;
  $2424 = getTempRet0() | 0;
  $2425 = _bitshift64Lshr($2389 | 0, $2390 | 0, 28) | 0;
  $2426 = getTempRet0() | 0;
  $2427 = $2423 | $2425;
  $2428 = $2424 | $2426;
  $2429 = $2427 ^ $2421;
  $2430 = $2428 ^ $2422;
  $2431 = _i64Add($2379 | 0, $2380 | 0, $2361 | 0, $2362 | 0) | 0;
  $2432 = getTempRet0() | 0;
  $2433 = _bitshift64Shl($2379 | 0, $2380 | 0, 39) | 0;
  $2434 = getTempRet0() | 0;
  $2435 = _bitshift64Lshr($2379 | 0, $2380 | 0, 25) | 0;
  $2436 = getTempRet0() | 0;
  $2437 = $2433 | $2435;
  $2438 = $2434 | $2436;
  $2439 = $2437 ^ $2431;
  $2440 = $2438 ^ $2432;
  $2441 = _i64Add($2409 | 0, $2410 | 0, $2411 | 0, $2412 | 0) | 0;
  $2442 = getTempRet0() | 0;
  $2443 = _bitshift64Shl($2409 | 0, $2410 | 0, 44) | 0;
  $2444 = getTempRet0() | 0;
  $2445 = _bitshift64Lshr($2409 | 0, $2410 | 0, 20) | 0;
  $2446 = getTempRet0() | 0;
  $2447 = $2443 | $2445;
  $2448 = $2444 | $2446;
  $2449 = $2447 ^ $2441;
  $2450 = $2448 ^ $2442;
  $2451 = _i64Add($2439 | 0, $2440 | 0, $2421 | 0, $2422 | 0) | 0;
  $2452 = getTempRet0() | 0;
  $2453 = _bitshift64Shl($2439 | 0, $2440 | 0, 9) | 0;
  $2454 = getTempRet0() | 0;
  $2455 = _bitshift64Lshr($2439 | 0, $2440 | 0, 55) | 0;
  $2456 = getTempRet0() | 0;
  $2457 = $2453 | $2455;
  $2458 = $2454 | $2456;
  $2459 = $2457 ^ $2451;
  $2460 = $2458 ^ $2452;
  $2461 = _i64Add($2429 | 0, $2430 | 0, $2431 | 0, $2432 | 0) | 0;
  $2462 = getTempRet0() | 0;
  $2463 = _bitshift64Shl($2429 | 0, $2430 | 0, 54) | 0;
  $2464 = getTempRet0() | 0;
  $2465 = _bitshift64Lshr($2429 | 0, $2430 | 0, 10) | 0;
  $2466 = getTempRet0() | 0;
  $2467 = $2463 | $2465;
  $2468 = $2464 | $2466;
  $2469 = $2467 ^ $2461;
  $2470 = $2468 ^ $2462;
  $2471 = _i64Add($2401 | 0, $2402 | 0, $2419 | 0, $2420 | 0) | 0;
  $2472 = getTempRet0() | 0;
  $2473 = _bitshift64Shl($2419 | 0, $2420 | 0, 56) | 0;
  $2474 = getTempRet0() | 0;
  $2475 = _bitshift64Lshr($2419 | 0, $2420 | 0, 8) | 0;
  $2476 = getTempRet0() | 0;
  $2477 = $2473 | $2475;
  $2478 = $2474 | $2476;
  $2479 = $2477 ^ $2471;
  $2480 = $2478 ^ $2472;
  $2481 = _i64Add($2451 | 0, $2452 | 0, $84 | 0, $86 | 0) | 0;
  $2482 = getTempRet0() | 0;
  $2483 = _i64Add($2449 | 0, $2450 | 0, $88 | 0, $90 | 0) | 0;
  $2484 = getTempRet0() | 0;
  $2485 = _i64Add($2461 | 0, $2462 | 0, $92 | 0, $94 | 0) | 0;
  $2486 = getTempRet0() | 0;
  $2487 = _i64Add($2479 | 0, $2480 | 0, $96 | 0, $98 | 0) | 0;
  $2488 = getTempRet0() | 0;
  $2489 = _i64Add($2471 | 0, $2472 | 0, $95 | 0, $97 | 0) | 0;
  $2490 = getTempRet0() | 0;
  $2491 = _i64Add($2469 | 0, $2470 | 0, $703 | 0, $704 | 0) | 0;
  $2492 = getTempRet0() | 0;
  $2493 = _i64Add($2441 | 0, $2442 | 0, $883 | 0, $884 | 0) | 0;
  $2494 = getTempRet0() | 0;
  $2495 = _i64Add($76 | 0, $78 | 0, 13, 0) | 0;
  $2496 = getTempRet0() | 0;
  $2497 = _i64Add($2495 | 0, $2496 | 0, $2459 | 0, $2460 | 0) | 0;
  $2498 = getTempRet0() | 0;
  $2499 = _i64Add($2481 | 0, $2482 | 0, $2483 | 0, $2484 | 0) | 0;
  $2500 = getTempRet0() | 0;
  $2501 = _bitshift64Shl($2483 | 0, $2484 | 0, 39) | 0;
  $2502 = getTempRet0() | 0;
  $2503 = _bitshift64Lshr($2483 | 0, $2484 | 0, 25) | 0;
  $2504 = getTempRet0() | 0;
  $2505 = $2501 | $2503;
  $2506 = $2502 | $2504;
  $2507 = $2505 ^ $2499;
  $2508 = $2506 ^ $2500;
  $2509 = _i64Add($2485 | 0, $2486 | 0, $2487 | 0, $2488 | 0) | 0;
  $2510 = getTempRet0() | 0;
  $2511 = _bitshift64Shl($2487 | 0, $2488 | 0, 30) | 0;
  $2512 = getTempRet0() | 0;
  $2513 = _bitshift64Lshr($2487 | 0, $2488 | 0, 34) | 0;
  $2514 = getTempRet0() | 0;
  $2515 = $2511 | $2513;
  $2516 = $2512 | $2514;
  $2517 = $2515 ^ $2509;
  $2518 = $2516 ^ $2510;
  $2519 = _i64Add($2489 | 0, $2490 | 0, $2491 | 0, $2492 | 0) | 0;
  $2520 = getTempRet0() | 0;
  $2521 = _bitshift64Shl($2491 | 0, $2492 | 0, 34) | 0;
  $2522 = getTempRet0() | 0;
  $2523 = _bitshift64Lshr($2491 | 0, $2492 | 0, 30) | 0;
  $2524 = getTempRet0() | 0;
  $2525 = $2521 | $2523;
  $2526 = $2522 | $2524;
  $2527 = $2525 ^ $2519;
  $2528 = $2526 ^ $2520;
  $2529 = _i64Add($2493 | 0, $2494 | 0, $2497 | 0, $2498 | 0) | 0;
  $2530 = getTempRet0() | 0;
  $2531 = _bitshift64Shl($2497 | 0, $2498 | 0, 24) | 0;
  $2532 = getTempRet0() | 0;
  $2533 = _bitshift64Lshr($2497 | 0, $2498 | 0, 40) | 0;
  $2534 = getTempRet0() | 0;
  $2535 = $2531 | $2533;
  $2536 = $2532 | $2534;
  $2537 = $2535 ^ $2529;
  $2538 = $2536 ^ $2530;
  $2539 = _i64Add($2507 | 0, $2508 | 0, $2509 | 0, $2510 | 0) | 0;
  $2540 = getTempRet0() | 0;
  $2541 = _bitshift64Shl($2507 | 0, $2508 | 0, 13) | 0;
  $2542 = getTempRet0() | 0;
  $2543 = _bitshift64Lshr($2507 | 0, $2508 | 0, 51) | 0;
  $2544 = getTempRet0() | 0;
  $2545 = $2541 | $2543;
  $2546 = $2542 | $2544;
  $2547 = $2545 ^ $2539;
  $2548 = $2546 ^ $2540;
  $2549 = _i64Add($2537 | 0, $2538 | 0, $2519 | 0, $2520 | 0) | 0;
  $2550 = getTempRet0() | 0;
  $2551 = _bitshift64Shl($2537 | 0, $2538 | 0, 50) | 0;
  $2552 = getTempRet0() | 0;
  $2553 = _bitshift64Lshr($2537 | 0, $2538 | 0, 14) | 0;
  $2554 = getTempRet0() | 0;
  $2555 = $2551 | $2553;
  $2556 = $2552 | $2554;
  $2557 = $2555 ^ $2549;
  $2558 = $2556 ^ $2550;
  $2559 = _i64Add($2527 | 0, $2528 | 0, $2529 | 0, $2530 | 0) | 0;
  $2560 = getTempRet0() | 0;
  $2561 = _bitshift64Shl($2527 | 0, $2528 | 0, 10) | 0;
  $2562 = getTempRet0() | 0;
  $2563 = _bitshift64Lshr($2527 | 0, $2528 | 0, 54) | 0;
  $2564 = getTempRet0() | 0;
  $2565 = $2561 | $2563;
  $2566 = $2562 | $2564;
  $2567 = $2565 ^ $2559;
  $2568 = $2566 ^ $2560;
  $2569 = _i64Add($2499 | 0, $2500 | 0, $2517 | 0, $2518 | 0) | 0;
  $2570 = getTempRet0() | 0;
  $2571 = _bitshift64Shl($2517 | 0, $2518 | 0, 17) | 0;
  $2572 = getTempRet0() | 0;
  $2573 = _bitshift64Lshr($2517 | 0, $2518 | 0, 47) | 0;
  $2574 = getTempRet0() | 0;
  $2575 = $2571 | $2573;
  $2576 = $2572 | $2574;
  $2577 = $2575 ^ $2569;
  $2578 = $2576 ^ $2570;
  $2579 = _i64Add($2549 | 0, $2550 | 0, $2547 | 0, $2548 | 0) | 0;
  $2580 = getTempRet0() | 0;
  $2581 = _bitshift64Shl($2547 | 0, $2548 | 0, 25) | 0;
  $2582 = getTempRet0() | 0;
  $2583 = _bitshift64Lshr($2547 | 0, $2548 | 0, 39) | 0;
  $2584 = getTempRet0() | 0;
  $2585 = $2581 | $2583;
  $2586 = $2582 | $2584;
  $2587 = $2585 ^ $2579;
  $2588 = $2586 ^ $2580;
  $2589 = _i64Add($2559 | 0, $2560 | 0, $2577 | 0, $2578 | 0) | 0;
  $2590 = getTempRet0() | 0;
  $2591 = _bitshift64Shl($2577 | 0, $2578 | 0, 29) | 0;
  $2592 = getTempRet0() | 0;
  $2593 = _bitshift64Lshr($2577 | 0, $2578 | 0, 35) | 0;
  $2594 = getTempRet0() | 0;
  $2595 = $2591 | $2593;
  $2596 = $2592 | $2594;
  $2597 = $2595 ^ $2589;
  $2598 = $2596 ^ $2590;
  $2599 = _i64Add($2567 | 0, $2568 | 0, $2569 | 0, $2570 | 0) | 0;
  $2600 = getTempRet0() | 0;
  $2601 = _bitshift64Shl($2567 | 0, $2568 | 0, 39) | 0;
  $2602 = getTempRet0() | 0;
  $2603 = _bitshift64Lshr($2567 | 0, $2568 | 0, 25) | 0;
  $2604 = getTempRet0() | 0;
  $2605 = $2601 | $2603;
  $2606 = $2602 | $2604;
  $2607 = $2605 ^ $2599;
  $2608 = $2606 ^ $2600;
  $2609 = _i64Add($2557 | 0, $2558 | 0, $2539 | 0, $2540 | 0) | 0;
  $2610 = getTempRet0() | 0;
  $2611 = _bitshift64Shl($2557 | 0, $2558 | 0, 43) | 0;
  $2612 = getTempRet0() | 0;
  $2613 = _bitshift64Lshr($2557 | 0, $2558 | 0, 21) | 0;
  $2614 = getTempRet0() | 0;
  $2615 = $2611 | $2613;
  $2616 = $2612 | $2614;
  $2617 = $2615 ^ $2609;
  $2618 = $2616 ^ $2610;
  $2619 = _i64Add($2587 | 0, $2588 | 0, $2589 | 0, $2590 | 0) | 0;
  $2620 = getTempRet0() | 0;
  $2621 = _bitshift64Shl($2587 | 0, $2588 | 0, 8) | 0;
  $2622 = getTempRet0() | 0;
  $2623 = _bitshift64Lshr($2587 | 0, $2588 | 0, 56) | 0;
  $2624 = getTempRet0() | 0;
  $2625 = $2621 | $2623;
  $2626 = $2622 | $2624;
  $2627 = $2625 ^ $2619;
  $2628 = $2626 ^ $2620;
  $2629 = _i64Add($2617 | 0, $2618 | 0, $2599 | 0, $2600 | 0) | 0;
  $2630 = getTempRet0() | 0;
  $2631 = _bitshift64Shl($2617 | 0, $2618 | 0, 35) | 0;
  $2632 = getTempRet0() | 0;
  $2633 = _bitshift64Lshr($2617 | 0, $2618 | 0, 29) | 0;
  $2634 = getTempRet0() | 0;
  $2635 = $2631 | $2633;
  $2636 = $2632 | $2634;
  $2637 = $2635 ^ $2629;
  $2638 = $2636 ^ $2630;
  $2639 = _i64Add($2607 | 0, $2608 | 0, $2609 | 0, $2610 | 0) | 0;
  $2640 = getTempRet0() | 0;
  $2641 = _bitshift64Shl($2607 | 0, $2608 | 0, 56) | 0;
  $2642 = getTempRet0() | 0;
  $2643 = _bitshift64Lshr($2607 | 0, $2608 | 0, 8) | 0;
  $2644 = getTempRet0() | 0;
  $2645 = $2641 | $2643;
  $2646 = $2642 | $2644;
  $2647 = $2645 ^ $2639;
  $2648 = $2646 ^ $2640;
  $2649 = _i64Add($2579 | 0, $2580 | 0, $2597 | 0, $2598 | 0) | 0;
  $2650 = getTempRet0() | 0;
  $2651 = _bitshift64Shl($2597 | 0, $2598 | 0, 22) | 0;
  $2652 = getTempRet0() | 0;
  $2653 = _bitshift64Lshr($2597 | 0, $2598 | 0, 42) | 0;
  $2654 = getTempRet0() | 0;
  $2655 = $2651 | $2653;
  $2656 = $2652 | $2654;
  $2657 = $2655 ^ $2649;
  $2658 = $2656 ^ $2650;
  $2659 = _i64Add($2629 | 0, $2630 | 0, $88 | 0, $90 | 0) | 0;
  $2660 = getTempRet0() | 0;
  $2661 = _i64Add($2627 | 0, $2628 | 0, $92 | 0, $94 | 0) | 0;
  $2662 = getTempRet0() | 0;
  $2663 = _i64Add($2639 | 0, $2640 | 0, $96 | 0, $98 | 0) | 0;
  $2664 = getTempRet0() | 0;
  $2665 = _i64Add($2657 | 0, $2658 | 0, $95 | 0, $97 | 0) | 0;
  $2666 = getTempRet0() | 0;
  $2667 = _i64Add($2649 | 0, $2650 | 0, $68 | 0, $70 | 0) | 0;
  $2668 = getTempRet0() | 0;
  $2669 = _i64Add($2647 | 0, $2648 | 0, $883 | 0, $884 | 0) | 0;
  $2670 = getTempRet0() | 0;
  $2671 = _i64Add($2619 | 0, $2620 | 0, $1063 | 0, $1064 | 0) | 0;
  $2672 = getTempRet0() | 0;
  $2673 = _i64Add($80 | 0, $82 | 0, 14, 0) | 0;
  $2674 = getTempRet0() | 0;
  $2675 = _i64Add($2673 | 0, $2674 | 0, $2637 | 0, $2638 | 0) | 0;
  $2676 = getTempRet0() | 0;
  $2677 = _i64Add($2659 | 0, $2660 | 0, $2661 | 0, $2662 | 0) | 0;
  $2678 = getTempRet0() | 0;
  $2679 = _bitshift64Shl($2661 | 0, $2662 | 0, 46) | 0;
  $2680 = getTempRet0() | 0;
  $2681 = _bitshift64Lshr($2661 | 0, $2662 | 0, 18) | 0;
  $2682 = getTempRet0() | 0;
  $2683 = $2679 | $2681;
  $2684 = $2680 | $2682;
  $2685 = $2683 ^ $2677;
  $2686 = $2684 ^ $2678;
  $2687 = _i64Add($2663 | 0, $2664 | 0, $2665 | 0, $2666 | 0) | 0;
  $2688 = getTempRet0() | 0;
  $2689 = _bitshift64Shl($2665 | 0, $2666 | 0, 36) | 0;
  $2690 = getTempRet0() | 0;
  $2691 = _bitshift64Lshr($2665 | 0, $2666 | 0, 28) | 0;
  $2692 = getTempRet0() | 0;
  $2693 = $2689 | $2691;
  $2694 = $2690 | $2692;
  $2695 = $2693 ^ $2687;
  $2696 = $2694 ^ $2688;
  $2697 = _i64Add($2667 | 0, $2668 | 0, $2669 | 0, $2670 | 0) | 0;
  $2698 = getTempRet0() | 0;
  $2699 = _bitshift64Shl($2669 | 0, $2670 | 0, 19) | 0;
  $2700 = getTempRet0() | 0;
  $2701 = _bitshift64Lshr($2669 | 0, $2670 | 0, 45) | 0;
  $2702 = getTempRet0() | 0;
  $2703 = $2699 | $2701;
  $2704 = $2700 | $2702;
  $2705 = $2703 ^ $2697;
  $2706 = $2704 ^ $2698;
  $2707 = _i64Add($2671 | 0, $2672 | 0, $2675 | 0, $2676 | 0) | 0;
  $2708 = getTempRet0() | 0;
  $2709 = _bitshift64Shl($2675 | 0, $2676 | 0, 37) | 0;
  $2710 = getTempRet0() | 0;
  $2711 = _bitshift64Lshr($2675 | 0, $2676 | 0, 27) | 0;
  $2712 = getTempRet0() | 0;
  $2713 = $2709 | $2711;
  $2714 = $2710 | $2712;
  $2715 = $2713 ^ $2707;
  $2716 = $2714 ^ $2708;
  $2717 = _i64Add($2685 | 0, $2686 | 0, $2687 | 0, $2688 | 0) | 0;
  $2718 = getTempRet0() | 0;
  $2719 = _bitshift64Shl($2685 | 0, $2686 | 0, 33) | 0;
  $2720 = getTempRet0() | 0;
  $2721 = _bitshift64Lshr($2685 | 0, $2686 | 0, 31) | 0;
  $2722 = getTempRet0() | 0;
  $2723 = $2719 | $2721;
  $2724 = $2720 | $2722;
  $2725 = $2723 ^ $2717;
  $2726 = $2724 ^ $2718;
  $2727 = _i64Add($2715 | 0, $2716 | 0, $2697 | 0, $2698 | 0) | 0;
  $2728 = getTempRet0() | 0;
  $2729 = _bitshift64Shl($2715 | 0, $2716 | 0, 27) | 0;
  $2730 = getTempRet0() | 0;
  $2731 = _bitshift64Lshr($2715 | 0, $2716 | 0, 37) | 0;
  $2732 = getTempRet0() | 0;
  $2733 = $2729 | $2731;
  $2734 = $2730 | $2732;
  $2735 = $2733 ^ $2727;
  $2736 = $2734 ^ $2728;
  $2737 = _i64Add($2705 | 0, $2706 | 0, $2707 | 0, $2708 | 0) | 0;
  $2738 = getTempRet0() | 0;
  $2739 = _bitshift64Shl($2705 | 0, $2706 | 0, 14) | 0;
  $2740 = getTempRet0() | 0;
  $2741 = _bitshift64Lshr($2705 | 0, $2706 | 0, 50) | 0;
  $2742 = getTempRet0() | 0;
  $2743 = $2739 | $2741;
  $2744 = $2740 | $2742;
  $2745 = $2743 ^ $2737;
  $2746 = $2744 ^ $2738;
  $2747 = _i64Add($2677 | 0, $2678 | 0, $2695 | 0, $2696 | 0) | 0;
  $2748 = getTempRet0() | 0;
  $2749 = _bitshift64Shl($2695 | 0, $2696 | 0, 42) | 0;
  $2750 = getTempRet0() | 0;
  $2751 = _bitshift64Lshr($2695 | 0, $2696 | 0, 22) | 0;
  $2752 = getTempRet0() | 0;
  $2753 = $2749 | $2751;
  $2754 = $2750 | $2752;
  $2755 = $2753 ^ $2747;
  $2756 = $2754 ^ $2748;
  $2757 = _i64Add($2727 | 0, $2728 | 0, $2725 | 0, $2726 | 0) | 0;
  $2758 = getTempRet0() | 0;
  $2759 = _bitshift64Shl($2725 | 0, $2726 | 0, 17) | 0;
  $2760 = getTempRet0() | 0;
  $2761 = _bitshift64Lshr($2725 | 0, $2726 | 0, 47) | 0;
  $2762 = getTempRet0() | 0;
  $2763 = $2759 | $2761;
  $2764 = $2760 | $2762;
  $2765 = $2763 ^ $2757;
  $2766 = $2764 ^ $2758;
  $2767 = _i64Add($2737 | 0, $2738 | 0, $2755 | 0, $2756 | 0) | 0;
  $2768 = getTempRet0() | 0;
  $2769 = _bitshift64Shl($2755 | 0, $2756 | 0, 49) | 0;
  $2770 = getTempRet0() | 0;
  $2771 = _bitshift64Lshr($2755 | 0, $2756 | 0, 15) | 0;
  $2772 = getTempRet0() | 0;
  $2773 = $2769 | $2771;
  $2774 = $2770 | $2772;
  $2775 = $2773 ^ $2767;
  $2776 = $2774 ^ $2768;
  $2777 = _i64Add($2745 | 0, $2746 | 0, $2747 | 0, $2748 | 0) | 0;
  $2778 = getTempRet0() | 0;
  $2779 = _bitshift64Shl($2745 | 0, $2746 | 0, 36) | 0;
  $2780 = getTempRet0() | 0;
  $2781 = _bitshift64Lshr($2745 | 0, $2746 | 0, 28) | 0;
  $2782 = getTempRet0() | 0;
  $2783 = $2779 | $2781;
  $2784 = $2780 | $2782;
  $2785 = $2783 ^ $2777;
  $2786 = $2784 ^ $2778;
  $2787 = _i64Add($2735 | 0, $2736 | 0, $2717 | 0, $2718 | 0) | 0;
  $2788 = getTempRet0() | 0;
  $2789 = _bitshift64Shl($2735 | 0, $2736 | 0, 39) | 0;
  $2790 = getTempRet0() | 0;
  $2791 = _bitshift64Lshr($2735 | 0, $2736 | 0, 25) | 0;
  $2792 = getTempRet0() | 0;
  $2793 = $2789 | $2791;
  $2794 = $2790 | $2792;
  $2795 = $2793 ^ $2787;
  $2796 = $2794 ^ $2788;
  $2797 = _i64Add($2765 | 0, $2766 | 0, $2767 | 0, $2768 | 0) | 0;
  $2798 = getTempRet0() | 0;
  $2799 = _bitshift64Shl($2765 | 0, $2766 | 0, 44) | 0;
  $2800 = getTempRet0() | 0;
  $2801 = _bitshift64Lshr($2765 | 0, $2766 | 0, 20) | 0;
  $2802 = getTempRet0() | 0;
  $2803 = $2799 | $2801;
  $2804 = $2800 | $2802;
  $2805 = $2803 ^ $2797;
  $2806 = $2804 ^ $2798;
  $2807 = _i64Add($2795 | 0, $2796 | 0, $2777 | 0, $2778 | 0) | 0;
  $2808 = getTempRet0() | 0;
  $2809 = _bitshift64Shl($2795 | 0, $2796 | 0, 9) | 0;
  $2810 = getTempRet0() | 0;
  $2811 = _bitshift64Lshr($2795 | 0, $2796 | 0, 55) | 0;
  $2812 = getTempRet0() | 0;
  $2813 = $2809 | $2811;
  $2814 = $2810 | $2812;
  $2815 = $2813 ^ $2807;
  $2816 = $2814 ^ $2808;
  $2817 = _i64Add($2785 | 0, $2786 | 0, $2787 | 0, $2788 | 0) | 0;
  $2818 = getTempRet0() | 0;
  $2819 = _bitshift64Shl($2785 | 0, $2786 | 0, 54) | 0;
  $2820 = getTempRet0() | 0;
  $2821 = _bitshift64Lshr($2785 | 0, $2786 | 0, 10) | 0;
  $2822 = getTempRet0() | 0;
  $2823 = $2819 | $2821;
  $2824 = $2820 | $2822;
  $2825 = $2823 ^ $2817;
  $2826 = $2824 ^ $2818;
  $2827 = _i64Add($2757 | 0, $2758 | 0, $2775 | 0, $2776 | 0) | 0;
  $2828 = getTempRet0() | 0;
  $2829 = _bitshift64Shl($2775 | 0, $2776 | 0, 56) | 0;
  $2830 = getTempRet0() | 0;
  $2831 = _bitshift64Lshr($2775 | 0, $2776 | 0, 8) | 0;
  $2832 = getTempRet0() | 0;
  $2833 = $2829 | $2831;
  $2834 = $2830 | $2832;
  $2835 = $2833 ^ $2827;
  $2836 = $2834 ^ $2828;
  $2837 = _i64Add($2807 | 0, $2808 | 0, $92 | 0, $94 | 0) | 0;
  $2838 = getTempRet0() | 0;
  $2839 = _i64Add($2805 | 0, $2806 | 0, $96 | 0, $98 | 0) | 0;
  $2840 = getTempRet0() | 0;
  $2841 = _i64Add($2817 | 0, $2818 | 0, $95 | 0, $97 | 0) | 0;
  $2842 = getTempRet0() | 0;
  $2843 = _i64Add($2835 | 0, $2836 | 0, $68 | 0, $70 | 0) | 0;
  $2844 = getTempRet0() | 0;
  $2845 = _i64Add($2827 | 0, $2828 | 0, $72 | 0, $74 | 0) | 0;
  $2846 = getTempRet0() | 0;
  $2847 = _i64Add($2825 | 0, $2826 | 0, $1063 | 0, $1064 | 0) | 0;
  $2848 = getTempRet0() | 0;
  $2849 = _i64Add($2797 | 0, $2798 | 0, $1243 | 0, $1244 | 0) | 0;
  $2850 = getTempRet0() | 0;
  $2851 = _i64Add($84 | 0, $86 | 0, 15, 0) | 0;
  $2852 = getTempRet0() | 0;
  $2853 = _i64Add($2851 | 0, $2852 | 0, $2815 | 0, $2816 | 0) | 0;
  $2854 = getTempRet0() | 0;
  $2855 = _i64Add($2837 | 0, $2838 | 0, $2839 | 0, $2840 | 0) | 0;
  $2856 = getTempRet0() | 0;
  $2857 = _bitshift64Shl($2839 | 0, $2840 | 0, 39) | 0;
  $2858 = getTempRet0() | 0;
  $2859 = _bitshift64Lshr($2839 | 0, $2840 | 0, 25) | 0;
  $2860 = getTempRet0() | 0;
  $2861 = $2857 | $2859;
  $2862 = $2858 | $2860;
  $2863 = $2861 ^ $2855;
  $2864 = $2862 ^ $2856;
  $2865 = _i64Add($2841 | 0, $2842 | 0, $2843 | 0, $2844 | 0) | 0;
  $2866 = getTempRet0() | 0;
  $2867 = _bitshift64Shl($2843 | 0, $2844 | 0, 30) | 0;
  $2868 = getTempRet0() | 0;
  $2869 = _bitshift64Lshr($2843 | 0, $2844 | 0, 34) | 0;
  $2870 = getTempRet0() | 0;
  $2871 = $2867 | $2869;
  $2872 = $2868 | $2870;
  $2873 = $2871 ^ $2865;
  $2874 = $2872 ^ $2866;
  $2875 = _i64Add($2845 | 0, $2846 | 0, $2847 | 0, $2848 | 0) | 0;
  $2876 = getTempRet0() | 0;
  $2877 = _bitshift64Shl($2847 | 0, $2848 | 0, 34) | 0;
  $2878 = getTempRet0() | 0;
  $2879 = _bitshift64Lshr($2847 | 0, $2848 | 0, 30) | 0;
  $2880 = getTempRet0() | 0;
  $2881 = $2877 | $2879;
  $2882 = $2878 | $2880;
  $2883 = $2881 ^ $2875;
  $2884 = $2882 ^ $2876;
  $2885 = _i64Add($2849 | 0, $2850 | 0, $2853 | 0, $2854 | 0) | 0;
  $2886 = getTempRet0() | 0;
  $2887 = _bitshift64Shl($2853 | 0, $2854 | 0, 24) | 0;
  $2888 = getTempRet0() | 0;
  $2889 = _bitshift64Lshr($2853 | 0, $2854 | 0, 40) | 0;
  $2890 = getTempRet0() | 0;
  $2891 = $2887 | $2889;
  $2892 = $2888 | $2890;
  $2893 = $2891 ^ $2885;
  $2894 = $2892 ^ $2886;
  $2895 = _i64Add($2863 | 0, $2864 | 0, $2865 | 0, $2866 | 0) | 0;
  $2896 = getTempRet0() | 0;
  $2897 = _bitshift64Shl($2863 | 0, $2864 | 0, 13) | 0;
  $2898 = getTempRet0() | 0;
  $2899 = _bitshift64Lshr($2863 | 0, $2864 | 0, 51) | 0;
  $2900 = getTempRet0() | 0;
  $2901 = $2897 | $2899;
  $2902 = $2898 | $2900;
  $2903 = $2901 ^ $2895;
  $2904 = $2902 ^ $2896;
  $2905 = _i64Add($2893 | 0, $2894 | 0, $2875 | 0, $2876 | 0) | 0;
  $2906 = getTempRet0() | 0;
  $2907 = _bitshift64Shl($2893 | 0, $2894 | 0, 50) | 0;
  $2908 = getTempRet0() | 0;
  $2909 = _bitshift64Lshr($2893 | 0, $2894 | 0, 14) | 0;
  $2910 = getTempRet0() | 0;
  $2911 = $2907 | $2909;
  $2912 = $2908 | $2910;
  $2913 = $2911 ^ $2905;
  $2914 = $2912 ^ $2906;
  $2915 = _i64Add($2883 | 0, $2884 | 0, $2885 | 0, $2886 | 0) | 0;
  $2916 = getTempRet0() | 0;
  $2917 = _bitshift64Shl($2883 | 0, $2884 | 0, 10) | 0;
  $2918 = getTempRet0() | 0;
  $2919 = _bitshift64Lshr($2883 | 0, $2884 | 0, 54) | 0;
  $2920 = getTempRet0() | 0;
  $2921 = $2917 | $2919;
  $2922 = $2918 | $2920;
  $2923 = $2921 ^ $2915;
  $2924 = $2922 ^ $2916;
  $2925 = _i64Add($2855 | 0, $2856 | 0, $2873 | 0, $2874 | 0) | 0;
  $2926 = getTempRet0() | 0;
  $2927 = _bitshift64Shl($2873 | 0, $2874 | 0, 17) | 0;
  $2928 = getTempRet0() | 0;
  $2929 = _bitshift64Lshr($2873 | 0, $2874 | 0, 47) | 0;
  $2930 = getTempRet0() | 0;
  $2931 = $2927 | $2929;
  $2932 = $2928 | $2930;
  $2933 = $2931 ^ $2925;
  $2934 = $2932 ^ $2926;
  $2935 = _i64Add($2905 | 0, $2906 | 0, $2903 | 0, $2904 | 0) | 0;
  $2936 = getTempRet0() | 0;
  $2937 = _bitshift64Shl($2903 | 0, $2904 | 0, 25) | 0;
  $2938 = getTempRet0() | 0;
  $2939 = _bitshift64Lshr($2903 | 0, $2904 | 0, 39) | 0;
  $2940 = getTempRet0() | 0;
  $2941 = $2937 | $2939;
  $2942 = $2938 | $2940;
  $2943 = $2941 ^ $2935;
  $2944 = $2942 ^ $2936;
  $2945 = _i64Add($2915 | 0, $2916 | 0, $2933 | 0, $2934 | 0) | 0;
  $2946 = getTempRet0() | 0;
  $2947 = _bitshift64Shl($2933 | 0, $2934 | 0, 29) | 0;
  $2948 = getTempRet0() | 0;
  $2949 = _bitshift64Lshr($2933 | 0, $2934 | 0, 35) | 0;
  $2950 = getTempRet0() | 0;
  $2951 = $2947 | $2949;
  $2952 = $2948 | $2950;
  $2953 = $2951 ^ $2945;
  $2954 = $2952 ^ $2946;
  $2955 = _i64Add($2923 | 0, $2924 | 0, $2925 | 0, $2926 | 0) | 0;
  $2956 = getTempRet0() | 0;
  $2957 = _bitshift64Shl($2923 | 0, $2924 | 0, 39) | 0;
  $2958 = getTempRet0() | 0;
  $2959 = _bitshift64Lshr($2923 | 0, $2924 | 0, 25) | 0;
  $2960 = getTempRet0() | 0;
  $2961 = $2957 | $2959;
  $2962 = $2958 | $2960;
  $2963 = $2961 ^ $2955;
  $2964 = $2962 ^ $2956;
  $2965 = _i64Add($2913 | 0, $2914 | 0, $2895 | 0, $2896 | 0) | 0;
  $2966 = getTempRet0() | 0;
  $2967 = _bitshift64Shl($2913 | 0, $2914 | 0, 43) | 0;
  $2968 = getTempRet0() | 0;
  $2969 = _bitshift64Lshr($2913 | 0, $2914 | 0, 21) | 0;
  $2970 = getTempRet0() | 0;
  $2971 = $2967 | $2969;
  $2972 = $2968 | $2970;
  $2973 = $2971 ^ $2965;
  $2974 = $2972 ^ $2966;
  $2975 = _i64Add($2943 | 0, $2944 | 0, $2945 | 0, $2946 | 0) | 0;
  $2976 = getTempRet0() | 0;
  $2977 = _bitshift64Shl($2943 | 0, $2944 | 0, 8) | 0;
  $2978 = getTempRet0() | 0;
  $2979 = _bitshift64Lshr($2943 | 0, $2944 | 0, 56) | 0;
  $2980 = getTempRet0() | 0;
  $2981 = $2977 | $2979;
  $2982 = $2978 | $2980;
  $2983 = $2981 ^ $2975;
  $2984 = $2982 ^ $2976;
  $2985 = _i64Add($2973 | 0, $2974 | 0, $2955 | 0, $2956 | 0) | 0;
  $2986 = getTempRet0() | 0;
  $2987 = _bitshift64Shl($2973 | 0, $2974 | 0, 35) | 0;
  $2988 = getTempRet0() | 0;
  $2989 = _bitshift64Lshr($2973 | 0, $2974 | 0, 29) | 0;
  $2990 = getTempRet0() | 0;
  $2991 = $2987 | $2989;
  $2992 = $2988 | $2990;
  $2993 = $2991 ^ $2985;
  $2994 = $2992 ^ $2986;
  $2995 = _i64Add($2963 | 0, $2964 | 0, $2965 | 0, $2966 | 0) | 0;
  $2996 = getTempRet0() | 0;
  $2997 = _bitshift64Shl($2963 | 0, $2964 | 0, 56) | 0;
  $2998 = getTempRet0() | 0;
  $2999 = _bitshift64Lshr($2963 | 0, $2964 | 0, 8) | 0;
  $3000 = getTempRet0() | 0;
  $3001 = $2997 | $2999;
  $3002 = $2998 | $3000;
  $3003 = $3001 ^ $2995;
  $3004 = $3002 ^ $2996;
  $3005 = _i64Add($2935 | 0, $2936 | 0, $2953 | 0, $2954 | 0) | 0;
  $3006 = getTempRet0() | 0;
  $3007 = _bitshift64Shl($2953 | 0, $2954 | 0, 22) | 0;
  $3008 = getTempRet0() | 0;
  $3009 = _bitshift64Lshr($2953 | 0, $2954 | 0, 42) | 0;
  $3010 = getTempRet0() | 0;
  $3011 = $3007 | $3009;
  $3012 = $3008 | $3010;
  $3013 = $3011 ^ $3005;
  $3014 = $3012 ^ $3006;
  $3015 = _i64Add($2985 | 0, $2986 | 0, $96 | 0, $98 | 0) | 0;
  $3016 = getTempRet0() | 0;
  $3017 = _i64Add($2983 | 0, $2984 | 0, $95 | 0, $97 | 0) | 0;
  $3018 = getTempRet0() | 0;
  $3019 = _i64Add($2995 | 0, $2996 | 0, $68 | 0, $70 | 0) | 0;
  $3020 = getTempRet0() | 0;
  $3021 = _i64Add($3013 | 0, $3014 | 0, $72 | 0, $74 | 0) | 0;
  $3022 = getTempRet0() | 0;
  $3023 = _i64Add($3005 | 0, $3006 | 0, $76 | 0, $78 | 0) | 0;
  $3024 = getTempRet0() | 0;
  $3025 = _i64Add($3003 | 0, $3004 | 0, $1243 | 0, $1244 | 0) | 0;
  $3026 = getTempRet0() | 0;
  $3027 = _i64Add($2975 | 0, $2976 | 0, $1423 | 0, $1424 | 0) | 0;
  $3028 = getTempRet0() | 0;
  $3029 = _i64Add($88 | 0, $90 | 0, 16, 0) | 0;
  $3030 = getTempRet0() | 0;
  $3031 = _i64Add($3029 | 0, $3030 | 0, $2993 | 0, $2994 | 0) | 0;
  $3032 = getTempRet0() | 0;
  $3033 = _i64Add($3015 | 0, $3016 | 0, $3017 | 0, $3018 | 0) | 0;
  $3034 = getTempRet0() | 0;
  $3035 = _bitshift64Shl($3017 | 0, $3018 | 0, 46) | 0;
  $3036 = getTempRet0() | 0;
  $3037 = _bitshift64Lshr($3017 | 0, $3018 | 0, 18) | 0;
  $3038 = getTempRet0() | 0;
  $3039 = $3035 | $3037;
  $3040 = $3036 | $3038;
  $3041 = $3039 ^ $3033;
  $3042 = $3040 ^ $3034;
  $3043 = _i64Add($3019 | 0, $3020 | 0, $3021 | 0, $3022 | 0) | 0;
  $3044 = getTempRet0() | 0;
  $3045 = _bitshift64Shl($3021 | 0, $3022 | 0, 36) | 0;
  $3046 = getTempRet0() | 0;
  $3047 = _bitshift64Lshr($3021 | 0, $3022 | 0, 28) | 0;
  $3048 = getTempRet0() | 0;
  $3049 = $3045 | $3047;
  $3050 = $3046 | $3048;
  $3051 = $3049 ^ $3043;
  $3052 = $3050 ^ $3044;
  $3053 = _i64Add($3023 | 0, $3024 | 0, $3025 | 0, $3026 | 0) | 0;
  $3054 = getTempRet0() | 0;
  $3055 = _bitshift64Shl($3025 | 0, $3026 | 0, 19) | 0;
  $3056 = getTempRet0() | 0;
  $3057 = _bitshift64Lshr($3025 | 0, $3026 | 0, 45) | 0;
  $3058 = getTempRet0() | 0;
  $3059 = $3055 | $3057;
  $3060 = $3056 | $3058;
  $3061 = $3059 ^ $3053;
  $3062 = $3060 ^ $3054;
  $3063 = _i64Add($3027 | 0, $3028 | 0, $3031 | 0, $3032 | 0) | 0;
  $3064 = getTempRet0() | 0;
  $3065 = _bitshift64Shl($3031 | 0, $3032 | 0, 37) | 0;
  $3066 = getTempRet0() | 0;
  $3067 = _bitshift64Lshr($3031 | 0, $3032 | 0, 27) | 0;
  $3068 = getTempRet0() | 0;
  $3069 = $3065 | $3067;
  $3070 = $3066 | $3068;
  $3071 = $3069 ^ $3063;
  $3072 = $3070 ^ $3064;
  $3073 = _i64Add($3041 | 0, $3042 | 0, $3043 | 0, $3044 | 0) | 0;
  $3074 = getTempRet0() | 0;
  $3075 = _bitshift64Shl($3041 | 0, $3042 | 0, 33) | 0;
  $3076 = getTempRet0() | 0;
  $3077 = _bitshift64Lshr($3041 | 0, $3042 | 0, 31) | 0;
  $3078 = getTempRet0() | 0;
  $3079 = $3075 | $3077;
  $3080 = $3076 | $3078;
  $3081 = $3079 ^ $3073;
  $3082 = $3080 ^ $3074;
  $3083 = _i64Add($3071 | 0, $3072 | 0, $3053 | 0, $3054 | 0) | 0;
  $3084 = getTempRet0() | 0;
  $3085 = _bitshift64Shl($3071 | 0, $3072 | 0, 27) | 0;
  $3086 = getTempRet0() | 0;
  $3087 = _bitshift64Lshr($3071 | 0, $3072 | 0, 37) | 0;
  $3088 = getTempRet0() | 0;
  $3089 = $3085 | $3087;
  $3090 = $3086 | $3088;
  $3091 = $3089 ^ $3083;
  $3092 = $3090 ^ $3084;
  $3093 = _i64Add($3061 | 0, $3062 | 0, $3063 | 0, $3064 | 0) | 0;
  $3094 = getTempRet0() | 0;
  $3095 = _bitshift64Shl($3061 | 0, $3062 | 0, 14) | 0;
  $3096 = getTempRet0() | 0;
  $3097 = _bitshift64Lshr($3061 | 0, $3062 | 0, 50) | 0;
  $3098 = getTempRet0() | 0;
  $3099 = $3095 | $3097;
  $3100 = $3096 | $3098;
  $3101 = $3099 ^ $3093;
  $3102 = $3100 ^ $3094;
  $3103 = _i64Add($3033 | 0, $3034 | 0, $3051 | 0, $3052 | 0) | 0;
  $3104 = getTempRet0() | 0;
  $3105 = _bitshift64Shl($3051 | 0, $3052 | 0, 42) | 0;
  $3106 = getTempRet0() | 0;
  $3107 = _bitshift64Lshr($3051 | 0, $3052 | 0, 22) | 0;
  $3108 = getTempRet0() | 0;
  $3109 = $3105 | $3107;
  $3110 = $3106 | $3108;
  $3111 = $3109 ^ $3103;
  $3112 = $3110 ^ $3104;
  $3113 = _i64Add($3083 | 0, $3084 | 0, $3081 | 0, $3082 | 0) | 0;
  $3114 = getTempRet0() | 0;
  $3115 = _bitshift64Shl($3081 | 0, $3082 | 0, 17) | 0;
  $3116 = getTempRet0() | 0;
  $3117 = _bitshift64Lshr($3081 | 0, $3082 | 0, 47) | 0;
  $3118 = getTempRet0() | 0;
  $3119 = $3115 | $3117;
  $3120 = $3116 | $3118;
  $3121 = $3119 ^ $3113;
  $3122 = $3120 ^ $3114;
  $3123 = _i64Add($3093 | 0, $3094 | 0, $3111 | 0, $3112 | 0) | 0;
  $3124 = getTempRet0() | 0;
  $3125 = _bitshift64Shl($3111 | 0, $3112 | 0, 49) | 0;
  $3126 = getTempRet0() | 0;
  $3127 = _bitshift64Lshr($3111 | 0, $3112 | 0, 15) | 0;
  $3128 = getTempRet0() | 0;
  $3129 = $3125 | $3127;
  $3130 = $3126 | $3128;
  $3131 = $3129 ^ $3123;
  $3132 = $3130 ^ $3124;
  $3133 = _i64Add($3101 | 0, $3102 | 0, $3103 | 0, $3104 | 0) | 0;
  $3134 = getTempRet0() | 0;
  $3135 = _bitshift64Shl($3101 | 0, $3102 | 0, 36) | 0;
  $3136 = getTempRet0() | 0;
  $3137 = _bitshift64Lshr($3101 | 0, $3102 | 0, 28) | 0;
  $3138 = getTempRet0() | 0;
  $3139 = $3135 | $3137;
  $3140 = $3136 | $3138;
  $3141 = $3139 ^ $3133;
  $3142 = $3140 ^ $3134;
  $3143 = _i64Add($3091 | 0, $3092 | 0, $3073 | 0, $3074 | 0) | 0;
  $3144 = getTempRet0() | 0;
  $3145 = _bitshift64Shl($3091 | 0, $3092 | 0, 39) | 0;
  $3146 = getTempRet0() | 0;
  $3147 = _bitshift64Lshr($3091 | 0, $3092 | 0, 25) | 0;
  $3148 = getTempRet0() | 0;
  $3149 = $3145 | $3147;
  $3150 = $3146 | $3148;
  $3151 = $3149 ^ $3143;
  $3152 = $3150 ^ $3144;
  $3153 = _i64Add($3121 | 0, $3122 | 0, $3123 | 0, $3124 | 0) | 0;
  $3154 = getTempRet0() | 0;
  $3155 = _bitshift64Shl($3121 | 0, $3122 | 0, 44) | 0;
  $3156 = getTempRet0() | 0;
  $3157 = _bitshift64Lshr($3121 | 0, $3122 | 0, 20) | 0;
  $3158 = getTempRet0() | 0;
  $3159 = $3155 | $3157;
  $3160 = $3156 | $3158;
  $3161 = $3159 ^ $3153;
  $3162 = $3160 ^ $3154;
  $3163 = _i64Add($3151 | 0, $3152 | 0, $3133 | 0, $3134 | 0) | 0;
  $3164 = getTempRet0() | 0;
  $3165 = _bitshift64Shl($3151 | 0, $3152 | 0, 9) | 0;
  $3166 = getTempRet0() | 0;
  $3167 = _bitshift64Lshr($3151 | 0, $3152 | 0, 55) | 0;
  $3168 = getTempRet0() | 0;
  $3169 = $3165 | $3167;
  $3170 = $3166 | $3168;
  $3171 = $3169 ^ $3163;
  $3172 = $3170 ^ $3164;
  $3173 = _i64Add($3141 | 0, $3142 | 0, $3143 | 0, $3144 | 0) | 0;
  $3174 = getTempRet0() | 0;
  $3175 = _bitshift64Shl($3141 | 0, $3142 | 0, 54) | 0;
  $3176 = getTempRet0() | 0;
  $3177 = _bitshift64Lshr($3141 | 0, $3142 | 0, 10) | 0;
  $3178 = getTempRet0() | 0;
  $3179 = $3175 | $3177;
  $3180 = $3176 | $3178;
  $3181 = $3179 ^ $3173;
  $3182 = $3180 ^ $3174;
  $3183 = _i64Add($3113 | 0, $3114 | 0, $3131 | 0, $3132 | 0) | 0;
  $3184 = getTempRet0() | 0;
  $3185 = _bitshift64Shl($3131 | 0, $3132 | 0, 56) | 0;
  $3186 = getTempRet0() | 0;
  $3187 = _bitshift64Lshr($3131 | 0, $3132 | 0, 8) | 0;
  $3188 = getTempRet0() | 0;
  $3189 = $3185 | $3187;
  $3190 = $3186 | $3188;
  $3191 = $3189 ^ $3183;
  $3192 = $3190 ^ $3184;
  $3193 = _i64Add($3163 | 0, $3164 | 0, $95 | 0, $97 | 0) | 0;
  $3194 = getTempRet0() | 0;
  $3195 = _i64Add($3161 | 0, $3162 | 0, $68 | 0, $70 | 0) | 0;
  $3196 = getTempRet0() | 0;
  $3197 = _i64Add($3173 | 0, $3174 | 0, $72 | 0, $74 | 0) | 0;
  $3198 = getTempRet0() | 0;
  $3199 = _i64Add($3191 | 0, $3192 | 0, $76 | 0, $78 | 0) | 0;
  $3200 = getTempRet0() | 0;
  $3201 = _i64Add($3183 | 0, $3184 | 0, $80 | 0, $82 | 0) | 0;
  $3202 = getTempRet0() | 0;
  $3203 = _i64Add($3181 | 0, $3182 | 0, $1423 | 0, $1424 | 0) | 0;
  $3204 = getTempRet0() | 0;
  $3205 = _i64Add($3153 | 0, $3154 | 0, $161 | 0, $162 | 0) | 0;
  $3206 = getTempRet0() | 0;
  $3207 = _i64Add($92 | 0, $94 | 0, 17, 0) | 0;
  $3208 = getTempRet0() | 0;
  $3209 = _i64Add($3207 | 0, $3208 | 0, $3171 | 0, $3172 | 0) | 0;
  $3210 = getTempRet0() | 0;
  $3211 = _i64Add($3193 | 0, $3194 | 0, $3195 | 0, $3196 | 0) | 0;
  $3212 = getTempRet0() | 0;
  $3213 = _bitshift64Shl($3195 | 0, $3196 | 0, 39) | 0;
  $3214 = getTempRet0() | 0;
  $3215 = _bitshift64Lshr($3195 | 0, $3196 | 0, 25) | 0;
  $3216 = getTempRet0() | 0;
  $3217 = $3213 | $3215;
  $3218 = $3214 | $3216;
  $3219 = $3217 ^ $3211;
  $3220 = $3218 ^ $3212;
  $3221 = _i64Add($3197 | 0, $3198 | 0, $3199 | 0, $3200 | 0) | 0;
  $3222 = getTempRet0() | 0;
  $3223 = _bitshift64Shl($3199 | 0, $3200 | 0, 30) | 0;
  $3224 = getTempRet0() | 0;
  $3225 = _bitshift64Lshr($3199 | 0, $3200 | 0, 34) | 0;
  $3226 = getTempRet0() | 0;
  $3227 = $3223 | $3225;
  $3228 = $3224 | $3226;
  $3229 = $3227 ^ $3221;
  $3230 = $3228 ^ $3222;
  $3231 = _i64Add($3201 | 0, $3202 | 0, $3203 | 0, $3204 | 0) | 0;
  $3232 = getTempRet0() | 0;
  $3233 = _bitshift64Shl($3203 | 0, $3204 | 0, 34) | 0;
  $3234 = getTempRet0() | 0;
  $3235 = _bitshift64Lshr($3203 | 0, $3204 | 0, 30) | 0;
  $3236 = getTempRet0() | 0;
  $3237 = $3233 | $3235;
  $3238 = $3234 | $3236;
  $3239 = $3237 ^ $3231;
  $3240 = $3238 ^ $3232;
  $3241 = _i64Add($3205 | 0, $3206 | 0, $3209 | 0, $3210 | 0) | 0;
  $3242 = getTempRet0() | 0;
  $3243 = _bitshift64Shl($3209 | 0, $3210 | 0, 24) | 0;
  $3244 = getTempRet0() | 0;
  $3245 = _bitshift64Lshr($3209 | 0, $3210 | 0, 40) | 0;
  $3246 = getTempRet0() | 0;
  $3247 = $3243 | $3245;
  $3248 = $3244 | $3246;
  $3249 = $3247 ^ $3241;
  $3250 = $3248 ^ $3242;
  $3251 = _i64Add($3219 | 0, $3220 | 0, $3221 | 0, $3222 | 0) | 0;
  $3252 = getTempRet0() | 0;
  $3253 = _bitshift64Shl($3219 | 0, $3220 | 0, 13) | 0;
  $3254 = getTempRet0() | 0;
  $3255 = _bitshift64Lshr($3219 | 0, $3220 | 0, 51) | 0;
  $3256 = getTempRet0() | 0;
  $3257 = $3253 | $3255;
  $3258 = $3254 | $3256;
  $3259 = $3257 ^ $3251;
  $3260 = $3258 ^ $3252;
  $3261 = _i64Add($3249 | 0, $3250 | 0, $3231 | 0, $3232 | 0) | 0;
  $3262 = getTempRet0() | 0;
  $3263 = _bitshift64Shl($3249 | 0, $3250 | 0, 50) | 0;
  $3264 = getTempRet0() | 0;
  $3265 = _bitshift64Lshr($3249 | 0, $3250 | 0, 14) | 0;
  $3266 = getTempRet0() | 0;
  $3267 = $3263 | $3265;
  $3268 = $3264 | $3266;
  $3269 = $3267 ^ $3261;
  $3270 = $3268 ^ $3262;
  $3271 = _i64Add($3239 | 0, $3240 | 0, $3241 | 0, $3242 | 0) | 0;
  $3272 = getTempRet0() | 0;
  $3273 = _bitshift64Shl($3239 | 0, $3240 | 0, 10) | 0;
  $3274 = getTempRet0() | 0;
  $3275 = _bitshift64Lshr($3239 | 0, $3240 | 0, 54) | 0;
  $3276 = getTempRet0() | 0;
  $3277 = $3273 | $3275;
  $3278 = $3274 | $3276;
  $3279 = $3277 ^ $3271;
  $3280 = $3278 ^ $3272;
  $3281 = _i64Add($3211 | 0, $3212 | 0, $3229 | 0, $3230 | 0) | 0;
  $3282 = getTempRet0() | 0;
  $3283 = _bitshift64Shl($3229 | 0, $3230 | 0, 17) | 0;
  $3284 = getTempRet0() | 0;
  $3285 = _bitshift64Lshr($3229 | 0, $3230 | 0, 47) | 0;
  $3286 = getTempRet0() | 0;
  $3287 = $3283 | $3285;
  $3288 = $3284 | $3286;
  $3289 = $3287 ^ $3281;
  $3290 = $3288 ^ $3282;
  $3291 = _i64Add($3261 | 0, $3262 | 0, $3259 | 0, $3260 | 0) | 0;
  $3292 = getTempRet0() | 0;
  $3293 = _bitshift64Shl($3259 | 0, $3260 | 0, 25) | 0;
  $3294 = getTempRet0() | 0;
  $3295 = _bitshift64Lshr($3259 | 0, $3260 | 0, 39) | 0;
  $3296 = getTempRet0() | 0;
  $3297 = $3293 | $3295;
  $3298 = $3294 | $3296;
  $3299 = $3297 ^ $3291;
  $3300 = $3298 ^ $3292;
  $3301 = _i64Add($3271 | 0, $3272 | 0, $3289 | 0, $3290 | 0) | 0;
  $3302 = getTempRet0() | 0;
  $3303 = _bitshift64Shl($3289 | 0, $3290 | 0, 29) | 0;
  $3304 = getTempRet0() | 0;
  $3305 = _bitshift64Lshr($3289 | 0, $3290 | 0, 35) | 0;
  $3306 = getTempRet0() | 0;
  $3307 = $3303 | $3305;
  $3308 = $3304 | $3306;
  $3309 = $3307 ^ $3301;
  $3310 = $3308 ^ $3302;
  $3311 = _i64Add($3279 | 0, $3280 | 0, $3281 | 0, $3282 | 0) | 0;
  $3312 = getTempRet0() | 0;
  $3313 = _bitshift64Shl($3279 | 0, $3280 | 0, 39) | 0;
  $3314 = getTempRet0() | 0;
  $3315 = _bitshift64Lshr($3279 | 0, $3280 | 0, 25) | 0;
  $3316 = getTempRet0() | 0;
  $3317 = $3313 | $3315;
  $3318 = $3314 | $3316;
  $3319 = $3317 ^ $3311;
  $3320 = $3318 ^ $3312;
  $3321 = _i64Add($3269 | 0, $3270 | 0, $3251 | 0, $3252 | 0) | 0;
  $3322 = getTempRet0() | 0;
  $3323 = _bitshift64Shl($3269 | 0, $3270 | 0, 43) | 0;
  $3324 = getTempRet0() | 0;
  $3325 = _bitshift64Lshr($3269 | 0, $3270 | 0, 21) | 0;
  $3326 = getTempRet0() | 0;
  $3327 = $3323 | $3325;
  $3328 = $3324 | $3326;
  $3329 = $3327 ^ $3321;
  $3330 = $3328 ^ $3322;
  $3331 = _i64Add($3299 | 0, $3300 | 0, $3301 | 0, $3302 | 0) | 0;
  $3332 = getTempRet0() | 0;
  $3333 = _bitshift64Shl($3299 | 0, $3300 | 0, 8) | 0;
  $3334 = getTempRet0() | 0;
  $3335 = _bitshift64Lshr($3299 | 0, $3300 | 0, 56) | 0;
  $3336 = getTempRet0() | 0;
  $3337 = $3333 | $3335;
  $3338 = $3334 | $3336;
  $3339 = $3337 ^ $3331;
  $3340 = $3338 ^ $3332;
  $3341 = _i64Add($3329 | 0, $3330 | 0, $3311 | 0, $3312 | 0) | 0;
  $3342 = getTempRet0() | 0;
  $3343 = _bitshift64Shl($3329 | 0, $3330 | 0, 35) | 0;
  $3344 = getTempRet0() | 0;
  $3345 = _bitshift64Lshr($3329 | 0, $3330 | 0, 29) | 0;
  $3346 = getTempRet0() | 0;
  $3347 = $3343 | $3345;
  $3348 = $3344 | $3346;
  $3349 = $3347 ^ $3341;
  $3350 = $3348 ^ $3342;
  $3351 = _i64Add($3319 | 0, $3320 | 0, $3321 | 0, $3322 | 0) | 0;
  $3352 = getTempRet0() | 0;
  $3353 = _bitshift64Shl($3319 | 0, $3320 | 0, 56) | 0;
  $3354 = getTempRet0() | 0;
  $3355 = _bitshift64Lshr($3319 | 0, $3320 | 0, 8) | 0;
  $3356 = getTempRet0() | 0;
  $3357 = $3353 | $3355;
  $3358 = $3354 | $3356;
  $3359 = $3357 ^ $3351;
  $3360 = $3358 ^ $3352;
  $3361 = _i64Add($3291 | 0, $3292 | 0, $3309 | 0, $3310 | 0) | 0;
  $3362 = getTempRet0() | 0;
  $3363 = _bitshift64Shl($3309 | 0, $3310 | 0, 22) | 0;
  $3364 = getTempRet0() | 0;
  $3365 = _bitshift64Lshr($3309 | 0, $3310 | 0, 42) | 0;
  $3366 = getTempRet0() | 0;
  $3367 = $3363 | $3365;
  $3368 = $3364 | $3366;
  $3369 = $3367 ^ $3361;
  $3370 = $3368 ^ $3362;
  $3371 = _i64Add($3341 | 0, $3342 | 0, $68 | 0, $70 | 0) | 0;
  $3372 = getTempRet0() | 0;
  $3373 = _i64Add($3339 | 0, $3340 | 0, $72 | 0, $74 | 0) | 0;
  $3374 = getTempRet0() | 0;
  $3375 = _i64Add($3351 | 0, $3352 | 0, $76 | 0, $78 | 0) | 0;
  $3376 = getTempRet0() | 0;
  $3377 = _i64Add($3369 | 0, $3370 | 0, $80 | 0, $82 | 0) | 0;
  $3378 = getTempRet0() | 0;
  $3379 = _i64Add($3361 | 0, $3362 | 0, $84 | 0, $86 | 0) | 0;
  $3380 = getTempRet0() | 0;
  $3381 = _i64Add($3359 | 0, $3360 | 0, $161 | 0, $162 | 0) | 0;
  $3382 = getTempRet0() | 0;
  $3383 = _i64Add($3331 | 0, $3332 | 0, $197 | 0, $198 | 0) | 0;
  $3384 = getTempRet0() | 0;
  $3385 = _i64Add($96 | 0, $98 | 0, 18, 0) | 0;
  $3386 = getTempRet0() | 0;
  $3387 = _i64Add($3385 | 0, $3386 | 0, $3349 | 0, $3350 | 0) | 0;
  $3388 = getTempRet0() | 0;
  $3389 = $3371 ^ $105;
  $3390 = $3372 ^ $108;
  $3391 = $arrayidx11;
  $3392 = $3391;
  HEAP32[$3392 >> 2] = $3389;
  $3393 = $3391 + 4 | 0;
  $3394 = $3393;
  HEAP32[$3394 >> 2] = $3390;
  $3395 = $3373 ^ $111;
  $3396 = $3374 ^ $114;
  $3397 = $arrayidx16;
  $3398 = $3397;
  HEAP32[$3398 >> 2] = $3395;
  $3399 = $3397 + 4 | 0;
  $3400 = $3399;
  HEAP32[$3400 >> 2] = $3396;
  $3401 = $3375 ^ $117;
  $3402 = $3376 ^ $120;
  $3403 = $arrayidx21;
  $3404 = $3403;
  HEAP32[$3404 >> 2] = $3401;
  $3405 = $3403 + 4 | 0;
  $3406 = $3405;
  HEAP32[$3406 >> 2] = $3402;
  $3407 = $3377 ^ $123;
  $3408 = $3378 ^ $126;
  $3409 = $arrayidx26;
  $3410 = $3409;
  HEAP32[$3410 >> 2] = $3407;
  $3411 = $3409 + 4 | 0;
  $3412 = $3411;
  HEAP32[$3412 >> 2] = $3408;
  $3413 = $3379 ^ $129;
  $3414 = $3380 ^ $132;
  $3415 = $arrayidx31;
  $3416 = $3415;
  HEAP32[$3416 >> 2] = $3413;
  $3417 = $3415 + 4 | 0;
  $3418 = $3417;
  HEAP32[$3418 >> 2] = $3414;
  $3419 = $3381 ^ $135;
  $3420 = $3382 ^ $138;
  $3421 = $arrayidx36;
  $3422 = $3421;
  HEAP32[$3422 >> 2] = $3419;
  $3423 = $3421 + 4 | 0;
  $3424 = $3423;
  HEAP32[$3424 >> 2] = $3420;
  $3425 = $3383 ^ $141;
  $3426 = $3384 ^ $144;
  $3427 = $arrayidx41;
  $3428 = $3427;
  HEAP32[$3428 >> 2] = $3425;
  $3429 = $3427 + 4 | 0;
  $3430 = $3429;
  HEAP32[$3430 >> 2] = $3426;
  $3431 = $3387 ^ $147;
  $3432 = $3388 ^ $150;
  $3433 = $arrayidx46;
  $3434 = $3433;
  HEAP32[$3434 >> 2] = $3431;
  $3435 = $3433 + 4 | 0;
  $3436 = $3435;
  HEAP32[$3436 >> 2] = $3432;
  $3437 = $102 & -1073741825;
  $dec = $blkCnt$addr$0 + -1 | 0;
  $tobool = ($dec | 0) == 0;
  if ($tobool) {
   break;
  } else {
   $100$phi = $100;
   $102 = $3437;
   $63 = $65;
   $64 = $66;
   $68 = $3389;
   $70 = $3390;
   $72 = $3395;
   $74 = $3396;
   $76 = $3401;
   $78 = $3402;
   $80 = $3407;
   $82 = $3408;
   $84 = $3413;
   $86 = $3414;
   $88 = $3419;
   $90 = $3420;
   $92 = $3425;
   $94 = $3426;
   $96 = $3431;
   $98 = $3432;
   $blkCnt$addr$0 = $dec;
   $blkPtr$addr$0 = $add$ptr143;
   $100 = $100$phi;
  }
 }
 $3438 = ___muldi3($13 | 0, $14 | 0, $byteCntAdd | 0, 0) | 0;
 $3439 = getTempRet0() | 0;
 $3440 = _i64Add($2 | 0, $5 | 0, $3438 | 0, $3439 | 0) | 0;
 $3441 = getTempRet0() | 0;
 $3442 = $arrayidx;
 $3443 = $3442;
 HEAP32[$3443 >> 2] = $3440;
 $3444 = $3442 + 4 | 0;
 $3445 = $3444;
 HEAP32[$3445 >> 2] = $3441;
 $3446 = $arrayidx4;
 $3447 = $3446;
 HEAP32[$3447 >> 2] = $100;
 $3448 = $3446 + 4 | 0;
 $3449 = $3448;
 HEAP32[$3449 >> 2] = $3437;
 return;
}

function _sc_mulsub($s, $a, $b, $c) {
 $s = $s | 0;
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $a$idx = 0, $a$idx$val = 0, $a$idx854 = 0, $a$idx854$val = 0, $a$val = 0, $add$ptr103 = 0, $add$ptr103$idx = 0, $add$ptr103$idx$val = 0, $add$ptr103$idx840 = 0, $add$ptr103$idx840$val = 0, $add$ptr103$val = 0, $add$ptr11 = 0, $add$ptr111 = 0, $add$ptr111$idx = 0, $add$ptr111$idx$val = 0, $add$ptr111$idx839 = 0, $add$ptr111$idx839$val = 0, $add$ptr111$val = 0, $add$ptr115 = 0;
 var $add$ptr115$idx = 0, $add$ptr115$idx$val = 0, $add$ptr115$idx838 = 0, $add$ptr115$idx838$val = 0, $add$ptr115$val = 0, $add$ptr122 = 0, $add$ptr122$idx = 0, $add$ptr122$idx$val = 0, $add$ptr122$idx837 = 0, $add$ptr122$idx837$val = 0, $add$ptr122$val = 0, $add$ptr15 = 0, $add$ptr15$idx = 0, $add$ptr15$idx$val = 0, $add$ptr15$idx852 = 0, $add$ptr15$idx852$val = 0, $add$ptr15$val = 0, $add$ptr23 = 0, $add$ptr23$idx = 0, $add$ptr23$idx$val = 0;
 var $add$ptr23$idx851 = 0, $add$ptr23$idx851$val = 0, $add$ptr23$val = 0, $add$ptr27 = 0, $add$ptr27$idx = 0, $add$ptr27$idx$val = 0, $add$ptr27$idx850 = 0, $add$ptr27$idx850$val = 0, $add$ptr27$val = 0, $add$ptr3 = 0, $add$ptr3$idx = 0, $add$ptr3$idx$val = 0, $add$ptr3$idx853 = 0, $add$ptr3$idx853$val = 0, $add$ptr3$val = 0, $add$ptr34 = 0, $add$ptr34$idx = 0, $add$ptr34$idx$val = 0, $add$ptr34$idx849 = 0, $add$ptr34$idx849$val = 0;
 var $add$ptr34$val = 0, $add$ptr47 = 0, $add$ptr47$idx = 0, $add$ptr47$idx$val = 0, $add$ptr47$idx847 = 0, $add$ptr47$idx847$val = 0, $add$ptr47$val = 0, $add$ptr55 = 0, $add$ptr59 = 0, $add$ptr59$idx = 0, $add$ptr59$idx$val = 0, $add$ptr59$idx846 = 0, $add$ptr59$idx846$val = 0, $add$ptr59$val = 0, $add$ptr67 = 0, $add$ptr67$idx = 0, $add$ptr67$idx$val = 0, $add$ptr67$idx845 = 0, $add$ptr67$idx845$val = 0, $add$ptr67$val = 0;
 var $add$ptr71 = 0, $add$ptr71$idx = 0, $add$ptr71$idx$val = 0, $add$ptr71$idx844 = 0, $add$ptr71$idx844$val = 0, $add$ptr71$val = 0, $add$ptr78 = 0, $add$ptr78$idx = 0, $add$ptr78$idx$val = 0, $add$ptr78$idx843 = 0, $add$ptr78$idx843$val = 0, $add$ptr78$val = 0, $add$ptr91 = 0, $add$ptr91$idx = 0, $add$ptr91$idx$val = 0, $add$ptr91$idx841 = 0, $add$ptr91$idx841$val = 0, $add$ptr91$val = 0, $add$ptr99 = 0, $arrayidx1001 = 0;
 var $arrayidx1006 = 0, $arrayidx1009 = 0, $arrayidx1012 = 0, $arrayidx1015 = 0, $arrayidx906 = 0, $arrayidx910 = 0, $arrayidx913 = 0, $arrayidx916 = 0, $arrayidx921 = 0, $arrayidx924 = 0, $arrayidx929 = 0, $arrayidx932 = 0, $arrayidx935 = 0, $arrayidx940 = 0, $arrayidx943 = 0, $arrayidx946 = 0, $arrayidx951 = 0, $arrayidx954 = 0, $arrayidx959 = 0, $arrayidx962 = 0;
 var $arrayidx965 = 0, $arrayidx970 = 0, $arrayidx973 = 0, $arrayidx976 = 0, $arrayidx979 = 0, $arrayidx982 = 0, $arrayidx987 = 0, $arrayidx990 = 0, $arrayidx993 = 0, $arrayidx998 = 0, $b$idx = 0, $b$idx$val = 0, $b$idx848 = 0, $b$idx848$val = 0, $b$val = 0, $c$idx = 0, $c$idx$val = 0, $c$idx842 = 0, $c$idx842$val = 0, $c$val = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $a$val = HEAP8[$a >> 0] | 0;
 $a$idx = $a + 1 | 0;
 $a$idx$val = HEAP8[$a$idx >> 0] | 0;
 $a$idx854 = $a + 2 | 0;
 $a$idx854$val = HEAP8[$a$idx854 >> 0] | 0;
 $0 = _load_3($a$val, $a$idx$val, $a$idx854$val) | 0;
 $1 = getTempRet0() | 0;
 $2 = $0 & 2097151;
 $3 = _load_4($a$idx854) | 0;
 $4 = getTempRet0() | 0;
 $5 = _bitshift64Lshr($3 | 0, $4 | 0, 5) | 0;
 $6 = getTempRet0() | 0;
 $7 = $5 & 2097151;
 $add$ptr3 = $a + 5 | 0;
 $add$ptr3$val = HEAP8[$add$ptr3 >> 0] | 0;
 $add$ptr3$idx = $a + 6 | 0;
 $add$ptr3$idx$val = HEAP8[$add$ptr3$idx >> 0] | 0;
 $add$ptr3$idx853 = $a + 7 | 0;
 $add$ptr3$idx853$val = HEAP8[$add$ptr3$idx853 >> 0] | 0;
 $8 = _load_3($add$ptr3$val, $add$ptr3$idx$val, $add$ptr3$idx853$val) | 0;
 $9 = getTempRet0() | 0;
 $10 = _bitshift64Lshr($8 | 0, $9 | 0, 2) | 0;
 $11 = getTempRet0() | 0;
 $12 = $10 & 2097151;
 $13 = _load_4($add$ptr3$idx853) | 0;
 $14 = getTempRet0() | 0;
 $15 = _bitshift64Lshr($13 | 0, $14 | 0, 7) | 0;
 $16 = getTempRet0() | 0;
 $17 = $15 & 2097151;
 $add$ptr11 = $a + 10 | 0;
 $18 = _load_4($add$ptr11) | 0;
 $19 = getTempRet0() | 0;
 $20 = _bitshift64Lshr($18 | 0, $19 | 0, 4) | 0;
 $21 = getTempRet0() | 0;
 $22 = $20 & 2097151;
 $add$ptr15 = $a + 13 | 0;
 $add$ptr15$val = HEAP8[$add$ptr15 >> 0] | 0;
 $add$ptr15$idx = $a + 14 | 0;
 $add$ptr15$idx$val = HEAP8[$add$ptr15$idx >> 0] | 0;
 $add$ptr15$idx852 = $a + 15 | 0;
 $add$ptr15$idx852$val = HEAP8[$add$ptr15$idx852 >> 0] | 0;
 $23 = _load_3($add$ptr15$val, $add$ptr15$idx$val, $add$ptr15$idx852$val) | 0;
 $24 = getTempRet0() | 0;
 $25 = _bitshift64Lshr($23 | 0, $24 | 0, 1) | 0;
 $26 = getTempRet0() | 0;
 $27 = $25 & 2097151;
 $28 = _load_4($add$ptr15$idx852) | 0;
 $29 = getTempRet0() | 0;
 $30 = _bitshift64Lshr($28 | 0, $29 | 0, 6) | 0;
 $31 = getTempRet0() | 0;
 $32 = $30 & 2097151;
 $add$ptr23 = $a + 18 | 0;
 $add$ptr23$val = HEAP8[$add$ptr23 >> 0] | 0;
 $add$ptr23$idx = $a + 19 | 0;
 $add$ptr23$idx$val = HEAP8[$add$ptr23$idx >> 0] | 0;
 $add$ptr23$idx851 = $a + 20 | 0;
 $add$ptr23$idx851$val = HEAP8[$add$ptr23$idx851 >> 0] | 0;
 $33 = _load_3($add$ptr23$val, $add$ptr23$idx$val, $add$ptr23$idx851$val) | 0;
 $34 = getTempRet0() | 0;
 $35 = _bitshift64Lshr($33 | 0, $34 | 0, 3) | 0;
 $36 = getTempRet0() | 0;
 $37 = $35 & 2097151;
 $add$ptr27 = $a + 21 | 0;
 $add$ptr27$val = HEAP8[$add$ptr27 >> 0] | 0;
 $add$ptr27$idx = $a + 22 | 0;
 $add$ptr27$idx$val = HEAP8[$add$ptr27$idx >> 0] | 0;
 $add$ptr27$idx850 = $a + 23 | 0;
 $add$ptr27$idx850$val = HEAP8[$add$ptr27$idx850 >> 0] | 0;
 $38 = _load_3($add$ptr27$val, $add$ptr27$idx$val, $add$ptr27$idx850$val) | 0;
 $39 = getTempRet0() | 0;
 $40 = $38 & 2097151;
 $41 = _load_4($add$ptr27$idx850) | 0;
 $42 = getTempRet0() | 0;
 $43 = _bitshift64Lshr($41 | 0, $42 | 0, 5) | 0;
 $44 = getTempRet0() | 0;
 $45 = $43 & 2097151;
 $add$ptr34 = $a + 26 | 0;
 $add$ptr34$val = HEAP8[$add$ptr34 >> 0] | 0;
 $add$ptr34$idx = $a + 27 | 0;
 $add$ptr34$idx$val = HEAP8[$add$ptr34$idx >> 0] | 0;
 $add$ptr34$idx849 = $a + 28 | 0;
 $add$ptr34$idx849$val = HEAP8[$add$ptr34$idx849 >> 0] | 0;
 $46 = _load_3($add$ptr34$val, $add$ptr34$idx$val, $add$ptr34$idx849$val) | 0;
 $47 = getTempRet0() | 0;
 $48 = _bitshift64Lshr($46 | 0, $47 | 0, 2) | 0;
 $49 = getTempRet0() | 0;
 $50 = $48 & 2097151;
 $51 = _load_4($add$ptr34$idx849) | 0;
 $52 = getTempRet0() | 0;
 $53 = _bitshift64Lshr($51 | 0, $52 | 0, 7) | 0;
 $54 = getTempRet0() | 0;
 $b$val = HEAP8[$b >> 0] | 0;
 $b$idx = $b + 1 | 0;
 $b$idx$val = HEAP8[$b$idx >> 0] | 0;
 $b$idx848 = $b + 2 | 0;
 $b$idx848$val = HEAP8[$b$idx848 >> 0] | 0;
 $55 = _load_3($b$val, $b$idx$val, $b$idx848$val) | 0;
 $56 = getTempRet0() | 0;
 $57 = $55 & 2097151;
 $58 = _load_4($b$idx848) | 0;
 $59 = getTempRet0() | 0;
 $60 = _bitshift64Lshr($58 | 0, $59 | 0, 5) | 0;
 $61 = getTempRet0() | 0;
 $62 = $60 & 2097151;
 $add$ptr47 = $b + 5 | 0;
 $add$ptr47$val = HEAP8[$add$ptr47 >> 0] | 0;
 $add$ptr47$idx = $b + 6 | 0;
 $add$ptr47$idx$val = HEAP8[$add$ptr47$idx >> 0] | 0;
 $add$ptr47$idx847 = $b + 7 | 0;
 $add$ptr47$idx847$val = HEAP8[$add$ptr47$idx847 >> 0] | 0;
 $63 = _load_3($add$ptr47$val, $add$ptr47$idx$val, $add$ptr47$idx847$val) | 0;
 $64 = getTempRet0() | 0;
 $65 = _bitshift64Lshr($63 | 0, $64 | 0, 2) | 0;
 $66 = getTempRet0() | 0;
 $67 = $65 & 2097151;
 $68 = _load_4($add$ptr47$idx847) | 0;
 $69 = getTempRet0() | 0;
 $70 = _bitshift64Lshr($68 | 0, $69 | 0, 7) | 0;
 $71 = getTempRet0() | 0;
 $72 = $70 & 2097151;
 $add$ptr55 = $b + 10 | 0;
 $73 = _load_4($add$ptr55) | 0;
 $74 = getTempRet0() | 0;
 $75 = _bitshift64Lshr($73 | 0, $74 | 0, 4) | 0;
 $76 = getTempRet0() | 0;
 $77 = $75 & 2097151;
 $add$ptr59 = $b + 13 | 0;
 $add$ptr59$val = HEAP8[$add$ptr59 >> 0] | 0;
 $add$ptr59$idx = $b + 14 | 0;
 $add$ptr59$idx$val = HEAP8[$add$ptr59$idx >> 0] | 0;
 $add$ptr59$idx846 = $b + 15 | 0;
 $add$ptr59$idx846$val = HEAP8[$add$ptr59$idx846 >> 0] | 0;
 $78 = _load_3($add$ptr59$val, $add$ptr59$idx$val, $add$ptr59$idx846$val) | 0;
 $79 = getTempRet0() | 0;
 $80 = _bitshift64Lshr($78 | 0, $79 | 0, 1) | 0;
 $81 = getTempRet0() | 0;
 $82 = $80 & 2097151;
 $83 = _load_4($add$ptr59$idx846) | 0;
 $84 = getTempRet0() | 0;
 $85 = _bitshift64Lshr($83 | 0, $84 | 0, 6) | 0;
 $86 = getTempRet0() | 0;
 $87 = $85 & 2097151;
 $add$ptr67 = $b + 18 | 0;
 $add$ptr67$val = HEAP8[$add$ptr67 >> 0] | 0;
 $add$ptr67$idx = $b + 19 | 0;
 $add$ptr67$idx$val = HEAP8[$add$ptr67$idx >> 0] | 0;
 $add$ptr67$idx845 = $b + 20 | 0;
 $add$ptr67$idx845$val = HEAP8[$add$ptr67$idx845 >> 0] | 0;
 $88 = _load_3($add$ptr67$val, $add$ptr67$idx$val, $add$ptr67$idx845$val) | 0;
 $89 = getTempRet0() | 0;
 $90 = _bitshift64Lshr($88 | 0, $89 | 0, 3) | 0;
 $91 = getTempRet0() | 0;
 $92 = $90 & 2097151;
 $add$ptr71 = $b + 21 | 0;
 $add$ptr71$val = HEAP8[$add$ptr71 >> 0] | 0;
 $add$ptr71$idx = $b + 22 | 0;
 $add$ptr71$idx$val = HEAP8[$add$ptr71$idx >> 0] | 0;
 $add$ptr71$idx844 = $b + 23 | 0;
 $add$ptr71$idx844$val = HEAP8[$add$ptr71$idx844 >> 0] | 0;
 $93 = _load_3($add$ptr71$val, $add$ptr71$idx$val, $add$ptr71$idx844$val) | 0;
 $94 = getTempRet0() | 0;
 $95 = $93 & 2097151;
 $96 = _load_4($add$ptr71$idx844) | 0;
 $97 = getTempRet0() | 0;
 $98 = _bitshift64Lshr($96 | 0, $97 | 0, 5) | 0;
 $99 = getTempRet0() | 0;
 $100 = $98 & 2097151;
 $add$ptr78 = $b + 26 | 0;
 $add$ptr78$val = HEAP8[$add$ptr78 >> 0] | 0;
 $add$ptr78$idx = $b + 27 | 0;
 $add$ptr78$idx$val = HEAP8[$add$ptr78$idx >> 0] | 0;
 $add$ptr78$idx843 = $b + 28 | 0;
 $add$ptr78$idx843$val = HEAP8[$add$ptr78$idx843 >> 0] | 0;
 $101 = _load_3($add$ptr78$val, $add$ptr78$idx$val, $add$ptr78$idx843$val) | 0;
 $102 = getTempRet0() | 0;
 $103 = _bitshift64Lshr($101 | 0, $102 | 0, 2) | 0;
 $104 = getTempRet0() | 0;
 $105 = $103 & 2097151;
 $106 = _load_4($add$ptr78$idx843) | 0;
 $107 = getTempRet0() | 0;
 $108 = _bitshift64Lshr($106 | 0, $107 | 0, 7) | 0;
 $109 = getTempRet0() | 0;
 $c$val = HEAP8[$c >> 0] | 0;
 $c$idx = $c + 1 | 0;
 $c$idx$val = HEAP8[$c$idx >> 0] | 0;
 $c$idx842 = $c + 2 | 0;
 $c$idx842$val = HEAP8[$c$idx842 >> 0] | 0;
 $110 = _load_3($c$val, $c$idx$val, $c$idx842$val) | 0;
 $111 = getTempRet0() | 0;
 $112 = $110 & 2097151;
 $113 = _load_4($c$idx842) | 0;
 $114 = getTempRet0() | 0;
 $115 = _bitshift64Lshr($113 | 0, $114 | 0, 5) | 0;
 $116 = getTempRet0() | 0;
 $117 = $115 & 2097151;
 $add$ptr91 = $c + 5 | 0;
 $add$ptr91$val = HEAP8[$add$ptr91 >> 0] | 0;
 $add$ptr91$idx = $c + 6 | 0;
 $add$ptr91$idx$val = HEAP8[$add$ptr91$idx >> 0] | 0;
 $add$ptr91$idx841 = $c + 7 | 0;
 $add$ptr91$idx841$val = HEAP8[$add$ptr91$idx841 >> 0] | 0;
 $118 = _load_3($add$ptr91$val, $add$ptr91$idx$val, $add$ptr91$idx841$val) | 0;
 $119 = getTempRet0() | 0;
 $120 = _bitshift64Lshr($118 | 0, $119 | 0, 2) | 0;
 $121 = getTempRet0() | 0;
 $122 = $120 & 2097151;
 $123 = _load_4($add$ptr91$idx841) | 0;
 $124 = getTempRet0() | 0;
 $125 = _bitshift64Lshr($123 | 0, $124 | 0, 7) | 0;
 $126 = getTempRet0() | 0;
 $127 = $125 & 2097151;
 $add$ptr99 = $c + 10 | 0;
 $128 = _load_4($add$ptr99) | 0;
 $129 = getTempRet0() | 0;
 $130 = _bitshift64Lshr($128 | 0, $129 | 0, 4) | 0;
 $131 = getTempRet0() | 0;
 $132 = $130 & 2097151;
 $add$ptr103 = $c + 13 | 0;
 $add$ptr103$val = HEAP8[$add$ptr103 >> 0] | 0;
 $add$ptr103$idx = $c + 14 | 0;
 $add$ptr103$idx$val = HEAP8[$add$ptr103$idx >> 0] | 0;
 $add$ptr103$idx840 = $c + 15 | 0;
 $add$ptr103$idx840$val = HEAP8[$add$ptr103$idx840 >> 0] | 0;
 $133 = _load_3($add$ptr103$val, $add$ptr103$idx$val, $add$ptr103$idx840$val) | 0;
 $134 = getTempRet0() | 0;
 $135 = _bitshift64Lshr($133 | 0, $134 | 0, 1) | 0;
 $136 = getTempRet0() | 0;
 $137 = $135 & 2097151;
 $138 = _load_4($add$ptr103$idx840) | 0;
 $139 = getTempRet0() | 0;
 $140 = _bitshift64Lshr($138 | 0, $139 | 0, 6) | 0;
 $141 = getTempRet0() | 0;
 $142 = $140 & 2097151;
 $add$ptr111 = $c + 18 | 0;
 $add$ptr111$val = HEAP8[$add$ptr111 >> 0] | 0;
 $add$ptr111$idx = $c + 19 | 0;
 $add$ptr111$idx$val = HEAP8[$add$ptr111$idx >> 0] | 0;
 $add$ptr111$idx839 = $c + 20 | 0;
 $add$ptr111$idx839$val = HEAP8[$add$ptr111$idx839 >> 0] | 0;
 $143 = _load_3($add$ptr111$val, $add$ptr111$idx$val, $add$ptr111$idx839$val) | 0;
 $144 = getTempRet0() | 0;
 $145 = _bitshift64Lshr($143 | 0, $144 | 0, 3) | 0;
 $146 = getTempRet0() | 0;
 $147 = $145 & 2097151;
 $add$ptr115 = $c + 21 | 0;
 $add$ptr115$val = HEAP8[$add$ptr115 >> 0] | 0;
 $add$ptr115$idx = $c + 22 | 0;
 $add$ptr115$idx$val = HEAP8[$add$ptr115$idx >> 0] | 0;
 $add$ptr115$idx838 = $c + 23 | 0;
 $add$ptr115$idx838$val = HEAP8[$add$ptr115$idx838 >> 0] | 0;
 $148 = _load_3($add$ptr115$val, $add$ptr115$idx$val, $add$ptr115$idx838$val) | 0;
 $149 = getTempRet0() | 0;
 $150 = $148 & 2097151;
 $151 = _load_4($add$ptr115$idx838) | 0;
 $152 = getTempRet0() | 0;
 $153 = _bitshift64Lshr($151 | 0, $152 | 0, 5) | 0;
 $154 = getTempRet0() | 0;
 $155 = $153 & 2097151;
 $add$ptr122 = $c + 26 | 0;
 $add$ptr122$val = HEAP8[$add$ptr122 >> 0] | 0;
 $add$ptr122$idx = $c + 27 | 0;
 $add$ptr122$idx$val = HEAP8[$add$ptr122$idx >> 0] | 0;
 $add$ptr122$idx837 = $c + 28 | 0;
 $add$ptr122$idx837$val = HEAP8[$add$ptr122$idx837 >> 0] | 0;
 $156 = _load_3($add$ptr122$val, $add$ptr122$idx$val, $add$ptr122$idx837$val) | 0;
 $157 = getTempRet0() | 0;
 $158 = _bitshift64Lshr($156 | 0, $157 | 0, 2) | 0;
 $159 = getTempRet0() | 0;
 $160 = $158 & 2097151;
 $161 = _load_4($add$ptr122$idx837) | 0;
 $162 = getTempRet0() | 0;
 $163 = _bitshift64Lshr($161 | 0, $162 | 0, 7) | 0;
 $164 = getTempRet0() | 0;
 $165 = ___muldi3($57 | 0, 0, $2 | 0, 0) | 0;
 $166 = getTempRet0() | 0;
 $167 = _i64Subtract($112 | 0, 0, $165 | 0, $166 | 0) | 0;
 $168 = getTempRet0() | 0;
 $169 = ___muldi3($57 | 0, 0, $7 | 0, 0) | 0;
 $170 = getTempRet0() | 0;
 $171 = ___muldi3($62 | 0, 0, $2 | 0, 0) | 0;
 $172 = getTempRet0() | 0;
 $173 = ___muldi3($57 | 0, 0, $12 | 0, 0) | 0;
 $174 = getTempRet0() | 0;
 $175 = ___muldi3($62 | 0, 0, $7 | 0, 0) | 0;
 $176 = getTempRet0() | 0;
 $177 = ___muldi3($67 | 0, 0, $2 | 0, 0) | 0;
 $178 = getTempRet0() | 0;
 $179 = _i64Add($175 | 0, $176 | 0, $173 | 0, $174 | 0) | 0;
 $180 = getTempRet0() | 0;
 $181 = _i64Add($179 | 0, $180 | 0, $177 | 0, $178 | 0) | 0;
 $182 = getTempRet0() | 0;
 $183 = _i64Subtract($122 | 0, 0, $181 | 0, $182 | 0) | 0;
 $184 = getTempRet0() | 0;
 $185 = ___muldi3($57 | 0, 0, $17 | 0, 0) | 0;
 $186 = getTempRet0() | 0;
 $187 = ___muldi3($62 | 0, 0, $12 | 0, 0) | 0;
 $188 = getTempRet0() | 0;
 $189 = ___muldi3($67 | 0, 0, $7 | 0, 0) | 0;
 $190 = getTempRet0() | 0;
 $191 = ___muldi3($72 | 0, 0, $2 | 0, 0) | 0;
 $192 = getTempRet0() | 0;
 $193 = ___muldi3($57 | 0, 0, $22 | 0, 0) | 0;
 $194 = getTempRet0() | 0;
 $195 = ___muldi3($62 | 0, 0, $17 | 0, 0) | 0;
 $196 = getTempRet0() | 0;
 $197 = ___muldi3($67 | 0, 0, $12 | 0, 0) | 0;
 $198 = getTempRet0() | 0;
 $199 = ___muldi3($72 | 0, 0, $7 | 0, 0) | 0;
 $200 = getTempRet0() | 0;
 $201 = ___muldi3($77 | 0, 0, $2 | 0, 0) | 0;
 $202 = getTempRet0() | 0;
 $203 = _i64Add($195 | 0, $196 | 0, $193 | 0, $194 | 0) | 0;
 $204 = getTempRet0() | 0;
 $205 = _i64Add($203 | 0, $204 | 0, $197 | 0, $198 | 0) | 0;
 $206 = getTempRet0() | 0;
 $207 = _i64Add($205 | 0, $206 | 0, $199 | 0, $200 | 0) | 0;
 $208 = getTempRet0() | 0;
 $209 = _i64Add($207 | 0, $208 | 0, $201 | 0, $202 | 0) | 0;
 $210 = getTempRet0() | 0;
 $211 = _i64Subtract($132 | 0, 0, $209 | 0, $210 | 0) | 0;
 $212 = getTempRet0() | 0;
 $213 = ___muldi3($57 | 0, 0, $27 | 0, 0) | 0;
 $214 = getTempRet0() | 0;
 $215 = ___muldi3($62 | 0, 0, $22 | 0, 0) | 0;
 $216 = getTempRet0() | 0;
 $217 = ___muldi3($67 | 0, 0, $17 | 0, 0) | 0;
 $218 = getTempRet0() | 0;
 $219 = ___muldi3($72 | 0, 0, $12 | 0, 0) | 0;
 $220 = getTempRet0() | 0;
 $221 = ___muldi3($77 | 0, 0, $7 | 0, 0) | 0;
 $222 = getTempRet0() | 0;
 $223 = ___muldi3($82 | 0, 0, $2 | 0, 0) | 0;
 $224 = getTempRet0() | 0;
 $225 = ___muldi3($57 | 0, 0, $32 | 0, 0) | 0;
 $226 = getTempRet0() | 0;
 $227 = ___muldi3($62 | 0, 0, $27 | 0, 0) | 0;
 $228 = getTempRet0() | 0;
 $229 = ___muldi3($67 | 0, 0, $22 | 0, 0) | 0;
 $230 = getTempRet0() | 0;
 $231 = ___muldi3($72 | 0, 0, $17 | 0, 0) | 0;
 $232 = getTempRet0() | 0;
 $233 = ___muldi3($77 | 0, 0, $12 | 0, 0) | 0;
 $234 = getTempRet0() | 0;
 $235 = ___muldi3($82 | 0, 0, $7 | 0, 0) | 0;
 $236 = getTempRet0() | 0;
 $237 = ___muldi3($87 | 0, 0, $2 | 0, 0) | 0;
 $238 = getTempRet0() | 0;
 $239 = _i64Add($227 | 0, $228 | 0, $225 | 0, $226 | 0) | 0;
 $240 = getTempRet0() | 0;
 $241 = _i64Add($239 | 0, $240 | 0, $229 | 0, $230 | 0) | 0;
 $242 = getTempRet0() | 0;
 $243 = _i64Add($241 | 0, $242 | 0, $231 | 0, $232 | 0) | 0;
 $244 = getTempRet0() | 0;
 $245 = _i64Add($243 | 0, $244 | 0, $233 | 0, $234 | 0) | 0;
 $246 = getTempRet0() | 0;
 $247 = _i64Add($245 | 0, $246 | 0, $235 | 0, $236 | 0) | 0;
 $248 = getTempRet0() | 0;
 $249 = _i64Add($247 | 0, $248 | 0, $237 | 0, $238 | 0) | 0;
 $250 = getTempRet0() | 0;
 $251 = _i64Subtract($142 | 0, 0, $249 | 0, $250 | 0) | 0;
 $252 = getTempRet0() | 0;
 $253 = ___muldi3($57 | 0, 0, $37 | 0, 0) | 0;
 $254 = getTempRet0() | 0;
 $255 = ___muldi3($62 | 0, 0, $32 | 0, 0) | 0;
 $256 = getTempRet0() | 0;
 $257 = ___muldi3($67 | 0, 0, $27 | 0, 0) | 0;
 $258 = getTempRet0() | 0;
 $259 = ___muldi3($72 | 0, 0, $22 | 0, 0) | 0;
 $260 = getTempRet0() | 0;
 $261 = ___muldi3($77 | 0, 0, $17 | 0, 0) | 0;
 $262 = getTempRet0() | 0;
 $263 = ___muldi3($82 | 0, 0, $12 | 0, 0) | 0;
 $264 = getTempRet0() | 0;
 $265 = ___muldi3($87 | 0, 0, $7 | 0, 0) | 0;
 $266 = getTempRet0() | 0;
 $267 = ___muldi3($92 | 0, 0, $2 | 0, 0) | 0;
 $268 = getTempRet0() | 0;
 $269 = ___muldi3($57 | 0, 0, $40 | 0, 0) | 0;
 $270 = getTempRet0() | 0;
 $271 = ___muldi3($62 | 0, 0, $37 | 0, 0) | 0;
 $272 = getTempRet0() | 0;
 $273 = ___muldi3($67 | 0, 0, $32 | 0, 0) | 0;
 $274 = getTempRet0() | 0;
 $275 = ___muldi3($72 | 0, 0, $27 | 0, 0) | 0;
 $276 = getTempRet0() | 0;
 $277 = ___muldi3($77 | 0, 0, $22 | 0, 0) | 0;
 $278 = getTempRet0() | 0;
 $279 = ___muldi3($82 | 0, 0, $17 | 0, 0) | 0;
 $280 = getTempRet0() | 0;
 $281 = ___muldi3($87 | 0, 0, $12 | 0, 0) | 0;
 $282 = getTempRet0() | 0;
 $283 = ___muldi3($92 | 0, 0, $7 | 0, 0) | 0;
 $284 = getTempRet0() | 0;
 $285 = ___muldi3($95 | 0, 0, $2 | 0, 0) | 0;
 $286 = getTempRet0() | 0;
 $287 = _i64Add($271 | 0, $272 | 0, $269 | 0, $270 | 0) | 0;
 $288 = getTempRet0() | 0;
 $289 = _i64Add($287 | 0, $288 | 0, $273 | 0, $274 | 0) | 0;
 $290 = getTempRet0() | 0;
 $291 = _i64Add($289 | 0, $290 | 0, $275 | 0, $276 | 0) | 0;
 $292 = getTempRet0() | 0;
 $293 = _i64Add($291 | 0, $292 | 0, $277 | 0, $278 | 0) | 0;
 $294 = getTempRet0() | 0;
 $295 = _i64Add($293 | 0, $294 | 0, $279 | 0, $280 | 0) | 0;
 $296 = getTempRet0() | 0;
 $297 = _i64Add($295 | 0, $296 | 0, $281 | 0, $282 | 0) | 0;
 $298 = getTempRet0() | 0;
 $299 = _i64Add($297 | 0, $298 | 0, $283 | 0, $284 | 0) | 0;
 $300 = getTempRet0() | 0;
 $301 = _i64Add($299 | 0, $300 | 0, $285 | 0, $286 | 0) | 0;
 $302 = getTempRet0() | 0;
 $303 = _i64Subtract($150 | 0, 0, $301 | 0, $302 | 0) | 0;
 $304 = getTempRet0() | 0;
 $305 = ___muldi3($57 | 0, 0, $45 | 0, 0) | 0;
 $306 = getTempRet0() | 0;
 $307 = ___muldi3($62 | 0, 0, $40 | 0, 0) | 0;
 $308 = getTempRet0() | 0;
 $309 = ___muldi3($67 | 0, 0, $37 | 0, 0) | 0;
 $310 = getTempRet0() | 0;
 $311 = ___muldi3($72 | 0, 0, $32 | 0, 0) | 0;
 $312 = getTempRet0() | 0;
 $313 = ___muldi3($77 | 0, 0, $27 | 0, 0) | 0;
 $314 = getTempRet0() | 0;
 $315 = ___muldi3($82 | 0, 0, $22 | 0, 0) | 0;
 $316 = getTempRet0() | 0;
 $317 = ___muldi3($87 | 0, 0, $17 | 0, 0) | 0;
 $318 = getTempRet0() | 0;
 $319 = ___muldi3($92 | 0, 0, $12 | 0, 0) | 0;
 $320 = getTempRet0() | 0;
 $321 = ___muldi3($95 | 0, 0, $7 | 0, 0) | 0;
 $322 = getTempRet0() | 0;
 $323 = ___muldi3($100 | 0, 0, $2 | 0, 0) | 0;
 $324 = getTempRet0() | 0;
 $325 = ___muldi3($57 | 0, 0, $50 | 0, 0) | 0;
 $326 = getTempRet0() | 0;
 $327 = ___muldi3($62 | 0, 0, $45 | 0, 0) | 0;
 $328 = getTempRet0() | 0;
 $329 = ___muldi3($67 | 0, 0, $40 | 0, 0) | 0;
 $330 = getTempRet0() | 0;
 $331 = ___muldi3($72 | 0, 0, $37 | 0, 0) | 0;
 $332 = getTempRet0() | 0;
 $333 = ___muldi3($77 | 0, 0, $32 | 0, 0) | 0;
 $334 = getTempRet0() | 0;
 $335 = ___muldi3($82 | 0, 0, $27 | 0, 0) | 0;
 $336 = getTempRet0() | 0;
 $337 = ___muldi3($87 | 0, 0, $22 | 0, 0) | 0;
 $338 = getTempRet0() | 0;
 $339 = ___muldi3($92 | 0, 0, $17 | 0, 0) | 0;
 $340 = getTempRet0() | 0;
 $341 = ___muldi3($95 | 0, 0, $12 | 0, 0) | 0;
 $342 = getTempRet0() | 0;
 $343 = ___muldi3($100 | 0, 0, $7 | 0, 0) | 0;
 $344 = getTempRet0() | 0;
 $345 = ___muldi3($105 | 0, 0, $2 | 0, 0) | 0;
 $346 = getTempRet0() | 0;
 $347 = _i64Add($327 | 0, $328 | 0, $325 | 0, $326 | 0) | 0;
 $348 = getTempRet0() | 0;
 $349 = _i64Add($347 | 0, $348 | 0, $329 | 0, $330 | 0) | 0;
 $350 = getTempRet0() | 0;
 $351 = _i64Add($349 | 0, $350 | 0, $331 | 0, $332 | 0) | 0;
 $352 = getTempRet0() | 0;
 $353 = _i64Add($351 | 0, $352 | 0, $333 | 0, $334 | 0) | 0;
 $354 = getTempRet0() | 0;
 $355 = _i64Add($353 | 0, $354 | 0, $335 | 0, $336 | 0) | 0;
 $356 = getTempRet0() | 0;
 $357 = _i64Add($355 | 0, $356 | 0, $337 | 0, $338 | 0) | 0;
 $358 = getTempRet0() | 0;
 $359 = _i64Add($357 | 0, $358 | 0, $339 | 0, $340 | 0) | 0;
 $360 = getTempRet0() | 0;
 $361 = _i64Add($359 | 0, $360 | 0, $341 | 0, $342 | 0) | 0;
 $362 = getTempRet0() | 0;
 $363 = _i64Add($361 | 0, $362 | 0, $343 | 0, $344 | 0) | 0;
 $364 = getTempRet0() | 0;
 $365 = _i64Add($363 | 0, $364 | 0, $345 | 0, $346 | 0) | 0;
 $366 = getTempRet0() | 0;
 $367 = _i64Subtract($160 | 0, 0, $365 | 0, $366 | 0) | 0;
 $368 = getTempRet0() | 0;
 $369 = ___muldi3($57 | 0, 0, $53 | 0, $54 | 0) | 0;
 $370 = getTempRet0() | 0;
 $371 = ___muldi3($62 | 0, 0, $50 | 0, 0) | 0;
 $372 = getTempRet0() | 0;
 $373 = ___muldi3($67 | 0, 0, $45 | 0, 0) | 0;
 $374 = getTempRet0() | 0;
 $375 = ___muldi3($72 | 0, 0, $40 | 0, 0) | 0;
 $376 = getTempRet0() | 0;
 $377 = ___muldi3($77 | 0, 0, $37 | 0, 0) | 0;
 $378 = getTempRet0() | 0;
 $379 = ___muldi3($82 | 0, 0, $32 | 0, 0) | 0;
 $380 = getTempRet0() | 0;
 $381 = ___muldi3($87 | 0, 0, $27 | 0, 0) | 0;
 $382 = getTempRet0() | 0;
 $383 = ___muldi3($92 | 0, 0, $22 | 0, 0) | 0;
 $384 = getTempRet0() | 0;
 $385 = ___muldi3($95 | 0, 0, $17 | 0, 0) | 0;
 $386 = getTempRet0() | 0;
 $387 = ___muldi3($100 | 0, 0, $12 | 0, 0) | 0;
 $388 = getTempRet0() | 0;
 $389 = ___muldi3($108 | 0, $109 | 0, $2 | 0, 0) | 0;
 $390 = getTempRet0() | 0;
 $391 = ___muldi3($105 | 0, 0, $7 | 0, 0) | 0;
 $392 = getTempRet0() | 0;
 $393 = ___muldi3($108 | 0, $109 | 0, $7 | 0, 0) | 0;
 $394 = getTempRet0() | 0;
 $395 = ___muldi3($105 | 0, 0, $12 | 0, 0) | 0;
 $396 = getTempRet0() | 0;
 $397 = ___muldi3($100 | 0, 0, $17 | 0, 0) | 0;
 $398 = getTempRet0() | 0;
 $399 = ___muldi3($95 | 0, 0, $22 | 0, 0) | 0;
 $400 = getTempRet0() | 0;
 $401 = ___muldi3($92 | 0, 0, $27 | 0, 0) | 0;
 $402 = getTempRet0() | 0;
 $403 = ___muldi3($87 | 0, 0, $32 | 0, 0) | 0;
 $404 = getTempRet0() | 0;
 $405 = ___muldi3($82 | 0, 0, $37 | 0, 0) | 0;
 $406 = getTempRet0() | 0;
 $407 = ___muldi3($77 | 0, 0, $40 | 0, 0) | 0;
 $408 = getTempRet0() | 0;
 $409 = ___muldi3($72 | 0, 0, $45 | 0, 0) | 0;
 $410 = getTempRet0() | 0;
 $411 = ___muldi3($67 | 0, 0, $50 | 0, 0) | 0;
 $412 = getTempRet0() | 0;
 $413 = ___muldi3($62 | 0, 0, $53 | 0, $54 | 0) | 0;
 $414 = getTempRet0() | 0;
 $415 = _i64Add($411 | 0, $412 | 0, $413 | 0, $414 | 0) | 0;
 $416 = getTempRet0() | 0;
 $417 = _i64Add($415 | 0, $416 | 0, $409 | 0, $410 | 0) | 0;
 $418 = getTempRet0() | 0;
 $419 = _i64Add($417 | 0, $418 | 0, $407 | 0, $408 | 0) | 0;
 $420 = getTempRet0() | 0;
 $421 = _i64Add($419 | 0, $420 | 0, $405 | 0, $406 | 0) | 0;
 $422 = getTempRet0() | 0;
 $423 = _i64Add($421 | 0, $422 | 0, $403 | 0, $404 | 0) | 0;
 $424 = getTempRet0() | 0;
 $425 = _i64Add($423 | 0, $424 | 0, $401 | 0, $402 | 0) | 0;
 $426 = getTempRet0() | 0;
 $427 = _i64Add($425 | 0, $426 | 0, $399 | 0, $400 | 0) | 0;
 $428 = getTempRet0() | 0;
 $429 = _i64Add($427 | 0, $428 | 0, $397 | 0, $398 | 0) | 0;
 $430 = getTempRet0() | 0;
 $431 = _i64Add($429 | 0, $430 | 0, $395 | 0, $396 | 0) | 0;
 $432 = getTempRet0() | 0;
 $433 = _i64Add($431 | 0, $432 | 0, $393 | 0, $394 | 0) | 0;
 $434 = getTempRet0() | 0;
 $435 = ___muldi3($108 | 0, $109 | 0, $17 | 0, 0) | 0;
 $436 = getTempRet0() | 0;
 $437 = ___muldi3($105 | 0, 0, $22 | 0, 0) | 0;
 $438 = getTempRet0() | 0;
 $439 = ___muldi3($100 | 0, 0, $27 | 0, 0) | 0;
 $440 = getTempRet0() | 0;
 $441 = ___muldi3($95 | 0, 0, $32 | 0, 0) | 0;
 $442 = getTempRet0() | 0;
 $443 = ___muldi3($92 | 0, 0, $37 | 0, 0) | 0;
 $444 = getTempRet0() | 0;
 $445 = ___muldi3($87 | 0, 0, $40 | 0, 0) | 0;
 $446 = getTempRet0() | 0;
 $447 = ___muldi3($82 | 0, 0, $45 | 0, 0) | 0;
 $448 = getTempRet0() | 0;
 $449 = ___muldi3($77 | 0, 0, $50 | 0, 0) | 0;
 $450 = getTempRet0() | 0;
 $451 = ___muldi3($72 | 0, 0, $53 | 0, $54 | 0) | 0;
 $452 = getTempRet0() | 0;
 $453 = _i64Add($449 | 0, $450 | 0, $451 | 0, $452 | 0) | 0;
 $454 = getTempRet0() | 0;
 $455 = _i64Add($453 | 0, $454 | 0, $447 | 0, $448 | 0) | 0;
 $456 = getTempRet0() | 0;
 $457 = _i64Add($455 | 0, $456 | 0, $445 | 0, $446 | 0) | 0;
 $458 = getTempRet0() | 0;
 $459 = _i64Add($457 | 0, $458 | 0, $443 | 0, $444 | 0) | 0;
 $460 = getTempRet0() | 0;
 $461 = _i64Add($459 | 0, $460 | 0, $441 | 0, $442 | 0) | 0;
 $462 = getTempRet0() | 0;
 $463 = _i64Add($461 | 0, $462 | 0, $439 | 0, $440 | 0) | 0;
 $464 = getTempRet0() | 0;
 $465 = _i64Add($463 | 0, $464 | 0, $437 | 0, $438 | 0) | 0;
 $466 = getTempRet0() | 0;
 $467 = _i64Add($465 | 0, $466 | 0, $435 | 0, $436 | 0) | 0;
 $468 = getTempRet0() | 0;
 $469 = ___muldi3($108 | 0, $109 | 0, $27 | 0, 0) | 0;
 $470 = getTempRet0() | 0;
 $471 = ___muldi3($105 | 0, 0, $32 | 0, 0) | 0;
 $472 = getTempRet0() | 0;
 $473 = ___muldi3($100 | 0, 0, $37 | 0, 0) | 0;
 $474 = getTempRet0() | 0;
 $475 = ___muldi3($95 | 0, 0, $40 | 0, 0) | 0;
 $476 = getTempRet0() | 0;
 $477 = ___muldi3($92 | 0, 0, $45 | 0, 0) | 0;
 $478 = getTempRet0() | 0;
 $479 = ___muldi3($87 | 0, 0, $50 | 0, 0) | 0;
 $480 = getTempRet0() | 0;
 $481 = ___muldi3($82 | 0, 0, $53 | 0, $54 | 0) | 0;
 $482 = getTempRet0() | 0;
 $483 = _i64Add($479 | 0, $480 | 0, $481 | 0, $482 | 0) | 0;
 $484 = getTempRet0() | 0;
 $485 = _i64Add($483 | 0, $484 | 0, $477 | 0, $478 | 0) | 0;
 $486 = getTempRet0() | 0;
 $487 = _i64Add($485 | 0, $486 | 0, $475 | 0, $476 | 0) | 0;
 $488 = getTempRet0() | 0;
 $489 = _i64Add($487 | 0, $488 | 0, $473 | 0, $474 | 0) | 0;
 $490 = getTempRet0() | 0;
 $491 = _i64Add($489 | 0, $490 | 0, $471 | 0, $472 | 0) | 0;
 $492 = getTempRet0() | 0;
 $493 = _i64Add($491 | 0, $492 | 0, $469 | 0, $470 | 0) | 0;
 $494 = getTempRet0() | 0;
 $495 = ___muldi3($108 | 0, $109 | 0, $37 | 0, 0) | 0;
 $496 = getTempRet0() | 0;
 $497 = ___muldi3($105 | 0, 0, $40 | 0, 0) | 0;
 $498 = getTempRet0() | 0;
 $499 = ___muldi3($100 | 0, 0, $45 | 0, 0) | 0;
 $500 = getTempRet0() | 0;
 $501 = ___muldi3($95 | 0, 0, $50 | 0, 0) | 0;
 $502 = getTempRet0() | 0;
 $503 = ___muldi3($92 | 0, 0, $53 | 0, $54 | 0) | 0;
 $504 = getTempRet0() | 0;
 $505 = _i64Add($501 | 0, $502 | 0, $503 | 0, $504 | 0) | 0;
 $506 = getTempRet0() | 0;
 $507 = _i64Add($505 | 0, $506 | 0, $499 | 0, $500 | 0) | 0;
 $508 = getTempRet0() | 0;
 $509 = _i64Add($507 | 0, $508 | 0, $497 | 0, $498 | 0) | 0;
 $510 = getTempRet0() | 0;
 $511 = _i64Add($509 | 0, $510 | 0, $495 | 0, $496 | 0) | 0;
 $512 = getTempRet0() | 0;
 $513 = ___muldi3($108 | 0, $109 | 0, $45 | 0, 0) | 0;
 $514 = getTempRet0() | 0;
 $515 = ___muldi3($105 | 0, 0, $50 | 0, 0) | 0;
 $516 = getTempRet0() | 0;
 $517 = ___muldi3($100 | 0, 0, $53 | 0, $54 | 0) | 0;
 $518 = getTempRet0() | 0;
 $519 = _i64Add($515 | 0, $516 | 0, $517 | 0, $518 | 0) | 0;
 $520 = getTempRet0() | 0;
 $521 = _i64Add($519 | 0, $520 | 0, $513 | 0, $514 | 0) | 0;
 $522 = getTempRet0() | 0;
 $523 = _i64Subtract(0, 0, $53 | 0, $54 | 0) | 0;
 $524 = getTempRet0() | 0;
 $525 = ___muldi3($108 | 0, $109 | 0, $523 | 0, $524 | 0) | 0;
 $526 = getTempRet0() | 0;
 $527 = _i64Add($167 | 0, $168 | 0, 1048576, 0) | 0;
 $528 = getTempRet0() | 0;
 $529 = _bitshift64Ashr($527 | 0, $528 | 0, 21) | 0;
 $530 = getTempRet0() | 0;
 $531 = _i64Add($171 | 0, $172 | 0, $169 | 0, $170 | 0) | 0;
 $532 = getTempRet0() | 0;
 $533 = _i64Add($529 | 0, $530 | 0, $117 | 0, 0) | 0;
 $534 = getTempRet0() | 0;
 $535 = _i64Subtract($533 | 0, $534 | 0, $531 | 0, $532 | 0) | 0;
 $536 = getTempRet0() | 0;
 $537 = $527 & -2097152;
 $538 = _i64Subtract($167 | 0, $168 | 0, $537 | 0, $528 | 0) | 0;
 $539 = getTempRet0() | 0;
 $540 = _i64Add($183 | 0, $184 | 0, 1048576, 0) | 0;
 $541 = getTempRet0() | 0;
 $542 = _bitshift64Ashr($540 | 0, $541 | 0, 21) | 0;
 $543 = getTempRet0() | 0;
 $544 = _i64Add($187 | 0, $188 | 0, $185 | 0, $186 | 0) | 0;
 $545 = getTempRet0() | 0;
 $546 = _i64Add($544 | 0, $545 | 0, $189 | 0, $190 | 0) | 0;
 $547 = getTempRet0() | 0;
 $548 = _i64Add($546 | 0, $547 | 0, $191 | 0, $192 | 0) | 0;
 $549 = getTempRet0() | 0;
 $550 = _i64Add($542 | 0, $543 | 0, $127 | 0, 0) | 0;
 $551 = getTempRet0() | 0;
 $552 = _i64Subtract($550 | 0, $551 | 0, $548 | 0, $549 | 0) | 0;
 $553 = getTempRet0() | 0;
 $554 = $540 & -2097152;
 $555 = _i64Add($211 | 0, $212 | 0, 1048576, 0) | 0;
 $556 = getTempRet0() | 0;
 $557 = _bitshift64Ashr($555 | 0, $556 | 0, 21) | 0;
 $558 = getTempRet0() | 0;
 $559 = _i64Add($215 | 0, $216 | 0, $213 | 0, $214 | 0) | 0;
 $560 = getTempRet0() | 0;
 $561 = _i64Add($559 | 0, $560 | 0, $217 | 0, $218 | 0) | 0;
 $562 = getTempRet0() | 0;
 $563 = _i64Add($561 | 0, $562 | 0, $219 | 0, $220 | 0) | 0;
 $564 = getTempRet0() | 0;
 $565 = _i64Add($563 | 0, $564 | 0, $221 | 0, $222 | 0) | 0;
 $566 = getTempRet0() | 0;
 $567 = _i64Add($565 | 0, $566 | 0, $223 | 0, $224 | 0) | 0;
 $568 = getTempRet0() | 0;
 $569 = _i64Add($137 | 0, 0, $557 | 0, $558 | 0) | 0;
 $570 = getTempRet0() | 0;
 $571 = _i64Subtract($569 | 0, $570 | 0, $567 | 0, $568 | 0) | 0;
 $572 = getTempRet0() | 0;
 $573 = $555 & -2097152;
 $574 = _i64Subtract($211 | 0, $212 | 0, $573 | 0, $556 | 0) | 0;
 $575 = getTempRet0() | 0;
 $576 = _i64Add($251 | 0, $252 | 0, 1048576, 0) | 0;
 $577 = getTempRet0() | 0;
 $578 = _bitshift64Ashr($576 | 0, $577 | 0, 21) | 0;
 $579 = getTempRet0() | 0;
 $580 = _i64Add($255 | 0, $256 | 0, $253 | 0, $254 | 0) | 0;
 $581 = getTempRet0() | 0;
 $582 = _i64Add($580 | 0, $581 | 0, $257 | 0, $258 | 0) | 0;
 $583 = getTempRet0() | 0;
 $584 = _i64Add($582 | 0, $583 | 0, $259 | 0, $260 | 0) | 0;
 $585 = getTempRet0() | 0;
 $586 = _i64Add($584 | 0, $585 | 0, $261 | 0, $262 | 0) | 0;
 $587 = getTempRet0() | 0;
 $588 = _i64Add($586 | 0, $587 | 0, $263 | 0, $264 | 0) | 0;
 $589 = getTempRet0() | 0;
 $590 = _i64Add($588 | 0, $589 | 0, $265 | 0, $266 | 0) | 0;
 $591 = getTempRet0() | 0;
 $592 = _i64Add($590 | 0, $591 | 0, $267 | 0, $268 | 0) | 0;
 $593 = getTempRet0() | 0;
 $594 = _i64Add($147 | 0, 0, $578 | 0, $579 | 0) | 0;
 $595 = getTempRet0() | 0;
 $596 = _i64Subtract($594 | 0, $595 | 0, $592 | 0, $593 | 0) | 0;
 $597 = getTempRet0() | 0;
 $598 = $576 & -2097152;
 $599 = _i64Add($303 | 0, $304 | 0, 1048576, 0) | 0;
 $600 = getTempRet0() | 0;
 $601 = _bitshift64Ashr($599 | 0, $600 | 0, 21) | 0;
 $602 = getTempRet0() | 0;
 $603 = _i64Add($307 | 0, $308 | 0, $305 | 0, $306 | 0) | 0;
 $604 = getTempRet0() | 0;
 $605 = _i64Add($603 | 0, $604 | 0, $309 | 0, $310 | 0) | 0;
 $606 = getTempRet0() | 0;
 $607 = _i64Add($605 | 0, $606 | 0, $311 | 0, $312 | 0) | 0;
 $608 = getTempRet0() | 0;
 $609 = _i64Add($607 | 0, $608 | 0, $313 | 0, $314 | 0) | 0;
 $610 = getTempRet0() | 0;
 $611 = _i64Add($609 | 0, $610 | 0, $315 | 0, $316 | 0) | 0;
 $612 = getTempRet0() | 0;
 $613 = _i64Add($611 | 0, $612 | 0, $317 | 0, $318 | 0) | 0;
 $614 = getTempRet0() | 0;
 $615 = _i64Add($613 | 0, $614 | 0, $319 | 0, $320 | 0) | 0;
 $616 = getTempRet0() | 0;
 $617 = _i64Add($615 | 0, $616 | 0, $321 | 0, $322 | 0) | 0;
 $618 = getTempRet0() | 0;
 $619 = _i64Add($617 | 0, $618 | 0, $323 | 0, $324 | 0) | 0;
 $620 = getTempRet0() | 0;
 $621 = _i64Add($601 | 0, $602 | 0, $155 | 0, 0) | 0;
 $622 = getTempRet0() | 0;
 $623 = _i64Subtract($621 | 0, $622 | 0, $619 | 0, $620 | 0) | 0;
 $624 = getTempRet0() | 0;
 $625 = $599 & -2097152;
 $626 = _i64Add($367 | 0, $368 | 0, 1048576, 0) | 0;
 $627 = getTempRet0() | 0;
 $628 = _bitshift64Ashr($626 | 0, $627 | 0, 21) | 0;
 $629 = getTempRet0() | 0;
 $630 = _i64Add($371 | 0, $372 | 0, $369 | 0, $370 | 0) | 0;
 $631 = getTempRet0() | 0;
 $632 = _i64Add($630 | 0, $631 | 0, $373 | 0, $374 | 0) | 0;
 $633 = getTempRet0() | 0;
 $634 = _i64Add($632 | 0, $633 | 0, $375 | 0, $376 | 0) | 0;
 $635 = getTempRet0() | 0;
 $636 = _i64Add($634 | 0, $635 | 0, $377 | 0, $378 | 0) | 0;
 $637 = getTempRet0() | 0;
 $638 = _i64Add($636 | 0, $637 | 0, $379 | 0, $380 | 0) | 0;
 $639 = getTempRet0() | 0;
 $640 = _i64Add($638 | 0, $639 | 0, $381 | 0, $382 | 0) | 0;
 $641 = getTempRet0() | 0;
 $642 = _i64Add($640 | 0, $641 | 0, $383 | 0, $384 | 0) | 0;
 $643 = getTempRet0() | 0;
 $644 = _i64Add($642 | 0, $643 | 0, $385 | 0, $386 | 0) | 0;
 $645 = getTempRet0() | 0;
 $646 = _i64Add($644 | 0, $645 | 0, $387 | 0, $388 | 0) | 0;
 $647 = getTempRet0() | 0;
 $648 = _i64Add($646 | 0, $647 | 0, $391 | 0, $392 | 0) | 0;
 $649 = getTempRet0() | 0;
 $650 = _i64Add($648 | 0, $649 | 0, $389 | 0, $390 | 0) | 0;
 $651 = getTempRet0() | 0;
 $652 = _i64Add($628 | 0, $629 | 0, $163 | 0, $164 | 0) | 0;
 $653 = getTempRet0() | 0;
 $654 = _i64Subtract($652 | 0, $653 | 0, $650 | 0, $651 | 0) | 0;
 $655 = getTempRet0() | 0;
 $656 = $626 & -2097152;
 $657 = _i64Subtract(1048576, 0, $433 | 0, $434 | 0) | 0;
 $658 = getTempRet0() | 0;
 $659 = _bitshift64Ashr($657 | 0, $658 | 0, 21) | 0;
 $660 = getTempRet0() | 0;
 $661 = ___muldi3($67 | 0, 0, $53 | 0, $54 | 0) | 0;
 $662 = getTempRet0() | 0;
 $663 = ___muldi3($72 | 0, 0, $50 | 0, 0) | 0;
 $664 = getTempRet0() | 0;
 $665 = ___muldi3($77 | 0, 0, $45 | 0, 0) | 0;
 $666 = getTempRet0() | 0;
 $667 = ___muldi3($82 | 0, 0, $40 | 0, 0) | 0;
 $668 = getTempRet0() | 0;
 $669 = ___muldi3($87 | 0, 0, $37 | 0, 0) | 0;
 $670 = getTempRet0() | 0;
 $671 = ___muldi3($92 | 0, 0, $32 | 0, 0) | 0;
 $672 = getTempRet0() | 0;
 $673 = ___muldi3($95 | 0, 0, $27 | 0, 0) | 0;
 $674 = getTempRet0() | 0;
 $675 = ___muldi3($100 | 0, 0, $22 | 0, 0) | 0;
 $676 = getTempRet0() | 0;
 $677 = ___muldi3($108 | 0, $109 | 0, $12 | 0, 0) | 0;
 $678 = getTempRet0() | 0;
 $679 = ___muldi3($105 | 0, 0, $17 | 0, 0) | 0;
 $680 = getTempRet0() | 0;
 $681 = _i64Add($663 | 0, $664 | 0, $661 | 0, $662 | 0) | 0;
 $682 = getTempRet0() | 0;
 $683 = _i64Add($681 | 0, $682 | 0, $665 | 0, $666 | 0) | 0;
 $684 = getTempRet0() | 0;
 $685 = _i64Add($683 | 0, $684 | 0, $667 | 0, $668 | 0) | 0;
 $686 = getTempRet0() | 0;
 $687 = _i64Add($685 | 0, $686 | 0, $669 | 0, $670 | 0) | 0;
 $688 = getTempRet0() | 0;
 $689 = _i64Add($687 | 0, $688 | 0, $671 | 0, $672 | 0) | 0;
 $690 = getTempRet0() | 0;
 $691 = _i64Add($689 | 0, $690 | 0, $673 | 0, $674 | 0) | 0;
 $692 = getTempRet0() | 0;
 $693 = _i64Add($691 | 0, $692 | 0, $675 | 0, $676 | 0) | 0;
 $694 = getTempRet0() | 0;
 $695 = _i64Add($693 | 0, $694 | 0, $679 | 0, $680 | 0) | 0;
 $696 = getTempRet0() | 0;
 $697 = _i64Add($695 | 0, $696 | 0, $677 | 0, $678 | 0) | 0;
 $698 = getTempRet0() | 0;
 $699 = _i64Subtract($659 | 0, $660 | 0, $697 | 0, $698 | 0) | 0;
 $700 = getTempRet0() | 0;
 $701 = $657 & -2097152;
 $702 = _i64Subtract(1048576, 0, $467 | 0, $468 | 0) | 0;
 $703 = getTempRet0() | 0;
 $704 = _bitshift64Ashr($702 | 0, $703 | 0, 21) | 0;
 $705 = getTempRet0() | 0;
 $706 = ___muldi3($77 | 0, 0, $53 | 0, $54 | 0) | 0;
 $707 = getTempRet0() | 0;
 $708 = ___muldi3($82 | 0, 0, $50 | 0, 0) | 0;
 $709 = getTempRet0() | 0;
 $710 = ___muldi3($87 | 0, 0, $45 | 0, 0) | 0;
 $711 = getTempRet0() | 0;
 $712 = ___muldi3($92 | 0, 0, $40 | 0, 0) | 0;
 $713 = getTempRet0() | 0;
 $714 = ___muldi3($95 | 0, 0, $37 | 0, 0) | 0;
 $715 = getTempRet0() | 0;
 $716 = ___muldi3($100 | 0, 0, $32 | 0, 0) | 0;
 $717 = getTempRet0() | 0;
 $718 = ___muldi3($108 | 0, $109 | 0, $22 | 0, 0) | 0;
 $719 = getTempRet0() | 0;
 $720 = ___muldi3($105 | 0, 0, $27 | 0, 0) | 0;
 $721 = getTempRet0() | 0;
 $722 = _i64Add($708 | 0, $709 | 0, $706 | 0, $707 | 0) | 0;
 $723 = getTempRet0() | 0;
 $724 = _i64Add($722 | 0, $723 | 0, $710 | 0, $711 | 0) | 0;
 $725 = getTempRet0() | 0;
 $726 = _i64Add($724 | 0, $725 | 0, $712 | 0, $713 | 0) | 0;
 $727 = getTempRet0() | 0;
 $728 = _i64Add($726 | 0, $727 | 0, $714 | 0, $715 | 0) | 0;
 $729 = getTempRet0() | 0;
 $730 = _i64Add($728 | 0, $729 | 0, $716 | 0, $717 | 0) | 0;
 $731 = getTempRet0() | 0;
 $732 = _i64Add($730 | 0, $731 | 0, $720 | 0, $721 | 0) | 0;
 $733 = getTempRet0() | 0;
 $734 = _i64Add($732 | 0, $733 | 0, $718 | 0, $719 | 0) | 0;
 $735 = getTempRet0() | 0;
 $736 = _i64Subtract($704 | 0, $705 | 0, $734 | 0, $735 | 0) | 0;
 $737 = getTempRet0() | 0;
 $738 = $702 & -2097152;
 $739 = _i64Subtract(1048576, 0, $493 | 0, $494 | 0) | 0;
 $740 = getTempRet0() | 0;
 $741 = _bitshift64Ashr($739 | 0, $740 | 0, 21) | 0;
 $742 = getTempRet0() | 0;
 $743 = ___muldi3($87 | 0, 0, $53 | 0, $54 | 0) | 0;
 $744 = getTempRet0() | 0;
 $745 = ___muldi3($92 | 0, 0, $50 | 0, 0) | 0;
 $746 = getTempRet0() | 0;
 $747 = ___muldi3($95 | 0, 0, $45 | 0, 0) | 0;
 $748 = getTempRet0() | 0;
 $749 = ___muldi3($100 | 0, 0, $40 | 0, 0) | 0;
 $750 = getTempRet0() | 0;
 $751 = ___muldi3($108 | 0, $109 | 0, $32 | 0, 0) | 0;
 $752 = getTempRet0() | 0;
 $753 = ___muldi3($105 | 0, 0, $37 | 0, 0) | 0;
 $754 = getTempRet0() | 0;
 $755 = _i64Add($745 | 0, $746 | 0, $743 | 0, $744 | 0) | 0;
 $756 = getTempRet0() | 0;
 $757 = _i64Add($755 | 0, $756 | 0, $747 | 0, $748 | 0) | 0;
 $758 = getTempRet0() | 0;
 $759 = _i64Add($757 | 0, $758 | 0, $749 | 0, $750 | 0) | 0;
 $760 = getTempRet0() | 0;
 $761 = _i64Add($759 | 0, $760 | 0, $753 | 0, $754 | 0) | 0;
 $762 = getTempRet0() | 0;
 $763 = _i64Add($761 | 0, $762 | 0, $751 | 0, $752 | 0) | 0;
 $764 = getTempRet0() | 0;
 $765 = _i64Subtract($741 | 0, $742 | 0, $763 | 0, $764 | 0) | 0;
 $766 = getTempRet0() | 0;
 $767 = $739 & -2097152;
 $768 = _i64Subtract(1048576, 0, $511 | 0, $512 | 0) | 0;
 $769 = getTempRet0() | 0;
 $770 = _bitshift64Ashr($768 | 0, $769 | 0, 21) | 0;
 $771 = getTempRet0() | 0;
 $772 = ___muldi3($95 | 0, 0, $53 | 0, $54 | 0) | 0;
 $773 = getTempRet0() | 0;
 $774 = ___muldi3($100 | 0, 0, $50 | 0, 0) | 0;
 $775 = getTempRet0() | 0;
 $776 = ___muldi3($108 | 0, $109 | 0, $40 | 0, 0) | 0;
 $777 = getTempRet0() | 0;
 $778 = ___muldi3($105 | 0, 0, $45 | 0, 0) | 0;
 $779 = getTempRet0() | 0;
 $780 = _i64Add($774 | 0, $775 | 0, $772 | 0, $773 | 0) | 0;
 $781 = getTempRet0() | 0;
 $782 = _i64Add($780 | 0, $781 | 0, $778 | 0, $779 | 0) | 0;
 $783 = getTempRet0() | 0;
 $784 = _i64Add($782 | 0, $783 | 0, $776 | 0, $777 | 0) | 0;
 $785 = getTempRet0() | 0;
 $786 = _i64Subtract($770 | 0, $771 | 0, $784 | 0, $785 | 0) | 0;
 $787 = getTempRet0() | 0;
 $788 = $768 & -2097152;
 $789 = _i64Add($788 | 0, $769 | 0, $511 | 0, $512 | 0) | 0;
 $790 = getTempRet0() | 0;
 $791 = _i64Subtract(1048576, 0, $521 | 0, $522 | 0) | 0;
 $792 = getTempRet0() | 0;
 $793 = _bitshift64Ashr($791 | 0, $792 | 0, 21) | 0;
 $794 = getTempRet0() | 0;
 $795 = ___muldi3($108 | 0, $109 | 0, $50 | 0, 0) | 0;
 $796 = getTempRet0() | 0;
 $797 = ___muldi3($105 | 0, 0, $53 | 0, $54 | 0) | 0;
 $798 = getTempRet0() | 0;
 $799 = _i64Add($797 | 0, $798 | 0, $795 | 0, $796 | 0) | 0;
 $800 = getTempRet0() | 0;
 $801 = _i64Subtract($793 | 0, $794 | 0, $799 | 0, $800 | 0) | 0;
 $802 = getTempRet0() | 0;
 $803 = $791 & -2097152;
 $804 = _i64Add($803 | 0, $792 | 0, $521 | 0, $522 | 0) | 0;
 $805 = getTempRet0() | 0;
 $806 = _i64Add($525 | 0, $526 | 0, 1048576, 0) | 0;
 $807 = getTempRet0() | 0;
 $808 = _bitshift64Ashr($806 | 0, $807 | 0, 21) | 0;
 $809 = getTempRet0() | 0;
 $810 = $806 & -2097152;
 $811 = _i64Subtract($525 | 0, $526 | 0, $810 | 0, $807 | 0) | 0;
 $812 = getTempRet0() | 0;
 $813 = _i64Add($535 | 0, $536 | 0, 1048576, 0) | 0;
 $814 = getTempRet0() | 0;
 $815 = _bitshift64Ashr($813 | 0, $814 | 0, 21) | 0;
 $816 = getTempRet0() | 0;
 $817 = $813 & -2097152;
 $818 = _i64Subtract($535 | 0, $536 | 0, $817 | 0, $814 | 0) | 0;
 $819 = getTempRet0() | 0;
 $820 = _i64Add($552 | 0, $553 | 0, 1048576, 0) | 0;
 $821 = getTempRet0() | 0;
 $822 = _bitshift64Ashr($820 | 0, $821 | 0, 21) | 0;
 $823 = getTempRet0() | 0;
 $824 = _i64Add($574 | 0, $575 | 0, $822 | 0, $823 | 0) | 0;
 $825 = getTempRet0() | 0;
 $826 = $820 & -2097152;
 $827 = _i64Subtract($552 | 0, $553 | 0, $826 | 0, $821 | 0) | 0;
 $828 = getTempRet0() | 0;
 $829 = _i64Add($571 | 0, $572 | 0, 1048576, 0) | 0;
 $830 = getTempRet0() | 0;
 $831 = _bitshift64Ashr($829 | 0, $830 | 0, 21) | 0;
 $832 = getTempRet0() | 0;
 $833 = $829 & -2097152;
 $834 = _i64Subtract($571 | 0, $572 | 0, $833 | 0, $830 | 0) | 0;
 $835 = getTempRet0() | 0;
 $836 = _i64Add($596 | 0, $597 | 0, 1048576, 0) | 0;
 $837 = getTempRet0() | 0;
 $838 = _bitshift64Ashr($836 | 0, $837 | 0, 21) | 0;
 $839 = getTempRet0() | 0;
 $840 = $836 & -2097152;
 $841 = _i64Add($623 | 0, $624 | 0, 1048576, 0) | 0;
 $842 = getTempRet0() | 0;
 $843 = _bitshift64Ashr($841 | 0, $842 | 0, 21) | 0;
 $844 = getTempRet0() | 0;
 $845 = $841 & -2097152;
 $846 = _i64Add($654 | 0, $655 | 0, 1048576, 0) | 0;
 $847 = getTempRet0() | 0;
 $848 = _bitshift64Ashr($846 | 0, $847 | 0, 21) | 0;
 $849 = getTempRet0() | 0;
 $850 = $846 & -2097152;
 $851 = _i64Add($699 | 0, $700 | 0, 1048576, 0) | 0;
 $852 = getTempRet0() | 0;
 $853 = _bitshift64Ashr($851 | 0, $852 | 0, 21) | 0;
 $854 = getTempRet0() | 0;
 $855 = $851 & -2097152;
 $856 = _i64Add($736 | 0, $737 | 0, 1048576, 0) | 0;
 $857 = getTempRet0() | 0;
 $858 = _bitshift64Ashr($856 | 0, $857 | 0, 21) | 0;
 $859 = getTempRet0() | 0;
 $860 = $856 & -2097152;
 $861 = _i64Add($765 | 0, $766 | 0, 1048576, 0) | 0;
 $862 = getTempRet0() | 0;
 $863 = _bitshift64Ashr($861 | 0, $862 | 0, 21) | 0;
 $864 = getTempRet0() | 0;
 $865 = _i64Subtract($863 | 0, $864 | 0, $789 | 0, $790 | 0) | 0;
 $866 = getTempRet0() | 0;
 $867 = $861 & -2097152;
 $868 = _i64Subtract($765 | 0, $766 | 0, $867 | 0, $862 | 0) | 0;
 $869 = getTempRet0() | 0;
 $870 = _i64Add($786 | 0, $787 | 0, 1048576, 0) | 0;
 $871 = getTempRet0() | 0;
 $872 = _bitshift64Ashr($870 | 0, $871 | 0, 21) | 0;
 $873 = getTempRet0() | 0;
 $874 = _i64Subtract($872 | 0, $873 | 0, $804 | 0, $805 | 0) | 0;
 $875 = getTempRet0() | 0;
 $876 = $870 & -2097152;
 $877 = _i64Subtract($786 | 0, $787 | 0, $876 | 0, $871 | 0) | 0;
 $878 = getTempRet0() | 0;
 $879 = _i64Add($801 | 0, $802 | 0, 1048576, 0) | 0;
 $880 = getTempRet0() | 0;
 $881 = _bitshift64Ashr($879 | 0, $880 | 0, 21) | 0;
 $882 = getTempRet0() | 0;
 $883 = _i64Add($881 | 0, $882 | 0, $811 | 0, $812 | 0) | 0;
 $884 = getTempRet0() | 0;
 $885 = $879 & -2097152;
 $886 = _i64Subtract($801 | 0, $802 | 0, $885 | 0, $880 | 0) | 0;
 $887 = getTempRet0() | 0;
 $888 = ___muldi3($808 | 0, $809 | 0, 666643, 0) | 0;
 $889 = getTempRet0() | 0;
 $890 = ___muldi3($808 | 0, $809 | 0, 470296, 0) | 0;
 $891 = getTempRet0() | 0;
 $892 = ___muldi3($808 | 0, $809 | 0, 654183, 0) | 0;
 $893 = getTempRet0() | 0;
 $894 = ___muldi3($808 | 0, $809 | 0, -997805, -1) | 0;
 $895 = getTempRet0() | 0;
 $896 = ___muldi3($808 | 0, $809 | 0, 136657, 0) | 0;
 $897 = getTempRet0() | 0;
 $898 = ___muldi3($808 | 0, $809 | 0, -683901, -1) | 0;
 $899 = getTempRet0() | 0;
 $900 = _i64Subtract($898 | 0, $899 | 0, $493 | 0, $494 | 0) | 0;
 $901 = getTempRet0() | 0;
 $902 = _i64Subtract($900 | 0, $901 | 0, $767 | 0, $740 | 0) | 0;
 $903 = getTempRet0() | 0;
 $904 = _i64Add($902 | 0, $903 | 0, $858 | 0, $859 | 0) | 0;
 $905 = getTempRet0() | 0;
 $906 = ___muldi3($883 | 0, $884 | 0, 666643, 0) | 0;
 $907 = getTempRet0() | 0;
 $908 = ___muldi3($883 | 0, $884 | 0, 470296, 0) | 0;
 $909 = getTempRet0() | 0;
 $910 = ___muldi3($883 | 0, $884 | 0, 654183, 0) | 0;
 $911 = getTempRet0() | 0;
 $912 = ___muldi3($883 | 0, $884 | 0, -997805, -1) | 0;
 $913 = getTempRet0() | 0;
 $914 = ___muldi3($883 | 0, $884 | 0, 136657, 0) | 0;
 $915 = getTempRet0() | 0;
 $916 = ___muldi3($883 | 0, $884 | 0, -683901, -1) | 0;
 $917 = getTempRet0() | 0;
 $918 = ___muldi3($886 | 0, $887 | 0, 666643, 0) | 0;
 $919 = getTempRet0() | 0;
 $920 = ___muldi3($886 | 0, $887 | 0, 470296, 0) | 0;
 $921 = getTempRet0() | 0;
 $922 = ___muldi3($886 | 0, $887 | 0, 654183, 0) | 0;
 $923 = getTempRet0() | 0;
 $924 = ___muldi3($886 | 0, $887 | 0, -997805, -1) | 0;
 $925 = getTempRet0() | 0;
 $926 = ___muldi3($886 | 0, $887 | 0, 136657, 0) | 0;
 $927 = getTempRet0() | 0;
 $928 = ___muldi3($886 | 0, $887 | 0, -683901, -1) | 0;
 $929 = getTempRet0() | 0;
 $930 = _i64Subtract($894 | 0, $895 | 0, $467 | 0, $468 | 0) | 0;
 $931 = getTempRet0() | 0;
 $932 = _i64Add($930 | 0, $931 | 0, $914 | 0, $915 | 0) | 0;
 $933 = getTempRet0() | 0;
 $934 = _i64Add($932 | 0, $933 | 0, $928 | 0, $929 | 0) | 0;
 $935 = getTempRet0() | 0;
 $936 = _i64Subtract($934 | 0, $935 | 0, $738 | 0, $703 | 0) | 0;
 $937 = getTempRet0() | 0;
 $938 = _i64Add($936 | 0, $937 | 0, $853 | 0, $854 | 0) | 0;
 $939 = getTempRet0() | 0;
 $940 = ___muldi3($874 | 0, $875 | 0, 666643, 0) | 0;
 $941 = getTempRet0() | 0;
 $942 = ___muldi3($874 | 0, $875 | 0, 470296, 0) | 0;
 $943 = getTempRet0() | 0;
 $944 = ___muldi3($874 | 0, $875 | 0, 654183, 0) | 0;
 $945 = getTempRet0() | 0;
 $946 = ___muldi3($874 | 0, $875 | 0, -997805, -1) | 0;
 $947 = getTempRet0() | 0;
 $948 = ___muldi3($874 | 0, $875 | 0, 136657, 0) | 0;
 $949 = getTempRet0() | 0;
 $950 = ___muldi3($874 | 0, $875 | 0, -683901, -1) | 0;
 $951 = getTempRet0() | 0;
 $952 = ___muldi3($877 | 0, $878 | 0, 666643, 0) | 0;
 $953 = getTempRet0() | 0;
 $954 = ___muldi3($877 | 0, $878 | 0, 470296, 0) | 0;
 $955 = getTempRet0() | 0;
 $956 = ___muldi3($877 | 0, $878 | 0, 654183, 0) | 0;
 $957 = getTempRet0() | 0;
 $958 = ___muldi3($877 | 0, $878 | 0, -997805, -1) | 0;
 $959 = getTempRet0() | 0;
 $960 = ___muldi3($877 | 0, $878 | 0, 136657, 0) | 0;
 $961 = getTempRet0() | 0;
 $962 = ___muldi3($877 | 0, $878 | 0, -683901, -1) | 0;
 $963 = getTempRet0() | 0;
 $964 = _i64Add($910 | 0, $911 | 0, $890 | 0, $891 | 0) | 0;
 $965 = getTempRet0() | 0;
 $966 = _i64Add($964 | 0, $965 | 0, $924 | 0, $925 | 0) | 0;
 $967 = getTempRet0() | 0;
 $968 = _i64Subtract($966 | 0, $967 | 0, $433 | 0, $434 | 0) | 0;
 $969 = getTempRet0() | 0;
 $970 = _i64Add($968 | 0, $969 | 0, $948 | 0, $949 | 0) | 0;
 $971 = getTempRet0() | 0;
 $972 = _i64Add($970 | 0, $971 | 0, $962 | 0, $963 | 0) | 0;
 $973 = getTempRet0() | 0;
 $974 = _i64Subtract($972 | 0, $973 | 0, $701 | 0, $658 | 0) | 0;
 $975 = getTempRet0() | 0;
 $976 = _i64Add($974 | 0, $975 | 0, $848 | 0, $849 | 0) | 0;
 $977 = getTempRet0() | 0;
 $978 = ___muldi3($865 | 0, $866 | 0, 666643, 0) | 0;
 $979 = getTempRet0() | 0;
 $980 = _i64Add($251 | 0, $252 | 0, $978 | 0, $979 | 0) | 0;
 $981 = getTempRet0() | 0;
 $982 = _i64Subtract($980 | 0, $981 | 0, $598 | 0, $577 | 0) | 0;
 $983 = getTempRet0() | 0;
 $984 = _i64Add($982 | 0, $983 | 0, $831 | 0, $832 | 0) | 0;
 $985 = getTempRet0() | 0;
 $986 = ___muldi3($865 | 0, $866 | 0, 470296, 0) | 0;
 $987 = getTempRet0() | 0;
 $988 = ___muldi3($865 | 0, $866 | 0, 654183, 0) | 0;
 $989 = getTempRet0() | 0;
 $990 = _i64Add($954 | 0, $955 | 0, $940 | 0, $941 | 0) | 0;
 $991 = getTempRet0() | 0;
 $992 = _i64Add($990 | 0, $991 | 0, $988 | 0, $989 | 0) | 0;
 $993 = getTempRet0() | 0;
 $994 = _i64Add($992 | 0, $993 | 0, $303 | 0, $304 | 0) | 0;
 $995 = getTempRet0() | 0;
 $996 = _i64Add($994 | 0, $995 | 0, $838 | 0, $839 | 0) | 0;
 $997 = getTempRet0() | 0;
 $998 = _i64Subtract($996 | 0, $997 | 0, $625 | 0, $600 | 0) | 0;
 $999 = getTempRet0() | 0;
 $1000 = ___muldi3($865 | 0, $866 | 0, -997805, -1) | 0;
 $1001 = getTempRet0() | 0;
 $1002 = ___muldi3($865 | 0, $866 | 0, 136657, 0) | 0;
 $1003 = getTempRet0() | 0;
 $1004 = _i64Add($920 | 0, $921 | 0, $906 | 0, $907 | 0) | 0;
 $1005 = getTempRet0() | 0;
 $1006 = _i64Add($1004 | 0, $1005 | 0, $944 | 0, $945 | 0) | 0;
 $1007 = getTempRet0() | 0;
 $1008 = _i64Add($1006 | 0, $1007 | 0, $958 | 0, $959 | 0) | 0;
 $1009 = getTempRet0() | 0;
 $1010 = _i64Add($1008 | 0, $1009 | 0, $1002 | 0, $1003 | 0) | 0;
 $1011 = getTempRet0() | 0;
 $1012 = _i64Add($1010 | 0, $1011 | 0, $843 | 0, $844 | 0) | 0;
 $1013 = getTempRet0() | 0;
 $1014 = _i64Add($1012 | 0, $1013 | 0, $367 | 0, $368 | 0) | 0;
 $1015 = getTempRet0() | 0;
 $1016 = _i64Subtract($1014 | 0, $1015 | 0, $656 | 0, $627 | 0) | 0;
 $1017 = getTempRet0() | 0;
 $1018 = ___muldi3($865 | 0, $866 | 0, -683901, -1) | 0;
 $1019 = getTempRet0() | 0;
 $1020 = _i64Add($984 | 0, $985 | 0, 1048576, 0) | 0;
 $1021 = getTempRet0() | 0;
 $1022 = _bitshift64Ashr($1020 | 0, $1021 | 0, 21) | 0;
 $1023 = getTempRet0() | 0;
 $1024 = _i64Add($986 | 0, $987 | 0, $952 | 0, $953 | 0) | 0;
 $1025 = getTempRet0() | 0;
 $1026 = _i64Add($1024 | 0, $1025 | 0, $596 | 0, $597 | 0) | 0;
 $1027 = getTempRet0() | 0;
 $1028 = _i64Subtract($1026 | 0, $1027 | 0, $840 | 0, $837 | 0) | 0;
 $1029 = getTempRet0() | 0;
 $1030 = _i64Add($1028 | 0, $1029 | 0, $1022 | 0, $1023 | 0) | 0;
 $1031 = getTempRet0() | 0;
 $1032 = $1020 & -2097152;
 $1033 = _i64Add($998 | 0, $999 | 0, 1048576, 0) | 0;
 $1034 = getTempRet0() | 0;
 $1035 = _bitshift64Ashr($1033 | 0, $1034 | 0, 21) | 0;
 $1036 = getTempRet0() | 0;
 $1037 = _i64Add($942 | 0, $943 | 0, $918 | 0, $919 | 0) | 0;
 $1038 = getTempRet0() | 0;
 $1039 = _i64Add($1037 | 0, $1038 | 0, $956 | 0, $957 | 0) | 0;
 $1040 = getTempRet0() | 0;
 $1041 = _i64Add($1039 | 0, $1040 | 0, $1000 | 0, $1001 | 0) | 0;
 $1042 = getTempRet0() | 0;
 $1043 = _i64Add($1041 | 0, $1042 | 0, $623 | 0, $624 | 0) | 0;
 $1044 = getTempRet0() | 0;
 $1045 = _i64Subtract($1043 | 0, $1044 | 0, $845 | 0, $842 | 0) | 0;
 $1046 = getTempRet0() | 0;
 $1047 = _i64Add($1045 | 0, $1046 | 0, $1035 | 0, $1036 | 0) | 0;
 $1048 = getTempRet0() | 0;
 $1049 = $1033 & -2097152;
 $1050 = _i64Add($1016 | 0, $1017 | 0, 1048576, 0) | 0;
 $1051 = getTempRet0() | 0;
 $1052 = _bitshift64Ashr($1050 | 0, $1051 | 0, 21) | 0;
 $1053 = getTempRet0() | 0;
 $1054 = _i64Add($908 | 0, $909 | 0, $888 | 0, $889 | 0) | 0;
 $1055 = getTempRet0() | 0;
 $1056 = _i64Add($1054 | 0, $1055 | 0, $922 | 0, $923 | 0) | 0;
 $1057 = getTempRet0() | 0;
 $1058 = _i64Add($1056 | 0, $1057 | 0, $946 | 0, $947 | 0) | 0;
 $1059 = getTempRet0() | 0;
 $1060 = _i64Add($1058 | 0, $1059 | 0, $960 | 0, $961 | 0) | 0;
 $1061 = getTempRet0() | 0;
 $1062 = _i64Add($1060 | 0, $1061 | 0, $1018 | 0, $1019 | 0) | 0;
 $1063 = getTempRet0() | 0;
 $1064 = _i64Add($1062 | 0, $1063 | 0, $654 | 0, $655 | 0) | 0;
 $1065 = getTempRet0() | 0;
 $1066 = _i64Subtract($1064 | 0, $1065 | 0, $850 | 0, $847 | 0) | 0;
 $1067 = getTempRet0() | 0;
 $1068 = _i64Add($1066 | 0, $1067 | 0, $1052 | 0, $1053 | 0) | 0;
 $1069 = getTempRet0() | 0;
 $1070 = $1050 & -2097152;
 $1071 = _i64Add($976 | 0, $977 | 0, 1048576, 0) | 0;
 $1072 = getTempRet0() | 0;
 $1073 = _bitshift64Ashr($1071 | 0, $1072 | 0, 21) | 0;
 $1074 = getTempRet0() | 0;
 $1075 = _i64Add($912 | 0, $913 | 0, $892 | 0, $893 | 0) | 0;
 $1076 = getTempRet0() | 0;
 $1077 = _i64Add($1075 | 0, $1076 | 0, $926 | 0, $927 | 0) | 0;
 $1078 = getTempRet0() | 0;
 $1079 = _i64Add($1077 | 0, $1078 | 0, $950 | 0, $951 | 0) | 0;
 $1080 = getTempRet0() | 0;
 $1081 = _i64Add($1079 | 0, $1080 | 0, $699 | 0, $700 | 0) | 0;
 $1082 = getTempRet0() | 0;
 $1083 = _i64Subtract($1081 | 0, $1082 | 0, $855 | 0, $852 | 0) | 0;
 $1084 = getTempRet0() | 0;
 $1085 = _i64Add($1083 | 0, $1084 | 0, $1073 | 0, $1074 | 0) | 0;
 $1086 = getTempRet0() | 0;
 $1087 = $1071 & -2097152;
 $1088 = _i64Subtract($976 | 0, $977 | 0, $1087 | 0, $1072 | 0) | 0;
 $1089 = getTempRet0() | 0;
 $1090 = _i64Add($938 | 0, $939 | 0, 1048576, 0) | 0;
 $1091 = getTempRet0() | 0;
 $1092 = _bitshift64Ashr($1090 | 0, $1091 | 0, 21) | 0;
 $1093 = getTempRet0() | 0;
 $1094 = _i64Add($916 | 0, $917 | 0, $896 | 0, $897 | 0) | 0;
 $1095 = getTempRet0() | 0;
 $1096 = _i64Add($1094 | 0, $1095 | 0, $736 | 0, $737 | 0) | 0;
 $1097 = getTempRet0() | 0;
 $1098 = _i64Subtract($1096 | 0, $1097 | 0, $860 | 0, $857 | 0) | 0;
 $1099 = getTempRet0() | 0;
 $1100 = _i64Add($1098 | 0, $1099 | 0, $1092 | 0, $1093 | 0) | 0;
 $1101 = getTempRet0() | 0;
 $1102 = $1090 & -2097152;
 $1103 = _i64Subtract($938 | 0, $939 | 0, $1102 | 0, $1091 | 0) | 0;
 $1104 = getTempRet0() | 0;
 $1105 = _i64Add($904 | 0, $905 | 0, 1048576, 0) | 0;
 $1106 = getTempRet0() | 0;
 $1107 = _bitshift64Ashr($1105 | 0, $1106 | 0, 21) | 0;
 $1108 = getTempRet0() | 0;
 $1109 = _i64Add($1107 | 0, $1108 | 0, $868 | 0, $869 | 0) | 0;
 $1110 = getTempRet0() | 0;
 $1111 = $1105 & -2097152;
 $1112 = _i64Subtract($904 | 0, $905 | 0, $1111 | 0, $1106 | 0) | 0;
 $1113 = getTempRet0() | 0;
 $1114 = _i64Add($1030 | 0, $1031 | 0, 1048576, 0) | 0;
 $1115 = getTempRet0() | 0;
 $1116 = _bitshift64Ashr($1114 | 0, $1115 | 0, 21) | 0;
 $1117 = getTempRet0() | 0;
 $1118 = $1114 & -2097152;
 $1119 = _i64Add($1047 | 0, $1048 | 0, 1048576, 0) | 0;
 $1120 = getTempRet0() | 0;
 $1121 = _bitshift64Ashr($1119 | 0, $1120 | 0, 21) | 0;
 $1122 = getTempRet0() | 0;
 $1123 = $1119 & -2097152;
 $1124 = _i64Add($1068 | 0, $1069 | 0, 1048576, 0) | 0;
 $1125 = getTempRet0() | 0;
 $1126 = _bitshift64Ashr($1124 | 0, $1125 | 0, 21) | 0;
 $1127 = getTempRet0() | 0;
 $1128 = _i64Add($1126 | 0, $1127 | 0, $1088 | 0, $1089 | 0) | 0;
 $1129 = getTempRet0() | 0;
 $1130 = $1124 & -2097152;
 $1131 = _i64Subtract($1068 | 0, $1069 | 0, $1130 | 0, $1125 | 0) | 0;
 $1132 = getTempRet0() | 0;
 $1133 = _i64Add($1085 | 0, $1086 | 0, 1048576, 0) | 0;
 $1134 = getTempRet0() | 0;
 $1135 = _bitshift64Ashr($1133 | 0, $1134 | 0, 21) | 0;
 $1136 = getTempRet0() | 0;
 $1137 = _i64Add($1135 | 0, $1136 | 0, $1103 | 0, $1104 | 0) | 0;
 $1138 = getTempRet0() | 0;
 $1139 = $1133 & -2097152;
 $1140 = _i64Subtract($1085 | 0, $1086 | 0, $1139 | 0, $1134 | 0) | 0;
 $1141 = getTempRet0() | 0;
 $1142 = _i64Add($1100 | 0, $1101 | 0, 1048576, 0) | 0;
 $1143 = getTempRet0() | 0;
 $1144 = _bitshift64Ashr($1142 | 0, $1143 | 0, 21) | 0;
 $1145 = getTempRet0() | 0;
 $1146 = _i64Add($1144 | 0, $1145 | 0, $1112 | 0, $1113 | 0) | 0;
 $1147 = getTempRet0() | 0;
 $1148 = $1142 & -2097152;
 $1149 = _i64Subtract($1100 | 0, $1101 | 0, $1148 | 0, $1143 | 0) | 0;
 $1150 = getTempRet0() | 0;
 $1151 = ___muldi3($1109 | 0, $1110 | 0, 666643, 0) | 0;
 $1152 = getTempRet0() | 0;
 $1153 = _i64Add($834 | 0, $835 | 0, $1151 | 0, $1152 | 0) | 0;
 $1154 = getTempRet0() | 0;
 $1155 = ___muldi3($1109 | 0, $1110 | 0, 470296, 0) | 0;
 $1156 = getTempRet0() | 0;
 $1157 = ___muldi3($1109 | 0, $1110 | 0, 654183, 0) | 0;
 $1158 = getTempRet0() | 0;
 $1159 = ___muldi3($1109 | 0, $1110 | 0, -997805, -1) | 0;
 $1160 = getTempRet0() | 0;
 $1161 = ___muldi3($1109 | 0, $1110 | 0, 136657, 0) | 0;
 $1162 = getTempRet0() | 0;
 $1163 = ___muldi3($1109 | 0, $1110 | 0, -683901, -1) | 0;
 $1164 = getTempRet0() | 0;
 $1165 = _i64Add($1121 | 0, $1122 | 0, $1163 | 0, $1164 | 0) | 0;
 $1166 = getTempRet0() | 0;
 $1167 = _i64Add($1165 | 0, $1166 | 0, $1016 | 0, $1017 | 0) | 0;
 $1168 = getTempRet0() | 0;
 $1169 = _i64Subtract($1167 | 0, $1168 | 0, $1070 | 0, $1051 | 0) | 0;
 $1170 = getTempRet0() | 0;
 $1171 = ___muldi3($1146 | 0, $1147 | 0, 666643, 0) | 0;
 $1172 = getTempRet0() | 0;
 $1173 = _i64Add($824 | 0, $825 | 0, $1171 | 0, $1172 | 0) | 0;
 $1174 = getTempRet0() | 0;
 $1175 = ___muldi3($1146 | 0, $1147 | 0, 470296, 0) | 0;
 $1176 = getTempRet0() | 0;
 $1177 = _i64Add($1153 | 0, $1154 | 0, $1175 | 0, $1176 | 0) | 0;
 $1178 = getTempRet0() | 0;
 $1179 = ___muldi3($1146 | 0, $1147 | 0, 654183, 0) | 0;
 $1180 = getTempRet0() | 0;
 $1181 = ___muldi3($1146 | 0, $1147 | 0, -997805, -1) | 0;
 $1182 = getTempRet0() | 0;
 $1183 = ___muldi3($1146 | 0, $1147 | 0, 136657, 0) | 0;
 $1184 = getTempRet0() | 0;
 $1185 = ___muldi3($1146 | 0, $1147 | 0, -683901, -1) | 0;
 $1186 = getTempRet0() | 0;
 $1187 = ___muldi3($1149 | 0, $1150 | 0, 666643, 0) | 0;
 $1188 = getTempRet0() | 0;
 $1189 = _i64Add($827 | 0, $828 | 0, $1187 | 0, $1188 | 0) | 0;
 $1190 = getTempRet0() | 0;
 $1191 = ___muldi3($1149 | 0, $1150 | 0, 470296, 0) | 0;
 $1192 = getTempRet0() | 0;
 $1193 = _i64Add($1173 | 0, $1174 | 0, $1191 | 0, $1192 | 0) | 0;
 $1194 = getTempRet0() | 0;
 $1195 = ___muldi3($1149 | 0, $1150 | 0, 654183, 0) | 0;
 $1196 = getTempRet0() | 0;
 $1197 = _i64Add($1177 | 0, $1178 | 0, $1195 | 0, $1196 | 0) | 0;
 $1198 = getTempRet0() | 0;
 $1199 = ___muldi3($1149 | 0, $1150 | 0, -997805, -1) | 0;
 $1200 = getTempRet0() | 0;
 $1201 = ___muldi3($1149 | 0, $1150 | 0, 136657, 0) | 0;
 $1202 = getTempRet0() | 0;
 $1203 = ___muldi3($1149 | 0, $1150 | 0, -683901, -1) | 0;
 $1204 = getTempRet0() | 0;
 $1205 = _i64Add($1183 | 0, $1184 | 0, $1159 | 0, $1160 | 0) | 0;
 $1206 = getTempRet0() | 0;
 $1207 = _i64Add($1205 | 0, $1206 | 0, $1203 | 0, $1204 | 0) | 0;
 $1208 = getTempRet0() | 0;
 $1209 = _i64Add($1207 | 0, $1208 | 0, $1116 | 0, $1117 | 0) | 0;
 $1210 = getTempRet0() | 0;
 $1211 = _i64Add($1209 | 0, $1210 | 0, $998 | 0, $999 | 0) | 0;
 $1212 = getTempRet0() | 0;
 $1213 = _i64Subtract($1211 | 0, $1212 | 0, $1049 | 0, $1034 | 0) | 0;
 $1214 = getTempRet0() | 0;
 $1215 = ___muldi3($1137 | 0, $1138 | 0, 666643, 0) | 0;
 $1216 = getTempRet0() | 0;
 $1217 = ___muldi3($1137 | 0, $1138 | 0, 470296, 0) | 0;
 $1218 = getTempRet0() | 0;
 $1219 = ___muldi3($1137 | 0, $1138 | 0, 654183, 0) | 0;
 $1220 = getTempRet0() | 0;
 $1221 = ___muldi3($1137 | 0, $1138 | 0, -997805, -1) | 0;
 $1222 = getTempRet0() | 0;
 $1223 = ___muldi3($1137 | 0, $1138 | 0, 136657, 0) | 0;
 $1224 = getTempRet0() | 0;
 $1225 = ___muldi3($1137 | 0, $1138 | 0, -683901, -1) | 0;
 $1226 = getTempRet0() | 0;
 $1227 = ___muldi3($1140 | 0, $1141 | 0, 666643, 0) | 0;
 $1228 = getTempRet0() | 0;
 $1229 = ___muldi3($1140 | 0, $1141 | 0, 470296, 0) | 0;
 $1230 = getTempRet0() | 0;
 $1231 = ___muldi3($1140 | 0, $1141 | 0, 654183, 0) | 0;
 $1232 = getTempRet0() | 0;
 $1233 = ___muldi3($1140 | 0, $1141 | 0, -997805, -1) | 0;
 $1234 = getTempRet0() | 0;
 $1235 = ___muldi3($1140 | 0, $1141 | 0, 136657, 0) | 0;
 $1236 = getTempRet0() | 0;
 $1237 = ___muldi3($1140 | 0, $1141 | 0, -683901, -1) | 0;
 $1238 = getTempRet0() | 0;
 $1239 = _i64Add($984 | 0, $985 | 0, $1155 | 0, $1156 | 0) | 0;
 $1240 = getTempRet0() | 0;
 $1241 = _i64Subtract($1239 | 0, $1240 | 0, $1032 | 0, $1021 | 0) | 0;
 $1242 = getTempRet0() | 0;
 $1243 = _i64Add($1241 | 0, $1242 | 0, $1179 | 0, $1180 | 0) | 0;
 $1244 = getTempRet0() | 0;
 $1245 = _i64Add($1243 | 0, $1244 | 0, $1199 | 0, $1200 | 0) | 0;
 $1246 = getTempRet0() | 0;
 $1247 = _i64Add($1245 | 0, $1246 | 0, $1223 | 0, $1224 | 0) | 0;
 $1248 = getTempRet0() | 0;
 $1249 = _i64Add($1247 | 0, $1248 | 0, $1237 | 0, $1238 | 0) | 0;
 $1250 = getTempRet0() | 0;
 $1251 = ___muldi3($1128 | 0, $1129 | 0, 666643, 0) | 0;
 $1252 = getTempRet0() | 0;
 $1253 = _i64Add($1251 | 0, $1252 | 0, $538 | 0, $539 | 0) | 0;
 $1254 = getTempRet0() | 0;
 $1255 = ___muldi3($1128 | 0, $1129 | 0, 470296, 0) | 0;
 $1256 = getTempRet0() | 0;
 $1257 = ___muldi3($1128 | 0, $1129 | 0, 654183, 0) | 0;
 $1258 = getTempRet0() | 0;
 $1259 = _i64Add($183 | 0, $184 | 0, $815 | 0, $816 | 0) | 0;
 $1260 = getTempRet0() | 0;
 $1261 = _i64Subtract($1259 | 0, $1260 | 0, $554 | 0, $541 | 0) | 0;
 $1262 = getTempRet0() | 0;
 $1263 = _i64Add($1261 | 0, $1262 | 0, $1257 | 0, $1258 | 0) | 0;
 $1264 = getTempRet0() | 0;
 $1265 = _i64Add($1263 | 0, $1264 | 0, $1215 | 0, $1216 | 0) | 0;
 $1266 = getTempRet0() | 0;
 $1267 = _i64Add($1265 | 0, $1266 | 0, $1229 | 0, $1230 | 0) | 0;
 $1268 = getTempRet0() | 0;
 $1269 = ___muldi3($1128 | 0, $1129 | 0, -997805, -1) | 0;
 $1270 = getTempRet0() | 0;
 $1271 = ___muldi3($1128 | 0, $1129 | 0, 136657, 0) | 0;
 $1272 = getTempRet0() | 0;
 $1273 = _i64Add($1193 | 0, $1194 | 0, $1271 | 0, $1272 | 0) | 0;
 $1274 = getTempRet0() | 0;
 $1275 = _i64Add($1273 | 0, $1274 | 0, $1219 | 0, $1220 | 0) | 0;
 $1276 = getTempRet0() | 0;
 $1277 = _i64Add($1275 | 0, $1276 | 0, $1233 | 0, $1234 | 0) | 0;
 $1278 = getTempRet0() | 0;
 $1279 = ___muldi3($1128 | 0, $1129 | 0, -683901, -1) | 0;
 $1280 = getTempRet0() | 0;
 $1281 = _i64Add($1253 | 0, $1254 | 0, 1048576, 0) | 0;
 $1282 = getTempRet0() | 0;
 $1283 = _bitshift64Ashr($1281 | 0, $1282 | 0, 21) | 0;
 $1284 = getTempRet0() | 0;
 $1285 = _i64Add($818 | 0, $819 | 0, $1255 | 0, $1256 | 0) | 0;
 $1286 = getTempRet0() | 0;
 $1287 = _i64Add($1285 | 0, $1286 | 0, $1227 | 0, $1228 | 0) | 0;
 $1288 = getTempRet0() | 0;
 $1289 = _i64Add($1287 | 0, $1288 | 0, $1283 | 0, $1284 | 0) | 0;
 $1290 = getTempRet0() | 0;
 $1291 = $1281 & -2097152;
 $1292 = _i64Subtract($1253 | 0, $1254 | 0, $1291 | 0, $1282 | 0) | 0;
 $1293 = getTempRet0() | 0;
 $1294 = _i64Add($1267 | 0, $1268 | 0, 1048576, 0) | 0;
 $1295 = getTempRet0() | 0;
 $1296 = _bitshift64Ashr($1294 | 0, $1295 | 0, 21) | 0;
 $1297 = getTempRet0() | 0;
 $1298 = _i64Add($1189 | 0, $1190 | 0, $1269 | 0, $1270 | 0) | 0;
 $1299 = getTempRet0() | 0;
 $1300 = _i64Add($1298 | 0, $1299 | 0, $1217 | 0, $1218 | 0) | 0;
 $1301 = getTempRet0() | 0;
 $1302 = _i64Add($1300 | 0, $1301 | 0, $1231 | 0, $1232 | 0) | 0;
 $1303 = getTempRet0() | 0;
 $1304 = _i64Add($1302 | 0, $1303 | 0, $1296 | 0, $1297 | 0) | 0;
 $1305 = getTempRet0() | 0;
 $1306 = $1294 & -2097152;
 $1307 = _i64Add($1277 | 0, $1278 | 0, 1048576, 0) | 0;
 $1308 = getTempRet0() | 0;
 $1309 = _bitshift64Ashr($1307 | 0, $1308 | 0, 21) | 0;
 $1310 = getTempRet0() | 0;
 $1311 = _i64Add($1197 | 0, $1198 | 0, $1279 | 0, $1280 | 0) | 0;
 $1312 = getTempRet0() | 0;
 $1313 = _i64Add($1311 | 0, $1312 | 0, $1221 | 0, $1222 | 0) | 0;
 $1314 = getTempRet0() | 0;
 $1315 = _i64Add($1313 | 0, $1314 | 0, $1235 | 0, $1236 | 0) | 0;
 $1316 = getTempRet0() | 0;
 $1317 = _i64Add($1315 | 0, $1316 | 0, $1309 | 0, $1310 | 0) | 0;
 $1318 = getTempRet0() | 0;
 $1319 = $1307 & -2097152;
 $1320 = _i64Add($1249 | 0, $1250 | 0, 1048576, 0) | 0;
 $1321 = getTempRet0() | 0;
 $1322 = _bitshift64Ashr($1320 | 0, $1321 | 0, 21) | 0;
 $1323 = getTempRet0() | 0;
 $1324 = _i64Add($1181 | 0, $1182 | 0, $1157 | 0, $1158 | 0) | 0;
 $1325 = getTempRet0() | 0;
 $1326 = _i64Add($1324 | 0, $1325 | 0, $1201 | 0, $1202 | 0) | 0;
 $1327 = getTempRet0() | 0;
 $1328 = _i64Add($1326 | 0, $1327 | 0, $1030 | 0, $1031 | 0) | 0;
 $1329 = getTempRet0() | 0;
 $1330 = _i64Subtract($1328 | 0, $1329 | 0, $1118 | 0, $1115 | 0) | 0;
 $1331 = getTempRet0() | 0;
 $1332 = _i64Add($1330 | 0, $1331 | 0, $1225 | 0, $1226 | 0) | 0;
 $1333 = getTempRet0() | 0;
 $1334 = _i64Add($1332 | 0, $1333 | 0, $1322 | 0, $1323 | 0) | 0;
 $1335 = getTempRet0() | 0;
 $1336 = $1320 & -2097152;
 $1337 = _i64Subtract($1249 | 0, $1250 | 0, $1336 | 0, $1321 | 0) | 0;
 $1338 = getTempRet0() | 0;
 $1339 = _i64Add($1213 | 0, $1214 | 0, 1048576, 0) | 0;
 $1340 = getTempRet0() | 0;
 $1341 = _bitshift64Ashr($1339 | 0, $1340 | 0, 21) | 0;
 $1342 = getTempRet0() | 0;
 $1343 = _i64Add($1185 | 0, $1186 | 0, $1161 | 0, $1162 | 0) | 0;
 $1344 = getTempRet0() | 0;
 $1345 = _i64Add($1343 | 0, $1344 | 0, $1047 | 0, $1048 | 0) | 0;
 $1346 = getTempRet0() | 0;
 $1347 = _i64Subtract($1345 | 0, $1346 | 0, $1123 | 0, $1120 | 0) | 0;
 $1348 = getTempRet0() | 0;
 $1349 = _i64Add($1347 | 0, $1348 | 0, $1341 | 0, $1342 | 0) | 0;
 $1350 = getTempRet0() | 0;
 $1351 = $1339 & -2097152;
 $1352 = _i64Subtract($1213 | 0, $1214 | 0, $1351 | 0, $1340 | 0) | 0;
 $1353 = getTempRet0() | 0;
 $1354 = _i64Add($1169 | 0, $1170 | 0, 1048576, 0) | 0;
 $1355 = getTempRet0() | 0;
 $1356 = _bitshift64Ashr($1354 | 0, $1355 | 0, 21) | 0;
 $1357 = getTempRet0() | 0;
 $1358 = _i64Add($1131 | 0, $1132 | 0, $1356 | 0, $1357 | 0) | 0;
 $1359 = getTempRet0() | 0;
 $1360 = $1354 & -2097152;
 $1361 = _i64Add($1289 | 0, $1290 | 0, 1048576, 0) | 0;
 $1362 = getTempRet0() | 0;
 $1363 = _bitshift64Ashr($1361 | 0, $1362 | 0, 21) | 0;
 $1364 = getTempRet0() | 0;
 $1365 = $1361 & -2097152;
 $1366 = _i64Add($1304 | 0, $1305 | 0, 1048576, 0) | 0;
 $1367 = getTempRet0() | 0;
 $1368 = _bitshift64Ashr($1366 | 0, $1367 | 0, 21) | 0;
 $1369 = getTempRet0() | 0;
 $1370 = $1366 & -2097152;
 $1371 = _i64Add($1317 | 0, $1318 | 0, 1048576, 0) | 0;
 $1372 = getTempRet0() | 0;
 $1373 = _bitshift64Ashr($1371 | 0, $1372 | 0, 21) | 0;
 $1374 = getTempRet0() | 0;
 $1375 = _i64Add($1337 | 0, $1338 | 0, $1373 | 0, $1374 | 0) | 0;
 $1376 = getTempRet0() | 0;
 $1377 = $1371 & -2097152;
 $1378 = _i64Add($1334 | 0, $1335 | 0, 1048576, 0) | 0;
 $1379 = getTempRet0() | 0;
 $1380 = _bitshift64Ashr($1378 | 0, $1379 | 0, 21) | 0;
 $1381 = getTempRet0() | 0;
 $1382 = _i64Add($1352 | 0, $1353 | 0, $1380 | 0, $1381 | 0) | 0;
 $1383 = getTempRet0() | 0;
 $1384 = $1378 & -2097152;
 $1385 = _i64Subtract($1334 | 0, $1335 | 0, $1384 | 0, $1379 | 0) | 0;
 $1386 = getTempRet0() | 0;
 $1387 = _i64Add($1349 | 0, $1350 | 0, 1048576, 0) | 0;
 $1388 = getTempRet0() | 0;
 $1389 = _bitshift64Ashr($1387 | 0, $1388 | 0, 21) | 0;
 $1390 = getTempRet0() | 0;
 $1391 = $1387 & -2097152;
 $1392 = _i64Subtract($1349 | 0, $1350 | 0, $1391 | 0, $1388 | 0) | 0;
 $1393 = getTempRet0() | 0;
 $1394 = _i64Add($1358 | 0, $1359 | 0, 1048576, 0) | 0;
 $1395 = getTempRet0() | 0;
 $1396 = _bitshift64Ashr($1394 | 0, $1395 | 0, 21) | 0;
 $1397 = getTempRet0() | 0;
 $1398 = $1394 & -2097152;
 $1399 = _i64Subtract($1358 | 0, $1359 | 0, $1398 | 0, $1395 | 0) | 0;
 $1400 = getTempRet0() | 0;
 $1401 = ___muldi3($1396 | 0, $1397 | 0, 666643, 0) | 0;
 $1402 = getTempRet0() | 0;
 $1403 = _i64Add($1292 | 0, $1293 | 0, $1401 | 0, $1402 | 0) | 0;
 $1404 = getTempRet0() | 0;
 $1405 = ___muldi3($1396 | 0, $1397 | 0, 470296, 0) | 0;
 $1406 = getTempRet0() | 0;
 $1407 = ___muldi3($1396 | 0, $1397 | 0, 654183, 0) | 0;
 $1408 = getTempRet0() | 0;
 $1409 = ___muldi3($1396 | 0, $1397 | 0, -997805, -1) | 0;
 $1410 = getTempRet0() | 0;
 $1411 = ___muldi3($1396 | 0, $1397 | 0, 136657, 0) | 0;
 $1412 = getTempRet0() | 0;
 $1413 = ___muldi3($1396 | 0, $1397 | 0, -683901, -1) | 0;
 $1414 = getTempRet0() | 0;
 $1415 = _bitshift64Ashr($1403 | 0, $1404 | 0, 21) | 0;
 $1416 = getTempRet0() | 0;
 $1417 = _i64Add($1289 | 0, $1290 | 0, $1405 | 0, $1406 | 0) | 0;
 $1418 = getTempRet0() | 0;
 $1419 = _i64Subtract($1417 | 0, $1418 | 0, $1365 | 0, $1362 | 0) | 0;
 $1420 = getTempRet0() | 0;
 $1421 = _i64Add($1419 | 0, $1420 | 0, $1415 | 0, $1416 | 0) | 0;
 $1422 = getTempRet0() | 0;
 $1423 = $1403 & 2097151;
 $1424 = _bitshift64Ashr($1421 | 0, $1422 | 0, 21) | 0;
 $1425 = getTempRet0() | 0;
 $1426 = _i64Add($1267 | 0, $1268 | 0, $1407 | 0, $1408 | 0) | 0;
 $1427 = getTempRet0() | 0;
 $1428 = _i64Subtract($1426 | 0, $1427 | 0, $1306 | 0, $1295 | 0) | 0;
 $1429 = getTempRet0() | 0;
 $1430 = _i64Add($1428 | 0, $1429 | 0, $1363 | 0, $1364 | 0) | 0;
 $1431 = getTempRet0() | 0;
 $1432 = _i64Add($1430 | 0, $1431 | 0, $1424 | 0, $1425 | 0) | 0;
 $1433 = getTempRet0() | 0;
 $1434 = $1421 & 2097151;
 $1435 = _bitshift64Ashr($1432 | 0, $1433 | 0, 21) | 0;
 $1436 = getTempRet0() | 0;
 $1437 = _i64Add($1304 | 0, $1305 | 0, $1409 | 0, $1410 | 0) | 0;
 $1438 = getTempRet0() | 0;
 $1439 = _i64Subtract($1437 | 0, $1438 | 0, $1370 | 0, $1367 | 0) | 0;
 $1440 = getTempRet0() | 0;
 $1441 = _i64Add($1439 | 0, $1440 | 0, $1435 | 0, $1436 | 0) | 0;
 $1442 = getTempRet0() | 0;
 $1443 = $1432 & 2097151;
 $1444 = _bitshift64Ashr($1441 | 0, $1442 | 0, 21) | 0;
 $1445 = getTempRet0() | 0;
 $1446 = _i64Add($1277 | 0, $1278 | 0, $1411 | 0, $1412 | 0) | 0;
 $1447 = getTempRet0() | 0;
 $1448 = _i64Subtract($1446 | 0, $1447 | 0, $1319 | 0, $1308 | 0) | 0;
 $1449 = getTempRet0() | 0;
 $1450 = _i64Add($1448 | 0, $1449 | 0, $1368 | 0, $1369 | 0) | 0;
 $1451 = getTempRet0() | 0;
 $1452 = _i64Add($1450 | 0, $1451 | 0, $1444 | 0, $1445 | 0) | 0;
 $1453 = getTempRet0() | 0;
 $1454 = $1441 & 2097151;
 $1455 = _bitshift64Ashr($1452 | 0, $1453 | 0, 21) | 0;
 $1456 = getTempRet0() | 0;
 $1457 = _i64Add($1317 | 0, $1318 | 0, $1413 | 0, $1414 | 0) | 0;
 $1458 = getTempRet0() | 0;
 $1459 = _i64Subtract($1457 | 0, $1458 | 0, $1377 | 0, $1372 | 0) | 0;
 $1460 = getTempRet0() | 0;
 $1461 = _i64Add($1459 | 0, $1460 | 0, $1455 | 0, $1456 | 0) | 0;
 $1462 = getTempRet0() | 0;
 $1463 = $1452 & 2097151;
 $1464 = _bitshift64Ashr($1461 | 0, $1462 | 0, 21) | 0;
 $1465 = getTempRet0() | 0;
 $1466 = _i64Add($1375 | 0, $1376 | 0, $1464 | 0, $1465 | 0) | 0;
 $1467 = getTempRet0() | 0;
 $1468 = $1461 & 2097151;
 $1469 = _bitshift64Ashr($1466 | 0, $1467 | 0, 21) | 0;
 $1470 = getTempRet0() | 0;
 $1471 = _i64Add($1469 | 0, $1470 | 0, $1385 | 0, $1386 | 0) | 0;
 $1472 = getTempRet0() | 0;
 $1473 = $1466 & 2097151;
 $1474 = _bitshift64Ashr($1471 | 0, $1472 | 0, 21) | 0;
 $1475 = getTempRet0() | 0;
 $1476 = _i64Add($1382 | 0, $1383 | 0, $1474 | 0, $1475 | 0) | 0;
 $1477 = getTempRet0() | 0;
 $1478 = $1471 & 2097151;
 $1479 = _bitshift64Ashr($1476 | 0, $1477 | 0, 21) | 0;
 $1480 = getTempRet0() | 0;
 $1481 = _i64Add($1479 | 0, $1480 | 0, $1392 | 0, $1393 | 0) | 0;
 $1482 = getTempRet0() | 0;
 $1483 = $1476 & 2097151;
 $1484 = _bitshift64Ashr($1481 | 0, $1482 | 0, 21) | 0;
 $1485 = getTempRet0() | 0;
 $1486 = _i64Add($1169 | 0, $1170 | 0, $1389 | 0, $1390 | 0) | 0;
 $1487 = getTempRet0() | 0;
 $1488 = _i64Subtract($1486 | 0, $1487 | 0, $1360 | 0, $1355 | 0) | 0;
 $1489 = getTempRet0() | 0;
 $1490 = _i64Add($1488 | 0, $1489 | 0, $1484 | 0, $1485 | 0) | 0;
 $1491 = getTempRet0() | 0;
 $1492 = $1481 & 2097151;
 $1493 = _bitshift64Ashr($1490 | 0, $1491 | 0, 21) | 0;
 $1494 = getTempRet0() | 0;
 $1495 = _i64Add($1493 | 0, $1494 | 0, $1399 | 0, $1400 | 0) | 0;
 $1496 = getTempRet0() | 0;
 $1497 = $1490 & 2097151;
 $1498 = _bitshift64Ashr($1495 | 0, $1496 | 0, 21) | 0;
 $1499 = getTempRet0() | 0;
 $1500 = $1495 & 2097151;
 $1501 = ___muldi3($1498 | 0, $1499 | 0, 666643, 0) | 0;
 $1502 = getTempRet0() | 0;
 $1503 = _i64Add($1501 | 0, $1502 | 0, $1423 | 0, 0) | 0;
 $1504 = getTempRet0() | 0;
 $1505 = ___muldi3($1498 | 0, $1499 | 0, 470296, 0) | 0;
 $1506 = getTempRet0() | 0;
 $1507 = _i64Add($1505 | 0, $1506 | 0, $1434 | 0, 0) | 0;
 $1508 = getTempRet0() | 0;
 $1509 = ___muldi3($1498 | 0, $1499 | 0, 654183, 0) | 0;
 $1510 = getTempRet0() | 0;
 $1511 = _i64Add($1509 | 0, $1510 | 0, $1443 | 0, 0) | 0;
 $1512 = getTempRet0() | 0;
 $1513 = ___muldi3($1498 | 0, $1499 | 0, -997805, -1) | 0;
 $1514 = getTempRet0() | 0;
 $1515 = _i64Add($1513 | 0, $1514 | 0, $1454 | 0, 0) | 0;
 $1516 = getTempRet0() | 0;
 $1517 = ___muldi3($1498 | 0, $1499 | 0, 136657, 0) | 0;
 $1518 = getTempRet0() | 0;
 $1519 = _i64Add($1517 | 0, $1518 | 0, $1463 | 0, 0) | 0;
 $1520 = getTempRet0() | 0;
 $1521 = ___muldi3($1498 | 0, $1499 | 0, -683901, -1) | 0;
 $1522 = getTempRet0() | 0;
 $1523 = _i64Add($1521 | 0, $1522 | 0, $1468 | 0, 0) | 0;
 $1524 = getTempRet0() | 0;
 $1525 = _bitshift64Ashr($1503 | 0, $1504 | 0, 21) | 0;
 $1526 = getTempRet0() | 0;
 $1527 = _i64Add($1507 | 0, $1508 | 0, $1525 | 0, $1526 | 0) | 0;
 $1528 = getTempRet0() | 0;
 $1529 = _bitshift64Ashr($1527 | 0, $1528 | 0, 21) | 0;
 $1530 = getTempRet0() | 0;
 $1531 = _i64Add($1511 | 0, $1512 | 0, $1529 | 0, $1530 | 0) | 0;
 $1532 = getTempRet0() | 0;
 $1533 = $1527 & 2097151;
 $1534 = _bitshift64Ashr($1531 | 0, $1532 | 0, 21) | 0;
 $1535 = getTempRet0() | 0;
 $1536 = _i64Add($1515 | 0, $1516 | 0, $1534 | 0, $1535 | 0) | 0;
 $1537 = getTempRet0() | 0;
 $1538 = $1531 & 2097151;
 $1539 = _bitshift64Ashr($1536 | 0, $1537 | 0, 21) | 0;
 $1540 = getTempRet0() | 0;
 $1541 = _i64Add($1519 | 0, $1520 | 0, $1539 | 0, $1540 | 0) | 0;
 $1542 = getTempRet0() | 0;
 $1543 = $1536 & 2097151;
 $1544 = _bitshift64Ashr($1541 | 0, $1542 | 0, 21) | 0;
 $1545 = getTempRet0() | 0;
 $1546 = _i64Add($1523 | 0, $1524 | 0, $1544 | 0, $1545 | 0) | 0;
 $1547 = getTempRet0() | 0;
 $1548 = $1541 & 2097151;
 $1549 = _bitshift64Ashr($1546 | 0, $1547 | 0, 21) | 0;
 $1550 = getTempRet0() | 0;
 $1551 = _i64Add($1549 | 0, $1550 | 0, $1473 | 0, 0) | 0;
 $1552 = getTempRet0() | 0;
 $1553 = $1546 & 2097151;
 $1554 = _bitshift64Ashr($1551 | 0, $1552 | 0, 21) | 0;
 $1555 = getTempRet0() | 0;
 $1556 = _i64Add($1554 | 0, $1555 | 0, $1478 | 0, 0) | 0;
 $1557 = getTempRet0() | 0;
 $1558 = $1551 & 2097151;
 $1559 = _bitshift64Ashr($1556 | 0, $1557 | 0, 21) | 0;
 $1560 = getTempRet0() | 0;
 $1561 = _i64Add($1559 | 0, $1560 | 0, $1483 | 0, 0) | 0;
 $1562 = getTempRet0() | 0;
 $1563 = _bitshift64Ashr($1561 | 0, $1562 | 0, 21) | 0;
 $1564 = getTempRet0() | 0;
 $1565 = _i64Add($1563 | 0, $1564 | 0, $1492 | 0, 0) | 0;
 $1566 = getTempRet0() | 0;
 $1567 = _bitshift64Ashr($1565 | 0, $1566 | 0, 21) | 0;
 $1568 = getTempRet0() | 0;
 $1569 = _i64Add($1567 | 0, $1568 | 0, $1497 | 0, 0) | 0;
 $1570 = getTempRet0() | 0;
 $1571 = $1565 & 2097151;
 $1572 = _bitshift64Ashr($1569 | 0, $1570 | 0, 21) | 0;
 $1573 = getTempRet0() | 0;
 $1574 = _i64Add($1572 | 0, $1573 | 0, $1500 | 0, 0) | 0;
 $1575 = getTempRet0() | 0;
 $1576 = $1569 & 2097151;
 $1577 = $1503 & 255;
 HEAP8[$s >> 0] = $1577;
 $1578 = _bitshift64Lshr($1503 | 0, $1504 | 0, 8) | 0;
 $1579 = getTempRet0() | 0;
 $1580 = $1578 & 255;
 $arrayidx906 = $s + 1 | 0;
 HEAP8[$arrayidx906 >> 0] = $1580;
 $1581 = _bitshift64Lshr($1503 | 0, $1504 | 0, 16) | 0;
 $1582 = getTempRet0() | 0;
 $1583 = $1581 & 31;
 $1584 = _bitshift64Shl($1533 | 0, 0, 5) | 0;
 $1585 = getTempRet0() | 0;
 $1586 = $1584 | $1583;
 $1587 = $1586 & 255;
 $arrayidx910 = $s + 2 | 0;
 HEAP8[$arrayidx910 >> 0] = $1587;
 $1588 = _bitshift64Lshr($1527 | 0, $1528 | 0, 3) | 0;
 $1589 = getTempRet0() | 0;
 $1590 = $1588 & 255;
 $arrayidx913 = $s + 3 | 0;
 HEAP8[$arrayidx913 >> 0] = $1590;
 $1591 = _bitshift64Lshr($1527 | 0, $1528 | 0, 11) | 0;
 $1592 = getTempRet0() | 0;
 $1593 = $1591 & 255;
 $arrayidx916 = $s + 4 | 0;
 HEAP8[$arrayidx916 >> 0] = $1593;
 $1594 = _bitshift64Lshr($1533 | 0, 0, 19) | 0;
 $1595 = getTempRet0() | 0;
 $1596 = _bitshift64Shl($1538 | 0, 0, 2) | 0;
 $1597 = getTempRet0() | 0;
 $1598 = $1596 | $1594;
 $1597 | $1595;
 $1599 = $1598 & 255;
 $arrayidx921 = $s + 5 | 0;
 HEAP8[$arrayidx921 >> 0] = $1599;
 $1600 = _bitshift64Lshr($1531 | 0, $1532 | 0, 6) | 0;
 $1601 = getTempRet0() | 0;
 $1602 = $1600 & 255;
 $arrayidx924 = $s + 6 | 0;
 HEAP8[$arrayidx924 >> 0] = $1602;
 $1603 = _bitshift64Lshr($1538 | 0, 0, 14) | 0;
 $1604 = getTempRet0() | 0;
 $1605 = _bitshift64Shl($1543 | 0, 0, 7) | 0;
 $1606 = getTempRet0() | 0;
 $1607 = $1605 | $1603;
 $1606 | $1604;
 $1608 = $1607 & 255;
 $arrayidx929 = $s + 7 | 0;
 HEAP8[$arrayidx929 >> 0] = $1608;
 $1609 = _bitshift64Lshr($1536 | 0, $1537 | 0, 1) | 0;
 $1610 = getTempRet0() | 0;
 $1611 = $1609 & 255;
 $arrayidx932 = $s + 8 | 0;
 HEAP8[$arrayidx932 >> 0] = $1611;
 $1612 = _bitshift64Lshr($1536 | 0, $1537 | 0, 9) | 0;
 $1613 = getTempRet0() | 0;
 $1614 = $1612 & 255;
 $arrayidx935 = $s + 9 | 0;
 HEAP8[$arrayidx935 >> 0] = $1614;
 $1615 = _bitshift64Lshr($1543 | 0, 0, 17) | 0;
 $1616 = getTempRet0() | 0;
 $1617 = _bitshift64Shl($1548 | 0, 0, 4) | 0;
 $1618 = getTempRet0() | 0;
 $1619 = $1617 | $1615;
 $1618 | $1616;
 $1620 = $1619 & 255;
 $arrayidx940 = $s + 10 | 0;
 HEAP8[$arrayidx940 >> 0] = $1620;
 $1621 = _bitshift64Lshr($1541 | 0, $1542 | 0, 4) | 0;
 $1622 = getTempRet0() | 0;
 $1623 = $1621 & 255;
 $arrayidx943 = $s + 11 | 0;
 HEAP8[$arrayidx943 >> 0] = $1623;
 $1624 = _bitshift64Lshr($1541 | 0, $1542 | 0, 12) | 0;
 $1625 = getTempRet0() | 0;
 $1626 = $1624 & 255;
 $arrayidx946 = $s + 12 | 0;
 HEAP8[$arrayidx946 >> 0] = $1626;
 $1627 = _bitshift64Lshr($1548 | 0, 0, 20) | 0;
 $1628 = getTempRet0() | 0;
 $1629 = _bitshift64Shl($1553 | 0, 0, 1) | 0;
 $1630 = getTempRet0() | 0;
 $1631 = $1629 | $1627;
 $1630 | $1628;
 $1632 = $1631 & 255;
 $arrayidx951 = $s + 13 | 0;
 HEAP8[$arrayidx951 >> 0] = $1632;
 $1633 = _bitshift64Lshr($1546 | 0, $1547 | 0, 7) | 0;
 $1634 = getTempRet0() | 0;
 $1635 = $1633 & 255;
 $arrayidx954 = $s + 14 | 0;
 HEAP8[$arrayidx954 >> 0] = $1635;
 $1636 = _bitshift64Lshr($1553 | 0, 0, 15) | 0;
 $1637 = getTempRet0() | 0;
 $1638 = _bitshift64Shl($1558 | 0, 0, 6) | 0;
 $1639 = getTempRet0() | 0;
 $1640 = $1638 | $1636;
 $1639 | $1637;
 $1641 = $1640 & 255;
 $arrayidx959 = $s + 15 | 0;
 HEAP8[$arrayidx959 >> 0] = $1641;
 $1642 = _bitshift64Lshr($1551 | 0, $1552 | 0, 2) | 0;
 $1643 = getTempRet0() | 0;
 $1644 = $1642 & 255;
 $arrayidx962 = $s + 16 | 0;
 HEAP8[$arrayidx962 >> 0] = $1644;
 $1645 = _bitshift64Lshr($1551 | 0, $1552 | 0, 10) | 0;
 $1646 = getTempRet0() | 0;
 $1647 = $1645 & 255;
 $arrayidx965 = $s + 17 | 0;
 HEAP8[$arrayidx965 >> 0] = $1647;
 $1648 = _bitshift64Lshr($1558 | 0, 0, 18) | 0;
 $1649 = getTempRet0() | 0;
 $1650 = _bitshift64Shl($1556 | 0, $1557 | 0, 3) | 0;
 $1651 = getTempRet0() | 0;
 $1652 = $1650 | $1648;
 $1651 | $1649;
 $1653 = $1652 & 255;
 $arrayidx970 = $s + 18 | 0;
 HEAP8[$arrayidx970 >> 0] = $1653;
 $1654 = _bitshift64Lshr($1556 | 0, $1557 | 0, 5) | 0;
 $1655 = getTempRet0() | 0;
 $1656 = $1654 & 255;
 $arrayidx973 = $s + 19 | 0;
 HEAP8[$arrayidx973 >> 0] = $1656;
 $1657 = _bitshift64Lshr($1556 | 0, $1557 | 0, 13) | 0;
 $1658 = getTempRet0() | 0;
 $1659 = $1657 & 255;
 $arrayidx976 = $s + 20 | 0;
 HEAP8[$arrayidx976 >> 0] = $1659;
 $1660 = $1561 & 255;
 $arrayidx979 = $s + 21 | 0;
 HEAP8[$arrayidx979 >> 0] = $1660;
 $1661 = _bitshift64Lshr($1561 | 0, $1562 | 0, 8) | 0;
 $1662 = getTempRet0() | 0;
 $1663 = $1661 & 255;
 $arrayidx982 = $s + 22 | 0;
 HEAP8[$arrayidx982 >> 0] = $1663;
 $1664 = _bitshift64Lshr($1561 | 0, $1562 | 0, 16) | 0;
 $1665 = getTempRet0() | 0;
 $1666 = $1664 & 31;
 $1667 = _bitshift64Shl($1571 | 0, 0, 5) | 0;
 $1668 = getTempRet0() | 0;
 $1669 = $1667 | $1666;
 $1670 = $1669 & 255;
 $arrayidx987 = $s + 23 | 0;
 HEAP8[$arrayidx987 >> 0] = $1670;
 $1671 = _bitshift64Lshr($1565 | 0, $1566 | 0, 3) | 0;
 $1672 = getTempRet0() | 0;
 $1673 = $1671 & 255;
 $arrayidx990 = $s + 24 | 0;
 HEAP8[$arrayidx990 >> 0] = $1673;
 $1674 = _bitshift64Lshr($1565 | 0, $1566 | 0, 11) | 0;
 $1675 = getTempRet0() | 0;
 $1676 = $1674 & 255;
 $arrayidx993 = $s + 25 | 0;
 HEAP8[$arrayidx993 >> 0] = $1676;
 $1677 = _bitshift64Lshr($1571 | 0, 0, 19) | 0;
 $1678 = getTempRet0() | 0;
 $1679 = _bitshift64Shl($1576 | 0, 0, 2) | 0;
 $1680 = getTempRet0() | 0;
 $1681 = $1679 | $1677;
 $1680 | $1678;
 $1682 = $1681 & 255;
 $arrayidx998 = $s + 26 | 0;
 HEAP8[$arrayidx998 >> 0] = $1682;
 $1683 = _bitshift64Lshr($1569 | 0, $1570 | 0, 6) | 0;
 $1684 = getTempRet0() | 0;
 $1685 = $1683 & 255;
 $arrayidx1001 = $s + 27 | 0;
 HEAP8[$arrayidx1001 >> 0] = $1685;
 $1686 = _bitshift64Lshr($1576 | 0, 0, 14) | 0;
 $1687 = getTempRet0() | 0;
 $1688 = _bitshift64Shl($1574 | 0, $1575 | 0, 7) | 0;
 $1689 = getTempRet0() | 0;
 $1690 = $1688 | $1686;
 $1689 | $1687;
 $1691 = $1690 & 255;
 $arrayidx1006 = $s + 28 | 0;
 HEAP8[$arrayidx1006 >> 0] = $1691;
 $1692 = _bitshift64Lshr($1574 | 0, $1575 | 0, 1) | 0;
 $1693 = getTempRet0() | 0;
 $1694 = $1692 & 255;
 $arrayidx1009 = $s + 29 | 0;
 HEAP8[$arrayidx1009 >> 0] = $1694;
 $1695 = _bitshift64Lshr($1574 | 0, $1575 | 0, 9) | 0;
 $1696 = getTempRet0() | 0;
 $1697 = $1695 & 255;
 $arrayidx1012 = $s + 30 | 0;
 HEAP8[$arrayidx1012 >> 0] = $1697;
 $1698 = _bitshift64Ashr($1574 | 0, $1575 | 0, 17) | 0;
 $1699 = getTempRet0() | 0;
 $1700 = $1698 & 255;
 $arrayidx1015 = $s + 31 | 0;
 HEAP8[$arrayidx1015 >> 0] = $1700;
 return;
}

function _sc_mul($s, $a, $b) {
 $s = $s | 0;
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$idx = 0, $a$idx$val = 0, $a$idx837 = 0, $a$idx837$val = 0, $a$val = 0, $add$ptr11 = 0, $add$ptr15 = 0, $add$ptr15$idx = 0, $add$ptr15$idx$val = 0, $add$ptr15$idx835 = 0, $add$ptr15$idx835$val = 0, $add$ptr15$val = 0, $add$ptr23 = 0, $add$ptr23$idx = 0;
 var $add$ptr23$idx$val = 0, $add$ptr23$idx834 = 0, $add$ptr23$idx834$val = 0, $add$ptr23$val = 0, $add$ptr27 = 0, $add$ptr27$idx = 0, $add$ptr27$idx$val = 0, $add$ptr27$idx833 = 0, $add$ptr27$idx833$val = 0, $add$ptr27$val = 0, $add$ptr3 = 0, $add$ptr3$idx = 0, $add$ptr3$idx$val = 0, $add$ptr3$idx836 = 0, $add$ptr3$idx836$val = 0, $add$ptr3$val = 0, $add$ptr34 = 0, $add$ptr34$idx = 0, $add$ptr34$idx$val = 0, $add$ptr34$idx832 = 0;
 var $add$ptr34$idx832$val = 0, $add$ptr34$val = 0, $add$ptr47 = 0, $add$ptr47$idx = 0, $add$ptr47$idx$val = 0, $add$ptr47$idx830 = 0, $add$ptr47$idx830$val = 0, $add$ptr47$val = 0, $add$ptr55 = 0, $add$ptr59 = 0, $add$ptr59$idx = 0, $add$ptr59$idx$val = 0, $add$ptr59$idx829 = 0, $add$ptr59$idx829$val = 0, $add$ptr59$val = 0, $add$ptr67 = 0, $add$ptr67$idx = 0, $add$ptr67$idx$val = 0, $add$ptr67$idx828 = 0, $add$ptr67$idx828$val = 0;
 var $add$ptr67$val = 0, $add$ptr71 = 0, $add$ptr71$idx = 0, $add$ptr71$idx$val = 0, $add$ptr71$idx827 = 0, $add$ptr71$idx827$val = 0, $add$ptr71$val = 0, $add$ptr78 = 0, $add$ptr78$idx = 0, $add$ptr78$idx$val = 0, $add$ptr78$idx826 = 0, $add$ptr78$idx826$val = 0, $add$ptr78$val = 0, $arrayidx839 = 0, $arrayidx843 = 0, $arrayidx846 = 0, $arrayidx849 = 0, $arrayidx854 = 0, $arrayidx857 = 0, $arrayidx862 = 0;
 var $arrayidx865 = 0, $arrayidx868 = 0, $arrayidx873 = 0, $arrayidx876 = 0, $arrayidx879 = 0, $arrayidx884 = 0, $arrayidx887 = 0, $arrayidx892 = 0, $arrayidx895 = 0, $arrayidx898 = 0, $arrayidx903 = 0, $arrayidx906 = 0, $arrayidx909 = 0, $arrayidx912 = 0, $arrayidx915 = 0, $arrayidx920 = 0, $arrayidx923 = 0, $arrayidx926 = 0, $arrayidx931 = 0, $arrayidx934 = 0;
 var $arrayidx939 = 0, $arrayidx942 = 0, $arrayidx945 = 0, $arrayidx948 = 0, $b$idx = 0, $b$idx$val = 0, $b$idx831 = 0, $b$idx831$val = 0, $b$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $a$val = HEAP8[$a >> 0] | 0;
 $a$idx = $a + 1 | 0;
 $a$idx$val = HEAP8[$a$idx >> 0] | 0;
 $a$idx837 = $a + 2 | 0;
 $a$idx837$val = HEAP8[$a$idx837 >> 0] | 0;
 $0 = _load_3($a$val, $a$idx$val, $a$idx837$val) | 0;
 $1 = getTempRet0() | 0;
 $2 = $0 & 2097151;
 $3 = _load_4($a$idx837) | 0;
 $4 = getTempRet0() | 0;
 $5 = _bitshift64Lshr($3 | 0, $4 | 0, 5) | 0;
 $6 = getTempRet0() | 0;
 $7 = $5 & 2097151;
 $add$ptr3 = $a + 5 | 0;
 $add$ptr3$val = HEAP8[$add$ptr3 >> 0] | 0;
 $add$ptr3$idx = $a + 6 | 0;
 $add$ptr3$idx$val = HEAP8[$add$ptr3$idx >> 0] | 0;
 $add$ptr3$idx836 = $a + 7 | 0;
 $add$ptr3$idx836$val = HEAP8[$add$ptr3$idx836 >> 0] | 0;
 $8 = _load_3($add$ptr3$val, $add$ptr3$idx$val, $add$ptr3$idx836$val) | 0;
 $9 = getTempRet0() | 0;
 $10 = _bitshift64Lshr($8 | 0, $9 | 0, 2) | 0;
 $11 = getTempRet0() | 0;
 $12 = $10 & 2097151;
 $13 = _load_4($add$ptr3$idx836) | 0;
 $14 = getTempRet0() | 0;
 $15 = _bitshift64Lshr($13 | 0, $14 | 0, 7) | 0;
 $16 = getTempRet0() | 0;
 $17 = $15 & 2097151;
 $add$ptr11 = $a + 10 | 0;
 $18 = _load_4($add$ptr11) | 0;
 $19 = getTempRet0() | 0;
 $20 = _bitshift64Lshr($18 | 0, $19 | 0, 4) | 0;
 $21 = getTempRet0() | 0;
 $22 = $20 & 2097151;
 $add$ptr15 = $a + 13 | 0;
 $add$ptr15$val = HEAP8[$add$ptr15 >> 0] | 0;
 $add$ptr15$idx = $a + 14 | 0;
 $add$ptr15$idx$val = HEAP8[$add$ptr15$idx >> 0] | 0;
 $add$ptr15$idx835 = $a + 15 | 0;
 $add$ptr15$idx835$val = HEAP8[$add$ptr15$idx835 >> 0] | 0;
 $23 = _load_3($add$ptr15$val, $add$ptr15$idx$val, $add$ptr15$idx835$val) | 0;
 $24 = getTempRet0() | 0;
 $25 = _bitshift64Lshr($23 | 0, $24 | 0, 1) | 0;
 $26 = getTempRet0() | 0;
 $27 = $25 & 2097151;
 $28 = _load_4($add$ptr15$idx835) | 0;
 $29 = getTempRet0() | 0;
 $30 = _bitshift64Lshr($28 | 0, $29 | 0, 6) | 0;
 $31 = getTempRet0() | 0;
 $32 = $30 & 2097151;
 $add$ptr23 = $a + 18 | 0;
 $add$ptr23$val = HEAP8[$add$ptr23 >> 0] | 0;
 $add$ptr23$idx = $a + 19 | 0;
 $add$ptr23$idx$val = HEAP8[$add$ptr23$idx >> 0] | 0;
 $add$ptr23$idx834 = $a + 20 | 0;
 $add$ptr23$idx834$val = HEAP8[$add$ptr23$idx834 >> 0] | 0;
 $33 = _load_3($add$ptr23$val, $add$ptr23$idx$val, $add$ptr23$idx834$val) | 0;
 $34 = getTempRet0() | 0;
 $35 = _bitshift64Lshr($33 | 0, $34 | 0, 3) | 0;
 $36 = getTempRet0() | 0;
 $37 = $35 & 2097151;
 $add$ptr27 = $a + 21 | 0;
 $add$ptr27$val = HEAP8[$add$ptr27 >> 0] | 0;
 $add$ptr27$idx = $a + 22 | 0;
 $add$ptr27$idx$val = HEAP8[$add$ptr27$idx >> 0] | 0;
 $add$ptr27$idx833 = $a + 23 | 0;
 $add$ptr27$idx833$val = HEAP8[$add$ptr27$idx833 >> 0] | 0;
 $38 = _load_3($add$ptr27$val, $add$ptr27$idx$val, $add$ptr27$idx833$val) | 0;
 $39 = getTempRet0() | 0;
 $40 = $38 & 2097151;
 $41 = _load_4($add$ptr27$idx833) | 0;
 $42 = getTempRet0() | 0;
 $43 = _bitshift64Lshr($41 | 0, $42 | 0, 5) | 0;
 $44 = getTempRet0() | 0;
 $45 = $43 & 2097151;
 $add$ptr34 = $a + 26 | 0;
 $add$ptr34$val = HEAP8[$add$ptr34 >> 0] | 0;
 $add$ptr34$idx = $a + 27 | 0;
 $add$ptr34$idx$val = HEAP8[$add$ptr34$idx >> 0] | 0;
 $add$ptr34$idx832 = $a + 28 | 0;
 $add$ptr34$idx832$val = HEAP8[$add$ptr34$idx832 >> 0] | 0;
 $46 = _load_3($add$ptr34$val, $add$ptr34$idx$val, $add$ptr34$idx832$val) | 0;
 $47 = getTempRet0() | 0;
 $48 = _bitshift64Lshr($46 | 0, $47 | 0, 2) | 0;
 $49 = getTempRet0() | 0;
 $50 = $48 & 2097151;
 $51 = _load_4($add$ptr34$idx832) | 0;
 $52 = getTempRet0() | 0;
 $53 = _bitshift64Lshr($51 | 0, $52 | 0, 7) | 0;
 $54 = getTempRet0() | 0;
 $b$val = HEAP8[$b >> 0] | 0;
 $b$idx = $b + 1 | 0;
 $b$idx$val = HEAP8[$b$idx >> 0] | 0;
 $b$idx831 = $b + 2 | 0;
 $b$idx831$val = HEAP8[$b$idx831 >> 0] | 0;
 $55 = _load_3($b$val, $b$idx$val, $b$idx831$val) | 0;
 $56 = getTempRet0() | 0;
 $57 = $55 & 2097151;
 $58 = _load_4($b$idx831) | 0;
 $59 = getTempRet0() | 0;
 $60 = _bitshift64Lshr($58 | 0, $59 | 0, 5) | 0;
 $61 = getTempRet0() | 0;
 $62 = $60 & 2097151;
 $add$ptr47 = $b + 5 | 0;
 $add$ptr47$val = HEAP8[$add$ptr47 >> 0] | 0;
 $add$ptr47$idx = $b + 6 | 0;
 $add$ptr47$idx$val = HEAP8[$add$ptr47$idx >> 0] | 0;
 $add$ptr47$idx830 = $b + 7 | 0;
 $add$ptr47$idx830$val = HEAP8[$add$ptr47$idx830 >> 0] | 0;
 $63 = _load_3($add$ptr47$val, $add$ptr47$idx$val, $add$ptr47$idx830$val) | 0;
 $64 = getTempRet0() | 0;
 $65 = _bitshift64Lshr($63 | 0, $64 | 0, 2) | 0;
 $66 = getTempRet0() | 0;
 $67 = $65 & 2097151;
 $68 = _load_4($add$ptr47$idx830) | 0;
 $69 = getTempRet0() | 0;
 $70 = _bitshift64Lshr($68 | 0, $69 | 0, 7) | 0;
 $71 = getTempRet0() | 0;
 $72 = $70 & 2097151;
 $add$ptr55 = $b + 10 | 0;
 $73 = _load_4($add$ptr55) | 0;
 $74 = getTempRet0() | 0;
 $75 = _bitshift64Lshr($73 | 0, $74 | 0, 4) | 0;
 $76 = getTempRet0() | 0;
 $77 = $75 & 2097151;
 $add$ptr59 = $b + 13 | 0;
 $add$ptr59$val = HEAP8[$add$ptr59 >> 0] | 0;
 $add$ptr59$idx = $b + 14 | 0;
 $add$ptr59$idx$val = HEAP8[$add$ptr59$idx >> 0] | 0;
 $add$ptr59$idx829 = $b + 15 | 0;
 $add$ptr59$idx829$val = HEAP8[$add$ptr59$idx829 >> 0] | 0;
 $78 = _load_3($add$ptr59$val, $add$ptr59$idx$val, $add$ptr59$idx829$val) | 0;
 $79 = getTempRet0() | 0;
 $80 = _bitshift64Lshr($78 | 0, $79 | 0, 1) | 0;
 $81 = getTempRet0() | 0;
 $82 = $80 & 2097151;
 $83 = _load_4($add$ptr59$idx829) | 0;
 $84 = getTempRet0() | 0;
 $85 = _bitshift64Lshr($83 | 0, $84 | 0, 6) | 0;
 $86 = getTempRet0() | 0;
 $87 = $85 & 2097151;
 $add$ptr67 = $b + 18 | 0;
 $add$ptr67$val = HEAP8[$add$ptr67 >> 0] | 0;
 $add$ptr67$idx = $b + 19 | 0;
 $add$ptr67$idx$val = HEAP8[$add$ptr67$idx >> 0] | 0;
 $add$ptr67$idx828 = $b + 20 | 0;
 $add$ptr67$idx828$val = HEAP8[$add$ptr67$idx828 >> 0] | 0;
 $88 = _load_3($add$ptr67$val, $add$ptr67$idx$val, $add$ptr67$idx828$val) | 0;
 $89 = getTempRet0() | 0;
 $90 = _bitshift64Lshr($88 | 0, $89 | 0, 3) | 0;
 $91 = getTempRet0() | 0;
 $92 = $90 & 2097151;
 $add$ptr71 = $b + 21 | 0;
 $add$ptr71$val = HEAP8[$add$ptr71 >> 0] | 0;
 $add$ptr71$idx = $b + 22 | 0;
 $add$ptr71$idx$val = HEAP8[$add$ptr71$idx >> 0] | 0;
 $add$ptr71$idx827 = $b + 23 | 0;
 $add$ptr71$idx827$val = HEAP8[$add$ptr71$idx827 >> 0] | 0;
 $93 = _load_3($add$ptr71$val, $add$ptr71$idx$val, $add$ptr71$idx827$val) | 0;
 $94 = getTempRet0() | 0;
 $95 = $93 & 2097151;
 $96 = _load_4($add$ptr71$idx827) | 0;
 $97 = getTempRet0() | 0;
 $98 = _bitshift64Lshr($96 | 0, $97 | 0, 5) | 0;
 $99 = getTempRet0() | 0;
 $100 = $98 & 2097151;
 $add$ptr78 = $b + 26 | 0;
 $add$ptr78$val = HEAP8[$add$ptr78 >> 0] | 0;
 $add$ptr78$idx = $b + 27 | 0;
 $add$ptr78$idx$val = HEAP8[$add$ptr78$idx >> 0] | 0;
 $add$ptr78$idx826 = $b + 28 | 0;
 $add$ptr78$idx826$val = HEAP8[$add$ptr78$idx826 >> 0] | 0;
 $101 = _load_3($add$ptr78$val, $add$ptr78$idx$val, $add$ptr78$idx826$val) | 0;
 $102 = getTempRet0() | 0;
 $103 = _bitshift64Lshr($101 | 0, $102 | 0, 2) | 0;
 $104 = getTempRet0() | 0;
 $105 = $103 & 2097151;
 $106 = _load_4($add$ptr78$idx826) | 0;
 $107 = getTempRet0() | 0;
 $108 = _bitshift64Lshr($106 | 0, $107 | 0, 7) | 0;
 $109 = getTempRet0() | 0;
 $110 = ___muldi3($57 | 0, 0, $2 | 0, 0) | 0;
 $111 = getTempRet0() | 0;
 $112 = ___muldi3($62 | 0, 0, $2 | 0, 0) | 0;
 $113 = getTempRet0() | 0;
 $114 = ___muldi3($57 | 0, 0, $7 | 0, 0) | 0;
 $115 = getTempRet0() | 0;
 $116 = _i64Add($112 | 0, $113 | 0, $114 | 0, $115 | 0) | 0;
 $117 = getTempRet0() | 0;
 $118 = ___muldi3($67 | 0, 0, $2 | 0, 0) | 0;
 $119 = getTempRet0() | 0;
 $120 = ___muldi3($62 | 0, 0, $7 | 0, 0) | 0;
 $121 = getTempRet0() | 0;
 $122 = ___muldi3($57 | 0, 0, $12 | 0, 0) | 0;
 $123 = getTempRet0() | 0;
 $124 = _i64Add($120 | 0, $121 | 0, $122 | 0, $123 | 0) | 0;
 $125 = getTempRet0() | 0;
 $126 = _i64Add($124 | 0, $125 | 0, $118 | 0, $119 | 0) | 0;
 $127 = getTempRet0() | 0;
 $128 = ___muldi3($72 | 0, 0, $2 | 0, 0) | 0;
 $129 = getTempRet0() | 0;
 $130 = ___muldi3($67 | 0, 0, $7 | 0, 0) | 0;
 $131 = getTempRet0() | 0;
 $132 = ___muldi3($62 | 0, 0, $12 | 0, 0) | 0;
 $133 = getTempRet0() | 0;
 $134 = ___muldi3($57 | 0, 0, $17 | 0, 0) | 0;
 $135 = getTempRet0() | 0;
 $136 = ___muldi3($77 | 0, 0, $2 | 0, 0) | 0;
 $137 = getTempRet0() | 0;
 $138 = ___muldi3($72 | 0, 0, $7 | 0, 0) | 0;
 $139 = getTempRet0() | 0;
 $140 = ___muldi3($67 | 0, 0, $12 | 0, 0) | 0;
 $141 = getTempRet0() | 0;
 $142 = ___muldi3($62 | 0, 0, $17 | 0, 0) | 0;
 $143 = getTempRet0() | 0;
 $144 = ___muldi3($57 | 0, 0, $22 | 0, 0) | 0;
 $145 = getTempRet0() | 0;
 $146 = _i64Add($142 | 0, $143 | 0, $144 | 0, $145 | 0) | 0;
 $147 = getTempRet0() | 0;
 $148 = _i64Add($146 | 0, $147 | 0, $140 | 0, $141 | 0) | 0;
 $149 = getTempRet0() | 0;
 $150 = _i64Add($148 | 0, $149 | 0, $138 | 0, $139 | 0) | 0;
 $151 = getTempRet0() | 0;
 $152 = _i64Add($150 | 0, $151 | 0, $136 | 0, $137 | 0) | 0;
 $153 = getTempRet0() | 0;
 $154 = ___muldi3($82 | 0, 0, $2 | 0, 0) | 0;
 $155 = getTempRet0() | 0;
 $156 = ___muldi3($77 | 0, 0, $7 | 0, 0) | 0;
 $157 = getTempRet0() | 0;
 $158 = ___muldi3($72 | 0, 0, $12 | 0, 0) | 0;
 $159 = getTempRet0() | 0;
 $160 = ___muldi3($67 | 0, 0, $17 | 0, 0) | 0;
 $161 = getTempRet0() | 0;
 $162 = ___muldi3($62 | 0, 0, $22 | 0, 0) | 0;
 $163 = getTempRet0() | 0;
 $164 = ___muldi3($57 | 0, 0, $27 | 0, 0) | 0;
 $165 = getTempRet0() | 0;
 $166 = ___muldi3($87 | 0, 0, $2 | 0, 0) | 0;
 $167 = getTempRet0() | 0;
 $168 = ___muldi3($82 | 0, 0, $7 | 0, 0) | 0;
 $169 = getTempRet0() | 0;
 $170 = ___muldi3($77 | 0, 0, $12 | 0, 0) | 0;
 $171 = getTempRet0() | 0;
 $172 = ___muldi3($72 | 0, 0, $17 | 0, 0) | 0;
 $173 = getTempRet0() | 0;
 $174 = ___muldi3($67 | 0, 0, $22 | 0, 0) | 0;
 $175 = getTempRet0() | 0;
 $176 = ___muldi3($62 | 0, 0, $27 | 0, 0) | 0;
 $177 = getTempRet0() | 0;
 $178 = ___muldi3($57 | 0, 0, $32 | 0, 0) | 0;
 $179 = getTempRet0() | 0;
 $180 = _i64Add($176 | 0, $177 | 0, $178 | 0, $179 | 0) | 0;
 $181 = getTempRet0() | 0;
 $182 = _i64Add($180 | 0, $181 | 0, $174 | 0, $175 | 0) | 0;
 $183 = getTempRet0() | 0;
 $184 = _i64Add($182 | 0, $183 | 0, $172 | 0, $173 | 0) | 0;
 $185 = getTempRet0() | 0;
 $186 = _i64Add($184 | 0, $185 | 0, $170 | 0, $171 | 0) | 0;
 $187 = getTempRet0() | 0;
 $188 = _i64Add($186 | 0, $187 | 0, $168 | 0, $169 | 0) | 0;
 $189 = getTempRet0() | 0;
 $190 = _i64Add($188 | 0, $189 | 0, $166 | 0, $167 | 0) | 0;
 $191 = getTempRet0() | 0;
 $192 = ___muldi3($92 | 0, 0, $2 | 0, 0) | 0;
 $193 = getTempRet0() | 0;
 $194 = ___muldi3($87 | 0, 0, $7 | 0, 0) | 0;
 $195 = getTempRet0() | 0;
 $196 = ___muldi3($82 | 0, 0, $12 | 0, 0) | 0;
 $197 = getTempRet0() | 0;
 $198 = ___muldi3($77 | 0, 0, $17 | 0, 0) | 0;
 $199 = getTempRet0() | 0;
 $200 = ___muldi3($72 | 0, 0, $22 | 0, 0) | 0;
 $201 = getTempRet0() | 0;
 $202 = ___muldi3($67 | 0, 0, $27 | 0, 0) | 0;
 $203 = getTempRet0() | 0;
 $204 = ___muldi3($62 | 0, 0, $32 | 0, 0) | 0;
 $205 = getTempRet0() | 0;
 $206 = ___muldi3($57 | 0, 0, $37 | 0, 0) | 0;
 $207 = getTempRet0() | 0;
 $208 = ___muldi3($95 | 0, 0, $2 | 0, 0) | 0;
 $209 = getTempRet0() | 0;
 $210 = ___muldi3($92 | 0, 0, $7 | 0, 0) | 0;
 $211 = getTempRet0() | 0;
 $212 = ___muldi3($87 | 0, 0, $12 | 0, 0) | 0;
 $213 = getTempRet0() | 0;
 $214 = ___muldi3($82 | 0, 0, $17 | 0, 0) | 0;
 $215 = getTempRet0() | 0;
 $216 = ___muldi3($77 | 0, 0, $22 | 0, 0) | 0;
 $217 = getTempRet0() | 0;
 $218 = ___muldi3($72 | 0, 0, $27 | 0, 0) | 0;
 $219 = getTempRet0() | 0;
 $220 = ___muldi3($67 | 0, 0, $32 | 0, 0) | 0;
 $221 = getTempRet0() | 0;
 $222 = ___muldi3($62 | 0, 0, $37 | 0, 0) | 0;
 $223 = getTempRet0() | 0;
 $224 = ___muldi3($57 | 0, 0, $40 | 0, 0) | 0;
 $225 = getTempRet0() | 0;
 $226 = _i64Add($222 | 0, $223 | 0, $224 | 0, $225 | 0) | 0;
 $227 = getTempRet0() | 0;
 $228 = _i64Add($226 | 0, $227 | 0, $220 | 0, $221 | 0) | 0;
 $229 = getTempRet0() | 0;
 $230 = _i64Add($228 | 0, $229 | 0, $218 | 0, $219 | 0) | 0;
 $231 = getTempRet0() | 0;
 $232 = _i64Add($230 | 0, $231 | 0, $216 | 0, $217 | 0) | 0;
 $233 = getTempRet0() | 0;
 $234 = _i64Add($232 | 0, $233 | 0, $214 | 0, $215 | 0) | 0;
 $235 = getTempRet0() | 0;
 $236 = _i64Add($234 | 0, $235 | 0, $212 | 0, $213 | 0) | 0;
 $237 = getTempRet0() | 0;
 $238 = _i64Add($236 | 0, $237 | 0, $210 | 0, $211 | 0) | 0;
 $239 = getTempRet0() | 0;
 $240 = _i64Add($238 | 0, $239 | 0, $208 | 0, $209 | 0) | 0;
 $241 = getTempRet0() | 0;
 $242 = ___muldi3($100 | 0, 0, $2 | 0, 0) | 0;
 $243 = getTempRet0() | 0;
 $244 = ___muldi3($95 | 0, 0, $7 | 0, 0) | 0;
 $245 = getTempRet0() | 0;
 $246 = ___muldi3($92 | 0, 0, $12 | 0, 0) | 0;
 $247 = getTempRet0() | 0;
 $248 = ___muldi3($87 | 0, 0, $17 | 0, 0) | 0;
 $249 = getTempRet0() | 0;
 $250 = ___muldi3($82 | 0, 0, $22 | 0, 0) | 0;
 $251 = getTempRet0() | 0;
 $252 = ___muldi3($77 | 0, 0, $27 | 0, 0) | 0;
 $253 = getTempRet0() | 0;
 $254 = ___muldi3($72 | 0, 0, $32 | 0, 0) | 0;
 $255 = getTempRet0() | 0;
 $256 = ___muldi3($67 | 0, 0, $37 | 0, 0) | 0;
 $257 = getTempRet0() | 0;
 $258 = ___muldi3($62 | 0, 0, $40 | 0, 0) | 0;
 $259 = getTempRet0() | 0;
 $260 = ___muldi3($57 | 0, 0, $45 | 0, 0) | 0;
 $261 = getTempRet0() | 0;
 $262 = ___muldi3($105 | 0, 0, $2 | 0, 0) | 0;
 $263 = getTempRet0() | 0;
 $264 = ___muldi3($100 | 0, 0, $7 | 0, 0) | 0;
 $265 = getTempRet0() | 0;
 $266 = ___muldi3($95 | 0, 0, $12 | 0, 0) | 0;
 $267 = getTempRet0() | 0;
 $268 = ___muldi3($92 | 0, 0, $17 | 0, 0) | 0;
 $269 = getTempRet0() | 0;
 $270 = ___muldi3($87 | 0, 0, $22 | 0, 0) | 0;
 $271 = getTempRet0() | 0;
 $272 = ___muldi3($82 | 0, 0, $27 | 0, 0) | 0;
 $273 = getTempRet0() | 0;
 $274 = ___muldi3($77 | 0, 0, $32 | 0, 0) | 0;
 $275 = getTempRet0() | 0;
 $276 = ___muldi3($72 | 0, 0, $37 | 0, 0) | 0;
 $277 = getTempRet0() | 0;
 $278 = ___muldi3($67 | 0, 0, $40 | 0, 0) | 0;
 $279 = getTempRet0() | 0;
 $280 = ___muldi3($62 | 0, 0, $45 | 0, 0) | 0;
 $281 = getTempRet0() | 0;
 $282 = ___muldi3($57 | 0, 0, $50 | 0, 0) | 0;
 $283 = getTempRet0() | 0;
 $284 = _i64Add($280 | 0, $281 | 0, $282 | 0, $283 | 0) | 0;
 $285 = getTempRet0() | 0;
 $286 = _i64Add($284 | 0, $285 | 0, $278 | 0, $279 | 0) | 0;
 $287 = getTempRet0() | 0;
 $288 = _i64Add($286 | 0, $287 | 0, $276 | 0, $277 | 0) | 0;
 $289 = getTempRet0() | 0;
 $290 = _i64Add($288 | 0, $289 | 0, $274 | 0, $275 | 0) | 0;
 $291 = getTempRet0() | 0;
 $292 = _i64Add($290 | 0, $291 | 0, $272 | 0, $273 | 0) | 0;
 $293 = getTempRet0() | 0;
 $294 = _i64Add($292 | 0, $293 | 0, $270 | 0, $271 | 0) | 0;
 $295 = getTempRet0() | 0;
 $296 = _i64Add($294 | 0, $295 | 0, $268 | 0, $269 | 0) | 0;
 $297 = getTempRet0() | 0;
 $298 = _i64Add($296 | 0, $297 | 0, $266 | 0, $267 | 0) | 0;
 $299 = getTempRet0() | 0;
 $300 = _i64Add($298 | 0, $299 | 0, $264 | 0, $265 | 0) | 0;
 $301 = getTempRet0() | 0;
 $302 = _i64Add($300 | 0, $301 | 0, $262 | 0, $263 | 0) | 0;
 $303 = getTempRet0() | 0;
 $304 = ___muldi3($108 | 0, $109 | 0, $2 | 0, 0) | 0;
 $305 = getTempRet0() | 0;
 $306 = ___muldi3($105 | 0, 0, $7 | 0, 0) | 0;
 $307 = getTempRet0() | 0;
 $308 = ___muldi3($100 | 0, 0, $12 | 0, 0) | 0;
 $309 = getTempRet0() | 0;
 $310 = ___muldi3($95 | 0, 0, $17 | 0, 0) | 0;
 $311 = getTempRet0() | 0;
 $312 = ___muldi3($92 | 0, 0, $22 | 0, 0) | 0;
 $313 = getTempRet0() | 0;
 $314 = ___muldi3($87 | 0, 0, $27 | 0, 0) | 0;
 $315 = getTempRet0() | 0;
 $316 = ___muldi3($82 | 0, 0, $32 | 0, 0) | 0;
 $317 = getTempRet0() | 0;
 $318 = ___muldi3($77 | 0, 0, $37 | 0, 0) | 0;
 $319 = getTempRet0() | 0;
 $320 = ___muldi3($72 | 0, 0, $40 | 0, 0) | 0;
 $321 = getTempRet0() | 0;
 $322 = ___muldi3($67 | 0, 0, $45 | 0, 0) | 0;
 $323 = getTempRet0() | 0;
 $324 = ___muldi3($62 | 0, 0, $50 | 0, 0) | 0;
 $325 = getTempRet0() | 0;
 $326 = ___muldi3($57 | 0, 0, $53 | 0, $54 | 0) | 0;
 $327 = getTempRet0() | 0;
 $328 = ___muldi3($108 | 0, $109 | 0, $7 | 0, 0) | 0;
 $329 = getTempRet0() | 0;
 $330 = ___muldi3($105 | 0, 0, $12 | 0, 0) | 0;
 $331 = getTempRet0() | 0;
 $332 = ___muldi3($100 | 0, 0, $17 | 0, 0) | 0;
 $333 = getTempRet0() | 0;
 $334 = ___muldi3($95 | 0, 0, $22 | 0, 0) | 0;
 $335 = getTempRet0() | 0;
 $336 = ___muldi3($92 | 0, 0, $27 | 0, 0) | 0;
 $337 = getTempRet0() | 0;
 $338 = ___muldi3($87 | 0, 0, $32 | 0, 0) | 0;
 $339 = getTempRet0() | 0;
 $340 = ___muldi3($82 | 0, 0, $37 | 0, 0) | 0;
 $341 = getTempRet0() | 0;
 $342 = ___muldi3($77 | 0, 0, $40 | 0, 0) | 0;
 $343 = getTempRet0() | 0;
 $344 = ___muldi3($72 | 0, 0, $45 | 0, 0) | 0;
 $345 = getTempRet0() | 0;
 $346 = ___muldi3($67 | 0, 0, $50 | 0, 0) | 0;
 $347 = getTempRet0() | 0;
 $348 = ___muldi3($62 | 0, 0, $53 | 0, $54 | 0) | 0;
 $349 = getTempRet0() | 0;
 $350 = _i64Add($346 | 0, $347 | 0, $348 | 0, $349 | 0) | 0;
 $351 = getTempRet0() | 0;
 $352 = _i64Add($350 | 0, $351 | 0, $344 | 0, $345 | 0) | 0;
 $353 = getTempRet0() | 0;
 $354 = _i64Add($352 | 0, $353 | 0, $342 | 0, $343 | 0) | 0;
 $355 = getTempRet0() | 0;
 $356 = _i64Add($354 | 0, $355 | 0, $340 | 0, $341 | 0) | 0;
 $357 = getTempRet0() | 0;
 $358 = _i64Add($356 | 0, $357 | 0, $338 | 0, $339 | 0) | 0;
 $359 = getTempRet0() | 0;
 $360 = _i64Add($358 | 0, $359 | 0, $336 | 0, $337 | 0) | 0;
 $361 = getTempRet0() | 0;
 $362 = _i64Add($360 | 0, $361 | 0, $334 | 0, $335 | 0) | 0;
 $363 = getTempRet0() | 0;
 $364 = _i64Add($362 | 0, $363 | 0, $332 | 0, $333 | 0) | 0;
 $365 = getTempRet0() | 0;
 $366 = _i64Add($364 | 0, $365 | 0, $330 | 0, $331 | 0) | 0;
 $367 = getTempRet0() | 0;
 $368 = _i64Add($366 | 0, $367 | 0, $328 | 0, $329 | 0) | 0;
 $369 = getTempRet0() | 0;
 $370 = ___muldi3($108 | 0, $109 | 0, $12 | 0, 0) | 0;
 $371 = getTempRet0() | 0;
 $372 = ___muldi3($105 | 0, 0, $17 | 0, 0) | 0;
 $373 = getTempRet0() | 0;
 $374 = ___muldi3($100 | 0, 0, $22 | 0, 0) | 0;
 $375 = getTempRet0() | 0;
 $376 = ___muldi3($95 | 0, 0, $27 | 0, 0) | 0;
 $377 = getTempRet0() | 0;
 $378 = ___muldi3($92 | 0, 0, $32 | 0, 0) | 0;
 $379 = getTempRet0() | 0;
 $380 = ___muldi3($87 | 0, 0, $37 | 0, 0) | 0;
 $381 = getTempRet0() | 0;
 $382 = ___muldi3($82 | 0, 0, $40 | 0, 0) | 0;
 $383 = getTempRet0() | 0;
 $384 = ___muldi3($77 | 0, 0, $45 | 0, 0) | 0;
 $385 = getTempRet0() | 0;
 $386 = ___muldi3($72 | 0, 0, $50 | 0, 0) | 0;
 $387 = getTempRet0() | 0;
 $388 = ___muldi3($67 | 0, 0, $53 | 0, $54 | 0) | 0;
 $389 = getTempRet0() | 0;
 $390 = ___muldi3($108 | 0, $109 | 0, $17 | 0, 0) | 0;
 $391 = getTempRet0() | 0;
 $392 = ___muldi3($105 | 0, 0, $22 | 0, 0) | 0;
 $393 = getTempRet0() | 0;
 $394 = ___muldi3($100 | 0, 0, $27 | 0, 0) | 0;
 $395 = getTempRet0() | 0;
 $396 = ___muldi3($95 | 0, 0, $32 | 0, 0) | 0;
 $397 = getTempRet0() | 0;
 $398 = ___muldi3($92 | 0, 0, $37 | 0, 0) | 0;
 $399 = getTempRet0() | 0;
 $400 = ___muldi3($87 | 0, 0, $40 | 0, 0) | 0;
 $401 = getTempRet0() | 0;
 $402 = ___muldi3($82 | 0, 0, $45 | 0, 0) | 0;
 $403 = getTempRet0() | 0;
 $404 = ___muldi3($77 | 0, 0, $50 | 0, 0) | 0;
 $405 = getTempRet0() | 0;
 $406 = ___muldi3($72 | 0, 0, $53 | 0, $54 | 0) | 0;
 $407 = getTempRet0() | 0;
 $408 = _i64Add($404 | 0, $405 | 0, $406 | 0, $407 | 0) | 0;
 $409 = getTempRet0() | 0;
 $410 = _i64Add($408 | 0, $409 | 0, $402 | 0, $403 | 0) | 0;
 $411 = getTempRet0() | 0;
 $412 = _i64Add($410 | 0, $411 | 0, $400 | 0, $401 | 0) | 0;
 $413 = getTempRet0() | 0;
 $414 = _i64Add($412 | 0, $413 | 0, $398 | 0, $399 | 0) | 0;
 $415 = getTempRet0() | 0;
 $416 = _i64Add($414 | 0, $415 | 0, $396 | 0, $397 | 0) | 0;
 $417 = getTempRet0() | 0;
 $418 = _i64Add($416 | 0, $417 | 0, $394 | 0, $395 | 0) | 0;
 $419 = getTempRet0() | 0;
 $420 = _i64Add($418 | 0, $419 | 0, $392 | 0, $393 | 0) | 0;
 $421 = getTempRet0() | 0;
 $422 = _i64Add($420 | 0, $421 | 0, $390 | 0, $391 | 0) | 0;
 $423 = getTempRet0() | 0;
 $424 = ___muldi3($108 | 0, $109 | 0, $22 | 0, 0) | 0;
 $425 = getTempRet0() | 0;
 $426 = ___muldi3($105 | 0, 0, $27 | 0, 0) | 0;
 $427 = getTempRet0() | 0;
 $428 = ___muldi3($100 | 0, 0, $32 | 0, 0) | 0;
 $429 = getTempRet0() | 0;
 $430 = ___muldi3($95 | 0, 0, $37 | 0, 0) | 0;
 $431 = getTempRet0() | 0;
 $432 = ___muldi3($92 | 0, 0, $40 | 0, 0) | 0;
 $433 = getTempRet0() | 0;
 $434 = ___muldi3($87 | 0, 0, $45 | 0, 0) | 0;
 $435 = getTempRet0() | 0;
 $436 = ___muldi3($82 | 0, 0, $50 | 0, 0) | 0;
 $437 = getTempRet0() | 0;
 $438 = ___muldi3($77 | 0, 0, $53 | 0, $54 | 0) | 0;
 $439 = getTempRet0() | 0;
 $440 = ___muldi3($108 | 0, $109 | 0, $27 | 0, 0) | 0;
 $441 = getTempRet0() | 0;
 $442 = ___muldi3($105 | 0, 0, $32 | 0, 0) | 0;
 $443 = getTempRet0() | 0;
 $444 = ___muldi3($100 | 0, 0, $37 | 0, 0) | 0;
 $445 = getTempRet0() | 0;
 $446 = ___muldi3($95 | 0, 0, $40 | 0, 0) | 0;
 $447 = getTempRet0() | 0;
 $448 = ___muldi3($92 | 0, 0, $45 | 0, 0) | 0;
 $449 = getTempRet0() | 0;
 $450 = ___muldi3($87 | 0, 0, $50 | 0, 0) | 0;
 $451 = getTempRet0() | 0;
 $452 = ___muldi3($82 | 0, 0, $53 | 0, $54 | 0) | 0;
 $453 = getTempRet0() | 0;
 $454 = _i64Add($450 | 0, $451 | 0, $452 | 0, $453 | 0) | 0;
 $455 = getTempRet0() | 0;
 $456 = _i64Add($454 | 0, $455 | 0, $448 | 0, $449 | 0) | 0;
 $457 = getTempRet0() | 0;
 $458 = _i64Add($456 | 0, $457 | 0, $446 | 0, $447 | 0) | 0;
 $459 = getTempRet0() | 0;
 $460 = _i64Add($458 | 0, $459 | 0, $444 | 0, $445 | 0) | 0;
 $461 = getTempRet0() | 0;
 $462 = _i64Add($460 | 0, $461 | 0, $442 | 0, $443 | 0) | 0;
 $463 = getTempRet0() | 0;
 $464 = _i64Add($462 | 0, $463 | 0, $440 | 0, $441 | 0) | 0;
 $465 = getTempRet0() | 0;
 $466 = ___muldi3($108 | 0, $109 | 0, $32 | 0, 0) | 0;
 $467 = getTempRet0() | 0;
 $468 = ___muldi3($105 | 0, 0, $37 | 0, 0) | 0;
 $469 = getTempRet0() | 0;
 $470 = ___muldi3($100 | 0, 0, $40 | 0, 0) | 0;
 $471 = getTempRet0() | 0;
 $472 = ___muldi3($95 | 0, 0, $45 | 0, 0) | 0;
 $473 = getTempRet0() | 0;
 $474 = ___muldi3($92 | 0, 0, $50 | 0, 0) | 0;
 $475 = getTempRet0() | 0;
 $476 = ___muldi3($87 | 0, 0, $53 | 0, $54 | 0) | 0;
 $477 = getTempRet0() | 0;
 $478 = ___muldi3($108 | 0, $109 | 0, $37 | 0, 0) | 0;
 $479 = getTempRet0() | 0;
 $480 = ___muldi3($105 | 0, 0, $40 | 0, 0) | 0;
 $481 = getTempRet0() | 0;
 $482 = ___muldi3($100 | 0, 0, $45 | 0, 0) | 0;
 $483 = getTempRet0() | 0;
 $484 = ___muldi3($95 | 0, 0, $50 | 0, 0) | 0;
 $485 = getTempRet0() | 0;
 $486 = ___muldi3($92 | 0, 0, $53 | 0, $54 | 0) | 0;
 $487 = getTempRet0() | 0;
 $488 = _i64Add($484 | 0, $485 | 0, $486 | 0, $487 | 0) | 0;
 $489 = getTempRet0() | 0;
 $490 = _i64Add($488 | 0, $489 | 0, $482 | 0, $483 | 0) | 0;
 $491 = getTempRet0() | 0;
 $492 = _i64Add($490 | 0, $491 | 0, $480 | 0, $481 | 0) | 0;
 $493 = getTempRet0() | 0;
 $494 = _i64Add($492 | 0, $493 | 0, $478 | 0, $479 | 0) | 0;
 $495 = getTempRet0() | 0;
 $496 = ___muldi3($108 | 0, $109 | 0, $40 | 0, 0) | 0;
 $497 = getTempRet0() | 0;
 $498 = ___muldi3($105 | 0, 0, $45 | 0, 0) | 0;
 $499 = getTempRet0() | 0;
 $500 = ___muldi3($100 | 0, 0, $50 | 0, 0) | 0;
 $501 = getTempRet0() | 0;
 $502 = ___muldi3($95 | 0, 0, $53 | 0, $54 | 0) | 0;
 $503 = getTempRet0() | 0;
 $504 = ___muldi3($108 | 0, $109 | 0, $45 | 0, 0) | 0;
 $505 = getTempRet0() | 0;
 $506 = ___muldi3($105 | 0, 0, $50 | 0, 0) | 0;
 $507 = getTempRet0() | 0;
 $508 = ___muldi3($100 | 0, 0, $53 | 0, $54 | 0) | 0;
 $509 = getTempRet0() | 0;
 $510 = _i64Add($506 | 0, $507 | 0, $508 | 0, $509 | 0) | 0;
 $511 = getTempRet0() | 0;
 $512 = _i64Add($510 | 0, $511 | 0, $504 | 0, $505 | 0) | 0;
 $513 = getTempRet0() | 0;
 $514 = ___muldi3($108 | 0, $109 | 0, $50 | 0, 0) | 0;
 $515 = getTempRet0() | 0;
 $516 = ___muldi3($105 | 0, 0, $53 | 0, $54 | 0) | 0;
 $517 = getTempRet0() | 0;
 $518 = _i64Add($514 | 0, $515 | 0, $516 | 0, $517 | 0) | 0;
 $519 = getTempRet0() | 0;
 $520 = ___muldi3($108 | 0, $109 | 0, $53 | 0, $54 | 0) | 0;
 $521 = getTempRet0() | 0;
 $522 = _i64Add($110 | 0, $111 | 0, 1048576, 0) | 0;
 $523 = getTempRet0() | 0;
 $524 = _bitshift64Lshr($522 | 0, $523 | 0, 21) | 0;
 $525 = getTempRet0() | 0;
 $526 = _i64Add($116 | 0, $117 | 0, $524 | 0, $525 | 0) | 0;
 $527 = getTempRet0() | 0;
 $528 = $522 & -2097152;
 $529 = $523 & 2047;
 $530 = _i64Subtract($110 | 0, $111 | 0, $528 | 0, $529 | 0) | 0;
 $531 = getTempRet0() | 0;
 $532 = _i64Add($126 | 0, $127 | 0, 1048576, 0) | 0;
 $533 = getTempRet0() | 0;
 $534 = _bitshift64Lshr($532 | 0, $533 | 0, 21) | 0;
 $535 = getTempRet0() | 0;
 $536 = _i64Add($132 | 0, $133 | 0, $134 | 0, $135 | 0) | 0;
 $537 = getTempRet0() | 0;
 $538 = _i64Add($536 | 0, $537 | 0, $130 | 0, $131 | 0) | 0;
 $539 = getTempRet0() | 0;
 $540 = _i64Add($538 | 0, $539 | 0, $128 | 0, $129 | 0) | 0;
 $541 = getTempRet0() | 0;
 $542 = _i64Add($540 | 0, $541 | 0, $534 | 0, $535 | 0) | 0;
 $543 = getTempRet0() | 0;
 $544 = $532 & -2097152;
 $545 = $533 & 8191;
 $546 = _i64Add($152 | 0, $153 | 0, 1048576, 0) | 0;
 $547 = getTempRet0() | 0;
 $548 = _bitshift64Ashr($546 | 0, $547 | 0, 21) | 0;
 $549 = getTempRet0() | 0;
 $550 = _i64Add($162 | 0, $163 | 0, $164 | 0, $165 | 0) | 0;
 $551 = getTempRet0() | 0;
 $552 = _i64Add($550 | 0, $551 | 0, $160 | 0, $161 | 0) | 0;
 $553 = getTempRet0() | 0;
 $554 = _i64Add($552 | 0, $553 | 0, $158 | 0, $159 | 0) | 0;
 $555 = getTempRet0() | 0;
 $556 = _i64Add($554 | 0, $555 | 0, $156 | 0, $157 | 0) | 0;
 $557 = getTempRet0() | 0;
 $558 = _i64Add($556 | 0, $557 | 0, $154 | 0, $155 | 0) | 0;
 $559 = getTempRet0() | 0;
 $560 = _i64Add($558 | 0, $559 | 0, $548 | 0, $549 | 0) | 0;
 $561 = getTempRet0() | 0;
 $562 = $546 & -2097152;
 $563 = _i64Add($190 | 0, $191 | 0, 1048576, 0) | 0;
 $564 = getTempRet0() | 0;
 $565 = _bitshift64Ashr($563 | 0, $564 | 0, 21) | 0;
 $566 = getTempRet0() | 0;
 $567 = _i64Add($204 | 0, $205 | 0, $206 | 0, $207 | 0) | 0;
 $568 = getTempRet0() | 0;
 $569 = _i64Add($567 | 0, $568 | 0, $202 | 0, $203 | 0) | 0;
 $570 = getTempRet0() | 0;
 $571 = _i64Add($569 | 0, $570 | 0, $200 | 0, $201 | 0) | 0;
 $572 = getTempRet0() | 0;
 $573 = _i64Add($571 | 0, $572 | 0, $198 | 0, $199 | 0) | 0;
 $574 = getTempRet0() | 0;
 $575 = _i64Add($573 | 0, $574 | 0, $196 | 0, $197 | 0) | 0;
 $576 = getTempRet0() | 0;
 $577 = _i64Add($575 | 0, $576 | 0, $194 | 0, $195 | 0) | 0;
 $578 = getTempRet0() | 0;
 $579 = _i64Add($577 | 0, $578 | 0, $192 | 0, $193 | 0) | 0;
 $580 = getTempRet0() | 0;
 $581 = _i64Add($579 | 0, $580 | 0, $565 | 0, $566 | 0) | 0;
 $582 = getTempRet0() | 0;
 $583 = $563 & -2097152;
 $584 = _i64Add($240 | 0, $241 | 0, 1048576, 0) | 0;
 $585 = getTempRet0() | 0;
 $586 = _bitshift64Ashr($584 | 0, $585 | 0, 21) | 0;
 $587 = getTempRet0() | 0;
 $588 = _i64Add($258 | 0, $259 | 0, $260 | 0, $261 | 0) | 0;
 $589 = getTempRet0() | 0;
 $590 = _i64Add($588 | 0, $589 | 0, $256 | 0, $257 | 0) | 0;
 $591 = getTempRet0() | 0;
 $592 = _i64Add($590 | 0, $591 | 0, $254 | 0, $255 | 0) | 0;
 $593 = getTempRet0() | 0;
 $594 = _i64Add($592 | 0, $593 | 0, $252 | 0, $253 | 0) | 0;
 $595 = getTempRet0() | 0;
 $596 = _i64Add($594 | 0, $595 | 0, $250 | 0, $251 | 0) | 0;
 $597 = getTempRet0() | 0;
 $598 = _i64Add($596 | 0, $597 | 0, $248 | 0, $249 | 0) | 0;
 $599 = getTempRet0() | 0;
 $600 = _i64Add($598 | 0, $599 | 0, $246 | 0, $247 | 0) | 0;
 $601 = getTempRet0() | 0;
 $602 = _i64Add($600 | 0, $601 | 0, $244 | 0, $245 | 0) | 0;
 $603 = getTempRet0() | 0;
 $604 = _i64Add($602 | 0, $603 | 0, $242 | 0, $243 | 0) | 0;
 $605 = getTempRet0() | 0;
 $606 = _i64Add($604 | 0, $605 | 0, $586 | 0, $587 | 0) | 0;
 $607 = getTempRet0() | 0;
 $608 = $584 & -2097152;
 $609 = _i64Add($302 | 0, $303 | 0, 1048576, 0) | 0;
 $610 = getTempRet0() | 0;
 $611 = _bitshift64Ashr($609 | 0, $610 | 0, 21) | 0;
 $612 = getTempRet0() | 0;
 $613 = _i64Add($324 | 0, $325 | 0, $326 | 0, $327 | 0) | 0;
 $614 = getTempRet0() | 0;
 $615 = _i64Add($613 | 0, $614 | 0, $322 | 0, $323 | 0) | 0;
 $616 = getTempRet0() | 0;
 $617 = _i64Add($615 | 0, $616 | 0, $320 | 0, $321 | 0) | 0;
 $618 = getTempRet0() | 0;
 $619 = _i64Add($617 | 0, $618 | 0, $318 | 0, $319 | 0) | 0;
 $620 = getTempRet0() | 0;
 $621 = _i64Add($619 | 0, $620 | 0, $316 | 0, $317 | 0) | 0;
 $622 = getTempRet0() | 0;
 $623 = _i64Add($621 | 0, $622 | 0, $314 | 0, $315 | 0) | 0;
 $624 = getTempRet0() | 0;
 $625 = _i64Add($623 | 0, $624 | 0, $312 | 0, $313 | 0) | 0;
 $626 = getTempRet0() | 0;
 $627 = _i64Add($625 | 0, $626 | 0, $310 | 0, $311 | 0) | 0;
 $628 = getTempRet0() | 0;
 $629 = _i64Add($627 | 0, $628 | 0, $308 | 0, $309 | 0) | 0;
 $630 = getTempRet0() | 0;
 $631 = _i64Add($629 | 0, $630 | 0, $306 | 0, $307 | 0) | 0;
 $632 = getTempRet0() | 0;
 $633 = _i64Add($631 | 0, $632 | 0, $304 | 0, $305 | 0) | 0;
 $634 = getTempRet0() | 0;
 $635 = _i64Add($633 | 0, $634 | 0, $611 | 0, $612 | 0) | 0;
 $636 = getTempRet0() | 0;
 $637 = $609 & -2097152;
 $638 = _i64Add($368 | 0, $369 | 0, 1048576, 0) | 0;
 $639 = getTempRet0() | 0;
 $640 = _bitshift64Ashr($638 | 0, $639 | 0, 21) | 0;
 $641 = getTempRet0() | 0;
 $642 = _i64Add($386 | 0, $387 | 0, $388 | 0, $389 | 0) | 0;
 $643 = getTempRet0() | 0;
 $644 = _i64Add($642 | 0, $643 | 0, $384 | 0, $385 | 0) | 0;
 $645 = getTempRet0() | 0;
 $646 = _i64Add($644 | 0, $645 | 0, $382 | 0, $383 | 0) | 0;
 $647 = getTempRet0() | 0;
 $648 = _i64Add($646 | 0, $647 | 0, $380 | 0, $381 | 0) | 0;
 $649 = getTempRet0() | 0;
 $650 = _i64Add($648 | 0, $649 | 0, $378 | 0, $379 | 0) | 0;
 $651 = getTempRet0() | 0;
 $652 = _i64Add($650 | 0, $651 | 0, $376 | 0, $377 | 0) | 0;
 $653 = getTempRet0() | 0;
 $654 = _i64Add($652 | 0, $653 | 0, $374 | 0, $375 | 0) | 0;
 $655 = getTempRet0() | 0;
 $656 = _i64Add($654 | 0, $655 | 0, $372 | 0, $373 | 0) | 0;
 $657 = getTempRet0() | 0;
 $658 = _i64Add($656 | 0, $657 | 0, $370 | 0, $371 | 0) | 0;
 $659 = getTempRet0() | 0;
 $660 = _i64Add($658 | 0, $659 | 0, $640 | 0, $641 | 0) | 0;
 $661 = getTempRet0() | 0;
 $662 = $638 & -2097152;
 $663 = _i64Add($422 | 0, $423 | 0, 1048576, 0) | 0;
 $664 = getTempRet0() | 0;
 $665 = _bitshift64Ashr($663 | 0, $664 | 0, 21) | 0;
 $666 = getTempRet0() | 0;
 $667 = _i64Add($436 | 0, $437 | 0, $438 | 0, $439 | 0) | 0;
 $668 = getTempRet0() | 0;
 $669 = _i64Add($667 | 0, $668 | 0, $434 | 0, $435 | 0) | 0;
 $670 = getTempRet0() | 0;
 $671 = _i64Add($669 | 0, $670 | 0, $432 | 0, $433 | 0) | 0;
 $672 = getTempRet0() | 0;
 $673 = _i64Add($671 | 0, $672 | 0, $430 | 0, $431 | 0) | 0;
 $674 = getTempRet0() | 0;
 $675 = _i64Add($673 | 0, $674 | 0, $428 | 0, $429 | 0) | 0;
 $676 = getTempRet0() | 0;
 $677 = _i64Add($675 | 0, $676 | 0, $426 | 0, $427 | 0) | 0;
 $678 = getTempRet0() | 0;
 $679 = _i64Add($677 | 0, $678 | 0, $424 | 0, $425 | 0) | 0;
 $680 = getTempRet0() | 0;
 $681 = _i64Add($679 | 0, $680 | 0, $665 | 0, $666 | 0) | 0;
 $682 = getTempRet0() | 0;
 $683 = $663 & -2097152;
 $684 = _i64Add($464 | 0, $465 | 0, 1048576, 0) | 0;
 $685 = getTempRet0() | 0;
 $686 = _bitshift64Ashr($684 | 0, $685 | 0, 21) | 0;
 $687 = getTempRet0() | 0;
 $688 = _i64Add($474 | 0, $475 | 0, $476 | 0, $477 | 0) | 0;
 $689 = getTempRet0() | 0;
 $690 = _i64Add($688 | 0, $689 | 0, $472 | 0, $473 | 0) | 0;
 $691 = getTempRet0() | 0;
 $692 = _i64Add($690 | 0, $691 | 0, $470 | 0, $471 | 0) | 0;
 $693 = getTempRet0() | 0;
 $694 = _i64Add($692 | 0, $693 | 0, $468 | 0, $469 | 0) | 0;
 $695 = getTempRet0() | 0;
 $696 = _i64Add($694 | 0, $695 | 0, $466 | 0, $467 | 0) | 0;
 $697 = getTempRet0() | 0;
 $698 = _i64Add($696 | 0, $697 | 0, $686 | 0, $687 | 0) | 0;
 $699 = getTempRet0() | 0;
 $700 = $684 & -2097152;
 $701 = _i64Add($494 | 0, $495 | 0, 1048576, 0) | 0;
 $702 = getTempRet0() | 0;
 $703 = _bitshift64Ashr($701 | 0, $702 | 0, 21) | 0;
 $704 = getTempRet0() | 0;
 $705 = _i64Add($500 | 0, $501 | 0, $502 | 0, $503 | 0) | 0;
 $706 = getTempRet0() | 0;
 $707 = _i64Add($705 | 0, $706 | 0, $498 | 0, $499 | 0) | 0;
 $708 = getTempRet0() | 0;
 $709 = _i64Add($707 | 0, $708 | 0, $496 | 0, $497 | 0) | 0;
 $710 = getTempRet0() | 0;
 $711 = _i64Add($709 | 0, $710 | 0, $703 | 0, $704 | 0) | 0;
 $712 = getTempRet0() | 0;
 $713 = $701 & -2097152;
 $714 = _i64Subtract($494 | 0, $495 | 0, $713 | 0, $702 | 0) | 0;
 $715 = getTempRet0() | 0;
 $716 = _i64Add($512 | 0, $513 | 0, 1048576, 0) | 0;
 $717 = getTempRet0() | 0;
 $718 = _bitshift64Lshr($716 | 0, $717 | 0, 21) | 0;
 $719 = getTempRet0() | 0;
 $720 = _i64Add($518 | 0, $519 | 0, $718 | 0, $719 | 0) | 0;
 $721 = getTempRet0() | 0;
 $722 = $716 & -2097152;
 $723 = $717 & 2147483647;
 $724 = _i64Subtract($512 | 0, $513 | 0, $722 | 0, $723 | 0) | 0;
 $725 = getTempRet0() | 0;
 $726 = _i64Add($520 | 0, $521 | 0, 1048576, 0) | 0;
 $727 = getTempRet0() | 0;
 $728 = _bitshift64Lshr($726 | 0, $727 | 0, 21) | 0;
 $729 = getTempRet0() | 0;
 $730 = $726 & -2097152;
 $731 = $727 & 2147483647;
 $732 = _i64Subtract($520 | 0, $521 | 0, $730 | 0, $731 | 0) | 0;
 $733 = getTempRet0() | 0;
 $734 = _i64Add($526 | 0, $527 | 0, 1048576, 0) | 0;
 $735 = getTempRet0() | 0;
 $736 = _bitshift64Lshr($734 | 0, $735 | 0, 21) | 0;
 $737 = getTempRet0() | 0;
 $738 = $734 & -2097152;
 $739 = $735 & 8191;
 $740 = _i64Subtract($526 | 0, $527 | 0, $738 | 0, $739 | 0) | 0;
 $741 = getTempRet0() | 0;
 $742 = _i64Add($542 | 0, $543 | 0, 1048576, 0) | 0;
 $743 = getTempRet0() | 0;
 $744 = _bitshift64Ashr($742 | 0, $743 | 0, 21) | 0;
 $745 = getTempRet0() | 0;
 $746 = $742 & -2097152;
 $747 = _i64Subtract($542 | 0, $543 | 0, $746 | 0, $743 | 0) | 0;
 $748 = getTempRet0() | 0;
 $749 = _i64Add($560 | 0, $561 | 0, 1048576, 0) | 0;
 $750 = getTempRet0() | 0;
 $751 = _bitshift64Ashr($749 | 0, $750 | 0, 21) | 0;
 $752 = getTempRet0() | 0;
 $753 = $749 & -2097152;
 $754 = _i64Subtract($560 | 0, $561 | 0, $753 | 0, $750 | 0) | 0;
 $755 = getTempRet0() | 0;
 $756 = _i64Add($581 | 0, $582 | 0, 1048576, 0) | 0;
 $757 = getTempRet0() | 0;
 $758 = _bitshift64Ashr($756 | 0, $757 | 0, 21) | 0;
 $759 = getTempRet0() | 0;
 $760 = $756 & -2097152;
 $761 = _i64Subtract($581 | 0, $582 | 0, $760 | 0, $757 | 0) | 0;
 $762 = getTempRet0() | 0;
 $763 = _i64Add($606 | 0, $607 | 0, 1048576, 0) | 0;
 $764 = getTempRet0() | 0;
 $765 = _bitshift64Ashr($763 | 0, $764 | 0, 21) | 0;
 $766 = getTempRet0() | 0;
 $767 = $763 & -2097152;
 $768 = _i64Subtract($606 | 0, $607 | 0, $767 | 0, $764 | 0) | 0;
 $769 = getTempRet0() | 0;
 $770 = _i64Add($635 | 0, $636 | 0, 1048576, 0) | 0;
 $771 = getTempRet0() | 0;
 $772 = _bitshift64Ashr($770 | 0, $771 | 0, 21) | 0;
 $773 = getTempRet0() | 0;
 $774 = $770 & -2097152;
 $775 = _i64Add($660 | 0, $661 | 0, 1048576, 0) | 0;
 $776 = getTempRet0() | 0;
 $777 = _bitshift64Ashr($775 | 0, $776 | 0, 21) | 0;
 $778 = getTempRet0() | 0;
 $779 = $775 & -2097152;
 $780 = _i64Add($681 | 0, $682 | 0, 1048576, 0) | 0;
 $781 = getTempRet0() | 0;
 $782 = _bitshift64Ashr($780 | 0, $781 | 0, 21) | 0;
 $783 = getTempRet0() | 0;
 $784 = $780 & -2097152;
 $785 = _i64Add($698 | 0, $699 | 0, 1048576, 0) | 0;
 $786 = getTempRet0() | 0;
 $787 = _bitshift64Ashr($785 | 0, $786 | 0, 21) | 0;
 $788 = getTempRet0() | 0;
 $789 = _i64Add($787 | 0, $788 | 0, $714 | 0, $715 | 0) | 0;
 $790 = getTempRet0() | 0;
 $791 = $785 & -2097152;
 $792 = _i64Subtract($698 | 0, $699 | 0, $791 | 0, $786 | 0) | 0;
 $793 = getTempRet0() | 0;
 $794 = _i64Add($711 | 0, $712 | 0, 1048576, 0) | 0;
 $795 = getTempRet0() | 0;
 $796 = _bitshift64Ashr($794 | 0, $795 | 0, 21) | 0;
 $797 = getTempRet0() | 0;
 $798 = _i64Add($796 | 0, $797 | 0, $724 | 0, $725 | 0) | 0;
 $799 = getTempRet0() | 0;
 $800 = $794 & -2097152;
 $801 = _i64Subtract($711 | 0, $712 | 0, $800 | 0, $795 | 0) | 0;
 $802 = getTempRet0() | 0;
 $803 = _i64Add($720 | 0, $721 | 0, 1048576, 0) | 0;
 $804 = getTempRet0() | 0;
 $805 = _bitshift64Lshr($803 | 0, $804 | 0, 21) | 0;
 $806 = getTempRet0() | 0;
 $807 = _i64Add($805 | 0, $806 | 0, $732 | 0, $733 | 0) | 0;
 $808 = getTempRet0() | 0;
 $809 = $803 & -2097152;
 $810 = $804 & 2147483647;
 $811 = _i64Subtract($720 | 0, $721 | 0, $809 | 0, $810 | 0) | 0;
 $812 = getTempRet0() | 0;
 $813 = ___muldi3($728 | 0, $729 | 0, 666643, 0) | 0;
 $814 = getTempRet0() | 0;
 $815 = ___muldi3($728 | 0, $729 | 0, 470296, 0) | 0;
 $816 = getTempRet0() | 0;
 $817 = ___muldi3($728 | 0, $729 | 0, 654183, 0) | 0;
 $818 = getTempRet0() | 0;
 $819 = ___muldi3($728 | 0, $729 | 0, -997805, -1) | 0;
 $820 = getTempRet0() | 0;
 $821 = ___muldi3($728 | 0, $729 | 0, 136657, 0) | 0;
 $822 = getTempRet0() | 0;
 $823 = ___muldi3($728 | 0, $729 | 0, -683901, -1) | 0;
 $824 = getTempRet0() | 0;
 $825 = _i64Add($464 | 0, $465 | 0, $823 | 0, $824 | 0) | 0;
 $826 = getTempRet0() | 0;
 $827 = _i64Subtract($825 | 0, $826 | 0, $700 | 0, $685 | 0) | 0;
 $828 = getTempRet0() | 0;
 $829 = _i64Add($827 | 0, $828 | 0, $782 | 0, $783 | 0) | 0;
 $830 = getTempRet0() | 0;
 $831 = ___muldi3($807 | 0, $808 | 0, 666643, 0) | 0;
 $832 = getTempRet0() | 0;
 $833 = ___muldi3($807 | 0, $808 | 0, 470296, 0) | 0;
 $834 = getTempRet0() | 0;
 $835 = ___muldi3($807 | 0, $808 | 0, 654183, 0) | 0;
 $836 = getTempRet0() | 0;
 $837 = ___muldi3($807 | 0, $808 | 0, -997805, -1) | 0;
 $838 = getTempRet0() | 0;
 $839 = ___muldi3($807 | 0, $808 | 0, 136657, 0) | 0;
 $840 = getTempRet0() | 0;
 $841 = ___muldi3($807 | 0, $808 | 0, -683901, -1) | 0;
 $842 = getTempRet0() | 0;
 $843 = ___muldi3($811 | 0, $812 | 0, 666643, 0) | 0;
 $844 = getTempRet0() | 0;
 $845 = _i64Add($768 | 0, $769 | 0, $843 | 0, $844 | 0) | 0;
 $846 = getTempRet0() | 0;
 $847 = ___muldi3($811 | 0, $812 | 0, 470296, 0) | 0;
 $848 = getTempRet0() | 0;
 $849 = ___muldi3($811 | 0, $812 | 0, 654183, 0) | 0;
 $850 = getTempRet0() | 0;
 $851 = ___muldi3($811 | 0, $812 | 0, -997805, -1) | 0;
 $852 = getTempRet0() | 0;
 $853 = ___muldi3($811 | 0, $812 | 0, 136657, 0) | 0;
 $854 = getTempRet0() | 0;
 $855 = ___muldi3($811 | 0, $812 | 0, -683901, -1) | 0;
 $856 = getTempRet0() | 0;
 $857 = _i64Add($422 | 0, $423 | 0, $819 | 0, $820 | 0) | 0;
 $858 = getTempRet0() | 0;
 $859 = _i64Add($857 | 0, $858 | 0, $839 | 0, $840 | 0) | 0;
 $860 = getTempRet0() | 0;
 $861 = _i64Add($859 | 0, $860 | 0, $855 | 0, $856 | 0) | 0;
 $862 = getTempRet0() | 0;
 $863 = _i64Subtract($861 | 0, $862 | 0, $683 | 0, $664 | 0) | 0;
 $864 = getTempRet0() | 0;
 $865 = _i64Add($863 | 0, $864 | 0, $777 | 0, $778 | 0) | 0;
 $866 = getTempRet0() | 0;
 $867 = ___muldi3($798 | 0, $799 | 0, 666643, 0) | 0;
 $868 = getTempRet0() | 0;
 $869 = ___muldi3($798 | 0, $799 | 0, 470296, 0) | 0;
 $870 = getTempRet0() | 0;
 $871 = _i64Add($845 | 0, $846 | 0, $869 | 0, $870 | 0) | 0;
 $872 = getTempRet0() | 0;
 $873 = ___muldi3($798 | 0, $799 | 0, 654183, 0) | 0;
 $874 = getTempRet0() | 0;
 $875 = ___muldi3($798 | 0, $799 | 0, -997805, -1) | 0;
 $876 = getTempRet0() | 0;
 $877 = ___muldi3($798 | 0, $799 | 0, 136657, 0) | 0;
 $878 = getTempRet0() | 0;
 $879 = ___muldi3($798 | 0, $799 | 0, -683901, -1) | 0;
 $880 = getTempRet0() | 0;
 $881 = ___muldi3($801 | 0, $802 | 0, 666643, 0) | 0;
 $882 = getTempRet0() | 0;
 $883 = _i64Add($761 | 0, $762 | 0, $881 | 0, $882 | 0) | 0;
 $884 = getTempRet0() | 0;
 $885 = ___muldi3($801 | 0, $802 | 0, 470296, 0) | 0;
 $886 = getTempRet0() | 0;
 $887 = ___muldi3($801 | 0, $802 | 0, 654183, 0) | 0;
 $888 = getTempRet0() | 0;
 $889 = _i64Add($871 | 0, $872 | 0, $887 | 0, $888 | 0) | 0;
 $890 = getTempRet0() | 0;
 $891 = ___muldi3($801 | 0, $802 | 0, -997805, -1) | 0;
 $892 = getTempRet0() | 0;
 $893 = ___muldi3($801 | 0, $802 | 0, 136657, 0) | 0;
 $894 = getTempRet0() | 0;
 $895 = ___muldi3($801 | 0, $802 | 0, -683901, -1) | 0;
 $896 = getTempRet0() | 0;
 $897 = _i64Add($835 | 0, $836 | 0, $815 | 0, $816 | 0) | 0;
 $898 = getTempRet0() | 0;
 $899 = _i64Add($897 | 0, $898 | 0, $851 | 0, $852 | 0) | 0;
 $900 = getTempRet0() | 0;
 $901 = _i64Add($899 | 0, $900 | 0, $368 | 0, $369 | 0) | 0;
 $902 = getTempRet0() | 0;
 $903 = _i64Add($901 | 0, $902 | 0, $877 | 0, $878 | 0) | 0;
 $904 = getTempRet0() | 0;
 $905 = _i64Add($903 | 0, $904 | 0, $895 | 0, $896 | 0) | 0;
 $906 = getTempRet0() | 0;
 $907 = _i64Subtract($905 | 0, $906 | 0, $662 | 0, $639 | 0) | 0;
 $908 = getTempRet0() | 0;
 $909 = _i64Add($907 | 0, $908 | 0, $772 | 0, $773 | 0) | 0;
 $910 = getTempRet0() | 0;
 $911 = ___muldi3($789 | 0, $790 | 0, 666643, 0) | 0;
 $912 = getTempRet0() | 0;
 $913 = _i64Add($751 | 0, $752 | 0, $190 | 0, $191 | 0) | 0;
 $914 = getTempRet0() | 0;
 $915 = _i64Subtract($913 | 0, $914 | 0, $583 | 0, $564 | 0) | 0;
 $916 = getTempRet0() | 0;
 $917 = _i64Add($915 | 0, $916 | 0, $911 | 0, $912 | 0) | 0;
 $918 = getTempRet0() | 0;
 $919 = ___muldi3($789 | 0, $790 | 0, 470296, 0) | 0;
 $920 = getTempRet0() | 0;
 $921 = _i64Add($883 | 0, $884 | 0, $919 | 0, $920 | 0) | 0;
 $922 = getTempRet0() | 0;
 $923 = ___muldi3($789 | 0, $790 | 0, 654183, 0) | 0;
 $924 = getTempRet0() | 0;
 $925 = _i64Add($240 | 0, $241 | 0, $758 | 0, $759 | 0) | 0;
 $926 = getTempRet0() | 0;
 $927 = _i64Subtract($925 | 0, $926 | 0, $608 | 0, $585 | 0) | 0;
 $928 = getTempRet0() | 0;
 $929 = _i64Add($927 | 0, $928 | 0, $867 | 0, $868 | 0) | 0;
 $930 = getTempRet0() | 0;
 $931 = _i64Add($929 | 0, $930 | 0, $885 | 0, $886 | 0) | 0;
 $932 = getTempRet0() | 0;
 $933 = _i64Add($931 | 0, $932 | 0, $923 | 0, $924 | 0) | 0;
 $934 = getTempRet0() | 0;
 $935 = ___muldi3($789 | 0, $790 | 0, -997805, -1) | 0;
 $936 = getTempRet0() | 0;
 $937 = _i64Add($889 | 0, $890 | 0, $935 | 0, $936 | 0) | 0;
 $938 = getTempRet0() | 0;
 $939 = ___muldi3($789 | 0, $790 | 0, 136657, 0) | 0;
 $940 = getTempRet0() | 0;
 $941 = _i64Add($831 | 0, $832 | 0, $765 | 0, $766 | 0) | 0;
 $942 = getTempRet0() | 0;
 $943 = _i64Add($941 | 0, $942 | 0, $847 | 0, $848 | 0) | 0;
 $944 = getTempRet0() | 0;
 $945 = _i64Add($943 | 0, $944 | 0, $302 | 0, $303 | 0) | 0;
 $946 = getTempRet0() | 0;
 $947 = _i64Add($945 | 0, $946 | 0, $873 | 0, $874 | 0) | 0;
 $948 = getTempRet0() | 0;
 $949 = _i64Add($947 | 0, $948 | 0, $891 | 0, $892 | 0) | 0;
 $950 = getTempRet0() | 0;
 $951 = _i64Subtract($949 | 0, $950 | 0, $637 | 0, $610 | 0) | 0;
 $952 = getTempRet0() | 0;
 $953 = _i64Add($951 | 0, $952 | 0, $939 | 0, $940 | 0) | 0;
 $954 = getTempRet0() | 0;
 $955 = ___muldi3($789 | 0, $790 | 0, -683901, -1) | 0;
 $956 = getTempRet0() | 0;
 $957 = _i64Add($917 | 0, $918 | 0, 1048576, 0) | 0;
 $958 = getTempRet0() | 0;
 $959 = _bitshift64Ashr($957 | 0, $958 | 0, 21) | 0;
 $960 = getTempRet0() | 0;
 $961 = _i64Add($921 | 0, $922 | 0, $959 | 0, $960 | 0) | 0;
 $962 = getTempRet0() | 0;
 $963 = $957 & -2097152;
 $964 = _i64Subtract($917 | 0, $918 | 0, $963 | 0, $958 | 0) | 0;
 $965 = getTempRet0() | 0;
 $966 = _i64Add($933 | 0, $934 | 0, 1048576, 0) | 0;
 $967 = getTempRet0() | 0;
 $968 = _bitshift64Ashr($966 | 0, $967 | 0, 21) | 0;
 $969 = getTempRet0() | 0;
 $970 = _i64Add($937 | 0, $938 | 0, $968 | 0, $969 | 0) | 0;
 $971 = getTempRet0() | 0;
 $972 = $966 & -2097152;
 $973 = _i64Subtract($933 | 0, $934 | 0, $972 | 0, $967 | 0) | 0;
 $974 = getTempRet0() | 0;
 $975 = _i64Add($953 | 0, $954 | 0, 1048576, 0) | 0;
 $976 = getTempRet0() | 0;
 $977 = _bitshift64Ashr($975 | 0, $976 | 0, 21) | 0;
 $978 = getTempRet0() | 0;
 $979 = _i64Add($833 | 0, $834 | 0, $813 | 0, $814 | 0) | 0;
 $980 = getTempRet0() | 0;
 $981 = _i64Add($979 | 0, $980 | 0, $849 | 0, $850 | 0) | 0;
 $982 = getTempRet0() | 0;
 $983 = _i64Add($981 | 0, $982 | 0, $875 | 0, $876 | 0) | 0;
 $984 = getTempRet0() | 0;
 $985 = _i64Add($983 | 0, $984 | 0, $893 | 0, $894 | 0) | 0;
 $986 = getTempRet0() | 0;
 $987 = _i64Add($985 | 0, $986 | 0, $635 | 0, $636 | 0) | 0;
 $988 = getTempRet0() | 0;
 $989 = _i64Add($987 | 0, $988 | 0, $955 | 0, $956 | 0) | 0;
 $990 = getTempRet0() | 0;
 $991 = _i64Subtract($989 | 0, $990 | 0, $774 | 0, $771 | 0) | 0;
 $992 = getTempRet0() | 0;
 $993 = _i64Add($991 | 0, $992 | 0, $977 | 0, $978 | 0) | 0;
 $994 = getTempRet0() | 0;
 $995 = $975 & -2097152;
 $996 = _i64Add($909 | 0, $910 | 0, 1048576, 0) | 0;
 $997 = getTempRet0() | 0;
 $998 = _bitshift64Ashr($996 | 0, $997 | 0, 21) | 0;
 $999 = getTempRet0() | 0;
 $1000 = _i64Add($837 | 0, $838 | 0, $817 | 0, $818 | 0) | 0;
 $1001 = getTempRet0() | 0;
 $1002 = _i64Add($1000 | 0, $1001 | 0, $853 | 0, $854 | 0) | 0;
 $1003 = getTempRet0() | 0;
 $1004 = _i64Add($1002 | 0, $1003 | 0, $879 | 0, $880 | 0) | 0;
 $1005 = getTempRet0() | 0;
 $1006 = _i64Add($1004 | 0, $1005 | 0, $660 | 0, $661 | 0) | 0;
 $1007 = getTempRet0() | 0;
 $1008 = _i64Subtract($1006 | 0, $1007 | 0, $779 | 0, $776 | 0) | 0;
 $1009 = getTempRet0() | 0;
 $1010 = _i64Add($1008 | 0, $1009 | 0, $998 | 0, $999 | 0) | 0;
 $1011 = getTempRet0() | 0;
 $1012 = $996 & -2097152;
 $1013 = _i64Subtract($909 | 0, $910 | 0, $1012 | 0, $997 | 0) | 0;
 $1014 = getTempRet0() | 0;
 $1015 = _i64Add($865 | 0, $866 | 0, 1048576, 0) | 0;
 $1016 = getTempRet0() | 0;
 $1017 = _bitshift64Ashr($1015 | 0, $1016 | 0, 21) | 0;
 $1018 = getTempRet0() | 0;
 $1019 = _i64Add($841 | 0, $842 | 0, $821 | 0, $822 | 0) | 0;
 $1020 = getTempRet0() | 0;
 $1021 = _i64Add($1019 | 0, $1020 | 0, $681 | 0, $682 | 0) | 0;
 $1022 = getTempRet0() | 0;
 $1023 = _i64Subtract($1021 | 0, $1022 | 0, $784 | 0, $781 | 0) | 0;
 $1024 = getTempRet0() | 0;
 $1025 = _i64Add($1023 | 0, $1024 | 0, $1017 | 0, $1018 | 0) | 0;
 $1026 = getTempRet0() | 0;
 $1027 = $1015 & -2097152;
 $1028 = _i64Subtract($865 | 0, $866 | 0, $1027 | 0, $1016 | 0) | 0;
 $1029 = getTempRet0() | 0;
 $1030 = _i64Add($829 | 0, $830 | 0, 1048576, 0) | 0;
 $1031 = getTempRet0() | 0;
 $1032 = _bitshift64Ashr($1030 | 0, $1031 | 0, 21) | 0;
 $1033 = getTempRet0() | 0;
 $1034 = _i64Add($1032 | 0, $1033 | 0, $792 | 0, $793 | 0) | 0;
 $1035 = getTempRet0() | 0;
 $1036 = $1030 & -2097152;
 $1037 = _i64Subtract($829 | 0, $830 | 0, $1036 | 0, $1031 | 0) | 0;
 $1038 = getTempRet0() | 0;
 $1039 = _i64Add($961 | 0, $962 | 0, 1048576, 0) | 0;
 $1040 = getTempRet0() | 0;
 $1041 = _bitshift64Ashr($1039 | 0, $1040 | 0, 21) | 0;
 $1042 = getTempRet0() | 0;
 $1043 = _i64Add($973 | 0, $974 | 0, $1041 | 0, $1042 | 0) | 0;
 $1044 = getTempRet0() | 0;
 $1045 = $1039 & -2097152;
 $1046 = _i64Subtract($961 | 0, $962 | 0, $1045 | 0, $1040 | 0) | 0;
 $1047 = getTempRet0() | 0;
 $1048 = _i64Add($970 | 0, $971 | 0, 1048576, 0) | 0;
 $1049 = getTempRet0() | 0;
 $1050 = _bitshift64Ashr($1048 | 0, $1049 | 0, 21) | 0;
 $1051 = getTempRet0() | 0;
 $1052 = $1048 & -2097152;
 $1053 = _i64Subtract($970 | 0, $971 | 0, $1052 | 0, $1049 | 0) | 0;
 $1054 = getTempRet0() | 0;
 $1055 = _i64Add($993 | 0, $994 | 0, 1048576, 0) | 0;
 $1056 = getTempRet0() | 0;
 $1057 = _bitshift64Ashr($1055 | 0, $1056 | 0, 21) | 0;
 $1058 = getTempRet0() | 0;
 $1059 = _i64Add($1057 | 0, $1058 | 0, $1013 | 0, $1014 | 0) | 0;
 $1060 = getTempRet0() | 0;
 $1061 = $1055 & -2097152;
 $1062 = _i64Subtract($993 | 0, $994 | 0, $1061 | 0, $1056 | 0) | 0;
 $1063 = getTempRet0() | 0;
 $1064 = _i64Add($1010 | 0, $1011 | 0, 1048576, 0) | 0;
 $1065 = getTempRet0() | 0;
 $1066 = _bitshift64Ashr($1064 | 0, $1065 | 0, 21) | 0;
 $1067 = getTempRet0() | 0;
 $1068 = _i64Add($1066 | 0, $1067 | 0, $1028 | 0, $1029 | 0) | 0;
 $1069 = getTempRet0() | 0;
 $1070 = $1064 & -2097152;
 $1071 = _i64Subtract($1010 | 0, $1011 | 0, $1070 | 0, $1065 | 0) | 0;
 $1072 = getTempRet0() | 0;
 $1073 = _i64Add($1025 | 0, $1026 | 0, 1048576, 0) | 0;
 $1074 = getTempRet0() | 0;
 $1075 = _bitshift64Ashr($1073 | 0, $1074 | 0, 21) | 0;
 $1076 = getTempRet0() | 0;
 $1077 = _i64Add($1075 | 0, $1076 | 0, $1037 | 0, $1038 | 0) | 0;
 $1078 = getTempRet0() | 0;
 $1079 = $1073 & -2097152;
 $1080 = _i64Subtract($1025 | 0, $1026 | 0, $1079 | 0, $1074 | 0) | 0;
 $1081 = getTempRet0() | 0;
 $1082 = ___muldi3($1034 | 0, $1035 | 0, 666643, 0) | 0;
 $1083 = getTempRet0() | 0;
 $1084 = _i64Add($754 | 0, $755 | 0, $1082 | 0, $1083 | 0) | 0;
 $1085 = getTempRet0() | 0;
 $1086 = ___muldi3($1034 | 0, $1035 | 0, 470296, 0) | 0;
 $1087 = getTempRet0() | 0;
 $1088 = _i64Add($964 | 0, $965 | 0, $1086 | 0, $1087 | 0) | 0;
 $1089 = getTempRet0() | 0;
 $1090 = ___muldi3($1034 | 0, $1035 | 0, 654183, 0) | 0;
 $1091 = getTempRet0() | 0;
 $1092 = _i64Add($1046 | 0, $1047 | 0, $1090 | 0, $1091 | 0) | 0;
 $1093 = getTempRet0() | 0;
 $1094 = ___muldi3($1034 | 0, $1035 | 0, -997805, -1) | 0;
 $1095 = getTempRet0() | 0;
 $1096 = _i64Add($1043 | 0, $1044 | 0, $1094 | 0, $1095 | 0) | 0;
 $1097 = getTempRet0() | 0;
 $1098 = ___muldi3($1034 | 0, $1035 | 0, 136657, 0) | 0;
 $1099 = getTempRet0() | 0;
 $1100 = _i64Add($1053 | 0, $1054 | 0, $1098 | 0, $1099 | 0) | 0;
 $1101 = getTempRet0() | 0;
 $1102 = ___muldi3($1034 | 0, $1035 | 0, -683901, -1) | 0;
 $1103 = getTempRet0() | 0;
 $1104 = _i64Add($1050 | 0, $1051 | 0, $953 | 0, $954 | 0) | 0;
 $1105 = getTempRet0() | 0;
 $1106 = _i64Add($1104 | 0, $1105 | 0, $1102 | 0, $1103 | 0) | 0;
 $1107 = getTempRet0() | 0;
 $1108 = _i64Subtract($1106 | 0, $1107 | 0, $995 | 0, $976 | 0) | 0;
 $1109 = getTempRet0() | 0;
 $1110 = ___muldi3($1077 | 0, $1078 | 0, 666643, 0) | 0;
 $1111 = getTempRet0() | 0;
 $1112 = ___muldi3($1077 | 0, $1078 | 0, 470296, 0) | 0;
 $1113 = getTempRet0() | 0;
 $1114 = _i64Add($1084 | 0, $1085 | 0, $1112 | 0, $1113 | 0) | 0;
 $1115 = getTempRet0() | 0;
 $1116 = ___muldi3($1077 | 0, $1078 | 0, 654183, 0) | 0;
 $1117 = getTempRet0() | 0;
 $1118 = _i64Add($1088 | 0, $1089 | 0, $1116 | 0, $1117 | 0) | 0;
 $1119 = getTempRet0() | 0;
 $1120 = ___muldi3($1077 | 0, $1078 | 0, -997805, -1) | 0;
 $1121 = getTempRet0() | 0;
 $1122 = _i64Add($1092 | 0, $1093 | 0, $1120 | 0, $1121 | 0) | 0;
 $1123 = getTempRet0() | 0;
 $1124 = ___muldi3($1077 | 0, $1078 | 0, 136657, 0) | 0;
 $1125 = getTempRet0() | 0;
 $1126 = _i64Add($1096 | 0, $1097 | 0, $1124 | 0, $1125 | 0) | 0;
 $1127 = getTempRet0() | 0;
 $1128 = ___muldi3($1077 | 0, $1078 | 0, -683901, -1) | 0;
 $1129 = getTempRet0() | 0;
 $1130 = _i64Add($1100 | 0, $1101 | 0, $1128 | 0, $1129 | 0) | 0;
 $1131 = getTempRet0() | 0;
 $1132 = ___muldi3($1080 | 0, $1081 | 0, 666643, 0) | 0;
 $1133 = getTempRet0() | 0;
 $1134 = _i64Add($747 | 0, $748 | 0, $1132 | 0, $1133 | 0) | 0;
 $1135 = getTempRet0() | 0;
 $1136 = ___muldi3($1080 | 0, $1081 | 0, 470296, 0) | 0;
 $1137 = getTempRet0() | 0;
 $1138 = ___muldi3($1080 | 0, $1081 | 0, 654183, 0) | 0;
 $1139 = getTempRet0() | 0;
 $1140 = _i64Add($1114 | 0, $1115 | 0, $1138 | 0, $1139 | 0) | 0;
 $1141 = getTempRet0() | 0;
 $1142 = ___muldi3($1080 | 0, $1081 | 0, -997805, -1) | 0;
 $1143 = getTempRet0() | 0;
 $1144 = _i64Add($1118 | 0, $1119 | 0, $1142 | 0, $1143 | 0) | 0;
 $1145 = getTempRet0() | 0;
 $1146 = ___muldi3($1080 | 0, $1081 | 0, 136657, 0) | 0;
 $1147 = getTempRet0() | 0;
 $1148 = _i64Add($1122 | 0, $1123 | 0, $1146 | 0, $1147 | 0) | 0;
 $1149 = getTempRet0() | 0;
 $1150 = ___muldi3($1080 | 0, $1081 | 0, -683901, -1) | 0;
 $1151 = getTempRet0() | 0;
 $1152 = _i64Add($1126 | 0, $1127 | 0, $1150 | 0, $1151 | 0) | 0;
 $1153 = getTempRet0() | 0;
 $1154 = ___muldi3($1068 | 0, $1069 | 0, 666643, 0) | 0;
 $1155 = getTempRet0() | 0;
 $1156 = ___muldi3($1068 | 0, $1069 | 0, 470296, 0) | 0;
 $1157 = getTempRet0() | 0;
 $1158 = ___muldi3($1068 | 0, $1069 | 0, 654183, 0) | 0;
 $1159 = getTempRet0() | 0;
 $1160 = ___muldi3($1068 | 0, $1069 | 0, -997805, -1) | 0;
 $1161 = getTempRet0() | 0;
 $1162 = ___muldi3($1068 | 0, $1069 | 0, 136657, 0) | 0;
 $1163 = getTempRet0() | 0;
 $1164 = _i64Add($1144 | 0, $1145 | 0, $1162 | 0, $1163 | 0) | 0;
 $1165 = getTempRet0() | 0;
 $1166 = ___muldi3($1068 | 0, $1069 | 0, -683901, -1) | 0;
 $1167 = getTempRet0() | 0;
 $1168 = _i64Add($1148 | 0, $1149 | 0, $1166 | 0, $1167 | 0) | 0;
 $1169 = getTempRet0() | 0;
 $1170 = ___muldi3($1071 | 0, $1072 | 0, 666643, 0) | 0;
 $1171 = getTempRet0() | 0;
 $1172 = ___muldi3($1071 | 0, $1072 | 0, 470296, 0) | 0;
 $1173 = getTempRet0() | 0;
 $1174 = ___muldi3($1071 | 0, $1072 | 0, 654183, 0) | 0;
 $1175 = getTempRet0() | 0;
 $1176 = ___muldi3($1071 | 0, $1072 | 0, -997805, -1) | 0;
 $1177 = getTempRet0() | 0;
 $1178 = ___muldi3($1071 | 0, $1072 | 0, 136657, 0) | 0;
 $1179 = getTempRet0() | 0;
 $1180 = ___muldi3($1071 | 0, $1072 | 0, -683901, -1) | 0;
 $1181 = getTempRet0() | 0;
 $1182 = _i64Add($1164 | 0, $1165 | 0, $1180 | 0, $1181 | 0) | 0;
 $1183 = getTempRet0() | 0;
 $1184 = ___muldi3($1059 | 0, $1060 | 0, 666643, 0) | 0;
 $1185 = getTempRet0() | 0;
 $1186 = _i64Add($1184 | 0, $1185 | 0, $530 | 0, $531 | 0) | 0;
 $1187 = getTempRet0() | 0;
 $1188 = ___muldi3($1059 | 0, $1060 | 0, 470296, 0) | 0;
 $1189 = getTempRet0() | 0;
 $1190 = ___muldi3($1059 | 0, $1060 | 0, 654183, 0) | 0;
 $1191 = getTempRet0() | 0;
 $1192 = _i64Add($126 | 0, $127 | 0, $736 | 0, $737 | 0) | 0;
 $1193 = getTempRet0() | 0;
 $1194 = _i64Subtract($1192 | 0, $1193 | 0, $544 | 0, $545 | 0) | 0;
 $1195 = getTempRet0() | 0;
 $1196 = _i64Add($1194 | 0, $1195 | 0, $1190 | 0, $1191 | 0) | 0;
 $1197 = getTempRet0() | 0;
 $1198 = _i64Add($1196 | 0, $1197 | 0, $1154 | 0, $1155 | 0) | 0;
 $1199 = getTempRet0() | 0;
 $1200 = _i64Add($1198 | 0, $1199 | 0, $1172 | 0, $1173 | 0) | 0;
 $1201 = getTempRet0() | 0;
 $1202 = ___muldi3($1059 | 0, $1060 | 0, -997805, -1) | 0;
 $1203 = getTempRet0() | 0;
 $1204 = ___muldi3($1059 | 0, $1060 | 0, 136657, 0) | 0;
 $1205 = getTempRet0() | 0;
 $1206 = _i64Add($744 | 0, $745 | 0, $152 | 0, $153 | 0) | 0;
 $1207 = getTempRet0() | 0;
 $1208 = _i64Subtract($1206 | 0, $1207 | 0, $562 | 0, $547 | 0) | 0;
 $1209 = getTempRet0() | 0;
 $1210 = _i64Add($1208 | 0, $1209 | 0, $1110 | 0, $1111 | 0) | 0;
 $1211 = getTempRet0() | 0;
 $1212 = _i64Add($1210 | 0, $1211 | 0, $1136 | 0, $1137 | 0) | 0;
 $1213 = getTempRet0() | 0;
 $1214 = _i64Add($1212 | 0, $1213 | 0, $1204 | 0, $1205 | 0) | 0;
 $1215 = getTempRet0() | 0;
 $1216 = _i64Add($1214 | 0, $1215 | 0, $1158 | 0, $1159 | 0) | 0;
 $1217 = getTempRet0() | 0;
 $1218 = _i64Add($1216 | 0, $1217 | 0, $1176 | 0, $1177 | 0) | 0;
 $1219 = getTempRet0() | 0;
 $1220 = ___muldi3($1059 | 0, $1060 | 0, -683901, -1) | 0;
 $1221 = getTempRet0() | 0;
 $1222 = _i64Add($1186 | 0, $1187 | 0, 1048576, 0) | 0;
 $1223 = getTempRet0() | 0;
 $1224 = _bitshift64Ashr($1222 | 0, $1223 | 0, 21) | 0;
 $1225 = getTempRet0() | 0;
 $1226 = _i64Add($740 | 0, $741 | 0, $1188 | 0, $1189 | 0) | 0;
 $1227 = getTempRet0() | 0;
 $1228 = _i64Add($1226 | 0, $1227 | 0, $1170 | 0, $1171 | 0) | 0;
 $1229 = getTempRet0() | 0;
 $1230 = _i64Add($1228 | 0, $1229 | 0, $1224 | 0, $1225 | 0) | 0;
 $1231 = getTempRet0() | 0;
 $1232 = $1222 & -2097152;
 $1233 = _i64Subtract($1186 | 0, $1187 | 0, $1232 | 0, $1223 | 0) | 0;
 $1234 = getTempRet0() | 0;
 $1235 = _i64Add($1200 | 0, $1201 | 0, 1048576, 0) | 0;
 $1236 = getTempRet0() | 0;
 $1237 = _bitshift64Ashr($1235 | 0, $1236 | 0, 21) | 0;
 $1238 = getTempRet0() | 0;
 $1239 = _i64Add($1134 | 0, $1135 | 0, $1202 | 0, $1203 | 0) | 0;
 $1240 = getTempRet0() | 0;
 $1241 = _i64Add($1239 | 0, $1240 | 0, $1156 | 0, $1157 | 0) | 0;
 $1242 = getTempRet0() | 0;
 $1243 = _i64Add($1241 | 0, $1242 | 0, $1174 | 0, $1175 | 0) | 0;
 $1244 = getTempRet0() | 0;
 $1245 = _i64Add($1243 | 0, $1244 | 0, $1237 | 0, $1238 | 0) | 0;
 $1246 = getTempRet0() | 0;
 $1247 = $1235 & -2097152;
 $1248 = _i64Add($1218 | 0, $1219 | 0, 1048576, 0) | 0;
 $1249 = getTempRet0() | 0;
 $1250 = _bitshift64Ashr($1248 | 0, $1249 | 0, 21) | 0;
 $1251 = getTempRet0() | 0;
 $1252 = _i64Add($1140 | 0, $1141 | 0, $1220 | 0, $1221 | 0) | 0;
 $1253 = getTempRet0() | 0;
 $1254 = _i64Add($1252 | 0, $1253 | 0, $1160 | 0, $1161 | 0) | 0;
 $1255 = getTempRet0() | 0;
 $1256 = _i64Add($1254 | 0, $1255 | 0, $1178 | 0, $1179 | 0) | 0;
 $1257 = getTempRet0() | 0;
 $1258 = _i64Add($1256 | 0, $1257 | 0, $1250 | 0, $1251 | 0) | 0;
 $1259 = getTempRet0() | 0;
 $1260 = $1248 & -2097152;
 $1261 = _i64Add($1182 | 0, $1183 | 0, 1048576, 0) | 0;
 $1262 = getTempRet0() | 0;
 $1263 = _bitshift64Ashr($1261 | 0, $1262 | 0, 21) | 0;
 $1264 = getTempRet0() | 0;
 $1265 = _i64Add($1168 | 0, $1169 | 0, $1263 | 0, $1264 | 0) | 0;
 $1266 = getTempRet0() | 0;
 $1267 = $1261 & -2097152;
 $1268 = _i64Subtract($1182 | 0, $1183 | 0, $1267 | 0, $1262 | 0) | 0;
 $1269 = getTempRet0() | 0;
 $1270 = _i64Add($1152 | 0, $1153 | 0, 1048576, 0) | 0;
 $1271 = getTempRet0() | 0;
 $1272 = _bitshift64Ashr($1270 | 0, $1271 | 0, 21) | 0;
 $1273 = getTempRet0() | 0;
 $1274 = _i64Add($1130 | 0, $1131 | 0, $1272 | 0, $1273 | 0) | 0;
 $1275 = getTempRet0() | 0;
 $1276 = $1270 & -2097152;
 $1277 = _i64Subtract($1152 | 0, $1153 | 0, $1276 | 0, $1271 | 0) | 0;
 $1278 = getTempRet0() | 0;
 $1279 = _i64Add($1108 | 0, $1109 | 0, 1048576, 0) | 0;
 $1280 = getTempRet0() | 0;
 $1281 = _bitshift64Ashr($1279 | 0, $1280 | 0, 21) | 0;
 $1282 = getTempRet0() | 0;
 $1283 = _i64Add($1062 | 0, $1063 | 0, $1281 | 0, $1282 | 0) | 0;
 $1284 = getTempRet0() | 0;
 $1285 = $1279 & -2097152;
 $1286 = _i64Subtract($1108 | 0, $1109 | 0, $1285 | 0, $1280 | 0) | 0;
 $1287 = getTempRet0() | 0;
 $1288 = _i64Add($1230 | 0, $1231 | 0, 1048576, 0) | 0;
 $1289 = getTempRet0() | 0;
 $1290 = _bitshift64Ashr($1288 | 0, $1289 | 0, 21) | 0;
 $1291 = getTempRet0() | 0;
 $1292 = $1288 & -2097152;
 $1293 = _i64Add($1245 | 0, $1246 | 0, 1048576, 0) | 0;
 $1294 = getTempRet0() | 0;
 $1295 = _bitshift64Ashr($1293 | 0, $1294 | 0, 21) | 0;
 $1296 = getTempRet0() | 0;
 $1297 = $1293 & -2097152;
 $1298 = _i64Add($1258 | 0, $1259 | 0, 1048576, 0) | 0;
 $1299 = getTempRet0() | 0;
 $1300 = _bitshift64Ashr($1298 | 0, $1299 | 0, 21) | 0;
 $1301 = getTempRet0() | 0;
 $1302 = _i64Add($1268 | 0, $1269 | 0, $1300 | 0, $1301 | 0) | 0;
 $1303 = getTempRet0() | 0;
 $1304 = $1298 & -2097152;
 $1305 = _i64Add($1265 | 0, $1266 | 0, 1048576, 0) | 0;
 $1306 = getTempRet0() | 0;
 $1307 = _bitshift64Ashr($1305 | 0, $1306 | 0, 21) | 0;
 $1308 = getTempRet0() | 0;
 $1309 = _i64Add($1277 | 0, $1278 | 0, $1307 | 0, $1308 | 0) | 0;
 $1310 = getTempRet0() | 0;
 $1311 = $1305 & -2097152;
 $1312 = _i64Subtract($1265 | 0, $1266 | 0, $1311 | 0, $1306 | 0) | 0;
 $1313 = getTempRet0() | 0;
 $1314 = _i64Add($1274 | 0, $1275 | 0, 1048576, 0) | 0;
 $1315 = getTempRet0() | 0;
 $1316 = _bitshift64Ashr($1314 | 0, $1315 | 0, 21) | 0;
 $1317 = getTempRet0() | 0;
 $1318 = _i64Add($1286 | 0, $1287 | 0, $1316 | 0, $1317 | 0) | 0;
 $1319 = getTempRet0() | 0;
 $1320 = $1314 & -2097152;
 $1321 = _i64Subtract($1274 | 0, $1275 | 0, $1320 | 0, $1315 | 0) | 0;
 $1322 = getTempRet0() | 0;
 $1323 = _i64Add($1283 | 0, $1284 | 0, 1048576, 0) | 0;
 $1324 = getTempRet0() | 0;
 $1325 = _bitshift64Ashr($1323 | 0, $1324 | 0, 21) | 0;
 $1326 = getTempRet0() | 0;
 $1327 = $1323 & -2097152;
 $1328 = _i64Subtract($1283 | 0, $1284 | 0, $1327 | 0, $1324 | 0) | 0;
 $1329 = getTempRet0() | 0;
 $1330 = ___muldi3($1325 | 0, $1326 | 0, 666643, 0) | 0;
 $1331 = getTempRet0() | 0;
 $1332 = _i64Add($1233 | 0, $1234 | 0, $1330 | 0, $1331 | 0) | 0;
 $1333 = getTempRet0() | 0;
 $1334 = ___muldi3($1325 | 0, $1326 | 0, 470296, 0) | 0;
 $1335 = getTempRet0() | 0;
 $1336 = ___muldi3($1325 | 0, $1326 | 0, 654183, 0) | 0;
 $1337 = getTempRet0() | 0;
 $1338 = ___muldi3($1325 | 0, $1326 | 0, -997805, -1) | 0;
 $1339 = getTempRet0() | 0;
 $1340 = ___muldi3($1325 | 0, $1326 | 0, 136657, 0) | 0;
 $1341 = getTempRet0() | 0;
 $1342 = ___muldi3($1325 | 0, $1326 | 0, -683901, -1) | 0;
 $1343 = getTempRet0() | 0;
 $1344 = _bitshift64Ashr($1332 | 0, $1333 | 0, 21) | 0;
 $1345 = getTempRet0() | 0;
 $1346 = _i64Add($1230 | 0, $1231 | 0, $1334 | 0, $1335 | 0) | 0;
 $1347 = getTempRet0() | 0;
 $1348 = _i64Subtract($1346 | 0, $1347 | 0, $1292 | 0, $1289 | 0) | 0;
 $1349 = getTempRet0() | 0;
 $1350 = _i64Add($1348 | 0, $1349 | 0, $1344 | 0, $1345 | 0) | 0;
 $1351 = getTempRet0() | 0;
 $1352 = $1332 & 2097151;
 $1353 = _bitshift64Ashr($1350 | 0, $1351 | 0, 21) | 0;
 $1354 = getTempRet0() | 0;
 $1355 = _i64Add($1200 | 0, $1201 | 0, $1336 | 0, $1337 | 0) | 0;
 $1356 = getTempRet0() | 0;
 $1357 = _i64Subtract($1355 | 0, $1356 | 0, $1247 | 0, $1236 | 0) | 0;
 $1358 = getTempRet0() | 0;
 $1359 = _i64Add($1357 | 0, $1358 | 0, $1290 | 0, $1291 | 0) | 0;
 $1360 = getTempRet0() | 0;
 $1361 = _i64Add($1359 | 0, $1360 | 0, $1353 | 0, $1354 | 0) | 0;
 $1362 = getTempRet0() | 0;
 $1363 = $1350 & 2097151;
 $1364 = _bitshift64Ashr($1361 | 0, $1362 | 0, 21) | 0;
 $1365 = getTempRet0() | 0;
 $1366 = _i64Add($1245 | 0, $1246 | 0, $1338 | 0, $1339 | 0) | 0;
 $1367 = getTempRet0() | 0;
 $1368 = _i64Subtract($1366 | 0, $1367 | 0, $1297 | 0, $1294 | 0) | 0;
 $1369 = getTempRet0() | 0;
 $1370 = _i64Add($1368 | 0, $1369 | 0, $1364 | 0, $1365 | 0) | 0;
 $1371 = getTempRet0() | 0;
 $1372 = $1361 & 2097151;
 $1373 = _bitshift64Ashr($1370 | 0, $1371 | 0, 21) | 0;
 $1374 = getTempRet0() | 0;
 $1375 = _i64Add($1218 | 0, $1219 | 0, $1340 | 0, $1341 | 0) | 0;
 $1376 = getTempRet0() | 0;
 $1377 = _i64Subtract($1375 | 0, $1376 | 0, $1260 | 0, $1249 | 0) | 0;
 $1378 = getTempRet0() | 0;
 $1379 = _i64Add($1377 | 0, $1378 | 0, $1295 | 0, $1296 | 0) | 0;
 $1380 = getTempRet0() | 0;
 $1381 = _i64Add($1379 | 0, $1380 | 0, $1373 | 0, $1374 | 0) | 0;
 $1382 = getTempRet0() | 0;
 $1383 = $1370 & 2097151;
 $1384 = _bitshift64Ashr($1381 | 0, $1382 | 0, 21) | 0;
 $1385 = getTempRet0() | 0;
 $1386 = _i64Add($1258 | 0, $1259 | 0, $1342 | 0, $1343 | 0) | 0;
 $1387 = getTempRet0() | 0;
 $1388 = _i64Subtract($1386 | 0, $1387 | 0, $1304 | 0, $1299 | 0) | 0;
 $1389 = getTempRet0() | 0;
 $1390 = _i64Add($1388 | 0, $1389 | 0, $1384 | 0, $1385 | 0) | 0;
 $1391 = getTempRet0() | 0;
 $1392 = $1381 & 2097151;
 $1393 = _bitshift64Ashr($1390 | 0, $1391 | 0, 21) | 0;
 $1394 = getTempRet0() | 0;
 $1395 = _i64Add($1302 | 0, $1303 | 0, $1393 | 0, $1394 | 0) | 0;
 $1396 = getTempRet0() | 0;
 $1397 = $1390 & 2097151;
 $1398 = _bitshift64Ashr($1395 | 0, $1396 | 0, 21) | 0;
 $1399 = getTempRet0() | 0;
 $1400 = _i64Add($1398 | 0, $1399 | 0, $1312 | 0, $1313 | 0) | 0;
 $1401 = getTempRet0() | 0;
 $1402 = $1395 & 2097151;
 $1403 = _bitshift64Ashr($1400 | 0, $1401 | 0, 21) | 0;
 $1404 = getTempRet0() | 0;
 $1405 = _i64Add($1309 | 0, $1310 | 0, $1403 | 0, $1404 | 0) | 0;
 $1406 = getTempRet0() | 0;
 $1407 = $1400 & 2097151;
 $1408 = _bitshift64Ashr($1405 | 0, $1406 | 0, 21) | 0;
 $1409 = getTempRet0() | 0;
 $1410 = _i64Add($1408 | 0, $1409 | 0, $1321 | 0, $1322 | 0) | 0;
 $1411 = getTempRet0() | 0;
 $1412 = $1405 & 2097151;
 $1413 = _bitshift64Ashr($1410 | 0, $1411 | 0, 21) | 0;
 $1414 = getTempRet0() | 0;
 $1415 = _i64Add($1318 | 0, $1319 | 0, $1413 | 0, $1414 | 0) | 0;
 $1416 = getTempRet0() | 0;
 $1417 = $1410 & 2097151;
 $1418 = _bitshift64Ashr($1415 | 0, $1416 | 0, 21) | 0;
 $1419 = getTempRet0() | 0;
 $1420 = _i64Add($1418 | 0, $1419 | 0, $1328 | 0, $1329 | 0) | 0;
 $1421 = getTempRet0() | 0;
 $1422 = $1415 & 2097151;
 $1423 = _bitshift64Ashr($1420 | 0, $1421 | 0, 21) | 0;
 $1424 = getTempRet0() | 0;
 $1425 = $1420 & 2097151;
 $1426 = ___muldi3($1423 | 0, $1424 | 0, 666643, 0) | 0;
 $1427 = getTempRet0() | 0;
 $1428 = _i64Add($1426 | 0, $1427 | 0, $1352 | 0, 0) | 0;
 $1429 = getTempRet0() | 0;
 $1430 = ___muldi3($1423 | 0, $1424 | 0, 470296, 0) | 0;
 $1431 = getTempRet0() | 0;
 $1432 = _i64Add($1430 | 0, $1431 | 0, $1363 | 0, 0) | 0;
 $1433 = getTempRet0() | 0;
 $1434 = ___muldi3($1423 | 0, $1424 | 0, 654183, 0) | 0;
 $1435 = getTempRet0() | 0;
 $1436 = _i64Add($1434 | 0, $1435 | 0, $1372 | 0, 0) | 0;
 $1437 = getTempRet0() | 0;
 $1438 = ___muldi3($1423 | 0, $1424 | 0, -997805, -1) | 0;
 $1439 = getTempRet0() | 0;
 $1440 = _i64Add($1438 | 0, $1439 | 0, $1383 | 0, 0) | 0;
 $1441 = getTempRet0() | 0;
 $1442 = ___muldi3($1423 | 0, $1424 | 0, 136657, 0) | 0;
 $1443 = getTempRet0() | 0;
 $1444 = _i64Add($1442 | 0, $1443 | 0, $1392 | 0, 0) | 0;
 $1445 = getTempRet0() | 0;
 $1446 = ___muldi3($1423 | 0, $1424 | 0, -683901, -1) | 0;
 $1447 = getTempRet0() | 0;
 $1448 = _i64Add($1446 | 0, $1447 | 0, $1397 | 0, 0) | 0;
 $1449 = getTempRet0() | 0;
 $1450 = _bitshift64Ashr($1428 | 0, $1429 | 0, 21) | 0;
 $1451 = getTempRet0() | 0;
 $1452 = _i64Add($1432 | 0, $1433 | 0, $1450 | 0, $1451 | 0) | 0;
 $1453 = getTempRet0() | 0;
 $1454 = _bitshift64Ashr($1452 | 0, $1453 | 0, 21) | 0;
 $1455 = getTempRet0() | 0;
 $1456 = _i64Add($1436 | 0, $1437 | 0, $1454 | 0, $1455 | 0) | 0;
 $1457 = getTempRet0() | 0;
 $1458 = $1452 & 2097151;
 $1459 = _bitshift64Ashr($1456 | 0, $1457 | 0, 21) | 0;
 $1460 = getTempRet0() | 0;
 $1461 = _i64Add($1440 | 0, $1441 | 0, $1459 | 0, $1460 | 0) | 0;
 $1462 = getTempRet0() | 0;
 $1463 = $1456 & 2097151;
 $1464 = _bitshift64Ashr($1461 | 0, $1462 | 0, 21) | 0;
 $1465 = getTempRet0() | 0;
 $1466 = _i64Add($1444 | 0, $1445 | 0, $1464 | 0, $1465 | 0) | 0;
 $1467 = getTempRet0() | 0;
 $1468 = $1461 & 2097151;
 $1469 = _bitshift64Ashr($1466 | 0, $1467 | 0, 21) | 0;
 $1470 = getTempRet0() | 0;
 $1471 = _i64Add($1448 | 0, $1449 | 0, $1469 | 0, $1470 | 0) | 0;
 $1472 = getTempRet0() | 0;
 $1473 = $1466 & 2097151;
 $1474 = _bitshift64Ashr($1471 | 0, $1472 | 0, 21) | 0;
 $1475 = getTempRet0() | 0;
 $1476 = _i64Add($1474 | 0, $1475 | 0, $1402 | 0, 0) | 0;
 $1477 = getTempRet0() | 0;
 $1478 = $1471 & 2097151;
 $1479 = _bitshift64Ashr($1476 | 0, $1477 | 0, 21) | 0;
 $1480 = getTempRet0() | 0;
 $1481 = _i64Add($1479 | 0, $1480 | 0, $1407 | 0, 0) | 0;
 $1482 = getTempRet0() | 0;
 $1483 = $1476 & 2097151;
 $1484 = _bitshift64Ashr($1481 | 0, $1482 | 0, 21) | 0;
 $1485 = getTempRet0() | 0;
 $1486 = _i64Add($1484 | 0, $1485 | 0, $1412 | 0, 0) | 0;
 $1487 = getTempRet0() | 0;
 $1488 = _bitshift64Ashr($1486 | 0, $1487 | 0, 21) | 0;
 $1489 = getTempRet0() | 0;
 $1490 = _i64Add($1488 | 0, $1489 | 0, $1417 | 0, 0) | 0;
 $1491 = getTempRet0() | 0;
 $1492 = _bitshift64Ashr($1490 | 0, $1491 | 0, 21) | 0;
 $1493 = getTempRet0() | 0;
 $1494 = _i64Add($1492 | 0, $1493 | 0, $1422 | 0, 0) | 0;
 $1495 = getTempRet0() | 0;
 $1496 = $1490 & 2097151;
 $1497 = _bitshift64Ashr($1494 | 0, $1495 | 0, 21) | 0;
 $1498 = getTempRet0() | 0;
 $1499 = _i64Add($1497 | 0, $1498 | 0, $1425 | 0, 0) | 0;
 $1500 = getTempRet0() | 0;
 $1501 = $1494 & 2097151;
 $1502 = $1428 & 255;
 HEAP8[$s >> 0] = $1502;
 $1503 = _bitshift64Lshr($1428 | 0, $1429 | 0, 8) | 0;
 $1504 = getTempRet0() | 0;
 $1505 = $1503 & 255;
 $arrayidx839 = $s + 1 | 0;
 HEAP8[$arrayidx839 >> 0] = $1505;
 $1506 = _bitshift64Lshr($1428 | 0, $1429 | 0, 16) | 0;
 $1507 = getTempRet0() | 0;
 $1508 = $1506 & 31;
 $1509 = _bitshift64Shl($1458 | 0, 0, 5) | 0;
 $1510 = getTempRet0() | 0;
 $1511 = $1509 | $1508;
 $1512 = $1511 & 255;
 $arrayidx843 = $s + 2 | 0;
 HEAP8[$arrayidx843 >> 0] = $1512;
 $1513 = _bitshift64Lshr($1452 | 0, $1453 | 0, 3) | 0;
 $1514 = getTempRet0() | 0;
 $1515 = $1513 & 255;
 $arrayidx846 = $s + 3 | 0;
 HEAP8[$arrayidx846 >> 0] = $1515;
 $1516 = _bitshift64Lshr($1452 | 0, $1453 | 0, 11) | 0;
 $1517 = getTempRet0() | 0;
 $1518 = $1516 & 255;
 $arrayidx849 = $s + 4 | 0;
 HEAP8[$arrayidx849 >> 0] = $1518;
 $1519 = _bitshift64Lshr($1458 | 0, 0, 19) | 0;
 $1520 = getTempRet0() | 0;
 $1521 = _bitshift64Shl($1463 | 0, 0, 2) | 0;
 $1522 = getTempRet0() | 0;
 $1523 = $1521 | $1519;
 $1522 | $1520;
 $1524 = $1523 & 255;
 $arrayidx854 = $s + 5 | 0;
 HEAP8[$arrayidx854 >> 0] = $1524;
 $1525 = _bitshift64Lshr($1456 | 0, $1457 | 0, 6) | 0;
 $1526 = getTempRet0() | 0;
 $1527 = $1525 & 255;
 $arrayidx857 = $s + 6 | 0;
 HEAP8[$arrayidx857 >> 0] = $1527;
 $1528 = _bitshift64Lshr($1463 | 0, 0, 14) | 0;
 $1529 = getTempRet0() | 0;
 $1530 = _bitshift64Shl($1468 | 0, 0, 7) | 0;
 $1531 = getTempRet0() | 0;
 $1532 = $1530 | $1528;
 $1531 | $1529;
 $1533 = $1532 & 255;
 $arrayidx862 = $s + 7 | 0;
 HEAP8[$arrayidx862 >> 0] = $1533;
 $1534 = _bitshift64Lshr($1461 | 0, $1462 | 0, 1) | 0;
 $1535 = getTempRet0() | 0;
 $1536 = $1534 & 255;
 $arrayidx865 = $s + 8 | 0;
 HEAP8[$arrayidx865 >> 0] = $1536;
 $1537 = _bitshift64Lshr($1461 | 0, $1462 | 0, 9) | 0;
 $1538 = getTempRet0() | 0;
 $1539 = $1537 & 255;
 $arrayidx868 = $s + 9 | 0;
 HEAP8[$arrayidx868 >> 0] = $1539;
 $1540 = _bitshift64Lshr($1468 | 0, 0, 17) | 0;
 $1541 = getTempRet0() | 0;
 $1542 = _bitshift64Shl($1473 | 0, 0, 4) | 0;
 $1543 = getTempRet0() | 0;
 $1544 = $1542 | $1540;
 $1543 | $1541;
 $1545 = $1544 & 255;
 $arrayidx873 = $s + 10 | 0;
 HEAP8[$arrayidx873 >> 0] = $1545;
 $1546 = _bitshift64Lshr($1466 | 0, $1467 | 0, 4) | 0;
 $1547 = getTempRet0() | 0;
 $1548 = $1546 & 255;
 $arrayidx876 = $s + 11 | 0;
 HEAP8[$arrayidx876 >> 0] = $1548;
 $1549 = _bitshift64Lshr($1466 | 0, $1467 | 0, 12) | 0;
 $1550 = getTempRet0() | 0;
 $1551 = $1549 & 255;
 $arrayidx879 = $s + 12 | 0;
 HEAP8[$arrayidx879 >> 0] = $1551;
 $1552 = _bitshift64Lshr($1473 | 0, 0, 20) | 0;
 $1553 = getTempRet0() | 0;
 $1554 = _bitshift64Shl($1478 | 0, 0, 1) | 0;
 $1555 = getTempRet0() | 0;
 $1556 = $1554 | $1552;
 $1555 | $1553;
 $1557 = $1556 & 255;
 $arrayidx884 = $s + 13 | 0;
 HEAP8[$arrayidx884 >> 0] = $1557;
 $1558 = _bitshift64Lshr($1471 | 0, $1472 | 0, 7) | 0;
 $1559 = getTempRet0() | 0;
 $1560 = $1558 & 255;
 $arrayidx887 = $s + 14 | 0;
 HEAP8[$arrayidx887 >> 0] = $1560;
 $1561 = _bitshift64Lshr($1478 | 0, 0, 15) | 0;
 $1562 = getTempRet0() | 0;
 $1563 = _bitshift64Shl($1483 | 0, 0, 6) | 0;
 $1564 = getTempRet0() | 0;
 $1565 = $1563 | $1561;
 $1564 | $1562;
 $1566 = $1565 & 255;
 $arrayidx892 = $s + 15 | 0;
 HEAP8[$arrayidx892 >> 0] = $1566;
 $1567 = _bitshift64Lshr($1476 | 0, $1477 | 0, 2) | 0;
 $1568 = getTempRet0() | 0;
 $1569 = $1567 & 255;
 $arrayidx895 = $s + 16 | 0;
 HEAP8[$arrayidx895 >> 0] = $1569;
 $1570 = _bitshift64Lshr($1476 | 0, $1477 | 0, 10) | 0;
 $1571 = getTempRet0() | 0;
 $1572 = $1570 & 255;
 $arrayidx898 = $s + 17 | 0;
 HEAP8[$arrayidx898 >> 0] = $1572;
 $1573 = _bitshift64Lshr($1483 | 0, 0, 18) | 0;
 $1574 = getTempRet0() | 0;
 $1575 = _bitshift64Shl($1481 | 0, $1482 | 0, 3) | 0;
 $1576 = getTempRet0() | 0;
 $1577 = $1575 | $1573;
 $1576 | $1574;
 $1578 = $1577 & 255;
 $arrayidx903 = $s + 18 | 0;
 HEAP8[$arrayidx903 >> 0] = $1578;
 $1579 = _bitshift64Lshr($1481 | 0, $1482 | 0, 5) | 0;
 $1580 = getTempRet0() | 0;
 $1581 = $1579 & 255;
 $arrayidx906 = $s + 19 | 0;
 HEAP8[$arrayidx906 >> 0] = $1581;
 $1582 = _bitshift64Lshr($1481 | 0, $1482 | 0, 13) | 0;
 $1583 = getTempRet0() | 0;
 $1584 = $1582 & 255;
 $arrayidx909 = $s + 20 | 0;
 HEAP8[$arrayidx909 >> 0] = $1584;
 $1585 = $1486 & 255;
 $arrayidx912 = $s + 21 | 0;
 HEAP8[$arrayidx912 >> 0] = $1585;
 $1586 = _bitshift64Lshr($1486 | 0, $1487 | 0, 8) | 0;
 $1587 = getTempRet0() | 0;
 $1588 = $1586 & 255;
 $arrayidx915 = $s + 22 | 0;
 HEAP8[$arrayidx915 >> 0] = $1588;
 $1589 = _bitshift64Lshr($1486 | 0, $1487 | 0, 16) | 0;
 $1590 = getTempRet0() | 0;
 $1591 = $1589 & 31;
 $1592 = _bitshift64Shl($1496 | 0, 0, 5) | 0;
 $1593 = getTempRet0() | 0;
 $1594 = $1592 | $1591;
 $1595 = $1594 & 255;
 $arrayidx920 = $s + 23 | 0;
 HEAP8[$arrayidx920 >> 0] = $1595;
 $1596 = _bitshift64Lshr($1490 | 0, $1491 | 0, 3) | 0;
 $1597 = getTempRet0() | 0;
 $1598 = $1596 & 255;
 $arrayidx923 = $s + 24 | 0;
 HEAP8[$arrayidx923 >> 0] = $1598;
 $1599 = _bitshift64Lshr($1490 | 0, $1491 | 0, 11) | 0;
 $1600 = getTempRet0() | 0;
 $1601 = $1599 & 255;
 $arrayidx926 = $s + 25 | 0;
 HEAP8[$arrayidx926 >> 0] = $1601;
 $1602 = _bitshift64Lshr($1496 | 0, 0, 19) | 0;
 $1603 = getTempRet0() | 0;
 $1604 = _bitshift64Shl($1501 | 0, 0, 2) | 0;
 $1605 = getTempRet0() | 0;
 $1606 = $1604 | $1602;
 $1605 | $1603;
 $1607 = $1606 & 255;
 $arrayidx931 = $s + 26 | 0;
 HEAP8[$arrayidx931 >> 0] = $1607;
 $1608 = _bitshift64Lshr($1494 | 0, $1495 | 0, 6) | 0;
 $1609 = getTempRet0() | 0;
 $1610 = $1608 & 255;
 $arrayidx934 = $s + 27 | 0;
 HEAP8[$arrayidx934 >> 0] = $1610;
 $1611 = _bitshift64Lshr($1501 | 0, 0, 14) | 0;
 $1612 = getTempRet0() | 0;
 $1613 = _bitshift64Shl($1499 | 0, $1500 | 0, 7) | 0;
 $1614 = getTempRet0() | 0;
 $1615 = $1613 | $1611;
 $1614 | $1612;
 $1616 = $1615 & 255;
 $arrayidx939 = $s + 28 | 0;
 HEAP8[$arrayidx939 >> 0] = $1616;
 $1617 = _bitshift64Lshr($1499 | 0, $1500 | 0, 1) | 0;
 $1618 = getTempRet0() | 0;
 $1619 = $1617 & 255;
 $arrayidx942 = $s + 29 | 0;
 HEAP8[$arrayidx942 >> 0] = $1619;
 $1620 = _bitshift64Lshr($1499 | 0, $1500 | 0, 9) | 0;
 $1621 = getTempRet0() | 0;
 $1622 = $1620 & 255;
 $arrayidx945 = $s + 30 | 0;
 HEAP8[$arrayidx945 >> 0] = $1622;
 $1623 = _bitshift64Ashr($1499 | 0, $1500 | 0, 17) | 0;
 $1624 = getTempRet0() | 0;
 $1625 = $1623 & 255;
 $arrayidx948 = $s + 31 | 0;
 HEAP8[$arrayidx948 >> 0] = $1625;
 return;
}

function _E8($state) {
 $state = $state | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0;
 var $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $arraydecay = 0, $arraydecay1348 = 0, $arraydecay1792 = 0;
 var $arraydecay2236 = 0, $arraydecay2672 = 0, $arraydecay460 = 0, $arraydecay904 = 0, $arrayidx12$1 = 0, $arrayidx12$phi$trans$insert = 0, $arrayidx1350$1 = 0, $arrayidx1368 = 0, $arrayidx1368$1 = 0, $arrayidx1794$1 = 0, $arrayidx1812 = 0, $arrayidx1812$1 = 0, $arrayidx21 = 0, $arrayidx21$1 = 0, $arrayidx2238$1 = 0, $arrayidx2256 = 0, $arrayidx2256$1 = 0, $arrayidx26$1 = 0, $arrayidx2674$1 = 0, $arrayidx2692 = 0;
 var $arrayidx2692$1 = 0, $arrayidx30 = 0, $arrayidx30$1 = 0, $arrayidx3025 = 0, $arrayidx34$1 = 0, $arrayidx34$phi$trans$insert = 0, $arrayidx4 = 0, $arrayidx4$1 = 0, $arrayidx42 = 0, $arrayidx42$1 = 0, $arrayidx462$1 = 0, $arrayidx47$1 = 0, $arrayidx480 = 0, $arrayidx480$1 = 0, $arrayidx62 = 0, $arrayidx62$1 = 0, $arrayidx79$1 = 0, $arrayidx79$phi$trans$insert = 0, $arrayidx906$1 = 0, $arrayidx924 = 0;
 var $arrayidx924$1 = 0, $idxprom1346 = 0, $idxprom1790 = 0, $idxprom2234 = 0, $idxprom2670 = 0, $idxprom458 = 0, $idxprom902 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arrayidx3025 = $state + 48 | 0;
 $arrayidx12$phi$trans$insert = $state + 144 | 0;
 $0 = $arrayidx12$phi$trans$insert;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $arrayidx34$phi$trans$insert = $state + 112 | 0;
 $6 = $arrayidx34$phi$trans$insert;
 $7 = $6;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $6 + 4 | 0;
 $10 = $9;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $arrayidx3025;
 $13 = $12;
 $14 = HEAP32[$13 >> 2] | 0;
 $15 = $12 + 4 | 0;
 $16 = $15;
 $17 = HEAP32[$16 >> 2] | 0;
 $arrayidx79$phi$trans$insert = $state + 80 | 0;
 $18 = $arrayidx79$phi$trans$insert;
 $19 = $18;
 $20 = HEAP32[$19 >> 2] | 0;
 $21 = $18 + 4 | 0;
 $22 = $21;
 $23 = HEAP32[$22 >> 2] | 0;
 $arrayidx4 = $state + 128 | 0;
 $arrayidx21 = $state + 96 | 0;
 $arrayidx30 = $state + 32 | 0;
 $arrayidx62 = $state + 64 | 0;
 $arrayidx4$1 = $state + 136 | 0;
 $arrayidx12$1 = $state + 152 | 0;
 $arrayidx21$1 = $state + 104 | 0;
 $arrayidx30$1 = $state + 40 | 0;
 $arrayidx34$1 = $state + 120 | 0;
 $arrayidx47$1 = $state + 56 | 0;
 $arrayidx62$1 = $state + 72 | 0;
 $arrayidx79$1 = $state + 88 | 0;
 $24 = $arrayidx4;
 $25 = $24;
 $26 = HEAP32[$25 >> 2] | 0;
 $27 = $24 + 4 | 0;
 $28 = $27;
 $29 = HEAP32[$28 >> 2] | 0;
 $30 = $arrayidx21;
 $31 = $30;
 $32 = HEAP32[$31 >> 2] | 0;
 $33 = $30 + 4 | 0;
 $34 = $33;
 $35 = HEAP32[$34 >> 2] | 0;
 $36 = $arrayidx30;
 $37 = $36;
 $38 = HEAP32[$37 >> 2] | 0;
 $39 = $36 + 4 | 0;
 $40 = $39;
 $41 = HEAP32[$40 >> 2] | 0;
 $42 = $arrayidx62;
 $43 = $42;
 $44 = HEAP32[$43 >> 2] | 0;
 $45 = $42 + 4 | 0;
 $46 = $45;
 $47 = HEAP32[$46 >> 2] | 0;
 $48 = $arrayidx4$1;
 $49 = $48;
 $50 = HEAP32[$49 >> 2] | 0;
 $51 = $48 + 4 | 0;
 $52 = $51;
 $53 = HEAP32[$52 >> 2] | 0;
 $54 = $arrayidx12$1;
 $55 = $54;
 $56 = HEAP32[$55 >> 2] | 0;
 $57 = $54 + 4 | 0;
 $58 = $57;
 $59 = HEAP32[$58 >> 2] | 0;
 $60 = $arrayidx21$1;
 $61 = $60;
 $62 = HEAP32[$61 >> 2] | 0;
 $63 = $60 + 4 | 0;
 $64 = $63;
 $65 = HEAP32[$64 >> 2] | 0;
 $66 = $arrayidx30$1;
 $67 = $66;
 $68 = HEAP32[$67 >> 2] | 0;
 $69 = $66 + 4 | 0;
 $70 = $69;
 $71 = HEAP32[$70 >> 2] | 0;
 $72 = $arrayidx34$1;
 $73 = $72;
 $74 = HEAP32[$73 >> 2] | 0;
 $75 = $72 + 4 | 0;
 $76 = $75;
 $77 = HEAP32[$76 >> 2] | 0;
 $78 = $arrayidx47$1;
 $79 = $78;
 $80 = HEAP32[$79 >> 2] | 0;
 $81 = $78 + 4 | 0;
 $82 = $81;
 $83 = HEAP32[$82 >> 2] | 0;
 $84 = $arrayidx62$1;
 $85 = $84;
 $86 = HEAP32[$85 >> 2] | 0;
 $87 = $84 + 4 | 0;
 $88 = $87;
 $89 = HEAP32[$88 >> 2] | 0;
 $90 = $arrayidx79$1;
 $91 = $90;
 $92 = HEAP32[$91 >> 2] | 0;
 $93 = $90 + 4 | 0;
 $94 = $93;
 $95 = HEAP32[$94 >> 2] | 0;
 $100 = $29;
 $102 = $2;
 $104 = $5;
 $106 = $32;
 $108 = $35;
 $118 = $38;
 $120 = $41;
 $122 = $8;
 $124 = $11;
 $134 = $14;
 $136 = $17;
 $138 = $44;
 $140 = $47;
 $144 = $20;
 $146 = $23;
 $2265 = 0;
 $278 = $50;
 $280 = $53;
 $282 = $56;
 $284 = $59;
 $286 = $62;
 $288 = $65;
 $298 = $68;
 $300 = $71;
 $302 = $74;
 $304 = $77;
 $314 = $80;
 $316 = $83;
 $318 = $86;
 $320 = $89;
 $324 = $92;
 $326 = $95;
 $96 = 0;
 $98 = $26;
 while (1) {
  $arraydecay = 37360 + ($96 << 5) | 0;
  $97 = $98 ^ -1;
  $99 = $100 ^ -1;
  $101 = $102 ^ -1;
  $103 = $104 ^ -1;
  $105 = $106 ^ -1;
  $107 = $108 ^ -1;
  $109 = $arraydecay;
  $110 = $109;
  $111 = HEAP32[$110 >> 2] | 0;
  $112 = $109 + 4 | 0;
  $113 = $112;
  $114 = HEAP32[$113 >> 2] | 0;
  $115 = $111 & $105;
  $116 = $114 & $107;
  $117 = $118 ^ $115;
  $119 = $120 ^ $116;
  $121 = $122 ^ -1;
  $123 = $124 ^ -1;
  $arrayidx42 = (37360 + ($96 << 5) | 0) + 16 | 0;
  $125 = $arrayidx42;
  $126 = $125;
  $127 = HEAP32[$126 >> 2] | 0;
  $128 = $125 + 4 | 0;
  $129 = $128;
  $130 = HEAP32[$129 >> 2] | 0;
  $131 = $127 & $121;
  $132 = $130 & $123;
  $133 = $134 ^ $131;
  $135 = $136 ^ $132;
  $137 = $138 & $117;
  $139 = $140 & $119;
  $141 = $137 ^ $111;
  $142 = $139 ^ $114;
  $143 = $144 & $133;
  $145 = $146 & $135;
  $147 = $143 ^ $127;
  $148 = $145 ^ $130;
  $149 = $106 & $97;
  $150 = $108 & $99;
  $151 = $117 ^ $149;
  $152 = $119 ^ $150;
  $153 = $122 & $101;
  $154 = $124 & $103;
  $155 = $133 ^ $153;
  $156 = $135 ^ $154;
  $157 = $138 ^ -1;
  $158 = $140 ^ -1;
  $159 = $106 & $157;
  $160 = $108 & $158;
  $161 = $159 ^ $97;
  $162 = $160 ^ $99;
  $163 = $144 ^ -1;
  $164 = $146 ^ -1;
  $165 = $122 & $163;
  $166 = $124 & $164;
  $167 = $165 ^ $101;
  $168 = $166 ^ $103;
  $169 = $151 & $106;
  $170 = $152 & $108;
  $171 = $138 ^ $169;
  $172 = $140 ^ $170;
  $173 = $155 & $122;
  $174 = $156 & $124;
  $175 = $144 ^ $173;
  $176 = $146 ^ $174;
  $177 = $159 ^ $98;
  $178 = $160 ^ $100;
  $179 = $177 & $151;
  $180 = $178 & $152;
  $181 = $179 ^ $106;
  $182 = $180 ^ $108;
  $183 = $165 ^ $102;
  $184 = $166 ^ $104;
  $185 = $183 & $155;
  $186 = $184 & $156;
  $187 = $185 ^ $122;
  $188 = $186 ^ $124;
  $189 = $161 | $171;
  $190 = $162 | $172;
  $191 = $189 ^ $151;
  $192 = $190 ^ $152;
  $193 = $167 | $175;
  $194 = $168 | $176;
  $195 = $193 ^ $155;
  $196 = $194 ^ $156;
  $197 = $181 & $171;
  $198 = $182 & $172;
  $199 = $197 ^ $161;
  $200 = $198 ^ $162;
  $201 = $187 & $175;
  $202 = $188 & $176;
  $203 = $201 ^ $167;
  $204 = $202 ^ $168;
  $205 = $191 & $141;
  $206 = $192 & $142;
  $207 = $205 ^ $171;
  $208 = $206 ^ $172;
  $209 = $195 & $147;
  $210 = $196 & $148;
  $211 = $209 ^ $175;
  $212 = $210 ^ $176;
  $213 = $181 ^ $141;
  $214 = $182 ^ $142;
  $215 = $187 ^ $147;
  $216 = $188 ^ $148;
  $217 = $207 ^ $195;
  $218 = $208 ^ $196;
  $219 = $211 ^ $213;
  $220 = $212 ^ $214;
  $221 = $199 ^ $191;
  $222 = $200 ^ $192;
  $223 = $221 ^ $215;
  $224 = $222 ^ $216;
  $225 = $203 ^ $191;
  $226 = $204 ^ $192;
  $227 = $219 ^ $191;
  $228 = $220 ^ $192;
  $229 = $223 ^ $207;
  $230 = $224 ^ $208;
  $231 = $217 ^ $213;
  $232 = $218 ^ $214;
  $233 = $231 ^ $225;
  $234 = $232 ^ $226;
  $235 = $217 ^ $199;
  $236 = $218 ^ $200;
  $237 = _bitshift64Shl($217 | 0, $218 | 0, 1) | 0;
  $238 = getTempRet0() | 0;
  $239 = $237 & -1431655766;
  $240 = $238 & -1431655766;
  $241 = _bitshift64Lshr($217 | 0, $218 | 0, 1) | 0;
  $242 = getTempRet0() | 0;
  $243 = $241 & 1431655765;
  $244 = $242 & 1431655765;
  $245 = $239 | $243;
  $246 = $240 | $244;
  $247 = _bitshift64Shl($219 | 0, $220 | 0, 1) | 0;
  $248 = getTempRet0() | 0;
  $249 = $247 & -1431655766;
  $250 = $248 & -1431655766;
  $251 = _bitshift64Lshr($219 | 0, $220 | 0, 1) | 0;
  $252 = getTempRet0() | 0;
  $253 = $251 & 1431655765;
  $254 = $252 & 1431655765;
  $255 = $249 | $253;
  $256 = $250 | $254;
  $257 = _bitshift64Shl($223 | 0, $224 | 0, 1) | 0;
  $258 = getTempRet0() | 0;
  $259 = $257 & -1431655766;
  $260 = $258 & -1431655766;
  $261 = _bitshift64Lshr($223 | 0, $224 | 0, 1) | 0;
  $262 = getTempRet0() | 0;
  $263 = $261 & 1431655765;
  $264 = $262 & 1431655765;
  $265 = $259 | $263;
  $266 = $260 | $264;
  $267 = _bitshift64Shl($225 | 0, $226 | 0, 1) | 0;
  $268 = getTempRet0() | 0;
  $269 = $267 & -1431655766;
  $270 = $268 & -1431655766;
  $271 = _bitshift64Lshr($225 | 0, $226 | 0, 1) | 0;
  $272 = getTempRet0() | 0;
  $273 = $271 & 1431655765;
  $274 = $272 & 1431655765;
  $275 = $269 | $273;
  $276 = $270 | $274;
  $277 = $278 ^ -1;
  $279 = $280 ^ -1;
  $281 = $282 ^ -1;
  $283 = $284 ^ -1;
  $285 = $286 ^ -1;
  $287 = $288 ^ -1;
  $arrayidx26$1 = (37360 + ($96 << 5) | 0) + 8 | 0;
  $289 = $arrayidx26$1;
  $290 = $289;
  $291 = HEAP32[$290 >> 2] | 0;
  $292 = $289 + 4 | 0;
  $293 = $292;
  $294 = HEAP32[$293 >> 2] | 0;
  $295 = $291 & $285;
  $296 = $294 & $287;
  $297 = $298 ^ $295;
  $299 = $300 ^ $296;
  $301 = $302 ^ -1;
  $303 = $304 ^ -1;
  $arrayidx42$1 = (37360 + ($96 << 5) | 0) + 24 | 0;
  $305 = $arrayidx42$1;
  $306 = $305;
  $307 = HEAP32[$306 >> 2] | 0;
  $308 = $305 + 4 | 0;
  $309 = $308;
  $310 = HEAP32[$309 >> 2] | 0;
  $311 = $307 & $301;
  $312 = $310 & $303;
  $313 = $314 ^ $311;
  $315 = $316 ^ $312;
  $317 = $318 & $297;
  $319 = $320 & $299;
  $321 = $317 ^ $291;
  $322 = $319 ^ $294;
  $323 = $324 & $313;
  $325 = $326 & $315;
  $327 = $323 ^ $307;
  $328 = $325 ^ $310;
  $329 = $286 & $277;
  $330 = $288 & $279;
  $331 = $297 ^ $329;
  $332 = $299 ^ $330;
  $333 = $302 & $281;
  $334 = $304 & $283;
  $335 = $313 ^ $333;
  $336 = $315 ^ $334;
  $337 = $318 ^ -1;
  $338 = $320 ^ -1;
  $339 = $286 & $337;
  $340 = $288 & $338;
  $341 = $339 ^ $277;
  $342 = $340 ^ $279;
  $343 = $324 ^ -1;
  $344 = $326 ^ -1;
  $345 = $302 & $343;
  $346 = $304 & $344;
  $347 = $345 ^ $281;
  $348 = $346 ^ $283;
  $349 = $331 & $286;
  $350 = $332 & $288;
  $351 = $318 ^ $349;
  $352 = $320 ^ $350;
  $353 = $335 & $302;
  $354 = $336 & $304;
  $355 = $324 ^ $353;
  $356 = $326 ^ $354;
  $357 = $339 ^ $278;
  $358 = $340 ^ $280;
  $359 = $357 & $331;
  $360 = $358 & $332;
  $361 = $359 ^ $286;
  $362 = $360 ^ $288;
  $363 = $345 ^ $282;
  $364 = $346 ^ $284;
  $365 = $363 & $335;
  $366 = $364 & $336;
  $367 = $365 ^ $302;
  $368 = $366 ^ $304;
  $369 = $341 | $351;
  $370 = $342 | $352;
  $371 = $369 ^ $331;
  $372 = $370 ^ $332;
  $373 = $347 | $355;
  $374 = $348 | $356;
  $375 = $373 ^ $335;
  $376 = $374 ^ $336;
  $377 = $361 & $351;
  $378 = $362 & $352;
  $379 = $377 ^ $341;
  $380 = $378 ^ $342;
  $381 = $367 & $355;
  $382 = $368 & $356;
  $383 = $381 ^ $347;
  $384 = $382 ^ $348;
  $385 = $371 & $321;
  $386 = $372 & $322;
  $387 = $385 ^ $351;
  $388 = $386 ^ $352;
  $389 = $375 & $327;
  $390 = $376 & $328;
  $391 = $389 ^ $355;
  $392 = $390 ^ $356;
  $393 = $361 ^ $321;
  $394 = $362 ^ $322;
  $395 = $367 ^ $327;
  $396 = $368 ^ $328;
  $397 = $387 ^ $375;
  $398 = $388 ^ $376;
  $399 = $391 ^ $393;
  $400 = $392 ^ $394;
  $401 = $379 ^ $371;
  $402 = $380 ^ $372;
  $403 = $401 ^ $395;
  $404 = $402 ^ $396;
  $405 = $383 ^ $371;
  $406 = $384 ^ $372;
  $407 = $399 ^ $371;
  $408 = $400 ^ $372;
  $409 = $403 ^ $387;
  $410 = $404 ^ $388;
  $411 = $397 ^ $393;
  $412 = $398 ^ $394;
  $413 = $411 ^ $405;
  $414 = $412 ^ $406;
  $415 = $397 ^ $379;
  $416 = $398 ^ $380;
  $417 = _bitshift64Shl($397 | 0, $398 | 0, 1) | 0;
  $418 = getTempRet0() | 0;
  $419 = $417 & -1431655766;
  $420 = $418 & -1431655766;
  $421 = _bitshift64Lshr($397 | 0, $398 | 0, 1) | 0;
  $422 = getTempRet0() | 0;
  $423 = $421 & 1431655765;
  $424 = $422 & 1431655765;
  $425 = $419 | $423;
  $426 = $420 | $424;
  $427 = _bitshift64Shl($399 | 0, $400 | 0, 1) | 0;
  $428 = getTempRet0() | 0;
  $429 = $427 & -1431655766;
  $430 = $428 & -1431655766;
  $431 = _bitshift64Lshr($399 | 0, $400 | 0, 1) | 0;
  $432 = getTempRet0() | 0;
  $433 = $431 & 1431655765;
  $434 = $432 & 1431655765;
  $435 = $429 | $433;
  $436 = $430 | $434;
  $437 = _bitshift64Shl($403 | 0, $404 | 0, 1) | 0;
  $438 = getTempRet0() | 0;
  $439 = $437 & -1431655766;
  $440 = $438 & -1431655766;
  $441 = _bitshift64Lshr($403 | 0, $404 | 0, 1) | 0;
  $442 = getTempRet0() | 0;
  $443 = $441 & 1431655765;
  $444 = $442 & 1431655765;
  $445 = $439 | $443;
  $446 = $440 | $444;
  $447 = _bitshift64Shl($405 | 0, $406 | 0, 1) | 0;
  $448 = getTempRet0() | 0;
  $449 = $447 & -1431655766;
  $450 = $448 & -1431655766;
  $451 = _bitshift64Lshr($405 | 0, $406 | 0, 1) | 0;
  $452 = getTempRet0() | 0;
  $453 = $451 & 1431655765;
  $454 = $452 & 1431655765;
  $455 = $449 | $453;
  $456 = $450 | $454;
  $idxprom458 = $96 + 1 | 0;
  $arraydecay460 = 37360 + ($idxprom458 << 5) | 0;
  $457 = $235 ^ -1;
  $458 = $236 ^ -1;
  $459 = $275 ^ -1;
  $460 = $276 ^ -1;
  $461 = $233 ^ -1;
  $462 = $234 ^ -1;
  $463 = $arraydecay460;
  $464 = $463;
  $465 = HEAP32[$464 >> 2] | 0;
  $466 = $463 + 4 | 0;
  $467 = $466;
  $468 = HEAP32[$467 >> 2] | 0;
  $469 = $465 & $461;
  $470 = $468 & $462;
  $471 = $227 ^ $469;
  $472 = $228 ^ $470;
  $473 = $265 ^ -1;
  $474 = $266 ^ -1;
  $arrayidx480 = (37360 + ($idxprom458 << 5) | 0) + 16 | 0;
  $475 = $arrayidx480;
  $476 = $475;
  $477 = HEAP32[$476 >> 2] | 0;
  $478 = $475 + 4 | 0;
  $479 = $478;
  $480 = HEAP32[$479 >> 2] | 0;
  $481 = $477 & $473;
  $482 = $480 & $474;
  $483 = $245 ^ $481;
  $484 = $246 ^ $482;
  $485 = $229 & $471;
  $486 = $230 & $472;
  $487 = $485 ^ $465;
  $488 = $486 ^ $468;
  $489 = $255 & $483;
  $490 = $256 & $484;
  $491 = $489 ^ $477;
  $492 = $490 ^ $480;
  $493 = $233 & $457;
  $494 = $234 & $458;
  $495 = $471 ^ $493;
  $496 = $472 ^ $494;
  $497 = $265 & $459;
  $498 = $266 & $460;
  $499 = $483 ^ $497;
  $500 = $484 ^ $498;
  $501 = $229 ^ -1;
  $502 = $230 ^ -1;
  $503 = $233 & $501;
  $504 = $234 & $502;
  $505 = $503 ^ $457;
  $506 = $504 ^ $458;
  $507 = $255 ^ -1;
  $508 = $256 ^ -1;
  $509 = $265 & $507;
  $510 = $266 & $508;
  $511 = $509 ^ $459;
  $512 = $510 ^ $460;
  $513 = $495 & $233;
  $514 = $496 & $234;
  $515 = $229 ^ $513;
  $516 = $230 ^ $514;
  $517 = $499 & $265;
  $518 = $500 & $266;
  $519 = $255 ^ $517;
  $520 = $256 ^ $518;
  $521 = $503 ^ $235;
  $522 = $504 ^ $236;
  $523 = $521 & $495;
  $524 = $522 & $496;
  $525 = $523 ^ $233;
  $526 = $524 ^ $234;
  $527 = $509 ^ $275;
  $528 = $510 ^ $276;
  $529 = $527 & $499;
  $530 = $528 & $500;
  $531 = $529 ^ $265;
  $532 = $530 ^ $266;
  $533 = $505 | $515;
  $534 = $506 | $516;
  $535 = $533 ^ $495;
  $536 = $534 ^ $496;
  $537 = $511 | $519;
  $538 = $512 | $520;
  $539 = $537 ^ $499;
  $540 = $538 ^ $500;
  $541 = $525 & $515;
  $542 = $526 & $516;
  $543 = $541 ^ $505;
  $544 = $542 ^ $506;
  $545 = $531 & $519;
  $546 = $532 & $520;
  $547 = $545 ^ $511;
  $548 = $546 ^ $512;
  $549 = $535 & $487;
  $550 = $536 & $488;
  $551 = $549 ^ $515;
  $552 = $550 ^ $516;
  $553 = $539 & $491;
  $554 = $540 & $492;
  $555 = $553 ^ $519;
  $556 = $554 ^ $520;
  $557 = $525 ^ $487;
  $558 = $526 ^ $488;
  $559 = $531 ^ $491;
  $560 = $532 ^ $492;
  $561 = $551 ^ $539;
  $562 = $552 ^ $540;
  $563 = $555 ^ $557;
  $564 = $556 ^ $558;
  $565 = $543 ^ $535;
  $566 = $544 ^ $536;
  $567 = $565 ^ $559;
  $568 = $566 ^ $560;
  $569 = $547 ^ $535;
  $570 = $548 ^ $536;
  $571 = $563 ^ $535;
  $572 = $564 ^ $536;
  $573 = $567 ^ $551;
  $574 = $568 ^ $552;
  $575 = $561 ^ $557;
  $576 = $562 ^ $558;
  $577 = $575 ^ $569;
  $578 = $576 ^ $570;
  $579 = $561 ^ $543;
  $580 = $562 ^ $544;
  $581 = _bitshift64Shl($561 | 0, $562 | 0, 2) | 0;
  $582 = getTempRet0() | 0;
  $583 = $581 & -858993460;
  $584 = $582 & -858993460;
  $585 = _bitshift64Lshr($561 | 0, $562 | 0, 2) | 0;
  $586 = getTempRet0() | 0;
  $587 = $585 & 858993459;
  $588 = $586 & 858993459;
  $589 = $583 | $587;
  $590 = $584 | $588;
  $591 = _bitshift64Shl($563 | 0, $564 | 0, 2) | 0;
  $592 = getTempRet0() | 0;
  $593 = $591 & -858993460;
  $594 = $592 & -858993460;
  $595 = _bitshift64Lshr($563 | 0, $564 | 0, 2) | 0;
  $596 = getTempRet0() | 0;
  $597 = $595 & 858993459;
  $598 = $596 & 858993459;
  $599 = $593 | $597;
  $600 = $594 | $598;
  $601 = _bitshift64Shl($567 | 0, $568 | 0, 2) | 0;
  $602 = getTempRet0() | 0;
  $603 = $601 & -858993460;
  $604 = $602 & -858993460;
  $605 = _bitshift64Lshr($567 | 0, $568 | 0, 2) | 0;
  $606 = getTempRet0() | 0;
  $607 = $605 & 858993459;
  $608 = $606 & 858993459;
  $609 = $603 | $607;
  $610 = $604 | $608;
  $611 = _bitshift64Shl($569 | 0, $570 | 0, 2) | 0;
  $612 = getTempRet0() | 0;
  $613 = $611 & -858993460;
  $614 = $612 & -858993460;
  $615 = _bitshift64Lshr($569 | 0, $570 | 0, 2) | 0;
  $616 = getTempRet0() | 0;
  $617 = $615 & 858993459;
  $618 = $616 & 858993459;
  $619 = $613 | $617;
  $620 = $614 | $618;
  $621 = $415 ^ -1;
  $622 = $416 ^ -1;
  $623 = $455 ^ -1;
  $624 = $456 ^ -1;
  $625 = $413 ^ -1;
  $626 = $414 ^ -1;
  $arrayidx462$1 = (37360 + ($idxprom458 << 5) | 0) + 8 | 0;
  $627 = $arrayidx462$1;
  $628 = $627;
  $629 = HEAP32[$628 >> 2] | 0;
  $630 = $627 + 4 | 0;
  $631 = $630;
  $632 = HEAP32[$631 >> 2] | 0;
  $633 = $629 & $625;
  $634 = $632 & $626;
  $635 = $407 ^ $633;
  $636 = $408 ^ $634;
  $637 = $445 ^ -1;
  $638 = $446 ^ -1;
  $arrayidx480$1 = (37360 + ($idxprom458 << 5) | 0) + 24 | 0;
  $639 = $arrayidx480$1;
  $640 = $639;
  $641 = HEAP32[$640 >> 2] | 0;
  $642 = $639 + 4 | 0;
  $643 = $642;
  $644 = HEAP32[$643 >> 2] | 0;
  $645 = $641 & $637;
  $646 = $644 & $638;
  $647 = $425 ^ $645;
  $648 = $426 ^ $646;
  $649 = $409 & $635;
  $650 = $410 & $636;
  $651 = $649 ^ $629;
  $652 = $650 ^ $632;
  $653 = $435 & $647;
  $654 = $436 & $648;
  $655 = $653 ^ $641;
  $656 = $654 ^ $644;
  $657 = $413 & $621;
  $658 = $414 & $622;
  $659 = $635 ^ $657;
  $660 = $636 ^ $658;
  $661 = $445 & $623;
  $662 = $446 & $624;
  $663 = $647 ^ $661;
  $664 = $648 ^ $662;
  $665 = $409 ^ -1;
  $666 = $410 ^ -1;
  $667 = $413 & $665;
  $668 = $414 & $666;
  $669 = $667 ^ $621;
  $670 = $668 ^ $622;
  $671 = $435 ^ -1;
  $672 = $436 ^ -1;
  $673 = $445 & $671;
  $674 = $446 & $672;
  $675 = $673 ^ $623;
  $676 = $674 ^ $624;
  $677 = $659 & $413;
  $678 = $660 & $414;
  $679 = $409 ^ $677;
  $680 = $410 ^ $678;
  $681 = $663 & $445;
  $682 = $664 & $446;
  $683 = $435 ^ $681;
  $684 = $436 ^ $682;
  $685 = $667 ^ $415;
  $686 = $668 ^ $416;
  $687 = $685 & $659;
  $688 = $686 & $660;
  $689 = $687 ^ $413;
  $690 = $688 ^ $414;
  $691 = $673 ^ $455;
  $692 = $674 ^ $456;
  $693 = $691 & $663;
  $694 = $692 & $664;
  $695 = $693 ^ $445;
  $696 = $694 ^ $446;
  $697 = $669 | $679;
  $698 = $670 | $680;
  $699 = $697 ^ $659;
  $700 = $698 ^ $660;
  $701 = $675 | $683;
  $702 = $676 | $684;
  $703 = $701 ^ $663;
  $704 = $702 ^ $664;
  $705 = $689 & $679;
  $706 = $690 & $680;
  $707 = $705 ^ $669;
  $708 = $706 ^ $670;
  $709 = $695 & $683;
  $710 = $696 & $684;
  $711 = $709 ^ $675;
  $712 = $710 ^ $676;
  $713 = $699 & $651;
  $714 = $700 & $652;
  $715 = $713 ^ $679;
  $716 = $714 ^ $680;
  $717 = $703 & $655;
  $718 = $704 & $656;
  $719 = $717 ^ $683;
  $720 = $718 ^ $684;
  $721 = $689 ^ $651;
  $722 = $690 ^ $652;
  $723 = $695 ^ $655;
  $724 = $696 ^ $656;
  $725 = $715 ^ $703;
  $726 = $716 ^ $704;
  $727 = $719 ^ $721;
  $728 = $720 ^ $722;
  $729 = $707 ^ $699;
  $730 = $708 ^ $700;
  $731 = $729 ^ $723;
  $732 = $730 ^ $724;
  $733 = $711 ^ $699;
  $734 = $712 ^ $700;
  $735 = $727 ^ $699;
  $736 = $728 ^ $700;
  $737 = $731 ^ $715;
  $738 = $732 ^ $716;
  $739 = $725 ^ $721;
  $740 = $726 ^ $722;
  $741 = $739 ^ $733;
  $742 = $740 ^ $734;
  $743 = $725 ^ $707;
  $744 = $726 ^ $708;
  $745 = _bitshift64Shl($725 | 0, $726 | 0, 2) | 0;
  $746 = getTempRet0() | 0;
  $747 = $745 & -858993460;
  $748 = $746 & -858993460;
  $749 = _bitshift64Lshr($725 | 0, $726 | 0, 2) | 0;
  $750 = getTempRet0() | 0;
  $751 = $749 & 858993459;
  $752 = $750 & 858993459;
  $753 = $747 | $751;
  $754 = $748 | $752;
  $755 = _bitshift64Shl($727 | 0, $728 | 0, 2) | 0;
  $756 = getTempRet0() | 0;
  $757 = $755 & -858993460;
  $758 = $756 & -858993460;
  $759 = _bitshift64Lshr($727 | 0, $728 | 0, 2) | 0;
  $760 = getTempRet0() | 0;
  $761 = $759 & 858993459;
  $762 = $760 & 858993459;
  $763 = $757 | $761;
  $764 = $758 | $762;
  $765 = _bitshift64Shl($731 | 0, $732 | 0, 2) | 0;
  $766 = getTempRet0() | 0;
  $767 = $765 & -858993460;
  $768 = $766 & -858993460;
  $769 = _bitshift64Lshr($731 | 0, $732 | 0, 2) | 0;
  $770 = getTempRet0() | 0;
  $771 = $769 & 858993459;
  $772 = $770 & 858993459;
  $773 = $767 | $771;
  $774 = $768 | $772;
  $775 = _bitshift64Shl($733 | 0, $734 | 0, 2) | 0;
  $776 = getTempRet0() | 0;
  $777 = $775 & -858993460;
  $778 = $776 & -858993460;
  $779 = _bitshift64Lshr($733 | 0, $734 | 0, 2) | 0;
  $780 = getTempRet0() | 0;
  $781 = $779 & 858993459;
  $782 = $780 & 858993459;
  $783 = $777 | $781;
  $784 = $778 | $782;
  $idxprom902 = $96 + 2 | 0;
  $arraydecay904 = 37360 + ($idxprom902 << 5) | 0;
  $785 = $579 ^ -1;
  $786 = $580 ^ -1;
  $787 = $619 ^ -1;
  $788 = $620 ^ -1;
  $789 = $577 ^ -1;
  $790 = $578 ^ -1;
  $791 = $arraydecay904;
  $792 = $791;
  $793 = HEAP32[$792 >> 2] | 0;
  $794 = $791 + 4 | 0;
  $795 = $794;
  $796 = HEAP32[$795 >> 2] | 0;
  $797 = $793 & $789;
  $798 = $796 & $790;
  $799 = $571 ^ $797;
  $800 = $572 ^ $798;
  $801 = $609 ^ -1;
  $802 = $610 ^ -1;
  $arrayidx924 = (37360 + ($idxprom902 << 5) | 0) + 16 | 0;
  $803 = $arrayidx924;
  $804 = $803;
  $805 = HEAP32[$804 >> 2] | 0;
  $806 = $803 + 4 | 0;
  $807 = $806;
  $808 = HEAP32[$807 >> 2] | 0;
  $809 = $805 & $801;
  $810 = $808 & $802;
  $811 = $589 ^ $809;
  $812 = $590 ^ $810;
  $813 = $573 & $799;
  $814 = $574 & $800;
  $815 = $813 ^ $793;
  $816 = $814 ^ $796;
  $817 = $599 & $811;
  $818 = $600 & $812;
  $819 = $817 ^ $805;
  $820 = $818 ^ $808;
  $821 = $577 & $785;
  $822 = $578 & $786;
  $823 = $799 ^ $821;
  $824 = $800 ^ $822;
  $825 = $609 & $787;
  $826 = $610 & $788;
  $827 = $811 ^ $825;
  $828 = $812 ^ $826;
  $829 = $573 ^ -1;
  $830 = $574 ^ -1;
  $831 = $577 & $829;
  $832 = $578 & $830;
  $833 = $831 ^ $785;
  $834 = $832 ^ $786;
  $835 = $599 ^ -1;
  $836 = $600 ^ -1;
  $837 = $609 & $835;
  $838 = $610 & $836;
  $839 = $837 ^ $787;
  $840 = $838 ^ $788;
  $841 = $823 & $577;
  $842 = $824 & $578;
  $843 = $573 ^ $841;
  $844 = $574 ^ $842;
  $845 = $827 & $609;
  $846 = $828 & $610;
  $847 = $599 ^ $845;
  $848 = $600 ^ $846;
  $849 = $831 ^ $579;
  $850 = $832 ^ $580;
  $851 = $849 & $823;
  $852 = $850 & $824;
  $853 = $851 ^ $577;
  $854 = $852 ^ $578;
  $855 = $837 ^ $619;
  $856 = $838 ^ $620;
  $857 = $855 & $827;
  $858 = $856 & $828;
  $859 = $857 ^ $609;
  $860 = $858 ^ $610;
  $861 = $833 | $843;
  $862 = $834 | $844;
  $863 = $861 ^ $823;
  $864 = $862 ^ $824;
  $865 = $839 | $847;
  $866 = $840 | $848;
  $867 = $865 ^ $827;
  $868 = $866 ^ $828;
  $869 = $853 & $843;
  $870 = $854 & $844;
  $871 = $869 ^ $833;
  $872 = $870 ^ $834;
  $873 = $859 & $847;
  $874 = $860 & $848;
  $875 = $873 ^ $839;
  $876 = $874 ^ $840;
  $877 = $863 & $815;
  $878 = $864 & $816;
  $879 = $877 ^ $843;
  $880 = $878 ^ $844;
  $881 = $867 & $819;
  $882 = $868 & $820;
  $883 = $881 ^ $847;
  $884 = $882 ^ $848;
  $885 = $853 ^ $815;
  $886 = $854 ^ $816;
  $887 = $859 ^ $819;
  $888 = $860 ^ $820;
  $889 = $879 ^ $867;
  $890 = $880 ^ $868;
  $891 = $883 ^ $885;
  $892 = $884 ^ $886;
  $893 = $871 ^ $863;
  $894 = $872 ^ $864;
  $895 = $893 ^ $887;
  $896 = $894 ^ $888;
  $897 = $875 ^ $863;
  $898 = $876 ^ $864;
  $899 = $891 ^ $863;
  $900 = $892 ^ $864;
  $901 = $895 ^ $879;
  $902 = $896 ^ $880;
  $903 = $889 ^ $885;
  $904 = $890 ^ $886;
  $905 = $903 ^ $897;
  $906 = $904 ^ $898;
  $907 = $889 ^ $871;
  $908 = $890 ^ $872;
  $909 = _bitshift64Shl($889 | 0, $890 | 0, 4) | 0;
  $910 = getTempRet0() | 0;
  $911 = $909 & -252645136;
  $912 = $910 & -252645136;
  $913 = _bitshift64Lshr($889 | 0, $890 | 0, 4) | 0;
  $914 = getTempRet0() | 0;
  $915 = $913 & 252645135;
  $916 = $914 & 252645135;
  $917 = $911 | $915;
  $918 = $912 | $916;
  $919 = _bitshift64Shl($891 | 0, $892 | 0, 4) | 0;
  $920 = getTempRet0() | 0;
  $921 = $919 & -252645136;
  $922 = $920 & -252645136;
  $923 = _bitshift64Lshr($891 | 0, $892 | 0, 4) | 0;
  $924 = getTempRet0() | 0;
  $925 = $923 & 252645135;
  $926 = $924 & 252645135;
  $927 = $921 | $925;
  $928 = $922 | $926;
  $929 = _bitshift64Shl($895 | 0, $896 | 0, 4) | 0;
  $930 = getTempRet0() | 0;
  $931 = $929 & -252645136;
  $932 = $930 & -252645136;
  $933 = _bitshift64Lshr($895 | 0, $896 | 0, 4) | 0;
  $934 = getTempRet0() | 0;
  $935 = $933 & 252645135;
  $936 = $934 & 252645135;
  $937 = $931 | $935;
  $938 = $932 | $936;
  $939 = _bitshift64Shl($897 | 0, $898 | 0, 4) | 0;
  $940 = getTempRet0() | 0;
  $941 = $939 & -252645136;
  $942 = $940 & -252645136;
  $943 = _bitshift64Lshr($897 | 0, $898 | 0, 4) | 0;
  $944 = getTempRet0() | 0;
  $945 = $943 & 252645135;
  $946 = $944 & 252645135;
  $947 = $941 | $945;
  $948 = $942 | $946;
  $949 = $743 ^ -1;
  $950 = $744 ^ -1;
  $951 = $783 ^ -1;
  $952 = $784 ^ -1;
  $953 = $741 ^ -1;
  $954 = $742 ^ -1;
  $arrayidx906$1 = (37360 + ($idxprom902 << 5) | 0) + 8 | 0;
  $955 = $arrayidx906$1;
  $956 = $955;
  $957 = HEAP32[$956 >> 2] | 0;
  $958 = $955 + 4 | 0;
  $959 = $958;
  $960 = HEAP32[$959 >> 2] | 0;
  $961 = $957 & $953;
  $962 = $960 & $954;
  $963 = $735 ^ $961;
  $964 = $736 ^ $962;
  $965 = $773 ^ -1;
  $966 = $774 ^ -1;
  $arrayidx924$1 = (37360 + ($idxprom902 << 5) | 0) + 24 | 0;
  $967 = $arrayidx924$1;
  $968 = $967;
  $969 = HEAP32[$968 >> 2] | 0;
  $970 = $967 + 4 | 0;
  $971 = $970;
  $972 = HEAP32[$971 >> 2] | 0;
  $973 = $969 & $965;
  $974 = $972 & $966;
  $975 = $753 ^ $973;
  $976 = $754 ^ $974;
  $977 = $737 & $963;
  $978 = $738 & $964;
  $979 = $977 ^ $957;
  $980 = $978 ^ $960;
  $981 = $763 & $975;
  $982 = $764 & $976;
  $983 = $981 ^ $969;
  $984 = $982 ^ $972;
  $985 = $741 & $949;
  $986 = $742 & $950;
  $987 = $963 ^ $985;
  $988 = $964 ^ $986;
  $989 = $773 & $951;
  $990 = $774 & $952;
  $991 = $975 ^ $989;
  $992 = $976 ^ $990;
  $993 = $737 ^ -1;
  $994 = $738 ^ -1;
  $995 = $741 & $993;
  $996 = $742 & $994;
  $997 = $995 ^ $949;
  $998 = $996 ^ $950;
  $999 = $763 ^ -1;
  $1000 = $764 ^ -1;
  $1001 = $773 & $999;
  $1002 = $774 & $1000;
  $1003 = $1001 ^ $951;
  $1004 = $1002 ^ $952;
  $1005 = $987 & $741;
  $1006 = $988 & $742;
  $1007 = $737 ^ $1005;
  $1008 = $738 ^ $1006;
  $1009 = $991 & $773;
  $1010 = $992 & $774;
  $1011 = $763 ^ $1009;
  $1012 = $764 ^ $1010;
  $1013 = $995 ^ $743;
  $1014 = $996 ^ $744;
  $1015 = $1013 & $987;
  $1016 = $1014 & $988;
  $1017 = $1015 ^ $741;
  $1018 = $1016 ^ $742;
  $1019 = $1001 ^ $783;
  $1020 = $1002 ^ $784;
  $1021 = $1019 & $991;
  $1022 = $1020 & $992;
  $1023 = $1021 ^ $773;
  $1024 = $1022 ^ $774;
  $1025 = $997 | $1007;
  $1026 = $998 | $1008;
  $1027 = $1025 ^ $987;
  $1028 = $1026 ^ $988;
  $1029 = $1003 | $1011;
  $1030 = $1004 | $1012;
  $1031 = $1029 ^ $991;
  $1032 = $1030 ^ $992;
  $1033 = $1017 & $1007;
  $1034 = $1018 & $1008;
  $1035 = $1033 ^ $997;
  $1036 = $1034 ^ $998;
  $1037 = $1023 & $1011;
  $1038 = $1024 & $1012;
  $1039 = $1037 ^ $1003;
  $1040 = $1038 ^ $1004;
  $1041 = $1027 & $979;
  $1042 = $1028 & $980;
  $1043 = $1041 ^ $1007;
  $1044 = $1042 ^ $1008;
  $1045 = $1031 & $983;
  $1046 = $1032 & $984;
  $1047 = $1045 ^ $1011;
  $1048 = $1046 ^ $1012;
  $1049 = $1017 ^ $979;
  $1050 = $1018 ^ $980;
  $1051 = $1023 ^ $983;
  $1052 = $1024 ^ $984;
  $1053 = $1043 ^ $1031;
  $1054 = $1044 ^ $1032;
  $1055 = $1047 ^ $1049;
  $1056 = $1048 ^ $1050;
  $1057 = $1035 ^ $1027;
  $1058 = $1036 ^ $1028;
  $1059 = $1057 ^ $1051;
  $1060 = $1058 ^ $1052;
  $1061 = $1039 ^ $1027;
  $1062 = $1040 ^ $1028;
  $1063 = $1055 ^ $1027;
  $1064 = $1056 ^ $1028;
  $1065 = $1059 ^ $1043;
  $1066 = $1060 ^ $1044;
  $1067 = $1053 ^ $1049;
  $1068 = $1054 ^ $1050;
  $1069 = $1067 ^ $1061;
  $1070 = $1068 ^ $1062;
  $1071 = $1053 ^ $1035;
  $1072 = $1054 ^ $1036;
  $1073 = _bitshift64Shl($1053 | 0, $1054 | 0, 4) | 0;
  $1074 = getTempRet0() | 0;
  $1075 = $1073 & -252645136;
  $1076 = $1074 & -252645136;
  $1077 = _bitshift64Lshr($1053 | 0, $1054 | 0, 4) | 0;
  $1078 = getTempRet0() | 0;
  $1079 = $1077 & 252645135;
  $1080 = $1078 & 252645135;
  $1081 = $1075 | $1079;
  $1082 = $1076 | $1080;
  $1083 = _bitshift64Shl($1055 | 0, $1056 | 0, 4) | 0;
  $1084 = getTempRet0() | 0;
  $1085 = $1083 & -252645136;
  $1086 = $1084 & -252645136;
  $1087 = _bitshift64Lshr($1055 | 0, $1056 | 0, 4) | 0;
  $1088 = getTempRet0() | 0;
  $1089 = $1087 & 252645135;
  $1090 = $1088 & 252645135;
  $1091 = $1085 | $1089;
  $1092 = $1086 | $1090;
  $1093 = _bitshift64Shl($1059 | 0, $1060 | 0, 4) | 0;
  $1094 = getTempRet0() | 0;
  $1095 = $1093 & -252645136;
  $1096 = $1094 & -252645136;
  $1097 = _bitshift64Lshr($1059 | 0, $1060 | 0, 4) | 0;
  $1098 = getTempRet0() | 0;
  $1099 = $1097 & 252645135;
  $1100 = $1098 & 252645135;
  $1101 = $1095 | $1099;
  $1102 = $1096 | $1100;
  $1103 = _bitshift64Shl($1061 | 0, $1062 | 0, 4) | 0;
  $1104 = getTempRet0() | 0;
  $1105 = $1103 & -252645136;
  $1106 = $1104 & -252645136;
  $1107 = _bitshift64Lshr($1061 | 0, $1062 | 0, 4) | 0;
  $1108 = getTempRet0() | 0;
  $1109 = $1107 & 252645135;
  $1110 = $1108 & 252645135;
  $1111 = $1105 | $1109;
  $1112 = $1106 | $1110;
  $idxprom1346 = $96 + 3 | 0;
  $arraydecay1348 = 37360 + ($idxprom1346 << 5) | 0;
  $1113 = $907 ^ -1;
  $1114 = $908 ^ -1;
  $1115 = $947 ^ -1;
  $1116 = $948 ^ -1;
  $1117 = $905 ^ -1;
  $1118 = $906 ^ -1;
  $1119 = $arraydecay1348;
  $1120 = $1119;
  $1121 = HEAP32[$1120 >> 2] | 0;
  $1122 = $1119 + 4 | 0;
  $1123 = $1122;
  $1124 = HEAP32[$1123 >> 2] | 0;
  $1125 = $1121 & $1117;
  $1126 = $1124 & $1118;
  $1127 = $899 ^ $1125;
  $1128 = $900 ^ $1126;
  $1129 = $937 ^ -1;
  $1130 = $938 ^ -1;
  $arrayidx1368 = (37360 + ($idxprom1346 << 5) | 0) + 16 | 0;
  $1131 = $arrayidx1368;
  $1132 = $1131;
  $1133 = HEAP32[$1132 >> 2] | 0;
  $1134 = $1131 + 4 | 0;
  $1135 = $1134;
  $1136 = HEAP32[$1135 >> 2] | 0;
  $1137 = $1133 & $1129;
  $1138 = $1136 & $1130;
  $1139 = $917 ^ $1137;
  $1140 = $918 ^ $1138;
  $1141 = $901 & $1127;
  $1142 = $902 & $1128;
  $1143 = $1141 ^ $1121;
  $1144 = $1142 ^ $1124;
  $1145 = $927 & $1139;
  $1146 = $928 & $1140;
  $1147 = $1145 ^ $1133;
  $1148 = $1146 ^ $1136;
  $1149 = $905 & $1113;
  $1150 = $906 & $1114;
  $1151 = $1127 ^ $1149;
  $1152 = $1128 ^ $1150;
  $1153 = $937 & $1115;
  $1154 = $938 & $1116;
  $1155 = $1139 ^ $1153;
  $1156 = $1140 ^ $1154;
  $1157 = $901 ^ -1;
  $1158 = $902 ^ -1;
  $1159 = $905 & $1157;
  $1160 = $906 & $1158;
  $1161 = $1159 ^ $1113;
  $1162 = $1160 ^ $1114;
  $1163 = $927 ^ -1;
  $1164 = $928 ^ -1;
  $1165 = $937 & $1163;
  $1166 = $938 & $1164;
  $1167 = $1165 ^ $1115;
  $1168 = $1166 ^ $1116;
  $1169 = $1151 & $905;
  $1170 = $1152 & $906;
  $1171 = $901 ^ $1169;
  $1172 = $902 ^ $1170;
  $1173 = $1155 & $937;
  $1174 = $1156 & $938;
  $1175 = $927 ^ $1173;
  $1176 = $928 ^ $1174;
  $1177 = $1159 ^ $907;
  $1178 = $1160 ^ $908;
  $1179 = $1177 & $1151;
  $1180 = $1178 & $1152;
  $1181 = $1179 ^ $905;
  $1182 = $1180 ^ $906;
  $1183 = $1165 ^ $947;
  $1184 = $1166 ^ $948;
  $1185 = $1183 & $1155;
  $1186 = $1184 & $1156;
  $1187 = $1185 ^ $937;
  $1188 = $1186 ^ $938;
  $1189 = $1161 | $1171;
  $1190 = $1162 | $1172;
  $1191 = $1189 ^ $1151;
  $1192 = $1190 ^ $1152;
  $1193 = $1167 | $1175;
  $1194 = $1168 | $1176;
  $1195 = $1193 ^ $1155;
  $1196 = $1194 ^ $1156;
  $1197 = $1181 & $1171;
  $1198 = $1182 & $1172;
  $1199 = $1197 ^ $1161;
  $1200 = $1198 ^ $1162;
  $1201 = $1187 & $1175;
  $1202 = $1188 & $1176;
  $1203 = $1201 ^ $1167;
  $1204 = $1202 ^ $1168;
  $1205 = $1191 & $1143;
  $1206 = $1192 & $1144;
  $1207 = $1205 ^ $1171;
  $1208 = $1206 ^ $1172;
  $1209 = $1195 & $1147;
  $1210 = $1196 & $1148;
  $1211 = $1209 ^ $1175;
  $1212 = $1210 ^ $1176;
  $1213 = $1181 ^ $1143;
  $1214 = $1182 ^ $1144;
  $1215 = $1187 ^ $1147;
  $1216 = $1188 ^ $1148;
  $1217 = $1207 ^ $1195;
  $1218 = $1208 ^ $1196;
  $1219 = $1211 ^ $1213;
  $1220 = $1212 ^ $1214;
  $1221 = $1199 ^ $1191;
  $1222 = $1200 ^ $1192;
  $1223 = $1221 ^ $1215;
  $1224 = $1222 ^ $1216;
  $1225 = $1203 ^ $1191;
  $1226 = $1204 ^ $1192;
  $1227 = $1219 ^ $1191;
  $1228 = $1220 ^ $1192;
  $1229 = $1223 ^ $1207;
  $1230 = $1224 ^ $1208;
  $1231 = $1217 ^ $1213;
  $1232 = $1218 ^ $1214;
  $1233 = $1231 ^ $1225;
  $1234 = $1232 ^ $1226;
  $1235 = $1217 ^ $1199;
  $1236 = $1218 ^ $1200;
  $1237 = _bitshift64Shl($1217 | 0, $1218 | 0, 8) | 0;
  $1238 = getTempRet0() | 0;
  $1239 = $1237 & -16711936;
  $1240 = $1238 & -16711936;
  $1241 = _bitshift64Lshr($1217 | 0, $1218 | 0, 8) | 0;
  $1242 = getTempRet0() | 0;
  $1243 = $1241 & 16711935;
  $1244 = $1242 & 16711935;
  $1245 = $1239 | $1243;
  $1246 = $1240 | $1244;
  $1247 = _bitshift64Shl($1219 | 0, $1220 | 0, 8) | 0;
  $1248 = getTempRet0() | 0;
  $1249 = $1247 & -16711936;
  $1250 = $1248 & -16711936;
  $1251 = _bitshift64Lshr($1219 | 0, $1220 | 0, 8) | 0;
  $1252 = getTempRet0() | 0;
  $1253 = $1251 & 16711935;
  $1254 = $1252 & 16711935;
  $1255 = $1249 | $1253;
  $1256 = $1250 | $1254;
  $1257 = _bitshift64Shl($1223 | 0, $1224 | 0, 8) | 0;
  $1258 = getTempRet0() | 0;
  $1259 = $1257 & -16711936;
  $1260 = $1258 & -16711936;
  $1261 = _bitshift64Lshr($1223 | 0, $1224 | 0, 8) | 0;
  $1262 = getTempRet0() | 0;
  $1263 = $1261 & 16711935;
  $1264 = $1262 & 16711935;
  $1265 = $1259 | $1263;
  $1266 = $1260 | $1264;
  $1267 = _bitshift64Shl($1225 | 0, $1226 | 0, 8) | 0;
  $1268 = getTempRet0() | 0;
  $1269 = $1267 & -16711936;
  $1270 = $1268 & -16711936;
  $1271 = _bitshift64Lshr($1225 | 0, $1226 | 0, 8) | 0;
  $1272 = getTempRet0() | 0;
  $1273 = $1271 & 16711935;
  $1274 = $1272 & 16711935;
  $1275 = $1269 | $1273;
  $1276 = $1270 | $1274;
  $1277 = $1071 ^ -1;
  $1278 = $1072 ^ -1;
  $1279 = $1111 ^ -1;
  $1280 = $1112 ^ -1;
  $1281 = $1069 ^ -1;
  $1282 = $1070 ^ -1;
  $arrayidx1350$1 = (37360 + ($idxprom1346 << 5) | 0) + 8 | 0;
  $1283 = $arrayidx1350$1;
  $1284 = $1283;
  $1285 = HEAP32[$1284 >> 2] | 0;
  $1286 = $1283 + 4 | 0;
  $1287 = $1286;
  $1288 = HEAP32[$1287 >> 2] | 0;
  $1289 = $1285 & $1281;
  $1290 = $1288 & $1282;
  $1291 = $1063 ^ $1289;
  $1292 = $1064 ^ $1290;
  $1293 = $1101 ^ -1;
  $1294 = $1102 ^ -1;
  $arrayidx1368$1 = (37360 + ($idxprom1346 << 5) | 0) + 24 | 0;
  $1295 = $arrayidx1368$1;
  $1296 = $1295;
  $1297 = HEAP32[$1296 >> 2] | 0;
  $1298 = $1295 + 4 | 0;
  $1299 = $1298;
  $1300 = HEAP32[$1299 >> 2] | 0;
  $1301 = $1297 & $1293;
  $1302 = $1300 & $1294;
  $1303 = $1081 ^ $1301;
  $1304 = $1082 ^ $1302;
  $1305 = $1065 & $1291;
  $1306 = $1066 & $1292;
  $1307 = $1305 ^ $1285;
  $1308 = $1306 ^ $1288;
  $1309 = $1091 & $1303;
  $1310 = $1092 & $1304;
  $1311 = $1309 ^ $1297;
  $1312 = $1310 ^ $1300;
  $1313 = $1069 & $1277;
  $1314 = $1070 & $1278;
  $1315 = $1291 ^ $1313;
  $1316 = $1292 ^ $1314;
  $1317 = $1101 & $1279;
  $1318 = $1102 & $1280;
  $1319 = $1303 ^ $1317;
  $1320 = $1304 ^ $1318;
  $1321 = $1065 ^ -1;
  $1322 = $1066 ^ -1;
  $1323 = $1069 & $1321;
  $1324 = $1070 & $1322;
  $1325 = $1323 ^ $1277;
  $1326 = $1324 ^ $1278;
  $1327 = $1091 ^ -1;
  $1328 = $1092 ^ -1;
  $1329 = $1101 & $1327;
  $1330 = $1102 & $1328;
  $1331 = $1329 ^ $1279;
  $1332 = $1330 ^ $1280;
  $1333 = $1315 & $1069;
  $1334 = $1316 & $1070;
  $1335 = $1065 ^ $1333;
  $1336 = $1066 ^ $1334;
  $1337 = $1319 & $1101;
  $1338 = $1320 & $1102;
  $1339 = $1091 ^ $1337;
  $1340 = $1092 ^ $1338;
  $1341 = $1323 ^ $1071;
  $1342 = $1324 ^ $1072;
  $1343 = $1341 & $1315;
  $1344 = $1342 & $1316;
  $1345 = $1343 ^ $1069;
  $1346 = $1344 ^ $1070;
  $1347 = $1329 ^ $1111;
  $1348 = $1330 ^ $1112;
  $1349 = $1347 & $1319;
  $1350 = $1348 & $1320;
  $1351 = $1349 ^ $1101;
  $1352 = $1350 ^ $1102;
  $1353 = $1325 | $1335;
  $1354 = $1326 | $1336;
  $1355 = $1353 ^ $1315;
  $1356 = $1354 ^ $1316;
  $1357 = $1331 | $1339;
  $1358 = $1332 | $1340;
  $1359 = $1357 ^ $1319;
  $1360 = $1358 ^ $1320;
  $1361 = $1345 & $1335;
  $1362 = $1346 & $1336;
  $1363 = $1361 ^ $1325;
  $1364 = $1362 ^ $1326;
  $1365 = $1351 & $1339;
  $1366 = $1352 & $1340;
  $1367 = $1365 ^ $1331;
  $1368 = $1366 ^ $1332;
  $1369 = $1355 & $1307;
  $1370 = $1356 & $1308;
  $1371 = $1369 ^ $1335;
  $1372 = $1370 ^ $1336;
  $1373 = $1359 & $1311;
  $1374 = $1360 & $1312;
  $1375 = $1373 ^ $1339;
  $1376 = $1374 ^ $1340;
  $1377 = $1345 ^ $1307;
  $1378 = $1346 ^ $1308;
  $1379 = $1351 ^ $1311;
  $1380 = $1352 ^ $1312;
  $1381 = $1371 ^ $1359;
  $1382 = $1372 ^ $1360;
  $1383 = $1375 ^ $1377;
  $1384 = $1376 ^ $1378;
  $1385 = $1363 ^ $1355;
  $1386 = $1364 ^ $1356;
  $1387 = $1385 ^ $1379;
  $1388 = $1386 ^ $1380;
  $1389 = $1367 ^ $1355;
  $1390 = $1368 ^ $1356;
  $1391 = $1383 ^ $1355;
  $1392 = $1384 ^ $1356;
  $1393 = $1387 ^ $1371;
  $1394 = $1388 ^ $1372;
  $1395 = $1381 ^ $1377;
  $1396 = $1382 ^ $1378;
  $1397 = $1395 ^ $1389;
  $1398 = $1396 ^ $1390;
  $1399 = $1381 ^ $1363;
  $1400 = $1382 ^ $1364;
  $1401 = _bitshift64Shl($1381 | 0, $1382 | 0, 8) | 0;
  $1402 = getTempRet0() | 0;
  $1403 = $1401 & -16711936;
  $1404 = $1402 & -16711936;
  $1405 = _bitshift64Lshr($1381 | 0, $1382 | 0, 8) | 0;
  $1406 = getTempRet0() | 0;
  $1407 = $1405 & 16711935;
  $1408 = $1406 & 16711935;
  $1409 = $1403 | $1407;
  $1410 = $1404 | $1408;
  $1411 = _bitshift64Shl($1383 | 0, $1384 | 0, 8) | 0;
  $1412 = getTempRet0() | 0;
  $1413 = $1411 & -16711936;
  $1414 = $1412 & -16711936;
  $1415 = _bitshift64Lshr($1383 | 0, $1384 | 0, 8) | 0;
  $1416 = getTempRet0() | 0;
  $1417 = $1415 & 16711935;
  $1418 = $1416 & 16711935;
  $1419 = $1413 | $1417;
  $1420 = $1414 | $1418;
  $1421 = _bitshift64Shl($1387 | 0, $1388 | 0, 8) | 0;
  $1422 = getTempRet0() | 0;
  $1423 = $1421 & -16711936;
  $1424 = $1422 & -16711936;
  $1425 = _bitshift64Lshr($1387 | 0, $1388 | 0, 8) | 0;
  $1426 = getTempRet0() | 0;
  $1427 = $1425 & 16711935;
  $1428 = $1426 & 16711935;
  $1429 = $1423 | $1427;
  $1430 = $1424 | $1428;
  $1431 = _bitshift64Shl($1389 | 0, $1390 | 0, 8) | 0;
  $1432 = getTempRet0() | 0;
  $1433 = $1431 & -16711936;
  $1434 = $1432 & -16711936;
  $1435 = _bitshift64Lshr($1389 | 0, $1390 | 0, 8) | 0;
  $1436 = getTempRet0() | 0;
  $1437 = $1435 & 16711935;
  $1438 = $1436 & 16711935;
  $1439 = $1433 | $1437;
  $1440 = $1434 | $1438;
  $idxprom1790 = $96 + 4 | 0;
  $arraydecay1792 = 37360 + ($idxprom1790 << 5) | 0;
  $1441 = $1235 ^ -1;
  $1442 = $1236 ^ -1;
  $1443 = $1275 ^ -1;
  $1444 = $1276 ^ -1;
  $1445 = $1233 ^ -1;
  $1446 = $1234 ^ -1;
  $1447 = $arraydecay1792;
  $1448 = $1447;
  $1449 = HEAP32[$1448 >> 2] | 0;
  $1450 = $1447 + 4 | 0;
  $1451 = $1450;
  $1452 = HEAP32[$1451 >> 2] | 0;
  $1453 = $1449 & $1445;
  $1454 = $1452 & $1446;
  $1455 = $1227 ^ $1453;
  $1456 = $1228 ^ $1454;
  $1457 = $1265 ^ -1;
  $1458 = $1266 ^ -1;
  $arrayidx1812 = (37360 + ($idxprom1790 << 5) | 0) + 16 | 0;
  $1459 = $arrayidx1812;
  $1460 = $1459;
  $1461 = HEAP32[$1460 >> 2] | 0;
  $1462 = $1459 + 4 | 0;
  $1463 = $1462;
  $1464 = HEAP32[$1463 >> 2] | 0;
  $1465 = $1461 & $1457;
  $1466 = $1464 & $1458;
  $1467 = $1245 ^ $1465;
  $1468 = $1246 ^ $1466;
  $1469 = $1229 & $1455;
  $1470 = $1230 & $1456;
  $1471 = $1469 ^ $1449;
  $1472 = $1470 ^ $1452;
  $1473 = $1255 & $1467;
  $1474 = $1256 & $1468;
  $1475 = $1473 ^ $1461;
  $1476 = $1474 ^ $1464;
  $1477 = $1233 & $1441;
  $1478 = $1234 & $1442;
  $1479 = $1455 ^ $1477;
  $1480 = $1456 ^ $1478;
  $1481 = $1265 & $1443;
  $1482 = $1266 & $1444;
  $1483 = $1467 ^ $1481;
  $1484 = $1468 ^ $1482;
  $1485 = $1229 ^ -1;
  $1486 = $1230 ^ -1;
  $1487 = $1233 & $1485;
  $1488 = $1234 & $1486;
  $1489 = $1487 ^ $1441;
  $1490 = $1488 ^ $1442;
  $1491 = $1255 ^ -1;
  $1492 = $1256 ^ -1;
  $1493 = $1265 & $1491;
  $1494 = $1266 & $1492;
  $1495 = $1493 ^ $1443;
  $1496 = $1494 ^ $1444;
  $1497 = $1479 & $1233;
  $1498 = $1480 & $1234;
  $1499 = $1229 ^ $1497;
  $1500 = $1230 ^ $1498;
  $1501 = $1483 & $1265;
  $1502 = $1484 & $1266;
  $1503 = $1255 ^ $1501;
  $1504 = $1256 ^ $1502;
  $1505 = $1487 ^ $1235;
  $1506 = $1488 ^ $1236;
  $1507 = $1505 & $1479;
  $1508 = $1506 & $1480;
  $1509 = $1507 ^ $1233;
  $1510 = $1508 ^ $1234;
  $1511 = $1493 ^ $1275;
  $1512 = $1494 ^ $1276;
  $1513 = $1511 & $1483;
  $1514 = $1512 & $1484;
  $1515 = $1513 ^ $1265;
  $1516 = $1514 ^ $1266;
  $1517 = $1489 | $1499;
  $1518 = $1490 | $1500;
  $1519 = $1517 ^ $1479;
  $1520 = $1518 ^ $1480;
  $1521 = $1495 | $1503;
  $1522 = $1496 | $1504;
  $1523 = $1521 ^ $1483;
  $1524 = $1522 ^ $1484;
  $1525 = $1509 & $1499;
  $1526 = $1510 & $1500;
  $1527 = $1525 ^ $1489;
  $1528 = $1526 ^ $1490;
  $1529 = $1515 & $1503;
  $1530 = $1516 & $1504;
  $1531 = $1529 ^ $1495;
  $1532 = $1530 ^ $1496;
  $1533 = $1519 & $1471;
  $1534 = $1520 & $1472;
  $1535 = $1533 ^ $1499;
  $1536 = $1534 ^ $1500;
  $1537 = $1523 & $1475;
  $1538 = $1524 & $1476;
  $1539 = $1537 ^ $1503;
  $1540 = $1538 ^ $1504;
  $1541 = $1509 ^ $1471;
  $1542 = $1510 ^ $1472;
  $1543 = $1515 ^ $1475;
  $1544 = $1516 ^ $1476;
  $1545 = $1535 ^ $1523;
  $1546 = $1536 ^ $1524;
  $1547 = $1539 ^ $1541;
  $1548 = $1540 ^ $1542;
  $1549 = $1527 ^ $1519;
  $1550 = $1528 ^ $1520;
  $1551 = $1549 ^ $1543;
  $1552 = $1550 ^ $1544;
  $1553 = $1531 ^ $1519;
  $1554 = $1532 ^ $1520;
  $1555 = $1547 ^ $1519;
  $1556 = $1548 ^ $1520;
  $1557 = $1551 ^ $1535;
  $1558 = $1552 ^ $1536;
  $1559 = $1545 ^ $1541;
  $1560 = $1546 ^ $1542;
  $1561 = $1559 ^ $1553;
  $1562 = $1560 ^ $1554;
  $1563 = $1545 ^ $1527;
  $1564 = $1546 ^ $1528;
  $1565 = _bitshift64Shl($1545 | 0, $1546 | 0, 16) | 0;
  $1566 = getTempRet0() | 0;
  $1567 = $1565 & -65536;
  $1568 = $1566 & -65536;
  $1569 = _bitshift64Lshr($1545 | 0, $1546 | 0, 16) | 0;
  $1570 = getTempRet0() | 0;
  $1571 = $1569 & 65535;
  $1572 = $1570 & 65535;
  $1573 = $1567 | $1571;
  $1574 = $1568 | $1572;
  $1575 = _bitshift64Shl($1547 | 0, $1548 | 0, 16) | 0;
  $1576 = getTempRet0() | 0;
  $1577 = $1575 & -65536;
  $1578 = $1576 & -65536;
  $1579 = _bitshift64Lshr($1547 | 0, $1548 | 0, 16) | 0;
  $1580 = getTempRet0() | 0;
  $1581 = $1579 & 65535;
  $1582 = $1580 & 65535;
  $1583 = $1577 | $1581;
  $1584 = $1578 | $1582;
  $1585 = _bitshift64Shl($1551 | 0, $1552 | 0, 16) | 0;
  $1586 = getTempRet0() | 0;
  $1587 = $1585 & -65536;
  $1588 = $1586 & -65536;
  $1589 = _bitshift64Lshr($1551 | 0, $1552 | 0, 16) | 0;
  $1590 = getTempRet0() | 0;
  $1591 = $1589 & 65535;
  $1592 = $1590 & 65535;
  $1593 = $1587 | $1591;
  $1594 = $1588 | $1592;
  $1595 = _bitshift64Shl($1553 | 0, $1554 | 0, 16) | 0;
  $1596 = getTempRet0() | 0;
  $1597 = $1595 & -65536;
  $1598 = $1596 & -65536;
  $1599 = _bitshift64Lshr($1553 | 0, $1554 | 0, 16) | 0;
  $1600 = getTempRet0() | 0;
  $1601 = $1599 & 65535;
  $1602 = $1600 & 65535;
  $1603 = $1597 | $1601;
  $1604 = $1598 | $1602;
  $1605 = $1399 ^ -1;
  $1606 = $1400 ^ -1;
  $1607 = $1439 ^ -1;
  $1608 = $1440 ^ -1;
  $1609 = $1397 ^ -1;
  $1610 = $1398 ^ -1;
  $arrayidx1794$1 = (37360 + ($idxprom1790 << 5) | 0) + 8 | 0;
  $1611 = $arrayidx1794$1;
  $1612 = $1611;
  $1613 = HEAP32[$1612 >> 2] | 0;
  $1614 = $1611 + 4 | 0;
  $1615 = $1614;
  $1616 = HEAP32[$1615 >> 2] | 0;
  $1617 = $1613 & $1609;
  $1618 = $1616 & $1610;
  $1619 = $1391 ^ $1617;
  $1620 = $1392 ^ $1618;
  $1621 = $1429 ^ -1;
  $1622 = $1430 ^ -1;
  $arrayidx1812$1 = (37360 + ($idxprom1790 << 5) | 0) + 24 | 0;
  $1623 = $arrayidx1812$1;
  $1624 = $1623;
  $1625 = HEAP32[$1624 >> 2] | 0;
  $1626 = $1623 + 4 | 0;
  $1627 = $1626;
  $1628 = HEAP32[$1627 >> 2] | 0;
  $1629 = $1625 & $1621;
  $1630 = $1628 & $1622;
  $1631 = $1409 ^ $1629;
  $1632 = $1410 ^ $1630;
  $1633 = $1393 & $1619;
  $1634 = $1394 & $1620;
  $1635 = $1633 ^ $1613;
  $1636 = $1634 ^ $1616;
  $1637 = $1419 & $1631;
  $1638 = $1420 & $1632;
  $1639 = $1637 ^ $1625;
  $1640 = $1638 ^ $1628;
  $1641 = $1397 & $1605;
  $1642 = $1398 & $1606;
  $1643 = $1619 ^ $1641;
  $1644 = $1620 ^ $1642;
  $1645 = $1429 & $1607;
  $1646 = $1430 & $1608;
  $1647 = $1631 ^ $1645;
  $1648 = $1632 ^ $1646;
  $1649 = $1393 ^ -1;
  $1650 = $1394 ^ -1;
  $1651 = $1397 & $1649;
  $1652 = $1398 & $1650;
  $1653 = $1651 ^ $1605;
  $1654 = $1652 ^ $1606;
  $1655 = $1419 ^ -1;
  $1656 = $1420 ^ -1;
  $1657 = $1429 & $1655;
  $1658 = $1430 & $1656;
  $1659 = $1657 ^ $1607;
  $1660 = $1658 ^ $1608;
  $1661 = $1643 & $1397;
  $1662 = $1644 & $1398;
  $1663 = $1393 ^ $1661;
  $1664 = $1394 ^ $1662;
  $1665 = $1647 & $1429;
  $1666 = $1648 & $1430;
  $1667 = $1419 ^ $1665;
  $1668 = $1420 ^ $1666;
  $1669 = $1651 ^ $1399;
  $1670 = $1652 ^ $1400;
  $1671 = $1669 & $1643;
  $1672 = $1670 & $1644;
  $1673 = $1671 ^ $1397;
  $1674 = $1672 ^ $1398;
  $1675 = $1657 ^ $1439;
  $1676 = $1658 ^ $1440;
  $1677 = $1675 & $1647;
  $1678 = $1676 & $1648;
  $1679 = $1677 ^ $1429;
  $1680 = $1678 ^ $1430;
  $1681 = $1653 | $1663;
  $1682 = $1654 | $1664;
  $1683 = $1681 ^ $1643;
  $1684 = $1682 ^ $1644;
  $1685 = $1659 | $1667;
  $1686 = $1660 | $1668;
  $1687 = $1685 ^ $1647;
  $1688 = $1686 ^ $1648;
  $1689 = $1673 & $1663;
  $1690 = $1674 & $1664;
  $1691 = $1689 ^ $1653;
  $1692 = $1690 ^ $1654;
  $1693 = $1679 & $1667;
  $1694 = $1680 & $1668;
  $1695 = $1693 ^ $1659;
  $1696 = $1694 ^ $1660;
  $1697 = $1683 & $1635;
  $1698 = $1684 & $1636;
  $1699 = $1697 ^ $1663;
  $1700 = $1698 ^ $1664;
  $1701 = $1687 & $1639;
  $1702 = $1688 & $1640;
  $1703 = $1701 ^ $1667;
  $1704 = $1702 ^ $1668;
  $1705 = $1673 ^ $1635;
  $1706 = $1674 ^ $1636;
  $1707 = $1679 ^ $1639;
  $1708 = $1680 ^ $1640;
  $1709 = $1699 ^ $1687;
  $1710 = $1700 ^ $1688;
  $1711 = $1703 ^ $1705;
  $1712 = $1704 ^ $1706;
  $1713 = $1691 ^ $1683;
  $1714 = $1692 ^ $1684;
  $1715 = $1713 ^ $1707;
  $1716 = $1714 ^ $1708;
  $1717 = $1695 ^ $1683;
  $1718 = $1696 ^ $1684;
  $1719 = $1711 ^ $1683;
  $1720 = $1712 ^ $1684;
  $1721 = $1715 ^ $1699;
  $1722 = $1716 ^ $1700;
  $1723 = $1709 ^ $1705;
  $1724 = $1710 ^ $1706;
  $1725 = $1723 ^ $1717;
  $1726 = $1724 ^ $1718;
  $1727 = $1709 ^ $1691;
  $1728 = $1710 ^ $1692;
  $1729 = _bitshift64Shl($1709 | 0, $1710 | 0, 16) | 0;
  $1730 = getTempRet0() | 0;
  $1731 = $1729 & -65536;
  $1732 = $1730 & -65536;
  $1733 = _bitshift64Lshr($1709 | 0, $1710 | 0, 16) | 0;
  $1734 = getTempRet0() | 0;
  $1735 = $1733 & 65535;
  $1736 = $1734 & 65535;
  $1737 = $1731 | $1735;
  $1738 = $1732 | $1736;
  $1739 = _bitshift64Shl($1711 | 0, $1712 | 0, 16) | 0;
  $1740 = getTempRet0() | 0;
  $1741 = $1739 & -65536;
  $1742 = $1740 & -65536;
  $1743 = _bitshift64Lshr($1711 | 0, $1712 | 0, 16) | 0;
  $1744 = getTempRet0() | 0;
  $1745 = $1743 & 65535;
  $1746 = $1744 & 65535;
  $1747 = $1741 | $1745;
  $1748 = $1742 | $1746;
  $1749 = _bitshift64Shl($1715 | 0, $1716 | 0, 16) | 0;
  $1750 = getTempRet0() | 0;
  $1751 = $1749 & -65536;
  $1752 = $1750 & -65536;
  $1753 = _bitshift64Lshr($1715 | 0, $1716 | 0, 16) | 0;
  $1754 = getTempRet0() | 0;
  $1755 = $1753 & 65535;
  $1756 = $1754 & 65535;
  $1757 = $1751 | $1755;
  $1758 = $1752 | $1756;
  $1759 = _bitshift64Shl($1717 | 0, $1718 | 0, 16) | 0;
  $1760 = getTempRet0() | 0;
  $1761 = $1759 & -65536;
  $1762 = $1760 & -65536;
  $1763 = _bitshift64Lshr($1717 | 0, $1718 | 0, 16) | 0;
  $1764 = getTempRet0() | 0;
  $1765 = $1763 & 65535;
  $1766 = $1764 & 65535;
  $1767 = $1761 | $1765;
  $1768 = $1762 | $1766;
  $idxprom2234 = $96 + 5 | 0;
  $arraydecay2236 = 37360 + ($idxprom2234 << 5) | 0;
  $1769 = $1563 ^ -1;
  $1770 = $1564 ^ -1;
  $1771 = $1603 ^ -1;
  $1772 = $1604 ^ -1;
  $1773 = $1561 ^ -1;
  $1774 = $1562 ^ -1;
  $1775 = $arraydecay2236;
  $1776 = $1775;
  $1777 = HEAP32[$1776 >> 2] | 0;
  $1778 = $1775 + 4 | 0;
  $1779 = $1778;
  $1780 = HEAP32[$1779 >> 2] | 0;
  $1781 = $1777 & $1773;
  $1782 = $1780 & $1774;
  $1783 = $1555 ^ $1781;
  $1784 = $1556 ^ $1782;
  $1785 = $1593 ^ -1;
  $1786 = $1594 ^ -1;
  $arrayidx2256 = (37360 + ($idxprom2234 << 5) | 0) + 16 | 0;
  $1787 = $arrayidx2256;
  $1788 = $1787;
  $1789 = HEAP32[$1788 >> 2] | 0;
  $1790 = $1787 + 4 | 0;
  $1791 = $1790;
  $1792 = HEAP32[$1791 >> 2] | 0;
  $1793 = $1789 & $1785;
  $1794 = $1792 & $1786;
  $1795 = $1573 ^ $1793;
  $1796 = $1574 ^ $1794;
  $1797 = $1557 & $1783;
  $1798 = $1558 & $1784;
  $1799 = $1797 ^ $1777;
  $1800 = $1798 ^ $1780;
  $1801 = $1583 & $1795;
  $1802 = $1584 & $1796;
  $1803 = $1801 ^ $1789;
  $1804 = $1802 ^ $1792;
  $1805 = $1561 & $1769;
  $1806 = $1562 & $1770;
  $1807 = $1783 ^ $1805;
  $1808 = $1784 ^ $1806;
  $1809 = $1593 & $1771;
  $1810 = $1594 & $1772;
  $1811 = $1795 ^ $1809;
  $1812 = $1796 ^ $1810;
  $1813 = $1557 ^ -1;
  $1814 = $1558 ^ -1;
  $1815 = $1561 & $1813;
  $1816 = $1562 & $1814;
  $1817 = $1815 ^ $1769;
  $1818 = $1816 ^ $1770;
  $1819 = $1583 ^ -1;
  $1820 = $1584 ^ -1;
  $1821 = $1593 & $1819;
  $1822 = $1594 & $1820;
  $1823 = $1821 ^ $1771;
  $1824 = $1822 ^ $1772;
  $1825 = $1807 & $1561;
  $1826 = $1808 & $1562;
  $1827 = $1557 ^ $1825;
  $1828 = $1558 ^ $1826;
  $1829 = $1811 & $1593;
  $1830 = $1812 & $1594;
  $1831 = $1583 ^ $1829;
  $1832 = $1584 ^ $1830;
  $1833 = $1815 ^ $1563;
  $1834 = $1816 ^ $1564;
  $1835 = $1833 & $1807;
  $1836 = $1834 & $1808;
  $1837 = $1835 ^ $1561;
  $1838 = $1836 ^ $1562;
  $1839 = $1821 ^ $1603;
  $1840 = $1822 ^ $1604;
  $1841 = $1839 & $1811;
  $1842 = $1840 & $1812;
  $1843 = $1841 ^ $1593;
  $1844 = $1842 ^ $1594;
  $1845 = $1817 | $1827;
  $1846 = $1818 | $1828;
  $1847 = $1845 ^ $1807;
  $1848 = $1846 ^ $1808;
  $1849 = $1823 | $1831;
  $1850 = $1824 | $1832;
  $1851 = $1849 ^ $1811;
  $1852 = $1850 ^ $1812;
  $1853 = $1837 & $1827;
  $1854 = $1838 & $1828;
  $1855 = $1853 ^ $1817;
  $1856 = $1854 ^ $1818;
  $1857 = $1843 & $1831;
  $1858 = $1844 & $1832;
  $1859 = $1857 ^ $1823;
  $1860 = $1858 ^ $1824;
  $1861 = $1847 & $1799;
  $1862 = $1848 & $1800;
  $1863 = $1861 ^ $1827;
  $1864 = $1862 ^ $1828;
  $1865 = $1851 & $1803;
  $1866 = $1852 & $1804;
  $1867 = $1865 ^ $1831;
  $1868 = $1866 ^ $1832;
  $1869 = $1837 ^ $1799;
  $1870 = $1838 ^ $1800;
  $1871 = $1843 ^ $1803;
  $1872 = $1844 ^ $1804;
  $1873 = $1863 ^ $1851;
  $1874 = $1864 ^ $1852;
  $1875 = $1867 ^ $1869;
  $1876 = $1868 ^ $1870;
  $1877 = $1855 ^ $1847;
  $1878 = $1856 ^ $1848;
  $1879 = $1877 ^ $1871;
  $1880 = $1878 ^ $1872;
  $1881 = $1859 ^ $1847;
  $1882 = $1860 ^ $1848;
  $1883 = $1875 ^ $1847;
  $1884 = $1876 ^ $1848;
  $1885 = $1879 ^ $1863;
  $1886 = $1880 ^ $1864;
  $1887 = $1873 ^ $1869;
  $1888 = $1874 ^ $1870;
  $1889 = $1887 ^ $1881;
  $1890 = $1888 ^ $1882;
  $1891 = $1873 ^ $1855;
  $1892 = $1874 ^ $1856;
  $1893 = $1727 ^ -1;
  $1894 = $1728 ^ -1;
  $1895 = $1767 ^ -1;
  $1896 = $1768 ^ -1;
  $1897 = $1725 ^ -1;
  $1898 = $1726 ^ -1;
  $arrayidx2238$1 = (37360 + ($idxprom2234 << 5) | 0) + 8 | 0;
  $1899 = $arrayidx2238$1;
  $1900 = $1899;
  $1901 = HEAP32[$1900 >> 2] | 0;
  $1902 = $1899 + 4 | 0;
  $1903 = $1902;
  $1904 = HEAP32[$1903 >> 2] | 0;
  $1905 = $1901 & $1897;
  $1906 = $1904 & $1898;
  $1907 = $1719 ^ $1905;
  $1908 = $1720 ^ $1906;
  $1909 = $1757 ^ -1;
  $1910 = $1758 ^ -1;
  $arrayidx2256$1 = (37360 + ($idxprom2234 << 5) | 0) + 24 | 0;
  $1911 = $arrayidx2256$1;
  $1912 = $1911;
  $1913 = HEAP32[$1912 >> 2] | 0;
  $1914 = $1911 + 4 | 0;
  $1915 = $1914;
  $1916 = HEAP32[$1915 >> 2] | 0;
  $1917 = $1913 & $1909;
  $1918 = $1916 & $1910;
  $1919 = $1737 ^ $1917;
  $1920 = $1738 ^ $1918;
  $1921 = $1721 & $1907;
  $1922 = $1722 & $1908;
  $1923 = $1921 ^ $1901;
  $1924 = $1922 ^ $1904;
  $1925 = $1747 & $1919;
  $1926 = $1748 & $1920;
  $1927 = $1925 ^ $1913;
  $1928 = $1926 ^ $1916;
  $1929 = $1725 & $1893;
  $1930 = $1726 & $1894;
  $1931 = $1907 ^ $1929;
  $1932 = $1908 ^ $1930;
  $1933 = $1757 & $1895;
  $1934 = $1758 & $1896;
  $1935 = $1919 ^ $1933;
  $1936 = $1920 ^ $1934;
  $1937 = $1721 ^ -1;
  $1938 = $1722 ^ -1;
  $1939 = $1725 & $1937;
  $1940 = $1726 & $1938;
  $1941 = $1939 ^ $1893;
  $1942 = $1940 ^ $1894;
  $1943 = $1747 ^ -1;
  $1944 = $1748 ^ -1;
  $1945 = $1757 & $1943;
  $1946 = $1758 & $1944;
  $1947 = $1945 ^ $1895;
  $1948 = $1946 ^ $1896;
  $1949 = $1931 & $1725;
  $1950 = $1932 & $1726;
  $1951 = $1721 ^ $1949;
  $1952 = $1722 ^ $1950;
  $1953 = $1935 & $1757;
  $1954 = $1936 & $1758;
  $1955 = $1747 ^ $1953;
  $1956 = $1748 ^ $1954;
  $1957 = $1939 ^ $1727;
  $1958 = $1940 ^ $1728;
  $1959 = $1957 & $1931;
  $1960 = $1958 & $1932;
  $1961 = $1959 ^ $1725;
  $1962 = $1960 ^ $1726;
  $1963 = $1945 ^ $1767;
  $1964 = $1946 ^ $1768;
  $1965 = $1963 & $1935;
  $1966 = $1964 & $1936;
  $1967 = $1965 ^ $1757;
  $1968 = $1966 ^ $1758;
  $1969 = $1941 | $1951;
  $1970 = $1942 | $1952;
  $1971 = $1969 ^ $1931;
  $1972 = $1970 ^ $1932;
  $1973 = $1947 | $1955;
  $1974 = $1948 | $1956;
  $1975 = $1973 ^ $1935;
  $1976 = $1974 ^ $1936;
  $1977 = $1961 & $1951;
  $1978 = $1962 & $1952;
  $1979 = $1977 ^ $1941;
  $1980 = $1978 ^ $1942;
  $1981 = $1967 & $1955;
  $1982 = $1968 & $1956;
  $1983 = $1981 ^ $1947;
  $1984 = $1982 ^ $1948;
  $1985 = $1971 & $1923;
  $1986 = $1972 & $1924;
  $1987 = $1985 ^ $1951;
  $1988 = $1986 ^ $1952;
  $1989 = $1975 & $1927;
  $1990 = $1976 & $1928;
  $1991 = $1989 ^ $1955;
  $1992 = $1990 ^ $1956;
  $1993 = $1961 ^ $1923;
  $1994 = $1962 ^ $1924;
  $1995 = $1967 ^ $1927;
  $1996 = $1968 ^ $1928;
  $1997 = $1987 ^ $1975;
  $1998 = $1988 ^ $1976;
  $1999 = $1991 ^ $1993;
  $2000 = $1992 ^ $1994;
  $2001 = $1979 ^ $1971;
  $2002 = $1980 ^ $1972;
  $2003 = $2001 ^ $1995;
  $2004 = $2002 ^ $1996;
  $2005 = $1983 ^ $1971;
  $2006 = $1984 ^ $1972;
  $2007 = $1999 ^ $1971;
  $2008 = $2000 ^ $1972;
  $2009 = $2003 ^ $1987;
  $2010 = $2004 ^ $1988;
  $2011 = $1997 ^ $1993;
  $2012 = $1998 ^ $1994;
  $2013 = $2011 ^ $2005;
  $2014 = $2012 ^ $2006;
  $2015 = $1997 ^ $1979;
  $2016 = $1998 ^ $1980;
  $idxprom2670 = $96 + 6 | 0;
  $arraydecay2672 = 37360 + ($idxprom2670 << 5) | 0;
  $2017 = $1891 ^ -1;
  $2018 = $1892 ^ -1;
  $2019 = $1882 ^ -1;
  $2020 = $1881 ^ -1;
  $2021 = $1889 ^ -1;
  $2022 = $1890 ^ -1;
  $2023 = $arraydecay2672;
  $2024 = $2023;
  $2025 = HEAP32[$2024 >> 2] | 0;
  $2026 = $2023 + 4 | 0;
  $2027 = $2026;
  $2028 = HEAP32[$2027 >> 2] | 0;
  $2029 = $2025 & $2021;
  $2030 = $2028 & $2022;
  $2031 = $1883 ^ $2029;
  $2032 = $1884 ^ $2030;
  $2033 = $1880 ^ -1;
  $2034 = $1879 ^ -1;
  $arrayidx2692 = (37360 + ($idxprom2670 << 5) | 0) + 16 | 0;
  $2035 = $arrayidx2692;
  $2036 = $2035;
  $2037 = HEAP32[$2036 >> 2] | 0;
  $2038 = $2035 + 4 | 0;
  $2039 = $2038;
  $2040 = HEAP32[$2039 >> 2] | 0;
  $2041 = $2037 & $2033;
  $2042 = $2040 & $2034;
  $2043 = $1874 ^ $2041;
  $2044 = $1873 ^ $2042;
  $2045 = $1885 & $2031;
  $2046 = $1886 & $2032;
  $2047 = $2045 ^ $2025;
  $2048 = $2046 ^ $2028;
  $2049 = $1876 & $2043;
  $2050 = $1875 & $2044;
  $2051 = $2049 ^ $2037;
  $2052 = $2050 ^ $2040;
  $2053 = $1889 & $2017;
  $2054 = $1890 & $2018;
  $2055 = $2031 ^ $2053;
  $2056 = $2032 ^ $2054;
  $2057 = $1880 & $2019;
  $2058 = $1879 & $2020;
  $2059 = $2043 ^ $2057;
  $2060 = $2044 ^ $2058;
  $2061 = $1885 ^ -1;
  $2062 = $1886 ^ -1;
  $2063 = $1889 & $2061;
  $2064 = $1890 & $2062;
  $2065 = $2063 ^ $2017;
  $2066 = $2064 ^ $2018;
  $2067 = $1876 ^ -1;
  $2068 = $1875 ^ -1;
  $2069 = $1880 & $2067;
  $2070 = $1879 & $2068;
  $2071 = $2069 ^ $2019;
  $2072 = $2070 ^ $2020;
  $2073 = $2055 & $1889;
  $2074 = $2056 & $1890;
  $2075 = $1885 ^ $2073;
  $2076 = $1886 ^ $2074;
  $2077 = $2059 & $1880;
  $2078 = $2060 & $1879;
  $2079 = $1876 ^ $2077;
  $2080 = $1875 ^ $2078;
  $2081 = $2063 ^ $1891;
  $2082 = $2064 ^ $1892;
  $2083 = $2081 & $2055;
  $2084 = $2082 & $2056;
  $2085 = $2083 ^ $1889;
  $2086 = $2084 ^ $1890;
  $2087 = $2069 ^ $1882;
  $2088 = $2070 ^ $1881;
  $2089 = $2087 & $2059;
  $2090 = $2088 & $2060;
  $2091 = $2089 ^ $1880;
  $2092 = $2090 ^ $1879;
  $2093 = $2065 | $2075;
  $2094 = $2066 | $2076;
  $2095 = $2093 ^ $2055;
  $2096 = $2094 ^ $2056;
  $2097 = $2071 | $2079;
  $2098 = $2072 | $2080;
  $2099 = $2097 ^ $2059;
  $2100 = $2098 ^ $2060;
  $2101 = $2085 & $2075;
  $2102 = $2086 & $2076;
  $2103 = $2101 ^ $2065;
  $2104 = $2102 ^ $2066;
  $2105 = $2091 & $2079;
  $2106 = $2092 & $2080;
  $2107 = $2105 ^ $2071;
  $2108 = $2106 ^ $2072;
  $2109 = $2095 & $2047;
  $2110 = $2096 & $2048;
  $2111 = $2109 ^ $2075;
  $2112 = $2110 ^ $2076;
  $2113 = $2099 & $2051;
  $2114 = $2100 & $2052;
  $2115 = $2113 ^ $2079;
  $2116 = $2114 ^ $2080;
  $2117 = $2085 ^ $2047;
  $2118 = $2086 ^ $2048;
  $2119 = $2091 ^ $2051;
  $2120 = $2092 ^ $2052;
  $2121 = $2111 ^ $2099;
  $2122 = $2112 ^ $2100;
  $2123 = $2115 ^ $2117;
  $2124 = $2116 ^ $2118;
  $2125 = $2103 ^ $2095;
  $2126 = $2104 ^ $2096;
  $2127 = $2125 ^ $2119;
  $2128 = $2126 ^ $2120;
  $2129 = $2107 ^ $2095;
  $2130 = $2108 ^ $2096;
  $2131 = $2123 ^ $2095;
  $2132 = $2124 ^ $2096;
  $2133 = $2127 ^ $2111;
  $2134 = $2128 ^ $2112;
  $2135 = $2121 ^ $2117;
  $2136 = $2122 ^ $2118;
  $2137 = $2135 ^ $2129;
  $2138 = $2136 ^ $2130;
  $2139 = $2121 ^ $2103;
  $2140 = $2122 ^ $2104;
  $2141 = $2015 ^ -1;
  $2142 = $2016 ^ -1;
  $2143 = $2006 ^ -1;
  $2144 = $2005 ^ -1;
  $2145 = $2013 ^ -1;
  $2146 = $2014 ^ -1;
  $arrayidx2674$1 = (37360 + ($idxprom2670 << 5) | 0) + 8 | 0;
  $2147 = $arrayidx2674$1;
  $2148 = $2147;
  $2149 = HEAP32[$2148 >> 2] | 0;
  $2150 = $2147 + 4 | 0;
  $2151 = $2150;
  $2152 = HEAP32[$2151 >> 2] | 0;
  $2153 = $2149 & $2145;
  $2154 = $2152 & $2146;
  $2155 = $2007 ^ $2153;
  $2156 = $2008 ^ $2154;
  $2157 = $2004 ^ -1;
  $2158 = $2003 ^ -1;
  $arrayidx2692$1 = (37360 + ($idxprom2670 << 5) | 0) + 24 | 0;
  $2159 = $arrayidx2692$1;
  $2160 = $2159;
  $2161 = HEAP32[$2160 >> 2] | 0;
  $2162 = $2159 + 4 | 0;
  $2163 = $2162;
  $2164 = HEAP32[$2163 >> 2] | 0;
  $2165 = $2161 & $2157;
  $2166 = $2164 & $2158;
  $2167 = $1998 ^ $2165;
  $2168 = $1997 ^ $2166;
  $2169 = $2009 & $2155;
  $2170 = $2010 & $2156;
  $2171 = $2169 ^ $2149;
  $2172 = $2170 ^ $2152;
  $2173 = $2000 & $2167;
  $2174 = $1999 & $2168;
  $2175 = $2173 ^ $2161;
  $2176 = $2174 ^ $2164;
  $2177 = $2013 & $2141;
  $2178 = $2014 & $2142;
  $2179 = $2155 ^ $2177;
  $2180 = $2156 ^ $2178;
  $2181 = $2004 & $2143;
  $2182 = $2003 & $2144;
  $2183 = $2167 ^ $2181;
  $2184 = $2168 ^ $2182;
  $2185 = $2009 ^ -1;
  $2186 = $2010 ^ -1;
  $2187 = $2013 & $2185;
  $2188 = $2014 & $2186;
  $2189 = $2187 ^ $2141;
  $2190 = $2188 ^ $2142;
  $2191 = $2000 ^ -1;
  $2192 = $1999 ^ -1;
  $2193 = $2004 & $2191;
  $2194 = $2003 & $2192;
  $2195 = $2193 ^ $2143;
  $2196 = $2194 ^ $2144;
  $2197 = $2179 & $2013;
  $2198 = $2180 & $2014;
  $2199 = $2009 ^ $2197;
  $2200 = $2010 ^ $2198;
  $2201 = $2183 & $2004;
  $2202 = $2184 & $2003;
  $2203 = $2000 ^ $2201;
  $2204 = $1999 ^ $2202;
  $2205 = $2187 ^ $2015;
  $2206 = $2188 ^ $2016;
  $2207 = $2205 & $2179;
  $2208 = $2206 & $2180;
  $2209 = $2207 ^ $2013;
  $2210 = $2208 ^ $2014;
  $2211 = $2193 ^ $2006;
  $2212 = $2194 ^ $2005;
  $2213 = $2211 & $2183;
  $2214 = $2212 & $2184;
  $2215 = $2213 ^ $2004;
  $2216 = $2214 ^ $2003;
  $2217 = $2189 | $2199;
  $2218 = $2190 | $2200;
  $2219 = $2217 ^ $2179;
  $2220 = $2218 ^ $2180;
  $2221 = $2195 | $2203;
  $2222 = $2196 | $2204;
  $2223 = $2221 ^ $2183;
  $2224 = $2222 ^ $2184;
  $2225 = $2209 & $2199;
  $2226 = $2210 & $2200;
  $2227 = $2225 ^ $2189;
  $2228 = $2226 ^ $2190;
  $2229 = $2215 & $2203;
  $2230 = $2216 & $2204;
  $2231 = $2229 ^ $2195;
  $2232 = $2230 ^ $2196;
  $2233 = $2219 & $2171;
  $2234 = $2220 & $2172;
  $2235 = $2233 ^ $2199;
  $2236 = $2234 ^ $2200;
  $2237 = $2223 & $2175;
  $2238 = $2224 & $2176;
  $2239 = $2237 ^ $2203;
  $2240 = $2238 ^ $2204;
  $2241 = $2209 ^ $2171;
  $2242 = $2210 ^ $2172;
  $2243 = $2215 ^ $2175;
  $2244 = $2216 ^ $2176;
  $2245 = $2235 ^ $2223;
  $2246 = $2236 ^ $2224;
  $2247 = $2239 ^ $2241;
  $2248 = $2240 ^ $2242;
  $2249 = $2227 ^ $2219;
  $2250 = $2228 ^ $2220;
  $2251 = $2249 ^ $2243;
  $2252 = $2250 ^ $2244;
  $2253 = $2231 ^ $2219;
  $2254 = $2232 ^ $2220;
  $2255 = $2247 ^ $2219;
  $2256 = $2248 ^ $2220;
  $2257 = $2251 ^ $2235;
  $2258 = $2252 ^ $2236;
  $2259 = $2245 ^ $2241;
  $2260 = $2246 ^ $2242;
  $2261 = $2259 ^ $2253;
  $2262 = $2260 ^ $2254;
  $2263 = $2245 ^ $2227;
  $2264 = $2246 ^ $2228;
  $2266 = _i64Add($96 | 0, $2265 | 0, 7, 0) | 0;
  $2267 = getTempRet0() | 0;
  $2268 = $2267 >>> 0 < 0;
  $2269 = $2266 >>> 0 < 42;
  $2270 = ($2267 | 0) == 0;
  $2271 = $2270 & $2269;
  $2272 = $2268 | $2271;
  if ($2272) {
   $100 = $2140;
   $102 = $2253;
   $104 = $2254;
   $106 = $2137;
   $108 = $2138;
   $118 = $2131;
   $120 = $2132;
   $122 = $2251;
   $124 = $2252;
   $134 = $2245;
   $136 = $2246;
   $138 = $2133;
   $140 = $2134;
   $144 = $2247;
   $146 = $2248;
   $2265 = $2267;
   $278 = $2263;
   $280 = $2264;
   $282 = $2129;
   $284 = $2130;
   $286 = $2261;
   $288 = $2262;
   $298 = $2255;
   $300 = $2256;
   $302 = $2127;
   $304 = $2128;
   $314 = $2121;
   $316 = $2122;
   $318 = $2257;
   $320 = $2258;
   $324 = $2123;
   $326 = $2124;
   $96 = $2266;
   $98 = $2139;
  } else {
   break;
  }
 }
 $2273 = $arrayidx4;
 $2274 = $2273;
 HEAP32[$2274 >> 2] = $2139;
 $2275 = $2273 + 4 | 0;
 $2276 = $2275;
 HEAP32[$2276 >> 2] = $2140;
 $2277 = $arrayidx21;
 $2278 = $2277;
 HEAP32[$2278 >> 2] = $2137;
 $2279 = $2277 + 4 | 0;
 $2280 = $2279;
 HEAP32[$2280 >> 2] = $2138;
 $2281 = $arrayidx30;
 $2282 = $2281;
 HEAP32[$2282 >> 2] = $2131;
 $2283 = $2281 + 4 | 0;
 $2284 = $2283;
 HEAP32[$2284 >> 2] = $2132;
 $2285 = $arrayidx62;
 $2286 = $2285;
 HEAP32[$2286 >> 2] = $2133;
 $2287 = $2285 + 4 | 0;
 $2288 = $2287;
 HEAP32[$2288 >> 2] = $2134;
 $2289 = $arrayidx3025;
 $2290 = $2289;
 HEAP32[$2290 >> 2] = $2245;
 $2291 = $2289 + 4 | 0;
 $2292 = $2291;
 HEAP32[$2292 >> 2] = $2246;
 $2293 = $arrayidx79$phi$trans$insert;
 $2294 = $2293;
 HEAP32[$2294 >> 2] = $2247;
 $2295 = $2293 + 4 | 0;
 $2296 = $2295;
 HEAP32[$2296 >> 2] = $2248;
 $2297 = $arrayidx34$phi$trans$insert;
 $2298 = $2297;
 HEAP32[$2298 >> 2] = $2251;
 $2299 = $2297 + 4 | 0;
 $2300 = $2299;
 HEAP32[$2300 >> 2] = $2252;
 $2301 = $arrayidx12$phi$trans$insert;
 $2302 = $2301;
 HEAP32[$2302 >> 2] = $2253;
 $2303 = $2301 + 4 | 0;
 $2304 = $2303;
 HEAP32[$2304 >> 2] = $2254;
 $2305 = $arrayidx4$1;
 $2306 = $2305;
 HEAP32[$2306 >> 2] = $2263;
 $2307 = $2305 + 4 | 0;
 $2308 = $2307;
 HEAP32[$2308 >> 2] = $2264;
 $2309 = $arrayidx12$1;
 $2310 = $2309;
 HEAP32[$2310 >> 2] = $2129;
 $2311 = $2309 + 4 | 0;
 $2312 = $2311;
 HEAP32[$2312 >> 2] = $2130;
 $2313 = $arrayidx21$1;
 $2314 = $2313;
 HEAP32[$2314 >> 2] = $2261;
 $2315 = $2313 + 4 | 0;
 $2316 = $2315;
 HEAP32[$2316 >> 2] = $2262;
 $2317 = $arrayidx30$1;
 $2318 = $2317;
 HEAP32[$2318 >> 2] = $2255;
 $2319 = $2317 + 4 | 0;
 $2320 = $2319;
 HEAP32[$2320 >> 2] = $2256;
 $2321 = $arrayidx34$1;
 $2322 = $2321;
 HEAP32[$2322 >> 2] = $2127;
 $2323 = $2321 + 4 | 0;
 $2324 = $2323;
 HEAP32[$2324 >> 2] = $2128;
 $2325 = $arrayidx47$1;
 $2326 = $2325;
 HEAP32[$2326 >> 2] = $2121;
 $2327 = $2325 + 4 | 0;
 $2328 = $2327;
 HEAP32[$2328 >> 2] = $2122;
 $2329 = $arrayidx62$1;
 $2330 = $2329;
 HEAP32[$2330 >> 2] = $2257;
 $2331 = $2329 + 4 | 0;
 $2332 = $2331;
 HEAP32[$2332 >> 2] = $2258;
 $2333 = $arrayidx79$1;
 $2334 = $2333;
 HEAP32[$2334 >> 2] = $2123;
 $2335 = $2333 + 4 | 0;
 $2336 = $2335;
 HEAP32[$2336 >> 2] = $2124;
 return;
}

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i134 = 0, $$pre$i194 = 0, $$pre$i31$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i195Z2D = 0, $$pre$phi$i32$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$010$i$i = 0;
 var $K305$08$i$i = 0, $K373$015$i = 0, $R$1$i = 0, $R$1$i$be = 0, $R$1$i$i = 0, $R$1$i$i$be = 0, $R$1$i$i$ph = 0, $R$1$i$ph = 0, $R$1$i183 = 0, $R$1$i183$be = 0, $R$1$i183$ph = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i188 = 0, $RP$1$i = 0, $RP$1$i$be = 0, $RP$1$i$i = 0, $RP$1$i$i$be = 0, $RP$1$i$i$ph = 0, $RP$1$i$ph = 0;
 var $RP$1$i182 = 0, $RP$1$i182$be = 0, $RP$1$i182$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i34$i = 0, $T$014$i = 0, $T$07$i$i = 0, $T$09$i$i = 0, $add$i = 0, $add$i$i = 0, $add$i135 = 0, $add$i155 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i141 = 0, $add$ptr$i174 = 0, $add$ptr$i2$i$i = 0;
 var $add$ptr$i35$i = 0, $add$ptr$i43$i = 0, $add$ptr$i57$i = 0, $add$ptr14$i$i = 0, $add$ptr15$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr169 = 0, $add$ptr17$i$i = 0, $add$ptr178 = 0, $add$ptr181$i = 0, $add$ptr182 = 0, $add$ptr189$i = 0, $add$ptr190$i = 0, $add$ptr193 = 0, $add$ptr199 = 0, $add$ptr2$i$i = 0, $add$ptr205$i$i = 0, $add$ptr212$i$i = 0, $add$ptr225$i = 0;
 var $add$ptr227$i = 0, $add$ptr24$i$i = 0, $add$ptr262$i = 0, $add$ptr269$i = 0, $add$ptr273$i = 0, $add$ptr282$i = 0, $add$ptr3$i$i = 0, $add$ptr30$i$i = 0, $add$ptr369$i$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i41$i = 0, $add$ptr4$i49$i = 0, $add$ptr441$i = 0, $add$ptr5$i$i = 0, $add$ptr6$i$i = 0, $add$ptr6$i$i$i = 0, $add$ptr6$i53$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0;
 var $add$ptr95 = 0, $add$ptr98 = 0, $add10$i = 0, $add101$i = 0, $add110$i = 0, $add13$i = 0, $add14$i = 0, $add140$i = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i158 = 0, $add177$i = 0, $add18$i = 0, $add19$i = 0, $add2 = 0, $add20$i = 0, $add206$i$i = 0, $add212$i = 0, $add215$i = 0;
 var $add22$i = 0, $add246$i = 0, $add26$i$i = 0, $add268$i = 0, $add269$i$i = 0, $add274$i$i = 0, $add278$i$i = 0, $add280$i$i = 0, $add283$i$i = 0, $add337$i = 0, $add342$i = 0, $add346$i = 0, $add348$i = 0, $add351$i = 0, $add46$i = 0, $add50 = 0, $add51$i = 0, $add54 = 0, $add54$i = 0, $add58 = 0;
 var $add62 = 0, $add64 = 0, $add74$i$i = 0, $add77$i = 0, $add78$i = 0, $add79$i$i = 0, $add8 = 0, $add82$i = 0, $add83$i$i = 0, $add85$i$i = 0, $add86$i = 0, $add88$i$i = 0, $add9$i = 0, $add90$i = 0, $add92$i = 0, $and = 0, $and$i = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i14$i = 0;
 var $and$i152 = 0, $and$i36$i = 0, $and$i44$i = 0, $and100$i = 0, $and103$i = 0, $and104$i = 0, $and106 = 0, $and11$i = 0, $and119$i$i = 0, $and1197$i$i = 0, $and12$i = 0, $and13$i = 0, $and13$i$i = 0, $and133$i$i = 0, $and14 = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and194$i191 = 0, $and199$i = 0;
 var $and209$i$i = 0, $and21$i = 0, $and21$i159 = 0, $and227$i$i = 0, $and236$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and282$i$i = 0, $and29$i = 0, $and292$i = 0, $and295$i$i = 0, $and3$i = 0, $and3$i$i = 0, $and3$i$i$i = 0, $and3$i39$i = 0, $and3$i47$i = 0, $and30$i = 0, $and318$i$i = 0, $and3185$i$i = 0;
 var $and32$i = 0, $and32$i$i = 0, $and33$i$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and350$i = 0, $and363$i = 0, $and37$i$i = 0, $and387$i = 0, $and38712$i = 0, $and4 = 0, $and40$i$i = 0, $and41 = 0, $and42$i = 0, $and43 = 0, $and46 = 0, $and49 = 0, $and49$i = 0, $and49$i$i = 0;
 var $and53 = 0, $and57 = 0, $and6$i = 0, $and6$i$i = 0, $and6$i13$i = 0, $and6$i18$i = 0, $and61 = 0, $and64$i = 0, $and68$i = 0, $and69$i$i = 0, $and7 = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0;
 var $and87$i$i = 0, $and89$i = 0, $and9$i = 0, $and96$i$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i160 = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx106$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx113$i173 = 0, $arrayidx121$i = 0, $arrayidx121$i$sink = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx137$i = 0, $arrayidx143$i$i = 0;
 var $arrayidx148$i = 0, $arrayidx151$i = 0, $arrayidx151$i$i = 0, $arrayidx151$i$i$sink = 0, $arrayidx154$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i = 0, $arrayidx165$i185 = 0, $arrayidx178$i$i = 0, $arrayidx184$i = 0, $arrayidx184$i$i = 0, $arrayidx195$i$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx212$i = 0, $arrayidx212$i$sink = 0, $arrayidx223$i$i = 0, $arrayidx228$i = 0, $arrayidx23$i = 0;
 var $arrayidx239$i = 0, $arrayidx245$i = 0, $arrayidx256$i = 0, $arrayidx27$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx290$i$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx358$i = 0, $arrayidx394$i = 0, $arrayidx40$i = 0, $arrayidx44$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx92$i$i = 0;
 var $arrayidx94$i = 0, $arrayidx94$i170 = 0, $arrayidx96$i$i = 0, $bk$i = 0, $bk$i$i = 0, $bk$i176 = 0, $bk$i26$i = 0, $bk102$i$i = 0, $bk122 = 0, $bk124 = 0, $bk139$i$i = 0, $bk145$i = 0, $bk158$i$i = 0, $bk161$i$i = 0, $bk18 = 0, $bk218$i = 0, $bk220$i = 0, $bk246$i$i = 0, $bk248$i$i = 0, $bk302$i$i = 0;
 var $bk311$i = 0, $bk313$i = 0, $bk338$i$i = 0, $bk357$i$i = 0, $bk360$i$i = 0, $bk370$i = 0, $bk407$i = 0, $bk429$i = 0, $bk432$i = 0, $bk55$i$i = 0, $bk56$i = 0, $bk67$i$i = 0, $bk74$i$i = 0, $bk85 = 0, $bk91$i$i = 0, $br$2$ph$i = 0, $call107$i = 0, $call131$i = 0, $call132$i = 0, $call37$i = 0;
 var $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i12$i = 0, $cmp$i133 = 0, $cmp$i149 = 0, $cmp$i15$i = 0, $cmp$i3$i$i = 0, $cmp$i37$i = 0, $cmp$i45$i = 0, $cmp$i55$i = 0, $cmp1 = 0, $cmp1$i = 0, $cmp10 = 0;
 var $cmp100$i$i = 0, $cmp102$i = 0, $cmp104$i$i = 0, $cmp105$i = 0, $cmp106$i$i = 0, $cmp107$i = 0, $cmp108$i = 0, $cmp108$i$i = 0, $cmp114$i = 0, $cmp116$i = 0, $cmp118$i = 0, $cmp119$i = 0, $cmp12$i = 0, $cmp120$i$i = 0, $cmp120$i28$i = 0, $cmp1208$i$i = 0, $cmp123$i = 0, $cmp124$i$i = 0, $cmp126$i = 0, $cmp127$i = 0;
 var $cmp128 = 0, $cmp128$i = 0, $cmp128$i$i = 0, $cmp133$i = 0, $cmp135$i = 0, $cmp137$i = 0, $cmp138$i = 0, $cmp139 = 0, $cmp141$i = 0, $cmp144$i$i = 0, $cmp146 = 0, $cmp147$i = 0, $cmp14799$i = 0, $cmp15$i = 0, $cmp151$i = 0, $cmp152$i = 0, $cmp155$i = 0, $cmp156 = 0, $cmp156$i = 0, $cmp156$i$i = 0;
 var $cmp157$i = 0, $cmp159$i = 0, $cmp162 = 0, $cmp162$i = 0, $cmp162$i184 = 0, $cmp166$i = 0, $cmp168$i$i = 0, $cmp174$i = 0, $cmp180$i = 0, $cmp185$i = 0, $cmp185$i$i = 0, $cmp186 = 0, $cmp186$i = 0, $cmp19$i = 0, $cmp190$i = 0, $cmp191$i = 0, $cmp2$i$i = 0, $cmp2$i$i$i = 0, $cmp20$i$i = 0, $cmp203$i = 0;
 var $cmp205$i = 0, $cmp209$i = 0, $cmp21$i = 0, $cmp215$i$i = 0, $cmp217$i = 0, $cmp218$i = 0, $cmp224$i = 0, $cmp228$i = 0, $cmp229$i = 0, $cmp24$i = 0, $cmp24$i$i = 0, $cmp246$i = 0, $cmp254$i$i = 0, $cmp257$i = 0, $cmp258$i$i = 0, $cmp26$i = 0, $cmp265$i = 0, $cmp27$i$i = 0, $cmp28$i = 0, $cmp28$i$i = 0;
 var $cmp284$i = 0, $cmp29 = 0, $cmp3$i$i = 0, $cmp306$i$i = 0, $cmp31 = 0, $cmp319$i = 0, $cmp319$i$i = 0, $cmp3196$i$i = 0, $cmp32$i = 0, $cmp32$i138 = 0, $cmp323$i = 0, $cmp327$i$i = 0, $cmp34$i = 0, $cmp34$i$i = 0, $cmp35$i = 0, $cmp36$i = 0, $cmp36$i$i = 0, $cmp374$i = 0, $cmp38$i = 0, $cmp38$i$i = 0;
 var $cmp388$i = 0, $cmp38813$i = 0, $cmp396$i = 0, $cmp40$i = 0, $cmp43$i = 0, $cmp45$i = 0, $cmp46$i = 0, $cmp46$i$i = 0, $cmp49$i = 0, $cmp5 = 0, $cmp55$i = 0, $cmp55$i166 = 0, $cmp57$i = 0, $cmp57$i167 = 0, $cmp59$i$i = 0, $cmp60$i = 0, $cmp62$i = 0, $cmp63$i = 0, $cmp63$i$i = 0, $cmp65$i = 0;
 var $cmp66$i = 0, $cmp66$i140 = 0, $cmp69$i = 0, $cmp7$i$i = 0, $cmp70 = 0, $cmp72$i = 0, $cmp75$i$i = 0, $cmp76$i = 0, $cmp81$i = 0, $cmp85$i = 0, $cmp89$i = 0, $cmp9$i$i = 0, $cmp90$i = 0, $cmp91$i = 0, $cmp93$i = 0, $cmp95$i = 0, $cmp96$i = 0, $cmp97$i = 0, $cmp97$i$i = 0, $cmp9716$i = 0;
 var $cmp99 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i17$i = 0, $cond$i40$i = 0, $cond$i48$i = 0, $cond1$i$i = 0, $cond115$i = 0, $cond115$i$i = 0, $cond13$i$i = 0, $cond15$i$i = 0, $cond2$i = 0, $cond3$i = 0, $cond315$i$i = 0, $cond383$i = 0, $cond4$i = 0, $fd$i = 0, $fd$i$i = 0;
 var $fd$i177 = 0, $fd103$i$i = 0, $fd123 = 0, $fd140$i$i = 0, $fd146$i = 0, $fd148$i$i = 0, $fd160$i$i = 0, $fd219$i = 0, $fd247$i$i = 0, $fd303$i$i = 0, $fd312$i = 0, $fd339$i$i = 0, $fd344$i$i = 0, $fd359$i$i = 0, $fd371$i = 0, $fd408$i = 0, $fd416$i = 0, $fd431$i = 0, $fd54$i$i = 0, $fd57$i = 0;
 var $fd68$i$i = 0, $fd69 = 0, $fd78$i$i = 0, $fd9 = 0, $fd92$i$i = 0, $head = 0, $head$i = 0, $head$i$i = 0, $head$i$i$i = 0, $head$i164 = 0, $head$i22$i = 0, $head$i42$i = 0, $head$i52$i = 0, $head118$i$i = 0, $head1186$i$i = 0, $head168 = 0, $head173 = 0, $head177 = 0, $head179 = 0, $head179$i = 0;
 var $head182$i = 0, $head187$i = 0, $head189$i = 0, $head195 = 0, $head198 = 0, $head208$i$i = 0, $head211$i$i = 0, $head23$i$i = 0, $head25 = 0, $head26$i$i = 0, $head265$i = 0, $head268$i = 0, $head271$i = 0, $head274$i = 0, $head279$i = 0, $head281$i = 0, $head29$i = 0, $head29$i$i = 0, $head317$i$i = 0, $head3174$i$i = 0;
 var $head32$i$i = 0, $head34$i$i = 0, $head386$i = 0, $head38611$i = 0, $head7$i$i = 0, $head7$i$i$i = 0, $head7$i54$i = 0, $head94 = 0, $head97 = 0, $head99$i = 0, $idx$0$i = 0, $index$i = 0, $index$i$i = 0, $index$i189 = 0, $index$i29$i = 0, $index288$i$i = 0, $index356$i = 0, $magic$i$i = 0, $nb$0 = 0, $neg = 0;
 var $neg$i = 0, $neg$i$i = 0, $neg$i137 = 0, $neg$i190 = 0, $neg103$i = 0, $neg13 = 0, $neg132$i$i = 0, $neg48$i = 0, $neg73 = 0, $next$i = 0, $next$i$i = 0, $next$i$i$i = 0, $next231$i = 0, $not$cmp141$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i168 = 0, $or$cond1$i = 0, $or$cond1$i165 = 0, $or$cond11$i = 0;
 var $or$cond2$i = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $or$cond97$i = 0, $or$cond98$i = 0, $or$i = 0, $or$i$i = 0, $or$i$i$i = 0, $or$i169 = 0, $or$i51$i = 0, $or101$i$i = 0, $or110 = 0, $or167 = 0, $or172 = 0, $or176 = 0, $or178$i = 0, $or180 = 0;
 var $or183$i = 0, $or186$i = 0, $or188$i = 0, $or19$i$i = 0, $or194 = 0, $or197 = 0, $or204$i = 0, $or210$i$i = 0, $or22$i$i = 0, $or23 = 0, $or232$i$i = 0, $or26 = 0, $or264$i = 0, $or267$i = 0, $or270$i = 0, $or275$i = 0, $or278$i = 0, $or28$i$i = 0, $or280$i = 0, $or297$i = 0;
 var $or300$i$i = 0, $or33$i$i = 0, $or368$i = 0, $or40 = 0, $or44$i$i = 0, $or93 = 0, $or96 = 0, $parent$i = 0, $parent$i$i = 0, $parent$i175 = 0, $parent$i27$i = 0, $parent135$i = 0, $parent138$i$i = 0, $parent149$i = 0, $parent162$i$i = 0, $parent165$i$i = 0, $parent166$i = 0, $parent179$i$i = 0, $parent196$i$i = 0, $parent226$i = 0;
 var $parent240$i = 0, $parent257$i = 0, $parent301$i$i = 0, $parent337$i$i = 0, $parent361$i$i = 0, $parent369$i = 0, $parent406$i = 0, $parent433$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$i162 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$418$i = 0, $rsize$418$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0, $sflags193$i = 0;
 var $sflags235$i = 0, $shl = 0, $shl$i = 0, $shl$i$i = 0, $shl$i153 = 0, $shl102 = 0, $shl105 = 0, $shl116$i$i = 0, $shl12 = 0, $shl127$i$i = 0, $shl131$i$i = 0, $shl15$i = 0, $shl18$i = 0, $shl192$i = 0, $shl195$i = 0, $shl198$i = 0, $shl22 = 0, $shl222$i$i = 0, $shl226$i$i = 0, $shl265$i$i = 0;
 var $shl270$i$i = 0, $shl276$i$i = 0, $shl279$i$i = 0, $shl288$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl31$i = 0, $shl316$i$i = 0, $shl326$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl344$i = 0, $shl347$i = 0, $shl35 = 0, $shl362$i = 0, $shl37 = 0, $shl384$i = 0, $shl39$i$i = 0, $shl395$i = 0, $shl48$i$i = 0;
 var $shl60$i = 0, $shl65 = 0, $shl70$i$i = 0, $shl72 = 0, $shl75$i$i = 0, $shl81$i$i = 0, $shl84$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i148 = 0, $shr$i25$i = 0, $shr101 = 0, $shr11$i = 0, $shr11$i156 = 0, $shr110$i$i = 0, $shr12$i = 0;
 var $shr124$i$i = 0, $shr15$i = 0, $shr16$i = 0, $shr16$i157 = 0, $shr19$i = 0, $shr194$i = 0, $shr20$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr263$i$i = 0, $shr267$i$i = 0, $shr27$i = 0, $shr272$i$i = 0, $shr277$i$i = 0, $shr281$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr310$i$i = 0, $shr318$i = 0, $shr323$i$i = 0;
 var $shr330$i = 0, $shr335$i = 0, $shr340$i = 0, $shr345$i = 0, $shr349$i = 0, $shr378$i = 0, $shr392$i = 0, $shr4$i = 0, $shr42$i = 0, $shr45 = 0, $shr47 = 0, $shr48 = 0, $shr5$i = 0, $shr5$i151 = 0, $shr51 = 0, $shr52 = 0, $shr55 = 0, $shr56 = 0, $shr58$i$i = 0, $shr59 = 0;
 var $shr60 = 0, $shr63 = 0, $shr68$i$i = 0, $shr7$i = 0, $shr7$i154 = 0, $shr72$i = 0, $shr72$i$i = 0, $shr75$i = 0, $shr76$i = 0, $shr77$i$i = 0, $shr79$i = 0, $shr8$i = 0, $shr80$i = 0, $shr82$i$i = 0, $shr83$i = 0, $shr84$i = 0, $shr86$i$i = 0, $shr87$i = 0, $shr88$i = 0, $shr91$i = 0;
 var $size$i$i = 0, $size$i$i$i = 0, $size188$i = 0, $size245$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0112$i = 0, $sp$1111$i = 0, $spec$select$i = 0, $spec$select$i171 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select5$i = 0, $spec$select9$i = 0, $spec$select96$i = 0, $ssize$2$ph$i = 0, $sub = 0, $sub$i = 0, $sub$i$i = 0;
 var $sub$i$i$i = 0, $sub$i136 = 0, $sub$i147 = 0, $sub$i16$i = 0, $sub$i38$i = 0, $sub$i46$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i19$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$rhs$cast$i20$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i21$i = 0, $sub10$i = 0, $sub101$i = 0, $sub112$i = 0, $sub113$i$i = 0, $sub118$i = 0;
 var $sub12$i$i = 0, $sub14$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub22$i = 0, $sub260$i = 0, $sub262$i$i = 0, $sub266$i$i = 0, $sub271$i$i = 0, $sub275$i$i = 0, $sub30$i = 0, $sub31$i = 0, $sub313$i$i = 0, $sub329$i = 0, $sub33$i = 0, $sub334$i = 0;
 var $sub339$i = 0, $sub343$i = 0, $sub381$i = 0, $sub4$i = 0, $sub41$i = 0, $sub42 = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i50$i = 0, $sub50$i = 0, $sub6$i = 0, $sub63$i = 0, $sub67$i = 0, $sub67$i$i = 0, $sub70$i = 0, $sub71$i$i = 0, $sub76$i$i = 0, $sub80$i$i = 0, $sub91 = 0;
 var $sub99$i = 0, $t$0$i = 0, $t$0$i161 = 0, $t$2$i = 0, $t$4$i = 0, $t$517$i = 0, $t$517$i$ph = 0, $tbase$795$i = 0, $tobool$i$i = 0, $tobool107 = 0, $tobool195$i = 0, $tobool200$i = 0, $tobool228$i$i = 0, $tobool237$i = 0, $tobool293$i = 0, $tobool296$i$i = 0, $tobool30$i = 0, $tobool364$i = 0, $tobool97$i$i = 0, $tsize$2647482$i = 0;
 var $tsize$4$i = 0, $tsize$794$i = 0, $v$0$i = 0, $v$0$i163 = 0, $v$1$i = 0, $v$3$i = 0, $v$3$i204 = 0, $v$4$lcssa$i = 0, $v$419$i = 0, $v$419$i$ph = 0, $xor$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $magic$i$i = sp;
 $cmp = $bytes >>> 0 < 245;
 do {
  if ($cmp) {
   $cmp1 = $bytes >>> 0 < 11;
   $add2 = $bytes + 11 | 0;
   $and = $add2 & -8;
   $cond = $cmp1 ? 16 : $and;
   $shr = $cond >>> 3;
   $0 = HEAP32[144141] | 0;
   $shr3 = $0 >>> $shr;
   $and4 = $shr3 & 3;
   $cmp5 = ($and4 | 0) == 0;
   if (!$cmp5) {
    $neg = $shr3 & 1;
    $and7 = $neg ^ 1;
    $add8 = $and7 + $shr | 0;
    $shl = $add8 << 1;
    $arrayidx = 576604 + ($shl << 2) | 0;
    $1 = $arrayidx + 8 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $fd9 = $2 + 8 | 0;
    $3 = HEAP32[$fd9 >> 2] | 0;
    $cmp10 = ($3 | 0) == ($arrayidx | 0);
    if ($cmp10) {
     $shl12 = 1 << $add8;
     $neg13 = $shl12 ^ -1;
     $and14 = $0 & $neg13;
     HEAP32[144141] = $and14;
    } else {
     $bk18 = $3 + 12 | 0;
     HEAP32[$bk18 >> 2] = $arrayidx;
     HEAP32[$1 >> 2] = $3;
    }
    $shl22 = $add8 << 3;
    $or23 = $shl22 | 3;
    $head = $2 + 4 | 0;
    HEAP32[$head >> 2] = $or23;
    $add$ptr = $2 + $shl22 | 0;
    $head25 = $add$ptr + 4 | 0;
    $4 = HEAP32[$head25 >> 2] | 0;
    $or26 = $4 | 1;
    HEAP32[$head25 >> 2] = $or26;
    $retval$0 = $fd9;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $5 = HEAP32[576572 >> 2] | 0;
   $cmp29 = $cond >>> 0 > $5 >>> 0;
   if ($cmp29) {
    $cmp31 = ($shr3 | 0) == 0;
    if (!$cmp31) {
     $shl35 = $shr3 << $shr;
     $shl37 = 2 << $shr;
     $sub = 0 - $shl37 | 0;
     $or40 = $shl37 | $sub;
     $and41 = $shl35 & $or40;
     $sub42 = 0 - $and41 | 0;
     $and43 = $and41 & $sub42;
     $sub44 = $and43 + -1 | 0;
     $shr45 = $sub44 >>> 12;
     $and46 = $shr45 & 16;
     $shr47 = $sub44 >>> $and46;
     $shr48 = $shr47 >>> 5;
     $and49 = $shr48 & 8;
     $add50 = $and49 | $and46;
     $shr51 = $shr47 >>> $and49;
     $shr52 = $shr51 >>> 2;
     $and53 = $shr52 & 4;
     $add54 = $add50 | $and53;
     $shr55 = $shr51 >>> $and53;
     $shr56 = $shr55 >>> 1;
     $and57 = $shr56 & 2;
     $add58 = $add54 | $and57;
     $shr59 = $shr55 >>> $and57;
     $shr60 = $shr59 >>> 1;
     $and61 = $shr60 & 1;
     $add62 = $add58 | $and61;
     $shr63 = $shr59 >>> $and61;
     $add64 = $add62 + $shr63 | 0;
     $shl65 = $add64 << 1;
     $arrayidx66 = 576604 + ($shl65 << 2) | 0;
     $6 = $arrayidx66 + 8 | 0;
     $7 = HEAP32[$6 >> 2] | 0;
     $fd69 = $7 + 8 | 0;
     $8 = HEAP32[$fd69 >> 2] | 0;
     $cmp70 = ($8 | 0) == ($arrayidx66 | 0);
     if ($cmp70) {
      $shl72 = 1 << $add64;
      $neg73 = $shl72 ^ -1;
      $and74 = $0 & $neg73;
      HEAP32[144141] = $and74;
      $10 = $and74;
     } else {
      $bk85 = $8 + 12 | 0;
      HEAP32[$bk85 >> 2] = $arrayidx66;
      HEAP32[$6 >> 2] = $8;
      $10 = $0;
     }
     $shl90 = $add64 << 3;
     $sub91 = $shl90 - $cond | 0;
     $or93 = $cond | 3;
     $head94 = $7 + 4 | 0;
     HEAP32[$head94 >> 2] = $or93;
     $add$ptr95 = $7 + $cond | 0;
     $or96 = $sub91 | 1;
     $head97 = $add$ptr95 + 4 | 0;
     HEAP32[$head97 >> 2] = $or96;
     $add$ptr98 = $7 + $shl90 | 0;
     HEAP32[$add$ptr98 >> 2] = $sub91;
     $cmp99 = ($5 | 0) == 0;
     if (!$cmp99) {
      $9 = HEAP32[576584 >> 2] | 0;
      $shr101 = $5 >>> 3;
      $shl102 = $shr101 << 1;
      $arrayidx103 = 576604 + ($shl102 << 2) | 0;
      $shl105 = 1 << $shr101;
      $and106 = $10 & $shl105;
      $tobool107 = ($and106 | 0) == 0;
      if ($tobool107) {
       $or110 = $10 | $shl105;
       HEAP32[144141] = $or110;
       $$pre = $arrayidx103 + 8 | 0;
       $$pre$phiZ2D = $$pre;
       $F104$0 = $arrayidx103;
      } else {
       $11 = $arrayidx103 + 8 | 0;
       $12 = HEAP32[$11 >> 2] | 0;
       $$pre$phiZ2D = $11;
       $F104$0 = $12;
      }
      HEAP32[$$pre$phiZ2D >> 2] = $9;
      $bk122 = $F104$0 + 12 | 0;
      HEAP32[$bk122 >> 2] = $9;
      $fd123 = $9 + 8 | 0;
      HEAP32[$fd123 >> 2] = $F104$0;
      $bk124 = $9 + 12 | 0;
      HEAP32[$bk124 >> 2] = $arrayidx103;
     }
     HEAP32[576572 >> 2] = $sub91;
     HEAP32[576584 >> 2] = $add$ptr95;
     $retval$0 = $fd69;
     STACKTOP = sp;
     return $retval$0 | 0;
    }
    $13 = HEAP32[576568 >> 2] | 0;
    $cmp128 = ($13 | 0) == 0;
    if ($cmp128) {
     $nb$0 = $cond;
    } else {
     $sub$i = 0 - $13 | 0;
     $and$i = $13 & $sub$i;
     $sub2$i = $and$i + -1 | 0;
     $shr$i = $sub2$i >>> 12;
     $and3$i = $shr$i & 16;
     $shr4$i = $sub2$i >>> $and3$i;
     $shr5$i = $shr4$i >>> 5;
     $and6$i = $shr5$i & 8;
     $add$i = $and6$i | $and3$i;
     $shr7$i = $shr4$i >>> $and6$i;
     $shr8$i = $shr7$i >>> 2;
     $and9$i = $shr8$i & 4;
     $add10$i = $add$i | $and9$i;
     $shr11$i = $shr7$i >>> $and9$i;
     $shr12$i = $shr11$i >>> 1;
     $and13$i = $shr12$i & 2;
     $add14$i = $add10$i | $and13$i;
     $shr15$i = $shr11$i >>> $and13$i;
     $shr16$i = $shr15$i >>> 1;
     $and17$i = $shr16$i & 1;
     $add18$i = $add14$i | $and17$i;
     $shr19$i = $shr15$i >>> $and17$i;
     $add20$i = $add18$i + $shr19$i | 0;
     $arrayidx$i = 576868 + ($add20$i << 2) | 0;
     $14 = HEAP32[$arrayidx$i >> 2] | 0;
     $head$i = $14 + 4 | 0;
     $15 = HEAP32[$head$i >> 2] | 0;
     $and21$i = $15 & -8;
     $sub22$i = $and21$i - $cond | 0;
     $rsize$0$i = $sub22$i;
     $t$0$i = $14;
     $v$0$i = $14;
     while (1) {
      $arrayidx23$i = $t$0$i + 16 | 0;
      $16 = HEAP32[$arrayidx23$i >> 2] | 0;
      $cmp$i = ($16 | 0) == (0 | 0);
      if ($cmp$i) {
       $arrayidx27$i = $t$0$i + 20 | 0;
       $17 = HEAP32[$arrayidx27$i >> 2] | 0;
       $cmp28$i = ($17 | 0) == (0 | 0);
       if ($cmp28$i) {
        break;
       } else {
        $cond4$i = $17;
       }
      } else {
       $cond4$i = $16;
      }
      $head29$i = $cond4$i + 4 | 0;
      $18 = HEAP32[$head29$i >> 2] | 0;
      $and30$i = $18 & -8;
      $sub31$i = $and30$i - $cond | 0;
      $cmp32$i = $sub31$i >>> 0 < $rsize$0$i >>> 0;
      $spec$select$i = $cmp32$i ? $sub31$i : $rsize$0$i;
      $spec$select1$i = $cmp32$i ? $cond4$i : $v$0$i;
      $rsize$0$i = $spec$select$i;
      $t$0$i = $cond4$i;
      $v$0$i = $spec$select1$i;
     }
     $add$ptr$i = $v$0$i + $cond | 0;
     $cmp35$i = $add$ptr$i >>> 0 > $v$0$i >>> 0;
     if ($cmp35$i) {
      $parent$i = $v$0$i + 24 | 0;
      $19 = HEAP32[$parent$i >> 2] | 0;
      $bk$i = $v$0$i + 12 | 0;
      $20 = HEAP32[$bk$i >> 2] | 0;
      $cmp40$i = ($20 | 0) == ($v$0$i | 0);
      do {
       if ($cmp40$i) {
        $arrayidx61$i = $v$0$i + 20 | 0;
        $22 = HEAP32[$arrayidx61$i >> 2] | 0;
        $cmp62$i = ($22 | 0) == (0 | 0);
        if ($cmp62$i) {
         $arrayidx65$i = $v$0$i + 16 | 0;
         $23 = HEAP32[$arrayidx65$i >> 2] | 0;
         $cmp66$i = ($23 | 0) == (0 | 0);
         if ($cmp66$i) {
          $R$3$i = 0;
          break;
         } else {
          $R$1$i$ph = $23;
          $RP$1$i$ph = $arrayidx65$i;
         }
        } else {
         $R$1$i$ph = $22;
         $RP$1$i$ph = $arrayidx61$i;
        }
        $R$1$i = $R$1$i$ph;
        $RP$1$i = $RP$1$i$ph;
        while (1) {
         $arrayidx71$i = $R$1$i + 20 | 0;
         $24 = HEAP32[$arrayidx71$i >> 2] | 0;
         $cmp72$i = ($24 | 0) == (0 | 0);
         if ($cmp72$i) {
          $arrayidx75$i = $R$1$i + 16 | 0;
          $25 = HEAP32[$arrayidx75$i >> 2] | 0;
          $cmp76$i = ($25 | 0) == (0 | 0);
          if ($cmp76$i) {
           break;
          } else {
           $R$1$i$be = $25;
           $RP$1$i$be = $arrayidx75$i;
          }
         } else {
          $R$1$i$be = $24;
          $RP$1$i$be = $arrayidx71$i;
         }
         $R$1$i = $R$1$i$be;
         $RP$1$i = $RP$1$i$be;
        }
        HEAP32[$RP$1$i >> 2] = 0;
        $R$3$i = $R$1$i;
       } else {
        $fd$i = $v$0$i + 8 | 0;
        $21 = HEAP32[$fd$i >> 2] | 0;
        $bk56$i = $21 + 12 | 0;
        HEAP32[$bk56$i >> 2] = $20;
        $fd57$i = $20 + 8 | 0;
        HEAP32[$fd57$i >> 2] = $21;
        $R$3$i = $20;
       }
      } while (0);
      $cmp90$i = ($19 | 0) == (0 | 0);
      do {
       if (!$cmp90$i) {
        $index$i = $v$0$i + 28 | 0;
        $26 = HEAP32[$index$i >> 2] | 0;
        $arrayidx94$i = 576868 + ($26 << 2) | 0;
        $27 = HEAP32[$arrayidx94$i >> 2] | 0;
        $cmp95$i = ($v$0$i | 0) == ($27 | 0);
        if ($cmp95$i) {
         HEAP32[$arrayidx94$i >> 2] = $R$3$i;
         $cond2$i = ($R$3$i | 0) == (0 | 0);
         if ($cond2$i) {
          $shl$i = 1 << $26;
          $neg$i = $shl$i ^ -1;
          $and103$i = $13 & $neg$i;
          HEAP32[576568 >> 2] = $and103$i;
          break;
         }
        } else {
         $arrayidx113$i = $19 + 16 | 0;
         $28 = HEAP32[$arrayidx113$i >> 2] | 0;
         $cmp114$i = ($28 | 0) == ($v$0$i | 0);
         $arrayidx121$i = $19 + 20 | 0;
         $arrayidx121$i$sink = $cmp114$i ? $arrayidx113$i : $arrayidx121$i;
         HEAP32[$arrayidx121$i$sink >> 2] = $R$3$i;
         $cmp126$i = ($R$3$i | 0) == (0 | 0);
         if ($cmp126$i) {
          break;
         }
        }
        $parent135$i = $R$3$i + 24 | 0;
        HEAP32[$parent135$i >> 2] = $19;
        $arrayidx137$i = $v$0$i + 16 | 0;
        $29 = HEAP32[$arrayidx137$i >> 2] | 0;
        $cmp138$i = ($29 | 0) == (0 | 0);
        if (!$cmp138$i) {
         $arrayidx148$i = $R$3$i + 16 | 0;
         HEAP32[$arrayidx148$i >> 2] = $29;
         $parent149$i = $29 + 24 | 0;
         HEAP32[$parent149$i >> 2] = $R$3$i;
        }
        $arrayidx154$i = $v$0$i + 20 | 0;
        $30 = HEAP32[$arrayidx154$i >> 2] | 0;
        $cmp155$i = ($30 | 0) == (0 | 0);
        if (!$cmp155$i) {
         $arrayidx165$i = $R$3$i + 20 | 0;
         HEAP32[$arrayidx165$i >> 2] = $30;
         $parent166$i = $30 + 24 | 0;
         HEAP32[$parent166$i >> 2] = $R$3$i;
        }
       }
      } while (0);
      $cmp174$i = $rsize$0$i >>> 0 < 16;
      if ($cmp174$i) {
       $add177$i = $rsize$0$i + $cond | 0;
       $or178$i = $add177$i | 3;
       $head179$i = $v$0$i + 4 | 0;
       HEAP32[$head179$i >> 2] = $or178$i;
       $add$ptr181$i = $v$0$i + $add177$i | 0;
       $head182$i = $add$ptr181$i + 4 | 0;
       $31 = HEAP32[$head182$i >> 2] | 0;
       $or183$i = $31 | 1;
       HEAP32[$head182$i >> 2] = $or183$i;
      } else {
       $or186$i = $cond | 3;
       $head187$i = $v$0$i + 4 | 0;
       HEAP32[$head187$i >> 2] = $or186$i;
       $or188$i = $rsize$0$i | 1;
       $head189$i = $add$ptr$i + 4 | 0;
       HEAP32[$head189$i >> 2] = $or188$i;
       $add$ptr190$i = $add$ptr$i + $rsize$0$i | 0;
       HEAP32[$add$ptr190$i >> 2] = $rsize$0$i;
       $cmp191$i = ($5 | 0) == 0;
       if (!$cmp191$i) {
        $32 = HEAP32[576584 >> 2] | 0;
        $shr194$i = $5 >>> 3;
        $shl195$i = $shr194$i << 1;
        $arrayidx196$i = 576604 + ($shl195$i << 2) | 0;
        $shl198$i = 1 << $shr194$i;
        $and199$i = $shl198$i & $0;
        $tobool200$i = ($and199$i | 0) == 0;
        if ($tobool200$i) {
         $or204$i = $shl198$i | $0;
         HEAP32[144141] = $or204$i;
         $$pre$i = $arrayidx196$i + 8 | 0;
         $$pre$phi$iZ2D = $$pre$i;
         $F197$0$i = $arrayidx196$i;
        } else {
         $33 = $arrayidx196$i + 8 | 0;
         $34 = HEAP32[$33 >> 2] | 0;
         $$pre$phi$iZ2D = $33;
         $F197$0$i = $34;
        }
        HEAP32[$$pre$phi$iZ2D >> 2] = $32;
        $bk218$i = $F197$0$i + 12 | 0;
        HEAP32[$bk218$i >> 2] = $32;
        $fd219$i = $32 + 8 | 0;
        HEAP32[$fd219$i >> 2] = $F197$0$i;
        $bk220$i = $32 + 12 | 0;
        HEAP32[$bk220$i >> 2] = $arrayidx196$i;
       }
       HEAP32[576572 >> 2] = $rsize$0$i;
       HEAP32[576584 >> 2] = $add$ptr$i;
      }
      $add$ptr225$i = $v$0$i + 8 | 0;
      $retval$0 = $add$ptr225$i;
      STACKTOP = sp;
      return $retval$0 | 0;
     } else {
      $nb$0 = $cond;
     }
    }
   } else {
    $nb$0 = $cond;
   }
  } else {
   $cmp139 = $bytes >>> 0 > 4294967231;
   if ($cmp139) {
    $nb$0 = -1;
   } else {
    $add144 = $bytes + 11 | 0;
    $and145 = $add144 & -8;
    $35 = HEAP32[576568 >> 2] | 0;
    $cmp146 = ($35 | 0) == 0;
    if ($cmp146) {
     $nb$0 = $and145;
    } else {
     $sub$i147 = 0 - $and145 | 0;
     $shr$i148 = $add144 >>> 8;
     $cmp$i149 = ($shr$i148 | 0) == 0;
     if ($cmp$i149) {
      $idx$0$i = 0;
     } else {
      $cmp1$i = $and145 >>> 0 > 16777215;
      if ($cmp1$i) {
       $idx$0$i = 31;
      } else {
       $sub4$i = $shr$i148 + 1048320 | 0;
       $shr5$i151 = $sub4$i >>> 16;
       $and$i152 = $shr5$i151 & 8;
       $shl$i153 = $shr$i148 << $and$i152;
       $sub6$i = $shl$i153 + 520192 | 0;
       $shr7$i154 = $sub6$i >>> 16;
       $and8$i = $shr7$i154 & 4;
       $add$i155 = $and8$i | $and$i152;
       $shl9$i = $shl$i153 << $and8$i;
       $sub10$i = $shl9$i + 245760 | 0;
       $shr11$i156 = $sub10$i >>> 16;
       $and12$i = $shr11$i156 & 2;
       $add13$i = $add$i155 | $and12$i;
       $sub14$i = 14 - $add13$i | 0;
       $shl15$i = $shl9$i << $and12$i;
       $shr16$i157 = $shl15$i >>> 15;
       $add17$i158 = $sub14$i + $shr16$i157 | 0;
       $shl18$i = $add17$i158 << 1;
       $add19$i = $add17$i158 + 7 | 0;
       $shr20$i = $and145 >>> $add19$i;
       $and21$i159 = $shr20$i & 1;
       $add22$i = $and21$i159 | $shl18$i;
       $idx$0$i = $add22$i;
      }
     }
     $arrayidx$i160 = 576868 + ($idx$0$i << 2) | 0;
     $36 = HEAP32[$arrayidx$i160 >> 2] | 0;
     $cmp24$i = ($36 | 0) == (0 | 0);
     L79 : do {
      if ($cmp24$i) {
       $rsize$3$i = $sub$i147;
       $t$2$i = 0;
       $v$3$i = 0;
       label = 61;
      } else {
       $cmp26$i = ($idx$0$i | 0) == 31;
       $shr27$i = $idx$0$i >>> 1;
       $sub30$i = 25 - $shr27$i | 0;
       $cond$i = $cmp26$i ? 0 : $sub30$i;
       $shl31$i = $and145 << $cond$i;
       $rsize$0$i162 = $sub$i147;
       $rst$0$i = 0;
       $sizebits$0$i = $shl31$i;
       $t$0$i161 = $36;
       $v$0$i163 = 0;
       while (1) {
        $head$i164 = $t$0$i161 + 4 | 0;
        $37 = HEAP32[$head$i164 >> 2] | 0;
        $and32$i = $37 & -8;
        $sub33$i = $and32$i - $and145 | 0;
        $cmp34$i = $sub33$i >>> 0 < $rsize$0$i162 >>> 0;
        if ($cmp34$i) {
         $cmp36$i = ($sub33$i | 0) == 0;
         if ($cmp36$i) {
          $rsize$418$i$ph = 0;
          $t$517$i$ph = $t$0$i161;
          $v$419$i$ph = $t$0$i161;
          label = 65;
          break L79;
         } else {
          $rsize$1$i = $sub33$i;
          $v$1$i = $t$0$i161;
         }
        } else {
         $rsize$1$i = $rsize$0$i162;
         $v$1$i = $v$0$i163;
        }
        $arrayidx40$i = $t$0$i161 + 20 | 0;
        $38 = HEAP32[$arrayidx40$i >> 2] | 0;
        $shr42$i = $sizebits$0$i >>> 31;
        $arrayidx44$i = ($t$0$i161 + 16 | 0) + ($shr42$i << 2) | 0;
        $39 = HEAP32[$arrayidx44$i >> 2] | 0;
        $cmp45$i = ($38 | 0) == (0 | 0);
        $cmp46$i = ($38 | 0) == ($39 | 0);
        $or$cond1$i165 = $cmp45$i | $cmp46$i;
        $rst$1$i = $or$cond1$i165 ? $rst$0$i : $38;
        $cmp49$i = ($39 | 0) == (0 | 0);
        $spec$select5$i = $sizebits$0$i << 1;
        if ($cmp49$i) {
         $rsize$3$i = $rsize$1$i;
         $t$2$i = $rst$1$i;
         $v$3$i = $v$1$i;
         label = 61;
         break;
        } else {
         $rsize$0$i162 = $rsize$1$i;
         $rst$0$i = $rst$1$i;
         $sizebits$0$i = $spec$select5$i;
         $t$0$i161 = $39;
         $v$0$i163 = $v$1$i;
        }
       }
      }
     } while (0);
     if ((label | 0) == 61) {
      $cmp55$i166 = ($t$2$i | 0) == (0 | 0);
      $cmp57$i167 = ($v$3$i | 0) == (0 | 0);
      $or$cond$i168 = $cmp55$i166 & $cmp57$i167;
      if ($or$cond$i168) {
       $shl60$i = 2 << $idx$0$i;
       $sub63$i = 0 - $shl60$i | 0;
       $or$i169 = $shl60$i | $sub63$i;
       $and64$i = $or$i169 & $35;
       $cmp65$i = ($and64$i | 0) == 0;
       if ($cmp65$i) {
        $nb$0 = $and145;
        break;
       }
       $sub67$i = 0 - $and64$i | 0;
       $and68$i = $and64$i & $sub67$i;
       $sub70$i = $and68$i + -1 | 0;
       $shr72$i = $sub70$i >>> 12;
       $and73$i = $shr72$i & 16;
       $shr75$i = $sub70$i >>> $and73$i;
       $shr76$i = $shr75$i >>> 5;
       $and77$i = $shr76$i & 8;
       $add78$i = $and77$i | $and73$i;
       $shr79$i = $shr75$i >>> $and77$i;
       $shr80$i = $shr79$i >>> 2;
       $and81$i = $shr80$i & 4;
       $add82$i = $add78$i | $and81$i;
       $shr83$i = $shr79$i >>> $and81$i;
       $shr84$i = $shr83$i >>> 1;
       $and85$i = $shr84$i & 2;
       $add86$i = $add82$i | $and85$i;
       $shr87$i = $shr83$i >>> $and85$i;
       $shr88$i = $shr87$i >>> 1;
       $and89$i = $shr88$i & 1;
       $add90$i = $add86$i | $and89$i;
       $shr91$i = $shr87$i >>> $and89$i;
       $add92$i = $add90$i + $shr91$i | 0;
       $arrayidx94$i170 = 576868 + ($add92$i << 2) | 0;
       $40 = HEAP32[$arrayidx94$i170 >> 2] | 0;
       $t$4$i = $40;
       $v$3$i204 = 0;
      } else {
       $t$4$i = $t$2$i;
       $v$3$i204 = $v$3$i;
      }
      $cmp9716$i = ($t$4$i | 0) == (0 | 0);
      if ($cmp9716$i) {
       $rsize$4$lcssa$i = $rsize$3$i;
       $v$4$lcssa$i = $v$3$i204;
      } else {
       $rsize$418$i$ph = $rsize$3$i;
       $t$517$i$ph = $t$4$i;
       $v$419$i$ph = $v$3$i204;
       label = 65;
      }
     }
     if ((label | 0) == 65) {
      $rsize$418$i = $rsize$418$i$ph;
      $t$517$i = $t$517$i$ph;
      $v$419$i = $v$419$i$ph;
      while (1) {
       $head99$i = $t$517$i + 4 | 0;
       $41 = HEAP32[$head99$i >> 2] | 0;
       $and100$i = $41 & -8;
       $sub101$i = $and100$i - $and145 | 0;
       $cmp102$i = $sub101$i >>> 0 < $rsize$418$i >>> 0;
       $spec$select$i171 = $cmp102$i ? $sub101$i : $rsize$418$i;
       $spec$select2$i = $cmp102$i ? $t$517$i : $v$419$i;
       $arrayidx106$i = $t$517$i + 16 | 0;
       $42 = HEAP32[$arrayidx106$i >> 2] | 0;
       $cmp107$i = ($42 | 0) == (0 | 0);
       if ($cmp107$i) {
        $arrayidx113$i173 = $t$517$i + 20 | 0;
        $43 = HEAP32[$arrayidx113$i173 >> 2] | 0;
        $cond115$i = $43;
       } else {
        $cond115$i = $42;
       }
       $cmp97$i = ($cond115$i | 0) == (0 | 0);
       if ($cmp97$i) {
        $rsize$4$lcssa$i = $spec$select$i171;
        $v$4$lcssa$i = $spec$select2$i;
        break;
       } else {
        $rsize$418$i = $spec$select$i171;
        $t$517$i = $cond115$i;
        $v$419$i = $spec$select2$i;
       }
      }
     }
     $cmp116$i = ($v$4$lcssa$i | 0) == (0 | 0);
     if ($cmp116$i) {
      $nb$0 = $and145;
     } else {
      $44 = HEAP32[576572 >> 2] | 0;
      $sub118$i = $44 - $and145 | 0;
      $cmp119$i = $rsize$4$lcssa$i >>> 0 < $sub118$i >>> 0;
      if ($cmp119$i) {
       $add$ptr$i174 = $v$4$lcssa$i + $and145 | 0;
       $cmp123$i = $add$ptr$i174 >>> 0 > $v$4$lcssa$i >>> 0;
       if ($cmp123$i) {
        $parent$i175 = $v$4$lcssa$i + 24 | 0;
        $45 = HEAP32[$parent$i175 >> 2] | 0;
        $bk$i176 = $v$4$lcssa$i + 12 | 0;
        $46 = HEAP32[$bk$i176 >> 2] | 0;
        $cmp128$i = ($46 | 0) == ($v$4$lcssa$i | 0);
        do {
         if ($cmp128$i) {
          $arrayidx151$i = $v$4$lcssa$i + 20 | 0;
          $48 = HEAP32[$arrayidx151$i >> 2] | 0;
          $cmp152$i = ($48 | 0) == (0 | 0);
          if ($cmp152$i) {
           $arrayidx155$i = $v$4$lcssa$i + 16 | 0;
           $49 = HEAP32[$arrayidx155$i >> 2] | 0;
           $cmp156$i = ($49 | 0) == (0 | 0);
           if ($cmp156$i) {
            $R$3$i188 = 0;
            break;
           } else {
            $R$1$i183$ph = $49;
            $RP$1$i182$ph = $arrayidx155$i;
           }
          } else {
           $R$1$i183$ph = $48;
           $RP$1$i182$ph = $arrayidx151$i;
          }
          $R$1$i183 = $R$1$i183$ph;
          $RP$1$i182 = $RP$1$i182$ph;
          while (1) {
           $arrayidx161$i = $R$1$i183 + 20 | 0;
           $50 = HEAP32[$arrayidx161$i >> 2] | 0;
           $cmp162$i184 = ($50 | 0) == (0 | 0);
           if ($cmp162$i184) {
            $arrayidx165$i185 = $R$1$i183 + 16 | 0;
            $51 = HEAP32[$arrayidx165$i185 >> 2] | 0;
            $cmp166$i = ($51 | 0) == (0 | 0);
            if ($cmp166$i) {
             break;
            } else {
             $R$1$i183$be = $51;
             $RP$1$i182$be = $arrayidx165$i185;
            }
           } else {
            $R$1$i183$be = $50;
            $RP$1$i182$be = $arrayidx161$i;
           }
           $R$1$i183 = $R$1$i183$be;
           $RP$1$i182 = $RP$1$i182$be;
          }
          HEAP32[$RP$1$i182 >> 2] = 0;
          $R$3$i188 = $R$1$i183;
         } else {
          $fd$i177 = $v$4$lcssa$i + 8 | 0;
          $47 = HEAP32[$fd$i177 >> 2] | 0;
          $bk145$i = $47 + 12 | 0;
          HEAP32[$bk145$i >> 2] = $46;
          $fd146$i = $46 + 8 | 0;
          HEAP32[$fd146$i >> 2] = $47;
          $R$3$i188 = $46;
         }
        } while (0);
        $cmp180$i = ($45 | 0) == (0 | 0);
        do {
         if ($cmp180$i) {
          $61 = $35;
         } else {
          $index$i189 = $v$4$lcssa$i + 28 | 0;
          $52 = HEAP32[$index$i189 >> 2] | 0;
          $arrayidx184$i = 576868 + ($52 << 2) | 0;
          $53 = HEAP32[$arrayidx184$i >> 2] | 0;
          $cmp185$i = ($v$4$lcssa$i | 0) == ($53 | 0);
          if ($cmp185$i) {
           HEAP32[$arrayidx184$i >> 2] = $R$3$i188;
           $cond3$i = ($R$3$i188 | 0) == (0 | 0);
           if ($cond3$i) {
            $shl192$i = 1 << $52;
            $neg$i190 = $shl192$i ^ -1;
            $and194$i191 = $35 & $neg$i190;
            HEAP32[576568 >> 2] = $and194$i191;
            $61 = $and194$i191;
            break;
           }
          } else {
           $arrayidx204$i = $45 + 16 | 0;
           $54 = HEAP32[$arrayidx204$i >> 2] | 0;
           $cmp205$i = ($54 | 0) == ($v$4$lcssa$i | 0);
           $arrayidx212$i = $45 + 20 | 0;
           $arrayidx212$i$sink = $cmp205$i ? $arrayidx204$i : $arrayidx212$i;
           HEAP32[$arrayidx212$i$sink >> 2] = $R$3$i188;
           $cmp217$i = ($R$3$i188 | 0) == (0 | 0);
           if ($cmp217$i) {
            $61 = $35;
            break;
           }
          }
          $parent226$i = $R$3$i188 + 24 | 0;
          HEAP32[$parent226$i >> 2] = $45;
          $arrayidx228$i = $v$4$lcssa$i + 16 | 0;
          $55 = HEAP32[$arrayidx228$i >> 2] | 0;
          $cmp229$i = ($55 | 0) == (0 | 0);
          if (!$cmp229$i) {
           $arrayidx239$i = $R$3$i188 + 16 | 0;
           HEAP32[$arrayidx239$i >> 2] = $55;
           $parent240$i = $55 + 24 | 0;
           HEAP32[$parent240$i >> 2] = $R$3$i188;
          }
          $arrayidx245$i = $v$4$lcssa$i + 20 | 0;
          $56 = HEAP32[$arrayidx245$i >> 2] | 0;
          $cmp246$i = ($56 | 0) == (0 | 0);
          if ($cmp246$i) {
           $61 = $35;
          } else {
           $arrayidx256$i = $R$3$i188 + 20 | 0;
           HEAP32[$arrayidx256$i >> 2] = $56;
           $parent257$i = $56 + 24 | 0;
           HEAP32[$parent257$i >> 2] = $R$3$i188;
           $61 = $35;
          }
         }
        } while (0);
        $cmp265$i = $rsize$4$lcssa$i >>> 0 < 16;
        L128 : do {
         if ($cmp265$i) {
          $add268$i = $rsize$4$lcssa$i + $and145 | 0;
          $or270$i = $add268$i | 3;
          $head271$i = $v$4$lcssa$i + 4 | 0;
          HEAP32[$head271$i >> 2] = $or270$i;
          $add$ptr273$i = $v$4$lcssa$i + $add268$i | 0;
          $head274$i = $add$ptr273$i + 4 | 0;
          $57 = HEAP32[$head274$i >> 2] | 0;
          $or275$i = $57 | 1;
          HEAP32[$head274$i >> 2] = $or275$i;
         } else {
          $or278$i = $and145 | 3;
          $head279$i = $v$4$lcssa$i + 4 | 0;
          HEAP32[$head279$i >> 2] = $or278$i;
          $or280$i = $rsize$4$lcssa$i | 1;
          $head281$i = $add$ptr$i174 + 4 | 0;
          HEAP32[$head281$i >> 2] = $or280$i;
          $add$ptr282$i = $add$ptr$i174 + $rsize$4$lcssa$i | 0;
          HEAP32[$add$ptr282$i >> 2] = $rsize$4$lcssa$i;
          $shr283$i = $rsize$4$lcssa$i >>> 3;
          $cmp284$i = $rsize$4$lcssa$i >>> 0 < 256;
          if ($cmp284$i) {
           $shl288$i = $shr283$i << 1;
           $arrayidx289$i = 576604 + ($shl288$i << 2) | 0;
           $58 = HEAP32[144141] | 0;
           $shl291$i = 1 << $shr283$i;
           $and292$i = $58 & $shl291$i;
           $tobool293$i = ($and292$i | 0) == 0;
           if ($tobool293$i) {
            $or297$i = $58 | $shl291$i;
            HEAP32[144141] = $or297$i;
            $$pre$i194 = $arrayidx289$i + 8 | 0;
            $$pre$phi$i195Z2D = $$pre$i194;
            $F290$0$i = $arrayidx289$i;
           } else {
            $59 = $arrayidx289$i + 8 | 0;
            $60 = HEAP32[$59 >> 2] | 0;
            $$pre$phi$i195Z2D = $59;
            $F290$0$i = $60;
           }
           HEAP32[$$pre$phi$i195Z2D >> 2] = $add$ptr$i174;
           $bk311$i = $F290$0$i + 12 | 0;
           HEAP32[$bk311$i >> 2] = $add$ptr$i174;
           $fd312$i = $add$ptr$i174 + 8 | 0;
           HEAP32[$fd312$i >> 2] = $F290$0$i;
           $bk313$i = $add$ptr$i174 + 12 | 0;
           HEAP32[$bk313$i >> 2] = $arrayidx289$i;
           break;
          }
          $shr318$i = $rsize$4$lcssa$i >>> 8;
          $cmp319$i = ($shr318$i | 0) == 0;
          if ($cmp319$i) {
           $I316$0$i = 0;
          } else {
           $cmp323$i = $rsize$4$lcssa$i >>> 0 > 16777215;
           if ($cmp323$i) {
            $I316$0$i = 31;
           } else {
            $sub329$i = $shr318$i + 1048320 | 0;
            $shr330$i = $sub329$i >>> 16;
            $and331$i = $shr330$i & 8;
            $shl333$i = $shr318$i << $and331$i;
            $sub334$i = $shl333$i + 520192 | 0;
            $shr335$i = $sub334$i >>> 16;
            $and336$i = $shr335$i & 4;
            $add337$i = $and336$i | $and331$i;
            $shl338$i = $shl333$i << $and336$i;
            $sub339$i = $shl338$i + 245760 | 0;
            $shr340$i = $sub339$i >>> 16;
            $and341$i = $shr340$i & 2;
            $add342$i = $add337$i | $and341$i;
            $sub343$i = 14 - $add342$i | 0;
            $shl344$i = $shl338$i << $and341$i;
            $shr345$i = $shl344$i >>> 15;
            $add346$i = $sub343$i + $shr345$i | 0;
            $shl347$i = $add346$i << 1;
            $add348$i = $add346$i + 7 | 0;
            $shr349$i = $rsize$4$lcssa$i >>> $add348$i;
            $and350$i = $shr349$i & 1;
            $add351$i = $and350$i | $shl347$i;
            $I316$0$i = $add351$i;
           }
          }
          $arrayidx355$i = 576868 + ($I316$0$i << 2) | 0;
          $index356$i = $add$ptr$i174 + 28 | 0;
          HEAP32[$index356$i >> 2] = $I316$0$i;
          $child357$i = $add$ptr$i174 + 16 | 0;
          $arrayidx358$i = $child357$i + 4 | 0;
          HEAP32[$arrayidx358$i >> 2] = 0;
          HEAP32[$child357$i >> 2] = 0;
          $shl362$i = 1 << $I316$0$i;
          $and363$i = $shl362$i & $61;
          $tobool364$i = ($and363$i | 0) == 0;
          if ($tobool364$i) {
           $or368$i = $shl362$i | $61;
           HEAP32[576568 >> 2] = $or368$i;
           HEAP32[$arrayidx355$i >> 2] = $add$ptr$i174;
           $parent369$i = $add$ptr$i174 + 24 | 0;
           HEAP32[$parent369$i >> 2] = $arrayidx355$i;
           $bk370$i = $add$ptr$i174 + 12 | 0;
           HEAP32[$bk370$i >> 2] = $add$ptr$i174;
           $fd371$i = $add$ptr$i174 + 8 | 0;
           HEAP32[$fd371$i >> 2] = $add$ptr$i174;
           break;
          }
          $62 = HEAP32[$arrayidx355$i >> 2] | 0;
          $head38611$i = $62 + 4 | 0;
          $63 = HEAP32[$head38611$i >> 2] | 0;
          $and38712$i = $63 & -8;
          $cmp38813$i = ($and38712$i | 0) == ($rsize$4$lcssa$i | 0);
          L145 : do {
           if ($cmp38813$i) {
            $T$0$lcssa$i = $62;
           } else {
            $cmp374$i = ($I316$0$i | 0) == 31;
            $shr378$i = $I316$0$i >>> 1;
            $sub381$i = 25 - $shr378$i | 0;
            $cond383$i = $cmp374$i ? 0 : $sub381$i;
            $shl384$i = $rsize$4$lcssa$i << $cond383$i;
            $K373$015$i = $shl384$i;
            $T$014$i = $62;
            while (1) {
             $shr392$i = $K373$015$i >>> 31;
             $arrayidx394$i = ($T$014$i + 16 | 0) + ($shr392$i << 2) | 0;
             $64 = HEAP32[$arrayidx394$i >> 2] | 0;
             $cmp396$i = ($64 | 0) == (0 | 0);
             if ($cmp396$i) {
              break;
             }
             $shl395$i = $K373$015$i << 1;
             $head386$i = $64 + 4 | 0;
             $65 = HEAP32[$head386$i >> 2] | 0;
             $and387$i = $65 & -8;
             $cmp388$i = ($and387$i | 0) == ($rsize$4$lcssa$i | 0);
             if ($cmp388$i) {
              $T$0$lcssa$i = $64;
              break L145;
             } else {
              $K373$015$i = $shl395$i;
              $T$014$i = $64;
             }
            }
            HEAP32[$arrayidx394$i >> 2] = $add$ptr$i174;
            $parent406$i = $add$ptr$i174 + 24 | 0;
            HEAP32[$parent406$i >> 2] = $T$014$i;
            $bk407$i = $add$ptr$i174 + 12 | 0;
            HEAP32[$bk407$i >> 2] = $add$ptr$i174;
            $fd408$i = $add$ptr$i174 + 8 | 0;
            HEAP32[$fd408$i >> 2] = $add$ptr$i174;
            break L128;
           }
          } while (0);
          $fd416$i = $T$0$lcssa$i + 8 | 0;
          $66 = HEAP32[$fd416$i >> 2] | 0;
          $bk429$i = $66 + 12 | 0;
          HEAP32[$bk429$i >> 2] = $add$ptr$i174;
          HEAP32[$fd416$i >> 2] = $add$ptr$i174;
          $fd431$i = $add$ptr$i174 + 8 | 0;
          HEAP32[$fd431$i >> 2] = $66;
          $bk432$i = $add$ptr$i174 + 12 | 0;
          HEAP32[$bk432$i >> 2] = $T$0$lcssa$i;
          $parent433$i = $add$ptr$i174 + 24 | 0;
          HEAP32[$parent433$i >> 2] = 0;
         }
        } while (0);
        $add$ptr441$i = $v$4$lcssa$i + 8 | 0;
        $retval$0 = $add$ptr441$i;
        STACKTOP = sp;
        return $retval$0 | 0;
       } else {
        $nb$0 = $and145;
       }
      } else {
       $nb$0 = $and145;
      }
     }
    }
   }
  }
 } while (0);
 $67 = HEAP32[576572 >> 2] | 0;
 $cmp156 = $67 >>> 0 < $nb$0 >>> 0;
 if (!$cmp156) {
  $sub160 = $67 - $nb$0 | 0;
  $68 = HEAP32[576584 >> 2] | 0;
  $cmp162 = $sub160 >>> 0 > 15;
  if ($cmp162) {
   $add$ptr166 = $68 + $nb$0 | 0;
   HEAP32[576584 >> 2] = $add$ptr166;
   HEAP32[576572 >> 2] = $sub160;
   $or167 = $sub160 | 1;
   $head168 = $add$ptr166 + 4 | 0;
   HEAP32[$head168 >> 2] = $or167;
   $add$ptr169 = $68 + $67 | 0;
   HEAP32[$add$ptr169 >> 2] = $sub160;
   $or172 = $nb$0 | 3;
   $head173 = $68 + 4 | 0;
   HEAP32[$head173 >> 2] = $or172;
  } else {
   HEAP32[576572 >> 2] = 0;
   HEAP32[576584 >> 2] = 0;
   $or176 = $67 | 3;
   $head177 = $68 + 4 | 0;
   HEAP32[$head177 >> 2] = $or176;
   $add$ptr178 = $68 + $67 | 0;
   $head179 = $add$ptr178 + 4 | 0;
   $69 = HEAP32[$head179 >> 2] | 0;
   $or180 = $69 | 1;
   HEAP32[$head179 >> 2] = $or180;
  }
  $add$ptr182 = $68 + 8 | 0;
  $retval$0 = $add$ptr182;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $70 = HEAP32[576576 >> 2] | 0;
 $cmp186 = $70 >>> 0 > $nb$0 >>> 0;
 if ($cmp186) {
  $sub190 = $70 - $nb$0 | 0;
  HEAP32[576576 >> 2] = $sub190;
  $71 = HEAP32[576588 >> 2] | 0;
  $add$ptr193 = $71 + $nb$0 | 0;
  HEAP32[576588 >> 2] = $add$ptr193;
  $or194 = $sub190 | 1;
  $head195 = $add$ptr193 + 4 | 0;
  HEAP32[$head195 >> 2] = $or194;
  $or197 = $nb$0 | 3;
  $head198 = $71 + 4 | 0;
  HEAP32[$head198 >> 2] = $or197;
  $add$ptr199 = $71 + 8 | 0;
  $retval$0 = $add$ptr199;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $72 = HEAP32[144259] | 0;
 $cmp$i133 = ($72 | 0) == 0;
 if ($cmp$i133) {
  HEAP32[577044 >> 2] = 4096;
  HEAP32[577040 >> 2] = 4096;
  HEAP32[577048 >> 2] = -1;
  HEAP32[577052 >> 2] = -1;
  HEAP32[577056 >> 2] = 0;
  HEAP32[577008 >> 2] = 0;
  $73 = $magic$i$i;
  $xor$i$i = $73 & -16;
  $and6$i$i = $xor$i$i ^ 1431655768;
  HEAP32[144259] = $and6$i$i;
  $74 = 4096;
 } else {
  $$pre$i134 = HEAP32[577044 >> 2] | 0;
  $74 = $$pre$i134;
 }
 $add$i135 = $nb$0 + 48 | 0;
 $sub$i136 = $nb$0 + 47 | 0;
 $add9$i = $74 + $sub$i136 | 0;
 $neg$i137 = 0 - $74 | 0;
 $and11$i = $add9$i & $neg$i137;
 $cmp12$i = $and11$i >>> 0 > $nb$0 >>> 0;
 if (!$cmp12$i) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $75 = HEAP32[577004 >> 2] | 0;
 $cmp15$i = ($75 | 0) == 0;
 if (!$cmp15$i) {
  $76 = HEAP32[576996 >> 2] | 0;
  $add17$i = $76 + $and11$i | 0;
  $cmp19$i = $add17$i >>> 0 <= $76 >>> 0;
  $cmp21$i = $add17$i >>> 0 > $75 >>> 0;
  $or$cond1$i = $cmp19$i | $cmp21$i;
  if ($or$cond1$i) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 $77 = HEAP32[577008 >> 2] | 0;
 $and29$i = $77 & 4;
 $tobool30$i = ($and29$i | 0) == 0;
 L178 : do {
  if ($tobool30$i) {
   $78 = HEAP32[576588 >> 2] | 0;
   $cmp32$i138 = ($78 | 0) == (0 | 0);
   L180 : do {
    if ($cmp32$i138) {
     label = 128;
    } else {
     $sp$0$i$i = 577012;
     while (1) {
      $79 = HEAP32[$sp$0$i$i >> 2] | 0;
      $cmp$i55$i = $79 >>> 0 > $78 >>> 0;
      if (!$cmp$i55$i) {
       $size$i$i = $sp$0$i$i + 4 | 0;
       $80 = HEAP32[$size$i$i >> 2] | 0;
       $add$ptr$i57$i = $79 + $80 | 0;
       $cmp2$i$i = $add$ptr$i57$i >>> 0 > $78 >>> 0;
       if ($cmp2$i$i) {
        break;
       }
      }
      $next$i$i = $sp$0$i$i + 8 | 0;
      $81 = HEAP32[$next$i$i >> 2] | 0;
      $cmp3$i$i = ($81 | 0) == (0 | 0);
      if ($cmp3$i$i) {
       label = 128;
       break L180;
      } else {
       $sp$0$i$i = $81;
      }
     }
     $add77$i = $add9$i - $70 | 0;
     $and80$i = $add77$i & $neg$i137;
     $cmp81$i = $and80$i >>> 0 < 2147483647;
     if ($cmp81$i) {
      $call83$i = _sbrk($and80$i | 0) | 0;
      $86 = HEAP32[$sp$0$i$i >> 2] | 0;
      $87 = HEAP32[$size$i$i >> 2] | 0;
      $add$ptr$i141 = $86 + $87 | 0;
      $cmp85$i = ($call83$i | 0) == ($add$ptr$i141 | 0);
      if ($cmp85$i) {
       $cmp89$i = ($call83$i | 0) == (-1 | 0);
       if ($cmp89$i) {
        $tsize$2647482$i = $and80$i;
       } else {
        $tbase$795$i = $call83$i;
        $tsize$794$i = $and80$i;
        label = 145;
        break L178;
       }
      } else {
       $br$2$ph$i = $call83$i;
       $ssize$2$ph$i = $and80$i;
       label = 136;
      }
     } else {
      $tsize$2647482$i = 0;
     }
    }
   } while (0);
   do {
    if ((label | 0) == 128) {
     $call37$i = _sbrk(0) | 0;
     $cmp38$i = ($call37$i | 0) == (-1 | 0);
     if ($cmp38$i) {
      $tsize$2647482$i = 0;
     } else {
      $82 = $call37$i;
      $83 = HEAP32[577040 >> 2] | 0;
      $sub41$i = $83 + -1 | 0;
      $and42$i = $sub41$i & $82;
      $cmp43$i = ($and42$i | 0) == 0;
      $add46$i = $sub41$i + $82 | 0;
      $neg48$i = 0 - $83 | 0;
      $and49$i = $add46$i & $neg48$i;
      $sub50$i = $and49$i - $82 | 0;
      $add51$i = $cmp43$i ? 0 : $sub50$i;
      $spec$select96$i = $add51$i + $and11$i | 0;
      $84 = HEAP32[576996 >> 2] | 0;
      $add54$i = $spec$select96$i + $84 | 0;
      $cmp55$i = $spec$select96$i >>> 0 > $nb$0 >>> 0;
      $cmp57$i = $spec$select96$i >>> 0 < 2147483647;
      $or$cond$i = $cmp55$i & $cmp57$i;
      if ($or$cond$i) {
       $85 = HEAP32[577004 >> 2] | 0;
       $cmp60$i = ($85 | 0) == 0;
       if (!$cmp60$i) {
        $cmp63$i = $add54$i >>> 0 <= $84 >>> 0;
        $cmp66$i140 = $add54$i >>> 0 > $85 >>> 0;
        $or$cond2$i = $cmp63$i | $cmp66$i140;
        if ($or$cond2$i) {
         $tsize$2647482$i = 0;
         break;
        }
       }
       $call68$i = _sbrk($spec$select96$i | 0) | 0;
       $cmp69$i = ($call68$i | 0) == ($call37$i | 0);
       if ($cmp69$i) {
        $tbase$795$i = $call37$i;
        $tsize$794$i = $spec$select96$i;
        label = 145;
        break L178;
       } else {
        $br$2$ph$i = $call68$i;
        $ssize$2$ph$i = $spec$select96$i;
        label = 136;
       }
      } else {
       $tsize$2647482$i = 0;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 136) {
     $sub112$i = 0 - $ssize$2$ph$i | 0;
     $cmp91$i = ($br$2$ph$i | 0) != (-1 | 0);
     $cmp93$i = $ssize$2$ph$i >>> 0 < 2147483647;
     $or$cond5$i = $cmp93$i & $cmp91$i;
     $cmp96$i = $add$i135 >>> 0 > $ssize$2$ph$i >>> 0;
     $or$cond7$i = $cmp96$i & $or$cond5$i;
     if (!$or$cond7$i) {
      $cmp118$i = ($br$2$ph$i | 0) == (-1 | 0);
      if ($cmp118$i) {
       $tsize$2647482$i = 0;
       break;
      } else {
       $tbase$795$i = $br$2$ph$i;
       $tsize$794$i = $ssize$2$ph$i;
       label = 145;
       break L178;
      }
     }
     $88 = HEAP32[577044 >> 2] | 0;
     $sub99$i = $sub$i136 - $ssize$2$ph$i | 0;
     $add101$i = $sub99$i + $88 | 0;
     $neg103$i = 0 - $88 | 0;
     $and104$i = $add101$i & $neg103$i;
     $cmp105$i = $and104$i >>> 0 < 2147483647;
     if (!$cmp105$i) {
      $tbase$795$i = $br$2$ph$i;
      $tsize$794$i = $ssize$2$ph$i;
      label = 145;
      break L178;
     }
     $call107$i = _sbrk($and104$i | 0) | 0;
     $cmp108$i = ($call107$i | 0) == (-1 | 0);
     if ($cmp108$i) {
      _sbrk($sub112$i | 0) | 0;
      $tsize$2647482$i = 0;
      break;
     } else {
      $add110$i = $and104$i + $ssize$2$ph$i | 0;
      $tbase$795$i = $br$2$ph$i;
      $tsize$794$i = $add110$i;
      label = 145;
      break L178;
     }
    }
   } while (0);
   $89 = HEAP32[577008 >> 2] | 0;
   $or$i = $89 | 4;
   HEAP32[577008 >> 2] = $or$i;
   $tsize$4$i = $tsize$2647482$i;
   label = 143;
  } else {
   $tsize$4$i = 0;
   label = 143;
  }
 } while (0);
 if ((label | 0) == 143) {
  $cmp127$i = $and11$i >>> 0 < 2147483647;
  if ($cmp127$i) {
   $call131$i = _sbrk($and11$i | 0) | 0;
   $call132$i = _sbrk(0) | 0;
   $cmp133$i = ($call131$i | 0) != (-1 | 0);
   $cmp135$i = ($call132$i | 0) != (-1 | 0);
   $or$cond4$i = $cmp133$i & $cmp135$i;
   $cmp137$i = $call131$i >>> 0 < $call132$i >>> 0;
   $or$cond8$i = $cmp137$i & $or$cond4$i;
   $sub$ptr$lhs$cast$i = $call132$i;
   $sub$ptr$rhs$cast$i = $call131$i;
   $sub$ptr$sub$i = $sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i | 0;
   $add140$i = $nb$0 + 40 | 0;
   $cmp141$i = $sub$ptr$sub$i >>> 0 > $add140$i >>> 0;
   $spec$select9$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $cmp14799$i = ($call131$i | 0) == (-1 | 0);
   $not$cmp141$i = $cmp141$i ^ 1;
   $cmp147$i = $cmp14799$i | $not$cmp141$i;
   $or$cond97$i = $cmp147$i | $or$cond8$not$i;
   if (!$or$cond97$i) {
    $tbase$795$i = $call131$i;
    $tsize$794$i = $spec$select9$i;
    label = 145;
   }
  }
 }
 if ((label | 0) == 145) {
  $90 = HEAP32[576996 >> 2] | 0;
  $add150$i = $90 + $tsize$794$i | 0;
  HEAP32[576996 >> 2] = $add150$i;
  $91 = HEAP32[577e3 >> 2] | 0;
  $cmp151$i = $add150$i >>> 0 > $91 >>> 0;
  if ($cmp151$i) {
   HEAP32[577e3 >> 2] = $add150$i;
  }
  $92 = HEAP32[576588 >> 2] | 0;
  $cmp157$i = ($92 | 0) == (0 | 0);
  L215 : do {
   if ($cmp157$i) {
    $93 = HEAP32[576580 >> 2] | 0;
    $cmp159$i = ($93 | 0) == (0 | 0);
    $cmp162$i = $tbase$795$i >>> 0 < $93 >>> 0;
    $or$cond11$i = $cmp159$i | $cmp162$i;
    if ($or$cond11$i) {
     HEAP32[576580 >> 2] = $tbase$795$i;
    }
    HEAP32[577012 >> 2] = $tbase$795$i;
    HEAP32[577016 >> 2] = $tsize$794$i;
    HEAP32[577024 >> 2] = 0;
    $94 = HEAP32[144259] | 0;
    HEAP32[576600 >> 2] = $94;
    HEAP32[576596 >> 2] = -1;
    HEAP32[576616 >> 2] = 576604;
    HEAP32[576612 >> 2] = 576604;
    HEAP32[576624 >> 2] = 576612;
    HEAP32[576620 >> 2] = 576612;
    HEAP32[576632 >> 2] = 576620;
    HEAP32[576628 >> 2] = 576620;
    HEAP32[576640 >> 2] = 576628;
    HEAP32[576636 >> 2] = 576628;
    HEAP32[576648 >> 2] = 576636;
    HEAP32[576644 >> 2] = 576636;
    HEAP32[576656 >> 2] = 576644;
    HEAP32[576652 >> 2] = 576644;
    HEAP32[576664 >> 2] = 576652;
    HEAP32[576660 >> 2] = 576652;
    HEAP32[576672 >> 2] = 576660;
    HEAP32[576668 >> 2] = 576660;
    HEAP32[576680 >> 2] = 576668;
    HEAP32[576676 >> 2] = 576668;
    HEAP32[576688 >> 2] = 576676;
    HEAP32[576684 >> 2] = 576676;
    HEAP32[576696 >> 2] = 576684;
    HEAP32[576692 >> 2] = 576684;
    HEAP32[576704 >> 2] = 576692;
    HEAP32[576700 >> 2] = 576692;
    HEAP32[576712 >> 2] = 576700;
    HEAP32[576708 >> 2] = 576700;
    HEAP32[576720 >> 2] = 576708;
    HEAP32[576716 >> 2] = 576708;
    HEAP32[576728 >> 2] = 576716;
    HEAP32[576724 >> 2] = 576716;
    HEAP32[576736 >> 2] = 576724;
    HEAP32[576732 >> 2] = 576724;
    HEAP32[576744 >> 2] = 576732;
    HEAP32[576740 >> 2] = 576732;
    HEAP32[576752 >> 2] = 576740;
    HEAP32[576748 >> 2] = 576740;
    HEAP32[576760 >> 2] = 576748;
    HEAP32[576756 >> 2] = 576748;
    HEAP32[576768 >> 2] = 576756;
    HEAP32[576764 >> 2] = 576756;
    HEAP32[576776 >> 2] = 576764;
    HEAP32[576772 >> 2] = 576764;
    HEAP32[576784 >> 2] = 576772;
    HEAP32[576780 >> 2] = 576772;
    HEAP32[576792 >> 2] = 576780;
    HEAP32[576788 >> 2] = 576780;
    HEAP32[576800 >> 2] = 576788;
    HEAP32[576796 >> 2] = 576788;
    HEAP32[576808 >> 2] = 576796;
    HEAP32[576804 >> 2] = 576796;
    HEAP32[576816 >> 2] = 576804;
    HEAP32[576812 >> 2] = 576804;
    HEAP32[576824 >> 2] = 576812;
    HEAP32[576820 >> 2] = 576812;
    HEAP32[576832 >> 2] = 576820;
    HEAP32[576828 >> 2] = 576820;
    HEAP32[576840 >> 2] = 576828;
    HEAP32[576836 >> 2] = 576828;
    HEAP32[576848 >> 2] = 576836;
    HEAP32[576844 >> 2] = 576836;
    HEAP32[576856 >> 2] = 576844;
    HEAP32[576852 >> 2] = 576844;
    HEAP32[576864 >> 2] = 576852;
    HEAP32[576860 >> 2] = 576852;
    $sub172$i = $tsize$794$i + -40 | 0;
    $add$ptr$i43$i = $tbase$795$i + 8 | 0;
    $95 = $add$ptr$i43$i;
    $and$i44$i = $95 & 7;
    $cmp$i45$i = ($and$i44$i | 0) == 0;
    $sub$i46$i = 0 - $95 | 0;
    $and3$i47$i = $sub$i46$i & 7;
    $cond$i48$i = $cmp$i45$i ? 0 : $and3$i47$i;
    $add$ptr4$i49$i = $tbase$795$i + $cond$i48$i | 0;
    $sub5$i50$i = $sub172$i - $cond$i48$i | 0;
    HEAP32[576588 >> 2] = $add$ptr4$i49$i;
    HEAP32[576576 >> 2] = $sub5$i50$i;
    $or$i51$i = $sub5$i50$i | 1;
    $head$i52$i = $add$ptr4$i49$i + 4 | 0;
    HEAP32[$head$i52$i >> 2] = $or$i51$i;
    $add$ptr6$i53$i = $tbase$795$i + $sub172$i | 0;
    $head7$i54$i = $add$ptr6$i53$i + 4 | 0;
    HEAP32[$head7$i54$i >> 2] = 40;
    $96 = HEAP32[577052 >> 2] | 0;
    HEAP32[576592 >> 2] = $96;
   } else {
    $sp$0112$i = 577012;
    while (1) {
     $97 = HEAP32[$sp$0112$i >> 2] | 0;
     $size188$i = $sp$0112$i + 4 | 0;
     $98 = HEAP32[$size188$i >> 2] | 0;
     $add$ptr189$i = $97 + $98 | 0;
     $cmp190$i = ($tbase$795$i | 0) == ($add$ptr189$i | 0);
     if ($cmp190$i) {
      label = 154;
      break;
     }
     $next$i = $sp$0112$i + 8 | 0;
     $99 = HEAP32[$next$i >> 2] | 0;
     $cmp186$i = ($99 | 0) == (0 | 0);
     if ($cmp186$i) {
      break;
     } else {
      $sp$0112$i = $99;
     }
    }
    if ((label | 0) == 154) {
     $sflags193$i = $sp$0112$i + 12 | 0;
     $100 = HEAP32[$sflags193$i >> 2] | 0;
     $and194$i = $100 & 8;
     $tobool195$i = ($and194$i | 0) == 0;
     if ($tobool195$i) {
      $cmp203$i = $97 >>> 0 <= $92 >>> 0;
      $cmp209$i = $tbase$795$i >>> 0 > $92 >>> 0;
      $or$cond98$i = $cmp209$i & $cmp203$i;
      if ($or$cond98$i) {
       $add212$i = $98 + $tsize$794$i | 0;
       HEAP32[$size188$i >> 2] = $add212$i;
       $101 = HEAP32[576576 >> 2] | 0;
       $add215$i = $101 + $tsize$794$i | 0;
       $add$ptr$i35$i = $92 + 8 | 0;
       $102 = $add$ptr$i35$i;
       $and$i36$i = $102 & 7;
       $cmp$i37$i = ($and$i36$i | 0) == 0;
       $sub$i38$i = 0 - $102 | 0;
       $and3$i39$i = $sub$i38$i & 7;
       $cond$i40$i = $cmp$i37$i ? 0 : $and3$i39$i;
       $add$ptr4$i41$i = $92 + $cond$i40$i | 0;
       $sub5$i$i = $add215$i - $cond$i40$i | 0;
       HEAP32[576588 >> 2] = $add$ptr4$i41$i;
       HEAP32[576576 >> 2] = $sub5$i$i;
       $or$i$i = $sub5$i$i | 1;
       $head$i42$i = $add$ptr4$i41$i + 4 | 0;
       HEAP32[$head$i42$i >> 2] = $or$i$i;
       $add$ptr6$i$i = $92 + $add215$i | 0;
       $head7$i$i = $add$ptr6$i$i + 4 | 0;
       HEAP32[$head7$i$i >> 2] = 40;
       $103 = HEAP32[577052 >> 2] | 0;
       HEAP32[576592 >> 2] = $103;
       break;
      }
     }
    }
    $104 = HEAP32[576580 >> 2] | 0;
    $cmp218$i = $tbase$795$i >>> 0 < $104 >>> 0;
    if ($cmp218$i) {
     HEAP32[576580 >> 2] = $tbase$795$i;
    }
    $add$ptr227$i = $tbase$795$i + $tsize$794$i | 0;
    $sp$1111$i = 577012;
    while (1) {
     $105 = HEAP32[$sp$1111$i >> 2] | 0;
     $cmp228$i = ($105 | 0) == ($add$ptr227$i | 0);
     if ($cmp228$i) {
      label = 162;
      break;
     }
     $next231$i = $sp$1111$i + 8 | 0;
     $106 = HEAP32[$next231$i >> 2] | 0;
     $cmp224$i = ($106 | 0) == (0 | 0);
     if ($cmp224$i) {
      break;
     } else {
      $sp$1111$i = $106;
     }
    }
    if ((label | 0) == 162) {
     $sflags235$i = $sp$1111$i + 12 | 0;
     $107 = HEAP32[$sflags235$i >> 2] | 0;
     $and236$i = $107 & 8;
     $tobool237$i = ($and236$i | 0) == 0;
     if ($tobool237$i) {
      HEAP32[$sp$1111$i >> 2] = $tbase$795$i;
      $size245$i = $sp$1111$i + 4 | 0;
      $108 = HEAP32[$size245$i >> 2] | 0;
      $add246$i = $108 + $tsize$794$i | 0;
      HEAP32[$size245$i >> 2] = $add246$i;
      $add$ptr$i$i = $tbase$795$i + 8 | 0;
      $109 = $add$ptr$i$i;
      $and$i14$i = $109 & 7;
      $cmp$i15$i = ($and$i14$i | 0) == 0;
      $sub$i16$i = 0 - $109 | 0;
      $and3$i$i = $sub$i16$i & 7;
      $cond$i17$i = $cmp$i15$i ? 0 : $and3$i$i;
      $add$ptr4$i$i = $tbase$795$i + $cond$i17$i | 0;
      $add$ptr5$i$i = $add$ptr227$i + 8 | 0;
      $110 = $add$ptr5$i$i;
      $and6$i18$i = $110 & 7;
      $cmp7$i$i = ($and6$i18$i | 0) == 0;
      $sub12$i$i = 0 - $110 | 0;
      $and13$i$i = $sub12$i$i & 7;
      $cond15$i$i = $cmp7$i$i ? 0 : $and13$i$i;
      $add$ptr16$i$i = $add$ptr227$i + $cond15$i$i | 0;
      $sub$ptr$lhs$cast$i19$i = $add$ptr16$i$i;
      $sub$ptr$rhs$cast$i20$i = $add$ptr4$i$i;
      $sub$ptr$sub$i21$i = $sub$ptr$lhs$cast$i19$i - $sub$ptr$rhs$cast$i20$i | 0;
      $add$ptr17$i$i = $add$ptr4$i$i + $nb$0 | 0;
      $sub18$i$i = $sub$ptr$sub$i21$i - $nb$0 | 0;
      $or19$i$i = $nb$0 | 3;
      $head$i22$i = $add$ptr4$i$i + 4 | 0;
      HEAP32[$head$i22$i >> 2] = $or19$i$i;
      $cmp20$i$i = ($92 | 0) == ($add$ptr16$i$i | 0);
      L238 : do {
       if ($cmp20$i$i) {
        $111 = HEAP32[576576 >> 2] | 0;
        $add$i$i = $111 + $sub18$i$i | 0;
        HEAP32[576576 >> 2] = $add$i$i;
        HEAP32[576588 >> 2] = $add$ptr17$i$i;
        $or22$i$i = $add$i$i | 1;
        $head23$i$i = $add$ptr17$i$i + 4 | 0;
        HEAP32[$head23$i$i >> 2] = $or22$i$i;
       } else {
        $112 = HEAP32[576584 >> 2] | 0;
        $cmp24$i$i = ($112 | 0) == ($add$ptr16$i$i | 0);
        if ($cmp24$i$i) {
         $113 = HEAP32[576572 >> 2] | 0;
         $add26$i$i = $113 + $sub18$i$i | 0;
         HEAP32[576572 >> 2] = $add26$i$i;
         HEAP32[576584 >> 2] = $add$ptr17$i$i;
         $or28$i$i = $add26$i$i | 1;
         $head29$i$i = $add$ptr17$i$i + 4 | 0;
         HEAP32[$head29$i$i >> 2] = $or28$i$i;
         $add$ptr30$i$i = $add$ptr17$i$i + $add26$i$i | 0;
         HEAP32[$add$ptr30$i$i >> 2] = $add26$i$i;
         break;
        }
        $head32$i$i = $add$ptr16$i$i + 4 | 0;
        $114 = HEAP32[$head32$i$i >> 2] | 0;
        $and33$i$i = $114 & 3;
        $cmp34$i$i = ($and33$i$i | 0) == 1;
        if ($cmp34$i$i) {
         $and37$i$i = $114 & -8;
         $shr$i25$i = $114 >>> 3;
         $cmp38$i$i = $114 >>> 0 < 256;
         L246 : do {
          if ($cmp38$i$i) {
           $fd$i$i = $add$ptr16$i$i + 8 | 0;
           $115 = HEAP32[$fd$i$i >> 2] | 0;
           $bk$i26$i = $add$ptr16$i$i + 12 | 0;
           $116 = HEAP32[$bk$i26$i >> 2] | 0;
           $cmp46$i$i = ($116 | 0) == ($115 | 0);
           if ($cmp46$i$i) {
            $shl48$i$i = 1 << $shr$i25$i;
            $neg$i$i = $shl48$i$i ^ -1;
            $117 = HEAP32[144141] | 0;
            $and49$i$i = $117 & $neg$i$i;
            HEAP32[144141] = $and49$i$i;
            break;
           } else {
            $bk67$i$i = $115 + 12 | 0;
            HEAP32[$bk67$i$i >> 2] = $116;
            $fd68$i$i = $116 + 8 | 0;
            HEAP32[$fd68$i$i >> 2] = $115;
            break;
           }
          } else {
           $parent$i27$i = $add$ptr16$i$i + 24 | 0;
           $118 = HEAP32[$parent$i27$i >> 2] | 0;
           $bk74$i$i = $add$ptr16$i$i + 12 | 0;
           $119 = HEAP32[$bk74$i$i >> 2] | 0;
           $cmp75$i$i = ($119 | 0) == ($add$ptr16$i$i | 0);
           do {
            if ($cmp75$i$i) {
             $child$i$i = $add$ptr16$i$i + 16 | 0;
             $arrayidx96$i$i = $child$i$i + 4 | 0;
             $121 = HEAP32[$arrayidx96$i$i >> 2] | 0;
             $cmp97$i$i = ($121 | 0) == (0 | 0);
             if ($cmp97$i$i) {
              $122 = HEAP32[$child$i$i >> 2] | 0;
              $cmp100$i$i = ($122 | 0) == (0 | 0);
              if ($cmp100$i$i) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i$ph = $122;
               $RP$1$i$i$ph = $child$i$i;
              }
             } else {
              $R$1$i$i$ph = $121;
              $RP$1$i$i$ph = $arrayidx96$i$i;
             }
             $R$1$i$i = $R$1$i$i$ph;
             $RP$1$i$i = $RP$1$i$i$ph;
             while (1) {
              $arrayidx103$i$i = $R$1$i$i + 20 | 0;
              $123 = HEAP32[$arrayidx103$i$i >> 2] | 0;
              $cmp104$i$i = ($123 | 0) == (0 | 0);
              if ($cmp104$i$i) {
               $arrayidx107$i$i = $R$1$i$i + 16 | 0;
               $124 = HEAP32[$arrayidx107$i$i >> 2] | 0;
               $cmp108$i$i = ($124 | 0) == (0 | 0);
               if ($cmp108$i$i) {
                break;
               } else {
                $R$1$i$i$be = $124;
                $RP$1$i$i$be = $arrayidx107$i$i;
               }
              } else {
               $R$1$i$i$be = $123;
               $RP$1$i$i$be = $arrayidx103$i$i;
              }
              $R$1$i$i = $R$1$i$i$be;
              $RP$1$i$i = $RP$1$i$i$be;
             }
             HEAP32[$RP$1$i$i >> 2] = 0;
             $R$3$i$i = $R$1$i$i;
            } else {
             $fd78$i$i = $add$ptr16$i$i + 8 | 0;
             $120 = HEAP32[$fd78$i$i >> 2] | 0;
             $bk91$i$i = $120 + 12 | 0;
             HEAP32[$bk91$i$i >> 2] = $119;
             $fd92$i$i = $119 + 8 | 0;
             HEAP32[$fd92$i$i >> 2] = $120;
             $R$3$i$i = $119;
            }
           } while (0);
           $cmp120$i28$i = ($118 | 0) == (0 | 0);
           if ($cmp120$i28$i) {
            break;
           }
           $index$i29$i = $add$ptr16$i$i + 28 | 0;
           $125 = HEAP32[$index$i29$i >> 2] | 0;
           $arrayidx123$i$i = 576868 + ($125 << 2) | 0;
           $126 = HEAP32[$arrayidx123$i$i >> 2] | 0;
           $cmp124$i$i = ($126 | 0) == ($add$ptr16$i$i | 0);
           do {
            if ($cmp124$i$i) {
             HEAP32[$arrayidx123$i$i >> 2] = $R$3$i$i;
             $cond1$i$i = ($R$3$i$i | 0) == (0 | 0);
             if (!$cond1$i$i) {
              break;
             }
             $shl131$i$i = 1 << $125;
             $neg132$i$i = $shl131$i$i ^ -1;
             $127 = HEAP32[576568 >> 2] | 0;
             $and133$i$i = $127 & $neg132$i$i;
             HEAP32[576568 >> 2] = $and133$i$i;
             break L246;
            } else {
             $arrayidx143$i$i = $118 + 16 | 0;
             $128 = HEAP32[$arrayidx143$i$i >> 2] | 0;
             $cmp144$i$i = ($128 | 0) == ($add$ptr16$i$i | 0);
             $arrayidx151$i$i = $118 + 20 | 0;
             $arrayidx151$i$i$sink = $cmp144$i$i ? $arrayidx143$i$i : $arrayidx151$i$i;
             HEAP32[$arrayidx151$i$i$sink >> 2] = $R$3$i$i;
             $cmp156$i$i = ($R$3$i$i | 0) == (0 | 0);
             if ($cmp156$i$i) {
              break L246;
             }
            }
           } while (0);
           $parent165$i$i = $R$3$i$i + 24 | 0;
           HEAP32[$parent165$i$i >> 2] = $118;
           $child166$i$i = $add$ptr16$i$i + 16 | 0;
           $129 = HEAP32[$child166$i$i >> 2] | 0;
           $cmp168$i$i = ($129 | 0) == (0 | 0);
           if (!$cmp168$i$i) {
            $arrayidx178$i$i = $R$3$i$i + 16 | 0;
            HEAP32[$arrayidx178$i$i >> 2] = $129;
            $parent179$i$i = $129 + 24 | 0;
            HEAP32[$parent179$i$i >> 2] = $R$3$i$i;
           }
           $arrayidx184$i$i = $child166$i$i + 4 | 0;
           $130 = HEAP32[$arrayidx184$i$i >> 2] | 0;
           $cmp185$i$i = ($130 | 0) == (0 | 0);
           if ($cmp185$i$i) {
            break;
           }
           $arrayidx195$i$i = $R$3$i$i + 20 | 0;
           HEAP32[$arrayidx195$i$i >> 2] = $130;
           $parent196$i$i = $130 + 24 | 0;
           HEAP32[$parent196$i$i >> 2] = $R$3$i$i;
          }
         } while (0);
         $add$ptr205$i$i = $add$ptr16$i$i + $and37$i$i | 0;
         $add206$i$i = $and37$i$i + $sub18$i$i | 0;
         $oldfirst$0$i$i = $add$ptr205$i$i;
         $qsize$0$i$i = $add206$i$i;
        } else {
         $oldfirst$0$i$i = $add$ptr16$i$i;
         $qsize$0$i$i = $sub18$i$i;
        }
        $head208$i$i = $oldfirst$0$i$i + 4 | 0;
        $131 = HEAP32[$head208$i$i >> 2] | 0;
        $and209$i$i = $131 & -2;
        HEAP32[$head208$i$i >> 2] = $and209$i$i;
        $or210$i$i = $qsize$0$i$i | 1;
        $head211$i$i = $add$ptr17$i$i + 4 | 0;
        HEAP32[$head211$i$i >> 2] = $or210$i$i;
        $add$ptr212$i$i = $add$ptr17$i$i + $qsize$0$i$i | 0;
        HEAP32[$add$ptr212$i$i >> 2] = $qsize$0$i$i;
        $shr214$i$i = $qsize$0$i$i >>> 3;
        $cmp215$i$i = $qsize$0$i$i >>> 0 < 256;
        if ($cmp215$i$i) {
         $shl222$i$i = $shr214$i$i << 1;
         $arrayidx223$i$i = 576604 + ($shl222$i$i << 2) | 0;
         $132 = HEAP32[144141] | 0;
         $shl226$i$i = 1 << $shr214$i$i;
         $and227$i$i = $132 & $shl226$i$i;
         $tobool228$i$i = ($and227$i$i | 0) == 0;
         if ($tobool228$i$i) {
          $or232$i$i = $132 | $shl226$i$i;
          HEAP32[144141] = $or232$i$i;
          $$pre$i31$i = $arrayidx223$i$i + 8 | 0;
          $$pre$phi$i32$iZ2D = $$pre$i31$i;
          $F224$0$i$i = $arrayidx223$i$i;
         } else {
          $133 = $arrayidx223$i$i + 8 | 0;
          $134 = HEAP32[$133 >> 2] | 0;
          $$pre$phi$i32$iZ2D = $133;
          $F224$0$i$i = $134;
         }
         HEAP32[$$pre$phi$i32$iZ2D >> 2] = $add$ptr17$i$i;
         $bk246$i$i = $F224$0$i$i + 12 | 0;
         HEAP32[$bk246$i$i >> 2] = $add$ptr17$i$i;
         $fd247$i$i = $add$ptr17$i$i + 8 | 0;
         HEAP32[$fd247$i$i >> 2] = $F224$0$i$i;
         $bk248$i$i = $add$ptr17$i$i + 12 | 0;
         HEAP32[$bk248$i$i >> 2] = $arrayidx223$i$i;
         break;
        }
        $shr253$i$i = $qsize$0$i$i >>> 8;
        $cmp254$i$i = ($shr253$i$i | 0) == 0;
        do {
         if ($cmp254$i$i) {
          $I252$0$i$i = 0;
         } else {
          $cmp258$i$i = $qsize$0$i$i >>> 0 > 16777215;
          if ($cmp258$i$i) {
           $I252$0$i$i = 31;
           break;
          }
          $sub262$i$i = $shr253$i$i + 1048320 | 0;
          $shr263$i$i = $sub262$i$i >>> 16;
          $and264$i$i = $shr263$i$i & 8;
          $shl265$i$i = $shr253$i$i << $and264$i$i;
          $sub266$i$i = $shl265$i$i + 520192 | 0;
          $shr267$i$i = $sub266$i$i >>> 16;
          $and268$i$i = $shr267$i$i & 4;
          $add269$i$i = $and268$i$i | $and264$i$i;
          $shl270$i$i = $shl265$i$i << $and268$i$i;
          $sub271$i$i = $shl270$i$i + 245760 | 0;
          $shr272$i$i = $sub271$i$i >>> 16;
          $and273$i$i = $shr272$i$i & 2;
          $add274$i$i = $add269$i$i | $and273$i$i;
          $sub275$i$i = 14 - $add274$i$i | 0;
          $shl276$i$i = $shl270$i$i << $and273$i$i;
          $shr277$i$i = $shl276$i$i >>> 15;
          $add278$i$i = $sub275$i$i + $shr277$i$i | 0;
          $shl279$i$i = $add278$i$i << 1;
          $add280$i$i = $add278$i$i + 7 | 0;
          $shr281$i$i = $qsize$0$i$i >>> $add280$i$i;
          $and282$i$i = $shr281$i$i & 1;
          $add283$i$i = $and282$i$i | $shl279$i$i;
          $I252$0$i$i = $add283$i$i;
         }
        } while (0);
        $arrayidx287$i$i = 576868 + ($I252$0$i$i << 2) | 0;
        $index288$i$i = $add$ptr17$i$i + 28 | 0;
        HEAP32[$index288$i$i >> 2] = $I252$0$i$i;
        $child289$i$i = $add$ptr17$i$i + 16 | 0;
        $arrayidx290$i$i = $child289$i$i + 4 | 0;
        HEAP32[$arrayidx290$i$i >> 2] = 0;
        HEAP32[$child289$i$i >> 2] = 0;
        $135 = HEAP32[576568 >> 2] | 0;
        $shl294$i$i = 1 << $I252$0$i$i;
        $and295$i$i = $135 & $shl294$i$i;
        $tobool296$i$i = ($and295$i$i | 0) == 0;
        if ($tobool296$i$i) {
         $or300$i$i = $135 | $shl294$i$i;
         HEAP32[576568 >> 2] = $or300$i$i;
         HEAP32[$arrayidx287$i$i >> 2] = $add$ptr17$i$i;
         $parent301$i$i = $add$ptr17$i$i + 24 | 0;
         HEAP32[$parent301$i$i >> 2] = $arrayidx287$i$i;
         $bk302$i$i = $add$ptr17$i$i + 12 | 0;
         HEAP32[$bk302$i$i >> 2] = $add$ptr17$i$i;
         $fd303$i$i = $add$ptr17$i$i + 8 | 0;
         HEAP32[$fd303$i$i >> 2] = $add$ptr17$i$i;
         break;
        }
        $136 = HEAP32[$arrayidx287$i$i >> 2] | 0;
        $head3174$i$i = $136 + 4 | 0;
        $137 = HEAP32[$head3174$i$i >> 2] | 0;
        $and3185$i$i = $137 & -8;
        $cmp3196$i$i = ($and3185$i$i | 0) == ($qsize$0$i$i | 0);
        L291 : do {
         if ($cmp3196$i$i) {
          $T$0$lcssa$i34$i = $136;
         } else {
          $cmp306$i$i = ($I252$0$i$i | 0) == 31;
          $shr310$i$i = $I252$0$i$i >>> 1;
          $sub313$i$i = 25 - $shr310$i$i | 0;
          $cond315$i$i = $cmp306$i$i ? 0 : $sub313$i$i;
          $shl316$i$i = $qsize$0$i$i << $cond315$i$i;
          $K305$08$i$i = $shl316$i$i;
          $T$07$i$i = $136;
          while (1) {
           $shr323$i$i = $K305$08$i$i >>> 31;
           $arrayidx325$i$i = ($T$07$i$i + 16 | 0) + ($shr323$i$i << 2) | 0;
           $138 = HEAP32[$arrayidx325$i$i >> 2] | 0;
           $cmp327$i$i = ($138 | 0) == (0 | 0);
           if ($cmp327$i$i) {
            break;
           }
           $shl326$i$i = $K305$08$i$i << 1;
           $head317$i$i = $138 + 4 | 0;
           $139 = HEAP32[$head317$i$i >> 2] | 0;
           $and318$i$i = $139 & -8;
           $cmp319$i$i = ($and318$i$i | 0) == ($qsize$0$i$i | 0);
           if ($cmp319$i$i) {
            $T$0$lcssa$i34$i = $138;
            break L291;
           } else {
            $K305$08$i$i = $shl326$i$i;
            $T$07$i$i = $138;
           }
          }
          HEAP32[$arrayidx325$i$i >> 2] = $add$ptr17$i$i;
          $parent337$i$i = $add$ptr17$i$i + 24 | 0;
          HEAP32[$parent337$i$i >> 2] = $T$07$i$i;
          $bk338$i$i = $add$ptr17$i$i + 12 | 0;
          HEAP32[$bk338$i$i >> 2] = $add$ptr17$i$i;
          $fd339$i$i = $add$ptr17$i$i + 8 | 0;
          HEAP32[$fd339$i$i >> 2] = $add$ptr17$i$i;
          break L238;
         }
        } while (0);
        $fd344$i$i = $T$0$lcssa$i34$i + 8 | 0;
        $140 = HEAP32[$fd344$i$i >> 2] | 0;
        $bk357$i$i = $140 + 12 | 0;
        HEAP32[$bk357$i$i >> 2] = $add$ptr17$i$i;
        HEAP32[$fd344$i$i >> 2] = $add$ptr17$i$i;
        $fd359$i$i = $add$ptr17$i$i + 8 | 0;
        HEAP32[$fd359$i$i >> 2] = $140;
        $bk360$i$i = $add$ptr17$i$i + 12 | 0;
        HEAP32[$bk360$i$i >> 2] = $T$0$lcssa$i34$i;
        $parent361$i$i = $add$ptr17$i$i + 24 | 0;
        HEAP32[$parent361$i$i >> 2] = 0;
       }
      } while (0);
      $add$ptr369$i$i = $add$ptr4$i$i + 8 | 0;
      $retval$0 = $add$ptr369$i$i;
      STACKTOP = sp;
      return $retval$0 | 0;
     }
    }
    $sp$0$i$i$i = 577012;
    while (1) {
     $141 = HEAP32[$sp$0$i$i$i >> 2] | 0;
     $cmp$i$i$i = $141 >>> 0 > $92 >>> 0;
     if (!$cmp$i$i$i) {
      $size$i$i$i = $sp$0$i$i$i + 4 | 0;
      $142 = HEAP32[$size$i$i$i >> 2] | 0;
      $add$ptr$i$i$i = $141 + $142 | 0;
      $cmp2$i$i$i = $add$ptr$i$i$i >>> 0 > $92 >>> 0;
      if ($cmp2$i$i$i) {
       break;
      }
     }
     $next$i$i$i = $sp$0$i$i$i + 8 | 0;
     $143 = HEAP32[$next$i$i$i >> 2] | 0;
     $sp$0$i$i$i = $143;
    }
    $add$ptr2$i$i = $add$ptr$i$i$i + -47 | 0;
    $add$ptr3$i$i = $add$ptr2$i$i + 8 | 0;
    $144 = $add$ptr3$i$i;
    $and$i$i = $144 & 7;
    $cmp$i12$i = ($and$i$i | 0) == 0;
    $sub$i$i = 0 - $144 | 0;
    $and6$i13$i = $sub$i$i & 7;
    $cond$i$i = $cmp$i12$i ? 0 : $and6$i13$i;
    $add$ptr7$i$i = $add$ptr2$i$i + $cond$i$i | 0;
    $add$ptr81$i$i = $92 + 16 | 0;
    $cmp9$i$i = $add$ptr7$i$i >>> 0 < $add$ptr81$i$i >>> 0;
    $cond13$i$i = $cmp9$i$i ? $92 : $add$ptr7$i$i;
    $add$ptr14$i$i = $cond13$i$i + 8 | 0;
    $add$ptr15$i$i = $cond13$i$i + 24 | 0;
    $sub16$i$i = $tsize$794$i + -40 | 0;
    $add$ptr$i2$i$i = $tbase$795$i + 8 | 0;
    $145 = $add$ptr$i2$i$i;
    $and$i$i$i = $145 & 7;
    $cmp$i3$i$i = ($and$i$i$i | 0) == 0;
    $sub$i$i$i = 0 - $145 | 0;
    $and3$i$i$i = $sub$i$i$i & 7;
    $cond$i$i$i = $cmp$i3$i$i ? 0 : $and3$i$i$i;
    $add$ptr4$i$i$i = $tbase$795$i + $cond$i$i$i | 0;
    $sub5$i$i$i = $sub16$i$i - $cond$i$i$i | 0;
    HEAP32[576588 >> 2] = $add$ptr4$i$i$i;
    HEAP32[576576 >> 2] = $sub5$i$i$i;
    $or$i$i$i = $sub5$i$i$i | 1;
    $head$i$i$i = $add$ptr4$i$i$i + 4 | 0;
    HEAP32[$head$i$i$i >> 2] = $or$i$i$i;
    $add$ptr6$i$i$i = $tbase$795$i + $sub16$i$i | 0;
    $head7$i$i$i = $add$ptr6$i$i$i + 4 | 0;
    HEAP32[$head7$i$i$i >> 2] = 40;
    $146 = HEAP32[577052 >> 2] | 0;
    HEAP32[576592 >> 2] = $146;
    $head$i$i = $cond13$i$i + 4 | 0;
    HEAP32[$head$i$i >> 2] = 27;
    HEAP32[$add$ptr14$i$i >> 2] = HEAP32[577012 >> 2] | 0;
    HEAP32[$add$ptr14$i$i + 4 >> 2] = HEAP32[577012 + 4 >> 2] | 0;
    HEAP32[$add$ptr14$i$i + 8 >> 2] = HEAP32[577012 + 8 >> 2] | 0;
    HEAP32[$add$ptr14$i$i + 12 >> 2] = HEAP32[577012 + 12 >> 2] | 0;
    HEAP32[577012 >> 2] = $tbase$795$i;
    HEAP32[577016 >> 2] = $tsize$794$i;
    HEAP32[577024 >> 2] = 0;
    HEAP32[577020 >> 2] = $add$ptr14$i$i;
    $147 = $add$ptr15$i$i;
    while (1) {
     $add$ptr24$i$i = $147 + 4 | 0;
     HEAP32[$add$ptr24$i$i >> 2] = 7;
     $head26$i$i = $147 + 8 | 0;
     $cmp27$i$i = $head26$i$i >>> 0 < $add$ptr$i$i$i >>> 0;
     if ($cmp27$i$i) {
      $147 = $add$ptr24$i$i;
     } else {
      break;
     }
    }
    $cmp28$i$i = ($cond13$i$i | 0) == ($92 | 0);
    if (!$cmp28$i$i) {
     $sub$ptr$lhs$cast$i$i = $cond13$i$i;
     $sub$ptr$rhs$cast$i$i = $92;
     $sub$ptr$sub$i$i = $sub$ptr$lhs$cast$i$i - $sub$ptr$rhs$cast$i$i | 0;
     $148 = HEAP32[$head$i$i >> 2] | 0;
     $and32$i$i = $148 & -2;
     HEAP32[$head$i$i >> 2] = $and32$i$i;
     $or33$i$i = $sub$ptr$sub$i$i | 1;
     $head34$i$i = $92 + 4 | 0;
     HEAP32[$head34$i$i >> 2] = $or33$i$i;
     HEAP32[$cond13$i$i >> 2] = $sub$ptr$sub$i$i;
     $shr$i$i = $sub$ptr$sub$i$i >>> 3;
     $cmp36$i$i = $sub$ptr$sub$i$i >>> 0 < 256;
     if ($cmp36$i$i) {
      $shl$i$i = $shr$i$i << 1;
      $arrayidx$i$i = 576604 + ($shl$i$i << 2) | 0;
      $149 = HEAP32[144141] | 0;
      $shl39$i$i = 1 << $shr$i$i;
      $and40$i$i = $149 & $shl39$i$i;
      $tobool$i$i = ($and40$i$i | 0) == 0;
      if ($tobool$i$i) {
       $or44$i$i = $149 | $shl39$i$i;
       HEAP32[144141] = $or44$i$i;
       $$pre$i$i = $arrayidx$i$i + 8 | 0;
       $$pre$phi$i$iZ2D = $$pre$i$i;
       $F$0$i$i = $arrayidx$i$i;
      } else {
       $150 = $arrayidx$i$i + 8 | 0;
       $151 = HEAP32[$150 >> 2] | 0;
       $$pre$phi$i$iZ2D = $150;
       $F$0$i$i = $151;
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $92;
      $bk$i$i = $F$0$i$i + 12 | 0;
      HEAP32[$bk$i$i >> 2] = $92;
      $fd54$i$i = $92 + 8 | 0;
      HEAP32[$fd54$i$i >> 2] = $F$0$i$i;
      $bk55$i$i = $92 + 12 | 0;
      HEAP32[$bk55$i$i >> 2] = $arrayidx$i$i;
      break;
     }
     $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
     $cmp59$i$i = ($shr58$i$i | 0) == 0;
     if ($cmp59$i$i) {
      $I57$0$i$i = 0;
     } else {
      $cmp63$i$i = $sub$ptr$sub$i$i >>> 0 > 16777215;
      if ($cmp63$i$i) {
       $I57$0$i$i = 31;
      } else {
       $sub67$i$i = $shr58$i$i + 1048320 | 0;
       $shr68$i$i = $sub67$i$i >>> 16;
       $and69$i$i = $shr68$i$i & 8;
       $shl70$i$i = $shr58$i$i << $and69$i$i;
       $sub71$i$i = $shl70$i$i + 520192 | 0;
       $shr72$i$i = $sub71$i$i >>> 16;
       $and73$i$i = $shr72$i$i & 4;
       $add74$i$i = $and73$i$i | $and69$i$i;
       $shl75$i$i = $shl70$i$i << $and73$i$i;
       $sub76$i$i = $shl75$i$i + 245760 | 0;
       $shr77$i$i = $sub76$i$i >>> 16;
       $and78$i$i = $shr77$i$i & 2;
       $add79$i$i = $add74$i$i | $and78$i$i;
       $sub80$i$i = 14 - $add79$i$i | 0;
       $shl81$i$i = $shl75$i$i << $and78$i$i;
       $shr82$i$i = $shl81$i$i >>> 15;
       $add83$i$i = $sub80$i$i + $shr82$i$i | 0;
       $shl84$i$i = $add83$i$i << 1;
       $add85$i$i = $add83$i$i + 7 | 0;
       $shr86$i$i = $sub$ptr$sub$i$i >>> $add85$i$i;
       $and87$i$i = $shr86$i$i & 1;
       $add88$i$i = $and87$i$i | $shl84$i$i;
       $I57$0$i$i = $add88$i$i;
      }
     }
     $arrayidx91$i$i = 576868 + ($I57$0$i$i << 2) | 0;
     $index$i$i = $92 + 28 | 0;
     HEAP32[$index$i$i >> 2] = $I57$0$i$i;
     $arrayidx92$i$i = $92 + 20 | 0;
     HEAP32[$arrayidx92$i$i >> 2] = 0;
     HEAP32[$add$ptr81$i$i >> 2] = 0;
     $152 = HEAP32[576568 >> 2] | 0;
     $shl95$i$i = 1 << $I57$0$i$i;
     $and96$i$i = $152 & $shl95$i$i;
     $tobool97$i$i = ($and96$i$i | 0) == 0;
     if ($tobool97$i$i) {
      $or101$i$i = $152 | $shl95$i$i;
      HEAP32[576568 >> 2] = $or101$i$i;
      HEAP32[$arrayidx91$i$i >> 2] = $92;
      $parent$i$i = $92 + 24 | 0;
      HEAP32[$parent$i$i >> 2] = $arrayidx91$i$i;
      $bk102$i$i = $92 + 12 | 0;
      HEAP32[$bk102$i$i >> 2] = $92;
      $fd103$i$i = $92 + 8 | 0;
      HEAP32[$fd103$i$i >> 2] = $92;
      break;
     }
     $153 = HEAP32[$arrayidx91$i$i >> 2] | 0;
     $head1186$i$i = $153 + 4 | 0;
     $154 = HEAP32[$head1186$i$i >> 2] | 0;
     $and1197$i$i = $154 & -8;
     $cmp1208$i$i = ($and1197$i$i | 0) == ($sub$ptr$sub$i$i | 0);
     L325 : do {
      if ($cmp1208$i$i) {
       $T$0$lcssa$i$i = $153;
      } else {
       $cmp106$i$i = ($I57$0$i$i | 0) == 31;
       $shr110$i$i = $I57$0$i$i >>> 1;
       $sub113$i$i = 25 - $shr110$i$i | 0;
       $cond115$i$i = $cmp106$i$i ? 0 : $sub113$i$i;
       $shl116$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
       $K105$010$i$i = $shl116$i$i;
       $T$09$i$i = $153;
       while (1) {
        $shr124$i$i = $K105$010$i$i >>> 31;
        $arrayidx126$i$i = ($T$09$i$i + 16 | 0) + ($shr124$i$i << 2) | 0;
        $155 = HEAP32[$arrayidx126$i$i >> 2] | 0;
        $cmp128$i$i = ($155 | 0) == (0 | 0);
        if ($cmp128$i$i) {
         break;
        }
        $shl127$i$i = $K105$010$i$i << 1;
        $head118$i$i = $155 + 4 | 0;
        $156 = HEAP32[$head118$i$i >> 2] | 0;
        $and119$i$i = $156 & -8;
        $cmp120$i$i = ($and119$i$i | 0) == ($sub$ptr$sub$i$i | 0);
        if ($cmp120$i$i) {
         $T$0$lcssa$i$i = $155;
         break L325;
        } else {
         $K105$010$i$i = $shl127$i$i;
         $T$09$i$i = $155;
        }
       }
       HEAP32[$arrayidx126$i$i >> 2] = $92;
       $parent138$i$i = $92 + 24 | 0;
       HEAP32[$parent138$i$i >> 2] = $T$09$i$i;
       $bk139$i$i = $92 + 12 | 0;
       HEAP32[$bk139$i$i >> 2] = $92;
       $fd140$i$i = $92 + 8 | 0;
       HEAP32[$fd140$i$i >> 2] = $92;
       break L215;
      }
     } while (0);
     $fd148$i$i = $T$0$lcssa$i$i + 8 | 0;
     $157 = HEAP32[$fd148$i$i >> 2] | 0;
     $bk158$i$i = $157 + 12 | 0;
     HEAP32[$bk158$i$i >> 2] = $92;
     HEAP32[$fd148$i$i >> 2] = $92;
     $fd160$i$i = $92 + 8 | 0;
     HEAP32[$fd160$i$i >> 2] = $157;
     $bk161$i$i = $92 + 12 | 0;
     HEAP32[$bk161$i$i >> 2] = $T$0$lcssa$i$i;
     $parent162$i$i = $92 + 24 | 0;
     HEAP32[$parent162$i$i >> 2] = 0;
    }
   }
  } while (0);
  $158 = HEAP32[576576 >> 2] | 0;
  $cmp257$i = $158 >>> 0 > $nb$0 >>> 0;
  if ($cmp257$i) {
   $sub260$i = $158 - $nb$0 | 0;
   HEAP32[576576 >> 2] = $sub260$i;
   $159 = HEAP32[576588 >> 2] | 0;
   $add$ptr262$i = $159 + $nb$0 | 0;
   HEAP32[576588 >> 2] = $add$ptr262$i;
   $or264$i = $sub260$i | 1;
   $head265$i = $add$ptr262$i + 4 | 0;
   HEAP32[$head265$i >> 2] = $or264$i;
   $or267$i = $nb$0 | 3;
   $head268$i = $159 + 4 | 0;
   HEAP32[$head268$i >> 2] = $or267$i;
   $add$ptr269$i = $159 + 8 | 0;
   $retval$0 = $add$ptr269$i;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 HEAP32[144138] = 12;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _Skein_256_Process_Block($ctx, $blkPtr, $blkCnt, $byteCntAdd) {
 $ctx = $ctx | 0;
 $blkPtr = $blkPtr | 0;
 $blkCnt = $blkCnt | 0;
 $byteCntAdd = $byteCntAdd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $60$phi = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $add$ptr87 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx16 = 0, $arrayidx21 = 0;
 var $arrayidx26 = 0, $arrayidx4 = 0, $blkCnt$addr$0 = 0, $blkPtr$addr$0 = 0, $dec = 0, $tobool = 0, $w$sroa$3$0$$sroa_idx = 0, $w$sroa$5$0$$sroa_idx = 0, $w$sroa$7$0$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arrayidx = $ctx + 8 | 0;
 $0 = $arrayidx;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $arrayidx4 = $ctx + 16 | 0;
 $6 = $arrayidx4;
 $7 = $6;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $6 + 4 | 0;
 $10 = $9;
 $11 = HEAP32[$10 >> 2] | 0;
 $arrayidx11 = $ctx + 24 | 0;
 $arrayidx16 = $ctx + 32 | 0;
 $arrayidx21 = $ctx + 40 | 0;
 $arrayidx26 = $ctx + 48 | 0;
 $12 = $blkCnt + -1 | 0;
 $13 = _i64Add($12 | 0, 0, 1, 0) | 0;
 $14 = getTempRet0() | 0;
 $15 = $arrayidx11;
 $16 = $15;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = $15 + 4 | 0;
 $19 = $18;
 $20 = HEAP32[$19 >> 2] | 0;
 $21 = $arrayidx16;
 $22 = $21;
 $23 = HEAP32[$22 >> 2] | 0;
 $24 = $21 + 4 | 0;
 $25 = $24;
 $26 = HEAP32[$25 >> 2] | 0;
 $27 = $arrayidx21;
 $28 = $27;
 $29 = HEAP32[$28 >> 2] | 0;
 $30 = $27 + 4 | 0;
 $31 = $30;
 $32 = HEAP32[$31 >> 2] | 0;
 $33 = $arrayidx26;
 $34 = $33;
 $35 = HEAP32[$34 >> 2] | 0;
 $36 = $33 + 4 | 0;
 $37 = $36;
 $38 = HEAP32[$37 >> 2] | 0;
 $39 = $2;
 $40 = $5;
 $44 = $17;
 $46 = $20;
 $48 = $23;
 $50 = $26;
 $52 = $29;
 $54 = $32;
 $56 = $35;
 $58 = $38;
 $60 = $8;
 $62 = $11;
 $blkCnt$addr$0 = $blkCnt;
 $blkPtr$addr$0 = $blkPtr;
 while (1) {
  $41 = _i64Add($39 | 0, $40 | 0, $byteCntAdd | 0, 0) | 0;
  $42 = getTempRet0() | 0;
  $43 = $44 ^ -1443096030;
  $45 = $46 ^ 466688986;
  $47 = $43 ^ $48;
  $49 = $45 ^ $50;
  $51 = $47 ^ $52;
  $53 = $49 ^ $54;
  $55 = $51 ^ $56;
  $57 = $53 ^ $58;
  $59 = $41 ^ $60;
  $61 = $42 ^ $62;
  $63 = $blkPtr$addr$0;
  $64 = $63;
  $65 = HEAPU8[$64 >> 0] | HEAPU8[$64 + 1 >> 0] << 8 | HEAPU8[$64 + 2 >> 0] << 16 | HEAPU8[$64 + 3 >> 0] << 24;
  $66 = $63 + 4 | 0;
  $67 = $66;
  $68 = HEAPU8[$67 >> 0] | HEAPU8[$67 + 1 >> 0] << 8 | HEAPU8[$67 + 2 >> 0] << 16 | HEAPU8[$67 + 3 >> 0] << 24;
  $w$sroa$3$0$$sroa_idx = $blkPtr$addr$0 + 8 | 0;
  $69 = $w$sroa$3$0$$sroa_idx;
  $70 = $69;
  $71 = HEAPU8[$70 >> 0] | HEAPU8[$70 + 1 >> 0] << 8 | HEAPU8[$70 + 2 >> 0] << 16 | HEAPU8[$70 + 3 >> 0] << 24;
  $72 = $69 + 4 | 0;
  $73 = $72;
  $74 = HEAPU8[$73 >> 0] | HEAPU8[$73 + 1 >> 0] << 8 | HEAPU8[$73 + 2 >> 0] << 16 | HEAPU8[$73 + 3 >> 0] << 24;
  $w$sroa$5$0$$sroa_idx = $blkPtr$addr$0 + 16 | 0;
  $75 = $w$sroa$5$0$$sroa_idx;
  $76 = $75;
  $77 = HEAPU8[$76 >> 0] | HEAPU8[$76 + 1 >> 0] << 8 | HEAPU8[$76 + 2 >> 0] << 16 | HEAPU8[$76 + 3 >> 0] << 24;
  $78 = $75 + 4 | 0;
  $79 = $78;
  $80 = HEAPU8[$79 >> 0] | HEAPU8[$79 + 1 >> 0] << 8 | HEAPU8[$79 + 2 >> 0] << 16 | HEAPU8[$79 + 3 >> 0] << 24;
  $w$sroa$7$0$$sroa_idx = $blkPtr$addr$0 + 24 | 0;
  $81 = $w$sroa$7$0$$sroa_idx;
  $82 = $81;
  $83 = HEAPU8[$82 >> 0] | HEAPU8[$82 + 1 >> 0] << 8 | HEAPU8[$82 + 2 >> 0] << 16 | HEAPU8[$82 + 3 >> 0] << 24;
  $84 = $81 + 4 | 0;
  $85 = $84;
  $86 = HEAPU8[$85 >> 0] | HEAPU8[$85 + 1 >> 0] << 8 | HEAPU8[$85 + 2 >> 0] << 16 | HEAPU8[$85 + 3 >> 0] << 24;
  $87 = _i64Add($65 | 0, $68 | 0, $44 | 0, $46 | 0) | 0;
  $88 = getTempRet0() | 0;
  $89 = _i64Add($48 | 0, $50 | 0, $41 | 0, $42 | 0) | 0;
  $90 = getTempRet0() | 0;
  $91 = _i64Add($89 | 0, $90 | 0, $71 | 0, $74 | 0) | 0;
  $92 = getTempRet0() | 0;
  $93 = _i64Add($83 | 0, $86 | 0, $56 | 0, $58 | 0) | 0;
  $94 = getTempRet0() | 0;
  $add$ptr87 = $blkPtr$addr$0 + 32 | 0;
  $95 = _i64Add($87 | 0, $88 | 0, $91 | 0, $92 | 0) | 0;
  $96 = getTempRet0() | 0;
  $97 = _bitshift64Shl($91 | 0, $92 | 0, 14) | 0;
  $98 = getTempRet0() | 0;
  $99 = _bitshift64Lshr($91 | 0, $92 | 0, 50) | 0;
  $100 = getTempRet0() | 0;
  $101 = $97 | $99;
  $102 = $98 | $100;
  $103 = $101 ^ $95;
  $104 = $102 ^ $96;
  $105 = _i64Add($52 | 0, $54 | 0, $60 | 0, $62 | 0) | 0;
  $106 = getTempRet0() | 0;
  $107 = _i64Add($105 | 0, $106 | 0, $77 | 0, $80 | 0) | 0;
  $108 = getTempRet0() | 0;
  $109 = _i64Add($107 | 0, $108 | 0, $93 | 0, $94 | 0) | 0;
  $110 = getTempRet0() | 0;
  $111 = _bitshift64Shl($93 | 0, $94 | 0, 16) | 0;
  $112 = getTempRet0() | 0;
  $113 = _bitshift64Lshr($93 | 0, $94 | 0, 48) | 0;
  $114 = getTempRet0() | 0;
  $115 = $111 | $113;
  $116 = $112 | $114;
  $117 = $115 ^ $109;
  $118 = $116 ^ $110;
  $119 = _i64Add($117 | 0, $118 | 0, $95 | 0, $96 | 0) | 0;
  $120 = getTempRet0() | 0;
  $121 = _bitshift64Shl($117 | 0, $118 | 0, 52) | 0;
  $122 = getTempRet0() | 0;
  $123 = _bitshift64Lshr($117 | 0, $118 | 0, 12) | 0;
  $124 = getTempRet0() | 0;
  $125 = $121 | $123;
  $126 = $122 | $124;
  $127 = $125 ^ $119;
  $128 = $126 ^ $120;
  $129 = _i64Add($103 | 0, $104 | 0, $109 | 0, $110 | 0) | 0;
  $130 = getTempRet0() | 0;
  $131 = _bitshift64Shl($103 | 0, $104 | 0, 57) | 0;
  $132 = getTempRet0() | 0;
  $133 = _bitshift64Lshr($103 | 0, $104 | 0, 7) | 0;
  $134 = getTempRet0() | 0;
  $135 = $131 | $133;
  $136 = $132 | $134;
  $137 = $135 ^ $129;
  $138 = $136 ^ $130;
  $139 = _i64Add($137 | 0, $138 | 0, $119 | 0, $120 | 0) | 0;
  $140 = getTempRet0() | 0;
  $141 = _bitshift64Shl($137 | 0, $138 | 0, 23) | 0;
  $142 = getTempRet0() | 0;
  $143 = _bitshift64Lshr($137 | 0, $138 | 0, 41) | 0;
  $144 = getTempRet0() | 0;
  $145 = $141 | $143;
  $146 = $142 | $144;
  $147 = $145 ^ $139;
  $148 = $146 ^ $140;
  $149 = _i64Add($127 | 0, $128 | 0, $129 | 0, $130 | 0) | 0;
  $150 = getTempRet0() | 0;
  $151 = _bitshift64Shl($127 | 0, $128 | 0, 40) | 0;
  $152 = getTempRet0() | 0;
  $153 = _bitshift64Lshr($127 | 0, $128 | 0, 24) | 0;
  $154 = getTempRet0() | 0;
  $155 = $151 | $153;
  $156 = $152 | $154;
  $157 = $155 ^ $149;
  $158 = $156 ^ $150;
  $159 = _i64Add($157 | 0, $158 | 0, $139 | 0, $140 | 0) | 0;
  $160 = getTempRet0() | 0;
  $161 = _bitshift64Shl($157 | 0, $158 | 0, 5) | 0;
  $162 = getTempRet0() | 0;
  $163 = _bitshift64Lshr($157 | 0, $158 | 0, 59) | 0;
  $164 = getTempRet0() | 0;
  $165 = $161 | $163;
  $166 = $162 | $164;
  $167 = $165 ^ $159;
  $168 = $166 ^ $160;
  $169 = _i64Add($147 | 0, $148 | 0, $149 | 0, $150 | 0) | 0;
  $170 = getTempRet0() | 0;
  $171 = _bitshift64Shl($147 | 0, $148 | 0, 37) | 0;
  $172 = getTempRet0() | 0;
  $173 = _bitshift64Lshr($147 | 0, $148 | 0, 27) | 0;
  $174 = getTempRet0() | 0;
  $175 = $171 | $173;
  $176 = $172 | $174;
  $177 = $175 ^ $169;
  $178 = $176 ^ $170;
  $179 = _i64Add($159 | 0, $160 | 0, $48 | 0, $50 | 0) | 0;
  $180 = getTempRet0() | 0;
  $181 = _i64Add($177 | 0, $178 | 0, $105 | 0, $106 | 0) | 0;
  $182 = getTempRet0() | 0;
  $183 = _i64Add($56 | 0, $58 | 0, $59 | 0, $61 | 0) | 0;
  $184 = getTempRet0() | 0;
  $185 = _i64Add($169 | 0, $170 | 0, $183 | 0, $184 | 0) | 0;
  $186 = getTempRet0() | 0;
  $187 = _i64Add($55 | 0, $57 | 0, 1, 0) | 0;
  $188 = getTempRet0() | 0;
  $189 = _i64Add($187 | 0, $188 | 0, $167 | 0, $168 | 0) | 0;
  $190 = getTempRet0() | 0;
  $191 = _i64Add($179 | 0, $180 | 0, $181 | 0, $182 | 0) | 0;
  $192 = getTempRet0() | 0;
  $193 = _bitshift64Shl($181 | 0, $182 | 0, 25) | 0;
  $194 = getTempRet0() | 0;
  $195 = _bitshift64Lshr($181 | 0, $182 | 0, 39) | 0;
  $196 = getTempRet0() | 0;
  $197 = $193 | $195;
  $198 = $194 | $196;
  $199 = $197 ^ $191;
  $200 = $198 ^ $192;
  $201 = _i64Add($185 | 0, $186 | 0, $189 | 0, $190 | 0) | 0;
  $202 = getTempRet0() | 0;
  $203 = _bitshift64Shl($189 | 0, $190 | 0, 33) | 0;
  $204 = getTempRet0() | 0;
  $205 = _bitshift64Lshr($189 | 0, $190 | 0, 31) | 0;
  $206 = getTempRet0() | 0;
  $207 = $203 | $205;
  $208 = $204 | $206;
  $209 = $207 ^ $201;
  $210 = $208 ^ $202;
  $211 = _i64Add($209 | 0, $210 | 0, $191 | 0, $192 | 0) | 0;
  $212 = getTempRet0() | 0;
  $213 = _bitshift64Shl($209 | 0, $210 | 0, 46) | 0;
  $214 = getTempRet0() | 0;
  $215 = _bitshift64Lshr($209 | 0, $210 | 0, 18) | 0;
  $216 = getTempRet0() | 0;
  $217 = $213 | $215;
  $218 = $214 | $216;
  $219 = $217 ^ $211;
  $220 = $218 ^ $212;
  $221 = _i64Add($199 | 0, $200 | 0, $201 | 0, $202 | 0) | 0;
  $222 = getTempRet0() | 0;
  $223 = _bitshift64Shl($199 | 0, $200 | 0, 12) | 0;
  $224 = getTempRet0() | 0;
  $225 = _bitshift64Lshr($199 | 0, $200 | 0, 52) | 0;
  $226 = getTempRet0() | 0;
  $227 = $223 | $225;
  $228 = $224 | $226;
  $229 = $227 ^ $221;
  $230 = $228 ^ $222;
  $231 = _i64Add($229 | 0, $230 | 0, $211 | 0, $212 | 0) | 0;
  $232 = getTempRet0() | 0;
  $233 = _bitshift64Shl($229 | 0, $230 | 0, 58) | 0;
  $234 = getTempRet0() | 0;
  $235 = _bitshift64Lshr($229 | 0, $230 | 0, 6) | 0;
  $236 = getTempRet0() | 0;
  $237 = $233 | $235;
  $238 = $234 | $236;
  $239 = $237 ^ $231;
  $240 = $238 ^ $232;
  $241 = _i64Add($219 | 0, $220 | 0, $221 | 0, $222 | 0) | 0;
  $242 = getTempRet0() | 0;
  $243 = _bitshift64Shl($219 | 0, $220 | 0, 22) | 0;
  $244 = getTempRet0() | 0;
  $245 = _bitshift64Lshr($219 | 0, $220 | 0, 42) | 0;
  $246 = getTempRet0() | 0;
  $247 = $243 | $245;
  $248 = $244 | $246;
  $249 = $247 ^ $241;
  $250 = $248 ^ $242;
  $251 = _i64Add($249 | 0, $250 | 0, $231 | 0, $232 | 0) | 0;
  $252 = getTempRet0() | 0;
  $253 = $250 ^ $251;
  $254 = $249 ^ $252;
  $255 = _i64Add($239 | 0, $240 | 0, $241 | 0, $242 | 0) | 0;
  $256 = getTempRet0() | 0;
  $257 = $240 ^ $255;
  $258 = $239 ^ $256;
  $259 = _i64Add($251 | 0, $252 | 0, $52 | 0, $54 | 0) | 0;
  $260 = getTempRet0() | 0;
  $261 = _i64Add($257 | 0, $258 | 0, $183 | 0, $184 | 0) | 0;
  $262 = getTempRet0() | 0;
  $263 = _i64Add($55 | 0, $57 | 0, $41 | 0, $42 | 0) | 0;
  $264 = getTempRet0() | 0;
  $265 = _i64Add($255 | 0, $256 | 0, $263 | 0, $264 | 0) | 0;
  $266 = getTempRet0() | 0;
  $267 = _i64Add($44 | 0, $46 | 0, 2, 0) | 0;
  $268 = getTempRet0() | 0;
  $269 = _i64Add($267 | 0, $268 | 0, $253 | 0, $254 | 0) | 0;
  $270 = getTempRet0() | 0;
  $271 = _i64Add($259 | 0, $260 | 0, $261 | 0, $262 | 0) | 0;
  $272 = getTempRet0() | 0;
  $273 = _bitshift64Shl($261 | 0, $262 | 0, 14) | 0;
  $274 = getTempRet0() | 0;
  $275 = _bitshift64Lshr($261 | 0, $262 | 0, 50) | 0;
  $276 = getTempRet0() | 0;
  $277 = $273 | $275;
  $278 = $274 | $276;
  $279 = $277 ^ $271;
  $280 = $278 ^ $272;
  $281 = _i64Add($265 | 0, $266 | 0, $269 | 0, $270 | 0) | 0;
  $282 = getTempRet0() | 0;
  $283 = _bitshift64Shl($269 | 0, $270 | 0, 16) | 0;
  $284 = getTempRet0() | 0;
  $285 = _bitshift64Lshr($269 | 0, $270 | 0, 48) | 0;
  $286 = getTempRet0() | 0;
  $287 = $283 | $285;
  $288 = $284 | $286;
  $289 = $287 ^ $281;
  $290 = $288 ^ $282;
  $291 = _i64Add($289 | 0, $290 | 0, $271 | 0, $272 | 0) | 0;
  $292 = getTempRet0() | 0;
  $293 = _bitshift64Shl($289 | 0, $290 | 0, 52) | 0;
  $294 = getTempRet0() | 0;
  $295 = _bitshift64Lshr($289 | 0, $290 | 0, 12) | 0;
  $296 = getTempRet0() | 0;
  $297 = $293 | $295;
  $298 = $294 | $296;
  $299 = $297 ^ $291;
  $300 = $298 ^ $292;
  $301 = _i64Add($279 | 0, $280 | 0, $281 | 0, $282 | 0) | 0;
  $302 = getTempRet0() | 0;
  $303 = _bitshift64Shl($279 | 0, $280 | 0, 57) | 0;
  $304 = getTempRet0() | 0;
  $305 = _bitshift64Lshr($279 | 0, $280 | 0, 7) | 0;
  $306 = getTempRet0() | 0;
  $307 = $303 | $305;
  $308 = $304 | $306;
  $309 = $307 ^ $301;
  $310 = $308 ^ $302;
  $311 = _i64Add($309 | 0, $310 | 0, $291 | 0, $292 | 0) | 0;
  $312 = getTempRet0() | 0;
  $313 = _bitshift64Shl($309 | 0, $310 | 0, 23) | 0;
  $314 = getTempRet0() | 0;
  $315 = _bitshift64Lshr($309 | 0, $310 | 0, 41) | 0;
  $316 = getTempRet0() | 0;
  $317 = $313 | $315;
  $318 = $314 | $316;
  $319 = $317 ^ $311;
  $320 = $318 ^ $312;
  $321 = _i64Add($299 | 0, $300 | 0, $301 | 0, $302 | 0) | 0;
  $322 = getTempRet0() | 0;
  $323 = _bitshift64Shl($299 | 0, $300 | 0, 40) | 0;
  $324 = getTempRet0() | 0;
  $325 = _bitshift64Lshr($299 | 0, $300 | 0, 24) | 0;
  $326 = getTempRet0() | 0;
  $327 = $323 | $325;
  $328 = $324 | $326;
  $329 = $327 ^ $321;
  $330 = $328 ^ $322;
  $331 = _i64Add($329 | 0, $330 | 0, $311 | 0, $312 | 0) | 0;
  $332 = getTempRet0() | 0;
  $333 = _bitshift64Shl($329 | 0, $330 | 0, 5) | 0;
  $334 = getTempRet0() | 0;
  $335 = _bitshift64Lshr($329 | 0, $330 | 0, 59) | 0;
  $336 = getTempRet0() | 0;
  $337 = $333 | $335;
  $338 = $334 | $336;
  $339 = $337 ^ $331;
  $340 = $338 ^ $332;
  $341 = _i64Add($319 | 0, $320 | 0, $321 | 0, $322 | 0) | 0;
  $342 = getTempRet0() | 0;
  $343 = _bitshift64Shl($319 | 0, $320 | 0, 37) | 0;
  $344 = getTempRet0() | 0;
  $345 = _bitshift64Lshr($319 | 0, $320 | 0, 27) | 0;
  $346 = getTempRet0() | 0;
  $347 = $343 | $345;
  $348 = $344 | $346;
  $349 = $347 ^ $341;
  $350 = $348 ^ $342;
  $351 = _i64Add($331 | 0, $332 | 0, $56 | 0, $58 | 0) | 0;
  $352 = getTempRet0() | 0;
  $353 = _i64Add($349 | 0, $350 | 0, $263 | 0, $264 | 0) | 0;
  $354 = getTempRet0() | 0;
  $355 = _i64Add($44 | 0, $46 | 0, $60 | 0, $62 | 0) | 0;
  $356 = getTempRet0() | 0;
  $357 = _i64Add($341 | 0, $342 | 0, $355 | 0, $356 | 0) | 0;
  $358 = getTempRet0() | 0;
  $359 = _i64Add($48 | 0, $50 | 0, 3, 0) | 0;
  $360 = getTempRet0() | 0;
  $361 = _i64Add($359 | 0, $360 | 0, $339 | 0, $340 | 0) | 0;
  $362 = getTempRet0() | 0;
  $363 = _i64Add($351 | 0, $352 | 0, $353 | 0, $354 | 0) | 0;
  $364 = getTempRet0() | 0;
  $365 = _bitshift64Shl($353 | 0, $354 | 0, 25) | 0;
  $366 = getTempRet0() | 0;
  $367 = _bitshift64Lshr($353 | 0, $354 | 0, 39) | 0;
  $368 = getTempRet0() | 0;
  $369 = $365 | $367;
  $370 = $366 | $368;
  $371 = $369 ^ $363;
  $372 = $370 ^ $364;
  $373 = _i64Add($357 | 0, $358 | 0, $361 | 0, $362 | 0) | 0;
  $374 = getTempRet0() | 0;
  $375 = _bitshift64Shl($361 | 0, $362 | 0, 33) | 0;
  $376 = getTempRet0() | 0;
  $377 = _bitshift64Lshr($361 | 0, $362 | 0, 31) | 0;
  $378 = getTempRet0() | 0;
  $379 = $375 | $377;
  $380 = $376 | $378;
  $381 = $379 ^ $373;
  $382 = $380 ^ $374;
  $383 = _i64Add($381 | 0, $382 | 0, $363 | 0, $364 | 0) | 0;
  $384 = getTempRet0() | 0;
  $385 = _bitshift64Shl($381 | 0, $382 | 0, 46) | 0;
  $386 = getTempRet0() | 0;
  $387 = _bitshift64Lshr($381 | 0, $382 | 0, 18) | 0;
  $388 = getTempRet0() | 0;
  $389 = $385 | $387;
  $390 = $386 | $388;
  $391 = $389 ^ $383;
  $392 = $390 ^ $384;
  $393 = _i64Add($371 | 0, $372 | 0, $373 | 0, $374 | 0) | 0;
  $394 = getTempRet0() | 0;
  $395 = _bitshift64Shl($371 | 0, $372 | 0, 12) | 0;
  $396 = getTempRet0() | 0;
  $397 = _bitshift64Lshr($371 | 0, $372 | 0, 52) | 0;
  $398 = getTempRet0() | 0;
  $399 = $395 | $397;
  $400 = $396 | $398;
  $401 = $399 ^ $393;
  $402 = $400 ^ $394;
  $403 = _i64Add($401 | 0, $402 | 0, $383 | 0, $384 | 0) | 0;
  $404 = getTempRet0() | 0;
  $405 = _bitshift64Shl($401 | 0, $402 | 0, 58) | 0;
  $406 = getTempRet0() | 0;
  $407 = _bitshift64Lshr($401 | 0, $402 | 0, 6) | 0;
  $408 = getTempRet0() | 0;
  $409 = $405 | $407;
  $410 = $406 | $408;
  $411 = $409 ^ $403;
  $412 = $410 ^ $404;
  $413 = _i64Add($391 | 0, $392 | 0, $393 | 0, $394 | 0) | 0;
  $414 = getTempRet0() | 0;
  $415 = _bitshift64Shl($391 | 0, $392 | 0, 22) | 0;
  $416 = getTempRet0() | 0;
  $417 = _bitshift64Lshr($391 | 0, $392 | 0, 42) | 0;
  $418 = getTempRet0() | 0;
  $419 = $415 | $417;
  $420 = $416 | $418;
  $421 = $419 ^ $413;
  $422 = $420 ^ $414;
  $423 = _i64Add($421 | 0, $422 | 0, $403 | 0, $404 | 0) | 0;
  $424 = getTempRet0() | 0;
  $425 = $422 ^ $423;
  $426 = $421 ^ $424;
  $427 = _i64Add($411 | 0, $412 | 0, $413 | 0, $414 | 0) | 0;
  $428 = getTempRet0() | 0;
  $429 = $412 ^ $427;
  $430 = $411 ^ $428;
  $431 = _i64Add($423 | 0, $424 | 0, $55 | 0, $57 | 0) | 0;
  $432 = getTempRet0() | 0;
  $433 = _i64Add($429 | 0, $430 | 0, $355 | 0, $356 | 0) | 0;
  $434 = getTempRet0() | 0;
  $435 = _i64Add($48 | 0, $50 | 0, $59 | 0, $61 | 0) | 0;
  $436 = getTempRet0() | 0;
  $437 = _i64Add($427 | 0, $428 | 0, $435 | 0, $436 | 0) | 0;
  $438 = getTempRet0() | 0;
  $439 = _i64Add($52 | 0, $54 | 0, 4, 0) | 0;
  $440 = getTempRet0() | 0;
  $441 = _i64Add($439 | 0, $440 | 0, $425 | 0, $426 | 0) | 0;
  $442 = getTempRet0() | 0;
  $443 = _i64Add($431 | 0, $432 | 0, $433 | 0, $434 | 0) | 0;
  $444 = getTempRet0() | 0;
  $445 = _bitshift64Shl($433 | 0, $434 | 0, 14) | 0;
  $446 = getTempRet0() | 0;
  $447 = _bitshift64Lshr($433 | 0, $434 | 0, 50) | 0;
  $448 = getTempRet0() | 0;
  $449 = $445 | $447;
  $450 = $446 | $448;
  $451 = $449 ^ $443;
  $452 = $450 ^ $444;
  $453 = _i64Add($437 | 0, $438 | 0, $441 | 0, $442 | 0) | 0;
  $454 = getTempRet0() | 0;
  $455 = _bitshift64Shl($441 | 0, $442 | 0, 16) | 0;
  $456 = getTempRet0() | 0;
  $457 = _bitshift64Lshr($441 | 0, $442 | 0, 48) | 0;
  $458 = getTempRet0() | 0;
  $459 = $455 | $457;
  $460 = $456 | $458;
  $461 = $459 ^ $453;
  $462 = $460 ^ $454;
  $463 = _i64Add($461 | 0, $462 | 0, $443 | 0, $444 | 0) | 0;
  $464 = getTempRet0() | 0;
  $465 = _bitshift64Shl($461 | 0, $462 | 0, 52) | 0;
  $466 = getTempRet0() | 0;
  $467 = _bitshift64Lshr($461 | 0, $462 | 0, 12) | 0;
  $468 = getTempRet0() | 0;
  $469 = $465 | $467;
  $470 = $466 | $468;
  $471 = $469 ^ $463;
  $472 = $470 ^ $464;
  $473 = _i64Add($451 | 0, $452 | 0, $453 | 0, $454 | 0) | 0;
  $474 = getTempRet0() | 0;
  $475 = _bitshift64Shl($451 | 0, $452 | 0, 57) | 0;
  $476 = getTempRet0() | 0;
  $477 = _bitshift64Lshr($451 | 0, $452 | 0, 7) | 0;
  $478 = getTempRet0() | 0;
  $479 = $475 | $477;
  $480 = $476 | $478;
  $481 = $479 ^ $473;
  $482 = $480 ^ $474;
  $483 = _i64Add($481 | 0, $482 | 0, $463 | 0, $464 | 0) | 0;
  $484 = getTempRet0() | 0;
  $485 = _bitshift64Shl($481 | 0, $482 | 0, 23) | 0;
  $486 = getTempRet0() | 0;
  $487 = _bitshift64Lshr($481 | 0, $482 | 0, 41) | 0;
  $488 = getTempRet0() | 0;
  $489 = $485 | $487;
  $490 = $486 | $488;
  $491 = $489 ^ $483;
  $492 = $490 ^ $484;
  $493 = _i64Add($471 | 0, $472 | 0, $473 | 0, $474 | 0) | 0;
  $494 = getTempRet0() | 0;
  $495 = _bitshift64Shl($471 | 0, $472 | 0, 40) | 0;
  $496 = getTempRet0() | 0;
  $497 = _bitshift64Lshr($471 | 0, $472 | 0, 24) | 0;
  $498 = getTempRet0() | 0;
  $499 = $495 | $497;
  $500 = $496 | $498;
  $501 = $499 ^ $493;
  $502 = $500 ^ $494;
  $503 = _i64Add($501 | 0, $502 | 0, $483 | 0, $484 | 0) | 0;
  $504 = getTempRet0() | 0;
  $505 = _bitshift64Shl($501 | 0, $502 | 0, 5) | 0;
  $506 = getTempRet0() | 0;
  $507 = _bitshift64Lshr($501 | 0, $502 | 0, 59) | 0;
  $508 = getTempRet0() | 0;
  $509 = $505 | $507;
  $510 = $506 | $508;
  $511 = $509 ^ $503;
  $512 = $510 ^ $504;
  $513 = _i64Add($491 | 0, $492 | 0, $493 | 0, $494 | 0) | 0;
  $514 = getTempRet0() | 0;
  $515 = _bitshift64Shl($491 | 0, $492 | 0, 37) | 0;
  $516 = getTempRet0() | 0;
  $517 = _bitshift64Lshr($491 | 0, $492 | 0, 27) | 0;
  $518 = getTempRet0() | 0;
  $519 = $515 | $517;
  $520 = $516 | $518;
  $521 = $519 ^ $513;
  $522 = $520 ^ $514;
  $523 = _i64Add($503 | 0, $504 | 0, $44 | 0, $46 | 0) | 0;
  $524 = getTempRet0() | 0;
  $525 = _i64Add($521 | 0, $522 | 0, $435 | 0, $436 | 0) | 0;
  $526 = getTempRet0() | 0;
  $527 = _i64Add($52 | 0, $54 | 0, $41 | 0, $42 | 0) | 0;
  $528 = getTempRet0() | 0;
  $529 = _i64Add($513 | 0, $514 | 0, $527 | 0, $528 | 0) | 0;
  $530 = getTempRet0() | 0;
  $531 = _i64Add($56 | 0, $58 | 0, 5, 0) | 0;
  $532 = getTempRet0() | 0;
  $533 = _i64Add($531 | 0, $532 | 0, $511 | 0, $512 | 0) | 0;
  $534 = getTempRet0() | 0;
  $535 = _i64Add($523 | 0, $524 | 0, $525 | 0, $526 | 0) | 0;
  $536 = getTempRet0() | 0;
  $537 = _bitshift64Shl($525 | 0, $526 | 0, 25) | 0;
  $538 = getTempRet0() | 0;
  $539 = _bitshift64Lshr($525 | 0, $526 | 0, 39) | 0;
  $540 = getTempRet0() | 0;
  $541 = $537 | $539;
  $542 = $538 | $540;
  $543 = $541 ^ $535;
  $544 = $542 ^ $536;
  $545 = _i64Add($529 | 0, $530 | 0, $533 | 0, $534 | 0) | 0;
  $546 = getTempRet0() | 0;
  $547 = _bitshift64Shl($533 | 0, $534 | 0, 33) | 0;
  $548 = getTempRet0() | 0;
  $549 = _bitshift64Lshr($533 | 0, $534 | 0, 31) | 0;
  $550 = getTempRet0() | 0;
  $551 = $547 | $549;
  $552 = $548 | $550;
  $553 = $551 ^ $545;
  $554 = $552 ^ $546;
  $555 = _i64Add($553 | 0, $554 | 0, $535 | 0, $536 | 0) | 0;
  $556 = getTempRet0() | 0;
  $557 = _bitshift64Shl($553 | 0, $554 | 0, 46) | 0;
  $558 = getTempRet0() | 0;
  $559 = _bitshift64Lshr($553 | 0, $554 | 0, 18) | 0;
  $560 = getTempRet0() | 0;
  $561 = $557 | $559;
  $562 = $558 | $560;
  $563 = $561 ^ $555;
  $564 = $562 ^ $556;
  $565 = _i64Add($543 | 0, $544 | 0, $545 | 0, $546 | 0) | 0;
  $566 = getTempRet0() | 0;
  $567 = _bitshift64Shl($543 | 0, $544 | 0, 12) | 0;
  $568 = getTempRet0() | 0;
  $569 = _bitshift64Lshr($543 | 0, $544 | 0, 52) | 0;
  $570 = getTempRet0() | 0;
  $571 = $567 | $569;
  $572 = $568 | $570;
  $573 = $571 ^ $565;
  $574 = $572 ^ $566;
  $575 = _i64Add($573 | 0, $574 | 0, $555 | 0, $556 | 0) | 0;
  $576 = getTempRet0() | 0;
  $577 = _bitshift64Shl($573 | 0, $574 | 0, 58) | 0;
  $578 = getTempRet0() | 0;
  $579 = _bitshift64Lshr($573 | 0, $574 | 0, 6) | 0;
  $580 = getTempRet0() | 0;
  $581 = $577 | $579;
  $582 = $578 | $580;
  $583 = $581 ^ $575;
  $584 = $582 ^ $576;
  $585 = _i64Add($563 | 0, $564 | 0, $565 | 0, $566 | 0) | 0;
  $586 = getTempRet0() | 0;
  $587 = _bitshift64Shl($563 | 0, $564 | 0, 22) | 0;
  $588 = getTempRet0() | 0;
  $589 = _bitshift64Lshr($563 | 0, $564 | 0, 42) | 0;
  $590 = getTempRet0() | 0;
  $591 = $587 | $589;
  $592 = $588 | $590;
  $593 = $591 ^ $585;
  $594 = $592 ^ $586;
  $595 = _i64Add($593 | 0, $594 | 0, $575 | 0, $576 | 0) | 0;
  $596 = getTempRet0() | 0;
  $597 = $594 ^ $595;
  $598 = $593 ^ $596;
  $599 = _i64Add($583 | 0, $584 | 0, $585 | 0, $586 | 0) | 0;
  $600 = getTempRet0() | 0;
  $601 = $584 ^ $599;
  $602 = $583 ^ $600;
  $603 = _i64Add($595 | 0, $596 | 0, $48 | 0, $50 | 0) | 0;
  $604 = getTempRet0() | 0;
  $605 = _i64Add($601 | 0, $602 | 0, $527 | 0, $528 | 0) | 0;
  $606 = getTempRet0() | 0;
  $607 = _i64Add($56 | 0, $58 | 0, $60 | 0, $62 | 0) | 0;
  $608 = getTempRet0() | 0;
  $609 = _i64Add($599 | 0, $600 | 0, $607 | 0, $608 | 0) | 0;
  $610 = getTempRet0() | 0;
  $611 = _i64Add($55 | 0, $57 | 0, 6, 0) | 0;
  $612 = getTempRet0() | 0;
  $613 = _i64Add($611 | 0, $612 | 0, $597 | 0, $598 | 0) | 0;
  $614 = getTempRet0() | 0;
  $615 = _i64Add($603 | 0, $604 | 0, $605 | 0, $606 | 0) | 0;
  $616 = getTempRet0() | 0;
  $617 = _bitshift64Shl($605 | 0, $606 | 0, 14) | 0;
  $618 = getTempRet0() | 0;
  $619 = _bitshift64Lshr($605 | 0, $606 | 0, 50) | 0;
  $620 = getTempRet0() | 0;
  $621 = $617 | $619;
  $622 = $618 | $620;
  $623 = $621 ^ $615;
  $624 = $622 ^ $616;
  $625 = _i64Add($609 | 0, $610 | 0, $613 | 0, $614 | 0) | 0;
  $626 = getTempRet0() | 0;
  $627 = _bitshift64Shl($613 | 0, $614 | 0, 16) | 0;
  $628 = getTempRet0() | 0;
  $629 = _bitshift64Lshr($613 | 0, $614 | 0, 48) | 0;
  $630 = getTempRet0() | 0;
  $631 = $627 | $629;
  $632 = $628 | $630;
  $633 = $631 ^ $625;
  $634 = $632 ^ $626;
  $635 = _i64Add($633 | 0, $634 | 0, $615 | 0, $616 | 0) | 0;
  $636 = getTempRet0() | 0;
  $637 = _bitshift64Shl($633 | 0, $634 | 0, 52) | 0;
  $638 = getTempRet0() | 0;
  $639 = _bitshift64Lshr($633 | 0, $634 | 0, 12) | 0;
  $640 = getTempRet0() | 0;
  $641 = $637 | $639;
  $642 = $638 | $640;
  $643 = $641 ^ $635;
  $644 = $642 ^ $636;
  $645 = _i64Add($623 | 0, $624 | 0, $625 | 0, $626 | 0) | 0;
  $646 = getTempRet0() | 0;
  $647 = _bitshift64Shl($623 | 0, $624 | 0, 57) | 0;
  $648 = getTempRet0() | 0;
  $649 = _bitshift64Lshr($623 | 0, $624 | 0, 7) | 0;
  $650 = getTempRet0() | 0;
  $651 = $647 | $649;
  $652 = $648 | $650;
  $653 = $651 ^ $645;
  $654 = $652 ^ $646;
  $655 = _i64Add($653 | 0, $654 | 0, $635 | 0, $636 | 0) | 0;
  $656 = getTempRet0() | 0;
  $657 = _bitshift64Shl($653 | 0, $654 | 0, 23) | 0;
  $658 = getTempRet0() | 0;
  $659 = _bitshift64Lshr($653 | 0, $654 | 0, 41) | 0;
  $660 = getTempRet0() | 0;
  $661 = $657 | $659;
  $662 = $658 | $660;
  $663 = $661 ^ $655;
  $664 = $662 ^ $656;
  $665 = _i64Add($643 | 0, $644 | 0, $645 | 0, $646 | 0) | 0;
  $666 = getTempRet0() | 0;
  $667 = _bitshift64Shl($643 | 0, $644 | 0, 40) | 0;
  $668 = getTempRet0() | 0;
  $669 = _bitshift64Lshr($643 | 0, $644 | 0, 24) | 0;
  $670 = getTempRet0() | 0;
  $671 = $667 | $669;
  $672 = $668 | $670;
  $673 = $671 ^ $665;
  $674 = $672 ^ $666;
  $675 = _i64Add($673 | 0, $674 | 0, $655 | 0, $656 | 0) | 0;
  $676 = getTempRet0() | 0;
  $677 = _bitshift64Shl($673 | 0, $674 | 0, 5) | 0;
  $678 = getTempRet0() | 0;
  $679 = _bitshift64Lshr($673 | 0, $674 | 0, 59) | 0;
  $680 = getTempRet0() | 0;
  $681 = $677 | $679;
  $682 = $678 | $680;
  $683 = $681 ^ $675;
  $684 = $682 ^ $676;
  $685 = _i64Add($663 | 0, $664 | 0, $665 | 0, $666 | 0) | 0;
  $686 = getTempRet0() | 0;
  $687 = _bitshift64Shl($663 | 0, $664 | 0, 37) | 0;
  $688 = getTempRet0() | 0;
  $689 = _bitshift64Lshr($663 | 0, $664 | 0, 27) | 0;
  $690 = getTempRet0() | 0;
  $691 = $687 | $689;
  $692 = $688 | $690;
  $693 = $691 ^ $685;
  $694 = $692 ^ $686;
  $695 = _i64Add($675 | 0, $676 | 0, $52 | 0, $54 | 0) | 0;
  $696 = getTempRet0() | 0;
  $697 = _i64Add($693 | 0, $694 | 0, $607 | 0, $608 | 0) | 0;
  $698 = getTempRet0() | 0;
  $699 = _i64Add($55 | 0, $57 | 0, $59 | 0, $61 | 0) | 0;
  $700 = getTempRet0() | 0;
  $701 = _i64Add($685 | 0, $686 | 0, $699 | 0, $700 | 0) | 0;
  $702 = getTempRet0() | 0;
  $703 = _i64Add($44 | 0, $46 | 0, 7, 0) | 0;
  $704 = getTempRet0() | 0;
  $705 = _i64Add($703 | 0, $704 | 0, $683 | 0, $684 | 0) | 0;
  $706 = getTempRet0() | 0;
  $707 = _i64Add($695 | 0, $696 | 0, $697 | 0, $698 | 0) | 0;
  $708 = getTempRet0() | 0;
  $709 = _bitshift64Shl($697 | 0, $698 | 0, 25) | 0;
  $710 = getTempRet0() | 0;
  $711 = _bitshift64Lshr($697 | 0, $698 | 0, 39) | 0;
  $712 = getTempRet0() | 0;
  $713 = $709 | $711;
  $714 = $710 | $712;
  $715 = $713 ^ $707;
  $716 = $714 ^ $708;
  $717 = _i64Add($701 | 0, $702 | 0, $705 | 0, $706 | 0) | 0;
  $718 = getTempRet0() | 0;
  $719 = _bitshift64Shl($705 | 0, $706 | 0, 33) | 0;
  $720 = getTempRet0() | 0;
  $721 = _bitshift64Lshr($705 | 0, $706 | 0, 31) | 0;
  $722 = getTempRet0() | 0;
  $723 = $719 | $721;
  $724 = $720 | $722;
  $725 = $723 ^ $717;
  $726 = $724 ^ $718;
  $727 = _i64Add($725 | 0, $726 | 0, $707 | 0, $708 | 0) | 0;
  $728 = getTempRet0() | 0;
  $729 = _bitshift64Shl($725 | 0, $726 | 0, 46) | 0;
  $730 = getTempRet0() | 0;
  $731 = _bitshift64Lshr($725 | 0, $726 | 0, 18) | 0;
  $732 = getTempRet0() | 0;
  $733 = $729 | $731;
  $734 = $730 | $732;
  $735 = $733 ^ $727;
  $736 = $734 ^ $728;
  $737 = _i64Add($715 | 0, $716 | 0, $717 | 0, $718 | 0) | 0;
  $738 = getTempRet0() | 0;
  $739 = _bitshift64Shl($715 | 0, $716 | 0, 12) | 0;
  $740 = getTempRet0() | 0;
  $741 = _bitshift64Lshr($715 | 0, $716 | 0, 52) | 0;
  $742 = getTempRet0() | 0;
  $743 = $739 | $741;
  $744 = $740 | $742;
  $745 = $743 ^ $737;
  $746 = $744 ^ $738;
  $747 = _i64Add($745 | 0, $746 | 0, $727 | 0, $728 | 0) | 0;
  $748 = getTempRet0() | 0;
  $749 = _bitshift64Shl($745 | 0, $746 | 0, 58) | 0;
  $750 = getTempRet0() | 0;
  $751 = _bitshift64Lshr($745 | 0, $746 | 0, 6) | 0;
  $752 = getTempRet0() | 0;
  $753 = $749 | $751;
  $754 = $750 | $752;
  $755 = $753 ^ $747;
  $756 = $754 ^ $748;
  $757 = _i64Add($735 | 0, $736 | 0, $737 | 0, $738 | 0) | 0;
  $758 = getTempRet0() | 0;
  $759 = _bitshift64Shl($735 | 0, $736 | 0, 22) | 0;
  $760 = getTempRet0() | 0;
  $761 = _bitshift64Lshr($735 | 0, $736 | 0, 42) | 0;
  $762 = getTempRet0() | 0;
  $763 = $759 | $761;
  $764 = $760 | $762;
  $765 = $763 ^ $757;
  $766 = $764 ^ $758;
  $767 = _i64Add($765 | 0, $766 | 0, $747 | 0, $748 | 0) | 0;
  $768 = getTempRet0() | 0;
  $769 = $766 ^ $767;
  $770 = $765 ^ $768;
  $771 = _i64Add($755 | 0, $756 | 0, $757 | 0, $758 | 0) | 0;
  $772 = getTempRet0() | 0;
  $773 = $756 ^ $771;
  $774 = $755 ^ $772;
  $775 = _i64Add($767 | 0, $768 | 0, $56 | 0, $58 | 0) | 0;
  $776 = getTempRet0() | 0;
  $777 = _i64Add($773 | 0, $774 | 0, $699 | 0, $700 | 0) | 0;
  $778 = getTempRet0() | 0;
  $779 = _i64Add($44 | 0, $46 | 0, $41 | 0, $42 | 0) | 0;
  $780 = getTempRet0() | 0;
  $781 = _i64Add($771 | 0, $772 | 0, $779 | 0, $780 | 0) | 0;
  $782 = getTempRet0() | 0;
  $783 = _i64Add($48 | 0, $50 | 0, 8, 0) | 0;
  $784 = getTempRet0() | 0;
  $785 = _i64Add($783 | 0, $784 | 0, $769 | 0, $770 | 0) | 0;
  $786 = getTempRet0() | 0;
  $787 = _i64Add($775 | 0, $776 | 0, $777 | 0, $778 | 0) | 0;
  $788 = getTempRet0() | 0;
  $789 = _bitshift64Shl($777 | 0, $778 | 0, 14) | 0;
  $790 = getTempRet0() | 0;
  $791 = _bitshift64Lshr($777 | 0, $778 | 0, 50) | 0;
  $792 = getTempRet0() | 0;
  $793 = $789 | $791;
  $794 = $790 | $792;
  $795 = $793 ^ $787;
  $796 = $794 ^ $788;
  $797 = _i64Add($781 | 0, $782 | 0, $785 | 0, $786 | 0) | 0;
  $798 = getTempRet0() | 0;
  $799 = _bitshift64Shl($785 | 0, $786 | 0, 16) | 0;
  $800 = getTempRet0() | 0;
  $801 = _bitshift64Lshr($785 | 0, $786 | 0, 48) | 0;
  $802 = getTempRet0() | 0;
  $803 = $799 | $801;
  $804 = $800 | $802;
  $805 = $803 ^ $797;
  $806 = $804 ^ $798;
  $807 = _i64Add($805 | 0, $806 | 0, $787 | 0, $788 | 0) | 0;
  $808 = getTempRet0() | 0;
  $809 = _bitshift64Shl($805 | 0, $806 | 0, 52) | 0;
  $810 = getTempRet0() | 0;
  $811 = _bitshift64Lshr($805 | 0, $806 | 0, 12) | 0;
  $812 = getTempRet0() | 0;
  $813 = $809 | $811;
  $814 = $810 | $812;
  $815 = $813 ^ $807;
  $816 = $814 ^ $808;
  $817 = _i64Add($795 | 0, $796 | 0, $797 | 0, $798 | 0) | 0;
  $818 = getTempRet0() | 0;
  $819 = _bitshift64Shl($795 | 0, $796 | 0, 57) | 0;
  $820 = getTempRet0() | 0;
  $821 = _bitshift64Lshr($795 | 0, $796 | 0, 7) | 0;
  $822 = getTempRet0() | 0;
  $823 = $819 | $821;
  $824 = $820 | $822;
  $825 = $823 ^ $817;
  $826 = $824 ^ $818;
  $827 = _i64Add($825 | 0, $826 | 0, $807 | 0, $808 | 0) | 0;
  $828 = getTempRet0() | 0;
  $829 = _bitshift64Shl($825 | 0, $826 | 0, 23) | 0;
  $830 = getTempRet0() | 0;
  $831 = _bitshift64Lshr($825 | 0, $826 | 0, 41) | 0;
  $832 = getTempRet0() | 0;
  $833 = $829 | $831;
  $834 = $830 | $832;
  $835 = $833 ^ $827;
  $836 = $834 ^ $828;
  $837 = _i64Add($815 | 0, $816 | 0, $817 | 0, $818 | 0) | 0;
  $838 = getTempRet0() | 0;
  $839 = _bitshift64Shl($815 | 0, $816 | 0, 40) | 0;
  $840 = getTempRet0() | 0;
  $841 = _bitshift64Lshr($815 | 0, $816 | 0, 24) | 0;
  $842 = getTempRet0() | 0;
  $843 = $839 | $841;
  $844 = $840 | $842;
  $845 = $843 ^ $837;
  $846 = $844 ^ $838;
  $847 = _i64Add($845 | 0, $846 | 0, $827 | 0, $828 | 0) | 0;
  $848 = getTempRet0() | 0;
  $849 = _bitshift64Shl($845 | 0, $846 | 0, 5) | 0;
  $850 = getTempRet0() | 0;
  $851 = _bitshift64Lshr($845 | 0, $846 | 0, 59) | 0;
  $852 = getTempRet0() | 0;
  $853 = $849 | $851;
  $854 = $850 | $852;
  $855 = $853 ^ $847;
  $856 = $854 ^ $848;
  $857 = _i64Add($835 | 0, $836 | 0, $837 | 0, $838 | 0) | 0;
  $858 = getTempRet0() | 0;
  $859 = _bitshift64Shl($835 | 0, $836 | 0, 37) | 0;
  $860 = getTempRet0() | 0;
  $861 = _bitshift64Lshr($835 | 0, $836 | 0, 27) | 0;
  $862 = getTempRet0() | 0;
  $863 = $859 | $861;
  $864 = $860 | $862;
  $865 = $863 ^ $857;
  $866 = $864 ^ $858;
  $867 = _i64Add($847 | 0, $848 | 0, $55 | 0, $57 | 0) | 0;
  $868 = getTempRet0() | 0;
  $869 = _i64Add($865 | 0, $866 | 0, $779 | 0, $780 | 0) | 0;
  $870 = getTempRet0() | 0;
  $871 = _i64Add($48 | 0, $50 | 0, $60 | 0, $62 | 0) | 0;
  $872 = getTempRet0() | 0;
  $873 = _i64Add($857 | 0, $858 | 0, $871 | 0, $872 | 0) | 0;
  $874 = getTempRet0() | 0;
  $875 = _i64Add($52 | 0, $54 | 0, 9, 0) | 0;
  $876 = getTempRet0() | 0;
  $877 = _i64Add($875 | 0, $876 | 0, $855 | 0, $856 | 0) | 0;
  $878 = getTempRet0() | 0;
  $879 = _i64Add($867 | 0, $868 | 0, $869 | 0, $870 | 0) | 0;
  $880 = getTempRet0() | 0;
  $881 = _bitshift64Shl($869 | 0, $870 | 0, 25) | 0;
  $882 = getTempRet0() | 0;
  $883 = _bitshift64Lshr($869 | 0, $870 | 0, 39) | 0;
  $884 = getTempRet0() | 0;
  $885 = $881 | $883;
  $886 = $882 | $884;
  $887 = $885 ^ $879;
  $888 = $886 ^ $880;
  $889 = _i64Add($873 | 0, $874 | 0, $877 | 0, $878 | 0) | 0;
  $890 = getTempRet0() | 0;
  $891 = _bitshift64Shl($877 | 0, $878 | 0, 33) | 0;
  $892 = getTempRet0() | 0;
  $893 = _bitshift64Lshr($877 | 0, $878 | 0, 31) | 0;
  $894 = getTempRet0() | 0;
  $895 = $891 | $893;
  $896 = $892 | $894;
  $897 = $895 ^ $889;
  $898 = $896 ^ $890;
  $899 = _i64Add($897 | 0, $898 | 0, $879 | 0, $880 | 0) | 0;
  $900 = getTempRet0() | 0;
  $901 = _bitshift64Shl($897 | 0, $898 | 0, 46) | 0;
  $902 = getTempRet0() | 0;
  $903 = _bitshift64Lshr($897 | 0, $898 | 0, 18) | 0;
  $904 = getTempRet0() | 0;
  $905 = $901 | $903;
  $906 = $902 | $904;
  $907 = $905 ^ $899;
  $908 = $906 ^ $900;
  $909 = _i64Add($887 | 0, $888 | 0, $889 | 0, $890 | 0) | 0;
  $910 = getTempRet0() | 0;
  $911 = _bitshift64Shl($887 | 0, $888 | 0, 12) | 0;
  $912 = getTempRet0() | 0;
  $913 = _bitshift64Lshr($887 | 0, $888 | 0, 52) | 0;
  $914 = getTempRet0() | 0;
  $915 = $911 | $913;
  $916 = $912 | $914;
  $917 = $915 ^ $909;
  $918 = $916 ^ $910;
  $919 = _i64Add($917 | 0, $918 | 0, $899 | 0, $900 | 0) | 0;
  $920 = getTempRet0() | 0;
  $921 = _bitshift64Shl($917 | 0, $918 | 0, 58) | 0;
  $922 = getTempRet0() | 0;
  $923 = _bitshift64Lshr($917 | 0, $918 | 0, 6) | 0;
  $924 = getTempRet0() | 0;
  $925 = $921 | $923;
  $926 = $922 | $924;
  $927 = $925 ^ $919;
  $928 = $926 ^ $920;
  $929 = _i64Add($907 | 0, $908 | 0, $909 | 0, $910 | 0) | 0;
  $930 = getTempRet0() | 0;
  $931 = _bitshift64Shl($907 | 0, $908 | 0, 22) | 0;
  $932 = getTempRet0() | 0;
  $933 = _bitshift64Lshr($907 | 0, $908 | 0, 42) | 0;
  $934 = getTempRet0() | 0;
  $935 = $931 | $933;
  $936 = $932 | $934;
  $937 = $935 ^ $929;
  $938 = $936 ^ $930;
  $939 = _i64Add($937 | 0, $938 | 0, $919 | 0, $920 | 0) | 0;
  $940 = getTempRet0() | 0;
  $941 = $938 ^ $939;
  $942 = $937 ^ $940;
  $943 = _i64Add($927 | 0, $928 | 0, $929 | 0, $930 | 0) | 0;
  $944 = getTempRet0() | 0;
  $945 = $928 ^ $943;
  $946 = $927 ^ $944;
  $947 = _i64Add($939 | 0, $940 | 0, $44 | 0, $46 | 0) | 0;
  $948 = getTempRet0() | 0;
  $949 = _i64Add($945 | 0, $946 | 0, $871 | 0, $872 | 0) | 0;
  $950 = getTempRet0() | 0;
  $951 = _i64Add($52 | 0, $54 | 0, $59 | 0, $61 | 0) | 0;
  $952 = getTempRet0() | 0;
  $953 = _i64Add($943 | 0, $944 | 0, $951 | 0, $952 | 0) | 0;
  $954 = getTempRet0() | 0;
  $955 = _i64Add($56 | 0, $58 | 0, 10, 0) | 0;
  $956 = getTempRet0() | 0;
  $957 = _i64Add($955 | 0, $956 | 0, $941 | 0, $942 | 0) | 0;
  $958 = getTempRet0() | 0;
  $959 = _i64Add($947 | 0, $948 | 0, $949 | 0, $950 | 0) | 0;
  $960 = getTempRet0() | 0;
  $961 = _bitshift64Shl($949 | 0, $950 | 0, 14) | 0;
  $962 = getTempRet0() | 0;
  $963 = _bitshift64Lshr($949 | 0, $950 | 0, 50) | 0;
  $964 = getTempRet0() | 0;
  $965 = $961 | $963;
  $966 = $962 | $964;
  $967 = $965 ^ $959;
  $968 = $966 ^ $960;
  $969 = _i64Add($953 | 0, $954 | 0, $957 | 0, $958 | 0) | 0;
  $970 = getTempRet0() | 0;
  $971 = _bitshift64Shl($957 | 0, $958 | 0, 16) | 0;
  $972 = getTempRet0() | 0;
  $973 = _bitshift64Lshr($957 | 0, $958 | 0, 48) | 0;
  $974 = getTempRet0() | 0;
  $975 = $971 | $973;
  $976 = $972 | $974;
  $977 = $975 ^ $969;
  $978 = $976 ^ $970;
  $979 = _i64Add($977 | 0, $978 | 0, $959 | 0, $960 | 0) | 0;
  $980 = getTempRet0() | 0;
  $981 = _bitshift64Shl($977 | 0, $978 | 0, 52) | 0;
  $982 = getTempRet0() | 0;
  $983 = _bitshift64Lshr($977 | 0, $978 | 0, 12) | 0;
  $984 = getTempRet0() | 0;
  $985 = $981 | $983;
  $986 = $982 | $984;
  $987 = $985 ^ $979;
  $988 = $986 ^ $980;
  $989 = _i64Add($967 | 0, $968 | 0, $969 | 0, $970 | 0) | 0;
  $990 = getTempRet0() | 0;
  $991 = _bitshift64Shl($967 | 0, $968 | 0, 57) | 0;
  $992 = getTempRet0() | 0;
  $993 = _bitshift64Lshr($967 | 0, $968 | 0, 7) | 0;
  $994 = getTempRet0() | 0;
  $995 = $991 | $993;
  $996 = $992 | $994;
  $997 = $995 ^ $989;
  $998 = $996 ^ $990;
  $999 = _i64Add($997 | 0, $998 | 0, $979 | 0, $980 | 0) | 0;
  $1000 = getTempRet0() | 0;
  $1001 = _bitshift64Shl($997 | 0, $998 | 0, 23) | 0;
  $1002 = getTempRet0() | 0;
  $1003 = _bitshift64Lshr($997 | 0, $998 | 0, 41) | 0;
  $1004 = getTempRet0() | 0;
  $1005 = $1001 | $1003;
  $1006 = $1002 | $1004;
  $1007 = $1005 ^ $999;
  $1008 = $1006 ^ $1000;
  $1009 = _i64Add($987 | 0, $988 | 0, $989 | 0, $990 | 0) | 0;
  $1010 = getTempRet0() | 0;
  $1011 = _bitshift64Shl($987 | 0, $988 | 0, 40) | 0;
  $1012 = getTempRet0() | 0;
  $1013 = _bitshift64Lshr($987 | 0, $988 | 0, 24) | 0;
  $1014 = getTempRet0() | 0;
  $1015 = $1011 | $1013;
  $1016 = $1012 | $1014;
  $1017 = $1015 ^ $1009;
  $1018 = $1016 ^ $1010;
  $1019 = _i64Add($1017 | 0, $1018 | 0, $999 | 0, $1000 | 0) | 0;
  $1020 = getTempRet0() | 0;
  $1021 = _bitshift64Shl($1017 | 0, $1018 | 0, 5) | 0;
  $1022 = getTempRet0() | 0;
  $1023 = _bitshift64Lshr($1017 | 0, $1018 | 0, 59) | 0;
  $1024 = getTempRet0() | 0;
  $1025 = $1021 | $1023;
  $1026 = $1022 | $1024;
  $1027 = $1025 ^ $1019;
  $1028 = $1026 ^ $1020;
  $1029 = _i64Add($1007 | 0, $1008 | 0, $1009 | 0, $1010 | 0) | 0;
  $1030 = getTempRet0() | 0;
  $1031 = _bitshift64Shl($1007 | 0, $1008 | 0, 37) | 0;
  $1032 = getTempRet0() | 0;
  $1033 = _bitshift64Lshr($1007 | 0, $1008 | 0, 27) | 0;
  $1034 = getTempRet0() | 0;
  $1035 = $1031 | $1033;
  $1036 = $1032 | $1034;
  $1037 = $1035 ^ $1029;
  $1038 = $1036 ^ $1030;
  $1039 = _i64Add($1019 | 0, $1020 | 0, $48 | 0, $50 | 0) | 0;
  $1040 = getTempRet0() | 0;
  $1041 = _i64Add($1037 | 0, $1038 | 0, $951 | 0, $952 | 0) | 0;
  $1042 = getTempRet0() | 0;
  $1043 = _i64Add($56 | 0, $58 | 0, $41 | 0, $42 | 0) | 0;
  $1044 = getTempRet0() | 0;
  $1045 = _i64Add($1029 | 0, $1030 | 0, $1043 | 0, $1044 | 0) | 0;
  $1046 = getTempRet0() | 0;
  $1047 = _i64Add($55 | 0, $57 | 0, 11, 0) | 0;
  $1048 = getTempRet0() | 0;
  $1049 = _i64Add($1047 | 0, $1048 | 0, $1027 | 0, $1028 | 0) | 0;
  $1050 = getTempRet0() | 0;
  $1051 = _i64Add($1039 | 0, $1040 | 0, $1041 | 0, $1042 | 0) | 0;
  $1052 = getTempRet0() | 0;
  $1053 = _bitshift64Shl($1041 | 0, $1042 | 0, 25) | 0;
  $1054 = getTempRet0() | 0;
  $1055 = _bitshift64Lshr($1041 | 0, $1042 | 0, 39) | 0;
  $1056 = getTempRet0() | 0;
  $1057 = $1053 | $1055;
  $1058 = $1054 | $1056;
  $1059 = $1057 ^ $1051;
  $1060 = $1058 ^ $1052;
  $1061 = _i64Add($1045 | 0, $1046 | 0, $1049 | 0, $1050 | 0) | 0;
  $1062 = getTempRet0() | 0;
  $1063 = _bitshift64Shl($1049 | 0, $1050 | 0, 33) | 0;
  $1064 = getTempRet0() | 0;
  $1065 = _bitshift64Lshr($1049 | 0, $1050 | 0, 31) | 0;
  $1066 = getTempRet0() | 0;
  $1067 = $1063 | $1065;
  $1068 = $1064 | $1066;
  $1069 = $1067 ^ $1061;
  $1070 = $1068 ^ $1062;
  $1071 = _i64Add($1069 | 0, $1070 | 0, $1051 | 0, $1052 | 0) | 0;
  $1072 = getTempRet0() | 0;
  $1073 = _bitshift64Shl($1069 | 0, $1070 | 0, 46) | 0;
  $1074 = getTempRet0() | 0;
  $1075 = _bitshift64Lshr($1069 | 0, $1070 | 0, 18) | 0;
  $1076 = getTempRet0() | 0;
  $1077 = $1073 | $1075;
  $1078 = $1074 | $1076;
  $1079 = $1077 ^ $1071;
  $1080 = $1078 ^ $1072;
  $1081 = _i64Add($1059 | 0, $1060 | 0, $1061 | 0, $1062 | 0) | 0;
  $1082 = getTempRet0() | 0;
  $1083 = _bitshift64Shl($1059 | 0, $1060 | 0, 12) | 0;
  $1084 = getTempRet0() | 0;
  $1085 = _bitshift64Lshr($1059 | 0, $1060 | 0, 52) | 0;
  $1086 = getTempRet0() | 0;
  $1087 = $1083 | $1085;
  $1088 = $1084 | $1086;
  $1089 = $1087 ^ $1081;
  $1090 = $1088 ^ $1082;
  $1091 = _i64Add($1089 | 0, $1090 | 0, $1071 | 0, $1072 | 0) | 0;
  $1092 = getTempRet0() | 0;
  $1093 = _bitshift64Shl($1089 | 0, $1090 | 0, 58) | 0;
  $1094 = getTempRet0() | 0;
  $1095 = _bitshift64Lshr($1089 | 0, $1090 | 0, 6) | 0;
  $1096 = getTempRet0() | 0;
  $1097 = $1093 | $1095;
  $1098 = $1094 | $1096;
  $1099 = $1097 ^ $1091;
  $1100 = $1098 ^ $1092;
  $1101 = _i64Add($1079 | 0, $1080 | 0, $1081 | 0, $1082 | 0) | 0;
  $1102 = getTempRet0() | 0;
  $1103 = _bitshift64Shl($1079 | 0, $1080 | 0, 22) | 0;
  $1104 = getTempRet0() | 0;
  $1105 = _bitshift64Lshr($1079 | 0, $1080 | 0, 42) | 0;
  $1106 = getTempRet0() | 0;
  $1107 = $1103 | $1105;
  $1108 = $1104 | $1106;
  $1109 = $1107 ^ $1101;
  $1110 = $1108 ^ $1102;
  $1111 = _i64Add($1109 | 0, $1110 | 0, $1091 | 0, $1092 | 0) | 0;
  $1112 = getTempRet0() | 0;
  $1113 = $1110 ^ $1111;
  $1114 = $1109 ^ $1112;
  $1115 = _i64Add($1099 | 0, $1100 | 0, $1101 | 0, $1102 | 0) | 0;
  $1116 = getTempRet0() | 0;
  $1117 = $1100 ^ $1115;
  $1118 = $1099 ^ $1116;
  $1119 = _i64Add($1111 | 0, $1112 | 0, $52 | 0, $54 | 0) | 0;
  $1120 = getTempRet0() | 0;
  $1121 = _i64Add($1117 | 0, $1118 | 0, $1043 | 0, $1044 | 0) | 0;
  $1122 = getTempRet0() | 0;
  $1123 = _i64Add($55 | 0, $57 | 0, $60 | 0, $62 | 0) | 0;
  $1124 = getTempRet0() | 0;
  $1125 = _i64Add($1115 | 0, $1116 | 0, $1123 | 0, $1124 | 0) | 0;
  $1126 = getTempRet0() | 0;
  $1127 = _i64Add($44 | 0, $46 | 0, 12, 0) | 0;
  $1128 = getTempRet0() | 0;
  $1129 = _i64Add($1127 | 0, $1128 | 0, $1113 | 0, $1114 | 0) | 0;
  $1130 = getTempRet0() | 0;
  $1131 = _i64Add($1119 | 0, $1120 | 0, $1121 | 0, $1122 | 0) | 0;
  $1132 = getTempRet0() | 0;
  $1133 = _bitshift64Shl($1121 | 0, $1122 | 0, 14) | 0;
  $1134 = getTempRet0() | 0;
  $1135 = _bitshift64Lshr($1121 | 0, $1122 | 0, 50) | 0;
  $1136 = getTempRet0() | 0;
  $1137 = $1133 | $1135;
  $1138 = $1134 | $1136;
  $1139 = $1137 ^ $1131;
  $1140 = $1138 ^ $1132;
  $1141 = _i64Add($1125 | 0, $1126 | 0, $1129 | 0, $1130 | 0) | 0;
  $1142 = getTempRet0() | 0;
  $1143 = _bitshift64Shl($1129 | 0, $1130 | 0, 16) | 0;
  $1144 = getTempRet0() | 0;
  $1145 = _bitshift64Lshr($1129 | 0, $1130 | 0, 48) | 0;
  $1146 = getTempRet0() | 0;
  $1147 = $1143 | $1145;
  $1148 = $1144 | $1146;
  $1149 = $1147 ^ $1141;
  $1150 = $1148 ^ $1142;
  $1151 = _i64Add($1149 | 0, $1150 | 0, $1131 | 0, $1132 | 0) | 0;
  $1152 = getTempRet0() | 0;
  $1153 = _bitshift64Shl($1149 | 0, $1150 | 0, 52) | 0;
  $1154 = getTempRet0() | 0;
  $1155 = _bitshift64Lshr($1149 | 0, $1150 | 0, 12) | 0;
  $1156 = getTempRet0() | 0;
  $1157 = $1153 | $1155;
  $1158 = $1154 | $1156;
  $1159 = $1157 ^ $1151;
  $1160 = $1158 ^ $1152;
  $1161 = _i64Add($1139 | 0, $1140 | 0, $1141 | 0, $1142 | 0) | 0;
  $1162 = getTempRet0() | 0;
  $1163 = _bitshift64Shl($1139 | 0, $1140 | 0, 57) | 0;
  $1164 = getTempRet0() | 0;
  $1165 = _bitshift64Lshr($1139 | 0, $1140 | 0, 7) | 0;
  $1166 = getTempRet0() | 0;
  $1167 = $1163 | $1165;
  $1168 = $1164 | $1166;
  $1169 = $1167 ^ $1161;
  $1170 = $1168 ^ $1162;
  $1171 = _i64Add($1169 | 0, $1170 | 0, $1151 | 0, $1152 | 0) | 0;
  $1172 = getTempRet0() | 0;
  $1173 = _bitshift64Shl($1169 | 0, $1170 | 0, 23) | 0;
  $1174 = getTempRet0() | 0;
  $1175 = _bitshift64Lshr($1169 | 0, $1170 | 0, 41) | 0;
  $1176 = getTempRet0() | 0;
  $1177 = $1173 | $1175;
  $1178 = $1174 | $1176;
  $1179 = $1177 ^ $1171;
  $1180 = $1178 ^ $1172;
  $1181 = _i64Add($1159 | 0, $1160 | 0, $1161 | 0, $1162 | 0) | 0;
  $1182 = getTempRet0() | 0;
  $1183 = _bitshift64Shl($1159 | 0, $1160 | 0, 40) | 0;
  $1184 = getTempRet0() | 0;
  $1185 = _bitshift64Lshr($1159 | 0, $1160 | 0, 24) | 0;
  $1186 = getTempRet0() | 0;
  $1187 = $1183 | $1185;
  $1188 = $1184 | $1186;
  $1189 = $1187 ^ $1181;
  $1190 = $1188 ^ $1182;
  $1191 = _i64Add($1189 | 0, $1190 | 0, $1171 | 0, $1172 | 0) | 0;
  $1192 = getTempRet0() | 0;
  $1193 = _bitshift64Shl($1189 | 0, $1190 | 0, 5) | 0;
  $1194 = getTempRet0() | 0;
  $1195 = _bitshift64Lshr($1189 | 0, $1190 | 0, 59) | 0;
  $1196 = getTempRet0() | 0;
  $1197 = $1193 | $1195;
  $1198 = $1194 | $1196;
  $1199 = $1197 ^ $1191;
  $1200 = $1198 ^ $1192;
  $1201 = _i64Add($1179 | 0, $1180 | 0, $1181 | 0, $1182 | 0) | 0;
  $1202 = getTempRet0() | 0;
  $1203 = _bitshift64Shl($1179 | 0, $1180 | 0, 37) | 0;
  $1204 = getTempRet0() | 0;
  $1205 = _bitshift64Lshr($1179 | 0, $1180 | 0, 27) | 0;
  $1206 = getTempRet0() | 0;
  $1207 = $1203 | $1205;
  $1208 = $1204 | $1206;
  $1209 = $1207 ^ $1201;
  $1210 = $1208 ^ $1202;
  $1211 = _i64Add($1191 | 0, $1192 | 0, $56 | 0, $58 | 0) | 0;
  $1212 = getTempRet0() | 0;
  $1213 = _i64Add($1209 | 0, $1210 | 0, $1123 | 0, $1124 | 0) | 0;
  $1214 = getTempRet0() | 0;
  $1215 = _i64Add($44 | 0, $46 | 0, $59 | 0, $61 | 0) | 0;
  $1216 = getTempRet0() | 0;
  $1217 = _i64Add($1201 | 0, $1202 | 0, $1215 | 0, $1216 | 0) | 0;
  $1218 = getTempRet0() | 0;
  $1219 = _i64Add($48 | 0, $50 | 0, 13, 0) | 0;
  $1220 = getTempRet0() | 0;
  $1221 = _i64Add($1219 | 0, $1220 | 0, $1199 | 0, $1200 | 0) | 0;
  $1222 = getTempRet0() | 0;
  $1223 = _i64Add($1211 | 0, $1212 | 0, $1213 | 0, $1214 | 0) | 0;
  $1224 = getTempRet0() | 0;
  $1225 = _bitshift64Shl($1213 | 0, $1214 | 0, 25) | 0;
  $1226 = getTempRet0() | 0;
  $1227 = _bitshift64Lshr($1213 | 0, $1214 | 0, 39) | 0;
  $1228 = getTempRet0() | 0;
  $1229 = $1225 | $1227;
  $1230 = $1226 | $1228;
  $1231 = $1229 ^ $1223;
  $1232 = $1230 ^ $1224;
  $1233 = _i64Add($1217 | 0, $1218 | 0, $1221 | 0, $1222 | 0) | 0;
  $1234 = getTempRet0() | 0;
  $1235 = _bitshift64Shl($1221 | 0, $1222 | 0, 33) | 0;
  $1236 = getTempRet0() | 0;
  $1237 = _bitshift64Lshr($1221 | 0, $1222 | 0, 31) | 0;
  $1238 = getTempRet0() | 0;
  $1239 = $1235 | $1237;
  $1240 = $1236 | $1238;
  $1241 = $1239 ^ $1233;
  $1242 = $1240 ^ $1234;
  $1243 = _i64Add($1241 | 0, $1242 | 0, $1223 | 0, $1224 | 0) | 0;
  $1244 = getTempRet0() | 0;
  $1245 = _bitshift64Shl($1241 | 0, $1242 | 0, 46) | 0;
  $1246 = getTempRet0() | 0;
  $1247 = _bitshift64Lshr($1241 | 0, $1242 | 0, 18) | 0;
  $1248 = getTempRet0() | 0;
  $1249 = $1245 | $1247;
  $1250 = $1246 | $1248;
  $1251 = $1249 ^ $1243;
  $1252 = $1250 ^ $1244;
  $1253 = _i64Add($1231 | 0, $1232 | 0, $1233 | 0, $1234 | 0) | 0;
  $1254 = getTempRet0() | 0;
  $1255 = _bitshift64Shl($1231 | 0, $1232 | 0, 12) | 0;
  $1256 = getTempRet0() | 0;
  $1257 = _bitshift64Lshr($1231 | 0, $1232 | 0, 52) | 0;
  $1258 = getTempRet0() | 0;
  $1259 = $1255 | $1257;
  $1260 = $1256 | $1258;
  $1261 = $1259 ^ $1253;
  $1262 = $1260 ^ $1254;
  $1263 = _i64Add($1261 | 0, $1262 | 0, $1243 | 0, $1244 | 0) | 0;
  $1264 = getTempRet0() | 0;
  $1265 = _bitshift64Shl($1261 | 0, $1262 | 0, 58) | 0;
  $1266 = getTempRet0() | 0;
  $1267 = _bitshift64Lshr($1261 | 0, $1262 | 0, 6) | 0;
  $1268 = getTempRet0() | 0;
  $1269 = $1265 | $1267;
  $1270 = $1266 | $1268;
  $1271 = $1269 ^ $1263;
  $1272 = $1270 ^ $1264;
  $1273 = _i64Add($1251 | 0, $1252 | 0, $1253 | 0, $1254 | 0) | 0;
  $1274 = getTempRet0() | 0;
  $1275 = _bitshift64Shl($1251 | 0, $1252 | 0, 22) | 0;
  $1276 = getTempRet0() | 0;
  $1277 = _bitshift64Lshr($1251 | 0, $1252 | 0, 42) | 0;
  $1278 = getTempRet0() | 0;
  $1279 = $1275 | $1277;
  $1280 = $1276 | $1278;
  $1281 = $1279 ^ $1273;
  $1282 = $1280 ^ $1274;
  $1283 = _i64Add($1281 | 0, $1282 | 0, $1263 | 0, $1264 | 0) | 0;
  $1284 = getTempRet0() | 0;
  $1285 = $1282 ^ $1283;
  $1286 = $1281 ^ $1284;
  $1287 = _i64Add($1271 | 0, $1272 | 0, $1273 | 0, $1274 | 0) | 0;
  $1288 = getTempRet0() | 0;
  $1289 = $1272 ^ $1287;
  $1290 = $1271 ^ $1288;
  $1291 = _i64Add($1283 | 0, $1284 | 0, $55 | 0, $57 | 0) | 0;
  $1292 = getTempRet0() | 0;
  $1293 = _i64Add($1289 | 0, $1290 | 0, $1215 | 0, $1216 | 0) | 0;
  $1294 = getTempRet0() | 0;
  $1295 = _i64Add($1287 | 0, $1288 | 0, $89 | 0, $90 | 0) | 0;
  $1296 = getTempRet0() | 0;
  $1297 = _i64Add($52 | 0, $54 | 0, 14, 0) | 0;
  $1298 = getTempRet0() | 0;
  $1299 = _i64Add($1297 | 0, $1298 | 0, $1285 | 0, $1286 | 0) | 0;
  $1300 = getTempRet0() | 0;
  $1301 = _i64Add($1291 | 0, $1292 | 0, $1293 | 0, $1294 | 0) | 0;
  $1302 = getTempRet0() | 0;
  $1303 = _bitshift64Shl($1293 | 0, $1294 | 0, 14) | 0;
  $1304 = getTempRet0() | 0;
  $1305 = _bitshift64Lshr($1293 | 0, $1294 | 0, 50) | 0;
  $1306 = getTempRet0() | 0;
  $1307 = $1303 | $1305;
  $1308 = $1304 | $1306;
  $1309 = $1307 ^ $1301;
  $1310 = $1308 ^ $1302;
  $1311 = _i64Add($1295 | 0, $1296 | 0, $1299 | 0, $1300 | 0) | 0;
  $1312 = getTempRet0() | 0;
  $1313 = _bitshift64Shl($1299 | 0, $1300 | 0, 16) | 0;
  $1314 = getTempRet0() | 0;
  $1315 = _bitshift64Lshr($1299 | 0, $1300 | 0, 48) | 0;
  $1316 = getTempRet0() | 0;
  $1317 = $1313 | $1315;
  $1318 = $1314 | $1316;
  $1319 = $1317 ^ $1311;
  $1320 = $1318 ^ $1312;
  $1321 = _i64Add($1319 | 0, $1320 | 0, $1301 | 0, $1302 | 0) | 0;
  $1322 = getTempRet0() | 0;
  $1323 = _bitshift64Shl($1319 | 0, $1320 | 0, 52) | 0;
  $1324 = getTempRet0() | 0;
  $1325 = _bitshift64Lshr($1319 | 0, $1320 | 0, 12) | 0;
  $1326 = getTempRet0() | 0;
  $1327 = $1323 | $1325;
  $1328 = $1324 | $1326;
  $1329 = $1327 ^ $1321;
  $1330 = $1328 ^ $1322;
  $1331 = _i64Add($1309 | 0, $1310 | 0, $1311 | 0, $1312 | 0) | 0;
  $1332 = getTempRet0() | 0;
  $1333 = _bitshift64Shl($1309 | 0, $1310 | 0, 57) | 0;
  $1334 = getTempRet0() | 0;
  $1335 = _bitshift64Lshr($1309 | 0, $1310 | 0, 7) | 0;
  $1336 = getTempRet0() | 0;
  $1337 = $1333 | $1335;
  $1338 = $1334 | $1336;
  $1339 = $1337 ^ $1331;
  $1340 = $1338 ^ $1332;
  $1341 = _i64Add($1339 | 0, $1340 | 0, $1321 | 0, $1322 | 0) | 0;
  $1342 = getTempRet0() | 0;
  $1343 = _bitshift64Shl($1339 | 0, $1340 | 0, 23) | 0;
  $1344 = getTempRet0() | 0;
  $1345 = _bitshift64Lshr($1339 | 0, $1340 | 0, 41) | 0;
  $1346 = getTempRet0() | 0;
  $1347 = $1343 | $1345;
  $1348 = $1344 | $1346;
  $1349 = $1347 ^ $1341;
  $1350 = $1348 ^ $1342;
  $1351 = _i64Add($1329 | 0, $1330 | 0, $1331 | 0, $1332 | 0) | 0;
  $1352 = getTempRet0() | 0;
  $1353 = _bitshift64Shl($1329 | 0, $1330 | 0, 40) | 0;
  $1354 = getTempRet0() | 0;
  $1355 = _bitshift64Lshr($1329 | 0, $1330 | 0, 24) | 0;
  $1356 = getTempRet0() | 0;
  $1357 = $1353 | $1355;
  $1358 = $1354 | $1356;
  $1359 = $1357 ^ $1351;
  $1360 = $1358 ^ $1352;
  $1361 = _i64Add($1359 | 0, $1360 | 0, $1341 | 0, $1342 | 0) | 0;
  $1362 = getTempRet0() | 0;
  $1363 = _bitshift64Shl($1359 | 0, $1360 | 0, 5) | 0;
  $1364 = getTempRet0() | 0;
  $1365 = _bitshift64Lshr($1359 | 0, $1360 | 0, 59) | 0;
  $1366 = getTempRet0() | 0;
  $1367 = $1363 | $1365;
  $1368 = $1364 | $1366;
  $1369 = $1367 ^ $1361;
  $1370 = $1368 ^ $1362;
  $1371 = _i64Add($1349 | 0, $1350 | 0, $1351 | 0, $1352 | 0) | 0;
  $1372 = getTempRet0() | 0;
  $1373 = _bitshift64Shl($1349 | 0, $1350 | 0, 37) | 0;
  $1374 = getTempRet0() | 0;
  $1375 = _bitshift64Lshr($1349 | 0, $1350 | 0, 27) | 0;
  $1376 = getTempRet0() | 0;
  $1377 = $1373 | $1375;
  $1378 = $1374 | $1376;
  $1379 = $1377 ^ $1371;
  $1380 = $1378 ^ $1372;
  $1381 = _i64Add($1361 | 0, $1362 | 0, $44 | 0, $46 | 0) | 0;
  $1382 = getTempRet0() | 0;
  $1383 = _i64Add($1379 | 0, $1380 | 0, $89 | 0, $90 | 0) | 0;
  $1384 = getTempRet0() | 0;
  $1385 = _i64Add($1371 | 0, $1372 | 0, $105 | 0, $106 | 0) | 0;
  $1386 = getTempRet0() | 0;
  $1387 = _i64Add($56 | 0, $58 | 0, 15, 0) | 0;
  $1388 = getTempRet0() | 0;
  $1389 = _i64Add($1387 | 0, $1388 | 0, $1369 | 0, $1370 | 0) | 0;
  $1390 = getTempRet0() | 0;
  $1391 = _i64Add($1381 | 0, $1382 | 0, $1383 | 0, $1384 | 0) | 0;
  $1392 = getTempRet0() | 0;
  $1393 = _bitshift64Shl($1383 | 0, $1384 | 0, 25) | 0;
  $1394 = getTempRet0() | 0;
  $1395 = _bitshift64Lshr($1383 | 0, $1384 | 0, 39) | 0;
  $1396 = getTempRet0() | 0;
  $1397 = $1393 | $1395;
  $1398 = $1394 | $1396;
  $1399 = $1397 ^ $1391;
  $1400 = $1398 ^ $1392;
  $1401 = _i64Add($1385 | 0, $1386 | 0, $1389 | 0, $1390 | 0) | 0;
  $1402 = getTempRet0() | 0;
  $1403 = _bitshift64Shl($1389 | 0, $1390 | 0, 33) | 0;
  $1404 = getTempRet0() | 0;
  $1405 = _bitshift64Lshr($1389 | 0, $1390 | 0, 31) | 0;
  $1406 = getTempRet0() | 0;
  $1407 = $1403 | $1405;
  $1408 = $1404 | $1406;
  $1409 = $1407 ^ $1401;
  $1410 = $1408 ^ $1402;
  $1411 = _i64Add($1409 | 0, $1410 | 0, $1391 | 0, $1392 | 0) | 0;
  $1412 = getTempRet0() | 0;
  $1413 = _bitshift64Shl($1409 | 0, $1410 | 0, 46) | 0;
  $1414 = getTempRet0() | 0;
  $1415 = _bitshift64Lshr($1409 | 0, $1410 | 0, 18) | 0;
  $1416 = getTempRet0() | 0;
  $1417 = $1413 | $1415;
  $1418 = $1414 | $1416;
  $1419 = $1417 ^ $1411;
  $1420 = $1418 ^ $1412;
  $1421 = _i64Add($1399 | 0, $1400 | 0, $1401 | 0, $1402 | 0) | 0;
  $1422 = getTempRet0() | 0;
  $1423 = _bitshift64Shl($1399 | 0, $1400 | 0, 12) | 0;
  $1424 = getTempRet0() | 0;
  $1425 = _bitshift64Lshr($1399 | 0, $1400 | 0, 52) | 0;
  $1426 = getTempRet0() | 0;
  $1427 = $1423 | $1425;
  $1428 = $1424 | $1426;
  $1429 = $1427 ^ $1421;
  $1430 = $1428 ^ $1422;
  $1431 = _i64Add($1429 | 0, $1430 | 0, $1411 | 0, $1412 | 0) | 0;
  $1432 = getTempRet0() | 0;
  $1433 = _bitshift64Shl($1429 | 0, $1430 | 0, 58) | 0;
  $1434 = getTempRet0() | 0;
  $1435 = _bitshift64Lshr($1429 | 0, $1430 | 0, 6) | 0;
  $1436 = getTempRet0() | 0;
  $1437 = $1433 | $1435;
  $1438 = $1434 | $1436;
  $1439 = $1437 ^ $1431;
  $1440 = $1438 ^ $1432;
  $1441 = _i64Add($1419 | 0, $1420 | 0, $1421 | 0, $1422 | 0) | 0;
  $1442 = getTempRet0() | 0;
  $1443 = _bitshift64Shl($1419 | 0, $1420 | 0, 22) | 0;
  $1444 = getTempRet0() | 0;
  $1445 = _bitshift64Lshr($1419 | 0, $1420 | 0, 42) | 0;
  $1446 = getTempRet0() | 0;
  $1447 = $1443 | $1445;
  $1448 = $1444 | $1446;
  $1449 = $1447 ^ $1441;
  $1450 = $1448 ^ $1442;
  $1451 = _i64Add($1449 | 0, $1450 | 0, $1431 | 0, $1432 | 0) | 0;
  $1452 = getTempRet0() | 0;
  $1453 = $1450 ^ $1451;
  $1454 = $1449 ^ $1452;
  $1455 = _i64Add($1439 | 0, $1440 | 0, $1441 | 0, $1442 | 0) | 0;
  $1456 = getTempRet0() | 0;
  $1457 = $1440 ^ $1455;
  $1458 = $1439 ^ $1456;
  $1459 = _i64Add($1451 | 0, $1452 | 0, $48 | 0, $50 | 0) | 0;
  $1460 = getTempRet0() | 0;
  $1461 = _i64Add($1457 | 0, $1458 | 0, $105 | 0, $106 | 0) | 0;
  $1462 = getTempRet0() | 0;
  $1463 = _i64Add($1455 | 0, $1456 | 0, $183 | 0, $184 | 0) | 0;
  $1464 = getTempRet0() | 0;
  $1465 = _i64Add($55 | 0, $57 | 0, 16, 0) | 0;
  $1466 = getTempRet0() | 0;
  $1467 = _i64Add($1465 | 0, $1466 | 0, $1453 | 0, $1454 | 0) | 0;
  $1468 = getTempRet0() | 0;
  $1469 = _i64Add($1459 | 0, $1460 | 0, $1461 | 0, $1462 | 0) | 0;
  $1470 = getTempRet0() | 0;
  $1471 = _bitshift64Shl($1461 | 0, $1462 | 0, 14) | 0;
  $1472 = getTempRet0() | 0;
  $1473 = _bitshift64Lshr($1461 | 0, $1462 | 0, 50) | 0;
  $1474 = getTempRet0() | 0;
  $1475 = $1471 | $1473;
  $1476 = $1472 | $1474;
  $1477 = $1475 ^ $1469;
  $1478 = $1476 ^ $1470;
  $1479 = _i64Add($1463 | 0, $1464 | 0, $1467 | 0, $1468 | 0) | 0;
  $1480 = getTempRet0() | 0;
  $1481 = _bitshift64Shl($1467 | 0, $1468 | 0, 16) | 0;
  $1482 = getTempRet0() | 0;
  $1483 = _bitshift64Lshr($1467 | 0, $1468 | 0, 48) | 0;
  $1484 = getTempRet0() | 0;
  $1485 = $1481 | $1483;
  $1486 = $1482 | $1484;
  $1487 = $1485 ^ $1479;
  $1488 = $1486 ^ $1480;
  $1489 = _i64Add($1487 | 0, $1488 | 0, $1469 | 0, $1470 | 0) | 0;
  $1490 = getTempRet0() | 0;
  $1491 = _bitshift64Shl($1487 | 0, $1488 | 0, 52) | 0;
  $1492 = getTempRet0() | 0;
  $1493 = _bitshift64Lshr($1487 | 0, $1488 | 0, 12) | 0;
  $1494 = getTempRet0() | 0;
  $1495 = $1491 | $1493;
  $1496 = $1492 | $1494;
  $1497 = $1495 ^ $1489;
  $1498 = $1496 ^ $1490;
  $1499 = _i64Add($1477 | 0, $1478 | 0, $1479 | 0, $1480 | 0) | 0;
  $1500 = getTempRet0() | 0;
  $1501 = _bitshift64Shl($1477 | 0, $1478 | 0, 57) | 0;
  $1502 = getTempRet0() | 0;
  $1503 = _bitshift64Lshr($1477 | 0, $1478 | 0, 7) | 0;
  $1504 = getTempRet0() | 0;
  $1505 = $1501 | $1503;
  $1506 = $1502 | $1504;
  $1507 = $1505 ^ $1499;
  $1508 = $1506 ^ $1500;
  $1509 = _i64Add($1507 | 0, $1508 | 0, $1489 | 0, $1490 | 0) | 0;
  $1510 = getTempRet0() | 0;
  $1511 = _bitshift64Shl($1507 | 0, $1508 | 0, 23) | 0;
  $1512 = getTempRet0() | 0;
  $1513 = _bitshift64Lshr($1507 | 0, $1508 | 0, 41) | 0;
  $1514 = getTempRet0() | 0;
  $1515 = $1511 | $1513;
  $1516 = $1512 | $1514;
  $1517 = $1515 ^ $1509;
  $1518 = $1516 ^ $1510;
  $1519 = _i64Add($1497 | 0, $1498 | 0, $1499 | 0, $1500 | 0) | 0;
  $1520 = getTempRet0() | 0;
  $1521 = _bitshift64Shl($1497 | 0, $1498 | 0, 40) | 0;
  $1522 = getTempRet0() | 0;
  $1523 = _bitshift64Lshr($1497 | 0, $1498 | 0, 24) | 0;
  $1524 = getTempRet0() | 0;
  $1525 = $1521 | $1523;
  $1526 = $1522 | $1524;
  $1527 = $1525 ^ $1519;
  $1528 = $1526 ^ $1520;
  $1529 = _i64Add($1527 | 0, $1528 | 0, $1509 | 0, $1510 | 0) | 0;
  $1530 = getTempRet0() | 0;
  $1531 = _bitshift64Shl($1527 | 0, $1528 | 0, 5) | 0;
  $1532 = getTempRet0() | 0;
  $1533 = _bitshift64Lshr($1527 | 0, $1528 | 0, 59) | 0;
  $1534 = getTempRet0() | 0;
  $1535 = $1531 | $1533;
  $1536 = $1532 | $1534;
  $1537 = $1535 ^ $1529;
  $1538 = $1536 ^ $1530;
  $1539 = _i64Add($1517 | 0, $1518 | 0, $1519 | 0, $1520 | 0) | 0;
  $1540 = getTempRet0() | 0;
  $1541 = _bitshift64Shl($1517 | 0, $1518 | 0, 37) | 0;
  $1542 = getTempRet0() | 0;
  $1543 = _bitshift64Lshr($1517 | 0, $1518 | 0, 27) | 0;
  $1544 = getTempRet0() | 0;
  $1545 = $1541 | $1543;
  $1546 = $1542 | $1544;
  $1547 = $1545 ^ $1539;
  $1548 = $1546 ^ $1540;
  $1549 = _i64Add($1529 | 0, $1530 | 0, $52 | 0, $54 | 0) | 0;
  $1550 = getTempRet0() | 0;
  $1551 = _i64Add($1547 | 0, $1548 | 0, $183 | 0, $184 | 0) | 0;
  $1552 = getTempRet0() | 0;
  $1553 = _i64Add($1539 | 0, $1540 | 0, $263 | 0, $264 | 0) | 0;
  $1554 = getTempRet0() | 0;
  $1555 = _i64Add($44 | 0, $46 | 0, 17, 0) | 0;
  $1556 = getTempRet0() | 0;
  $1557 = _i64Add($1555 | 0, $1556 | 0, $1537 | 0, $1538 | 0) | 0;
  $1558 = getTempRet0() | 0;
  $1559 = _i64Add($1549 | 0, $1550 | 0, $1551 | 0, $1552 | 0) | 0;
  $1560 = getTempRet0() | 0;
  $1561 = _bitshift64Shl($1551 | 0, $1552 | 0, 25) | 0;
  $1562 = getTempRet0() | 0;
  $1563 = _bitshift64Lshr($1551 | 0, $1552 | 0, 39) | 0;
  $1564 = getTempRet0() | 0;
  $1565 = $1561 | $1563;
  $1566 = $1562 | $1564;
  $1567 = $1565 ^ $1559;
  $1568 = $1566 ^ $1560;
  $1569 = _i64Add($1553 | 0, $1554 | 0, $1557 | 0, $1558 | 0) | 0;
  $1570 = getTempRet0() | 0;
  $1571 = _bitshift64Shl($1557 | 0, $1558 | 0, 33) | 0;
  $1572 = getTempRet0() | 0;
  $1573 = _bitshift64Lshr($1557 | 0, $1558 | 0, 31) | 0;
  $1574 = getTempRet0() | 0;
  $1575 = $1571 | $1573;
  $1576 = $1572 | $1574;
  $1577 = $1575 ^ $1569;
  $1578 = $1576 ^ $1570;
  $1579 = _i64Add($1577 | 0, $1578 | 0, $1559 | 0, $1560 | 0) | 0;
  $1580 = getTempRet0() | 0;
  $1581 = _bitshift64Shl($1577 | 0, $1578 | 0, 46) | 0;
  $1582 = getTempRet0() | 0;
  $1583 = _bitshift64Lshr($1577 | 0, $1578 | 0, 18) | 0;
  $1584 = getTempRet0() | 0;
  $1585 = $1581 | $1583;
  $1586 = $1582 | $1584;
  $1587 = $1585 ^ $1579;
  $1588 = $1586 ^ $1580;
  $1589 = _i64Add($1567 | 0, $1568 | 0, $1569 | 0, $1570 | 0) | 0;
  $1590 = getTempRet0() | 0;
  $1591 = _bitshift64Shl($1567 | 0, $1568 | 0, 12) | 0;
  $1592 = getTempRet0() | 0;
  $1593 = _bitshift64Lshr($1567 | 0, $1568 | 0, 52) | 0;
  $1594 = getTempRet0() | 0;
  $1595 = $1591 | $1593;
  $1596 = $1592 | $1594;
  $1597 = $1595 ^ $1589;
  $1598 = $1596 ^ $1590;
  $1599 = _i64Add($1597 | 0, $1598 | 0, $1579 | 0, $1580 | 0) | 0;
  $1600 = getTempRet0() | 0;
  $1601 = _bitshift64Shl($1597 | 0, $1598 | 0, 58) | 0;
  $1602 = getTempRet0() | 0;
  $1603 = _bitshift64Lshr($1597 | 0, $1598 | 0, 6) | 0;
  $1604 = getTempRet0() | 0;
  $1605 = $1601 | $1603;
  $1606 = $1602 | $1604;
  $1607 = $1605 ^ $1599;
  $1608 = $1606 ^ $1600;
  $1609 = _i64Add($1587 | 0, $1588 | 0, $1589 | 0, $1590 | 0) | 0;
  $1610 = getTempRet0() | 0;
  $1611 = _bitshift64Shl($1587 | 0, $1588 | 0, 22) | 0;
  $1612 = getTempRet0() | 0;
  $1613 = _bitshift64Lshr($1587 | 0, $1588 | 0, 42) | 0;
  $1614 = getTempRet0() | 0;
  $1615 = $1611 | $1613;
  $1616 = $1612 | $1614;
  $1617 = $1615 ^ $1609;
  $1618 = $1616 ^ $1610;
  $1619 = _i64Add($1617 | 0, $1618 | 0, $1599 | 0, $1600 | 0) | 0;
  $1620 = getTempRet0() | 0;
  $1621 = $1618 ^ $1619;
  $1622 = $1617 ^ $1620;
  $1623 = _i64Add($1607 | 0, $1608 | 0, $1609 | 0, $1610 | 0) | 0;
  $1624 = getTempRet0() | 0;
  $1625 = $1608 ^ $1623;
  $1626 = $1607 ^ $1624;
  $1627 = _i64Add($1619 | 0, $1620 | 0, $56 | 0, $58 | 0) | 0;
  $1628 = getTempRet0() | 0;
  $1629 = _i64Add($1625 | 0, $1626 | 0, $263 | 0, $264 | 0) | 0;
  $1630 = getTempRet0() | 0;
  $1631 = _i64Add($1623 | 0, $1624 | 0, $355 | 0, $356 | 0) | 0;
  $1632 = getTempRet0() | 0;
  $1633 = _i64Add($48 | 0, $50 | 0, 18, 0) | 0;
  $1634 = getTempRet0() | 0;
  $1635 = _i64Add($1633 | 0, $1634 | 0, $1621 | 0, $1622 | 0) | 0;
  $1636 = getTempRet0() | 0;
  $1637 = $1627 ^ $65;
  $1638 = $1628 ^ $68;
  $1639 = $arrayidx11;
  $1640 = $1639;
  HEAP32[$1640 >> 2] = $1637;
  $1641 = $1639 + 4 | 0;
  $1642 = $1641;
  HEAP32[$1642 >> 2] = $1638;
  $1643 = $1629 ^ $71;
  $1644 = $1630 ^ $74;
  $1645 = $arrayidx16;
  $1646 = $1645;
  HEAP32[$1646 >> 2] = $1643;
  $1647 = $1645 + 4 | 0;
  $1648 = $1647;
  HEAP32[$1648 >> 2] = $1644;
  $1649 = $1631 ^ $77;
  $1650 = $1632 ^ $80;
  $1651 = $arrayidx21;
  $1652 = $1651;
  HEAP32[$1652 >> 2] = $1649;
  $1653 = $1651 + 4 | 0;
  $1654 = $1653;
  HEAP32[$1654 >> 2] = $1650;
  $1655 = $1635 ^ $83;
  $1656 = $1636 ^ $86;
  $1657 = $arrayidx26;
  $1658 = $1657;
  HEAP32[$1658 >> 2] = $1655;
  $1659 = $1657 + 4 | 0;
  $1660 = $1659;
  HEAP32[$1660 >> 2] = $1656;
  $1661 = $62 & -1073741825;
  $dec = $blkCnt$addr$0 + -1 | 0;
  $tobool = ($dec | 0) == 0;
  if ($tobool) {
   break;
  } else {
   $60$phi = $60;
   $39 = $41;
   $40 = $42;
   $44 = $1637;
   $46 = $1638;
   $48 = $1643;
   $50 = $1644;
   $52 = $1649;
   $54 = $1650;
   $56 = $1655;
   $58 = $1656;
   $62 = $1661;
   $blkCnt$addr$0 = $dec;
   $blkPtr$addr$0 = $add$ptr87;
   $60 = $60$phi;
  }
 }
 $1662 = ___muldi3($13 | 0, $14 | 0, $byteCntAdd | 0, 0) | 0;
 $1663 = getTempRet0() | 0;
 $1664 = _i64Add($2 | 0, $5 | 0, $1662 | 0, $1663 | 0) | 0;
 $1665 = getTempRet0() | 0;
 $1666 = $arrayidx;
 $1667 = $1666;
 HEAP32[$1667 >> 2] = $1664;
 $1668 = $1666 + 4 | 0;
 $1669 = $1668;
 HEAP32[$1669 >> 2] = $1665;
 $1670 = $arrayidx4;
 $1671 = $1670;
 HEAP32[$1671 >> 2] = $60;
 $1672 = $1670 + 4 | 0;
 $1673 = $1672;
 HEAP32[$1673 >> 2] = $1661;
 return;
}

function _Skein1024_Process_Block($ctx, $blkPtr, $blkCnt, $byteCntAdd) {
 $ctx = $ctx | 0;
 $blkPtr = $blkPtr | 0;
 $blkCnt = $blkCnt | 0;
 $byteCntAdd = $byteCntAdd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $add$ptr13 = 0, $add$ptr903 = 0, $add423 = 0, $add429 = 0, $add435 = 0, $add441 = 0, $add447 = 0, $add453 = 0, $add459 = 0, $add465 = 0, $add471 = 0, $add477 = 0, $add483 = 0;
 var $add489 = 0, $add495 = 0, $add507 = 0, $add519 = 0, $add532 = 0, $add823 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx156 = 0, $arrayidx166 = 0, $arrayidx17 = 0, $arrayidx20 = 0, $arrayidx22 = 0, $arrayidx25 = 0, $arrayidx27 = 0, $arrayidx30 = 0, $arrayidx32 = 0, $arrayidx35 = 0, $arrayidx37 = 0, $arrayidx4 = 0;
 var $arrayidx40 = 0, $arrayidx418 = 0, $arrayidx42 = 0, $arrayidx424 = 0, $arrayidx430 = 0, $arrayidx436 = 0, $arrayidx442 = 0, $arrayidx448 = 0, $arrayidx45 = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx466 = 0, $arrayidx47 = 0, $arrayidx472 = 0, $arrayidx478 = 0, $arrayidx484 = 0, $arrayidx490 = 0, $arrayidx496 = 0, $arrayidx50 = 0, $arrayidx501 = 0;
 var $arrayidx508 = 0, $arrayidx513 = 0, $arrayidx52 = 0, $arrayidx520 = 0, $arrayidx528 = 0, $arrayidx533 = 0, $arrayidx538 = 0, $arrayidx543 = 0, $arrayidx55 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx62 = 0, $arrayidx65 = 0, $arrayidx67 = 0, $arrayidx7 = 0, $arrayidx70 = 0, $arrayidx72 = 0, $arrayidx75 = 0, $arrayidx77 = 0, $arrayidx80 = 0;
 var $arrayidx82 = 0, $arrayidx824 = 0, $arrayidx834 = 0, $arrayidx85 = 0, $arrayidx87 = 0, $arrayidx90 = 0, $blkCnt$addr$0 = 0, $blkPtr$addr$0 = 0, $cmp = 0, $dec = 0, $kw = 0, $r$0532 = 0, $sub = 0, $tobool = 0, $w$sroa$11$0$$sroa_idx = 0, $w$sroa$13$0$$sroa_idx = 0, $w$sroa$15$0$$sroa_idx = 0, $w$sroa$17$0$$sroa_idx = 0, $w$sroa$19$0$$sroa_idx = 0, $w$sroa$21$0$$sroa_idx = 0;
 var $w$sroa$23$0$$sroa_idx = 0, $w$sroa$25$0$$sroa_idx = 0, $w$sroa$27$0$$sroa_idx = 0, $w$sroa$29$0$$sroa_idx = 0, $w$sroa$3$0$$sroa_idx = 0, $w$sroa$31$0$$sroa_idx = 0, $w$sroa$5$0$$sroa_idx = 0, $w$sroa$7$0$$sroa_idx = 0, $w$sroa$9$0$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(320 | 0);
 $kw = sp;
 $arrayidx = $ctx + 8 | 0;
 $0 = $arrayidx;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $kw;
 $7 = $6;
 HEAP32[$7 >> 2] = $2;
 $8 = $6 + 4 | 0;
 $9 = $8;
 HEAP32[$9 >> 2] = $5;
 $arrayidx4 = $ctx + 16 | 0;
 $10 = $arrayidx4;
 $11 = $10;
 $12 = HEAP32[$11 >> 2] | 0;
 $13 = $10 + 4 | 0;
 $14 = $13;
 $15 = HEAP32[$14 >> 2] | 0;
 $arrayidx7 = $kw + 8 | 0;
 $16 = $arrayidx7;
 $17 = $16;
 HEAP32[$17 >> 2] = $12;
 $18 = $16 + 4 | 0;
 $19 = $18;
 HEAP32[$19 >> 2] = $15;
 $arrayidx11 = $ctx + 24 | 0;
 $add$ptr13 = $kw + 24 | 0;
 $arrayidx17 = $ctx + 32 | 0;
 $arrayidx20 = $kw + 32 | 0;
 $arrayidx22 = $ctx + 40 | 0;
 $arrayidx25 = $kw + 40 | 0;
 $arrayidx27 = $ctx + 48 | 0;
 $arrayidx30 = $kw + 48 | 0;
 $arrayidx32 = $ctx + 56 | 0;
 $arrayidx35 = $kw + 56 | 0;
 $arrayidx37 = $ctx + 64 | 0;
 $arrayidx40 = $kw + 64 | 0;
 $arrayidx42 = $ctx + 72 | 0;
 $arrayidx45 = $kw + 72 | 0;
 $arrayidx47 = $ctx + 80 | 0;
 $arrayidx50 = $kw + 80 | 0;
 $arrayidx52 = $ctx + 88 | 0;
 $arrayidx55 = $kw + 88 | 0;
 $arrayidx57 = $ctx + 96 | 0;
 $arrayidx60 = $kw + 96 | 0;
 $arrayidx62 = $ctx + 104 | 0;
 $arrayidx65 = $kw + 104 | 0;
 $arrayidx67 = $ctx + 112 | 0;
 $arrayidx70 = $kw + 112 | 0;
 $arrayidx72 = $ctx + 120 | 0;
 $arrayidx75 = $kw + 120 | 0;
 $arrayidx77 = $ctx + 128 | 0;
 $arrayidx80 = $kw + 128 | 0;
 $arrayidx82 = $ctx + 136 | 0;
 $arrayidx85 = $kw + 136 | 0;
 $arrayidx87 = $ctx + 144 | 0;
 $arrayidx90 = $kw + 144 | 0;
 $arrayidx156 = $kw + 152 | 0;
 $arrayidx166 = $kw + 16 | 0;
 $20 = $arrayidx11;
 $21 = $20;
 $22 = HEAP32[$21 >> 2] | 0;
 $23 = $20 + 4 | 0;
 $24 = $23;
 $25 = HEAP32[$24 >> 2] | 0;
 $26 = $arrayidx17;
 $27 = $26;
 $28 = HEAP32[$27 >> 2] | 0;
 $29 = $26 + 4 | 0;
 $30 = $29;
 $31 = HEAP32[$30 >> 2] | 0;
 $32 = $arrayidx22;
 $33 = $32;
 $34 = HEAP32[$33 >> 2] | 0;
 $35 = $32 + 4 | 0;
 $36 = $35;
 $37 = HEAP32[$36 >> 2] | 0;
 $38 = $arrayidx27;
 $39 = $38;
 $40 = HEAP32[$39 >> 2] | 0;
 $41 = $38 + 4 | 0;
 $42 = $41;
 $43 = HEAP32[$42 >> 2] | 0;
 $44 = $arrayidx32;
 $45 = $44;
 $46 = HEAP32[$45 >> 2] | 0;
 $47 = $44 + 4 | 0;
 $48 = $47;
 $49 = HEAP32[$48 >> 2] | 0;
 $50 = $arrayidx37;
 $51 = $50;
 $52 = HEAP32[$51 >> 2] | 0;
 $53 = $50 + 4 | 0;
 $54 = $53;
 $55 = HEAP32[$54 >> 2] | 0;
 $56 = $arrayidx42;
 $57 = $56;
 $58 = HEAP32[$57 >> 2] | 0;
 $59 = $56 + 4 | 0;
 $60 = $59;
 $61 = HEAP32[$60 >> 2] | 0;
 $62 = $arrayidx47;
 $63 = $62;
 $64 = HEAP32[$63 >> 2] | 0;
 $65 = $62 + 4 | 0;
 $66 = $65;
 $67 = HEAP32[$66 >> 2] | 0;
 $68 = $arrayidx52;
 $69 = $68;
 $70 = HEAP32[$69 >> 2] | 0;
 $71 = $68 + 4 | 0;
 $72 = $71;
 $73 = HEAP32[$72 >> 2] | 0;
 $74 = $arrayidx57;
 $75 = $74;
 $76 = HEAP32[$75 >> 2] | 0;
 $77 = $74 + 4 | 0;
 $78 = $77;
 $79 = HEAP32[$78 >> 2] | 0;
 $80 = $arrayidx62;
 $81 = $80;
 $82 = HEAP32[$81 >> 2] | 0;
 $83 = $80 + 4 | 0;
 $84 = $83;
 $85 = HEAP32[$84 >> 2] | 0;
 $86 = $arrayidx67;
 $87 = $86;
 $88 = HEAP32[$87 >> 2] | 0;
 $89 = $86 + 4 | 0;
 $90 = $89;
 $91 = HEAP32[$90 >> 2] | 0;
 $92 = $arrayidx72;
 $93 = $92;
 $94 = HEAP32[$93 >> 2] | 0;
 $95 = $92 + 4 | 0;
 $96 = $95;
 $97 = HEAP32[$96 >> 2] | 0;
 $98 = $arrayidx77;
 $99 = $98;
 $100 = HEAP32[$99 >> 2] | 0;
 $101 = $98 + 4 | 0;
 $102 = $101;
 $103 = HEAP32[$102 >> 2] | 0;
 $104 = $arrayidx82;
 $105 = $104;
 $106 = HEAP32[$105 >> 2] | 0;
 $107 = $104 + 4 | 0;
 $108 = $107;
 $109 = HEAP32[$108 >> 2] | 0;
 $110 = $arrayidx87;
 $111 = $110;
 $112 = HEAP32[$111 >> 2] | 0;
 $113 = $110 + 4 | 0;
 $114 = $113;
 $115 = HEAP32[$114 >> 2] | 0;
 $116 = $2;
 $117 = $5;
 $126 = $22;
 $129 = $25;
 $132 = $28;
 $135 = $31;
 $138 = $34;
 $141 = $37;
 $144 = $40;
 $147 = $43;
 $150 = $46;
 $153 = $49;
 $156 = $52;
 $159 = $55;
 $162 = $58;
 $165 = $61;
 $168 = $64;
 $171 = $67;
 $174 = $70;
 $177 = $73;
 $180 = $76;
 $183 = $79;
 $186 = $82;
 $189 = $85;
 $192 = $88;
 $195 = $91;
 $198 = $94;
 $201 = $97;
 $204 = $100;
 $207 = $103;
 $210 = $106;
 $213 = $109;
 $216 = $112;
 $219 = $115;
 $257 = $12;
 $259 = $15;
 $blkCnt$addr$0 = $blkCnt;
 $blkPtr$addr$0 = $blkPtr;
 while (1) {
  $118 = _i64Add($116 | 0, $117 | 0, $byteCntAdd | 0, 0) | 0;
  $119 = getTempRet0() | 0;
  $120 = $kw;
  $121 = $120;
  HEAP32[$121 >> 2] = $118;
  $122 = $120 + 4 | 0;
  $123 = $122;
  HEAP32[$123 >> 2] = $119;
  $124 = $add$ptr13;
  $125 = $124;
  HEAP32[$125 >> 2] = $126;
  $127 = $124 + 4 | 0;
  $128 = $127;
  HEAP32[$128 >> 2] = $129;
  $130 = $arrayidx20;
  $131 = $130;
  HEAP32[$131 >> 2] = $132;
  $133 = $130 + 4 | 0;
  $134 = $133;
  HEAP32[$134 >> 2] = $135;
  $136 = $arrayidx25;
  $137 = $136;
  HEAP32[$137 >> 2] = $138;
  $139 = $136 + 4 | 0;
  $140 = $139;
  HEAP32[$140 >> 2] = $141;
  $142 = $arrayidx30;
  $143 = $142;
  HEAP32[$143 >> 2] = $144;
  $145 = $142 + 4 | 0;
  $146 = $145;
  HEAP32[$146 >> 2] = $147;
  $148 = $arrayidx35;
  $149 = $148;
  HEAP32[$149 >> 2] = $150;
  $151 = $148 + 4 | 0;
  $152 = $151;
  HEAP32[$152 >> 2] = $153;
  $154 = $arrayidx40;
  $155 = $154;
  HEAP32[$155 >> 2] = $156;
  $157 = $154 + 4 | 0;
  $158 = $157;
  HEAP32[$158 >> 2] = $159;
  $160 = $arrayidx45;
  $161 = $160;
  HEAP32[$161 >> 2] = $162;
  $163 = $160 + 4 | 0;
  $164 = $163;
  HEAP32[$164 >> 2] = $165;
  $166 = $arrayidx50;
  $167 = $166;
  HEAP32[$167 >> 2] = $168;
  $169 = $166 + 4 | 0;
  $170 = $169;
  HEAP32[$170 >> 2] = $171;
  $172 = $arrayidx55;
  $173 = $172;
  HEAP32[$173 >> 2] = $174;
  $175 = $172 + 4 | 0;
  $176 = $175;
  HEAP32[$176 >> 2] = $177;
  $178 = $arrayidx60;
  $179 = $178;
  HEAP32[$179 >> 2] = $180;
  $181 = $178 + 4 | 0;
  $182 = $181;
  HEAP32[$182 >> 2] = $183;
  $184 = $arrayidx65;
  $185 = $184;
  HEAP32[$185 >> 2] = $186;
  $187 = $184 + 4 | 0;
  $188 = $187;
  HEAP32[$188 >> 2] = $189;
  $190 = $arrayidx70;
  $191 = $190;
  HEAP32[$191 >> 2] = $192;
  $193 = $190 + 4 | 0;
  $194 = $193;
  HEAP32[$194 >> 2] = $195;
  $196 = $arrayidx75;
  $197 = $196;
  HEAP32[$197 >> 2] = $198;
  $199 = $196 + 4 | 0;
  $200 = $199;
  HEAP32[$200 >> 2] = $201;
  $202 = $arrayidx80;
  $203 = $202;
  HEAP32[$203 >> 2] = $204;
  $205 = $202 + 4 | 0;
  $206 = $205;
  HEAP32[$206 >> 2] = $207;
  $208 = $arrayidx85;
  $209 = $208;
  HEAP32[$209 >> 2] = $210;
  $211 = $208 + 4 | 0;
  $212 = $211;
  HEAP32[$212 >> 2] = $213;
  $214 = $arrayidx90;
  $215 = $214;
  HEAP32[$215 >> 2] = $216;
  $217 = $214 + 4 | 0;
  $218 = $217;
  HEAP32[$218 >> 2] = $219;
  $220 = $126 ^ -1443096030;
  $221 = $129 ^ 466688986;
  $222 = $220 ^ $132;
  $223 = $221 ^ $135;
  $224 = $222 ^ $138;
  $225 = $223 ^ $141;
  $226 = $224 ^ $144;
  $227 = $225 ^ $147;
  $228 = $226 ^ $150;
  $229 = $227 ^ $153;
  $230 = $228 ^ $156;
  $231 = $229 ^ $159;
  $232 = $230 ^ $162;
  $233 = $231 ^ $165;
  $234 = $232 ^ $168;
  $235 = $233 ^ $171;
  $236 = $234 ^ $174;
  $237 = $235 ^ $177;
  $238 = $236 ^ $180;
  $239 = $237 ^ $183;
  $240 = $238 ^ $186;
  $241 = $239 ^ $189;
  $242 = $240 ^ $192;
  $243 = $241 ^ $195;
  $244 = $242 ^ $198;
  $245 = $243 ^ $201;
  $246 = $244 ^ $204;
  $247 = $245 ^ $207;
  $248 = $246 ^ $210;
  $249 = $247 ^ $213;
  $250 = $248 ^ $216;
  $251 = $249 ^ $219;
  $252 = $arrayidx156;
  $253 = $252;
  HEAP32[$253 >> 2] = $250;
  $254 = $252 + 4 | 0;
  $255 = $254;
  HEAP32[$255 >> 2] = $251;
  $256 = $257 ^ $118;
  $258 = $259 ^ $119;
  $260 = $arrayidx166;
  $261 = $260;
  HEAP32[$261 >> 2] = $256;
  $262 = $260 + 4 | 0;
  $263 = $262;
  HEAP32[$263 >> 2] = $258;
  $264 = $blkPtr$addr$0;
  $265 = $264;
  $266 = HEAPU8[$265 >> 0] | HEAPU8[$265 + 1 >> 0] << 8 | HEAPU8[$265 + 2 >> 0] << 16 | HEAPU8[$265 + 3 >> 0] << 24;
  $267 = $264 + 4 | 0;
  $268 = $267;
  $269 = HEAPU8[$268 >> 0] | HEAPU8[$268 + 1 >> 0] << 8 | HEAPU8[$268 + 2 >> 0] << 16 | HEAPU8[$268 + 3 >> 0] << 24;
  $w$sroa$3$0$$sroa_idx = $blkPtr$addr$0 + 8 | 0;
  $270 = $w$sroa$3$0$$sroa_idx;
  $271 = $270;
  $272 = HEAPU8[$271 >> 0] | HEAPU8[$271 + 1 >> 0] << 8 | HEAPU8[$271 + 2 >> 0] << 16 | HEAPU8[$271 + 3 >> 0] << 24;
  $273 = $270 + 4 | 0;
  $274 = $273;
  $275 = HEAPU8[$274 >> 0] | HEAPU8[$274 + 1 >> 0] << 8 | HEAPU8[$274 + 2 >> 0] << 16 | HEAPU8[$274 + 3 >> 0] << 24;
  $w$sroa$5$0$$sroa_idx = $blkPtr$addr$0 + 16 | 0;
  $276 = $w$sroa$5$0$$sroa_idx;
  $277 = $276;
  $278 = HEAPU8[$277 >> 0] | HEAPU8[$277 + 1 >> 0] << 8 | HEAPU8[$277 + 2 >> 0] << 16 | HEAPU8[$277 + 3 >> 0] << 24;
  $279 = $276 + 4 | 0;
  $280 = $279;
  $281 = HEAPU8[$280 >> 0] | HEAPU8[$280 + 1 >> 0] << 8 | HEAPU8[$280 + 2 >> 0] << 16 | HEAPU8[$280 + 3 >> 0] << 24;
  $w$sroa$7$0$$sroa_idx = $blkPtr$addr$0 + 24 | 0;
  $282 = $w$sroa$7$0$$sroa_idx;
  $283 = $282;
  $284 = HEAPU8[$283 >> 0] | HEAPU8[$283 + 1 >> 0] << 8 | HEAPU8[$283 + 2 >> 0] << 16 | HEAPU8[$283 + 3 >> 0] << 24;
  $285 = $282 + 4 | 0;
  $286 = $285;
  $287 = HEAPU8[$286 >> 0] | HEAPU8[$286 + 1 >> 0] << 8 | HEAPU8[$286 + 2 >> 0] << 16 | HEAPU8[$286 + 3 >> 0] << 24;
  $w$sroa$9$0$$sroa_idx = $blkPtr$addr$0 + 32 | 0;
  $288 = $w$sroa$9$0$$sroa_idx;
  $289 = $288;
  $290 = HEAPU8[$289 >> 0] | HEAPU8[$289 + 1 >> 0] << 8 | HEAPU8[$289 + 2 >> 0] << 16 | HEAPU8[$289 + 3 >> 0] << 24;
  $291 = $288 + 4 | 0;
  $292 = $291;
  $293 = HEAPU8[$292 >> 0] | HEAPU8[$292 + 1 >> 0] << 8 | HEAPU8[$292 + 2 >> 0] << 16 | HEAPU8[$292 + 3 >> 0] << 24;
  $w$sroa$11$0$$sroa_idx = $blkPtr$addr$0 + 40 | 0;
  $294 = $w$sroa$11$0$$sroa_idx;
  $295 = $294;
  $296 = HEAPU8[$295 >> 0] | HEAPU8[$295 + 1 >> 0] << 8 | HEAPU8[$295 + 2 >> 0] << 16 | HEAPU8[$295 + 3 >> 0] << 24;
  $297 = $294 + 4 | 0;
  $298 = $297;
  $299 = HEAPU8[$298 >> 0] | HEAPU8[$298 + 1 >> 0] << 8 | HEAPU8[$298 + 2 >> 0] << 16 | HEAPU8[$298 + 3 >> 0] << 24;
  $w$sroa$13$0$$sroa_idx = $blkPtr$addr$0 + 48 | 0;
  $300 = $w$sroa$13$0$$sroa_idx;
  $301 = $300;
  $302 = HEAPU8[$301 >> 0] | HEAPU8[$301 + 1 >> 0] << 8 | HEAPU8[$301 + 2 >> 0] << 16 | HEAPU8[$301 + 3 >> 0] << 24;
  $303 = $300 + 4 | 0;
  $304 = $303;
  $305 = HEAPU8[$304 >> 0] | HEAPU8[$304 + 1 >> 0] << 8 | HEAPU8[$304 + 2 >> 0] << 16 | HEAPU8[$304 + 3 >> 0] << 24;
  $w$sroa$15$0$$sroa_idx = $blkPtr$addr$0 + 56 | 0;
  $306 = $w$sroa$15$0$$sroa_idx;
  $307 = $306;
  $308 = HEAPU8[$307 >> 0] | HEAPU8[$307 + 1 >> 0] << 8 | HEAPU8[$307 + 2 >> 0] << 16 | HEAPU8[$307 + 3 >> 0] << 24;
  $309 = $306 + 4 | 0;
  $310 = $309;
  $311 = HEAPU8[$310 >> 0] | HEAPU8[$310 + 1 >> 0] << 8 | HEAPU8[$310 + 2 >> 0] << 16 | HEAPU8[$310 + 3 >> 0] << 24;
  $w$sroa$17$0$$sroa_idx = $blkPtr$addr$0 + 64 | 0;
  $312 = $w$sroa$17$0$$sroa_idx;
  $313 = $312;
  $314 = HEAPU8[$313 >> 0] | HEAPU8[$313 + 1 >> 0] << 8 | HEAPU8[$313 + 2 >> 0] << 16 | HEAPU8[$313 + 3 >> 0] << 24;
  $315 = $312 + 4 | 0;
  $316 = $315;
  $317 = HEAPU8[$316 >> 0] | HEAPU8[$316 + 1 >> 0] << 8 | HEAPU8[$316 + 2 >> 0] << 16 | HEAPU8[$316 + 3 >> 0] << 24;
  $w$sroa$19$0$$sroa_idx = $blkPtr$addr$0 + 72 | 0;
  $318 = $w$sroa$19$0$$sroa_idx;
  $319 = $318;
  $320 = HEAPU8[$319 >> 0] | HEAPU8[$319 + 1 >> 0] << 8 | HEAPU8[$319 + 2 >> 0] << 16 | HEAPU8[$319 + 3 >> 0] << 24;
  $321 = $318 + 4 | 0;
  $322 = $321;
  $323 = HEAPU8[$322 >> 0] | HEAPU8[$322 + 1 >> 0] << 8 | HEAPU8[$322 + 2 >> 0] << 16 | HEAPU8[$322 + 3 >> 0] << 24;
  $w$sroa$21$0$$sroa_idx = $blkPtr$addr$0 + 80 | 0;
  $324 = $w$sroa$21$0$$sroa_idx;
  $325 = $324;
  $326 = HEAPU8[$325 >> 0] | HEAPU8[$325 + 1 >> 0] << 8 | HEAPU8[$325 + 2 >> 0] << 16 | HEAPU8[$325 + 3 >> 0] << 24;
  $327 = $324 + 4 | 0;
  $328 = $327;
  $329 = HEAPU8[$328 >> 0] | HEAPU8[$328 + 1 >> 0] << 8 | HEAPU8[$328 + 2 >> 0] << 16 | HEAPU8[$328 + 3 >> 0] << 24;
  $w$sroa$23$0$$sroa_idx = $blkPtr$addr$0 + 88 | 0;
  $330 = $w$sroa$23$0$$sroa_idx;
  $331 = $330;
  $332 = HEAPU8[$331 >> 0] | HEAPU8[$331 + 1 >> 0] << 8 | HEAPU8[$331 + 2 >> 0] << 16 | HEAPU8[$331 + 3 >> 0] << 24;
  $333 = $330 + 4 | 0;
  $334 = $333;
  $335 = HEAPU8[$334 >> 0] | HEAPU8[$334 + 1 >> 0] << 8 | HEAPU8[$334 + 2 >> 0] << 16 | HEAPU8[$334 + 3 >> 0] << 24;
  $w$sroa$25$0$$sroa_idx = $blkPtr$addr$0 + 96 | 0;
  $336 = $w$sroa$25$0$$sroa_idx;
  $337 = $336;
  $338 = HEAPU8[$337 >> 0] | HEAPU8[$337 + 1 >> 0] << 8 | HEAPU8[$337 + 2 >> 0] << 16 | HEAPU8[$337 + 3 >> 0] << 24;
  $339 = $336 + 4 | 0;
  $340 = $339;
  $341 = HEAPU8[$340 >> 0] | HEAPU8[$340 + 1 >> 0] << 8 | HEAPU8[$340 + 2 >> 0] << 16 | HEAPU8[$340 + 3 >> 0] << 24;
  $w$sroa$27$0$$sroa_idx = $blkPtr$addr$0 + 104 | 0;
  $342 = $w$sroa$27$0$$sroa_idx;
  $343 = $342;
  $344 = HEAPU8[$343 >> 0] | HEAPU8[$343 + 1 >> 0] << 8 | HEAPU8[$343 + 2 >> 0] << 16 | HEAPU8[$343 + 3 >> 0] << 24;
  $345 = $342 + 4 | 0;
  $346 = $345;
  $347 = HEAPU8[$346 >> 0] | HEAPU8[$346 + 1 >> 0] << 8 | HEAPU8[$346 + 2 >> 0] << 16 | HEAPU8[$346 + 3 >> 0] << 24;
  $w$sroa$29$0$$sroa_idx = $blkPtr$addr$0 + 112 | 0;
  $348 = $w$sroa$29$0$$sroa_idx;
  $349 = $348;
  $350 = HEAPU8[$349 >> 0] | HEAPU8[$349 + 1 >> 0] << 8 | HEAPU8[$349 + 2 >> 0] << 16 | HEAPU8[$349 + 3 >> 0] << 24;
  $351 = $348 + 4 | 0;
  $352 = $351;
  $353 = HEAPU8[$352 >> 0] | HEAPU8[$352 + 1 >> 0] << 8 | HEAPU8[$352 + 2 >> 0] << 16 | HEAPU8[$352 + 3 >> 0] << 24;
  $w$sroa$31$0$$sroa_idx = $blkPtr$addr$0 + 120 | 0;
  $354 = $w$sroa$31$0$$sroa_idx;
  $355 = $354;
  $356 = HEAPU8[$355 >> 0] | HEAPU8[$355 + 1 >> 0] << 8 | HEAPU8[$355 + 2 >> 0] << 16 | HEAPU8[$355 + 3 >> 0] << 24;
  $357 = $354 + 4 | 0;
  $358 = $357;
  $359 = HEAPU8[$358 >> 0] | HEAPU8[$358 + 1 >> 0] << 8 | HEAPU8[$358 + 2 >> 0] << 16 | HEAPU8[$358 + 3 >> 0] << 24;
  $360 = _i64Add($266 | 0, $269 | 0, $126 | 0, $129 | 0) | 0;
  $361 = getTempRet0() | 0;
  $362 = _i64Add($272 | 0, $275 | 0, $132 | 0, $135 | 0) | 0;
  $363 = getTempRet0() | 0;
  $364 = _i64Add($278 | 0, $281 | 0, $138 | 0, $141 | 0) | 0;
  $365 = getTempRet0() | 0;
  $366 = _i64Add($284 | 0, $287 | 0, $144 | 0, $147 | 0) | 0;
  $367 = getTempRet0() | 0;
  $368 = _i64Add($290 | 0, $293 | 0, $150 | 0, $153 | 0) | 0;
  $369 = getTempRet0() | 0;
  $370 = _i64Add($296 | 0, $299 | 0, $156 | 0, $159 | 0) | 0;
  $371 = getTempRet0() | 0;
  $372 = _i64Add($302 | 0, $305 | 0, $162 | 0, $165 | 0) | 0;
  $373 = getTempRet0() | 0;
  $374 = _i64Add($308 | 0, $311 | 0, $168 | 0, $171 | 0) | 0;
  $375 = getTempRet0() | 0;
  $376 = _i64Add($314 | 0, $317 | 0, $174 | 0, $177 | 0) | 0;
  $377 = getTempRet0() | 0;
  $378 = _i64Add($320 | 0, $323 | 0, $180 | 0, $183 | 0) | 0;
  $379 = getTempRet0() | 0;
  $380 = _i64Add($326 | 0, $329 | 0, $186 | 0, $189 | 0) | 0;
  $381 = getTempRet0() | 0;
  $382 = _i64Add($332 | 0, $335 | 0, $192 | 0, $195 | 0) | 0;
  $383 = getTempRet0() | 0;
  $384 = _i64Add($338 | 0, $341 | 0, $198 | 0, $201 | 0) | 0;
  $385 = getTempRet0() | 0;
  $386 = _i64Add($204 | 0, $207 | 0, $118 | 0, $119 | 0) | 0;
  $387 = getTempRet0() | 0;
  $388 = _i64Add($386 | 0, $387 | 0, $344 | 0, $347 | 0) | 0;
  $389 = getTempRet0() | 0;
  $390 = _i64Add($257 | 0, $259 | 0, $210 | 0, $213 | 0) | 0;
  $391 = getTempRet0() | 0;
  $392 = _i64Add($390 | 0, $391 | 0, $350 | 0, $353 | 0) | 0;
  $393 = getTempRet0() | 0;
  $394 = _i64Add($356 | 0, $359 | 0, $216 | 0, $219 | 0) | 0;
  $395 = getTempRet0() | 0;
  $396 = $360;
  $397 = $361;
  $398 = $362;
  $399 = $363;
  $410 = $364;
  $411 = $365;
  $412 = $366;
  $413 = $367;
  $424 = $368;
  $425 = $369;
  $426 = $370;
  $427 = $371;
  $438 = $372;
  $439 = $373;
  $440 = $374;
  $441 = $375;
  $452 = $376;
  $453 = $377;
  $454 = $378;
  $455 = $379;
  $466 = $380;
  $467 = $381;
  $468 = $382;
  $469 = $383;
  $480 = $384;
  $481 = $385;
  $482 = $388;
  $483 = $389;
  $494 = $394;
  $495 = $395;
  $496 = $392;
  $497 = $393;
  $r$0532 = 1;
  while (1) {
   $400 = _i64Add($396 | 0, $397 | 0, $398 | 0, $399 | 0) | 0;
   $401 = getTempRet0() | 0;
   $402 = _bitshift64Shl($398 | 0, $399 | 0, 24) | 0;
   $403 = getTempRet0() | 0;
   $404 = _bitshift64Lshr($398 | 0, $399 | 0, 40) | 0;
   $405 = getTempRet0() | 0;
   $406 = $402 | $404;
   $407 = $403 | $405;
   $408 = $406 ^ $400;
   $409 = $407 ^ $401;
   $414 = _i64Add($410 | 0, $411 | 0, $412 | 0, $413 | 0) | 0;
   $415 = getTempRet0() | 0;
   $416 = _bitshift64Shl($412 | 0, $413 | 0, 13) | 0;
   $417 = getTempRet0() | 0;
   $418 = _bitshift64Lshr($412 | 0, $413 | 0, 51) | 0;
   $419 = getTempRet0() | 0;
   $420 = $416 | $418;
   $421 = $417 | $419;
   $422 = $420 ^ $414;
   $423 = $421 ^ $415;
   $428 = _i64Add($424 | 0, $425 | 0, $426 | 0, $427 | 0) | 0;
   $429 = getTempRet0() | 0;
   $430 = _bitshift64Shl($426 | 0, $427 | 0, 8) | 0;
   $431 = getTempRet0() | 0;
   $432 = _bitshift64Lshr($426 | 0, $427 | 0, 56) | 0;
   $433 = getTempRet0() | 0;
   $434 = $430 | $432;
   $435 = $431 | $433;
   $436 = $434 ^ $428;
   $437 = $435 ^ $429;
   $442 = _i64Add($438 | 0, $439 | 0, $440 | 0, $441 | 0) | 0;
   $443 = getTempRet0() | 0;
   $444 = _bitshift64Shl($440 | 0, $441 | 0, 47) | 0;
   $445 = getTempRet0() | 0;
   $446 = _bitshift64Lshr($440 | 0, $441 | 0, 17) | 0;
   $447 = getTempRet0() | 0;
   $448 = $444 | $446;
   $449 = $445 | $447;
   $450 = $448 ^ $442;
   $451 = $449 ^ $443;
   $456 = _i64Add($452 | 0, $453 | 0, $454 | 0, $455 | 0) | 0;
   $457 = getTempRet0() | 0;
   $458 = _bitshift64Shl($454 | 0, $455 | 0, 8) | 0;
   $459 = getTempRet0() | 0;
   $460 = _bitshift64Lshr($454 | 0, $455 | 0, 56) | 0;
   $461 = getTempRet0() | 0;
   $462 = $458 | $460;
   $463 = $459 | $461;
   $464 = $462 ^ $456;
   $465 = $463 ^ $457;
   $470 = _i64Add($466 | 0, $467 | 0, $468 | 0, $469 | 0) | 0;
   $471 = getTempRet0() | 0;
   $472 = _bitshift64Shl($468 | 0, $469 | 0, 17) | 0;
   $473 = getTempRet0() | 0;
   $474 = _bitshift64Lshr($468 | 0, $469 | 0, 47) | 0;
   $475 = getTempRet0() | 0;
   $476 = $472 | $474;
   $477 = $473 | $475;
   $478 = $476 ^ $470;
   $479 = $477 ^ $471;
   $484 = _i64Add($480 | 0, $481 | 0, $482 | 0, $483 | 0) | 0;
   $485 = getTempRet0() | 0;
   $486 = _bitshift64Shl($482 | 0, $483 | 0, 22) | 0;
   $487 = getTempRet0() | 0;
   $488 = _bitshift64Lshr($482 | 0, $483 | 0, 42) | 0;
   $489 = getTempRet0() | 0;
   $490 = $486 | $488;
   $491 = $487 | $489;
   $492 = $484 ^ $490;
   $493 = $485 ^ $491;
   $498 = _i64Add($494 | 0, $495 | 0, $496 | 0, $497 | 0) | 0;
   $499 = getTempRet0() | 0;
   $500 = _bitshift64Shl($494 | 0, $495 | 0, 37) | 0;
   $501 = getTempRet0() | 0;
   $502 = _bitshift64Lshr($494 | 0, $495 | 0, 27) | 0;
   $503 = getTempRet0() | 0;
   $504 = $500 | $502;
   $505 = $501 | $503;
   $506 = $504 ^ $498;
   $507 = $505 ^ $499;
   $508 = _i64Add($400 | 0, $401 | 0, $464 | 0, $465 | 0) | 0;
   $509 = getTempRet0() | 0;
   $510 = _bitshift64Shl($464 | 0, $465 | 0, 38) | 0;
   $511 = getTempRet0() | 0;
   $512 = _bitshift64Lshr($464 | 0, $465 | 0, 26) | 0;
   $513 = getTempRet0() | 0;
   $514 = $510 | $512;
   $515 = $511 | $513;
   $516 = $508 ^ $514;
   $517 = $509 ^ $515;
   $518 = _i64Add($414 | 0, $415 | 0, $492 | 0, $493 | 0) | 0;
   $519 = getTempRet0() | 0;
   $520 = _bitshift64Shl($492 | 0, $493 | 0, 19) | 0;
   $521 = getTempRet0() | 0;
   $522 = _bitshift64Lshr($492 | 0, $493 | 0, 45) | 0;
   $523 = getTempRet0() | 0;
   $524 = $520 | $522;
   $525 = $521 | $523;
   $526 = $518 ^ $524;
   $527 = $519 ^ $525;
   $528 = _i64Add($442 | 0, $443 | 0, $478 | 0, $479 | 0) | 0;
   $529 = getTempRet0() | 0;
   $530 = _bitshift64Shl($478 | 0, $479 | 0, 10) | 0;
   $531 = getTempRet0() | 0;
   $532 = _bitshift64Lshr($478 | 0, $479 | 0, 54) | 0;
   $533 = getTempRet0() | 0;
   $534 = $530 | $532;
   $535 = $531 | $533;
   $536 = $528 ^ $534;
   $537 = $529 ^ $535;
   $538 = _i64Add($428 | 0, $429 | 0, $506 | 0, $507 | 0) | 0;
   $539 = getTempRet0() | 0;
   $540 = _bitshift64Shl($506 | 0, $507 | 0, 55) | 0;
   $541 = getTempRet0() | 0;
   $542 = _bitshift64Lshr($506 | 0, $507 | 0, 9) | 0;
   $543 = getTempRet0() | 0;
   $544 = $540 | $542;
   $545 = $541 | $543;
   $546 = $538 ^ $544;
   $547 = $539 ^ $545;
   $548 = _i64Add($450 | 0, $451 | 0, $470 | 0, $471 | 0) | 0;
   $549 = getTempRet0() | 0;
   $550 = _bitshift64Shl($450 | 0, $451 | 0, 49) | 0;
   $551 = getTempRet0() | 0;
   $552 = _bitshift64Lshr($450 | 0, $451 | 0, 15) | 0;
   $553 = getTempRet0() | 0;
   $554 = $550 | $552;
   $555 = $551 | $553;
   $556 = $554 ^ $548;
   $557 = $555 ^ $549;
   $558 = _i64Add($422 | 0, $423 | 0, $484 | 0, $485 | 0) | 0;
   $559 = getTempRet0() | 0;
   $560 = _bitshift64Shl($422 | 0, $423 | 0, 18) | 0;
   $561 = getTempRet0() | 0;
   $562 = _bitshift64Lshr($422 | 0, $423 | 0, 46) | 0;
   $563 = getTempRet0() | 0;
   $564 = $560 | $562;
   $565 = $561 | $563;
   $566 = $564 ^ $558;
   $567 = $565 ^ $559;
   $568 = _i64Add($436 | 0, $437 | 0, $498 | 0, $499 | 0) | 0;
   $569 = getTempRet0() | 0;
   $570 = _bitshift64Shl($436 | 0, $437 | 0, 23) | 0;
   $571 = getTempRet0() | 0;
   $572 = _bitshift64Lshr($436 | 0, $437 | 0, 41) | 0;
   $573 = getTempRet0() | 0;
   $574 = $570 | $572;
   $575 = $571 | $573;
   $576 = $574 ^ $568;
   $577 = $575 ^ $569;
   $578 = _i64Add($408 | 0, $409 | 0, $456 | 0, $457 | 0) | 0;
   $579 = getTempRet0() | 0;
   $580 = _bitshift64Shl($408 | 0, $409 | 0, 52) | 0;
   $581 = getTempRet0() | 0;
   $582 = _bitshift64Lshr($408 | 0, $409 | 0, 12) | 0;
   $583 = getTempRet0() | 0;
   $584 = $580 | $582;
   $585 = $581 | $583;
   $586 = $584 ^ $578;
   $587 = $585 ^ $579;
   $588 = _i64Add($508 | 0, $509 | 0, $556 | 0, $557 | 0) | 0;
   $589 = getTempRet0() | 0;
   $590 = _bitshift64Shl($556 | 0, $557 | 0, 33) | 0;
   $591 = getTempRet0() | 0;
   $592 = _bitshift64Lshr($556 | 0, $557 | 0, 31) | 0;
   $593 = getTempRet0() | 0;
   $594 = $590 | $592;
   $595 = $591 | $593;
   $596 = $588 ^ $594;
   $597 = $589 ^ $595;
   $598 = _i64Add($576 | 0, $577 | 0, $518 | 0, $519 | 0) | 0;
   $599 = getTempRet0() | 0;
   $600 = _bitshift64Shl($576 | 0, $577 | 0, 4) | 0;
   $601 = getTempRet0() | 0;
   $602 = _bitshift64Lshr($576 | 0, $577 | 0, 60) | 0;
   $603 = getTempRet0() | 0;
   $604 = $600 | $602;
   $605 = $601 | $603;
   $606 = $604 ^ $598;
   $607 = $605 ^ $599;
   $608 = _i64Add($566 | 0, $567 | 0, $538 | 0, $539 | 0) | 0;
   $609 = getTempRet0() | 0;
   $610 = _bitshift64Shl($566 | 0, $567 | 0, 51) | 0;
   $611 = getTempRet0() | 0;
   $612 = _bitshift64Lshr($566 | 0, $567 | 0, 13) | 0;
   $613 = getTempRet0() | 0;
   $614 = $610 | $612;
   $615 = $611 | $613;
   $616 = $614 ^ $608;
   $617 = $615 ^ $609;
   $618 = _i64Add($586 | 0, $587 | 0, $528 | 0, $529 | 0) | 0;
   $619 = getTempRet0() | 0;
   $620 = _bitshift64Shl($586 | 0, $587 | 0, 13) | 0;
   $621 = getTempRet0() | 0;
   $622 = _bitshift64Lshr($586 | 0, $587 | 0, 51) | 0;
   $623 = getTempRet0() | 0;
   $624 = $620 | $622;
   $625 = $621 | $623;
   $626 = $624 ^ $618;
   $627 = $625 ^ $619;
   $628 = _i64Add($558 | 0, $559 | 0, $546 | 0, $547 | 0) | 0;
   $629 = getTempRet0() | 0;
   $630 = _bitshift64Shl($546 | 0, $547 | 0, 34) | 0;
   $631 = getTempRet0() | 0;
   $632 = _bitshift64Lshr($546 | 0, $547 | 0, 30) | 0;
   $633 = getTempRet0() | 0;
   $634 = $630 | $632;
   $635 = $631 | $633;
   $636 = $628 ^ $634;
   $637 = $629 ^ $635;
   $638 = _i64Add($526 | 0, $527 | 0, $568 | 0, $569 | 0) | 0;
   $639 = getTempRet0() | 0;
   $640 = _bitshift64Shl($526 | 0, $527 | 0, 41) | 0;
   $641 = getTempRet0() | 0;
   $642 = _bitshift64Lshr($526 | 0, $527 | 0, 23) | 0;
   $643 = getTempRet0() | 0;
   $644 = $640 | $642;
   $645 = $641 | $643;
   $646 = $644 ^ $638;
   $647 = $645 ^ $639;
   $648 = _i64Add($578 | 0, $579 | 0, $536 | 0, $537 | 0) | 0;
   $649 = getTempRet0() | 0;
   $650 = _bitshift64Shl($536 | 0, $537 | 0, 59) | 0;
   $651 = getTempRet0() | 0;
   $652 = _bitshift64Lshr($536 | 0, $537 | 0, 5) | 0;
   $653 = getTempRet0() | 0;
   $654 = $650 | $652;
   $655 = $651 | $653;
   $656 = $648 ^ $654;
   $657 = $649 ^ $655;
   $658 = _i64Add($516 | 0, $517 | 0, $548 | 0, $549 | 0) | 0;
   $659 = getTempRet0() | 0;
   $660 = _bitshift64Shl($516 | 0, $517 | 0, 17) | 0;
   $661 = getTempRet0() | 0;
   $662 = _bitshift64Lshr($516 | 0, $517 | 0, 47) | 0;
   $663 = getTempRet0() | 0;
   $664 = $660 | $662;
   $665 = $661 | $663;
   $666 = $664 ^ $658;
   $667 = $665 ^ $659;
   $668 = _i64Add($588 | 0, $589 | 0, $636 | 0, $637 | 0) | 0;
   $669 = getTempRet0() | 0;
   $670 = _bitshift64Shl($636 | 0, $637 | 0, 5) | 0;
   $671 = getTempRet0() | 0;
   $672 = _bitshift64Lshr($636 | 0, $637 | 0, 59) | 0;
   $673 = getTempRet0() | 0;
   $674 = $670 | $672;
   $675 = $671 | $673;
   $676 = $674 ^ $668;
   $677 = $675 ^ $669;
   $678 = _i64Add($656 | 0, $657 | 0, $598 | 0, $599 | 0) | 0;
   $679 = getTempRet0() | 0;
   $680 = _bitshift64Shl($656 | 0, $657 | 0, 20) | 0;
   $681 = getTempRet0() | 0;
   $682 = _bitshift64Lshr($656 | 0, $657 | 0, 44) | 0;
   $683 = getTempRet0() | 0;
   $684 = $680 | $682;
   $685 = $681 | $683;
   $686 = $684 ^ $678;
   $687 = $685 ^ $679;
   $688 = _i64Add($618 | 0, $619 | 0, $646 | 0, $647 | 0) | 0;
   $689 = getTempRet0() | 0;
   $690 = _bitshift64Shl($646 | 0, $647 | 0, 48) | 0;
   $691 = getTempRet0() | 0;
   $692 = _bitshift64Lshr($646 | 0, $647 | 0, 16) | 0;
   $693 = getTempRet0() | 0;
   $694 = $690 | $692;
   $695 = $691 | $693;
   $696 = $688 ^ $694;
   $697 = $689 ^ $695;
   $698 = _i64Add($666 | 0, $667 | 0, $608 | 0, $609 | 0) | 0;
   $699 = getTempRet0() | 0;
   $700 = _bitshift64Shl($666 | 0, $667 | 0, 41) | 0;
   $701 = getTempRet0() | 0;
   $702 = _bitshift64Lshr($666 | 0, $667 | 0, 23) | 0;
   $703 = getTempRet0() | 0;
   $704 = $700 | $702;
   $705 = $701 | $703;
   $706 = $704 ^ $698;
   $707 = $705 ^ $699;
   $708 = _i64Add($626 | 0, $627 | 0, $638 | 0, $639 | 0) | 0;
   $709 = getTempRet0() | 0;
   $710 = _bitshift64Shl($626 | 0, $627 | 0, 47) | 0;
   $711 = getTempRet0() | 0;
   $712 = _bitshift64Lshr($626 | 0, $627 | 0, 17) | 0;
   $713 = getTempRet0() | 0;
   $714 = $710 | $712;
   $715 = $711 | $713;
   $716 = $714 ^ $708;
   $717 = $715 ^ $709;
   $718 = _i64Add($648 | 0, $649 | 0, $606 | 0, $607 | 0) | 0;
   $719 = getTempRet0() | 0;
   $720 = _bitshift64Shl($606 | 0, $607 | 0, 28) | 0;
   $721 = getTempRet0() | 0;
   $722 = _bitshift64Lshr($606 | 0, $607 | 0, 36) | 0;
   $723 = getTempRet0() | 0;
   $724 = $720 | $722;
   $725 = $721 | $723;
   $726 = $724 ^ $718;
   $727 = $725 ^ $719;
   $728 = _i64Add($616 | 0, $617 | 0, $658 | 0, $659 | 0) | 0;
   $729 = getTempRet0() | 0;
   $730 = _bitshift64Shl($616 | 0, $617 | 0, 16) | 0;
   $731 = getTempRet0() | 0;
   $732 = _bitshift64Lshr($616 | 0, $617 | 0, 48) | 0;
   $733 = getTempRet0() | 0;
   $734 = $730 | $732;
   $735 = $731 | $733;
   $736 = $734 ^ $728;
   $737 = $735 ^ $729;
   $738 = _i64Add($596 | 0, $597 | 0, $628 | 0, $629 | 0) | 0;
   $739 = getTempRet0() | 0;
   $740 = _bitshift64Shl($596 | 0, $597 | 0, 25) | 0;
   $741 = getTempRet0() | 0;
   $742 = _bitshift64Lshr($596 | 0, $597 | 0, 39) | 0;
   $743 = getTempRet0() | 0;
   $744 = $740 | $742;
   $745 = $741 | $743;
   $746 = $744 ^ $738;
   $747 = $745 ^ $739;
   $arrayidx418 = $add$ptr13 + ($r$0532 << 3) | 0;
   $748 = $arrayidx418;
   $749 = $748;
   $750 = HEAP32[$749 >> 2] | 0;
   $751 = $748 + 4 | 0;
   $752 = $751;
   $753 = HEAP32[$752 >> 2] | 0;
   $754 = _i64Add($750 | 0, $753 | 0, $668 | 0, $669 | 0) | 0;
   $755 = getTempRet0() | 0;
   $add423 = $r$0532 + 1 | 0;
   $arrayidx424 = $add$ptr13 + ($add423 << 3) | 0;
   $756 = $arrayidx424;
   $757 = $756;
   $758 = HEAP32[$757 >> 2] | 0;
   $759 = $756 + 4 | 0;
   $760 = $759;
   $761 = HEAP32[$760 >> 2] | 0;
   $762 = _i64Add($758 | 0, $761 | 0, $716 | 0, $717 | 0) | 0;
   $763 = getTempRet0() | 0;
   $add429 = $r$0532 + 2 | 0;
   $arrayidx430 = $add$ptr13 + ($add429 << 3) | 0;
   $764 = $arrayidx430;
   $765 = $764;
   $766 = HEAP32[$765 >> 2] | 0;
   $767 = $764 + 4 | 0;
   $768 = $767;
   $769 = HEAP32[$768 >> 2] | 0;
   $770 = _i64Add($766 | 0, $769 | 0, $678 | 0, $679 | 0) | 0;
   $771 = getTempRet0() | 0;
   $add435 = $r$0532 + 3 | 0;
   $arrayidx436 = $add$ptr13 + ($add435 << 3) | 0;
   $772 = $arrayidx436;
   $773 = $772;
   $774 = HEAP32[$773 >> 2] | 0;
   $775 = $772 + 4 | 0;
   $776 = $775;
   $777 = HEAP32[$776 >> 2] | 0;
   $778 = _i64Add($774 | 0, $777 | 0, $736 | 0, $737 | 0) | 0;
   $779 = getTempRet0() | 0;
   $add441 = $r$0532 + 4 | 0;
   $arrayidx442 = $add$ptr13 + ($add441 << 3) | 0;
   $780 = $arrayidx442;
   $781 = $780;
   $782 = HEAP32[$781 >> 2] | 0;
   $783 = $780 + 4 | 0;
   $784 = $783;
   $785 = HEAP32[$784 >> 2] | 0;
   $786 = _i64Add($782 | 0, $785 | 0, $698 | 0, $699 | 0) | 0;
   $787 = getTempRet0() | 0;
   $add447 = $r$0532 + 5 | 0;
   $arrayidx448 = $add$ptr13 + ($add447 << 3) | 0;
   $788 = $arrayidx448;
   $789 = $788;
   $790 = HEAP32[$789 >> 2] | 0;
   $791 = $788 + 4 | 0;
   $792 = $791;
   $793 = HEAP32[$792 >> 2] | 0;
   $794 = _i64Add($790 | 0, $793 | 0, $726 | 0, $727 | 0) | 0;
   $795 = getTempRet0() | 0;
   $add453 = $r$0532 + 6 | 0;
   $arrayidx454 = $add$ptr13 + ($add453 << 3) | 0;
   $796 = $arrayidx454;
   $797 = $796;
   $798 = HEAP32[$797 >> 2] | 0;
   $799 = $796 + 4 | 0;
   $800 = $799;
   $801 = HEAP32[$800 >> 2] | 0;
   $802 = _i64Add($798 | 0, $801 | 0, $688 | 0, $689 | 0) | 0;
   $803 = getTempRet0() | 0;
   $add459 = $r$0532 + 7 | 0;
   $arrayidx460 = $add$ptr13 + ($add459 << 3) | 0;
   $804 = $arrayidx460;
   $805 = $804;
   $806 = HEAP32[$805 >> 2] | 0;
   $807 = $804 + 4 | 0;
   $808 = $807;
   $809 = HEAP32[$808 >> 2] | 0;
   $810 = _i64Add($806 | 0, $809 | 0, $746 | 0, $747 | 0) | 0;
   $811 = getTempRet0() | 0;
   $add465 = $r$0532 + 8 | 0;
   $arrayidx466 = $add$ptr13 + ($add465 << 3) | 0;
   $812 = $arrayidx466;
   $813 = $812;
   $814 = HEAP32[$813 >> 2] | 0;
   $815 = $812 + 4 | 0;
   $816 = $815;
   $817 = HEAP32[$816 >> 2] | 0;
   $818 = _i64Add($814 | 0, $817 | 0, $718 | 0, $719 | 0) | 0;
   $819 = getTempRet0() | 0;
   $add471 = $r$0532 + 9 | 0;
   $arrayidx472 = $add$ptr13 + ($add471 << 3) | 0;
   $820 = $arrayidx472;
   $821 = $820;
   $822 = HEAP32[$821 >> 2] | 0;
   $823 = $820 + 4 | 0;
   $824 = $823;
   $825 = HEAP32[$824 >> 2] | 0;
   $826 = _i64Add($822 | 0, $825 | 0, $706 | 0, $707 | 0) | 0;
   $827 = getTempRet0() | 0;
   $add477 = $r$0532 + 10 | 0;
   $arrayidx478 = $add$ptr13 + ($add477 << 3) | 0;
   $828 = $arrayidx478;
   $829 = $828;
   $830 = HEAP32[$829 >> 2] | 0;
   $831 = $828 + 4 | 0;
   $832 = $831;
   $833 = HEAP32[$832 >> 2] | 0;
   $834 = _i64Add($830 | 0, $833 | 0, $728 | 0, $729 | 0) | 0;
   $835 = getTempRet0() | 0;
   $add483 = $r$0532 + 11 | 0;
   $arrayidx484 = $add$ptr13 + ($add483 << 3) | 0;
   $836 = $arrayidx484;
   $837 = $836;
   $838 = HEAP32[$837 >> 2] | 0;
   $839 = $836 + 4 | 0;
   $840 = $839;
   $841 = HEAP32[$840 >> 2] | 0;
   $842 = _i64Add($838 | 0, $841 | 0, $686 | 0, $687 | 0) | 0;
   $843 = getTempRet0() | 0;
   $add489 = $r$0532 + 12 | 0;
   $arrayidx490 = $add$ptr13 + ($add489 << 3) | 0;
   $844 = $arrayidx490;
   $845 = $844;
   $846 = HEAP32[$845 >> 2] | 0;
   $847 = $844 + 4 | 0;
   $848 = $847;
   $849 = HEAP32[$848 >> 2] | 0;
   $850 = _i64Add($846 | 0, $849 | 0, $738 | 0, $739 | 0) | 0;
   $851 = getTempRet0() | 0;
   $add495 = $r$0532 + 13 | 0;
   $arrayidx496 = $add$ptr13 + ($add495 << 3) | 0;
   $852 = $arrayidx496;
   $853 = $852;
   $854 = HEAP32[$853 >> 2] | 0;
   $855 = $852 + 4 | 0;
   $856 = $855;
   $857 = HEAP32[$856 >> 2] | 0;
   $arrayidx501 = $kw + ($r$0532 << 3) | 0;
   $858 = $arrayidx501;
   $859 = $858;
   $860 = HEAP32[$859 >> 2] | 0;
   $861 = $858 + 4 | 0;
   $862 = $861;
   $863 = HEAP32[$862 >> 2] | 0;
   $864 = _i64Add($854 | 0, $857 | 0, $696 | 0, $697 | 0) | 0;
   $865 = getTempRet0() | 0;
   $866 = _i64Add($864 | 0, $865 | 0, $860 | 0, $863 | 0) | 0;
   $867 = getTempRet0() | 0;
   $add507 = $r$0532 + 14 | 0;
   $arrayidx508 = $add$ptr13 + ($add507 << 3) | 0;
   $868 = $arrayidx508;
   $869 = $868;
   $870 = HEAP32[$869 >> 2] | 0;
   $871 = $868 + 4 | 0;
   $872 = $871;
   $873 = HEAP32[$872 >> 2] | 0;
   $arrayidx513 = $kw + ($add423 << 3) | 0;
   $874 = $arrayidx513;
   $875 = $874;
   $876 = HEAP32[$875 >> 2] | 0;
   $877 = $874 + 4 | 0;
   $878 = $877;
   $879 = HEAP32[$878 >> 2] | 0;
   $880 = _i64Add($876 | 0, $879 | 0, $870 | 0, $873 | 0) | 0;
   $881 = getTempRet0() | 0;
   $882 = _i64Add($880 | 0, $881 | 0, $708 | 0, $709 | 0) | 0;
   $883 = getTempRet0() | 0;
   $add519 = $r$0532 + 15 | 0;
   $arrayidx520 = $add$ptr13 + ($add519 << 3) | 0;
   $884 = $arrayidx520;
   $885 = $884;
   $886 = HEAP32[$885 >> 2] | 0;
   $887 = $884 + 4 | 0;
   $888 = $887;
   $889 = HEAP32[$888 >> 2] | 0;
   $890 = _i64Add($676 | 0, $677 | 0, $r$0532 | 0, 0) | 0;
   $891 = getTempRet0() | 0;
   $892 = _i64Add($890 | 0, $891 | 0, $886 | 0, $889 | 0) | 0;
   $893 = getTempRet0() | 0;
   $sub = $r$0532 + -1 | 0;
   $arrayidx528 = $add$ptr13 + ($sub << 3) | 0;
   $894 = $arrayidx528;
   $895 = $894;
   $896 = HEAP32[$895 >> 2] | 0;
   $897 = $894 + 4 | 0;
   $898 = $897;
   $899 = HEAP32[$898 >> 2] | 0;
   $add532 = $r$0532 + 16 | 0;
   $arrayidx533 = $add$ptr13 + ($add532 << 3) | 0;
   $900 = $arrayidx533;
   $901 = $900;
   HEAP32[$901 >> 2] = $896;
   $902 = $900 + 4 | 0;
   $903 = $902;
   HEAP32[$903 >> 2] = $899;
   $arrayidx538 = $kw + ($sub << 3) | 0;
   $904 = $arrayidx538;
   $905 = $904;
   $906 = HEAP32[$905 >> 2] | 0;
   $907 = $904 + 4 | 0;
   $908 = $907;
   $909 = HEAP32[$908 >> 2] | 0;
   $arrayidx543 = $kw + ($add429 << 3) | 0;
   $910 = $arrayidx543;
   $911 = $910;
   HEAP32[$911 >> 2] = $906;
   $912 = $910 + 4 | 0;
   $913 = $912;
   HEAP32[$913 >> 2] = $909;
   $914 = _i64Add($754 | 0, $755 | 0, $762 | 0, $763 | 0) | 0;
   $915 = getTempRet0() | 0;
   $916 = _bitshift64Shl($762 | 0, $763 | 0, 41) | 0;
   $917 = getTempRet0() | 0;
   $918 = _bitshift64Lshr($762 | 0, $763 | 0, 23) | 0;
   $919 = getTempRet0() | 0;
   $920 = $916 | $918;
   $921 = $917 | $919;
   $922 = $920 ^ $914;
   $923 = $921 ^ $915;
   $924 = _i64Add($770 | 0, $771 | 0, $778 | 0, $779 | 0) | 0;
   $925 = getTempRet0() | 0;
   $926 = _bitshift64Shl($778 | 0, $779 | 0, 9) | 0;
   $927 = getTempRet0() | 0;
   $928 = _bitshift64Lshr($778 | 0, $779 | 0, 55) | 0;
   $929 = getTempRet0() | 0;
   $930 = $926 | $928;
   $931 = $927 | $929;
   $932 = $930 ^ $924;
   $933 = $931 ^ $925;
   $934 = _i64Add($786 | 0, $787 | 0, $794 | 0, $795 | 0) | 0;
   $935 = getTempRet0() | 0;
   $936 = _bitshift64Shl($794 | 0, $795 | 0, 37) | 0;
   $937 = getTempRet0() | 0;
   $938 = _bitshift64Lshr($794 | 0, $795 | 0, 27) | 0;
   $939 = getTempRet0() | 0;
   $940 = $936 | $938;
   $941 = $937 | $939;
   $942 = $940 ^ $934;
   $943 = $941 ^ $935;
   $944 = _i64Add($802 | 0, $803 | 0, $810 | 0, $811 | 0) | 0;
   $945 = getTempRet0() | 0;
   $946 = _bitshift64Shl($810 | 0, $811 | 0, 31) | 0;
   $947 = getTempRet0() | 0;
   $948 = _bitshift64Lshr($810 | 0, $811 | 0, 33) | 0;
   $949 = getTempRet0() | 0;
   $950 = $946 | $948;
   $951 = $947 | $949;
   $952 = $950 ^ $944;
   $953 = $951 ^ $945;
   $954 = _i64Add($818 | 0, $819 | 0, $826 | 0, $827 | 0) | 0;
   $955 = getTempRet0() | 0;
   $956 = _bitshift64Shl($826 | 0, $827 | 0, 12) | 0;
   $957 = getTempRet0() | 0;
   $958 = _bitshift64Lshr($826 | 0, $827 | 0, 52) | 0;
   $959 = getTempRet0() | 0;
   $960 = $956 | $958;
   $961 = $957 | $959;
   $962 = $960 ^ $954;
   $963 = $961 ^ $955;
   $964 = _i64Add($834 | 0, $835 | 0, $842 | 0, $843 | 0) | 0;
   $965 = getTempRet0() | 0;
   $966 = _bitshift64Shl($842 | 0, $843 | 0, 47) | 0;
   $967 = getTempRet0() | 0;
   $968 = _bitshift64Lshr($842 | 0, $843 | 0, 17) | 0;
   $969 = getTempRet0() | 0;
   $970 = $966 | $968;
   $971 = $967 | $969;
   $972 = $970 ^ $964;
   $973 = $971 ^ $965;
   $974 = _i64Add($850 | 0, $851 | 0, $866 | 0, $867 | 0) | 0;
   $975 = getTempRet0() | 0;
   $976 = _bitshift64Shl($866 | 0, $867 | 0, 44) | 0;
   $977 = getTempRet0() | 0;
   $978 = _bitshift64Lshr($866 | 0, $867 | 0, 20) | 0;
   $979 = getTempRet0() | 0;
   $980 = $976 | $978;
   $981 = $977 | $979;
   $982 = $980 ^ $974;
   $983 = $981 ^ $975;
   $984 = _i64Add($882 | 0, $883 | 0, $892 | 0, $893 | 0) | 0;
   $985 = getTempRet0() | 0;
   $986 = _bitshift64Shl($892 | 0, $893 | 0, 30) | 0;
   $987 = getTempRet0() | 0;
   $988 = _bitshift64Lshr($892 | 0, $893 | 0, 34) | 0;
   $989 = getTempRet0() | 0;
   $990 = $986 | $988;
   $991 = $987 | $989;
   $992 = $990 ^ $984;
   $993 = $991 ^ $985;
   $994 = _i64Add($962 | 0, $963 | 0, $914 | 0, $915 | 0) | 0;
   $995 = getTempRet0() | 0;
   $996 = _bitshift64Shl($962 | 0, $963 | 0, 16) | 0;
   $997 = getTempRet0() | 0;
   $998 = _bitshift64Lshr($962 | 0, $963 | 0, 48) | 0;
   $999 = getTempRet0() | 0;
   $1000 = $996 | $998;
   $1001 = $997 | $999;
   $1002 = $1000 ^ $994;
   $1003 = $1001 ^ $995;
   $1004 = _i64Add($982 | 0, $983 | 0, $924 | 0, $925 | 0) | 0;
   $1005 = getTempRet0() | 0;
   $1006 = _bitshift64Shl($982 | 0, $983 | 0, 34) | 0;
   $1007 = getTempRet0() | 0;
   $1008 = _bitshift64Lshr($982 | 0, $983 | 0, 30) | 0;
   $1009 = getTempRet0() | 0;
   $1010 = $1006 | $1008;
   $1011 = $1007 | $1009;
   $1012 = $1010 ^ $1004;
   $1013 = $1011 ^ $1005;
   $1014 = _i64Add($972 | 0, $973 | 0, $944 | 0, $945 | 0) | 0;
   $1015 = getTempRet0() | 0;
   $1016 = _bitshift64Shl($972 | 0, $973 | 0, 56) | 0;
   $1017 = getTempRet0() | 0;
   $1018 = _bitshift64Lshr($972 | 0, $973 | 0, 8) | 0;
   $1019 = getTempRet0() | 0;
   $1020 = $1016 | $1018;
   $1021 = $1017 | $1019;
   $1022 = $1020 ^ $1014;
   $1023 = $1021 ^ $1015;
   $1024 = _i64Add($992 | 0, $993 | 0, $934 | 0, $935 | 0) | 0;
   $1025 = getTempRet0() | 0;
   $1026 = _bitshift64Shl($992 | 0, $993 | 0, 51) | 0;
   $1027 = getTempRet0() | 0;
   $1028 = _bitshift64Lshr($992 | 0, $993 | 0, 13) | 0;
   $1029 = getTempRet0() | 0;
   $1030 = $1026 | $1028;
   $1031 = $1027 | $1029;
   $1032 = $1030 ^ $1024;
   $1033 = $1031 ^ $1025;
   $1034 = _i64Add($964 | 0, $965 | 0, $952 | 0, $953 | 0) | 0;
   $1035 = getTempRet0() | 0;
   $1036 = _bitshift64Shl($952 | 0, $953 | 0, 4) | 0;
   $1037 = getTempRet0() | 0;
   $1038 = _bitshift64Lshr($952 | 0, $953 | 0, 60) | 0;
   $1039 = getTempRet0() | 0;
   $1040 = $1036 | $1038;
   $1041 = $1037 | $1039;
   $1042 = $1034 ^ $1040;
   $1043 = $1035 ^ $1041;
   $1044 = _i64Add($974 | 0, $975 | 0, $932 | 0, $933 | 0) | 0;
   $1045 = getTempRet0() | 0;
   $1046 = _bitshift64Shl($932 | 0, $933 | 0, 53) | 0;
   $1047 = getTempRet0() | 0;
   $1048 = _bitshift64Lshr($932 | 0, $933 | 0, 11) | 0;
   $1049 = getTempRet0() | 0;
   $1050 = $1046 | $1048;
   $1051 = $1047 | $1049;
   $1052 = $1044 ^ $1050;
   $1053 = $1045 ^ $1051;
   $1054 = _i64Add($984 | 0, $985 | 0, $942 | 0, $943 | 0) | 0;
   $1055 = getTempRet0() | 0;
   $1056 = _bitshift64Shl($942 | 0, $943 | 0, 42) | 0;
   $1057 = getTempRet0() | 0;
   $1058 = _bitshift64Lshr($942 | 0, $943 | 0, 22) | 0;
   $1059 = getTempRet0() | 0;
   $1060 = $1056 | $1058;
   $1061 = $1057 | $1059;
   $1062 = $1054 ^ $1060;
   $1063 = $1055 ^ $1061;
   $1064 = _i64Add($954 | 0, $955 | 0, $922 | 0, $923 | 0) | 0;
   $1065 = getTempRet0() | 0;
   $1066 = _bitshift64Shl($922 | 0, $923 | 0, 41) | 0;
   $1067 = getTempRet0() | 0;
   $1068 = _bitshift64Lshr($922 | 0, $923 | 0, 23) | 0;
   $1069 = getTempRet0() | 0;
   $1070 = $1066 | $1068;
   $1071 = $1067 | $1069;
   $1072 = $1064 ^ $1070;
   $1073 = $1065 ^ $1071;
   $1074 = _i64Add($1042 | 0, $1043 | 0, $994 | 0, $995 | 0) | 0;
   $1075 = getTempRet0() | 0;
   $1076 = _bitshift64Shl($1042 | 0, $1043 | 0, 31) | 0;
   $1077 = getTempRet0() | 0;
   $1078 = _bitshift64Lshr($1042 | 0, $1043 | 0, 33) | 0;
   $1079 = getTempRet0() | 0;
   $1080 = $1076 | $1078;
   $1081 = $1077 | $1079;
   $1082 = $1080 ^ $1074;
   $1083 = $1081 ^ $1075;
   $1084 = _i64Add($1062 | 0, $1063 | 0, $1004 | 0, $1005 | 0) | 0;
   $1085 = getTempRet0() | 0;
   $1086 = _bitshift64Shl($1062 | 0, $1063 | 0, 44) | 0;
   $1087 = getTempRet0() | 0;
   $1088 = _bitshift64Lshr($1062 | 0, $1063 | 0, 20) | 0;
   $1089 = getTempRet0() | 0;
   $1090 = $1086 | $1088;
   $1091 = $1087 | $1089;
   $1092 = $1090 ^ $1084;
   $1093 = $1091 ^ $1085;
   $1094 = _i64Add($1024 | 0, $1025 | 0, $1052 | 0, $1053 | 0) | 0;
   $1095 = getTempRet0() | 0;
   $1096 = _bitshift64Shl($1052 | 0, $1053 | 0, 47) | 0;
   $1097 = getTempRet0() | 0;
   $1098 = _bitshift64Lshr($1052 | 0, $1053 | 0, 17) | 0;
   $1099 = getTempRet0() | 0;
   $1100 = $1096 | $1098;
   $1101 = $1097 | $1099;
   $1102 = $1094 ^ $1100;
   $1103 = $1095 ^ $1101;
   $1104 = _i64Add($1014 | 0, $1015 | 0, $1072 | 0, $1073 | 0) | 0;
   $1105 = getTempRet0() | 0;
   $1106 = _bitshift64Shl($1072 | 0, $1073 | 0, 46) | 0;
   $1107 = getTempRet0() | 0;
   $1108 = _bitshift64Lshr($1072 | 0, $1073 | 0, 18) | 0;
   $1109 = getTempRet0() | 0;
   $1110 = $1106 | $1108;
   $1111 = $1107 | $1109;
   $1112 = $1104 ^ $1110;
   $1113 = $1105 ^ $1111;
   $1114 = _i64Add($1032 | 0, $1033 | 0, $1044 | 0, $1045 | 0) | 0;
   $1115 = getTempRet0() | 0;
   $1116 = _bitshift64Shl($1032 | 0, $1033 | 0, 19) | 0;
   $1117 = getTempRet0() | 0;
   $1118 = _bitshift64Lshr($1032 | 0, $1033 | 0, 45) | 0;
   $1119 = getTempRet0() | 0;
   $1120 = $1116 | $1118;
   $1121 = $1117 | $1119;
   $1122 = $1120 ^ $1114;
   $1123 = $1121 ^ $1115;
   $1124 = _i64Add($1012 | 0, $1013 | 0, $1054 | 0, $1055 | 0) | 0;
   $1125 = getTempRet0() | 0;
   $1126 = _bitshift64Shl($1012 | 0, $1013 | 0, 42) | 0;
   $1127 = getTempRet0() | 0;
   $1128 = _bitshift64Lshr($1012 | 0, $1013 | 0, 22) | 0;
   $1129 = getTempRet0() | 0;
   $1130 = $1126 | $1128;
   $1131 = $1127 | $1129;
   $1132 = $1130 ^ $1124;
   $1133 = $1131 ^ $1125;
   $1134 = _i64Add($1022 | 0, $1023 | 0, $1064 | 0, $1065 | 0) | 0;
   $1135 = getTempRet0() | 0;
   $1136 = _bitshift64Shl($1022 | 0, $1023 | 0, 44) | 0;
   $1137 = getTempRet0() | 0;
   $1138 = _bitshift64Lshr($1022 | 0, $1023 | 0, 20) | 0;
   $1139 = getTempRet0() | 0;
   $1140 = $1136 | $1138;
   $1141 = $1137 | $1139;
   $1142 = $1140 ^ $1134;
   $1143 = $1141 ^ $1135;
   $1144 = _i64Add($1002 | 0, $1003 | 0, $1034 | 0, $1035 | 0) | 0;
   $1145 = getTempRet0() | 0;
   $1146 = _bitshift64Shl($1002 | 0, $1003 | 0, 25) | 0;
   $1147 = getTempRet0() | 0;
   $1148 = _bitshift64Lshr($1002 | 0, $1003 | 0, 39) | 0;
   $1149 = getTempRet0() | 0;
   $1150 = $1146 | $1148;
   $1151 = $1147 | $1149;
   $1152 = $1150 ^ $1144;
   $1153 = $1151 ^ $1145;
   $1154 = _i64Add($1122 | 0, $1123 | 0, $1074 | 0, $1075 | 0) | 0;
   $1155 = getTempRet0() | 0;
   $1156 = _bitshift64Shl($1122 | 0, $1123 | 0, 9) | 0;
   $1157 = getTempRet0() | 0;
   $1158 = _bitshift64Lshr($1122 | 0, $1123 | 0, 55) | 0;
   $1159 = getTempRet0() | 0;
   $1160 = $1156 | $1158;
   $1161 = $1157 | $1159;
   $1162 = $1160 ^ $1154;
   $1163 = $1161 ^ $1155;
   $1164 = _i64Add($1084 | 0, $1085 | 0, $1142 | 0, $1143 | 0) | 0;
   $1165 = getTempRet0() | 0;
   $1166 = _bitshift64Shl($1142 | 0, $1143 | 0, 48) | 0;
   $1167 = getTempRet0() | 0;
   $1168 = _bitshift64Lshr($1142 | 0, $1143 | 0, 16) | 0;
   $1169 = getTempRet0() | 0;
   $1170 = $1166 | $1168;
   $1171 = $1167 | $1169;
   $1172 = $1164 ^ $1170;
   $1173 = $1165 ^ $1171;
   $1174 = _i64Add($1132 | 0, $1133 | 0, $1104 | 0, $1105 | 0) | 0;
   $1175 = getTempRet0() | 0;
   $1176 = _bitshift64Shl($1132 | 0, $1133 | 0, 35) | 0;
   $1177 = getTempRet0() | 0;
   $1178 = _bitshift64Lshr($1132 | 0, $1133 | 0, 29) | 0;
   $1179 = getTempRet0() | 0;
   $1180 = $1176 | $1178;
   $1181 = $1177 | $1179;
   $1182 = $1180 ^ $1174;
   $1183 = $1181 ^ $1175;
   $1184 = _i64Add($1094 | 0, $1095 | 0, $1152 | 0, $1153 | 0) | 0;
   $1185 = getTempRet0() | 0;
   $1186 = _bitshift64Shl($1152 | 0, $1153 | 0, 52) | 0;
   $1187 = getTempRet0() | 0;
   $1188 = _bitshift64Lshr($1152 | 0, $1153 | 0, 12) | 0;
   $1189 = getTempRet0() | 0;
   $1190 = $1186 | $1188;
   $1191 = $1187 | $1189;
   $1192 = $1184 ^ $1190;
   $1193 = $1185 ^ $1191;
   $1194 = _i64Add($1124 | 0, $1125 | 0, $1112 | 0, $1113 | 0) | 0;
   $1195 = getTempRet0() | 0;
   $1196 = _bitshift64Shl($1112 | 0, $1113 | 0, 23) | 0;
   $1197 = getTempRet0() | 0;
   $1198 = _bitshift64Lshr($1112 | 0, $1113 | 0, 41) | 0;
   $1199 = getTempRet0() | 0;
   $1200 = $1196 | $1198;
   $1201 = $1197 | $1199;
   $1202 = $1194 ^ $1200;
   $1203 = $1195 ^ $1201;
   $1204 = _i64Add($1092 | 0, $1093 | 0, $1134 | 0, $1135 | 0) | 0;
   $1205 = getTempRet0() | 0;
   $1206 = _bitshift64Shl($1092 | 0, $1093 | 0, 31) | 0;
   $1207 = getTempRet0() | 0;
   $1208 = _bitshift64Lshr($1092 | 0, $1093 | 0, 33) | 0;
   $1209 = getTempRet0() | 0;
   $1210 = $1206 | $1208;
   $1211 = $1207 | $1209;
   $1212 = $1210 ^ $1204;
   $1213 = $1211 ^ $1205;
   $1214 = _i64Add($1102 | 0, $1103 | 0, $1144 | 0, $1145 | 0) | 0;
   $1215 = getTempRet0() | 0;
   $1216 = _bitshift64Shl($1102 | 0, $1103 | 0, 37) | 0;
   $1217 = getTempRet0() | 0;
   $1218 = _bitshift64Lshr($1102 | 0, $1103 | 0, 27) | 0;
   $1219 = getTempRet0() | 0;
   $1220 = $1216 | $1218;
   $1221 = $1217 | $1219;
   $1222 = $1220 ^ $1214;
   $1223 = $1221 ^ $1215;
   $1224 = _i64Add($1114 | 0, $1115 | 0, $1082 | 0, $1083 | 0) | 0;
   $1225 = getTempRet0() | 0;
   $1226 = _bitshift64Shl($1082 | 0, $1083 | 0, 20) | 0;
   $1227 = getTempRet0() | 0;
   $1228 = _bitshift64Lshr($1082 | 0, $1083 | 0, 44) | 0;
   $1229 = getTempRet0() | 0;
   $1230 = $1226 | $1228;
   $1231 = $1227 | $1229;
   $1232 = $1224 ^ $1230;
   $1233 = $1225 ^ $1231;
   $1234 = _i64Add($1154 | 0, $1155 | 0, $758 | 0, $761 | 0) | 0;
   $1235 = getTempRet0() | 0;
   $1236 = _i64Add($1202 | 0, $1203 | 0, $766 | 0, $769 | 0) | 0;
   $1237 = getTempRet0() | 0;
   $1238 = _i64Add($1164 | 0, $1165 | 0, $774 | 0, $777 | 0) | 0;
   $1239 = getTempRet0() | 0;
   $1240 = _i64Add($1222 | 0, $1223 | 0, $782 | 0, $785 | 0) | 0;
   $1241 = getTempRet0() | 0;
   $1242 = _i64Add($1184 | 0, $1185 | 0, $790 | 0, $793 | 0) | 0;
   $1243 = getTempRet0() | 0;
   $1244 = _i64Add($1212 | 0, $1213 | 0, $798 | 0, $801 | 0) | 0;
   $1245 = getTempRet0() | 0;
   $1246 = _i64Add($1174 | 0, $1175 | 0, $806 | 0, $809 | 0) | 0;
   $1247 = getTempRet0() | 0;
   $1248 = _i64Add($1232 | 0, $1233 | 0, $814 | 0, $817 | 0) | 0;
   $1249 = getTempRet0() | 0;
   $1250 = _i64Add($1204 | 0, $1205 | 0, $822 | 0, $825 | 0) | 0;
   $1251 = getTempRet0() | 0;
   $1252 = _i64Add($1192 | 0, $1193 | 0, $830 | 0, $833 | 0) | 0;
   $1253 = getTempRet0() | 0;
   $1254 = _i64Add($1214 | 0, $1215 | 0, $838 | 0, $841 | 0) | 0;
   $1255 = getTempRet0() | 0;
   $1256 = _i64Add($1172 | 0, $1173 | 0, $846 | 0, $849 | 0) | 0;
   $1257 = getTempRet0() | 0;
   $1258 = _i64Add($1224 | 0, $1225 | 0, $854 | 0, $857 | 0) | 0;
   $1259 = getTempRet0() | 0;
   $1260 = _i64Add($1182 | 0, $1183 | 0, $880 | 0, $881 | 0) | 0;
   $1261 = getTempRet0() | 0;
   $1262 = _i64Add($906 | 0, $909 | 0, $886 | 0, $889 | 0) | 0;
   $1263 = getTempRet0() | 0;
   $1264 = _i64Add($1262 | 0, $1263 | 0, $1194 | 0, $1195 | 0) | 0;
   $1265 = getTempRet0() | 0;
   $1266 = _i64Add($r$0532 | 0, 0, 1, 0) | 0;
   $1267 = getTempRet0() | 0;
   $1268 = _i64Add($1266 | 0, $1267 | 0, $896 | 0, $899 | 0) | 0;
   $1269 = getTempRet0() | 0;
   $1270 = _i64Add($1268 | 0, $1269 | 0, $1162 | 0, $1163 | 0) | 0;
   $1271 = getTempRet0() | 0;
   $add823 = $r$0532 + 17 | 0;
   $arrayidx824 = $add$ptr13 + ($add823 << 3) | 0;
   $1272 = $arrayidx824;
   $1273 = $1272;
   HEAP32[$1273 >> 2] = $750;
   $1274 = $1272 + 4 | 0;
   $1275 = $1274;
   HEAP32[$1275 >> 2] = $753;
   $arrayidx834 = $kw + ($add435 << 3) | 0;
   $1276 = $arrayidx834;
   $1277 = $1276;
   HEAP32[$1277 >> 2] = $860;
   $1278 = $1276 + 4 | 0;
   $1279 = $1278;
   HEAP32[$1279 >> 2] = $863;
   $cmp = $add429 >>> 0 < 21;
   if ($cmp) {
    $396 = $1234;
    $397 = $1235;
    $398 = $1236;
    $399 = $1237;
    $410 = $1238;
    $411 = $1239;
    $412 = $1240;
    $413 = $1241;
    $424 = $1242;
    $425 = $1243;
    $426 = $1244;
    $427 = $1245;
    $438 = $1246;
    $439 = $1247;
    $440 = $1248;
    $441 = $1249;
    $452 = $1250;
    $453 = $1251;
    $454 = $1252;
    $455 = $1253;
    $466 = $1254;
    $467 = $1255;
    $468 = $1256;
    $469 = $1257;
    $480 = $1258;
    $481 = $1259;
    $482 = $1260;
    $483 = $1261;
    $494 = $1270;
    $495 = $1271;
    $496 = $1264;
    $497 = $1265;
    $r$0532 = $add429;
   } else {
    break;
   }
  }
  $1280 = $1234 ^ $266;
  $1281 = $1235 ^ $269;
  $1282 = $arrayidx11;
  $1283 = $1282;
  HEAP32[$1283 >> 2] = $1280;
  $1284 = $1282 + 4 | 0;
  $1285 = $1284;
  HEAP32[$1285 >> 2] = $1281;
  $1286 = $1236 ^ $272;
  $1287 = $1237 ^ $275;
  $1288 = $arrayidx17;
  $1289 = $1288;
  HEAP32[$1289 >> 2] = $1286;
  $1290 = $1288 + 4 | 0;
  $1291 = $1290;
  HEAP32[$1291 >> 2] = $1287;
  $1292 = $1238 ^ $278;
  $1293 = $1239 ^ $281;
  $1294 = $arrayidx22;
  $1295 = $1294;
  HEAP32[$1295 >> 2] = $1292;
  $1296 = $1294 + 4 | 0;
  $1297 = $1296;
  HEAP32[$1297 >> 2] = $1293;
  $1298 = $1240 ^ $284;
  $1299 = $1241 ^ $287;
  $1300 = $arrayidx27;
  $1301 = $1300;
  HEAP32[$1301 >> 2] = $1298;
  $1302 = $1300 + 4 | 0;
  $1303 = $1302;
  HEAP32[$1303 >> 2] = $1299;
  $1304 = $1242 ^ $290;
  $1305 = $1243 ^ $293;
  $1306 = $arrayidx32;
  $1307 = $1306;
  HEAP32[$1307 >> 2] = $1304;
  $1308 = $1306 + 4 | 0;
  $1309 = $1308;
  HEAP32[$1309 >> 2] = $1305;
  $1310 = $1244 ^ $296;
  $1311 = $1245 ^ $299;
  $1312 = $arrayidx37;
  $1313 = $1312;
  HEAP32[$1313 >> 2] = $1310;
  $1314 = $1312 + 4 | 0;
  $1315 = $1314;
  HEAP32[$1315 >> 2] = $1311;
  $1316 = $1246 ^ $302;
  $1317 = $1247 ^ $305;
  $1318 = $arrayidx42;
  $1319 = $1318;
  HEAP32[$1319 >> 2] = $1316;
  $1320 = $1318 + 4 | 0;
  $1321 = $1320;
  HEAP32[$1321 >> 2] = $1317;
  $1322 = $1248 ^ $308;
  $1323 = $1249 ^ $311;
  $1324 = $arrayidx47;
  $1325 = $1324;
  HEAP32[$1325 >> 2] = $1322;
  $1326 = $1324 + 4 | 0;
  $1327 = $1326;
  HEAP32[$1327 >> 2] = $1323;
  $1328 = $1250 ^ $314;
  $1329 = $1251 ^ $317;
  $1330 = $arrayidx52;
  $1331 = $1330;
  HEAP32[$1331 >> 2] = $1328;
  $1332 = $1330 + 4 | 0;
  $1333 = $1332;
  HEAP32[$1333 >> 2] = $1329;
  $1334 = $1252 ^ $320;
  $1335 = $1253 ^ $323;
  $1336 = $arrayidx57;
  $1337 = $1336;
  HEAP32[$1337 >> 2] = $1334;
  $1338 = $1336 + 4 | 0;
  $1339 = $1338;
  HEAP32[$1339 >> 2] = $1335;
  $1340 = $1254 ^ $326;
  $1341 = $1255 ^ $329;
  $1342 = $arrayidx62;
  $1343 = $1342;
  HEAP32[$1343 >> 2] = $1340;
  $1344 = $1342 + 4 | 0;
  $1345 = $1344;
  HEAP32[$1345 >> 2] = $1341;
  $1346 = $1256 ^ $332;
  $1347 = $1257 ^ $335;
  $1348 = $arrayidx67;
  $1349 = $1348;
  HEAP32[$1349 >> 2] = $1346;
  $1350 = $1348 + 4 | 0;
  $1351 = $1350;
  HEAP32[$1351 >> 2] = $1347;
  $1352 = $1258 ^ $338;
  $1353 = $1259 ^ $341;
  $1354 = $arrayidx72;
  $1355 = $1354;
  HEAP32[$1355 >> 2] = $1352;
  $1356 = $1354 + 4 | 0;
  $1357 = $1356;
  HEAP32[$1357 >> 2] = $1353;
  $1358 = $1260 ^ $344;
  $1359 = $1261 ^ $347;
  $1360 = $arrayidx77;
  $1361 = $1360;
  HEAP32[$1361 >> 2] = $1358;
  $1362 = $1360 + 4 | 0;
  $1363 = $1362;
  HEAP32[$1363 >> 2] = $1359;
  $1364 = $1264 ^ $350;
  $1365 = $1265 ^ $353;
  $1366 = $arrayidx82;
  $1367 = $1366;
  HEAP32[$1367 >> 2] = $1364;
  $1368 = $1366 + 4 | 0;
  $1369 = $1368;
  HEAP32[$1369 >> 2] = $1365;
  $1370 = $1270 ^ $356;
  $1371 = $1271 ^ $359;
  $1372 = $arrayidx87;
  $1373 = $1372;
  HEAP32[$1373 >> 2] = $1370;
  $1374 = $1372 + 4 | 0;
  $1375 = $1374;
  HEAP32[$1375 >> 2] = $1371;
  $1376 = $arrayidx7;
  $1377 = $1376;
  $1378 = HEAP32[$1377 >> 2] | 0;
  $1379 = $1376 + 4 | 0;
  $1380 = $1379;
  $1381 = HEAP32[$1380 >> 2] | 0;
  $1382 = $1381 & -1073741825;
  $1383 = $arrayidx7;
  $1384 = $1383;
  HEAP32[$1384 >> 2] = $1378;
  $1385 = $1383 + 4 | 0;
  $1386 = $1385;
  HEAP32[$1386 >> 2] = $1382;
  $dec = $blkCnt$addr$0 + -1 | 0;
  $tobool = ($dec | 0) == 0;
  if ($tobool) {
   break;
  }
  $add$ptr903 = $blkPtr$addr$0 + 128 | 0;
  $1387 = $kw;
  $1388 = $1387;
  $1389 = HEAP32[$1388 >> 2] | 0;
  $1390 = $1387 + 4 | 0;
  $1391 = $1390;
  $1392 = HEAP32[$1391 >> 2] | 0;
  $116 = $1389;
  $117 = $1392;
  $126 = $1280;
  $129 = $1281;
  $132 = $1286;
  $135 = $1287;
  $138 = $1292;
  $141 = $1293;
  $144 = $1298;
  $147 = $1299;
  $150 = $1304;
  $153 = $1305;
  $156 = $1310;
  $159 = $1311;
  $162 = $1316;
  $165 = $1317;
  $168 = $1322;
  $171 = $1323;
  $174 = $1328;
  $177 = $1329;
  $180 = $1334;
  $183 = $1335;
  $186 = $1340;
  $189 = $1341;
  $192 = $1346;
  $195 = $1347;
  $198 = $1352;
  $201 = $1353;
  $204 = $1358;
  $207 = $1359;
  $210 = $1364;
  $213 = $1365;
  $216 = $1370;
  $219 = $1371;
  $257 = $1378;
  $259 = $1382;
  $blkCnt$addr$0 = $dec;
  $blkPtr$addr$0 = $add$ptr903;
 }
 $1393 = $kw;
 $1394 = $1393;
 $1395 = HEAP32[$1394 >> 2] | 0;
 $1396 = $1393 + 4 | 0;
 $1397 = $1396;
 $1398 = HEAP32[$1397 >> 2] | 0;
 $1399 = $arrayidx;
 $1400 = $1399;
 HEAP32[$1400 >> 2] = $1395;
 $1401 = $1399 + 4 | 0;
 $1402 = $1401;
 HEAP32[$1402 >> 2] = $1398;
 $1403 = $arrayidx4;
 $1404 = $1403;
 HEAP32[$1404 >> 2] = $1378;
 $1405 = $1403 + 4 | 0;
 $1406 = $1405;
 HEAP32[$1406 >> 2] = $1382;
 STACKTOP = sp;
 return;
}

function _sc_reduce($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr11 = 0, $add$ptr15 = 0, $add$ptr15$idx = 0, $add$ptr15$idx$val = 0, $add$ptr15$idx463 = 0, $add$ptr15$idx463$val = 0, $add$ptr15$val = 0, $add$ptr23 = 0, $add$ptr23$idx = 0, $add$ptr23$idx$val = 0, $add$ptr23$idx462 = 0;
 var $add$ptr23$idx462$val = 0, $add$ptr23$val = 0, $add$ptr27 = 0, $add$ptr27$idx = 0, $add$ptr27$idx$val = 0, $add$ptr27$idx461 = 0, $add$ptr27$idx461$val = 0, $add$ptr27$val = 0, $add$ptr3 = 0, $add$ptr3$idx = 0, $add$ptr3$idx$val = 0, $add$ptr3$idx464 = 0, $add$ptr3$idx464$val = 0, $add$ptr3$val = 0, $add$ptr34 = 0, $add$ptr34$idx = 0, $add$ptr34$idx$val = 0, $add$ptr34$idx460 = 0, $add$ptr34$idx460$val = 0, $add$ptr34$val = 0;
 var $add$ptr42 = 0, $add$ptr46 = 0, $add$ptr46$idx = 0, $add$ptr46$idx$val = 0, $add$ptr46$idx459 = 0, $add$ptr46$idx459$val = 0, $add$ptr46$val = 0, $add$ptr54 = 0, $add$ptr54$idx = 0, $add$ptr54$idx$val = 0, $add$ptr54$idx458 = 0, $add$ptr54$idx458$val = 0, $add$ptr54$val = 0, $add$ptr58 = 0, $add$ptr58$idx = 0, $add$ptr58$idx$val = 0, $add$ptr58$idx457 = 0, $add$ptr58$idx457$val = 0, $add$ptr58$val = 0, $add$ptr65 = 0;
 var $add$ptr65$idx = 0, $add$ptr65$idx$val = 0, $add$ptr65$idx456 = 0, $add$ptr65$idx456$val = 0, $add$ptr65$val = 0, $add$ptr73 = 0, $add$ptr77 = 0, $add$ptr77$idx = 0, $add$ptr77$idx$val = 0, $add$ptr77$idx455 = 0, $add$ptr77$idx455$val = 0, $add$ptr77$val = 0, $add$ptr85 = 0, $arrayidx469 = 0, $arrayidx472 = 0, $arrayidx488 = 0, $arrayidx491 = 0, $arrayidx499 = 0, $arrayidx502 = 0, $arrayidx518 = 0;
 var $arrayidx521 = 0, $arrayidx546 = 0, $arrayidx549 = 0, $arrayidx565 = 0, $arrayidx568 = 0, $s$idx = 0, $s$idx$val = 0, $s$idx465 = 0, $s$idx465$val = 0, $s$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $s$val = HEAP8[$s >> 0] | 0;
 $s$idx = $s + 1 | 0;
 $s$idx$val = HEAP8[$s$idx >> 0] | 0;
 $s$idx465 = $s + 2 | 0;
 $s$idx465$val = HEAP8[$s$idx465 >> 0] | 0;
 $0 = _load_3($s$val, $s$idx$val, $s$idx465$val) | 0;
 $1 = getTempRet0() | 0;
 $2 = $0 & 2097151;
 $3 = _load_4($s$idx465) | 0;
 $4 = getTempRet0() | 0;
 $5 = _bitshift64Lshr($3 | 0, $4 | 0, 5) | 0;
 $6 = getTempRet0() | 0;
 $7 = $5 & 2097151;
 $add$ptr3 = $s + 5 | 0;
 $add$ptr3$val = HEAP8[$add$ptr3 >> 0] | 0;
 $add$ptr3$idx = $s + 6 | 0;
 $add$ptr3$idx$val = HEAP8[$add$ptr3$idx >> 0] | 0;
 $add$ptr3$idx464 = $s + 7 | 0;
 $add$ptr3$idx464$val = HEAP8[$add$ptr3$idx464 >> 0] | 0;
 $8 = _load_3($add$ptr3$val, $add$ptr3$idx$val, $add$ptr3$idx464$val) | 0;
 $9 = getTempRet0() | 0;
 $10 = _bitshift64Lshr($8 | 0, $9 | 0, 2) | 0;
 $11 = getTempRet0() | 0;
 $12 = $10 & 2097151;
 $13 = _load_4($add$ptr3$idx464) | 0;
 $14 = getTempRet0() | 0;
 $15 = _bitshift64Lshr($13 | 0, $14 | 0, 7) | 0;
 $16 = getTempRet0() | 0;
 $17 = $15 & 2097151;
 $add$ptr11 = $s + 10 | 0;
 $18 = _load_4($add$ptr11) | 0;
 $19 = getTempRet0() | 0;
 $20 = _bitshift64Lshr($18 | 0, $19 | 0, 4) | 0;
 $21 = getTempRet0() | 0;
 $22 = $20 & 2097151;
 $add$ptr15 = $s + 13 | 0;
 $add$ptr15$val = HEAP8[$add$ptr15 >> 0] | 0;
 $add$ptr15$idx = $s + 14 | 0;
 $add$ptr15$idx$val = HEAP8[$add$ptr15$idx >> 0] | 0;
 $add$ptr15$idx463 = $s + 15 | 0;
 $add$ptr15$idx463$val = HEAP8[$add$ptr15$idx463 >> 0] | 0;
 $23 = _load_3($add$ptr15$val, $add$ptr15$idx$val, $add$ptr15$idx463$val) | 0;
 $24 = getTempRet0() | 0;
 $25 = _bitshift64Lshr($23 | 0, $24 | 0, 1) | 0;
 $26 = getTempRet0() | 0;
 $27 = $25 & 2097151;
 $28 = _load_4($add$ptr15$idx463) | 0;
 $29 = getTempRet0() | 0;
 $30 = _bitshift64Lshr($28 | 0, $29 | 0, 6) | 0;
 $31 = getTempRet0() | 0;
 $32 = $30 & 2097151;
 $add$ptr23 = $s + 18 | 0;
 $add$ptr23$val = HEAP8[$add$ptr23 >> 0] | 0;
 $add$ptr23$idx = $s + 19 | 0;
 $add$ptr23$idx$val = HEAP8[$add$ptr23$idx >> 0] | 0;
 $add$ptr23$idx462 = $s + 20 | 0;
 $add$ptr23$idx462$val = HEAP8[$add$ptr23$idx462 >> 0] | 0;
 $33 = _load_3($add$ptr23$val, $add$ptr23$idx$val, $add$ptr23$idx462$val) | 0;
 $34 = getTempRet0() | 0;
 $35 = _bitshift64Lshr($33 | 0, $34 | 0, 3) | 0;
 $36 = getTempRet0() | 0;
 $37 = $35 & 2097151;
 $add$ptr27 = $s + 21 | 0;
 $add$ptr27$val = HEAP8[$add$ptr27 >> 0] | 0;
 $add$ptr27$idx = $s + 22 | 0;
 $add$ptr27$idx$val = HEAP8[$add$ptr27$idx >> 0] | 0;
 $add$ptr27$idx461 = $s + 23 | 0;
 $add$ptr27$idx461$val = HEAP8[$add$ptr27$idx461 >> 0] | 0;
 $38 = _load_3($add$ptr27$val, $add$ptr27$idx$val, $add$ptr27$idx461$val) | 0;
 $39 = getTempRet0() | 0;
 $40 = $38 & 2097151;
 $41 = _load_4($add$ptr27$idx461) | 0;
 $42 = getTempRet0() | 0;
 $43 = _bitshift64Lshr($41 | 0, $42 | 0, 5) | 0;
 $44 = getTempRet0() | 0;
 $45 = $43 & 2097151;
 $add$ptr34 = $s + 26 | 0;
 $add$ptr34$val = HEAP8[$add$ptr34 >> 0] | 0;
 $add$ptr34$idx = $s + 27 | 0;
 $add$ptr34$idx$val = HEAP8[$add$ptr34$idx >> 0] | 0;
 $add$ptr34$idx460 = $s + 28 | 0;
 $add$ptr34$idx460$val = HEAP8[$add$ptr34$idx460 >> 0] | 0;
 $46 = _load_3($add$ptr34$val, $add$ptr34$idx$val, $add$ptr34$idx460$val) | 0;
 $47 = getTempRet0() | 0;
 $48 = _bitshift64Lshr($46 | 0, $47 | 0, 2) | 0;
 $49 = getTempRet0() | 0;
 $50 = $48 & 2097151;
 $51 = _load_4($add$ptr34$idx460) | 0;
 $52 = getTempRet0() | 0;
 $53 = _bitshift64Lshr($51 | 0, $52 | 0, 7) | 0;
 $54 = getTempRet0() | 0;
 $55 = $53 & 2097151;
 $add$ptr42 = $s + 31 | 0;
 $56 = _load_4($add$ptr42) | 0;
 $57 = getTempRet0() | 0;
 $58 = _bitshift64Lshr($56 | 0, $57 | 0, 4) | 0;
 $59 = getTempRet0() | 0;
 $60 = $58 & 2097151;
 $add$ptr46 = $s + 34 | 0;
 $add$ptr46$val = HEAP8[$add$ptr46 >> 0] | 0;
 $add$ptr46$idx = $s + 35 | 0;
 $add$ptr46$idx$val = HEAP8[$add$ptr46$idx >> 0] | 0;
 $add$ptr46$idx459 = $s + 36 | 0;
 $add$ptr46$idx459$val = HEAP8[$add$ptr46$idx459 >> 0] | 0;
 $61 = _load_3($add$ptr46$val, $add$ptr46$idx$val, $add$ptr46$idx459$val) | 0;
 $62 = getTempRet0() | 0;
 $63 = _bitshift64Lshr($61 | 0, $62 | 0, 1) | 0;
 $64 = getTempRet0() | 0;
 $65 = $63 & 2097151;
 $66 = _load_4($add$ptr46$idx459) | 0;
 $67 = getTempRet0() | 0;
 $68 = _bitshift64Lshr($66 | 0, $67 | 0, 6) | 0;
 $69 = getTempRet0() | 0;
 $70 = $68 & 2097151;
 $add$ptr54 = $s + 39 | 0;
 $add$ptr54$val = HEAP8[$add$ptr54 >> 0] | 0;
 $add$ptr54$idx = $s + 40 | 0;
 $add$ptr54$idx$val = HEAP8[$add$ptr54$idx >> 0] | 0;
 $add$ptr54$idx458 = $s + 41 | 0;
 $add$ptr54$idx458$val = HEAP8[$add$ptr54$idx458 >> 0] | 0;
 $71 = _load_3($add$ptr54$val, $add$ptr54$idx$val, $add$ptr54$idx458$val) | 0;
 $72 = getTempRet0() | 0;
 $73 = _bitshift64Lshr($71 | 0, $72 | 0, 3) | 0;
 $74 = getTempRet0() | 0;
 $75 = $73 & 2097151;
 $add$ptr58 = $s + 42 | 0;
 $add$ptr58$val = HEAP8[$add$ptr58 >> 0] | 0;
 $add$ptr58$idx = $s + 43 | 0;
 $add$ptr58$idx$val = HEAP8[$add$ptr58$idx >> 0] | 0;
 $add$ptr58$idx457 = $s + 44 | 0;
 $add$ptr58$idx457$val = HEAP8[$add$ptr58$idx457 >> 0] | 0;
 $76 = _load_3($add$ptr58$val, $add$ptr58$idx$val, $add$ptr58$idx457$val) | 0;
 $77 = getTempRet0() | 0;
 $78 = $76 & 2097151;
 $79 = _load_4($add$ptr58$idx457) | 0;
 $80 = getTempRet0() | 0;
 $81 = _bitshift64Lshr($79 | 0, $80 | 0, 5) | 0;
 $82 = getTempRet0() | 0;
 $83 = $81 & 2097151;
 $add$ptr65 = $s + 47 | 0;
 $add$ptr65$val = HEAP8[$add$ptr65 >> 0] | 0;
 $add$ptr65$idx = $s + 48 | 0;
 $add$ptr65$idx$val = HEAP8[$add$ptr65$idx >> 0] | 0;
 $add$ptr65$idx456 = $s + 49 | 0;
 $add$ptr65$idx456$val = HEAP8[$add$ptr65$idx456 >> 0] | 0;
 $84 = _load_3($add$ptr65$val, $add$ptr65$idx$val, $add$ptr65$idx456$val) | 0;
 $85 = getTempRet0() | 0;
 $86 = _bitshift64Lshr($84 | 0, $85 | 0, 2) | 0;
 $87 = getTempRet0() | 0;
 $88 = $86 & 2097151;
 $89 = _load_4($add$ptr65$idx456) | 0;
 $90 = getTempRet0() | 0;
 $91 = _bitshift64Lshr($89 | 0, $90 | 0, 7) | 0;
 $92 = getTempRet0() | 0;
 $93 = $91 & 2097151;
 $add$ptr73 = $s + 52 | 0;
 $94 = _load_4($add$ptr73) | 0;
 $95 = getTempRet0() | 0;
 $96 = _bitshift64Lshr($94 | 0, $95 | 0, 4) | 0;
 $97 = getTempRet0() | 0;
 $98 = $96 & 2097151;
 $add$ptr77 = $s + 55 | 0;
 $add$ptr77$val = HEAP8[$add$ptr77 >> 0] | 0;
 $add$ptr77$idx = $s + 56 | 0;
 $add$ptr77$idx$val = HEAP8[$add$ptr77$idx >> 0] | 0;
 $add$ptr77$idx455 = $s + 57 | 0;
 $add$ptr77$idx455$val = HEAP8[$add$ptr77$idx455 >> 0] | 0;
 $99 = _load_3($add$ptr77$val, $add$ptr77$idx$val, $add$ptr77$idx455$val) | 0;
 $100 = getTempRet0() | 0;
 $101 = _bitshift64Lshr($99 | 0, $100 | 0, 1) | 0;
 $102 = getTempRet0() | 0;
 $103 = $101 & 2097151;
 $104 = _load_4($add$ptr77$idx455) | 0;
 $105 = getTempRet0() | 0;
 $106 = _bitshift64Lshr($104 | 0, $105 | 0, 6) | 0;
 $107 = getTempRet0() | 0;
 $108 = $106 & 2097151;
 $add$ptr85 = $s + 60 | 0;
 $109 = _load_4($add$ptr85) | 0;
 $110 = getTempRet0() | 0;
 $111 = _bitshift64Lshr($109 | 0, $110 | 0, 3) | 0;
 $112 = getTempRet0() | 0;
 $113 = ___muldi3($111 | 0, $112 | 0, 666643, 0) | 0;
 $114 = getTempRet0() | 0;
 $115 = ___muldi3($111 | 0, $112 | 0, 470296, 0) | 0;
 $116 = getTempRet0() | 0;
 $117 = ___muldi3($111 | 0, $112 | 0, 654183, 0) | 0;
 $118 = getTempRet0() | 0;
 $119 = ___muldi3($111 | 0, $112 | 0, -997805, -1) | 0;
 $120 = getTempRet0() | 0;
 $121 = ___muldi3($111 | 0, $112 | 0, 136657, 0) | 0;
 $122 = getTempRet0() | 0;
 $123 = _i64Add($121 | 0, $122 | 0, $75 | 0, 0) | 0;
 $124 = getTempRet0() | 0;
 $125 = ___muldi3($111 | 0, $112 | 0, -683901, -1) | 0;
 $126 = getTempRet0() | 0;
 $127 = _i64Add($125 | 0, $126 | 0, $78 | 0, 0) | 0;
 $128 = getTempRet0() | 0;
 $129 = ___muldi3($108 | 0, 0, 666643, 0) | 0;
 $130 = getTempRet0() | 0;
 $131 = ___muldi3($108 | 0, 0, 470296, 0) | 0;
 $132 = getTempRet0() | 0;
 $133 = ___muldi3($108 | 0, 0, 654183, 0) | 0;
 $134 = getTempRet0() | 0;
 $135 = ___muldi3($108 | 0, 0, -997805, -1) | 0;
 $136 = getTempRet0() | 0;
 $137 = ___muldi3($108 | 0, 0, 136657, 0) | 0;
 $138 = getTempRet0() | 0;
 $139 = ___muldi3($108 | 0, 0, -683901, -1) | 0;
 $140 = getTempRet0() | 0;
 $141 = _i64Add($123 | 0, $124 | 0, $139 | 0, $140 | 0) | 0;
 $142 = getTempRet0() | 0;
 $143 = ___muldi3($103 | 0, 0, 666643, 0) | 0;
 $144 = getTempRet0() | 0;
 $145 = ___muldi3($103 | 0, 0, 470296, 0) | 0;
 $146 = getTempRet0() | 0;
 $147 = ___muldi3($103 | 0, 0, 654183, 0) | 0;
 $148 = getTempRet0() | 0;
 $149 = ___muldi3($103 | 0, 0, -997805, -1) | 0;
 $150 = getTempRet0() | 0;
 $151 = ___muldi3($103 | 0, 0, 136657, 0) | 0;
 $152 = getTempRet0() | 0;
 $153 = ___muldi3($103 | 0, 0, -683901, -1) | 0;
 $154 = getTempRet0() | 0;
 $155 = _i64Add($153 | 0, $154 | 0, $70 | 0, 0) | 0;
 $156 = getTempRet0() | 0;
 $157 = _i64Add($155 | 0, $156 | 0, $119 | 0, $120 | 0) | 0;
 $158 = getTempRet0() | 0;
 $159 = _i64Add($157 | 0, $158 | 0, $137 | 0, $138 | 0) | 0;
 $160 = getTempRet0() | 0;
 $161 = ___muldi3($98 | 0, 0, 666643, 0) | 0;
 $162 = getTempRet0() | 0;
 $163 = ___muldi3($98 | 0, 0, 470296, 0) | 0;
 $164 = getTempRet0() | 0;
 $165 = ___muldi3($98 | 0, 0, 654183, 0) | 0;
 $166 = getTempRet0() | 0;
 $167 = ___muldi3($98 | 0, 0, -997805, -1) | 0;
 $168 = getTempRet0() | 0;
 $169 = ___muldi3($98 | 0, 0, 136657, 0) | 0;
 $170 = getTempRet0() | 0;
 $171 = ___muldi3($98 | 0, 0, -683901, -1) | 0;
 $172 = getTempRet0() | 0;
 $173 = ___muldi3($93 | 0, 0, 666643, 0) | 0;
 $174 = getTempRet0() | 0;
 $175 = ___muldi3($93 | 0, 0, 470296, 0) | 0;
 $176 = getTempRet0() | 0;
 $177 = ___muldi3($93 | 0, 0, 654183, 0) | 0;
 $178 = getTempRet0() | 0;
 $179 = ___muldi3($93 | 0, 0, -997805, -1) | 0;
 $180 = getTempRet0() | 0;
 $181 = ___muldi3($93 | 0, 0, 136657, 0) | 0;
 $182 = getTempRet0() | 0;
 $183 = ___muldi3($93 | 0, 0, -683901, -1) | 0;
 $184 = getTempRet0() | 0;
 $185 = _i64Add($183 | 0, $184 | 0, $60 | 0, 0) | 0;
 $186 = getTempRet0() | 0;
 $187 = _i64Add($185 | 0, $186 | 0, $169 | 0, $170 | 0) | 0;
 $188 = getTempRet0() | 0;
 $189 = _i64Add($187 | 0, $188 | 0, $149 | 0, $150 | 0) | 0;
 $190 = getTempRet0() | 0;
 $191 = _i64Add($189 | 0, $190 | 0, $115 | 0, $116 | 0) | 0;
 $192 = getTempRet0() | 0;
 $193 = _i64Add($191 | 0, $192 | 0, $133 | 0, $134 | 0) | 0;
 $194 = getTempRet0() | 0;
 $195 = ___muldi3($88 | 0, 0, 666643, 0) | 0;
 $196 = getTempRet0() | 0;
 $197 = _i64Add($195 | 0, $196 | 0, $32 | 0, 0) | 0;
 $198 = getTempRet0() | 0;
 $199 = ___muldi3($88 | 0, 0, 470296, 0) | 0;
 $200 = getTempRet0() | 0;
 $201 = ___muldi3($88 | 0, 0, 654183, 0) | 0;
 $202 = getTempRet0() | 0;
 $203 = _i64Add($201 | 0, $202 | 0, $40 | 0, 0) | 0;
 $204 = getTempRet0() | 0;
 $205 = _i64Add($203 | 0, $204 | 0, $175 | 0, $176 | 0) | 0;
 $206 = getTempRet0() | 0;
 $207 = _i64Add($205 | 0, $206 | 0, $161 | 0, $162 | 0) | 0;
 $208 = getTempRet0() | 0;
 $209 = ___muldi3($88 | 0, 0, -997805, -1) | 0;
 $210 = getTempRet0() | 0;
 $211 = ___muldi3($88 | 0, 0, 136657, 0) | 0;
 $212 = getTempRet0() | 0;
 $213 = _i64Add($211 | 0, $212 | 0, $50 | 0, 0) | 0;
 $214 = getTempRet0() | 0;
 $215 = _i64Add($213 | 0, $214 | 0, $179 | 0, $180 | 0) | 0;
 $216 = getTempRet0() | 0;
 $217 = _i64Add($215 | 0, $216 | 0, $165 | 0, $166 | 0) | 0;
 $218 = getTempRet0() | 0;
 $219 = _i64Add($217 | 0, $218 | 0, $145 | 0, $146 | 0) | 0;
 $220 = getTempRet0() | 0;
 $221 = _i64Add($219 | 0, $220 | 0, $129 | 0, $130 | 0) | 0;
 $222 = getTempRet0() | 0;
 $223 = ___muldi3($88 | 0, 0, -683901, -1) | 0;
 $224 = getTempRet0() | 0;
 $225 = _i64Add($197 | 0, $198 | 0, 1048576, 0) | 0;
 $226 = getTempRet0() | 0;
 $227 = _bitshift64Lshr($225 | 0, $226 | 0, 21) | 0;
 $228 = getTempRet0() | 0;
 $229 = _i64Add($199 | 0, $200 | 0, $37 | 0, 0) | 0;
 $230 = getTempRet0() | 0;
 $231 = _i64Add($229 | 0, $230 | 0, $173 | 0, $174 | 0) | 0;
 $232 = getTempRet0() | 0;
 $233 = _i64Add($231 | 0, $232 | 0, $227 | 0, $228 | 0) | 0;
 $234 = getTempRet0() | 0;
 $235 = $225 & -2097152;
 $236 = $226 & 2047;
 $237 = _i64Subtract($197 | 0, $198 | 0, $235 | 0, $236 | 0) | 0;
 $238 = getTempRet0() | 0;
 $239 = _i64Add($207 | 0, $208 | 0, 1048576, 0) | 0;
 $240 = getTempRet0() | 0;
 $241 = _bitshift64Lshr($239 | 0, $240 | 0, 21) | 0;
 $242 = getTempRet0() | 0;
 $243 = _i64Add($209 | 0, $210 | 0, $45 | 0, 0) | 0;
 $244 = getTempRet0() | 0;
 $245 = _i64Add($243 | 0, $244 | 0, $177 | 0, $178 | 0) | 0;
 $246 = getTempRet0() | 0;
 $247 = _i64Add($245 | 0, $246 | 0, $163 | 0, $164 | 0) | 0;
 $248 = getTempRet0() | 0;
 $249 = _i64Add($247 | 0, $248 | 0, $143 | 0, $144 | 0) | 0;
 $250 = getTempRet0() | 0;
 $251 = _i64Add($249 | 0, $250 | 0, $241 | 0, $242 | 0) | 0;
 $252 = getTempRet0() | 0;
 $253 = $239 & -2097152;
 $254 = _i64Add($221 | 0, $222 | 0, 1048576, 0) | 0;
 $255 = getTempRet0() | 0;
 $256 = _bitshift64Ashr($254 | 0, $255 | 0, 21) | 0;
 $257 = getTempRet0() | 0;
 $258 = _i64Add($223 | 0, $224 | 0, $55 | 0, 0) | 0;
 $259 = getTempRet0() | 0;
 $260 = _i64Add($258 | 0, $259 | 0, $181 | 0, $182 | 0) | 0;
 $261 = getTempRet0() | 0;
 $262 = _i64Add($260 | 0, $261 | 0, $167 | 0, $168 | 0) | 0;
 $263 = getTempRet0() | 0;
 $264 = _i64Add($262 | 0, $263 | 0, $147 | 0, $148 | 0) | 0;
 $265 = getTempRet0() | 0;
 $266 = _i64Add($264 | 0, $265 | 0, $113 | 0, $114 | 0) | 0;
 $267 = getTempRet0() | 0;
 $268 = _i64Add($266 | 0, $267 | 0, $131 | 0, $132 | 0) | 0;
 $269 = getTempRet0() | 0;
 $270 = _i64Add($268 | 0, $269 | 0, $256 | 0, $257 | 0) | 0;
 $271 = getTempRet0() | 0;
 $272 = $254 & -2097152;
 $273 = _i64Add($193 | 0, $194 | 0, 1048576, 0) | 0;
 $274 = getTempRet0() | 0;
 $275 = _bitshift64Ashr($273 | 0, $274 | 0, 21) | 0;
 $276 = getTempRet0() | 0;
 $277 = _i64Add($171 | 0, $172 | 0, $65 | 0, 0) | 0;
 $278 = getTempRet0() | 0;
 $279 = _i64Add($277 | 0, $278 | 0, $151 | 0, $152 | 0) | 0;
 $280 = getTempRet0() | 0;
 $281 = _i64Add($279 | 0, $280 | 0, $117 | 0, $118 | 0) | 0;
 $282 = getTempRet0() | 0;
 $283 = _i64Add($281 | 0, $282 | 0, $135 | 0, $136 | 0) | 0;
 $284 = getTempRet0() | 0;
 $285 = _i64Add($283 | 0, $284 | 0, $275 | 0, $276 | 0) | 0;
 $286 = getTempRet0() | 0;
 $287 = $273 & -2097152;
 $288 = _i64Subtract($193 | 0, $194 | 0, $287 | 0, $274 | 0) | 0;
 $289 = getTempRet0() | 0;
 $290 = _i64Add($159 | 0, $160 | 0, 1048576, 0) | 0;
 $291 = getTempRet0() | 0;
 $292 = _bitshift64Ashr($290 | 0, $291 | 0, 21) | 0;
 $293 = getTempRet0() | 0;
 $294 = _i64Add($141 | 0, $142 | 0, $292 | 0, $293 | 0) | 0;
 $295 = getTempRet0() | 0;
 $296 = $290 & -2097152;
 $297 = _i64Subtract($159 | 0, $160 | 0, $296 | 0, $291 | 0) | 0;
 $298 = getTempRet0() | 0;
 $299 = _i64Add($127 | 0, $128 | 0, 1048576, 0) | 0;
 $300 = getTempRet0() | 0;
 $301 = _bitshift64Ashr($299 | 0, $300 | 0, 21) | 0;
 $302 = getTempRet0() | 0;
 $303 = _i64Add($301 | 0, $302 | 0, $83 | 0, 0) | 0;
 $304 = getTempRet0() | 0;
 $305 = $299 & -2097152;
 $306 = _i64Subtract($127 | 0, $128 | 0, $305 | 0, $300 | 0) | 0;
 $307 = getTempRet0() | 0;
 $308 = _i64Add($233 | 0, $234 | 0, 1048576, 0) | 0;
 $309 = getTempRet0() | 0;
 $310 = _bitshift64Lshr($308 | 0, $309 | 0, 21) | 0;
 $311 = getTempRet0() | 0;
 $312 = $308 & -2097152;
 $313 = _i64Subtract($233 | 0, $234 | 0, $312 | 0, $309 | 0) | 0;
 $314 = getTempRet0() | 0;
 $315 = _i64Add($251 | 0, $252 | 0, 1048576, 0) | 0;
 $316 = getTempRet0() | 0;
 $317 = _bitshift64Ashr($315 | 0, $316 | 0, 21) | 0;
 $318 = getTempRet0() | 0;
 $319 = $315 & -2097152;
 $320 = _i64Add($270 | 0, $271 | 0, 1048576, 0) | 0;
 $321 = getTempRet0() | 0;
 $322 = _bitshift64Ashr($320 | 0, $321 | 0, 21) | 0;
 $323 = getTempRet0() | 0;
 $324 = _i64Add($322 | 0, $323 | 0, $288 | 0, $289 | 0) | 0;
 $325 = getTempRet0() | 0;
 $326 = $320 & -2097152;
 $327 = _i64Subtract($270 | 0, $271 | 0, $326 | 0, $321 | 0) | 0;
 $328 = getTempRet0() | 0;
 $329 = _i64Add($285 | 0, $286 | 0, 1048576, 0) | 0;
 $330 = getTempRet0() | 0;
 $331 = _bitshift64Ashr($329 | 0, $330 | 0, 21) | 0;
 $332 = getTempRet0() | 0;
 $333 = _i64Add($331 | 0, $332 | 0, $297 | 0, $298 | 0) | 0;
 $334 = getTempRet0() | 0;
 $335 = $329 & -2097152;
 $336 = _i64Subtract($285 | 0, $286 | 0, $335 | 0, $330 | 0) | 0;
 $337 = getTempRet0() | 0;
 $338 = _i64Add($294 | 0, $295 | 0, 1048576, 0) | 0;
 $339 = getTempRet0() | 0;
 $340 = _bitshift64Ashr($338 | 0, $339 | 0, 21) | 0;
 $341 = getTempRet0() | 0;
 $342 = _i64Add($340 | 0, $341 | 0, $306 | 0, $307 | 0) | 0;
 $343 = getTempRet0() | 0;
 $344 = $338 & -2097152;
 $345 = _i64Subtract($294 | 0, $295 | 0, $344 | 0, $339 | 0) | 0;
 $346 = getTempRet0() | 0;
 $347 = ___muldi3($303 | 0, $304 | 0, 666643, 0) | 0;
 $348 = getTempRet0() | 0;
 $349 = _i64Add($347 | 0, $348 | 0, $27 | 0, 0) | 0;
 $350 = getTempRet0() | 0;
 $351 = ___muldi3($303 | 0, $304 | 0, 470296, 0) | 0;
 $352 = getTempRet0() | 0;
 $353 = _i64Add($237 | 0, $238 | 0, $351 | 0, $352 | 0) | 0;
 $354 = getTempRet0() | 0;
 $355 = ___muldi3($303 | 0, $304 | 0, 654183, 0) | 0;
 $356 = getTempRet0() | 0;
 $357 = _i64Add($313 | 0, $314 | 0, $355 | 0, $356 | 0) | 0;
 $358 = getTempRet0() | 0;
 $359 = ___muldi3($303 | 0, $304 | 0, -997805, -1) | 0;
 $360 = getTempRet0() | 0;
 $361 = ___muldi3($303 | 0, $304 | 0, 136657, 0) | 0;
 $362 = getTempRet0() | 0;
 $363 = ___muldi3($303 | 0, $304 | 0, -683901, -1) | 0;
 $364 = getTempRet0() | 0;
 $365 = _i64Add($363 | 0, $364 | 0, $221 | 0, $222 | 0) | 0;
 $366 = getTempRet0() | 0;
 $367 = _i64Add($365 | 0, $366 | 0, $317 | 0, $318 | 0) | 0;
 $368 = getTempRet0() | 0;
 $369 = _i64Subtract($367 | 0, $368 | 0, $272 | 0, $255 | 0) | 0;
 $370 = getTempRet0() | 0;
 $371 = ___muldi3($342 | 0, $343 | 0, 666643, 0) | 0;
 $372 = getTempRet0() | 0;
 $373 = _i64Add($371 | 0, $372 | 0, $22 | 0, 0) | 0;
 $374 = getTempRet0() | 0;
 $375 = ___muldi3($342 | 0, $343 | 0, 470296, 0) | 0;
 $376 = getTempRet0() | 0;
 $377 = _i64Add($349 | 0, $350 | 0, $375 | 0, $376 | 0) | 0;
 $378 = getTempRet0() | 0;
 $379 = ___muldi3($342 | 0, $343 | 0, 654183, 0) | 0;
 $380 = getTempRet0() | 0;
 $381 = _i64Add($353 | 0, $354 | 0, $379 | 0, $380 | 0) | 0;
 $382 = getTempRet0() | 0;
 $383 = ___muldi3($342 | 0, $343 | 0, -997805, -1) | 0;
 $384 = getTempRet0() | 0;
 $385 = _i64Add($357 | 0, $358 | 0, $383 | 0, $384 | 0) | 0;
 $386 = getTempRet0() | 0;
 $387 = ___muldi3($342 | 0, $343 | 0, 136657, 0) | 0;
 $388 = getTempRet0() | 0;
 $389 = ___muldi3($342 | 0, $343 | 0, -683901, -1) | 0;
 $390 = getTempRet0() | 0;
 $391 = ___muldi3($345 | 0, $346 | 0, 666643, 0) | 0;
 $392 = getTempRet0() | 0;
 $393 = _i64Add($391 | 0, $392 | 0, $17 | 0, 0) | 0;
 $394 = getTempRet0() | 0;
 $395 = ___muldi3($345 | 0, $346 | 0, 470296, 0) | 0;
 $396 = getTempRet0() | 0;
 $397 = _i64Add($373 | 0, $374 | 0, $395 | 0, $396 | 0) | 0;
 $398 = getTempRet0() | 0;
 $399 = ___muldi3($345 | 0, $346 | 0, 654183, 0) | 0;
 $400 = getTempRet0() | 0;
 $401 = _i64Add($377 | 0, $378 | 0, $399 | 0, $400 | 0) | 0;
 $402 = getTempRet0() | 0;
 $403 = ___muldi3($345 | 0, $346 | 0, -997805, -1) | 0;
 $404 = getTempRet0() | 0;
 $405 = _i64Add($381 | 0, $382 | 0, $403 | 0, $404 | 0) | 0;
 $406 = getTempRet0() | 0;
 $407 = ___muldi3($345 | 0, $346 | 0, 136657, 0) | 0;
 $408 = getTempRet0() | 0;
 $409 = _i64Add($385 | 0, $386 | 0, $407 | 0, $408 | 0) | 0;
 $410 = getTempRet0() | 0;
 $411 = ___muldi3($345 | 0, $346 | 0, -683901, -1) | 0;
 $412 = getTempRet0() | 0;
 $413 = _i64Add($310 | 0, $311 | 0, $207 | 0, $208 | 0) | 0;
 $414 = getTempRet0() | 0;
 $415 = _i64Subtract($413 | 0, $414 | 0, $253 | 0, $240 | 0) | 0;
 $416 = getTempRet0() | 0;
 $417 = _i64Add($415 | 0, $416 | 0, $359 | 0, $360 | 0) | 0;
 $418 = getTempRet0() | 0;
 $419 = _i64Add($417 | 0, $418 | 0, $387 | 0, $388 | 0) | 0;
 $420 = getTempRet0() | 0;
 $421 = _i64Add($419 | 0, $420 | 0, $411 | 0, $412 | 0) | 0;
 $422 = getTempRet0() | 0;
 $423 = ___muldi3($333 | 0, $334 | 0, 666643, 0) | 0;
 $424 = getTempRet0() | 0;
 $425 = _i64Add($423 | 0, $424 | 0, $12 | 0, 0) | 0;
 $426 = getTempRet0() | 0;
 $427 = ___muldi3($333 | 0, $334 | 0, 470296, 0) | 0;
 $428 = getTempRet0() | 0;
 $429 = _i64Add($393 | 0, $394 | 0, $427 | 0, $428 | 0) | 0;
 $430 = getTempRet0() | 0;
 $431 = ___muldi3($333 | 0, $334 | 0, 654183, 0) | 0;
 $432 = getTempRet0() | 0;
 $433 = _i64Add($397 | 0, $398 | 0, $431 | 0, $432 | 0) | 0;
 $434 = getTempRet0() | 0;
 $435 = ___muldi3($333 | 0, $334 | 0, -997805, -1) | 0;
 $436 = getTempRet0() | 0;
 $437 = _i64Add($401 | 0, $402 | 0, $435 | 0, $436 | 0) | 0;
 $438 = getTempRet0() | 0;
 $439 = ___muldi3($333 | 0, $334 | 0, 136657, 0) | 0;
 $440 = getTempRet0() | 0;
 $441 = _i64Add($405 | 0, $406 | 0, $439 | 0, $440 | 0) | 0;
 $442 = getTempRet0() | 0;
 $443 = ___muldi3($333 | 0, $334 | 0, -683901, -1) | 0;
 $444 = getTempRet0() | 0;
 $445 = _i64Add($409 | 0, $410 | 0, $443 | 0, $444 | 0) | 0;
 $446 = getTempRet0() | 0;
 $447 = ___muldi3($336 | 0, $337 | 0, 666643, 0) | 0;
 $448 = getTempRet0() | 0;
 $449 = _i64Add($447 | 0, $448 | 0, $7 | 0, 0) | 0;
 $450 = getTempRet0() | 0;
 $451 = ___muldi3($336 | 0, $337 | 0, 470296, 0) | 0;
 $452 = getTempRet0() | 0;
 $453 = _i64Add($425 | 0, $426 | 0, $451 | 0, $452 | 0) | 0;
 $454 = getTempRet0() | 0;
 $455 = ___muldi3($336 | 0, $337 | 0, 654183, 0) | 0;
 $456 = getTempRet0() | 0;
 $457 = _i64Add($429 | 0, $430 | 0, $455 | 0, $456 | 0) | 0;
 $458 = getTempRet0() | 0;
 $459 = ___muldi3($336 | 0, $337 | 0, -997805, -1) | 0;
 $460 = getTempRet0() | 0;
 $461 = _i64Add($433 | 0, $434 | 0, $459 | 0, $460 | 0) | 0;
 $462 = getTempRet0() | 0;
 $463 = ___muldi3($336 | 0, $337 | 0, 136657, 0) | 0;
 $464 = getTempRet0() | 0;
 $465 = _i64Add($437 | 0, $438 | 0, $463 | 0, $464 | 0) | 0;
 $466 = getTempRet0() | 0;
 $467 = ___muldi3($336 | 0, $337 | 0, -683901, -1) | 0;
 $468 = getTempRet0() | 0;
 $469 = _i64Add($441 | 0, $442 | 0, $467 | 0, $468 | 0) | 0;
 $470 = getTempRet0() | 0;
 $471 = ___muldi3($324 | 0, $325 | 0, 666643, 0) | 0;
 $472 = getTempRet0() | 0;
 $473 = _i64Add($471 | 0, $472 | 0, $2 | 0, 0) | 0;
 $474 = getTempRet0() | 0;
 $475 = ___muldi3($324 | 0, $325 | 0, 470296, 0) | 0;
 $476 = getTempRet0() | 0;
 $477 = _i64Add($449 | 0, $450 | 0, $475 | 0, $476 | 0) | 0;
 $478 = getTempRet0() | 0;
 $479 = ___muldi3($324 | 0, $325 | 0, 654183, 0) | 0;
 $480 = getTempRet0() | 0;
 $481 = _i64Add($453 | 0, $454 | 0, $479 | 0, $480 | 0) | 0;
 $482 = getTempRet0() | 0;
 $483 = ___muldi3($324 | 0, $325 | 0, -997805, -1) | 0;
 $484 = getTempRet0() | 0;
 $485 = _i64Add($457 | 0, $458 | 0, $483 | 0, $484 | 0) | 0;
 $486 = getTempRet0() | 0;
 $487 = ___muldi3($324 | 0, $325 | 0, 136657, 0) | 0;
 $488 = getTempRet0() | 0;
 $489 = _i64Add($461 | 0, $462 | 0, $487 | 0, $488 | 0) | 0;
 $490 = getTempRet0() | 0;
 $491 = ___muldi3($324 | 0, $325 | 0, -683901, -1) | 0;
 $492 = getTempRet0() | 0;
 $493 = _i64Add($465 | 0, $466 | 0, $491 | 0, $492 | 0) | 0;
 $494 = getTempRet0() | 0;
 $495 = _i64Add($473 | 0, $474 | 0, 1048576, 0) | 0;
 $496 = getTempRet0() | 0;
 $497 = _bitshift64Ashr($495 | 0, $496 | 0, 21) | 0;
 $498 = getTempRet0() | 0;
 $499 = _i64Add($477 | 0, $478 | 0, $497 | 0, $498 | 0) | 0;
 $500 = getTempRet0() | 0;
 $501 = $495 & -2097152;
 $502 = _i64Subtract($473 | 0, $474 | 0, $501 | 0, $496 | 0) | 0;
 $503 = getTempRet0() | 0;
 $504 = _i64Add($481 | 0, $482 | 0, 1048576, 0) | 0;
 $505 = getTempRet0() | 0;
 $506 = _bitshift64Ashr($504 | 0, $505 | 0, 21) | 0;
 $507 = getTempRet0() | 0;
 $508 = _i64Add($485 | 0, $486 | 0, $506 | 0, $507 | 0) | 0;
 $509 = getTempRet0() | 0;
 $510 = $504 & -2097152;
 $511 = _i64Add($489 | 0, $490 | 0, 1048576, 0) | 0;
 $512 = getTempRet0() | 0;
 $513 = _bitshift64Ashr($511 | 0, $512 | 0, 21) | 0;
 $514 = getTempRet0() | 0;
 $515 = _i64Add($493 | 0, $494 | 0, $513 | 0, $514 | 0) | 0;
 $516 = getTempRet0() | 0;
 $517 = $511 & -2097152;
 $518 = _i64Add($469 | 0, $470 | 0, 1048576, 0) | 0;
 $519 = getTempRet0() | 0;
 $520 = _bitshift64Ashr($518 | 0, $519 | 0, 21) | 0;
 $521 = getTempRet0() | 0;
 $522 = _i64Add($445 | 0, $446 | 0, $520 | 0, $521 | 0) | 0;
 $523 = getTempRet0() | 0;
 $524 = $518 & -2097152;
 $525 = _i64Subtract($469 | 0, $470 | 0, $524 | 0, $519 | 0) | 0;
 $526 = getTempRet0() | 0;
 $527 = _i64Add($421 | 0, $422 | 0, 1048576, 0) | 0;
 $528 = getTempRet0() | 0;
 $529 = _bitshift64Ashr($527 | 0, $528 | 0, 21) | 0;
 $530 = getTempRet0() | 0;
 $531 = _i64Add($361 | 0, $362 | 0, $251 | 0, $252 | 0) | 0;
 $532 = getTempRet0() | 0;
 $533 = _i64Subtract($531 | 0, $532 | 0, $319 | 0, $316 | 0) | 0;
 $534 = getTempRet0() | 0;
 $535 = _i64Add($533 | 0, $534 | 0, $389 | 0, $390 | 0) | 0;
 $536 = getTempRet0() | 0;
 $537 = _i64Add($535 | 0, $536 | 0, $529 | 0, $530 | 0) | 0;
 $538 = getTempRet0() | 0;
 $539 = $527 & -2097152;
 $540 = _i64Subtract($421 | 0, $422 | 0, $539 | 0, $528 | 0) | 0;
 $541 = getTempRet0() | 0;
 $542 = _i64Add($369 | 0, $370 | 0, 1048576, 0) | 0;
 $543 = getTempRet0() | 0;
 $544 = _bitshift64Ashr($542 | 0, $543 | 0, 21) | 0;
 $545 = getTempRet0() | 0;
 $546 = _i64Add($544 | 0, $545 | 0, $327 | 0, $328 | 0) | 0;
 $547 = getTempRet0() | 0;
 $548 = $542 & -2097152;
 $549 = _i64Subtract($369 | 0, $370 | 0, $548 | 0, $543 | 0) | 0;
 $550 = getTempRet0() | 0;
 $551 = _i64Add($499 | 0, $500 | 0, 1048576, 0) | 0;
 $552 = getTempRet0() | 0;
 $553 = _bitshift64Ashr($551 | 0, $552 | 0, 21) | 0;
 $554 = getTempRet0() | 0;
 $555 = $551 & -2097152;
 $556 = _i64Add($508 | 0, $509 | 0, 1048576, 0) | 0;
 $557 = getTempRet0() | 0;
 $558 = _bitshift64Ashr($556 | 0, $557 | 0, 21) | 0;
 $559 = getTempRet0() | 0;
 $560 = $556 & -2097152;
 $561 = _i64Add($515 | 0, $516 | 0, 1048576, 0) | 0;
 $562 = getTempRet0() | 0;
 $563 = _bitshift64Ashr($561 | 0, $562 | 0, 21) | 0;
 $564 = getTempRet0() | 0;
 $565 = _i64Add($525 | 0, $526 | 0, $563 | 0, $564 | 0) | 0;
 $566 = getTempRet0() | 0;
 $567 = $561 & -2097152;
 $568 = _i64Add($522 | 0, $523 | 0, 1048576, 0) | 0;
 $569 = getTempRet0() | 0;
 $570 = _bitshift64Ashr($568 | 0, $569 | 0, 21) | 0;
 $571 = getTempRet0() | 0;
 $572 = _i64Add($540 | 0, $541 | 0, $570 | 0, $571 | 0) | 0;
 $573 = getTempRet0() | 0;
 $574 = $568 & -2097152;
 $575 = _i64Subtract($522 | 0, $523 | 0, $574 | 0, $569 | 0) | 0;
 $576 = getTempRet0() | 0;
 $577 = _i64Add($537 | 0, $538 | 0, 1048576, 0) | 0;
 $578 = getTempRet0() | 0;
 $579 = _bitshift64Ashr($577 | 0, $578 | 0, 21) | 0;
 $580 = getTempRet0() | 0;
 $581 = _i64Add($549 | 0, $550 | 0, $579 | 0, $580 | 0) | 0;
 $582 = getTempRet0() | 0;
 $583 = $577 & -2097152;
 $584 = _i64Subtract($537 | 0, $538 | 0, $583 | 0, $578 | 0) | 0;
 $585 = getTempRet0() | 0;
 $586 = _i64Add($546 | 0, $547 | 0, 1048576, 0) | 0;
 $587 = getTempRet0() | 0;
 $588 = _bitshift64Ashr($586 | 0, $587 | 0, 21) | 0;
 $589 = getTempRet0() | 0;
 $590 = $586 & -2097152;
 $591 = _i64Subtract($546 | 0, $547 | 0, $590 | 0, $587 | 0) | 0;
 $592 = getTempRet0() | 0;
 $593 = ___muldi3($588 | 0, $589 | 0, 666643, 0) | 0;
 $594 = getTempRet0() | 0;
 $595 = _i64Add($502 | 0, $503 | 0, $593 | 0, $594 | 0) | 0;
 $596 = getTempRet0() | 0;
 $597 = ___muldi3($588 | 0, $589 | 0, 470296, 0) | 0;
 $598 = getTempRet0() | 0;
 $599 = ___muldi3($588 | 0, $589 | 0, 654183, 0) | 0;
 $600 = getTempRet0() | 0;
 $601 = ___muldi3($588 | 0, $589 | 0, -997805, -1) | 0;
 $602 = getTempRet0() | 0;
 $603 = ___muldi3($588 | 0, $589 | 0, 136657, 0) | 0;
 $604 = getTempRet0() | 0;
 $605 = ___muldi3($588 | 0, $589 | 0, -683901, -1) | 0;
 $606 = getTempRet0() | 0;
 $607 = _bitshift64Ashr($595 | 0, $596 | 0, 21) | 0;
 $608 = getTempRet0() | 0;
 $609 = _i64Add($597 | 0, $598 | 0, $499 | 0, $500 | 0) | 0;
 $610 = getTempRet0() | 0;
 $611 = _i64Subtract($609 | 0, $610 | 0, $555 | 0, $552 | 0) | 0;
 $612 = getTempRet0() | 0;
 $613 = _i64Add($611 | 0, $612 | 0, $607 | 0, $608 | 0) | 0;
 $614 = getTempRet0() | 0;
 $615 = $595 & 2097151;
 $616 = _bitshift64Ashr($613 | 0, $614 | 0, 21) | 0;
 $617 = getTempRet0() | 0;
 $618 = _i64Add($599 | 0, $600 | 0, $481 | 0, $482 | 0) | 0;
 $619 = getTempRet0() | 0;
 $620 = _i64Subtract($618 | 0, $619 | 0, $510 | 0, $505 | 0) | 0;
 $621 = getTempRet0() | 0;
 $622 = _i64Add($620 | 0, $621 | 0, $553 | 0, $554 | 0) | 0;
 $623 = getTempRet0() | 0;
 $624 = _i64Add($622 | 0, $623 | 0, $616 | 0, $617 | 0) | 0;
 $625 = getTempRet0() | 0;
 $626 = $613 & 2097151;
 $627 = _bitshift64Ashr($624 | 0, $625 | 0, 21) | 0;
 $628 = getTempRet0() | 0;
 $629 = _i64Add($508 | 0, $509 | 0, $601 | 0, $602 | 0) | 0;
 $630 = getTempRet0() | 0;
 $631 = _i64Subtract($629 | 0, $630 | 0, $560 | 0, $557 | 0) | 0;
 $632 = getTempRet0() | 0;
 $633 = _i64Add($631 | 0, $632 | 0, $627 | 0, $628 | 0) | 0;
 $634 = getTempRet0() | 0;
 $635 = $624 & 2097151;
 $636 = _bitshift64Ashr($633 | 0, $634 | 0, 21) | 0;
 $637 = getTempRet0() | 0;
 $638 = _i64Add($603 | 0, $604 | 0, $489 | 0, $490 | 0) | 0;
 $639 = getTempRet0() | 0;
 $640 = _i64Subtract($638 | 0, $639 | 0, $517 | 0, $512 | 0) | 0;
 $641 = getTempRet0() | 0;
 $642 = _i64Add($640 | 0, $641 | 0, $558 | 0, $559 | 0) | 0;
 $643 = getTempRet0() | 0;
 $644 = _i64Add($642 | 0, $643 | 0, $636 | 0, $637 | 0) | 0;
 $645 = getTempRet0() | 0;
 $646 = $633 & 2097151;
 $647 = _bitshift64Ashr($644 | 0, $645 | 0, 21) | 0;
 $648 = getTempRet0() | 0;
 $649 = _i64Add($515 | 0, $516 | 0, $605 | 0, $606 | 0) | 0;
 $650 = getTempRet0() | 0;
 $651 = _i64Subtract($649 | 0, $650 | 0, $567 | 0, $562 | 0) | 0;
 $652 = getTempRet0() | 0;
 $653 = _i64Add($651 | 0, $652 | 0, $647 | 0, $648 | 0) | 0;
 $654 = getTempRet0() | 0;
 $655 = $644 & 2097151;
 $656 = _bitshift64Ashr($653 | 0, $654 | 0, 21) | 0;
 $657 = getTempRet0() | 0;
 $658 = _i64Add($565 | 0, $566 | 0, $656 | 0, $657 | 0) | 0;
 $659 = getTempRet0() | 0;
 $660 = $653 & 2097151;
 $661 = _bitshift64Ashr($658 | 0, $659 | 0, 21) | 0;
 $662 = getTempRet0() | 0;
 $663 = _i64Add($661 | 0, $662 | 0, $575 | 0, $576 | 0) | 0;
 $664 = getTempRet0() | 0;
 $665 = $658 & 2097151;
 $666 = _bitshift64Ashr($663 | 0, $664 | 0, 21) | 0;
 $667 = getTempRet0() | 0;
 $668 = _i64Add($572 | 0, $573 | 0, $666 | 0, $667 | 0) | 0;
 $669 = getTempRet0() | 0;
 $670 = $663 & 2097151;
 $671 = _bitshift64Ashr($668 | 0, $669 | 0, 21) | 0;
 $672 = getTempRet0() | 0;
 $673 = _i64Add($671 | 0, $672 | 0, $584 | 0, $585 | 0) | 0;
 $674 = getTempRet0() | 0;
 $675 = $668 & 2097151;
 $676 = _bitshift64Ashr($673 | 0, $674 | 0, 21) | 0;
 $677 = getTempRet0() | 0;
 $678 = _i64Add($581 | 0, $582 | 0, $676 | 0, $677 | 0) | 0;
 $679 = getTempRet0() | 0;
 $680 = $673 & 2097151;
 $681 = _bitshift64Ashr($678 | 0, $679 | 0, 21) | 0;
 $682 = getTempRet0() | 0;
 $683 = _i64Add($681 | 0, $682 | 0, $591 | 0, $592 | 0) | 0;
 $684 = getTempRet0() | 0;
 $685 = $678 & 2097151;
 $686 = _bitshift64Ashr($683 | 0, $684 | 0, 21) | 0;
 $687 = getTempRet0() | 0;
 $688 = $683 & 2097151;
 $689 = ___muldi3($686 | 0, $687 | 0, 666643, 0) | 0;
 $690 = getTempRet0() | 0;
 $691 = _i64Add($689 | 0, $690 | 0, $615 | 0, 0) | 0;
 $692 = getTempRet0() | 0;
 $693 = ___muldi3($686 | 0, $687 | 0, 470296, 0) | 0;
 $694 = getTempRet0() | 0;
 $695 = _i64Add($693 | 0, $694 | 0, $626 | 0, 0) | 0;
 $696 = getTempRet0() | 0;
 $697 = ___muldi3($686 | 0, $687 | 0, 654183, 0) | 0;
 $698 = getTempRet0() | 0;
 $699 = _i64Add($697 | 0, $698 | 0, $635 | 0, 0) | 0;
 $700 = getTempRet0() | 0;
 $701 = ___muldi3($686 | 0, $687 | 0, -997805, -1) | 0;
 $702 = getTempRet0() | 0;
 $703 = _i64Add($701 | 0, $702 | 0, $646 | 0, 0) | 0;
 $704 = getTempRet0() | 0;
 $705 = ___muldi3($686 | 0, $687 | 0, 136657, 0) | 0;
 $706 = getTempRet0() | 0;
 $707 = _i64Add($705 | 0, $706 | 0, $655 | 0, 0) | 0;
 $708 = getTempRet0() | 0;
 $709 = ___muldi3($686 | 0, $687 | 0, -683901, -1) | 0;
 $710 = getTempRet0() | 0;
 $711 = _i64Add($709 | 0, $710 | 0, $660 | 0, 0) | 0;
 $712 = getTempRet0() | 0;
 $713 = _bitshift64Ashr($691 | 0, $692 | 0, 21) | 0;
 $714 = getTempRet0() | 0;
 $715 = _i64Add($695 | 0, $696 | 0, $713 | 0, $714 | 0) | 0;
 $716 = getTempRet0() | 0;
 $717 = _bitshift64Ashr($715 | 0, $716 | 0, 21) | 0;
 $718 = getTempRet0() | 0;
 $719 = _i64Add($699 | 0, $700 | 0, $717 | 0, $718 | 0) | 0;
 $720 = getTempRet0() | 0;
 $721 = $715 & 2097151;
 $722 = _bitshift64Ashr($719 | 0, $720 | 0, 21) | 0;
 $723 = getTempRet0() | 0;
 $724 = _i64Add($703 | 0, $704 | 0, $722 | 0, $723 | 0) | 0;
 $725 = getTempRet0() | 0;
 $726 = $719 & 2097151;
 $727 = _bitshift64Ashr($724 | 0, $725 | 0, 21) | 0;
 $728 = getTempRet0() | 0;
 $729 = _i64Add($707 | 0, $708 | 0, $727 | 0, $728 | 0) | 0;
 $730 = getTempRet0() | 0;
 $731 = $724 & 2097151;
 $732 = _bitshift64Ashr($729 | 0, $730 | 0, 21) | 0;
 $733 = getTempRet0() | 0;
 $734 = _i64Add($711 | 0, $712 | 0, $732 | 0, $733 | 0) | 0;
 $735 = getTempRet0() | 0;
 $736 = $729 & 2097151;
 $737 = _bitshift64Ashr($734 | 0, $735 | 0, 21) | 0;
 $738 = getTempRet0() | 0;
 $739 = _i64Add($737 | 0, $738 | 0, $665 | 0, 0) | 0;
 $740 = getTempRet0() | 0;
 $741 = $734 & 2097151;
 $742 = _bitshift64Ashr($739 | 0, $740 | 0, 21) | 0;
 $743 = getTempRet0() | 0;
 $744 = _i64Add($742 | 0, $743 | 0, $670 | 0, 0) | 0;
 $745 = getTempRet0() | 0;
 $746 = $739 & 2097151;
 $747 = _bitshift64Ashr($744 | 0, $745 | 0, 21) | 0;
 $748 = getTempRet0() | 0;
 $749 = _i64Add($747 | 0, $748 | 0, $675 | 0, 0) | 0;
 $750 = getTempRet0() | 0;
 $751 = _bitshift64Ashr($749 | 0, $750 | 0, 21) | 0;
 $752 = getTempRet0() | 0;
 $753 = _i64Add($751 | 0, $752 | 0, $680 | 0, 0) | 0;
 $754 = getTempRet0() | 0;
 $755 = _bitshift64Ashr($753 | 0, $754 | 0, 21) | 0;
 $756 = getTempRet0() | 0;
 $757 = _i64Add($755 | 0, $756 | 0, $685 | 0, 0) | 0;
 $758 = getTempRet0() | 0;
 $759 = $753 & 2097151;
 $760 = _bitshift64Ashr($757 | 0, $758 | 0, 21) | 0;
 $761 = getTempRet0() | 0;
 $762 = _i64Add($760 | 0, $761 | 0, $688 | 0, 0) | 0;
 $763 = getTempRet0() | 0;
 $764 = $757 & 2097151;
 $765 = $691 & 255;
 HEAP8[$s >> 0] = $765;
 $766 = _bitshift64Lshr($691 | 0, $692 | 0, 8) | 0;
 $767 = getTempRet0() | 0;
 $768 = $766 & 255;
 HEAP8[$s$idx >> 0] = $768;
 $769 = _bitshift64Lshr($691 | 0, $692 | 0, 16) | 0;
 $770 = getTempRet0() | 0;
 $771 = $769 & 31;
 $772 = _bitshift64Shl($721 | 0, 0, 5) | 0;
 $773 = getTempRet0() | 0;
 $774 = $772 | $771;
 $775 = $774 & 255;
 HEAP8[$s$idx465 >> 0] = $775;
 $776 = _bitshift64Lshr($715 | 0, $716 | 0, 3) | 0;
 $777 = getTempRet0() | 0;
 $778 = $776 & 255;
 $arrayidx469 = $s + 3 | 0;
 HEAP8[$arrayidx469 >> 0] = $778;
 $779 = _bitshift64Lshr($715 | 0, $716 | 0, 11) | 0;
 $780 = getTempRet0() | 0;
 $781 = $779 & 255;
 $arrayidx472 = $s + 4 | 0;
 HEAP8[$arrayidx472 >> 0] = $781;
 $782 = _bitshift64Lshr($721 | 0, 0, 19) | 0;
 $783 = getTempRet0() | 0;
 $784 = _bitshift64Shl($726 | 0, 0, 2) | 0;
 $785 = getTempRet0() | 0;
 $786 = $784 | $782;
 $785 | $783;
 $787 = $786 & 255;
 HEAP8[$add$ptr3 >> 0] = $787;
 $788 = _bitshift64Lshr($719 | 0, $720 | 0, 6) | 0;
 $789 = getTempRet0() | 0;
 $790 = $788 & 255;
 HEAP8[$add$ptr3$idx >> 0] = $790;
 $791 = _bitshift64Lshr($726 | 0, 0, 14) | 0;
 $792 = getTempRet0() | 0;
 $793 = _bitshift64Shl($731 | 0, 0, 7) | 0;
 $794 = getTempRet0() | 0;
 $795 = $793 | $791;
 $794 | $792;
 $796 = $795 & 255;
 HEAP8[$add$ptr3$idx464 >> 0] = $796;
 $797 = _bitshift64Lshr($724 | 0, $725 | 0, 1) | 0;
 $798 = getTempRet0() | 0;
 $799 = $797 & 255;
 $arrayidx488 = $s + 8 | 0;
 HEAP8[$arrayidx488 >> 0] = $799;
 $800 = _bitshift64Lshr($724 | 0, $725 | 0, 9) | 0;
 $801 = getTempRet0() | 0;
 $802 = $800 & 255;
 $arrayidx491 = $s + 9 | 0;
 HEAP8[$arrayidx491 >> 0] = $802;
 $803 = _bitshift64Lshr($731 | 0, 0, 17) | 0;
 $804 = getTempRet0() | 0;
 $805 = _bitshift64Shl($736 | 0, 0, 4) | 0;
 $806 = getTempRet0() | 0;
 $807 = $805 | $803;
 $806 | $804;
 $808 = $807 & 255;
 HEAP8[$add$ptr11 >> 0] = $808;
 $809 = _bitshift64Lshr($729 | 0, $730 | 0, 4) | 0;
 $810 = getTempRet0() | 0;
 $811 = $809 & 255;
 $arrayidx499 = $s + 11 | 0;
 HEAP8[$arrayidx499 >> 0] = $811;
 $812 = _bitshift64Lshr($729 | 0, $730 | 0, 12) | 0;
 $813 = getTempRet0() | 0;
 $814 = $812 & 255;
 $arrayidx502 = $s + 12 | 0;
 HEAP8[$arrayidx502 >> 0] = $814;
 $815 = _bitshift64Lshr($736 | 0, 0, 20) | 0;
 $816 = getTempRet0() | 0;
 $817 = _bitshift64Shl($741 | 0, 0, 1) | 0;
 $818 = getTempRet0() | 0;
 $819 = $817 | $815;
 $818 | $816;
 $820 = $819 & 255;
 HEAP8[$add$ptr15 >> 0] = $820;
 $821 = _bitshift64Lshr($734 | 0, $735 | 0, 7) | 0;
 $822 = getTempRet0() | 0;
 $823 = $821 & 255;
 HEAP8[$add$ptr15$idx >> 0] = $823;
 $824 = _bitshift64Lshr($741 | 0, 0, 15) | 0;
 $825 = getTempRet0() | 0;
 $826 = _bitshift64Shl($746 | 0, 0, 6) | 0;
 $827 = getTempRet0() | 0;
 $828 = $826 | $824;
 $827 | $825;
 $829 = $828 & 255;
 HEAP8[$add$ptr15$idx463 >> 0] = $829;
 $830 = _bitshift64Lshr($739 | 0, $740 | 0, 2) | 0;
 $831 = getTempRet0() | 0;
 $832 = $830 & 255;
 $arrayidx518 = $s + 16 | 0;
 HEAP8[$arrayidx518 >> 0] = $832;
 $833 = _bitshift64Lshr($739 | 0, $740 | 0, 10) | 0;
 $834 = getTempRet0() | 0;
 $835 = $833 & 255;
 $arrayidx521 = $s + 17 | 0;
 HEAP8[$arrayidx521 >> 0] = $835;
 $836 = _bitshift64Lshr($746 | 0, 0, 18) | 0;
 $837 = getTempRet0() | 0;
 $838 = _bitshift64Shl($744 | 0, $745 | 0, 3) | 0;
 $839 = getTempRet0() | 0;
 $840 = $838 | $836;
 $839 | $837;
 $841 = $840 & 255;
 HEAP8[$add$ptr23 >> 0] = $841;
 $842 = _bitshift64Lshr($744 | 0, $745 | 0, 5) | 0;
 $843 = getTempRet0() | 0;
 $844 = $842 & 255;
 HEAP8[$add$ptr23$idx >> 0] = $844;
 $845 = _bitshift64Lshr($744 | 0, $745 | 0, 13) | 0;
 $846 = getTempRet0() | 0;
 $847 = $845 & 255;
 HEAP8[$add$ptr23$idx462 >> 0] = $847;
 $848 = $749 & 255;
 HEAP8[$add$ptr27 >> 0] = $848;
 $849 = _bitshift64Lshr($749 | 0, $750 | 0, 8) | 0;
 $850 = getTempRet0() | 0;
 $851 = $849 & 255;
 HEAP8[$add$ptr27$idx >> 0] = $851;
 $852 = _bitshift64Lshr($749 | 0, $750 | 0, 16) | 0;
 $853 = getTempRet0() | 0;
 $854 = $852 & 31;
 $855 = _bitshift64Shl($759 | 0, 0, 5) | 0;
 $856 = getTempRet0() | 0;
 $857 = $855 | $854;
 $858 = $857 & 255;
 HEAP8[$add$ptr27$idx461 >> 0] = $858;
 $859 = _bitshift64Lshr($753 | 0, $754 | 0, 3) | 0;
 $860 = getTempRet0() | 0;
 $861 = $859 & 255;
 $arrayidx546 = $s + 24 | 0;
 HEAP8[$arrayidx546 >> 0] = $861;
 $862 = _bitshift64Lshr($753 | 0, $754 | 0, 11) | 0;
 $863 = getTempRet0() | 0;
 $864 = $862 & 255;
 $arrayidx549 = $s + 25 | 0;
 HEAP8[$arrayidx549 >> 0] = $864;
 $865 = _bitshift64Lshr($759 | 0, 0, 19) | 0;
 $866 = getTempRet0() | 0;
 $867 = _bitshift64Shl($764 | 0, 0, 2) | 0;
 $868 = getTempRet0() | 0;
 $869 = $867 | $865;
 $868 | $866;
 $870 = $869 & 255;
 HEAP8[$add$ptr34 >> 0] = $870;
 $871 = _bitshift64Lshr($757 | 0, $758 | 0, 6) | 0;
 $872 = getTempRet0() | 0;
 $873 = $871 & 255;
 HEAP8[$add$ptr34$idx >> 0] = $873;
 $874 = _bitshift64Lshr($764 | 0, 0, 14) | 0;
 $875 = getTempRet0() | 0;
 $876 = _bitshift64Shl($762 | 0, $763 | 0, 7) | 0;
 $877 = getTempRet0() | 0;
 $878 = $876 | $874;
 $877 | $875;
 $879 = $878 & 255;
 HEAP8[$add$ptr34$idx460 >> 0] = $879;
 $880 = _bitshift64Lshr($762 | 0, $763 | 0, 1) | 0;
 $881 = getTempRet0() | 0;
 $882 = $880 & 255;
 $arrayidx565 = $s + 29 | 0;
 HEAP8[$arrayidx565 >> 0] = $882;
 $883 = _bitshift64Lshr($762 | 0, $763 | 0, 9) | 0;
 $884 = getTempRet0() | 0;
 $885 = $883 & 255;
 $arrayidx568 = $s + 30 | 0;
 HEAP8[$arrayidx568 >> 0] = $885;
 $886 = _bitshift64Ashr($762 | 0, $763 | 0, 17) | 0;
 $887 = getTempRet0() | 0;
 $888 = $886 & 255;
 HEAP8[$add$ptr42 >> 0] = $888;
 return;
}

function _RND512Q($x, $y, $r) {
 $x = $x | 0;
 $y = $y | 0;
 $r = $r | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add1003 = 0, $add1020 = 0, $add108 = 0, $add118 = 0, $add135 = 0, $add152 = 0, $add171 = 0, $add180 = 0, $add197 = 0, $add214 = 0, $add232 = 0, $add242 = 0;
 var $add259 = 0, $add276 = 0, $add295 = 0, $add304 = 0, $add321 = 0, $add338 = 0, $add356 = 0, $add366 = 0, $add383 = 0, $add400 = 0, $add419 = 0, $add428 = 0, $add445 = 0, $add462 = 0, $add480 = 0, $add490 = 0, $add507 = 0, $add524 = 0, $add543 = 0, $add552 = 0;
 var $add569 = 0, $add586 = 0, $add59 = 0, $add604 = 0, $add614 = 0, $add631 = 0, $add648 = 0, $add667 = 0, $add676 = 0, $add693 = 0, $add710 = 0, $add728 = 0, $add73 = 0, $add738 = 0, $add755 = 0, $add772 = 0, $add791 = 0, $add800 = 0, $add817 = 0, $add834 = 0;
 var $add852 = 0, $add862 = 0, $add879 = 0, $add896 = 0, $add90 = 0, $add915 = 0, $add924 = 0, $add941 = 0, $add958 = 0, $add976 = 0, $add986 = 0, $arrayidx10 = 0, $arrayidx1004 = 0, $arrayidx1013 = 0, $arrayidx1016 = 0, $arrayidx1021 = 0, $arrayidx103 = 0, $arrayidx1030 = 0, $arrayidx1031 = 0, $arrayidx109 = 0;
 var $arrayidx111 = 0, $arrayidx114 = 0, $arrayidx119 = 0, $arrayidx128 = 0, $arrayidx131 = 0, $arrayidx136 = 0, $arrayidx14 = 0, $arrayidx145 = 0, $arrayidx148 = 0, $arrayidx153 = 0, $arrayidx16 = 0, $arrayidx163 = 0, $arrayidx167 = 0, $arrayidx172 = 0, $arrayidx173 = 0, $arrayidx176 = 0, $arrayidx181 = 0, $arrayidx190 = 0, $arrayidx193 = 0, $arrayidx198 = 0;
 var $arrayidx2 = 0, $arrayidx20 = 0, $arrayidx207 = 0, $arrayidx210 = 0, $arrayidx215 = 0, $arrayidx22 = 0, $arrayidx227 = 0, $arrayidx233 = 0, $arrayidx235 = 0, $arrayidx238 = 0, $arrayidx243 = 0, $arrayidx252 = 0, $arrayidx255 = 0, $arrayidx26 = 0, $arrayidx260 = 0, $arrayidx269 = 0, $arrayidx272 = 0, $arrayidx277 = 0, $arrayidx28 = 0, $arrayidx286 = 0;
 var $arrayidx287 = 0, $arrayidx291 = 0, $arrayidx296 = 0, $arrayidx297 = 0, $arrayidx300 = 0, $arrayidx305 = 0, $arrayidx314 = 0, $arrayidx317 = 0, $arrayidx32 = 0, $arrayidx322 = 0, $arrayidx331 = 0, $arrayidx334 = 0, $arrayidx339 = 0, $arrayidx34 = 0, $arrayidx351 = 0, $arrayidx357 = 0, $arrayidx359 = 0, $arrayidx362 = 0, $arrayidx367 = 0, $arrayidx376 = 0;
 var $arrayidx379 = 0, $arrayidx38 = 0, $arrayidx384 = 0, $arrayidx393 = 0, $arrayidx396 = 0, $arrayidx4 = 0, $arrayidx40 = 0, $arrayidx401 = 0, $arrayidx410 = 0, $arrayidx411 = 0, $arrayidx415 = 0, $arrayidx420 = 0, $arrayidx421 = 0, $arrayidx424 = 0, $arrayidx429 = 0, $arrayidx438 = 0, $arrayidx44 = 0, $arrayidx441 = 0, $arrayidx446 = 0, $arrayidx455 = 0;
 var $arrayidx458 = 0, $arrayidx463 = 0, $arrayidx47 = 0, $arrayidx475 = 0, $arrayidx481 = 0, $arrayidx483 = 0, $arrayidx486 = 0, $arrayidx491 = 0, $arrayidx500 = 0, $arrayidx503 = 0, $arrayidx508 = 0, $arrayidx51 = 0, $arrayidx517 = 0, $arrayidx520 = 0, $arrayidx525 = 0, $arrayidx534 = 0, $arrayidx535 = 0, $arrayidx539 = 0, $arrayidx544 = 0, $arrayidx545 = 0;
 var $arrayidx548 = 0, $arrayidx55 = 0, $arrayidx553 = 0, $arrayidx562 = 0, $arrayidx565 = 0, $arrayidx570 = 0, $arrayidx579 = 0, $arrayidx582 = 0, $arrayidx587 = 0, $arrayidx599 = 0, $arrayidx60 = 0, $arrayidx605 = 0, $arrayidx607 = 0, $arrayidx610 = 0, $arrayidx615 = 0, $arrayidx624 = 0, $arrayidx627 = 0, $arrayidx632 = 0, $arrayidx641 = 0, $arrayidx644 = 0;
 var $arrayidx649 = 0, $arrayidx658 = 0, $arrayidx659 = 0, $arrayidx663 = 0, $arrayidx668 = 0, $arrayidx669 = 0, $arrayidx672 = 0, $arrayidx677 = 0, $arrayidx686 = 0, $arrayidx689 = 0, $arrayidx69 = 0, $arrayidx694 = 0, $arrayidx703 = 0, $arrayidx706 = 0, $arrayidx711 = 0, $arrayidx723 = 0, $arrayidx729 = 0, $arrayidx731 = 0, $arrayidx734 = 0, $arrayidx739 = 0;
 var $arrayidx74 = 0, $arrayidx748 = 0, $arrayidx751 = 0, $arrayidx756 = 0, $arrayidx765 = 0, $arrayidx768 = 0, $arrayidx773 = 0, $arrayidx782 = 0, $arrayidx783 = 0, $arrayidx787 = 0, $arrayidx792 = 0, $arrayidx793 = 0, $arrayidx796 = 0, $arrayidx8 = 0, $arrayidx801 = 0, $arrayidx810 = 0, $arrayidx813 = 0, $arrayidx818 = 0, $arrayidx827 = 0, $arrayidx830 = 0;
 var $arrayidx835 = 0, $arrayidx847 = 0, $arrayidx853 = 0, $arrayidx855 = 0, $arrayidx858 = 0, $arrayidx86 = 0, $arrayidx863 = 0, $arrayidx872 = 0, $arrayidx875 = 0, $arrayidx880 = 0, $arrayidx889 = 0, $arrayidx892 = 0, $arrayidx897 = 0, $arrayidx906 = 0, $arrayidx907 = 0, $arrayidx91 = 0, $arrayidx911 = 0, $arrayidx916 = 0, $arrayidx917 = 0, $arrayidx920 = 0;
 var $arrayidx925 = 0, $arrayidx934 = 0, $arrayidx937 = 0, $arrayidx942 = 0, $arrayidx951 = 0, $arrayidx954 = 0, $arrayidx959 = 0, $arrayidx971 = 0, $arrayidx977 = 0, $arrayidx979 = 0, $arrayidx982 = 0, $arrayidx987 = 0, $arrayidx996 = 0, $arrayidx999 = 0, $conv = 0, $conv101 = 0, $conv1014 = 0, $conv112 = 0, $conv129 = 0, $conv146 = 0;
 var $conv165 = 0, $conv174 = 0, $conv191 = 0, $conv208 = 0, $conv225 = 0, $conv236 = 0, $conv253 = 0, $conv270 = 0, $conv289 = 0, $conv298 = 0, $conv315 = 0, $conv332 = 0, $conv349 = 0, $conv360 = 0, $conv377 = 0, $conv394 = 0, $conv413 = 0, $conv422 = 0, $conv439 = 0, $conv456 = 0;
 var $conv473 = 0, $conv484 = 0, $conv501 = 0, $conv518 = 0, $conv537 = 0, $conv546 = 0, $conv563 = 0, $conv580 = 0, $conv597 = 0, $conv608 = 0, $conv625 = 0, $conv642 = 0, $conv661 = 0, $conv670 = 0, $conv687 = 0, $conv704 = 0, $conv721 = 0, $conv732 = 0, $conv749 = 0, $conv766 = 0;
 var $conv785 = 0, $conv794 = 0, $conv811 = 0, $conv828 = 0, $conv845 = 0, $conv856 = 0, $conv873 = 0, $conv890 = 0, $conv909 = 0, $conv918 = 0, $conv935 = 0, $conv952 = 0, $conv969 = 0, $conv980 = 0, $conv997 = 0, $mul = 0, $mul1015 = 0, $mul102 = 0, $mul113 = 0, $mul130 = 0;
 var $mul147 = 0, $mul166 = 0, $mul175 = 0, $mul192 = 0, $mul209 = 0, $mul226 = 0, $mul237 = 0, $mul254 = 0, $mul271 = 0, $mul290 = 0, $mul299 = 0, $mul316 = 0, $mul333 = 0, $mul350 = 0, $mul361 = 0, $mul378 = 0, $mul395 = 0, $mul414 = 0, $mul423 = 0, $mul440 = 0;
 var $mul457 = 0, $mul474 = 0, $mul485 = 0, $mul502 = 0, $mul519 = 0, $mul538 = 0, $mul54 = 0, $mul547 = 0, $mul564 = 0, $mul581 = 0, $mul598 = 0, $mul609 = 0, $mul626 = 0, $mul643 = 0, $mul662 = 0, $mul671 = 0, $mul68 = 0, $mul688 = 0, $mul705 = 0, $mul722 = 0;
 var $mul733 = 0, $mul750 = 0, $mul767 = 0, $mul786 = 0, $mul795 = 0, $mul812 = 0, $mul829 = 0, $mul846 = 0, $mul85 = 0, $mul857 = 0, $mul874 = 0, $mul891 = 0, $mul910 = 0, $mul919 = 0, $mul936 = 0, $mul953 = 0, $mul970 = 0, $mul981 = 0, $mul998 = 0, $neg = 0;
 var $neg11 = 0, $neg17 = 0, $neg23 = 0, $neg29 = 0, $neg35 = 0, $neg41 = 0, $neg5 = 0, $or = 0, $or1007 = 0, $or1010 = 0, $or1024 = 0, $or1027 = 0, $or122 = 0, $or125 = 0, $or139 = 0, $or142 = 0, $or156 = 0, $or159 = 0, $or184 = 0, $or187 = 0;
 var $or201 = 0, $or204 = 0, $or218 = 0, $or221 = 0, $or246 = 0, $or249 = 0, $or263 = 0, $or266 = 0, $or280 = 0, $or283 = 0, $or308 = 0, $or311 = 0, $or325 = 0, $or328 = 0, $or342 = 0, $or345 = 0, $or370 = 0, $or373 = 0, $or387 = 0, $or390 = 0;
 var $or404 = 0, $or407 = 0, $or432 = 0, $or435 = 0, $or449 = 0, $or452 = 0, $or466 = 0, $or469 = 0, $or494 = 0, $or497 = 0, $or511 = 0, $or514 = 0, $or528 = 0, $or531 = 0, $or556 = 0, $or559 = 0, $or573 = 0, $or576 = 0, $or590 = 0, $or593 = 0;
 var $or618 = 0, $or621 = 0, $or63 = 0, $or635 = 0, $or638 = 0, $or652 = 0, $or655 = 0, $or680 = 0, $or683 = 0, $or697 = 0, $or700 = 0, $or714 = 0, $or717 = 0, $or742 = 0, $or745 = 0, $or759 = 0, $or762 = 0, $or77 = 0, $or776 = 0, $or779 = 0;
 var $or80 = 0, $or804 = 0, $or807 = 0, $or821 = 0, $or824 = 0, $or838 = 0, $or841 = 0, $or866 = 0, $or869 = 0, $or883 = 0, $or886 = 0, $or900 = 0, $or903 = 0, $or928 = 0, $or931 = 0, $or94 = 0, $or945 = 0, $or948 = 0, $or962 = 0, $or965 = 0;
 var $or97 = 0, $or990 = 0, $or993 = 0, $shl = 0, $shl1005 = 0, $shl1008 = 0, $shl1022 = 0, $shl1025 = 0, $shl120 = 0, $shl123 = 0, $shl137 = 0, $shl140 = 0, $shl154 = 0, $shl157 = 0, $shl182 = 0, $shl185 = 0, $shl199 = 0, $shl202 = 0, $shl216 = 0, $shl219 = 0;
 var $shl244 = 0, $shl247 = 0, $shl261 = 0, $shl264 = 0, $shl278 = 0, $shl281 = 0, $shl306 = 0, $shl309 = 0, $shl323 = 0, $shl326 = 0, $shl340 = 0, $shl343 = 0, $shl368 = 0, $shl371 = 0, $shl385 = 0, $shl388 = 0, $shl402 = 0, $shl405 = 0, $shl430 = 0, $shl433 = 0;
 var $shl447 = 0, $shl450 = 0, $shl464 = 0, $shl467 = 0, $shl492 = 0, $shl495 = 0, $shl509 = 0, $shl512 = 0, $shl526 = 0, $shl529 = 0, $shl554 = 0, $shl557 = 0, $shl571 = 0, $shl574 = 0, $shl588 = 0, $shl591 = 0, $shl61 = 0, $shl616 = 0, $shl619 = 0, $shl633 = 0;
 var $shl636 = 0, $shl650 = 0, $shl653 = 0, $shl678 = 0, $shl681 = 0, $shl695 = 0, $shl698 = 0, $shl712 = 0, $shl715 = 0, $shl740 = 0, $shl743 = 0, $shl75 = 0, $shl757 = 0, $shl760 = 0, $shl774 = 0, $shl777 = 0, $shl78 = 0, $shl802 = 0, $shl805 = 0, $shl819 = 0;
 var $shl822 = 0, $shl836 = 0, $shl839 = 0, $shl864 = 0, $shl867 = 0, $shl881 = 0, $shl884 = 0, $shl898 = 0, $shl901 = 0, $shl92 = 0, $shl926 = 0, $shl929 = 0, $shl943 = 0, $shl946 = 0, $shl95 = 0, $shl960 = 0, $shl963 = 0, $shl988 = 0, $shl991 = 0, $shr = 0;
 var $shr1006 = 0, $shr1009 = 0, $shr1023 = 0, $shr1026 = 0, $shr121 = 0, $shr124 = 0, $shr138 = 0, $shr141 = 0, $shr155 = 0, $shr158 = 0, $shr183 = 0, $shr186 = 0, $shr200 = 0, $shr203 = 0, $shr217 = 0, $shr220 = 0, $shr245 = 0, $shr248 = 0, $shr262 = 0, $shr265 = 0;
 var $shr279 = 0, $shr282 = 0, $shr307 = 0, $shr310 = 0, $shr324 = 0, $shr327 = 0, $shr341 = 0, $shr344 = 0, $shr369 = 0, $shr372 = 0, $shr386 = 0, $shr389 = 0, $shr403 = 0, $shr406 = 0, $shr431 = 0, $shr434 = 0, $shr448 = 0, $shr451 = 0, $shr465 = 0, $shr468 = 0;
 var $shr493 = 0, $shr496 = 0, $shr510 = 0, $shr513 = 0, $shr527 = 0, $shr530 = 0, $shr555 = 0, $shr558 = 0, $shr572 = 0, $shr575 = 0, $shr589 = 0, $shr592 = 0, $shr617 = 0, $shr62 = 0, $shr620 = 0, $shr634 = 0, $shr637 = 0, $shr651 = 0, $shr654 = 0, $shr679 = 0;
 var $shr682 = 0, $shr696 = 0, $shr699 = 0, $shr713 = 0, $shr716 = 0, $shr741 = 0, $shr744 = 0, $shr758 = 0, $shr76 = 0, $shr761 = 0, $shr775 = 0, $shr778 = 0, $shr79 = 0, $shr803 = 0, $shr806 = 0, $shr820 = 0, $shr823 = 0, $shr837 = 0, $shr840 = 0, $shr865 = 0;
 var $shr868 = 0, $shr882 = 0, $shr885 = 0, $shr899 = 0, $shr902 = 0, $shr927 = 0, $shr93 = 0, $shr930 = 0, $shr944 = 0, $shr947 = 0, $shr96 = 0, $shr961 = 0, $shr964 = 0, $shr989 = 0, $shr992 = 0, $xor = 0, $xor1011 = 0, $xor1012 = 0, $xor1028 = 0, $xor1029 = 0;
 var $xor104 = 0, $xor110 = 0, $xor126 = 0, $xor127 = 0, $xor13 = 0, $xor143 = 0, $xor144 = 0, $xor15 = 0, $xor160 = 0, $xor161 = 0, $xor188 = 0, $xor189 = 0, $xor19 = 0, $xor205 = 0, $xor206 = 0, $xor21 = 0, $xor222 = 0, $xor223 = 0, $xor228 = 0, $xor234 = 0;
 var $xor25 = 0, $xor250 = 0, $xor251 = 0, $xor267 = 0, $xor268 = 0, $xor27 = 0, $xor284 = 0, $xor285 = 0, $xor3 = 0, $xor31 = 0, $xor312 = 0, $xor313 = 0, $xor329 = 0, $xor33 = 0, $xor330 = 0, $xor346 = 0, $xor347 = 0, $xor352 = 0, $xor358 = 0, $xor37 = 0;
 var $xor374 = 0, $xor375 = 0, $xor39 = 0, $xor391 = 0, $xor392 = 0, $xor408 = 0, $xor409 = 0, $xor43 = 0, $xor436 = 0, $xor437 = 0, $xor45 = 0, $xor453 = 0, $xor454 = 0, $xor470 = 0, $xor471 = 0, $xor476 = 0, $xor482 = 0, $xor498 = 0, $xor499 = 0, $xor515 = 0;
 var $xor516 = 0, $xor532 = 0, $xor533 = 0, $xor560 = 0, $xor561 = 0, $xor577 = 0, $xor578 = 0, $xor594 = 0, $xor595 = 0, $xor600 = 0, $xor606 = 0, $xor622 = 0, $xor623 = 0, $xor639 = 0, $xor64 = 0, $xor640 = 0, $xor65 = 0, $xor656 = 0, $xor657 = 0, $xor684 = 0;
 var $xor685 = 0, $xor7 = 0, $xor701 = 0, $xor702 = 0, $xor718 = 0, $xor719 = 0, $xor724 = 0, $xor730 = 0, $xor746 = 0, $xor747 = 0, $xor763 = 0, $xor764 = 0, $xor780 = 0, $xor781 = 0, $xor808 = 0, $xor809 = 0, $xor81 = 0, $xor82 = 0, $xor825 = 0, $xor826 = 0;
 var $xor842 = 0, $xor843 = 0, $xor848 = 0, $xor854 = 0, $xor870 = 0, $xor871 = 0, $xor887 = 0, $xor888 = 0, $xor9 = 0, $xor904 = 0, $xor905 = 0, $xor932 = 0, $xor933 = 0, $xor949 = 0, $xor950 = 0, $xor966 = 0, $xor967 = 0, $xor972 = 0, $xor978 = 0, $xor98 = 0;
 var $xor99 = 0, $xor994 = 0, $xor995 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$x >> 2] | 0;
 $neg = $0 ^ -1;
 HEAP32[$x >> 2] = $neg;
 $xor = $r ^ -1;
 $arrayidx2 = $x + 4 | 0;
 $1 = HEAP32[$arrayidx2 >> 2] | 0;
 $xor3 = $1 ^ $xor;
 HEAP32[$arrayidx2 >> 2] = $xor3;
 $arrayidx4 = $x + 8 | 0;
 $2 = HEAP32[$arrayidx4 >> 2] | 0;
 $neg5 = $2 ^ -1;
 HEAP32[$arrayidx4 >> 2] = $neg5;
 $xor7 = $r ^ -268435457;
 $arrayidx8 = $x + 12 | 0;
 $3 = HEAP32[$arrayidx8 >> 2] | 0;
 $xor9 = $xor7 ^ $3;
 HEAP32[$arrayidx8 >> 2] = $xor9;
 $arrayidx10 = $x + 16 | 0;
 $4 = HEAP32[$arrayidx10 >> 2] | 0;
 $neg11 = $4 ^ -1;
 HEAP32[$arrayidx10 >> 2] = $neg11;
 $xor13 = $r ^ -536870913;
 $arrayidx14 = $x + 20 | 0;
 $5 = HEAP32[$arrayidx14 >> 2] | 0;
 $xor15 = $xor13 ^ $5;
 HEAP32[$arrayidx14 >> 2] = $xor15;
 $arrayidx16 = $x + 24 | 0;
 $6 = HEAP32[$arrayidx16 >> 2] | 0;
 $neg17 = $6 ^ -1;
 HEAP32[$arrayidx16 >> 2] = $neg17;
 $xor19 = $r ^ -805306369;
 $arrayidx20 = $x + 28 | 0;
 $7 = HEAP32[$arrayidx20 >> 2] | 0;
 $xor21 = $xor19 ^ $7;
 HEAP32[$arrayidx20 >> 2] = $xor21;
 $arrayidx22 = $x + 32 | 0;
 $8 = HEAP32[$arrayidx22 >> 2] | 0;
 $neg23 = $8 ^ -1;
 HEAP32[$arrayidx22 >> 2] = $neg23;
 $xor25 = $r ^ -1073741825;
 $arrayidx26 = $x + 36 | 0;
 $9 = HEAP32[$arrayidx26 >> 2] | 0;
 $xor27 = $xor25 ^ $9;
 HEAP32[$arrayidx26 >> 2] = $xor27;
 $arrayidx28 = $x + 40 | 0;
 $10 = HEAP32[$arrayidx28 >> 2] | 0;
 $neg29 = $10 ^ -1;
 HEAP32[$arrayidx28 >> 2] = $neg29;
 $xor31 = $r ^ -1342177281;
 $arrayidx32 = $x + 44 | 0;
 $11 = HEAP32[$arrayidx32 >> 2] | 0;
 $xor33 = $xor31 ^ $11;
 HEAP32[$arrayidx32 >> 2] = $xor33;
 $arrayidx34 = $x + 48 | 0;
 $12 = HEAP32[$arrayidx34 >> 2] | 0;
 $neg35 = $12 ^ -1;
 HEAP32[$arrayidx34 >> 2] = $neg35;
 $xor37 = $r ^ -1610612737;
 $arrayidx38 = $x + 52 | 0;
 $13 = HEAP32[$arrayidx38 >> 2] | 0;
 $xor39 = $xor37 ^ $13;
 HEAP32[$arrayidx38 >> 2] = $xor39;
 $arrayidx40 = $x + 56 | 0;
 $14 = HEAP32[$arrayidx40 >> 2] | 0;
 $neg41 = $14 ^ -1;
 HEAP32[$arrayidx40 >> 2] = $neg41;
 $xor43 = $r ^ -1879048193;
 $arrayidx44 = $x + 60 | 0;
 $15 = HEAP32[$arrayidx44 >> 2] | 0;
 $xor45 = $xor43 ^ $15;
 HEAP32[$arrayidx44 >> 2] = $xor45;
 $conv = $neg5 << 1;
 $mul = $conv & 510;
 $arrayidx47 = 39376 + ($mul << 2) | 0;
 $16 = HEAP32[$arrayidx47 >> 2] | 0;
 $add = $mul | 1;
 $arrayidx51 = 39376 + ($add << 2) | 0;
 $17 = HEAP32[$arrayidx51 >> 2] | 0;
 $18 = $neg17 >>> 7;
 $mul54 = $18 & 510;
 $arrayidx55 = 39376 + ($mul54 << 2) | 0;
 $19 = HEAP32[$arrayidx55 >> 2] | 0;
 $add59 = $mul54 | 1;
 $arrayidx60 = 39376 + ($add59 << 2) | 0;
 $20 = HEAP32[$arrayidx60 >> 2] | 0;
 $shl = $19 << 8;
 $shr = $20 >>> 24;
 $or = $shr | $shl;
 $shl61 = $20 << 8;
 $shr62 = $19 >>> 24;
 $or63 = $shl61 | $shr62;
 $xor64 = $or ^ $16;
 $xor65 = $or63 ^ $17;
 $21 = $neg29 >>> 15;
 $mul68 = $21 & 510;
 $arrayidx69 = 39376 + ($mul68 << 2) | 0;
 $22 = HEAP32[$arrayidx69 >> 2] | 0;
 $add73 = $mul68 | 1;
 $arrayidx74 = 39376 + ($add73 << 2) | 0;
 $23 = HEAP32[$arrayidx74 >> 2] | 0;
 $shl75 = $22 << 16;
 $shr76 = $23 >>> 16;
 $or77 = $shr76 | $shl75;
 $shl78 = $23 << 16;
 $shr79 = $22 >>> 16;
 $or80 = $shl78 | $shr79;
 $xor81 = $xor64 ^ $or77;
 $xor82 = $xor65 ^ $or80;
 $24 = $neg41 >>> 24;
 $mul85 = $24 << 1;
 $arrayidx86 = 39376 + ($mul85 << 2) | 0;
 $25 = HEAP32[$arrayidx86 >> 2] | 0;
 $add90 = $mul85 | 1;
 $arrayidx91 = 39376 + ($add90 << 2) | 0;
 $26 = HEAP32[$arrayidx91 >> 2] | 0;
 $shl92 = $25 << 24;
 $shr93 = $26 >>> 8;
 $or94 = $shr93 | $shl92;
 $shl95 = $26 << 24;
 $shr96 = $25 >>> 8;
 $or97 = $shl95 | $shr96;
 $xor98 = $xor81 ^ $or94;
 $xor99 = $xor82 ^ $or97;
 $27 = HEAP8[$arrayidx2 >> 0] | 0;
 $conv101 = $27 & 255;
 $mul102 = $conv101 << 1;
 $arrayidx103 = 39376 + ($mul102 << 2) | 0;
 $28 = HEAP32[$arrayidx103 >> 2] | 0;
 $xor104 = $xor99 ^ $28;
 $add108 = $mul102 | 1;
 $arrayidx109 = 39376 + ($add108 << 2) | 0;
 $29 = HEAP32[$arrayidx109 >> 2] | 0;
 $xor110 = $xor98 ^ $29;
 $arrayidx111 = $x + 21 | 0;
 $30 = HEAP8[$arrayidx111 >> 0] | 0;
 $conv112 = $30 & 255;
 $mul113 = $conv112 << 1;
 $arrayidx114 = 39376 + ($mul113 << 2) | 0;
 $31 = HEAP32[$arrayidx114 >> 2] | 0;
 $add118 = $mul113 | 1;
 $arrayidx119 = 39376 + ($add118 << 2) | 0;
 $32 = HEAP32[$arrayidx119 >> 2] | 0;
 $shl120 = $31 << 8;
 $shr121 = $32 >>> 24;
 $or122 = $shr121 | $shl120;
 $shl123 = $32 << 8;
 $shr124 = $31 >>> 24;
 $or125 = $shl123 | $shr124;
 $xor126 = $xor104 ^ $or122;
 $xor127 = $xor110 ^ $or125;
 $arrayidx128 = $x + 38 | 0;
 $33 = HEAP8[$arrayidx128 >> 0] | 0;
 $conv129 = $33 & 255;
 $mul130 = $conv129 << 1;
 $arrayidx131 = 39376 + ($mul130 << 2) | 0;
 $34 = HEAP32[$arrayidx131 >> 2] | 0;
 $add135 = $mul130 | 1;
 $arrayidx136 = 39376 + ($add135 << 2) | 0;
 $35 = HEAP32[$arrayidx136 >> 2] | 0;
 $shl137 = $34 << 16;
 $shr138 = $35 >>> 16;
 $or139 = $shr138 | $shl137;
 $shl140 = $35 << 16;
 $shr141 = $34 >>> 16;
 $or142 = $shl140 | $shr141;
 $xor143 = $xor126 ^ $or139;
 $xor144 = $xor127 ^ $or142;
 $arrayidx145 = $x + 55 | 0;
 $36 = HEAP8[$arrayidx145 >> 0] | 0;
 $conv146 = $36 & 255;
 $mul147 = $conv146 << 1;
 $arrayidx148 = 39376 + ($mul147 << 2) | 0;
 $37 = HEAP32[$arrayidx148 >> 2] | 0;
 $add152 = $mul147 | 1;
 $arrayidx153 = 39376 + ($add152 << 2) | 0;
 $38 = HEAP32[$arrayidx153 >> 2] | 0;
 $shl154 = $37 << 24;
 $shr155 = $38 >>> 8;
 $or156 = $shr155 | $shl154;
 $shl157 = $38 << 24;
 $shr158 = $37 >>> 8;
 $or159 = $shl157 | $shr158;
 $xor160 = $xor143 ^ $or156;
 $xor161 = $xor144 ^ $or159;
 HEAP32[$y >> 2] = $xor161;
 $arrayidx163 = $y + 4 | 0;
 HEAP32[$arrayidx163 >> 2] = $xor160;
 $39 = HEAP8[$arrayidx10 >> 0] | 0;
 $conv165 = $39 & 255;
 $mul166 = $conv165 << 1;
 $arrayidx167 = 39376 + ($mul166 << 2) | 0;
 $40 = HEAP32[$arrayidx167 >> 2] | 0;
 $add171 = $mul166 | 1;
 $arrayidx172 = 39376 + ($add171 << 2) | 0;
 $41 = HEAP32[$arrayidx172 >> 2] | 0;
 $arrayidx173 = $x + 33 | 0;
 $42 = HEAP8[$arrayidx173 >> 0] | 0;
 $conv174 = $42 & 255;
 $mul175 = $conv174 << 1;
 $arrayidx176 = 39376 + ($mul175 << 2) | 0;
 $43 = HEAP32[$arrayidx176 >> 2] | 0;
 $add180 = $mul175 | 1;
 $arrayidx181 = 39376 + ($add180 << 2) | 0;
 $44 = HEAP32[$arrayidx181 >> 2] | 0;
 $shl182 = $43 << 8;
 $shr183 = $44 >>> 24;
 $or184 = $shr183 | $shl182;
 $shl185 = $44 << 8;
 $shr186 = $43 >>> 24;
 $or187 = $shl185 | $shr186;
 $xor188 = $or184 ^ $40;
 $xor189 = $or187 ^ $41;
 $arrayidx190 = $x + 50 | 0;
 $45 = HEAP8[$arrayidx190 >> 0] | 0;
 $conv191 = $45 & 255;
 $mul192 = $conv191 << 1;
 $arrayidx193 = 39376 + ($mul192 << 2) | 0;
 $46 = HEAP32[$arrayidx193 >> 2] | 0;
 $add197 = $mul192 | 1;
 $arrayidx198 = 39376 + ($add197 << 2) | 0;
 $47 = HEAP32[$arrayidx198 >> 2] | 0;
 $shl199 = $46 << 16;
 $shr200 = $47 >>> 16;
 $or201 = $shr200 | $shl199;
 $shl202 = $47 << 16;
 $shr203 = $46 >>> 16;
 $or204 = $shl202 | $shr203;
 $xor205 = $xor188 ^ $or201;
 $xor206 = $xor189 ^ $or204;
 $arrayidx207 = $x + 3 | 0;
 $48 = HEAP8[$arrayidx207 >> 0] | 0;
 $conv208 = $48 & 255;
 $mul209 = $conv208 << 1;
 $arrayidx210 = 39376 + ($mul209 << 2) | 0;
 $49 = HEAP32[$arrayidx210 >> 2] | 0;
 $add214 = $mul209 | 1;
 $arrayidx215 = 39376 + ($add214 << 2) | 0;
 $50 = HEAP32[$arrayidx215 >> 2] | 0;
 $shl216 = $49 << 24;
 $shr217 = $50 >>> 8;
 $or218 = $shr217 | $shl216;
 $shl219 = $50 << 24;
 $shr220 = $49 >>> 8;
 $or221 = $shl219 | $shr220;
 $xor222 = $xor205 ^ $or218;
 $xor223 = $xor206 ^ $or221;
 $51 = HEAP8[$arrayidx8 >> 0] | 0;
 $conv225 = $51 & 255;
 $mul226 = $conv225 << 1;
 $arrayidx227 = 39376 + ($mul226 << 2) | 0;
 $52 = HEAP32[$arrayidx227 >> 2] | 0;
 $xor228 = $xor223 ^ $52;
 $add232 = $mul226 | 1;
 $arrayidx233 = 39376 + ($add232 << 2) | 0;
 $53 = HEAP32[$arrayidx233 >> 2] | 0;
 $xor234 = $xor222 ^ $53;
 $arrayidx235 = $x + 29 | 0;
 $54 = HEAP8[$arrayidx235 >> 0] | 0;
 $conv236 = $54 & 255;
 $mul237 = $conv236 << 1;
 $arrayidx238 = 39376 + ($mul237 << 2) | 0;
 $55 = HEAP32[$arrayidx238 >> 2] | 0;
 $add242 = $mul237 | 1;
 $arrayidx243 = 39376 + ($add242 << 2) | 0;
 $56 = HEAP32[$arrayidx243 >> 2] | 0;
 $shl244 = $55 << 8;
 $shr245 = $56 >>> 24;
 $or246 = $shr245 | $shl244;
 $shl247 = $56 << 8;
 $shr248 = $55 >>> 24;
 $or249 = $shl247 | $shr248;
 $xor250 = $xor228 ^ $or246;
 $xor251 = $xor234 ^ $or249;
 $arrayidx252 = $x + 46 | 0;
 $57 = HEAP8[$arrayidx252 >> 0] | 0;
 $conv253 = $57 & 255;
 $mul254 = $conv253 << 1;
 $arrayidx255 = 39376 + ($mul254 << 2) | 0;
 $58 = HEAP32[$arrayidx255 >> 2] | 0;
 $add259 = $mul254 | 1;
 $arrayidx260 = 39376 + ($add259 << 2) | 0;
 $59 = HEAP32[$arrayidx260 >> 2] | 0;
 $shl261 = $58 << 16;
 $shr262 = $59 >>> 16;
 $or263 = $shr262 | $shl261;
 $shl264 = $59 << 16;
 $shr265 = $58 >>> 16;
 $or266 = $shl264 | $shr265;
 $xor267 = $xor250 ^ $or263;
 $xor268 = $xor251 ^ $or266;
 $arrayidx269 = $x + 63 | 0;
 $60 = HEAP8[$arrayidx269 >> 0] | 0;
 $conv270 = $60 & 255;
 $mul271 = $conv270 << 1;
 $arrayidx272 = 39376 + ($mul271 << 2) | 0;
 $61 = HEAP32[$arrayidx272 >> 2] | 0;
 $add276 = $mul271 | 1;
 $arrayidx277 = 39376 + ($add276 << 2) | 0;
 $62 = HEAP32[$arrayidx277 >> 2] | 0;
 $shl278 = $61 << 24;
 $shr279 = $62 >>> 8;
 $or280 = $shr279 | $shl278;
 $shl281 = $62 << 24;
 $shr282 = $61 >>> 8;
 $or283 = $shl281 | $shr282;
 $xor284 = $xor267 ^ $or280;
 $xor285 = $xor268 ^ $or283;
 $arrayidx286 = $y + 8 | 0;
 HEAP32[$arrayidx286 >> 2] = $xor285;
 $arrayidx287 = $y + 12 | 0;
 HEAP32[$arrayidx287 >> 2] = $xor284;
 $63 = HEAP8[$arrayidx16 >> 0] | 0;
 $conv289 = $63 & 255;
 $mul290 = $conv289 << 1;
 $arrayidx291 = 39376 + ($mul290 << 2) | 0;
 $64 = HEAP32[$arrayidx291 >> 2] | 0;
 $add295 = $mul290 | 1;
 $arrayidx296 = 39376 + ($add295 << 2) | 0;
 $65 = HEAP32[$arrayidx296 >> 2] | 0;
 $arrayidx297 = $x + 41 | 0;
 $66 = HEAP8[$arrayidx297 >> 0] | 0;
 $conv298 = $66 & 255;
 $mul299 = $conv298 << 1;
 $arrayidx300 = 39376 + ($mul299 << 2) | 0;
 $67 = HEAP32[$arrayidx300 >> 2] | 0;
 $add304 = $mul299 | 1;
 $arrayidx305 = 39376 + ($add304 << 2) | 0;
 $68 = HEAP32[$arrayidx305 >> 2] | 0;
 $shl306 = $67 << 8;
 $shr307 = $68 >>> 24;
 $or308 = $shr307 | $shl306;
 $shl309 = $68 << 8;
 $shr310 = $67 >>> 24;
 $or311 = $shl309 | $shr310;
 $xor312 = $or308 ^ $64;
 $xor313 = $or311 ^ $65;
 $arrayidx314 = $x + 58 | 0;
 $69 = HEAP8[$arrayidx314 >> 0] | 0;
 $conv315 = $69 & 255;
 $mul316 = $conv315 << 1;
 $arrayidx317 = 39376 + ($mul316 << 2) | 0;
 $70 = HEAP32[$arrayidx317 >> 2] | 0;
 $add321 = $mul316 | 1;
 $arrayidx322 = 39376 + ($add321 << 2) | 0;
 $71 = HEAP32[$arrayidx322 >> 2] | 0;
 $shl323 = $70 << 16;
 $shr324 = $71 >>> 16;
 $or325 = $shr324 | $shl323;
 $shl326 = $71 << 16;
 $shr327 = $70 >>> 16;
 $or328 = $shl326 | $shr327;
 $xor329 = $xor312 ^ $or325;
 $xor330 = $xor313 ^ $or328;
 $arrayidx331 = $x + 11 | 0;
 $72 = HEAP8[$arrayidx331 >> 0] | 0;
 $conv332 = $72 & 255;
 $mul333 = $conv332 << 1;
 $arrayidx334 = 39376 + ($mul333 << 2) | 0;
 $73 = HEAP32[$arrayidx334 >> 2] | 0;
 $add338 = $mul333 | 1;
 $arrayidx339 = 39376 + ($add338 << 2) | 0;
 $74 = HEAP32[$arrayidx339 >> 2] | 0;
 $shl340 = $73 << 24;
 $shr341 = $74 >>> 8;
 $or342 = $shr341 | $shl340;
 $shl343 = $74 << 24;
 $shr344 = $73 >>> 8;
 $or345 = $shl343 | $shr344;
 $xor346 = $xor329 ^ $or342;
 $xor347 = $xor330 ^ $or345;
 $75 = HEAP8[$arrayidx14 >> 0] | 0;
 $conv349 = $75 & 255;
 $mul350 = $conv349 << 1;
 $arrayidx351 = 39376 + ($mul350 << 2) | 0;
 $76 = HEAP32[$arrayidx351 >> 2] | 0;
 $xor352 = $xor347 ^ $76;
 $add356 = $mul350 | 1;
 $arrayidx357 = 39376 + ($add356 << 2) | 0;
 $77 = HEAP32[$arrayidx357 >> 2] | 0;
 $xor358 = $xor346 ^ $77;
 $arrayidx359 = $x + 37 | 0;
 $78 = HEAP8[$arrayidx359 >> 0] | 0;
 $conv360 = $78 & 255;
 $mul361 = $conv360 << 1;
 $arrayidx362 = 39376 + ($mul361 << 2) | 0;
 $79 = HEAP32[$arrayidx362 >> 2] | 0;
 $add366 = $mul361 | 1;
 $arrayidx367 = 39376 + ($add366 << 2) | 0;
 $80 = HEAP32[$arrayidx367 >> 2] | 0;
 $shl368 = $79 << 8;
 $shr369 = $80 >>> 24;
 $or370 = $shr369 | $shl368;
 $shl371 = $80 << 8;
 $shr372 = $79 >>> 24;
 $or373 = $shl371 | $shr372;
 $xor374 = $xor352 ^ $or370;
 $xor375 = $xor358 ^ $or373;
 $arrayidx376 = $x + 54 | 0;
 $81 = HEAP8[$arrayidx376 >> 0] | 0;
 $conv377 = $81 & 255;
 $mul378 = $conv377 << 1;
 $arrayidx379 = 39376 + ($mul378 << 2) | 0;
 $82 = HEAP32[$arrayidx379 >> 2] | 0;
 $add383 = $mul378 | 1;
 $arrayidx384 = 39376 + ($add383 << 2) | 0;
 $83 = HEAP32[$arrayidx384 >> 2] | 0;
 $shl385 = $82 << 16;
 $shr386 = $83 >>> 16;
 $or387 = $shr386 | $shl385;
 $shl388 = $83 << 16;
 $shr389 = $82 >>> 16;
 $or390 = $shl388 | $shr389;
 $xor391 = $xor374 ^ $or387;
 $xor392 = $xor375 ^ $or390;
 $arrayidx393 = $x + 7 | 0;
 $84 = HEAP8[$arrayidx393 >> 0] | 0;
 $conv394 = $84 & 255;
 $mul395 = $conv394 << 1;
 $arrayidx396 = 39376 + ($mul395 << 2) | 0;
 $85 = HEAP32[$arrayidx396 >> 2] | 0;
 $add400 = $mul395 | 1;
 $arrayidx401 = 39376 + ($add400 << 2) | 0;
 $86 = HEAP32[$arrayidx401 >> 2] | 0;
 $shl402 = $85 << 24;
 $shr403 = $86 >>> 8;
 $or404 = $shr403 | $shl402;
 $shl405 = $86 << 24;
 $shr406 = $85 >>> 8;
 $or407 = $shl405 | $shr406;
 $xor408 = $xor391 ^ $or404;
 $xor409 = $xor392 ^ $or407;
 $arrayidx410 = $y + 16 | 0;
 HEAP32[$arrayidx410 >> 2] = $xor409;
 $arrayidx411 = $y + 20 | 0;
 HEAP32[$arrayidx411 >> 2] = $xor408;
 $87 = HEAP8[$arrayidx22 >> 0] | 0;
 $conv413 = $87 & 255;
 $mul414 = $conv413 << 1;
 $arrayidx415 = 39376 + ($mul414 << 2) | 0;
 $88 = HEAP32[$arrayidx415 >> 2] | 0;
 $add419 = $mul414 | 1;
 $arrayidx420 = 39376 + ($add419 << 2) | 0;
 $89 = HEAP32[$arrayidx420 >> 2] | 0;
 $arrayidx421 = $x + 49 | 0;
 $90 = HEAP8[$arrayidx421 >> 0] | 0;
 $conv422 = $90 & 255;
 $mul423 = $conv422 << 1;
 $arrayidx424 = 39376 + ($mul423 << 2) | 0;
 $91 = HEAP32[$arrayidx424 >> 2] | 0;
 $add428 = $mul423 | 1;
 $arrayidx429 = 39376 + ($add428 << 2) | 0;
 $92 = HEAP32[$arrayidx429 >> 2] | 0;
 $shl430 = $91 << 8;
 $shr431 = $92 >>> 24;
 $or432 = $shr431 | $shl430;
 $shl433 = $92 << 8;
 $shr434 = $91 >>> 24;
 $or435 = $shl433 | $shr434;
 $xor436 = $or432 ^ $88;
 $xor437 = $or435 ^ $89;
 $arrayidx438 = $x + 2 | 0;
 $93 = HEAP8[$arrayidx438 >> 0] | 0;
 $conv439 = $93 & 255;
 $mul440 = $conv439 << 1;
 $arrayidx441 = 39376 + ($mul440 << 2) | 0;
 $94 = HEAP32[$arrayidx441 >> 2] | 0;
 $add445 = $mul440 | 1;
 $arrayidx446 = 39376 + ($add445 << 2) | 0;
 $95 = HEAP32[$arrayidx446 >> 2] | 0;
 $shl447 = $94 << 16;
 $shr448 = $95 >>> 16;
 $or449 = $shr448 | $shl447;
 $shl450 = $95 << 16;
 $shr451 = $94 >>> 16;
 $or452 = $shl450 | $shr451;
 $xor453 = $xor436 ^ $or449;
 $xor454 = $xor437 ^ $or452;
 $arrayidx455 = $x + 19 | 0;
 $96 = HEAP8[$arrayidx455 >> 0] | 0;
 $conv456 = $96 & 255;
 $mul457 = $conv456 << 1;
 $arrayidx458 = 39376 + ($mul457 << 2) | 0;
 $97 = HEAP32[$arrayidx458 >> 2] | 0;
 $add462 = $mul457 | 1;
 $arrayidx463 = 39376 + ($add462 << 2) | 0;
 $98 = HEAP32[$arrayidx463 >> 2] | 0;
 $shl464 = $97 << 24;
 $shr465 = $98 >>> 8;
 $or466 = $shr465 | $shl464;
 $shl467 = $98 << 24;
 $shr468 = $97 >>> 8;
 $or469 = $shl467 | $shr468;
 $xor470 = $xor453 ^ $or466;
 $xor471 = $xor454 ^ $or469;
 $99 = HEAP8[$arrayidx20 >> 0] | 0;
 $conv473 = $99 & 255;
 $mul474 = $conv473 << 1;
 $arrayidx475 = 39376 + ($mul474 << 2) | 0;
 $100 = HEAP32[$arrayidx475 >> 2] | 0;
 $xor476 = $xor471 ^ $100;
 $add480 = $mul474 | 1;
 $arrayidx481 = 39376 + ($add480 << 2) | 0;
 $101 = HEAP32[$arrayidx481 >> 2] | 0;
 $xor482 = $xor470 ^ $101;
 $arrayidx483 = $x + 45 | 0;
 $102 = HEAP8[$arrayidx483 >> 0] | 0;
 $conv484 = $102 & 255;
 $mul485 = $conv484 << 1;
 $arrayidx486 = 39376 + ($mul485 << 2) | 0;
 $103 = HEAP32[$arrayidx486 >> 2] | 0;
 $add490 = $mul485 | 1;
 $arrayidx491 = 39376 + ($add490 << 2) | 0;
 $104 = HEAP32[$arrayidx491 >> 2] | 0;
 $shl492 = $103 << 8;
 $shr493 = $104 >>> 24;
 $or494 = $shr493 | $shl492;
 $shl495 = $104 << 8;
 $shr496 = $103 >>> 24;
 $or497 = $shl495 | $shr496;
 $xor498 = $xor476 ^ $or494;
 $xor499 = $xor482 ^ $or497;
 $arrayidx500 = $x + 62 | 0;
 $105 = HEAP8[$arrayidx500 >> 0] | 0;
 $conv501 = $105 & 255;
 $mul502 = $conv501 << 1;
 $arrayidx503 = 39376 + ($mul502 << 2) | 0;
 $106 = HEAP32[$arrayidx503 >> 2] | 0;
 $add507 = $mul502 | 1;
 $arrayidx508 = 39376 + ($add507 << 2) | 0;
 $107 = HEAP32[$arrayidx508 >> 2] | 0;
 $shl509 = $106 << 16;
 $shr510 = $107 >>> 16;
 $or511 = $shr510 | $shl509;
 $shl512 = $107 << 16;
 $shr513 = $106 >>> 16;
 $or514 = $shl512 | $shr513;
 $xor515 = $xor498 ^ $or511;
 $xor516 = $xor499 ^ $or514;
 $arrayidx517 = $x + 15 | 0;
 $108 = HEAP8[$arrayidx517 >> 0] | 0;
 $conv518 = $108 & 255;
 $mul519 = $conv518 << 1;
 $arrayidx520 = 39376 + ($mul519 << 2) | 0;
 $109 = HEAP32[$arrayidx520 >> 2] | 0;
 $add524 = $mul519 | 1;
 $arrayidx525 = 39376 + ($add524 << 2) | 0;
 $110 = HEAP32[$arrayidx525 >> 2] | 0;
 $shl526 = $109 << 24;
 $shr527 = $110 >>> 8;
 $or528 = $shr527 | $shl526;
 $shl529 = $110 << 24;
 $shr530 = $109 >>> 8;
 $or531 = $shl529 | $shr530;
 $xor532 = $xor515 ^ $or528;
 $xor533 = $xor516 ^ $or531;
 $arrayidx534 = $y + 24 | 0;
 HEAP32[$arrayidx534 >> 2] = $xor533;
 $arrayidx535 = $y + 28 | 0;
 HEAP32[$arrayidx535 >> 2] = $xor532;
 $111 = HEAP8[$arrayidx28 >> 0] | 0;
 $conv537 = $111 & 255;
 $mul538 = $conv537 << 1;
 $arrayidx539 = 39376 + ($mul538 << 2) | 0;
 $112 = HEAP32[$arrayidx539 >> 2] | 0;
 $add543 = $mul538 | 1;
 $arrayidx544 = 39376 + ($add543 << 2) | 0;
 $113 = HEAP32[$arrayidx544 >> 2] | 0;
 $arrayidx545 = $x + 57 | 0;
 $114 = HEAP8[$arrayidx545 >> 0] | 0;
 $conv546 = $114 & 255;
 $mul547 = $conv546 << 1;
 $arrayidx548 = 39376 + ($mul547 << 2) | 0;
 $115 = HEAP32[$arrayidx548 >> 2] | 0;
 $add552 = $mul547 | 1;
 $arrayidx553 = 39376 + ($add552 << 2) | 0;
 $116 = HEAP32[$arrayidx553 >> 2] | 0;
 $shl554 = $115 << 8;
 $shr555 = $116 >>> 24;
 $or556 = $shr555 | $shl554;
 $shl557 = $116 << 8;
 $shr558 = $115 >>> 24;
 $or559 = $shl557 | $shr558;
 $xor560 = $or556 ^ $112;
 $xor561 = $or559 ^ $113;
 $arrayidx562 = $x + 10 | 0;
 $117 = HEAP8[$arrayidx562 >> 0] | 0;
 $conv563 = $117 & 255;
 $mul564 = $conv563 << 1;
 $arrayidx565 = 39376 + ($mul564 << 2) | 0;
 $118 = HEAP32[$arrayidx565 >> 2] | 0;
 $add569 = $mul564 | 1;
 $arrayidx570 = 39376 + ($add569 << 2) | 0;
 $119 = HEAP32[$arrayidx570 >> 2] | 0;
 $shl571 = $118 << 16;
 $shr572 = $119 >>> 16;
 $or573 = $shr572 | $shl571;
 $shl574 = $119 << 16;
 $shr575 = $118 >>> 16;
 $or576 = $shl574 | $shr575;
 $xor577 = $xor560 ^ $or573;
 $xor578 = $xor561 ^ $or576;
 $arrayidx579 = $x + 27 | 0;
 $120 = HEAP8[$arrayidx579 >> 0] | 0;
 $conv580 = $120 & 255;
 $mul581 = $conv580 << 1;
 $arrayidx582 = 39376 + ($mul581 << 2) | 0;
 $121 = HEAP32[$arrayidx582 >> 2] | 0;
 $add586 = $mul581 | 1;
 $arrayidx587 = 39376 + ($add586 << 2) | 0;
 $122 = HEAP32[$arrayidx587 >> 2] | 0;
 $shl588 = $121 << 24;
 $shr589 = $122 >>> 8;
 $or590 = $shr589 | $shl588;
 $shl591 = $122 << 24;
 $shr592 = $121 >>> 8;
 $or593 = $shl591 | $shr592;
 $xor594 = $xor577 ^ $or590;
 $xor595 = $xor578 ^ $or593;
 $123 = HEAP8[$arrayidx26 >> 0] | 0;
 $conv597 = $123 & 255;
 $mul598 = $conv597 << 1;
 $arrayidx599 = 39376 + ($mul598 << 2) | 0;
 $124 = HEAP32[$arrayidx599 >> 2] | 0;
 $xor600 = $xor595 ^ $124;
 $add604 = $mul598 | 1;
 $arrayidx605 = 39376 + ($add604 << 2) | 0;
 $125 = HEAP32[$arrayidx605 >> 2] | 0;
 $xor606 = $xor594 ^ $125;
 $arrayidx607 = $x + 53 | 0;
 $126 = HEAP8[$arrayidx607 >> 0] | 0;
 $conv608 = $126 & 255;
 $mul609 = $conv608 << 1;
 $arrayidx610 = 39376 + ($mul609 << 2) | 0;
 $127 = HEAP32[$arrayidx610 >> 2] | 0;
 $add614 = $mul609 | 1;
 $arrayidx615 = 39376 + ($add614 << 2) | 0;
 $128 = HEAP32[$arrayidx615 >> 2] | 0;
 $shl616 = $127 << 8;
 $shr617 = $128 >>> 24;
 $or618 = $shr617 | $shl616;
 $shl619 = $128 << 8;
 $shr620 = $127 >>> 24;
 $or621 = $shl619 | $shr620;
 $xor622 = $xor600 ^ $or618;
 $xor623 = $xor606 ^ $or621;
 $arrayidx624 = $x + 6 | 0;
 $129 = HEAP8[$arrayidx624 >> 0] | 0;
 $conv625 = $129 & 255;
 $mul626 = $conv625 << 1;
 $arrayidx627 = 39376 + ($mul626 << 2) | 0;
 $130 = HEAP32[$arrayidx627 >> 2] | 0;
 $add631 = $mul626 | 1;
 $arrayidx632 = 39376 + ($add631 << 2) | 0;
 $131 = HEAP32[$arrayidx632 >> 2] | 0;
 $shl633 = $130 << 16;
 $shr634 = $131 >>> 16;
 $or635 = $shr634 | $shl633;
 $shl636 = $131 << 16;
 $shr637 = $130 >>> 16;
 $or638 = $shl636 | $shr637;
 $xor639 = $xor622 ^ $or635;
 $xor640 = $xor623 ^ $or638;
 $arrayidx641 = $x + 23 | 0;
 $132 = HEAP8[$arrayidx641 >> 0] | 0;
 $conv642 = $132 & 255;
 $mul643 = $conv642 << 1;
 $arrayidx644 = 39376 + ($mul643 << 2) | 0;
 $133 = HEAP32[$arrayidx644 >> 2] | 0;
 $add648 = $mul643 | 1;
 $arrayidx649 = 39376 + ($add648 << 2) | 0;
 $134 = HEAP32[$arrayidx649 >> 2] | 0;
 $shl650 = $133 << 24;
 $shr651 = $134 >>> 8;
 $or652 = $shr651 | $shl650;
 $shl653 = $134 << 24;
 $shr654 = $133 >>> 8;
 $or655 = $shl653 | $shr654;
 $xor656 = $xor639 ^ $or652;
 $xor657 = $xor640 ^ $or655;
 $arrayidx658 = $y + 32 | 0;
 HEAP32[$arrayidx658 >> 2] = $xor657;
 $arrayidx659 = $y + 36 | 0;
 HEAP32[$arrayidx659 >> 2] = $xor656;
 $135 = HEAP8[$arrayidx34 >> 0] | 0;
 $conv661 = $135 & 255;
 $mul662 = $conv661 << 1;
 $arrayidx663 = 39376 + ($mul662 << 2) | 0;
 $136 = HEAP32[$arrayidx663 >> 2] | 0;
 $add667 = $mul662 | 1;
 $arrayidx668 = 39376 + ($add667 << 2) | 0;
 $137 = HEAP32[$arrayidx668 >> 2] | 0;
 $arrayidx669 = $x + 1 | 0;
 $138 = HEAP8[$arrayidx669 >> 0] | 0;
 $conv670 = $138 & 255;
 $mul671 = $conv670 << 1;
 $arrayidx672 = 39376 + ($mul671 << 2) | 0;
 $139 = HEAP32[$arrayidx672 >> 2] | 0;
 $add676 = $mul671 | 1;
 $arrayidx677 = 39376 + ($add676 << 2) | 0;
 $140 = HEAP32[$arrayidx677 >> 2] | 0;
 $shl678 = $139 << 8;
 $shr679 = $140 >>> 24;
 $or680 = $shr679 | $shl678;
 $shl681 = $140 << 8;
 $shr682 = $139 >>> 24;
 $or683 = $shl681 | $shr682;
 $xor684 = $or680 ^ $136;
 $xor685 = $or683 ^ $137;
 $arrayidx686 = $x + 18 | 0;
 $141 = HEAP8[$arrayidx686 >> 0] | 0;
 $conv687 = $141 & 255;
 $mul688 = $conv687 << 1;
 $arrayidx689 = 39376 + ($mul688 << 2) | 0;
 $142 = HEAP32[$arrayidx689 >> 2] | 0;
 $add693 = $mul688 | 1;
 $arrayidx694 = 39376 + ($add693 << 2) | 0;
 $143 = HEAP32[$arrayidx694 >> 2] | 0;
 $shl695 = $142 << 16;
 $shr696 = $143 >>> 16;
 $or697 = $shr696 | $shl695;
 $shl698 = $143 << 16;
 $shr699 = $142 >>> 16;
 $or700 = $shl698 | $shr699;
 $xor701 = $xor684 ^ $or697;
 $xor702 = $xor685 ^ $or700;
 $arrayidx703 = $x + 35 | 0;
 $144 = HEAP8[$arrayidx703 >> 0] | 0;
 $conv704 = $144 & 255;
 $mul705 = $conv704 << 1;
 $arrayidx706 = 39376 + ($mul705 << 2) | 0;
 $145 = HEAP32[$arrayidx706 >> 2] | 0;
 $add710 = $mul705 | 1;
 $arrayidx711 = 39376 + ($add710 << 2) | 0;
 $146 = HEAP32[$arrayidx711 >> 2] | 0;
 $shl712 = $145 << 24;
 $shr713 = $146 >>> 8;
 $or714 = $shr713 | $shl712;
 $shl715 = $146 << 24;
 $shr716 = $145 >>> 8;
 $or717 = $shl715 | $shr716;
 $xor718 = $xor701 ^ $or714;
 $xor719 = $xor702 ^ $or717;
 $147 = HEAP8[$arrayidx32 >> 0] | 0;
 $conv721 = $147 & 255;
 $mul722 = $conv721 << 1;
 $arrayidx723 = 39376 + ($mul722 << 2) | 0;
 $148 = HEAP32[$arrayidx723 >> 2] | 0;
 $xor724 = $xor719 ^ $148;
 $add728 = $mul722 | 1;
 $arrayidx729 = 39376 + ($add728 << 2) | 0;
 $149 = HEAP32[$arrayidx729 >> 2] | 0;
 $xor730 = $xor718 ^ $149;
 $arrayidx731 = $x + 61 | 0;
 $150 = HEAP8[$arrayidx731 >> 0] | 0;
 $conv732 = $150 & 255;
 $mul733 = $conv732 << 1;
 $arrayidx734 = 39376 + ($mul733 << 2) | 0;
 $151 = HEAP32[$arrayidx734 >> 2] | 0;
 $add738 = $mul733 | 1;
 $arrayidx739 = 39376 + ($add738 << 2) | 0;
 $152 = HEAP32[$arrayidx739 >> 2] | 0;
 $shl740 = $151 << 8;
 $shr741 = $152 >>> 24;
 $or742 = $shr741 | $shl740;
 $shl743 = $152 << 8;
 $shr744 = $151 >>> 24;
 $or745 = $shl743 | $shr744;
 $xor746 = $xor724 ^ $or742;
 $xor747 = $xor730 ^ $or745;
 $arrayidx748 = $x + 14 | 0;
 $153 = HEAP8[$arrayidx748 >> 0] | 0;
 $conv749 = $153 & 255;
 $mul750 = $conv749 << 1;
 $arrayidx751 = 39376 + ($mul750 << 2) | 0;
 $154 = HEAP32[$arrayidx751 >> 2] | 0;
 $add755 = $mul750 | 1;
 $arrayidx756 = 39376 + ($add755 << 2) | 0;
 $155 = HEAP32[$arrayidx756 >> 2] | 0;
 $shl757 = $154 << 16;
 $shr758 = $155 >>> 16;
 $or759 = $shr758 | $shl757;
 $shl760 = $155 << 16;
 $shr761 = $154 >>> 16;
 $or762 = $shl760 | $shr761;
 $xor763 = $xor746 ^ $or759;
 $xor764 = $xor747 ^ $or762;
 $arrayidx765 = $x + 31 | 0;
 $156 = HEAP8[$arrayidx765 >> 0] | 0;
 $conv766 = $156 & 255;
 $mul767 = $conv766 << 1;
 $arrayidx768 = 39376 + ($mul767 << 2) | 0;
 $157 = HEAP32[$arrayidx768 >> 2] | 0;
 $add772 = $mul767 | 1;
 $arrayidx773 = 39376 + ($add772 << 2) | 0;
 $158 = HEAP32[$arrayidx773 >> 2] | 0;
 $shl774 = $157 << 24;
 $shr775 = $158 >>> 8;
 $or776 = $shr775 | $shl774;
 $shl777 = $158 << 24;
 $shr778 = $157 >>> 8;
 $or779 = $shl777 | $shr778;
 $xor780 = $xor763 ^ $or776;
 $xor781 = $xor764 ^ $or779;
 $arrayidx782 = $y + 40 | 0;
 HEAP32[$arrayidx782 >> 2] = $xor781;
 $arrayidx783 = $y + 44 | 0;
 HEAP32[$arrayidx783 >> 2] = $xor780;
 $159 = HEAP8[$arrayidx40 >> 0] | 0;
 $conv785 = $159 & 255;
 $mul786 = $conv785 << 1;
 $arrayidx787 = 39376 + ($mul786 << 2) | 0;
 $160 = HEAP32[$arrayidx787 >> 2] | 0;
 $add791 = $mul786 | 1;
 $arrayidx792 = 39376 + ($add791 << 2) | 0;
 $161 = HEAP32[$arrayidx792 >> 2] | 0;
 $arrayidx793 = $x + 9 | 0;
 $162 = HEAP8[$arrayidx793 >> 0] | 0;
 $conv794 = $162 & 255;
 $mul795 = $conv794 << 1;
 $arrayidx796 = 39376 + ($mul795 << 2) | 0;
 $163 = HEAP32[$arrayidx796 >> 2] | 0;
 $add800 = $mul795 | 1;
 $arrayidx801 = 39376 + ($add800 << 2) | 0;
 $164 = HEAP32[$arrayidx801 >> 2] | 0;
 $shl802 = $163 << 8;
 $shr803 = $164 >>> 24;
 $or804 = $shr803 | $shl802;
 $shl805 = $164 << 8;
 $shr806 = $163 >>> 24;
 $or807 = $shl805 | $shr806;
 $xor808 = $or804 ^ $160;
 $xor809 = $or807 ^ $161;
 $arrayidx810 = $x + 26 | 0;
 $165 = HEAP8[$arrayidx810 >> 0] | 0;
 $conv811 = $165 & 255;
 $mul812 = $conv811 << 1;
 $arrayidx813 = 39376 + ($mul812 << 2) | 0;
 $166 = HEAP32[$arrayidx813 >> 2] | 0;
 $add817 = $mul812 | 1;
 $arrayidx818 = 39376 + ($add817 << 2) | 0;
 $167 = HEAP32[$arrayidx818 >> 2] | 0;
 $shl819 = $166 << 16;
 $shr820 = $167 >>> 16;
 $or821 = $shr820 | $shl819;
 $shl822 = $167 << 16;
 $shr823 = $166 >>> 16;
 $or824 = $shl822 | $shr823;
 $xor825 = $xor808 ^ $or821;
 $xor826 = $xor809 ^ $or824;
 $arrayidx827 = $x + 43 | 0;
 $168 = HEAP8[$arrayidx827 >> 0] | 0;
 $conv828 = $168 & 255;
 $mul829 = $conv828 << 1;
 $arrayidx830 = 39376 + ($mul829 << 2) | 0;
 $169 = HEAP32[$arrayidx830 >> 2] | 0;
 $add834 = $mul829 | 1;
 $arrayidx835 = 39376 + ($add834 << 2) | 0;
 $170 = HEAP32[$arrayidx835 >> 2] | 0;
 $shl836 = $169 << 24;
 $shr837 = $170 >>> 8;
 $or838 = $shr837 | $shl836;
 $shl839 = $170 << 24;
 $shr840 = $169 >>> 8;
 $or841 = $shl839 | $shr840;
 $xor842 = $xor825 ^ $or838;
 $xor843 = $xor826 ^ $or841;
 $171 = HEAP8[$arrayidx38 >> 0] | 0;
 $conv845 = $171 & 255;
 $mul846 = $conv845 << 1;
 $arrayidx847 = 39376 + ($mul846 << 2) | 0;
 $172 = HEAP32[$arrayidx847 >> 2] | 0;
 $xor848 = $xor843 ^ $172;
 $add852 = $mul846 | 1;
 $arrayidx853 = 39376 + ($add852 << 2) | 0;
 $173 = HEAP32[$arrayidx853 >> 2] | 0;
 $xor854 = $xor842 ^ $173;
 $arrayidx855 = $x + 5 | 0;
 $174 = HEAP8[$arrayidx855 >> 0] | 0;
 $conv856 = $174 & 255;
 $mul857 = $conv856 << 1;
 $arrayidx858 = 39376 + ($mul857 << 2) | 0;
 $175 = HEAP32[$arrayidx858 >> 2] | 0;
 $add862 = $mul857 | 1;
 $arrayidx863 = 39376 + ($add862 << 2) | 0;
 $176 = HEAP32[$arrayidx863 >> 2] | 0;
 $shl864 = $175 << 8;
 $shr865 = $176 >>> 24;
 $or866 = $shr865 | $shl864;
 $shl867 = $176 << 8;
 $shr868 = $175 >>> 24;
 $or869 = $shl867 | $shr868;
 $xor870 = $xor848 ^ $or866;
 $xor871 = $xor854 ^ $or869;
 $arrayidx872 = $x + 22 | 0;
 $177 = HEAP8[$arrayidx872 >> 0] | 0;
 $conv873 = $177 & 255;
 $mul874 = $conv873 << 1;
 $arrayidx875 = 39376 + ($mul874 << 2) | 0;
 $178 = HEAP32[$arrayidx875 >> 2] | 0;
 $add879 = $mul874 | 1;
 $arrayidx880 = 39376 + ($add879 << 2) | 0;
 $179 = HEAP32[$arrayidx880 >> 2] | 0;
 $shl881 = $178 << 16;
 $shr882 = $179 >>> 16;
 $or883 = $shr882 | $shl881;
 $shl884 = $179 << 16;
 $shr885 = $178 >>> 16;
 $or886 = $shl884 | $shr885;
 $xor887 = $xor870 ^ $or883;
 $xor888 = $xor871 ^ $or886;
 $arrayidx889 = $x + 39 | 0;
 $180 = HEAP8[$arrayidx889 >> 0] | 0;
 $conv890 = $180 & 255;
 $mul891 = $conv890 << 1;
 $arrayidx892 = 39376 + ($mul891 << 2) | 0;
 $181 = HEAP32[$arrayidx892 >> 2] | 0;
 $add896 = $mul891 | 1;
 $arrayidx897 = 39376 + ($add896 << 2) | 0;
 $182 = HEAP32[$arrayidx897 >> 2] | 0;
 $shl898 = $181 << 24;
 $shr899 = $182 >>> 8;
 $or900 = $shr899 | $shl898;
 $shl901 = $182 << 24;
 $shr902 = $181 >>> 8;
 $or903 = $shl901 | $shr902;
 $xor904 = $xor887 ^ $or900;
 $xor905 = $xor888 ^ $or903;
 $arrayidx906 = $y + 48 | 0;
 HEAP32[$arrayidx906 >> 2] = $xor905;
 $arrayidx907 = $y + 52 | 0;
 HEAP32[$arrayidx907 >> 2] = $xor904;
 $183 = HEAP8[$x >> 0] | 0;
 $conv909 = $183 & 255;
 $mul910 = $conv909 << 1;
 $arrayidx911 = 39376 + ($mul910 << 2) | 0;
 $184 = HEAP32[$arrayidx911 >> 2] | 0;
 $add915 = $mul910 | 1;
 $arrayidx916 = 39376 + ($add915 << 2) | 0;
 $185 = HEAP32[$arrayidx916 >> 2] | 0;
 $arrayidx917 = $x + 17 | 0;
 $186 = HEAP8[$arrayidx917 >> 0] | 0;
 $conv918 = $186 & 255;
 $mul919 = $conv918 << 1;
 $arrayidx920 = 39376 + ($mul919 << 2) | 0;
 $187 = HEAP32[$arrayidx920 >> 2] | 0;
 $add924 = $mul919 | 1;
 $arrayidx925 = 39376 + ($add924 << 2) | 0;
 $188 = HEAP32[$arrayidx925 >> 2] | 0;
 $shl926 = $187 << 8;
 $shr927 = $188 >>> 24;
 $or928 = $shr927 | $shl926;
 $shl929 = $188 << 8;
 $shr930 = $187 >>> 24;
 $or931 = $shl929 | $shr930;
 $xor932 = $or928 ^ $184;
 $xor933 = $or931 ^ $185;
 $arrayidx934 = $x + 34 | 0;
 $189 = HEAP8[$arrayidx934 >> 0] | 0;
 $conv935 = $189 & 255;
 $mul936 = $conv935 << 1;
 $arrayidx937 = 39376 + ($mul936 << 2) | 0;
 $190 = HEAP32[$arrayidx937 >> 2] | 0;
 $add941 = $mul936 | 1;
 $arrayidx942 = 39376 + ($add941 << 2) | 0;
 $191 = HEAP32[$arrayidx942 >> 2] | 0;
 $shl943 = $190 << 16;
 $shr944 = $191 >>> 16;
 $or945 = $shr944 | $shl943;
 $shl946 = $191 << 16;
 $shr947 = $190 >>> 16;
 $or948 = $shl946 | $shr947;
 $xor949 = $xor932 ^ $or945;
 $xor950 = $xor933 ^ $or948;
 $arrayidx951 = $x + 51 | 0;
 $192 = HEAP8[$arrayidx951 >> 0] | 0;
 $conv952 = $192 & 255;
 $mul953 = $conv952 << 1;
 $arrayidx954 = 39376 + ($mul953 << 2) | 0;
 $193 = HEAP32[$arrayidx954 >> 2] | 0;
 $add958 = $mul953 | 1;
 $arrayidx959 = 39376 + ($add958 << 2) | 0;
 $194 = HEAP32[$arrayidx959 >> 2] | 0;
 $shl960 = $193 << 24;
 $shr961 = $194 >>> 8;
 $or962 = $shr961 | $shl960;
 $shl963 = $194 << 24;
 $shr964 = $193 >>> 8;
 $or965 = $shl963 | $shr964;
 $xor966 = $xor949 ^ $or962;
 $xor967 = $xor950 ^ $or965;
 $195 = HEAP8[$arrayidx44 >> 0] | 0;
 $conv969 = $195 & 255;
 $mul970 = $conv969 << 1;
 $arrayidx971 = 39376 + ($mul970 << 2) | 0;
 $196 = HEAP32[$arrayidx971 >> 2] | 0;
 $xor972 = $xor967 ^ $196;
 $add976 = $mul970 | 1;
 $arrayidx977 = 39376 + ($add976 << 2) | 0;
 $197 = HEAP32[$arrayidx977 >> 2] | 0;
 $xor978 = $xor966 ^ $197;
 $arrayidx979 = $x + 13 | 0;
 $198 = HEAP8[$arrayidx979 >> 0] | 0;
 $conv980 = $198 & 255;
 $mul981 = $conv980 << 1;
 $arrayidx982 = 39376 + ($mul981 << 2) | 0;
 $199 = HEAP32[$arrayidx982 >> 2] | 0;
 $add986 = $mul981 | 1;
 $arrayidx987 = 39376 + ($add986 << 2) | 0;
 $200 = HEAP32[$arrayidx987 >> 2] | 0;
 $shl988 = $199 << 8;
 $shr989 = $200 >>> 24;
 $or990 = $shr989 | $shl988;
 $shl991 = $200 << 8;
 $shr992 = $199 >>> 24;
 $or993 = $shl991 | $shr992;
 $xor994 = $xor972 ^ $or990;
 $xor995 = $xor978 ^ $or993;
 $arrayidx996 = $x + 30 | 0;
 $201 = HEAP8[$arrayidx996 >> 0] | 0;
 $conv997 = $201 & 255;
 $mul998 = $conv997 << 1;
 $arrayidx999 = 39376 + ($mul998 << 2) | 0;
 $202 = HEAP32[$arrayidx999 >> 2] | 0;
 $add1003 = $mul998 | 1;
 $arrayidx1004 = 39376 + ($add1003 << 2) | 0;
 $203 = HEAP32[$arrayidx1004 >> 2] | 0;
 $shl1005 = $202 << 16;
 $shr1006 = $203 >>> 16;
 $or1007 = $shr1006 | $shl1005;
 $shl1008 = $203 << 16;
 $shr1009 = $202 >>> 16;
 $or1010 = $shl1008 | $shr1009;
 $xor1011 = $xor994 ^ $or1007;
 $xor1012 = $xor995 ^ $or1010;
 $arrayidx1013 = $x + 47 | 0;
 $204 = HEAP8[$arrayidx1013 >> 0] | 0;
 $conv1014 = $204 & 255;
 $mul1015 = $conv1014 << 1;
 $arrayidx1016 = 39376 + ($mul1015 << 2) | 0;
 $205 = HEAP32[$arrayidx1016 >> 2] | 0;
 $add1020 = $mul1015 | 1;
 $arrayidx1021 = 39376 + ($add1020 << 2) | 0;
 $206 = HEAP32[$arrayidx1021 >> 2] | 0;
 $shl1022 = $205 << 24;
 $shr1023 = $206 >>> 8;
 $or1024 = $shr1023 | $shl1022;
 $shl1025 = $206 << 24;
 $shr1026 = $205 >>> 8;
 $or1027 = $shl1025 | $shr1026;
 $xor1028 = $xor1011 ^ $or1024;
 $xor1029 = $xor1012 ^ $or1027;
 $arrayidx1030 = $y + 56 | 0;
 HEAP32[$arrayidx1030 >> 2] = $xor1029;
 $arrayidx1031 = $y + 60 | 0;
 HEAP32[$arrayidx1031 >> 2] = $xor1028;
 return;
}

function _RND512P($x, $y, $r) {
 $x = $x | 0;
 $y = $y | 0;
 $r = $r | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0;
 var $add112 = 0, $add129 = 0, $add148 = 0, $add157 = 0, $add174 = 0, $add191 = 0, $add209 = 0, $add219 = 0, $add236 = 0, $add253 = 0, $add272 = 0, $add281 = 0, $add298 = 0, $add315 = 0, $add333 = 0, $add343 = 0, $add36 = 0, $add360 = 0, $add377 = 0, $add396 = 0;
 var $add405 = 0, $add422 = 0, $add439 = 0, $add457 = 0, $add467 = 0, $add484 = 0, $add50 = 0, $add501 = 0, $add520 = 0, $add529 = 0, $add546 = 0, $add563 = 0, $add581 = 0, $add591 = 0, $add608 = 0, $add625 = 0, $add644 = 0, $add653 = 0, $add67 = 0, $add670 = 0;
 var $add687 = 0, $add705 = 0, $add715 = 0, $add732 = 0, $add749 = 0, $add768 = 0, $add777 = 0, $add794 = 0, $add811 = 0, $add829 = 0, $add839 = 0, $add85 = 0, $add856 = 0, $add873 = 0, $add892 = 0, $add901 = 0, $add918 = 0, $add935 = 0, $add95 = 0, $add953 = 0;
 var $add963 = 0, $add980 = 0, $add997 = 0, $arrayidx1007 = 0, $arrayidx1008 = 0, $arrayidx105 = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx12 = 0, $arrayidx122 = 0, $arrayidx125 = 0, $arrayidx130 = 0, $arrayidx140 = 0, $arrayidx144 = 0, $arrayidx149 = 0, $arrayidx15 = 0, $arrayidx150 = 0, $arrayidx153 = 0, $arrayidx158 = 0, $arrayidx167 = 0;
 var $arrayidx170 = 0, $arrayidx175 = 0, $arrayidx18 = 0, $arrayidx184 = 0, $arrayidx187 = 0, $arrayidx192 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx21 = 0, $arrayidx210 = 0, $arrayidx212 = 0, $arrayidx215 = 0, $arrayidx220 = 0, $arrayidx229 = 0, $arrayidx232 = 0, $arrayidx237 = 0, $arrayidx24 = 0, $arrayidx246 = 0, $arrayidx249 = 0, $arrayidx254 = 0;
 var $arrayidx263 = 0, $arrayidx264 = 0, $arrayidx268 = 0, $arrayidx273 = 0, $arrayidx274 = 0, $arrayidx277 = 0, $arrayidx28 = 0, $arrayidx282 = 0, $arrayidx291 = 0, $arrayidx294 = 0, $arrayidx299 = 0, $arrayidx3 = 0, $arrayidx308 = 0, $arrayidx311 = 0, $arrayidx316 = 0, $arrayidx32 = 0, $arrayidx325 = 0, $arrayidx328 = 0, $arrayidx334 = 0, $arrayidx336 = 0;
 var $arrayidx339 = 0, $arrayidx344 = 0, $arrayidx353 = 0, $arrayidx356 = 0, $arrayidx361 = 0, $arrayidx37 = 0, $arrayidx370 = 0, $arrayidx373 = 0, $arrayidx378 = 0, $arrayidx387 = 0, $arrayidx388 = 0, $arrayidx392 = 0, $arrayidx397 = 0, $arrayidx398 = 0, $arrayidx401 = 0, $arrayidx406 = 0, $arrayidx415 = 0, $arrayidx418 = 0, $arrayidx423 = 0, $arrayidx432 = 0;
 var $arrayidx435 = 0, $arrayidx440 = 0, $arrayidx449 = 0, $arrayidx452 = 0, $arrayidx458 = 0, $arrayidx46 = 0, $arrayidx460 = 0, $arrayidx463 = 0, $arrayidx468 = 0, $arrayidx477 = 0, $arrayidx480 = 0, $arrayidx485 = 0, $arrayidx494 = 0, $arrayidx497 = 0, $arrayidx502 = 0, $arrayidx51 = 0, $arrayidx511 = 0, $arrayidx512 = 0, $arrayidx516 = 0, $arrayidx521 = 0;
 var $arrayidx522 = 0, $arrayidx525 = 0, $arrayidx530 = 0, $arrayidx539 = 0, $arrayidx542 = 0, $arrayidx547 = 0, $arrayidx556 = 0, $arrayidx559 = 0, $arrayidx564 = 0, $arrayidx573 = 0, $arrayidx576 = 0, $arrayidx582 = 0, $arrayidx584 = 0, $arrayidx587 = 0, $arrayidx592 = 0, $arrayidx6 = 0, $arrayidx601 = 0, $arrayidx604 = 0, $arrayidx609 = 0, $arrayidx618 = 0;
 var $arrayidx621 = 0, $arrayidx626 = 0, $arrayidx63 = 0, $arrayidx635 = 0, $arrayidx636 = 0, $arrayidx640 = 0, $arrayidx645 = 0, $arrayidx646 = 0, $arrayidx649 = 0, $arrayidx654 = 0, $arrayidx663 = 0, $arrayidx666 = 0, $arrayidx671 = 0, $arrayidx68 = 0, $arrayidx680 = 0, $arrayidx683 = 0, $arrayidx688 = 0, $arrayidx697 = 0, $arrayidx700 = 0, $arrayidx706 = 0;
 var $arrayidx708 = 0, $arrayidx711 = 0, $arrayidx716 = 0, $arrayidx725 = 0, $arrayidx728 = 0, $arrayidx733 = 0, $arrayidx742 = 0, $arrayidx745 = 0, $arrayidx750 = 0, $arrayidx759 = 0, $arrayidx760 = 0, $arrayidx764 = 0, $arrayidx769 = 0, $arrayidx77 = 0, $arrayidx770 = 0, $arrayidx773 = 0, $arrayidx778 = 0, $arrayidx787 = 0, $arrayidx790 = 0, $arrayidx795 = 0;
 var $arrayidx80 = 0, $arrayidx804 = 0, $arrayidx807 = 0, $arrayidx812 = 0, $arrayidx821 = 0, $arrayidx824 = 0, $arrayidx830 = 0, $arrayidx832 = 0, $arrayidx835 = 0, $arrayidx840 = 0, $arrayidx849 = 0, $arrayidx852 = 0, $arrayidx857 = 0, $arrayidx86 = 0, $arrayidx866 = 0, $arrayidx869 = 0, $arrayidx874 = 0, $arrayidx88 = 0, $arrayidx883 = 0, $arrayidx884 = 0;
 var $arrayidx888 = 0, $arrayidx893 = 0, $arrayidx894 = 0, $arrayidx897 = 0, $arrayidx9 = 0, $arrayidx902 = 0, $arrayidx91 = 0, $arrayidx911 = 0, $arrayidx914 = 0, $arrayidx919 = 0, $arrayidx928 = 0, $arrayidx931 = 0, $arrayidx936 = 0, $arrayidx945 = 0, $arrayidx948 = 0, $arrayidx954 = 0, $arrayidx956 = 0, $arrayidx959 = 0, $arrayidx96 = 0, $arrayidx964 = 0;
 var $arrayidx973 = 0, $arrayidx976 = 0, $arrayidx981 = 0, $arrayidx990 = 0, $arrayidx993 = 0, $arrayidx998 = 0, $conv = 0, $conv106 = 0, $conv123 = 0, $conv142 = 0, $conv151 = 0, $conv168 = 0, $conv185 = 0, $conv202 = 0, $conv213 = 0, $conv230 = 0, $conv247 = 0, $conv266 = 0, $conv275 = 0, $conv292 = 0;
 var $conv309 = 0, $conv326 = 0, $conv337 = 0, $conv354 = 0, $conv371 = 0, $conv390 = 0, $conv399 = 0, $conv416 = 0, $conv433 = 0, $conv450 = 0, $conv461 = 0, $conv478 = 0, $conv495 = 0, $conv514 = 0, $conv523 = 0, $conv540 = 0, $conv557 = 0, $conv574 = 0, $conv585 = 0, $conv602 = 0;
 var $conv619 = 0, $conv638 = 0, $conv647 = 0, $conv664 = 0, $conv681 = 0, $conv698 = 0, $conv709 = 0, $conv726 = 0, $conv743 = 0, $conv762 = 0, $conv771 = 0, $conv78 = 0, $conv788 = 0, $conv805 = 0, $conv822 = 0, $conv833 = 0, $conv850 = 0, $conv867 = 0, $conv886 = 0, $conv89 = 0;
 var $conv895 = 0, $conv912 = 0, $conv929 = 0, $conv946 = 0, $conv957 = 0, $conv974 = 0, $conv991 = 0, $mul = 0, $mul107 = 0, $mul124 = 0, $mul143 = 0, $mul152 = 0, $mul169 = 0, $mul186 = 0, $mul203 = 0, $mul214 = 0, $mul231 = 0, $mul248 = 0, $mul267 = 0, $mul276 = 0;
 var $mul293 = 0, $mul31 = 0, $mul310 = 0, $mul327 = 0, $mul338 = 0, $mul355 = 0, $mul372 = 0, $mul391 = 0, $mul400 = 0, $mul417 = 0, $mul434 = 0, $mul45 = 0, $mul451 = 0, $mul462 = 0, $mul479 = 0, $mul496 = 0, $mul515 = 0, $mul524 = 0, $mul541 = 0, $mul558 = 0;
 var $mul575 = 0, $mul586 = 0, $mul603 = 0, $mul62 = 0, $mul620 = 0, $mul639 = 0, $mul648 = 0, $mul665 = 0, $mul682 = 0, $mul699 = 0, $mul710 = 0, $mul727 = 0, $mul744 = 0, $mul763 = 0, $mul772 = 0, $mul789 = 0, $mul79 = 0, $mul806 = 0, $mul823 = 0, $mul834 = 0;
 var $mul851 = 0, $mul868 = 0, $mul887 = 0, $mul896 = 0, $mul90 = 0, $mul913 = 0, $mul930 = 0, $mul947 = 0, $mul958 = 0, $mul975 = 0, $mul992 = 0, $or = 0, $or1001 = 0, $or1004 = 0, $or102 = 0, $or116 = 0, $or119 = 0, $or133 = 0, $or136 = 0, $or161 = 0;
 var $or164 = 0, $or178 = 0, $or181 = 0, $or195 = 0, $or198 = 0, $or223 = 0, $or226 = 0, $or240 = 0, $or243 = 0, $or257 = 0, $or260 = 0, $or285 = 0, $or288 = 0, $or302 = 0, $or305 = 0, $or319 = 0, $or322 = 0, $or347 = 0, $or350 = 0, $or364 = 0;
 var $or367 = 0, $or381 = 0, $or384 = 0, $or40 = 0, $or409 = 0, $or412 = 0, $or426 = 0, $or429 = 0, $or443 = 0, $or446 = 0, $or471 = 0, $or474 = 0, $or488 = 0, $or491 = 0, $or505 = 0, $or508 = 0, $or533 = 0, $or536 = 0, $or54 = 0, $or550 = 0;
 var $or553 = 0, $or567 = 0, $or57 = 0, $or570 = 0, $or595 = 0, $or598 = 0, $or612 = 0, $or615 = 0, $or629 = 0, $or632 = 0, $or657 = 0, $or660 = 0, $or674 = 0, $or677 = 0, $or691 = 0, $or694 = 0, $or71 = 0, $or719 = 0, $or722 = 0, $or736 = 0;
 var $or739 = 0, $or74 = 0, $or753 = 0, $or756 = 0, $or781 = 0, $or784 = 0, $or798 = 0, $or801 = 0, $or815 = 0, $or818 = 0, $or843 = 0, $or846 = 0, $or860 = 0, $or863 = 0, $or877 = 0, $or880 = 0, $or905 = 0, $or908 = 0, $or922 = 0, $or925 = 0;
 var $or939 = 0, $or942 = 0, $or967 = 0, $or970 = 0, $or984 = 0, $or987 = 0, $or99 = 0, $shl = 0, $shl100 = 0, $shl1002 = 0, $shl114 = 0, $shl117 = 0, $shl131 = 0, $shl134 = 0, $shl159 = 0, $shl162 = 0, $shl176 = 0, $shl179 = 0, $shl193 = 0, $shl196 = 0;
 var $shl221 = 0, $shl224 = 0, $shl238 = 0, $shl241 = 0, $shl255 = 0, $shl258 = 0, $shl283 = 0, $shl286 = 0, $shl300 = 0, $shl303 = 0, $shl317 = 0, $shl320 = 0, $shl345 = 0, $shl348 = 0, $shl362 = 0, $shl365 = 0, $shl379 = 0, $shl38 = 0, $shl382 = 0, $shl407 = 0;
 var $shl410 = 0, $shl424 = 0, $shl427 = 0, $shl441 = 0, $shl444 = 0, $shl469 = 0, $shl472 = 0, $shl486 = 0, $shl489 = 0, $shl503 = 0, $shl506 = 0, $shl52 = 0, $shl531 = 0, $shl534 = 0, $shl548 = 0, $shl55 = 0, $shl551 = 0, $shl565 = 0, $shl568 = 0, $shl593 = 0;
 var $shl596 = 0, $shl610 = 0, $shl613 = 0, $shl627 = 0, $shl630 = 0, $shl655 = 0, $shl658 = 0, $shl672 = 0, $shl675 = 0, $shl689 = 0, $shl69 = 0, $shl692 = 0, $shl717 = 0, $shl72 = 0, $shl720 = 0, $shl734 = 0, $shl737 = 0, $shl751 = 0, $shl754 = 0, $shl779 = 0;
 var $shl782 = 0, $shl796 = 0, $shl799 = 0, $shl813 = 0, $shl816 = 0, $shl841 = 0, $shl844 = 0, $shl858 = 0, $shl861 = 0, $shl875 = 0, $shl878 = 0, $shl903 = 0, $shl906 = 0, $shl920 = 0, $shl923 = 0, $shl937 = 0, $shl940 = 0, $shl965 = 0, $shl968 = 0, $shl97 = 0;
 var $shl982 = 0, $shl985 = 0, $shl999 = 0, $shr = 0, $shr1000 = 0, $shr1003 = 0, $shr101 = 0, $shr115 = 0, $shr118 = 0, $shr132 = 0, $shr135 = 0, $shr160 = 0, $shr163 = 0, $shr177 = 0, $shr180 = 0, $shr194 = 0, $shr197 = 0, $shr222 = 0, $shr225 = 0, $shr239 = 0;
 var $shr242 = 0, $shr256 = 0, $shr259 = 0, $shr284 = 0, $shr287 = 0, $shr301 = 0, $shr304 = 0, $shr318 = 0, $shr321 = 0, $shr346 = 0, $shr349 = 0, $shr363 = 0, $shr366 = 0, $shr380 = 0, $shr383 = 0, $shr39 = 0, $shr408 = 0, $shr411 = 0, $shr425 = 0, $shr428 = 0;
 var $shr442 = 0, $shr445 = 0, $shr470 = 0, $shr473 = 0, $shr487 = 0, $shr490 = 0, $shr504 = 0, $shr507 = 0, $shr53 = 0, $shr532 = 0, $shr535 = 0, $shr549 = 0, $shr552 = 0, $shr56 = 0, $shr566 = 0, $shr569 = 0, $shr594 = 0, $shr597 = 0, $shr611 = 0, $shr614 = 0;
 var $shr628 = 0, $shr631 = 0, $shr656 = 0, $shr659 = 0, $shr673 = 0, $shr676 = 0, $shr690 = 0, $shr693 = 0, $shr70 = 0, $shr718 = 0, $shr721 = 0, $shr73 = 0, $shr735 = 0, $shr738 = 0, $shr752 = 0, $shr755 = 0, $shr780 = 0, $shr783 = 0, $shr797 = 0, $shr800 = 0;
 var $shr814 = 0, $shr817 = 0, $shr842 = 0, $shr845 = 0, $shr859 = 0, $shr862 = 0, $shr876 = 0, $shr879 = 0, $shr904 = 0, $shr907 = 0, $shr921 = 0, $shr924 = 0, $shr938 = 0, $shr941 = 0, $shr966 = 0, $shr969 = 0, $shr98 = 0, $shr983 = 0, $shr986 = 0, $xor1 = 0;
 var $xor10 = 0, $xor1005 = 0, $xor1006 = 0, $xor103 = 0, $xor104 = 0, $xor11 = 0, $xor120 = 0, $xor121 = 0, $xor13 = 0, $xor137 = 0, $xor138 = 0, $xor14 = 0, $xor16 = 0, $xor165 = 0, $xor166 = 0, $xor17 = 0, $xor182 = 0, $xor183 = 0, $xor19 = 0, $xor199 = 0;
 var $xor2 = 0, $xor20 = 0, $xor200 = 0, $xor205 = 0, $xor211 = 0, $xor22 = 0, $xor227 = 0, $xor228 = 0, $xor244 = 0, $xor245 = 0, $xor261 = 0, $xor262 = 0, $xor289 = 0, $xor290 = 0, $xor306 = 0, $xor307 = 0, $xor323 = 0, $xor324 = 0, $xor329 = 0, $xor335 = 0;
 var $xor351 = 0, $xor352 = 0, $xor368 = 0, $xor369 = 0, $xor385 = 0, $xor386 = 0, $xor4 = 0, $xor41 = 0, $xor413 = 0, $xor414 = 0, $xor42 = 0, $xor430 = 0, $xor431 = 0, $xor447 = 0, $xor448 = 0, $xor453 = 0, $xor459 = 0, $xor475 = 0, $xor476 = 0, $xor492 = 0;
 var $xor493 = 0, $xor5 = 0, $xor509 = 0, $xor510 = 0, $xor537 = 0, $xor538 = 0, $xor554 = 0, $xor555 = 0, $xor571 = 0, $xor572 = 0, $xor577 = 0, $xor58 = 0, $xor583 = 0, $xor59 = 0, $xor599 = 0, $xor600 = 0, $xor616 = 0, $xor617 = 0, $xor633 = 0, $xor634 = 0;
 var $xor661 = 0, $xor662 = 0, $xor678 = 0, $xor679 = 0, $xor695 = 0, $xor696 = 0, $xor7 = 0, $xor701 = 0, $xor707 = 0, $xor723 = 0, $xor724 = 0, $xor740 = 0, $xor741 = 0, $xor75 = 0, $xor757 = 0, $xor758 = 0, $xor76 = 0, $xor785 = 0, $xor786 = 0, $xor8 = 0;
 var $xor802 = 0, $xor803 = 0, $xor81 = 0, $xor819 = 0, $xor820 = 0, $xor825 = 0, $xor831 = 0, $xor847 = 0, $xor848 = 0, $xor864 = 0, $xor865 = 0, $xor87 = 0, $xor881 = 0, $xor882 = 0, $xor909 = 0, $xor910 = 0, $xor926 = 0, $xor927 = 0, $xor943 = 0, $xor944 = 0;
 var $xor949 = 0, $xor955 = 0, $xor971 = 0, $xor972 = 0, $xor988 = 0, $xor989 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$x >> 2] | 0;
 $xor1 = $0 ^ $r;
 HEAP32[$x >> 2] = $xor1;
 $xor2 = $r ^ 16;
 $arrayidx3 = $x + 8 | 0;
 $1 = HEAP32[$arrayidx3 >> 2] | 0;
 $xor4 = $xor2 ^ $1;
 HEAP32[$arrayidx3 >> 2] = $xor4;
 $xor5 = $r ^ 32;
 $arrayidx6 = $x + 16 | 0;
 $2 = HEAP32[$arrayidx6 >> 2] | 0;
 $xor7 = $xor5 ^ $2;
 HEAP32[$arrayidx6 >> 2] = $xor7;
 $xor8 = $r ^ 48;
 $arrayidx9 = $x + 24 | 0;
 $3 = HEAP32[$arrayidx9 >> 2] | 0;
 $xor10 = $xor8 ^ $3;
 HEAP32[$arrayidx9 >> 2] = $xor10;
 $xor11 = $r ^ 64;
 $arrayidx12 = $x + 32 | 0;
 $4 = HEAP32[$arrayidx12 >> 2] | 0;
 $xor13 = $xor11 ^ $4;
 HEAP32[$arrayidx12 >> 2] = $xor13;
 $xor14 = $r ^ 80;
 $arrayidx15 = $x + 40 | 0;
 $5 = HEAP32[$arrayidx15 >> 2] | 0;
 $xor16 = $xor14 ^ $5;
 HEAP32[$arrayidx15 >> 2] = $xor16;
 $xor17 = $r ^ 96;
 $arrayidx18 = $x + 48 | 0;
 $6 = HEAP32[$arrayidx18 >> 2] | 0;
 $xor19 = $xor17 ^ $6;
 HEAP32[$arrayidx18 >> 2] = $xor19;
 $xor20 = $r ^ 112;
 $arrayidx21 = $x + 56 | 0;
 $7 = HEAP32[$arrayidx21 >> 2] | 0;
 $xor22 = $xor20 ^ $7;
 HEAP32[$arrayidx21 >> 2] = $xor22;
 $conv = $xor1 << 1;
 $mul = $conv & 510;
 $arrayidx24 = 39376 + ($mul << 2) | 0;
 $8 = HEAP32[$arrayidx24 >> 2] | 0;
 $add = $mul | 1;
 $arrayidx28 = 39376 + ($add << 2) | 0;
 $9 = HEAP32[$arrayidx28 >> 2] | 0;
 $10 = $xor4 >>> 7;
 $mul31 = $10 & 510;
 $arrayidx32 = 39376 + ($mul31 << 2) | 0;
 $11 = HEAP32[$arrayidx32 >> 2] | 0;
 $add36 = $mul31 | 1;
 $arrayidx37 = 39376 + ($add36 << 2) | 0;
 $12 = HEAP32[$arrayidx37 >> 2] | 0;
 $shl = $11 << 8;
 $shr = $12 >>> 24;
 $or = $shr | $shl;
 $shl38 = $12 << 8;
 $shr39 = $11 >>> 24;
 $or40 = $shl38 | $shr39;
 $xor41 = $or ^ $8;
 $xor42 = $or40 ^ $9;
 $13 = $xor7 >>> 15;
 $mul45 = $13 & 510;
 $arrayidx46 = 39376 + ($mul45 << 2) | 0;
 $14 = HEAP32[$arrayidx46 >> 2] | 0;
 $add50 = $mul45 | 1;
 $arrayidx51 = 39376 + ($add50 << 2) | 0;
 $15 = HEAP32[$arrayidx51 >> 2] | 0;
 $shl52 = $14 << 16;
 $shr53 = $15 >>> 16;
 $or54 = $shr53 | $shl52;
 $shl55 = $15 << 16;
 $shr56 = $14 >>> 16;
 $or57 = $shl55 | $shr56;
 $xor58 = $xor41 ^ $or54;
 $xor59 = $xor42 ^ $or57;
 $16 = $xor10 >>> 24;
 $mul62 = $16 << 1;
 $arrayidx63 = 39376 + ($mul62 << 2) | 0;
 $17 = HEAP32[$arrayidx63 >> 2] | 0;
 $add67 = $mul62 | 1;
 $arrayidx68 = 39376 + ($add67 << 2) | 0;
 $18 = HEAP32[$arrayidx68 >> 2] | 0;
 $shl69 = $17 << 24;
 $shr70 = $18 >>> 8;
 $or71 = $shr70 | $shl69;
 $shl72 = $18 << 24;
 $shr73 = $17 >>> 8;
 $or74 = $shl72 | $shr73;
 $xor75 = $xor58 ^ $or71;
 $xor76 = $xor59 ^ $or74;
 $arrayidx77 = $x + 36 | 0;
 $19 = HEAP8[$arrayidx77 >> 0] | 0;
 $conv78 = $19 & 255;
 $mul79 = $conv78 << 1;
 $arrayidx80 = 39376 + ($mul79 << 2) | 0;
 $20 = HEAP32[$arrayidx80 >> 2] | 0;
 $xor81 = $xor76 ^ $20;
 $add85 = $mul79 | 1;
 $arrayidx86 = 39376 + ($add85 << 2) | 0;
 $21 = HEAP32[$arrayidx86 >> 2] | 0;
 $xor87 = $xor75 ^ $21;
 $arrayidx88 = $x + 45 | 0;
 $22 = HEAP8[$arrayidx88 >> 0] | 0;
 $conv89 = $22 & 255;
 $mul90 = $conv89 << 1;
 $arrayidx91 = 39376 + ($mul90 << 2) | 0;
 $23 = HEAP32[$arrayidx91 >> 2] | 0;
 $add95 = $mul90 | 1;
 $arrayidx96 = 39376 + ($add95 << 2) | 0;
 $24 = HEAP32[$arrayidx96 >> 2] | 0;
 $shl97 = $23 << 8;
 $shr98 = $24 >>> 24;
 $or99 = $shr98 | $shl97;
 $shl100 = $24 << 8;
 $shr101 = $23 >>> 24;
 $or102 = $shl100 | $shr101;
 $xor103 = $xor81 ^ $or99;
 $xor104 = $xor87 ^ $or102;
 $arrayidx105 = $x + 54 | 0;
 $25 = HEAP8[$arrayidx105 >> 0] | 0;
 $conv106 = $25 & 255;
 $mul107 = $conv106 << 1;
 $arrayidx108 = 39376 + ($mul107 << 2) | 0;
 $26 = HEAP32[$arrayidx108 >> 2] | 0;
 $add112 = $mul107 | 1;
 $arrayidx113 = 39376 + ($add112 << 2) | 0;
 $27 = HEAP32[$arrayidx113 >> 2] | 0;
 $shl114 = $26 << 16;
 $shr115 = $27 >>> 16;
 $or116 = $shr115 | $shl114;
 $shl117 = $27 << 16;
 $shr118 = $26 >>> 16;
 $or119 = $shl117 | $shr118;
 $xor120 = $xor103 ^ $or116;
 $xor121 = $xor104 ^ $or119;
 $arrayidx122 = $x + 63 | 0;
 $28 = HEAP8[$arrayidx122 >> 0] | 0;
 $conv123 = $28 & 255;
 $mul124 = $conv123 << 1;
 $arrayidx125 = 39376 + ($mul124 << 2) | 0;
 $29 = HEAP32[$arrayidx125 >> 2] | 0;
 $add129 = $mul124 | 1;
 $arrayidx130 = 39376 + ($add129 << 2) | 0;
 $30 = HEAP32[$arrayidx130 >> 2] | 0;
 $shl131 = $29 << 24;
 $shr132 = $30 >>> 8;
 $or133 = $shr132 | $shl131;
 $shl134 = $30 << 24;
 $shr135 = $29 >>> 8;
 $or136 = $shl134 | $shr135;
 $xor137 = $xor120 ^ $or133;
 $xor138 = $xor121 ^ $or136;
 HEAP32[$y >> 2] = $xor138;
 $arrayidx140 = $y + 4 | 0;
 HEAP32[$arrayidx140 >> 2] = $xor137;
 $31 = HEAP8[$arrayidx3 >> 0] | 0;
 $conv142 = $31 & 255;
 $mul143 = $conv142 << 1;
 $arrayidx144 = 39376 + ($mul143 << 2) | 0;
 $32 = HEAP32[$arrayidx144 >> 2] | 0;
 $add148 = $mul143 | 1;
 $arrayidx149 = 39376 + ($add148 << 2) | 0;
 $33 = HEAP32[$arrayidx149 >> 2] | 0;
 $arrayidx150 = $x + 17 | 0;
 $34 = HEAP8[$arrayidx150 >> 0] | 0;
 $conv151 = $34 & 255;
 $mul152 = $conv151 << 1;
 $arrayidx153 = 39376 + ($mul152 << 2) | 0;
 $35 = HEAP32[$arrayidx153 >> 2] | 0;
 $add157 = $mul152 | 1;
 $arrayidx158 = 39376 + ($add157 << 2) | 0;
 $36 = HEAP32[$arrayidx158 >> 2] | 0;
 $shl159 = $35 << 8;
 $shr160 = $36 >>> 24;
 $or161 = $shr160 | $shl159;
 $shl162 = $36 << 8;
 $shr163 = $35 >>> 24;
 $or164 = $shl162 | $shr163;
 $xor165 = $or161 ^ $32;
 $xor166 = $or164 ^ $33;
 $arrayidx167 = $x + 26 | 0;
 $37 = HEAP8[$arrayidx167 >> 0] | 0;
 $conv168 = $37 & 255;
 $mul169 = $conv168 << 1;
 $arrayidx170 = 39376 + ($mul169 << 2) | 0;
 $38 = HEAP32[$arrayidx170 >> 2] | 0;
 $add174 = $mul169 | 1;
 $arrayidx175 = 39376 + ($add174 << 2) | 0;
 $39 = HEAP32[$arrayidx175 >> 2] | 0;
 $shl176 = $38 << 16;
 $shr177 = $39 >>> 16;
 $or178 = $shr177 | $shl176;
 $shl179 = $39 << 16;
 $shr180 = $38 >>> 16;
 $or181 = $shl179 | $shr180;
 $xor182 = $xor165 ^ $or178;
 $xor183 = $xor166 ^ $or181;
 $arrayidx184 = $x + 35 | 0;
 $40 = HEAP8[$arrayidx184 >> 0] | 0;
 $conv185 = $40 & 255;
 $mul186 = $conv185 << 1;
 $arrayidx187 = 39376 + ($mul186 << 2) | 0;
 $41 = HEAP32[$arrayidx187 >> 2] | 0;
 $add191 = $mul186 | 1;
 $arrayidx192 = 39376 + ($add191 << 2) | 0;
 $42 = HEAP32[$arrayidx192 >> 2] | 0;
 $shl193 = $41 << 24;
 $shr194 = $42 >>> 8;
 $or195 = $shr194 | $shl193;
 $shl196 = $42 << 24;
 $shr197 = $41 >>> 8;
 $or198 = $shl196 | $shr197;
 $xor199 = $xor182 ^ $or195;
 $xor200 = $xor183 ^ $or198;
 $arrayidx201 = $x + 44 | 0;
 $43 = HEAP8[$arrayidx201 >> 0] | 0;
 $conv202 = $43 & 255;
 $mul203 = $conv202 << 1;
 $arrayidx204 = 39376 + ($mul203 << 2) | 0;
 $44 = HEAP32[$arrayidx204 >> 2] | 0;
 $xor205 = $xor200 ^ $44;
 $add209 = $mul203 | 1;
 $arrayidx210 = 39376 + ($add209 << 2) | 0;
 $45 = HEAP32[$arrayidx210 >> 2] | 0;
 $xor211 = $xor199 ^ $45;
 $arrayidx212 = $x + 53 | 0;
 $46 = HEAP8[$arrayidx212 >> 0] | 0;
 $conv213 = $46 & 255;
 $mul214 = $conv213 << 1;
 $arrayidx215 = 39376 + ($mul214 << 2) | 0;
 $47 = HEAP32[$arrayidx215 >> 2] | 0;
 $add219 = $mul214 | 1;
 $arrayidx220 = 39376 + ($add219 << 2) | 0;
 $48 = HEAP32[$arrayidx220 >> 2] | 0;
 $shl221 = $47 << 8;
 $shr222 = $48 >>> 24;
 $or223 = $shr222 | $shl221;
 $shl224 = $48 << 8;
 $shr225 = $47 >>> 24;
 $or226 = $shl224 | $shr225;
 $xor227 = $xor205 ^ $or223;
 $xor228 = $xor211 ^ $or226;
 $arrayidx229 = $x + 62 | 0;
 $49 = HEAP8[$arrayidx229 >> 0] | 0;
 $conv230 = $49 & 255;
 $mul231 = $conv230 << 1;
 $arrayidx232 = 39376 + ($mul231 << 2) | 0;
 $50 = HEAP32[$arrayidx232 >> 2] | 0;
 $add236 = $mul231 | 1;
 $arrayidx237 = 39376 + ($add236 << 2) | 0;
 $51 = HEAP32[$arrayidx237 >> 2] | 0;
 $shl238 = $50 << 16;
 $shr239 = $51 >>> 16;
 $or240 = $shr239 | $shl238;
 $shl241 = $51 << 16;
 $shr242 = $50 >>> 16;
 $or243 = $shl241 | $shr242;
 $xor244 = $xor227 ^ $or240;
 $xor245 = $xor228 ^ $or243;
 $arrayidx246 = $x + 7 | 0;
 $52 = HEAP8[$arrayidx246 >> 0] | 0;
 $conv247 = $52 & 255;
 $mul248 = $conv247 << 1;
 $arrayidx249 = 39376 + ($mul248 << 2) | 0;
 $53 = HEAP32[$arrayidx249 >> 2] | 0;
 $add253 = $mul248 | 1;
 $arrayidx254 = 39376 + ($add253 << 2) | 0;
 $54 = HEAP32[$arrayidx254 >> 2] | 0;
 $shl255 = $53 << 24;
 $shr256 = $54 >>> 8;
 $or257 = $shr256 | $shl255;
 $shl258 = $54 << 24;
 $shr259 = $53 >>> 8;
 $or260 = $shl258 | $shr259;
 $xor261 = $xor244 ^ $or257;
 $xor262 = $xor245 ^ $or260;
 $arrayidx263 = $y + 8 | 0;
 HEAP32[$arrayidx263 >> 2] = $xor262;
 $arrayidx264 = $y + 12 | 0;
 HEAP32[$arrayidx264 >> 2] = $xor261;
 $55 = HEAP8[$arrayidx6 >> 0] | 0;
 $conv266 = $55 & 255;
 $mul267 = $conv266 << 1;
 $arrayidx268 = 39376 + ($mul267 << 2) | 0;
 $56 = HEAP32[$arrayidx268 >> 2] | 0;
 $add272 = $mul267 | 1;
 $arrayidx273 = 39376 + ($add272 << 2) | 0;
 $57 = HEAP32[$arrayidx273 >> 2] | 0;
 $arrayidx274 = $x + 25 | 0;
 $58 = HEAP8[$arrayidx274 >> 0] | 0;
 $conv275 = $58 & 255;
 $mul276 = $conv275 << 1;
 $arrayidx277 = 39376 + ($mul276 << 2) | 0;
 $59 = HEAP32[$arrayidx277 >> 2] | 0;
 $add281 = $mul276 | 1;
 $arrayidx282 = 39376 + ($add281 << 2) | 0;
 $60 = HEAP32[$arrayidx282 >> 2] | 0;
 $shl283 = $59 << 8;
 $shr284 = $60 >>> 24;
 $or285 = $shr284 | $shl283;
 $shl286 = $60 << 8;
 $shr287 = $59 >>> 24;
 $or288 = $shl286 | $shr287;
 $xor289 = $or285 ^ $56;
 $xor290 = $or288 ^ $57;
 $arrayidx291 = $x + 34 | 0;
 $61 = HEAP8[$arrayidx291 >> 0] | 0;
 $conv292 = $61 & 255;
 $mul293 = $conv292 << 1;
 $arrayidx294 = 39376 + ($mul293 << 2) | 0;
 $62 = HEAP32[$arrayidx294 >> 2] | 0;
 $add298 = $mul293 | 1;
 $arrayidx299 = 39376 + ($add298 << 2) | 0;
 $63 = HEAP32[$arrayidx299 >> 2] | 0;
 $shl300 = $62 << 16;
 $shr301 = $63 >>> 16;
 $or302 = $shr301 | $shl300;
 $shl303 = $63 << 16;
 $shr304 = $62 >>> 16;
 $or305 = $shl303 | $shr304;
 $xor306 = $xor289 ^ $or302;
 $xor307 = $xor290 ^ $or305;
 $arrayidx308 = $x + 43 | 0;
 $64 = HEAP8[$arrayidx308 >> 0] | 0;
 $conv309 = $64 & 255;
 $mul310 = $conv309 << 1;
 $arrayidx311 = 39376 + ($mul310 << 2) | 0;
 $65 = HEAP32[$arrayidx311 >> 2] | 0;
 $add315 = $mul310 | 1;
 $arrayidx316 = 39376 + ($add315 << 2) | 0;
 $66 = HEAP32[$arrayidx316 >> 2] | 0;
 $shl317 = $65 << 24;
 $shr318 = $66 >>> 8;
 $or319 = $shr318 | $shl317;
 $shl320 = $66 << 24;
 $shr321 = $65 >>> 8;
 $or322 = $shl320 | $shr321;
 $xor323 = $xor306 ^ $or319;
 $xor324 = $xor307 ^ $or322;
 $arrayidx325 = $x + 52 | 0;
 $67 = HEAP8[$arrayidx325 >> 0] | 0;
 $conv326 = $67 & 255;
 $mul327 = $conv326 << 1;
 $arrayidx328 = 39376 + ($mul327 << 2) | 0;
 $68 = HEAP32[$arrayidx328 >> 2] | 0;
 $xor329 = $xor324 ^ $68;
 $add333 = $mul327 | 1;
 $arrayidx334 = 39376 + ($add333 << 2) | 0;
 $69 = HEAP32[$arrayidx334 >> 2] | 0;
 $xor335 = $xor323 ^ $69;
 $arrayidx336 = $x + 61 | 0;
 $70 = HEAP8[$arrayidx336 >> 0] | 0;
 $conv337 = $70 & 255;
 $mul338 = $conv337 << 1;
 $arrayidx339 = 39376 + ($mul338 << 2) | 0;
 $71 = HEAP32[$arrayidx339 >> 2] | 0;
 $add343 = $mul338 | 1;
 $arrayidx344 = 39376 + ($add343 << 2) | 0;
 $72 = HEAP32[$arrayidx344 >> 2] | 0;
 $shl345 = $71 << 8;
 $shr346 = $72 >>> 24;
 $or347 = $shr346 | $shl345;
 $shl348 = $72 << 8;
 $shr349 = $71 >>> 24;
 $or350 = $shl348 | $shr349;
 $xor351 = $xor329 ^ $or347;
 $xor352 = $xor335 ^ $or350;
 $arrayidx353 = $x + 6 | 0;
 $73 = HEAP8[$arrayidx353 >> 0] | 0;
 $conv354 = $73 & 255;
 $mul355 = $conv354 << 1;
 $arrayidx356 = 39376 + ($mul355 << 2) | 0;
 $74 = HEAP32[$arrayidx356 >> 2] | 0;
 $add360 = $mul355 | 1;
 $arrayidx361 = 39376 + ($add360 << 2) | 0;
 $75 = HEAP32[$arrayidx361 >> 2] | 0;
 $shl362 = $74 << 16;
 $shr363 = $75 >>> 16;
 $or364 = $shr363 | $shl362;
 $shl365 = $75 << 16;
 $shr366 = $74 >>> 16;
 $or367 = $shl365 | $shr366;
 $xor368 = $xor351 ^ $or364;
 $xor369 = $xor352 ^ $or367;
 $arrayidx370 = $x + 15 | 0;
 $76 = HEAP8[$arrayidx370 >> 0] | 0;
 $conv371 = $76 & 255;
 $mul372 = $conv371 << 1;
 $arrayidx373 = 39376 + ($mul372 << 2) | 0;
 $77 = HEAP32[$arrayidx373 >> 2] | 0;
 $add377 = $mul372 | 1;
 $arrayidx378 = 39376 + ($add377 << 2) | 0;
 $78 = HEAP32[$arrayidx378 >> 2] | 0;
 $shl379 = $77 << 24;
 $shr380 = $78 >>> 8;
 $or381 = $shr380 | $shl379;
 $shl382 = $78 << 24;
 $shr383 = $77 >>> 8;
 $or384 = $shl382 | $shr383;
 $xor385 = $xor368 ^ $or381;
 $xor386 = $xor369 ^ $or384;
 $arrayidx387 = $y + 16 | 0;
 HEAP32[$arrayidx387 >> 2] = $xor386;
 $arrayidx388 = $y + 20 | 0;
 HEAP32[$arrayidx388 >> 2] = $xor385;
 $79 = HEAP8[$arrayidx9 >> 0] | 0;
 $conv390 = $79 & 255;
 $mul391 = $conv390 << 1;
 $arrayidx392 = 39376 + ($mul391 << 2) | 0;
 $80 = HEAP32[$arrayidx392 >> 2] | 0;
 $add396 = $mul391 | 1;
 $arrayidx397 = 39376 + ($add396 << 2) | 0;
 $81 = HEAP32[$arrayidx397 >> 2] | 0;
 $arrayidx398 = $x + 33 | 0;
 $82 = HEAP8[$arrayidx398 >> 0] | 0;
 $conv399 = $82 & 255;
 $mul400 = $conv399 << 1;
 $arrayidx401 = 39376 + ($mul400 << 2) | 0;
 $83 = HEAP32[$arrayidx401 >> 2] | 0;
 $add405 = $mul400 | 1;
 $arrayidx406 = 39376 + ($add405 << 2) | 0;
 $84 = HEAP32[$arrayidx406 >> 2] | 0;
 $shl407 = $83 << 8;
 $shr408 = $84 >>> 24;
 $or409 = $shr408 | $shl407;
 $shl410 = $84 << 8;
 $shr411 = $83 >>> 24;
 $or412 = $shl410 | $shr411;
 $xor413 = $or409 ^ $80;
 $xor414 = $or412 ^ $81;
 $arrayidx415 = $x + 42 | 0;
 $85 = HEAP8[$arrayidx415 >> 0] | 0;
 $conv416 = $85 & 255;
 $mul417 = $conv416 << 1;
 $arrayidx418 = 39376 + ($mul417 << 2) | 0;
 $86 = HEAP32[$arrayidx418 >> 2] | 0;
 $add422 = $mul417 | 1;
 $arrayidx423 = 39376 + ($add422 << 2) | 0;
 $87 = HEAP32[$arrayidx423 >> 2] | 0;
 $shl424 = $86 << 16;
 $shr425 = $87 >>> 16;
 $or426 = $shr425 | $shl424;
 $shl427 = $87 << 16;
 $shr428 = $86 >>> 16;
 $or429 = $shl427 | $shr428;
 $xor430 = $xor413 ^ $or426;
 $xor431 = $xor414 ^ $or429;
 $arrayidx432 = $x + 51 | 0;
 $88 = HEAP8[$arrayidx432 >> 0] | 0;
 $conv433 = $88 & 255;
 $mul434 = $conv433 << 1;
 $arrayidx435 = 39376 + ($mul434 << 2) | 0;
 $89 = HEAP32[$arrayidx435 >> 2] | 0;
 $add439 = $mul434 | 1;
 $arrayidx440 = 39376 + ($add439 << 2) | 0;
 $90 = HEAP32[$arrayidx440 >> 2] | 0;
 $shl441 = $89 << 24;
 $shr442 = $90 >>> 8;
 $or443 = $shr442 | $shl441;
 $shl444 = $90 << 24;
 $shr445 = $89 >>> 8;
 $or446 = $shl444 | $shr445;
 $xor447 = $xor430 ^ $or443;
 $xor448 = $xor431 ^ $or446;
 $arrayidx449 = $x + 60 | 0;
 $91 = HEAP8[$arrayidx449 >> 0] | 0;
 $conv450 = $91 & 255;
 $mul451 = $conv450 << 1;
 $arrayidx452 = 39376 + ($mul451 << 2) | 0;
 $92 = HEAP32[$arrayidx452 >> 2] | 0;
 $xor453 = $xor448 ^ $92;
 $add457 = $mul451 | 1;
 $arrayidx458 = 39376 + ($add457 << 2) | 0;
 $93 = HEAP32[$arrayidx458 >> 2] | 0;
 $xor459 = $xor447 ^ $93;
 $arrayidx460 = $x + 5 | 0;
 $94 = HEAP8[$arrayidx460 >> 0] | 0;
 $conv461 = $94 & 255;
 $mul462 = $conv461 << 1;
 $arrayidx463 = 39376 + ($mul462 << 2) | 0;
 $95 = HEAP32[$arrayidx463 >> 2] | 0;
 $add467 = $mul462 | 1;
 $arrayidx468 = 39376 + ($add467 << 2) | 0;
 $96 = HEAP32[$arrayidx468 >> 2] | 0;
 $shl469 = $95 << 8;
 $shr470 = $96 >>> 24;
 $or471 = $shr470 | $shl469;
 $shl472 = $96 << 8;
 $shr473 = $95 >>> 24;
 $or474 = $shl472 | $shr473;
 $xor475 = $xor453 ^ $or471;
 $xor476 = $xor459 ^ $or474;
 $arrayidx477 = $x + 14 | 0;
 $97 = HEAP8[$arrayidx477 >> 0] | 0;
 $conv478 = $97 & 255;
 $mul479 = $conv478 << 1;
 $arrayidx480 = 39376 + ($mul479 << 2) | 0;
 $98 = HEAP32[$arrayidx480 >> 2] | 0;
 $add484 = $mul479 | 1;
 $arrayidx485 = 39376 + ($add484 << 2) | 0;
 $99 = HEAP32[$arrayidx485 >> 2] | 0;
 $shl486 = $98 << 16;
 $shr487 = $99 >>> 16;
 $or488 = $shr487 | $shl486;
 $shl489 = $99 << 16;
 $shr490 = $98 >>> 16;
 $or491 = $shl489 | $shr490;
 $xor492 = $xor475 ^ $or488;
 $xor493 = $xor476 ^ $or491;
 $arrayidx494 = $x + 23 | 0;
 $100 = HEAP8[$arrayidx494 >> 0] | 0;
 $conv495 = $100 & 255;
 $mul496 = $conv495 << 1;
 $arrayidx497 = 39376 + ($mul496 << 2) | 0;
 $101 = HEAP32[$arrayidx497 >> 2] | 0;
 $add501 = $mul496 | 1;
 $arrayidx502 = 39376 + ($add501 << 2) | 0;
 $102 = HEAP32[$arrayidx502 >> 2] | 0;
 $shl503 = $101 << 24;
 $shr504 = $102 >>> 8;
 $or505 = $shr504 | $shl503;
 $shl506 = $102 << 24;
 $shr507 = $101 >>> 8;
 $or508 = $shl506 | $shr507;
 $xor509 = $xor492 ^ $or505;
 $xor510 = $xor493 ^ $or508;
 $arrayidx511 = $y + 24 | 0;
 HEAP32[$arrayidx511 >> 2] = $xor510;
 $arrayidx512 = $y + 28 | 0;
 HEAP32[$arrayidx512 >> 2] = $xor509;
 $103 = HEAP8[$arrayidx12 >> 0] | 0;
 $conv514 = $103 & 255;
 $mul515 = $conv514 << 1;
 $arrayidx516 = 39376 + ($mul515 << 2) | 0;
 $104 = HEAP32[$arrayidx516 >> 2] | 0;
 $add520 = $mul515 | 1;
 $arrayidx521 = 39376 + ($add520 << 2) | 0;
 $105 = HEAP32[$arrayidx521 >> 2] | 0;
 $arrayidx522 = $x + 41 | 0;
 $106 = HEAP8[$arrayidx522 >> 0] | 0;
 $conv523 = $106 & 255;
 $mul524 = $conv523 << 1;
 $arrayidx525 = 39376 + ($mul524 << 2) | 0;
 $107 = HEAP32[$arrayidx525 >> 2] | 0;
 $add529 = $mul524 | 1;
 $arrayidx530 = 39376 + ($add529 << 2) | 0;
 $108 = HEAP32[$arrayidx530 >> 2] | 0;
 $shl531 = $107 << 8;
 $shr532 = $108 >>> 24;
 $or533 = $shr532 | $shl531;
 $shl534 = $108 << 8;
 $shr535 = $107 >>> 24;
 $or536 = $shl534 | $shr535;
 $xor537 = $or533 ^ $104;
 $xor538 = $or536 ^ $105;
 $arrayidx539 = $x + 50 | 0;
 $109 = HEAP8[$arrayidx539 >> 0] | 0;
 $conv540 = $109 & 255;
 $mul541 = $conv540 << 1;
 $arrayidx542 = 39376 + ($mul541 << 2) | 0;
 $110 = HEAP32[$arrayidx542 >> 2] | 0;
 $add546 = $mul541 | 1;
 $arrayidx547 = 39376 + ($add546 << 2) | 0;
 $111 = HEAP32[$arrayidx547 >> 2] | 0;
 $shl548 = $110 << 16;
 $shr549 = $111 >>> 16;
 $or550 = $shr549 | $shl548;
 $shl551 = $111 << 16;
 $shr552 = $110 >>> 16;
 $or553 = $shl551 | $shr552;
 $xor554 = $xor537 ^ $or550;
 $xor555 = $xor538 ^ $or553;
 $arrayidx556 = $x + 59 | 0;
 $112 = HEAP8[$arrayidx556 >> 0] | 0;
 $conv557 = $112 & 255;
 $mul558 = $conv557 << 1;
 $arrayidx559 = 39376 + ($mul558 << 2) | 0;
 $113 = HEAP32[$arrayidx559 >> 2] | 0;
 $add563 = $mul558 | 1;
 $arrayidx564 = 39376 + ($add563 << 2) | 0;
 $114 = HEAP32[$arrayidx564 >> 2] | 0;
 $shl565 = $113 << 24;
 $shr566 = $114 >>> 8;
 $or567 = $shr566 | $shl565;
 $shl568 = $114 << 24;
 $shr569 = $113 >>> 8;
 $or570 = $shl568 | $shr569;
 $xor571 = $xor554 ^ $or567;
 $xor572 = $xor555 ^ $or570;
 $arrayidx573 = $x + 4 | 0;
 $115 = HEAP8[$arrayidx573 >> 0] | 0;
 $conv574 = $115 & 255;
 $mul575 = $conv574 << 1;
 $arrayidx576 = 39376 + ($mul575 << 2) | 0;
 $116 = HEAP32[$arrayidx576 >> 2] | 0;
 $xor577 = $xor572 ^ $116;
 $add581 = $mul575 | 1;
 $arrayidx582 = 39376 + ($add581 << 2) | 0;
 $117 = HEAP32[$arrayidx582 >> 2] | 0;
 $xor583 = $xor571 ^ $117;
 $arrayidx584 = $x + 13 | 0;
 $118 = HEAP8[$arrayidx584 >> 0] | 0;
 $conv585 = $118 & 255;
 $mul586 = $conv585 << 1;
 $arrayidx587 = 39376 + ($mul586 << 2) | 0;
 $119 = HEAP32[$arrayidx587 >> 2] | 0;
 $add591 = $mul586 | 1;
 $arrayidx592 = 39376 + ($add591 << 2) | 0;
 $120 = HEAP32[$arrayidx592 >> 2] | 0;
 $shl593 = $119 << 8;
 $shr594 = $120 >>> 24;
 $or595 = $shr594 | $shl593;
 $shl596 = $120 << 8;
 $shr597 = $119 >>> 24;
 $or598 = $shl596 | $shr597;
 $xor599 = $xor577 ^ $or595;
 $xor600 = $xor583 ^ $or598;
 $arrayidx601 = $x + 22 | 0;
 $121 = HEAP8[$arrayidx601 >> 0] | 0;
 $conv602 = $121 & 255;
 $mul603 = $conv602 << 1;
 $arrayidx604 = 39376 + ($mul603 << 2) | 0;
 $122 = HEAP32[$arrayidx604 >> 2] | 0;
 $add608 = $mul603 | 1;
 $arrayidx609 = 39376 + ($add608 << 2) | 0;
 $123 = HEAP32[$arrayidx609 >> 2] | 0;
 $shl610 = $122 << 16;
 $shr611 = $123 >>> 16;
 $or612 = $shr611 | $shl610;
 $shl613 = $123 << 16;
 $shr614 = $122 >>> 16;
 $or615 = $shl613 | $shr614;
 $xor616 = $xor599 ^ $or612;
 $xor617 = $xor600 ^ $or615;
 $arrayidx618 = $x + 31 | 0;
 $124 = HEAP8[$arrayidx618 >> 0] | 0;
 $conv619 = $124 & 255;
 $mul620 = $conv619 << 1;
 $arrayidx621 = 39376 + ($mul620 << 2) | 0;
 $125 = HEAP32[$arrayidx621 >> 2] | 0;
 $add625 = $mul620 | 1;
 $arrayidx626 = 39376 + ($add625 << 2) | 0;
 $126 = HEAP32[$arrayidx626 >> 2] | 0;
 $shl627 = $125 << 24;
 $shr628 = $126 >>> 8;
 $or629 = $shr628 | $shl627;
 $shl630 = $126 << 24;
 $shr631 = $125 >>> 8;
 $or632 = $shl630 | $shr631;
 $xor633 = $xor616 ^ $or629;
 $xor634 = $xor617 ^ $or632;
 $arrayidx635 = $y + 32 | 0;
 HEAP32[$arrayidx635 >> 2] = $xor634;
 $arrayidx636 = $y + 36 | 0;
 HEAP32[$arrayidx636 >> 2] = $xor633;
 $127 = HEAP8[$arrayidx15 >> 0] | 0;
 $conv638 = $127 & 255;
 $mul639 = $conv638 << 1;
 $arrayidx640 = 39376 + ($mul639 << 2) | 0;
 $128 = HEAP32[$arrayidx640 >> 2] | 0;
 $add644 = $mul639 | 1;
 $arrayidx645 = 39376 + ($add644 << 2) | 0;
 $129 = HEAP32[$arrayidx645 >> 2] | 0;
 $arrayidx646 = $x + 49 | 0;
 $130 = HEAP8[$arrayidx646 >> 0] | 0;
 $conv647 = $130 & 255;
 $mul648 = $conv647 << 1;
 $arrayidx649 = 39376 + ($mul648 << 2) | 0;
 $131 = HEAP32[$arrayidx649 >> 2] | 0;
 $add653 = $mul648 | 1;
 $arrayidx654 = 39376 + ($add653 << 2) | 0;
 $132 = HEAP32[$arrayidx654 >> 2] | 0;
 $shl655 = $131 << 8;
 $shr656 = $132 >>> 24;
 $or657 = $shr656 | $shl655;
 $shl658 = $132 << 8;
 $shr659 = $131 >>> 24;
 $or660 = $shl658 | $shr659;
 $xor661 = $or657 ^ $128;
 $xor662 = $or660 ^ $129;
 $arrayidx663 = $x + 58 | 0;
 $133 = HEAP8[$arrayidx663 >> 0] | 0;
 $conv664 = $133 & 255;
 $mul665 = $conv664 << 1;
 $arrayidx666 = 39376 + ($mul665 << 2) | 0;
 $134 = HEAP32[$arrayidx666 >> 2] | 0;
 $add670 = $mul665 | 1;
 $arrayidx671 = 39376 + ($add670 << 2) | 0;
 $135 = HEAP32[$arrayidx671 >> 2] | 0;
 $shl672 = $134 << 16;
 $shr673 = $135 >>> 16;
 $or674 = $shr673 | $shl672;
 $shl675 = $135 << 16;
 $shr676 = $134 >>> 16;
 $or677 = $shl675 | $shr676;
 $xor678 = $xor661 ^ $or674;
 $xor679 = $xor662 ^ $or677;
 $arrayidx680 = $x + 3 | 0;
 $136 = HEAP8[$arrayidx680 >> 0] | 0;
 $conv681 = $136 & 255;
 $mul682 = $conv681 << 1;
 $arrayidx683 = 39376 + ($mul682 << 2) | 0;
 $137 = HEAP32[$arrayidx683 >> 2] | 0;
 $add687 = $mul682 | 1;
 $arrayidx688 = 39376 + ($add687 << 2) | 0;
 $138 = HEAP32[$arrayidx688 >> 2] | 0;
 $shl689 = $137 << 24;
 $shr690 = $138 >>> 8;
 $or691 = $shr690 | $shl689;
 $shl692 = $138 << 24;
 $shr693 = $137 >>> 8;
 $or694 = $shl692 | $shr693;
 $xor695 = $xor678 ^ $or691;
 $xor696 = $xor679 ^ $or694;
 $arrayidx697 = $x + 12 | 0;
 $139 = HEAP8[$arrayidx697 >> 0] | 0;
 $conv698 = $139 & 255;
 $mul699 = $conv698 << 1;
 $arrayidx700 = 39376 + ($mul699 << 2) | 0;
 $140 = HEAP32[$arrayidx700 >> 2] | 0;
 $xor701 = $xor696 ^ $140;
 $add705 = $mul699 | 1;
 $arrayidx706 = 39376 + ($add705 << 2) | 0;
 $141 = HEAP32[$arrayidx706 >> 2] | 0;
 $xor707 = $xor695 ^ $141;
 $arrayidx708 = $x + 21 | 0;
 $142 = HEAP8[$arrayidx708 >> 0] | 0;
 $conv709 = $142 & 255;
 $mul710 = $conv709 << 1;
 $arrayidx711 = 39376 + ($mul710 << 2) | 0;
 $143 = HEAP32[$arrayidx711 >> 2] | 0;
 $add715 = $mul710 | 1;
 $arrayidx716 = 39376 + ($add715 << 2) | 0;
 $144 = HEAP32[$arrayidx716 >> 2] | 0;
 $shl717 = $143 << 8;
 $shr718 = $144 >>> 24;
 $or719 = $shr718 | $shl717;
 $shl720 = $144 << 8;
 $shr721 = $143 >>> 24;
 $or722 = $shl720 | $shr721;
 $xor723 = $xor701 ^ $or719;
 $xor724 = $xor707 ^ $or722;
 $arrayidx725 = $x + 30 | 0;
 $145 = HEAP8[$arrayidx725 >> 0] | 0;
 $conv726 = $145 & 255;
 $mul727 = $conv726 << 1;
 $arrayidx728 = 39376 + ($mul727 << 2) | 0;
 $146 = HEAP32[$arrayidx728 >> 2] | 0;
 $add732 = $mul727 | 1;
 $arrayidx733 = 39376 + ($add732 << 2) | 0;
 $147 = HEAP32[$arrayidx733 >> 2] | 0;
 $shl734 = $146 << 16;
 $shr735 = $147 >>> 16;
 $or736 = $shr735 | $shl734;
 $shl737 = $147 << 16;
 $shr738 = $146 >>> 16;
 $or739 = $shl737 | $shr738;
 $xor740 = $xor723 ^ $or736;
 $xor741 = $xor724 ^ $or739;
 $arrayidx742 = $x + 39 | 0;
 $148 = HEAP8[$arrayidx742 >> 0] | 0;
 $conv743 = $148 & 255;
 $mul744 = $conv743 << 1;
 $arrayidx745 = 39376 + ($mul744 << 2) | 0;
 $149 = HEAP32[$arrayidx745 >> 2] | 0;
 $add749 = $mul744 | 1;
 $arrayidx750 = 39376 + ($add749 << 2) | 0;
 $150 = HEAP32[$arrayidx750 >> 2] | 0;
 $shl751 = $149 << 24;
 $shr752 = $150 >>> 8;
 $or753 = $shr752 | $shl751;
 $shl754 = $150 << 24;
 $shr755 = $149 >>> 8;
 $or756 = $shl754 | $shr755;
 $xor757 = $xor740 ^ $or753;
 $xor758 = $xor741 ^ $or756;
 $arrayidx759 = $y + 40 | 0;
 HEAP32[$arrayidx759 >> 2] = $xor758;
 $arrayidx760 = $y + 44 | 0;
 HEAP32[$arrayidx760 >> 2] = $xor757;
 $151 = HEAP8[$arrayidx18 >> 0] | 0;
 $conv762 = $151 & 255;
 $mul763 = $conv762 << 1;
 $arrayidx764 = 39376 + ($mul763 << 2) | 0;
 $152 = HEAP32[$arrayidx764 >> 2] | 0;
 $add768 = $mul763 | 1;
 $arrayidx769 = 39376 + ($add768 << 2) | 0;
 $153 = HEAP32[$arrayidx769 >> 2] | 0;
 $arrayidx770 = $x + 57 | 0;
 $154 = HEAP8[$arrayidx770 >> 0] | 0;
 $conv771 = $154 & 255;
 $mul772 = $conv771 << 1;
 $arrayidx773 = 39376 + ($mul772 << 2) | 0;
 $155 = HEAP32[$arrayidx773 >> 2] | 0;
 $add777 = $mul772 | 1;
 $arrayidx778 = 39376 + ($add777 << 2) | 0;
 $156 = HEAP32[$arrayidx778 >> 2] | 0;
 $shl779 = $155 << 8;
 $shr780 = $156 >>> 24;
 $or781 = $shr780 | $shl779;
 $shl782 = $156 << 8;
 $shr783 = $155 >>> 24;
 $or784 = $shl782 | $shr783;
 $xor785 = $or781 ^ $152;
 $xor786 = $or784 ^ $153;
 $arrayidx787 = $x + 2 | 0;
 $157 = HEAP8[$arrayidx787 >> 0] | 0;
 $conv788 = $157 & 255;
 $mul789 = $conv788 << 1;
 $arrayidx790 = 39376 + ($mul789 << 2) | 0;
 $158 = HEAP32[$arrayidx790 >> 2] | 0;
 $add794 = $mul789 | 1;
 $arrayidx795 = 39376 + ($add794 << 2) | 0;
 $159 = HEAP32[$arrayidx795 >> 2] | 0;
 $shl796 = $158 << 16;
 $shr797 = $159 >>> 16;
 $or798 = $shr797 | $shl796;
 $shl799 = $159 << 16;
 $shr800 = $158 >>> 16;
 $or801 = $shl799 | $shr800;
 $xor802 = $xor785 ^ $or798;
 $xor803 = $xor786 ^ $or801;
 $arrayidx804 = $x + 11 | 0;
 $160 = HEAP8[$arrayidx804 >> 0] | 0;
 $conv805 = $160 & 255;
 $mul806 = $conv805 << 1;
 $arrayidx807 = 39376 + ($mul806 << 2) | 0;
 $161 = HEAP32[$arrayidx807 >> 2] | 0;
 $add811 = $mul806 | 1;
 $arrayidx812 = 39376 + ($add811 << 2) | 0;
 $162 = HEAP32[$arrayidx812 >> 2] | 0;
 $shl813 = $161 << 24;
 $shr814 = $162 >>> 8;
 $or815 = $shr814 | $shl813;
 $shl816 = $162 << 24;
 $shr817 = $161 >>> 8;
 $or818 = $shl816 | $shr817;
 $xor819 = $xor802 ^ $or815;
 $xor820 = $xor803 ^ $or818;
 $arrayidx821 = $x + 20 | 0;
 $163 = HEAP8[$arrayidx821 >> 0] | 0;
 $conv822 = $163 & 255;
 $mul823 = $conv822 << 1;
 $arrayidx824 = 39376 + ($mul823 << 2) | 0;
 $164 = HEAP32[$arrayidx824 >> 2] | 0;
 $xor825 = $xor820 ^ $164;
 $add829 = $mul823 | 1;
 $arrayidx830 = 39376 + ($add829 << 2) | 0;
 $165 = HEAP32[$arrayidx830 >> 2] | 0;
 $xor831 = $xor819 ^ $165;
 $arrayidx832 = $x + 29 | 0;
 $166 = HEAP8[$arrayidx832 >> 0] | 0;
 $conv833 = $166 & 255;
 $mul834 = $conv833 << 1;
 $arrayidx835 = 39376 + ($mul834 << 2) | 0;
 $167 = HEAP32[$arrayidx835 >> 2] | 0;
 $add839 = $mul834 | 1;
 $arrayidx840 = 39376 + ($add839 << 2) | 0;
 $168 = HEAP32[$arrayidx840 >> 2] | 0;
 $shl841 = $167 << 8;
 $shr842 = $168 >>> 24;
 $or843 = $shr842 | $shl841;
 $shl844 = $168 << 8;
 $shr845 = $167 >>> 24;
 $or846 = $shl844 | $shr845;
 $xor847 = $xor825 ^ $or843;
 $xor848 = $xor831 ^ $or846;
 $arrayidx849 = $x + 38 | 0;
 $169 = HEAP8[$arrayidx849 >> 0] | 0;
 $conv850 = $169 & 255;
 $mul851 = $conv850 << 1;
 $arrayidx852 = 39376 + ($mul851 << 2) | 0;
 $170 = HEAP32[$arrayidx852 >> 2] | 0;
 $add856 = $mul851 | 1;
 $arrayidx857 = 39376 + ($add856 << 2) | 0;
 $171 = HEAP32[$arrayidx857 >> 2] | 0;
 $shl858 = $170 << 16;
 $shr859 = $171 >>> 16;
 $or860 = $shr859 | $shl858;
 $shl861 = $171 << 16;
 $shr862 = $170 >>> 16;
 $or863 = $shl861 | $shr862;
 $xor864 = $xor847 ^ $or860;
 $xor865 = $xor848 ^ $or863;
 $arrayidx866 = $x + 47 | 0;
 $172 = HEAP8[$arrayidx866 >> 0] | 0;
 $conv867 = $172 & 255;
 $mul868 = $conv867 << 1;
 $arrayidx869 = 39376 + ($mul868 << 2) | 0;
 $173 = HEAP32[$arrayidx869 >> 2] | 0;
 $add873 = $mul868 | 1;
 $arrayidx874 = 39376 + ($add873 << 2) | 0;
 $174 = HEAP32[$arrayidx874 >> 2] | 0;
 $shl875 = $173 << 24;
 $shr876 = $174 >>> 8;
 $or877 = $shr876 | $shl875;
 $shl878 = $174 << 24;
 $shr879 = $173 >>> 8;
 $or880 = $shl878 | $shr879;
 $xor881 = $xor864 ^ $or877;
 $xor882 = $xor865 ^ $or880;
 $arrayidx883 = $y + 48 | 0;
 HEAP32[$arrayidx883 >> 2] = $xor882;
 $arrayidx884 = $y + 52 | 0;
 HEAP32[$arrayidx884 >> 2] = $xor881;
 $175 = HEAP8[$arrayidx21 >> 0] | 0;
 $conv886 = $175 & 255;
 $mul887 = $conv886 << 1;
 $arrayidx888 = 39376 + ($mul887 << 2) | 0;
 $176 = HEAP32[$arrayidx888 >> 2] | 0;
 $add892 = $mul887 | 1;
 $arrayidx893 = 39376 + ($add892 << 2) | 0;
 $177 = HEAP32[$arrayidx893 >> 2] | 0;
 $arrayidx894 = $x + 1 | 0;
 $178 = HEAP8[$arrayidx894 >> 0] | 0;
 $conv895 = $178 & 255;
 $mul896 = $conv895 << 1;
 $arrayidx897 = 39376 + ($mul896 << 2) | 0;
 $179 = HEAP32[$arrayidx897 >> 2] | 0;
 $add901 = $mul896 | 1;
 $arrayidx902 = 39376 + ($add901 << 2) | 0;
 $180 = HEAP32[$arrayidx902 >> 2] | 0;
 $shl903 = $179 << 8;
 $shr904 = $180 >>> 24;
 $or905 = $shr904 | $shl903;
 $shl906 = $180 << 8;
 $shr907 = $179 >>> 24;
 $or908 = $shl906 | $shr907;
 $xor909 = $or905 ^ $176;
 $xor910 = $or908 ^ $177;
 $arrayidx911 = $x + 10 | 0;
 $181 = HEAP8[$arrayidx911 >> 0] | 0;
 $conv912 = $181 & 255;
 $mul913 = $conv912 << 1;
 $arrayidx914 = 39376 + ($mul913 << 2) | 0;
 $182 = HEAP32[$arrayidx914 >> 2] | 0;
 $add918 = $mul913 | 1;
 $arrayidx919 = 39376 + ($add918 << 2) | 0;
 $183 = HEAP32[$arrayidx919 >> 2] | 0;
 $shl920 = $182 << 16;
 $shr921 = $183 >>> 16;
 $or922 = $shr921 | $shl920;
 $shl923 = $183 << 16;
 $shr924 = $182 >>> 16;
 $or925 = $shl923 | $shr924;
 $xor926 = $xor909 ^ $or922;
 $xor927 = $xor910 ^ $or925;
 $arrayidx928 = $x + 19 | 0;
 $184 = HEAP8[$arrayidx928 >> 0] | 0;
 $conv929 = $184 & 255;
 $mul930 = $conv929 << 1;
 $arrayidx931 = 39376 + ($mul930 << 2) | 0;
 $185 = HEAP32[$arrayidx931 >> 2] | 0;
 $add935 = $mul930 | 1;
 $arrayidx936 = 39376 + ($add935 << 2) | 0;
 $186 = HEAP32[$arrayidx936 >> 2] | 0;
 $shl937 = $185 << 24;
 $shr938 = $186 >>> 8;
 $or939 = $shr938 | $shl937;
 $shl940 = $186 << 24;
 $shr941 = $185 >>> 8;
 $or942 = $shl940 | $shr941;
 $xor943 = $xor926 ^ $or939;
 $xor944 = $xor927 ^ $or942;
 $arrayidx945 = $x + 28 | 0;
 $187 = HEAP8[$arrayidx945 >> 0] | 0;
 $conv946 = $187 & 255;
 $mul947 = $conv946 << 1;
 $arrayidx948 = 39376 + ($mul947 << 2) | 0;
 $188 = HEAP32[$arrayidx948 >> 2] | 0;
 $xor949 = $xor944 ^ $188;
 $add953 = $mul947 | 1;
 $arrayidx954 = 39376 + ($add953 << 2) | 0;
 $189 = HEAP32[$arrayidx954 >> 2] | 0;
 $xor955 = $xor943 ^ $189;
 $arrayidx956 = $x + 37 | 0;
 $190 = HEAP8[$arrayidx956 >> 0] | 0;
 $conv957 = $190 & 255;
 $mul958 = $conv957 << 1;
 $arrayidx959 = 39376 + ($mul958 << 2) | 0;
 $191 = HEAP32[$arrayidx959 >> 2] | 0;
 $add963 = $mul958 | 1;
 $arrayidx964 = 39376 + ($add963 << 2) | 0;
 $192 = HEAP32[$arrayidx964 >> 2] | 0;
 $shl965 = $191 << 8;
 $shr966 = $192 >>> 24;
 $or967 = $shr966 | $shl965;
 $shl968 = $192 << 8;
 $shr969 = $191 >>> 24;
 $or970 = $shl968 | $shr969;
 $xor971 = $xor949 ^ $or967;
 $xor972 = $xor955 ^ $or970;
 $arrayidx973 = $x + 46 | 0;
 $193 = HEAP8[$arrayidx973 >> 0] | 0;
 $conv974 = $193 & 255;
 $mul975 = $conv974 << 1;
 $arrayidx976 = 39376 + ($mul975 << 2) | 0;
 $194 = HEAP32[$arrayidx976 >> 2] | 0;
 $add980 = $mul975 | 1;
 $arrayidx981 = 39376 + ($add980 << 2) | 0;
 $195 = HEAP32[$arrayidx981 >> 2] | 0;
 $shl982 = $194 << 16;
 $shr983 = $195 >>> 16;
 $or984 = $shr983 | $shl982;
 $shl985 = $195 << 16;
 $shr986 = $194 >>> 16;
 $or987 = $shl985 | $shr986;
 $xor988 = $xor971 ^ $or984;
 $xor989 = $xor972 ^ $or987;
 $arrayidx990 = $x + 55 | 0;
 $196 = HEAP8[$arrayidx990 >> 0] | 0;
 $conv991 = $196 & 255;
 $mul992 = $conv991 << 1;
 $arrayidx993 = 39376 + ($mul992 << 2) | 0;
 $197 = HEAP32[$arrayidx993 >> 2] | 0;
 $add997 = $mul992 | 1;
 $arrayidx998 = 39376 + ($add997 << 2) | 0;
 $198 = HEAP32[$arrayidx998 >> 2] | 0;
 $shl999 = $197 << 24;
 $shr1000 = $198 >>> 8;
 $or1001 = $shr1000 | $shl999;
 $shl1002 = $198 << 24;
 $shr1003 = $197 >>> 8;
 $or1004 = $shl1002 | $shr1003;
 $xor1005 = $xor988 ^ $or1001;
 $xor1006 = $xor989 ^ $or1004;
 $arrayidx1007 = $y + 56 | 0;
 HEAP32[$arrayidx1007 >> 2] = $xor1006;
 $arrayidx1008 = $y + 60 | 0;
 HEAP32[$arrayidx1008 >> 2] = $xor1005;
 return;
}

function _aesb_pseudo_round($in, $out, $expandedKey) {
 $in = $in | 0;
 $out = $out | 0;
 $expandedKey = $expandedKey | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr1 = 0, $add$ptr184 = 0, $add$ptr276 = 0, $add$ptr3 = 0, $add$ptr368 = 0, $add$ptr460 = 0, $add$ptr5 = 0, $add$ptr552 = 0, $add$ptr644 = 0, $add$ptr736 = 0, $add$ptr828 = 0, $add$ptr92 = 0, $add$ptr923 = 0, $add$ptr925 = 0, $add$ptr927 = 0, $and = 0;
 var $and100 = 0, $and105 = 0, $and119 = 0, $and12 = 0, $and123 = 0, $and128 = 0, $and142 = 0, $and146 = 0, $and151 = 0, $and16 = 0, $and165 = 0, $and169 = 0, $and174 = 0, $and188 = 0, $and192 = 0, $and197 = 0, $and211 = 0, $and215 = 0, $and220 = 0, $and234 = 0;
 var $and238 = 0, $and243 = 0, $and257 = 0, $and261 = 0, $and266 = 0, $and280 = 0, $and284 = 0, $and289 = 0, $and29 = 0, $and303 = 0, $and307 = 0, $and312 = 0, $and326 = 0, $and33 = 0, $and330 = 0, $and335 = 0, $and349 = 0, $and353 = 0, $and358 = 0, $and372 = 0;
 var $and376 = 0, $and38 = 0, $and381 = 0, $and395 = 0, $and399 = 0, $and404 = 0, $and418 = 0, $and422 = 0, $and427 = 0, $and441 = 0, $and445 = 0, $and450 = 0, $and464 = 0, $and468 = 0, $and473 = 0, $and487 = 0, $and491 = 0, $and496 = 0, $and51 = 0, $and510 = 0;
 var $and514 = 0, $and519 = 0, $and533 = 0, $and537 = 0, $and542 = 0, $and55 = 0, $and556 = 0, $and560 = 0, $and565 = 0, $and579 = 0, $and583 = 0, $and588 = 0, $and60 = 0, $and602 = 0, $and606 = 0, $and611 = 0, $and625 = 0, $and629 = 0, $and634 = 0, $and648 = 0;
 var $and652 = 0, $and657 = 0, $and671 = 0, $and675 = 0, $and680 = 0, $and694 = 0, $and698 = 0, $and703 = 0, $and717 = 0, $and721 = 0, $and726 = 0, $and73 = 0, $and740 = 0, $and744 = 0, $and749 = 0, $and763 = 0, $and767 = 0, $and77 = 0, $and772 = 0, $and786 = 0;
 var $and790 = 0, $and795 = 0, $and809 = 0, $and813 = 0, $and818 = 0, $and82 = 0, $and832 = 0, $and836 = 0, $and841 = 0, $and855 = 0, $and859 = 0, $and864 = 0, $and878 = 0, $and882 = 0, $and887 = 0, $and901 = 0, $and905 = 0, $and910 = 0, $and96 = 0, $arrayidx101 = 0;
 var $arrayidx106 = 0, $arrayidx111 = 0, $arrayidx116 = 0, $arrayidx120 = 0, $arrayidx124 = 0, $arrayidx129 = 0, $arrayidx13 = 0, $arrayidx134 = 0, $arrayidx139 = 0, $arrayidx143 = 0, $arrayidx147 = 0, $arrayidx152 = 0, $arrayidx157 = 0, $arrayidx162 = 0, $arrayidx166 = 0, $arrayidx17 = 0, $arrayidx170 = 0, $arrayidx175 = 0, $arrayidx180 = 0, $arrayidx189 = 0;
 var $arrayidx193 = 0, $arrayidx198 = 0, $arrayidx203 = 0, $arrayidx208 = 0, $arrayidx212 = 0, $arrayidx216 = 0, $arrayidx22 = 0, $arrayidx221 = 0, $arrayidx226 = 0, $arrayidx231 = 0, $arrayidx235 = 0, $arrayidx239 = 0, $arrayidx244 = 0, $arrayidx249 = 0, $arrayidx254 = 0, $arrayidx258 = 0, $arrayidx26 = 0, $arrayidx262 = 0, $arrayidx267 = 0, $arrayidx272 = 0;
 var $arrayidx281 = 0, $arrayidx285 = 0, $arrayidx290 = 0, $arrayidx295 = 0, $arrayidx30 = 0, $arrayidx300 = 0, $arrayidx304 = 0, $arrayidx308 = 0, $arrayidx313 = 0, $arrayidx318 = 0, $arrayidx323 = 0, $arrayidx327 = 0, $arrayidx331 = 0, $arrayidx336 = 0, $arrayidx34 = 0, $arrayidx341 = 0, $arrayidx346 = 0, $arrayidx350 = 0, $arrayidx354 = 0, $arrayidx359 = 0;
 var $arrayidx364 = 0, $arrayidx373 = 0, $arrayidx377 = 0, $arrayidx382 = 0, $arrayidx387 = 0, $arrayidx39 = 0, $arrayidx392 = 0, $arrayidx396 = 0, $arrayidx400 = 0, $arrayidx405 = 0, $arrayidx410 = 0, $arrayidx415 = 0, $arrayidx419 = 0, $arrayidx423 = 0, $arrayidx428 = 0, $arrayidx433 = 0, $arrayidx438 = 0, $arrayidx44 = 0, $arrayidx442 = 0, $arrayidx446 = 0;
 var $arrayidx451 = 0, $arrayidx456 = 0, $arrayidx465 = 0, $arrayidx469 = 0, $arrayidx474 = 0, $arrayidx479 = 0, $arrayidx48 = 0, $arrayidx484 = 0, $arrayidx488 = 0, $arrayidx492 = 0, $arrayidx497 = 0, $arrayidx502 = 0, $arrayidx507 = 0, $arrayidx511 = 0, $arrayidx515 = 0, $arrayidx52 = 0, $arrayidx520 = 0, $arrayidx525 = 0, $arrayidx530 = 0, $arrayidx534 = 0;
 var $arrayidx538 = 0, $arrayidx543 = 0, $arrayidx548 = 0, $arrayidx557 = 0, $arrayidx56 = 0, $arrayidx561 = 0, $arrayidx566 = 0, $arrayidx571 = 0, $arrayidx576 = 0, $arrayidx580 = 0, $arrayidx584 = 0, $arrayidx589 = 0, $arrayidx594 = 0, $arrayidx599 = 0, $arrayidx603 = 0, $arrayidx607 = 0, $arrayidx61 = 0, $arrayidx612 = 0, $arrayidx617 = 0, $arrayidx622 = 0;
 var $arrayidx626 = 0, $arrayidx630 = 0, $arrayidx635 = 0, $arrayidx640 = 0, $arrayidx649 = 0, $arrayidx653 = 0, $arrayidx658 = 0, $arrayidx66 = 0, $arrayidx663 = 0, $arrayidx668 = 0, $arrayidx672 = 0, $arrayidx676 = 0, $arrayidx681 = 0, $arrayidx686 = 0, $arrayidx691 = 0, $arrayidx695 = 0, $arrayidx699 = 0, $arrayidx70 = 0, $arrayidx704 = 0, $arrayidx709 = 0;
 var $arrayidx714 = 0, $arrayidx718 = 0, $arrayidx722 = 0, $arrayidx727 = 0, $arrayidx732 = 0, $arrayidx74 = 0, $arrayidx741 = 0, $arrayidx745 = 0, $arrayidx750 = 0, $arrayidx755 = 0, $arrayidx760 = 0, $arrayidx764 = 0, $arrayidx768 = 0, $arrayidx773 = 0, $arrayidx778 = 0, $arrayidx78 = 0, $arrayidx783 = 0, $arrayidx787 = 0, $arrayidx791 = 0, $arrayidx796 = 0;
 var $arrayidx801 = 0, $arrayidx806 = 0, $arrayidx810 = 0, $arrayidx814 = 0, $arrayidx819 = 0, $arrayidx824 = 0, $arrayidx83 = 0, $arrayidx833 = 0, $arrayidx837 = 0, $arrayidx842 = 0, $arrayidx847 = 0, $arrayidx852 = 0, $arrayidx856 = 0, $arrayidx860 = 0, $arrayidx865 = 0, $arrayidx870 = 0, $arrayidx875 = 0, $arrayidx879 = 0, $arrayidx88 = 0, $arrayidx883 = 0;
 var $arrayidx888 = 0, $arrayidx893 = 0, $arrayidx898 = 0, $arrayidx9 = 0, $arrayidx902 = 0, $arrayidx906 = 0, $arrayidx911 = 0, $arrayidx916 = 0, $arrayidx97 = 0, $shr104 = 0, $shr109 = 0, $shr11 = 0, $shr122 = 0, $shr127 = 0, $shr132 = 0, $shr145 = 0, $shr15 = 0, $shr150 = 0, $shr155 = 0, $shr168 = 0;
 var $shr173 = 0, $shr178 = 0, $shr191 = 0, $shr196 = 0, $shr20 = 0, $shr201 = 0, $shr214 = 0, $shr219 = 0, $shr224 = 0, $shr237 = 0, $shr242 = 0, $shr247 = 0, $shr260 = 0, $shr265 = 0, $shr270 = 0, $shr283 = 0, $shr288 = 0, $shr293 = 0, $shr306 = 0, $shr311 = 0;
 var $shr316 = 0, $shr32 = 0, $shr329 = 0, $shr334 = 0, $shr339 = 0, $shr352 = 0, $shr357 = 0, $shr362 = 0, $shr37 = 0, $shr375 = 0, $shr380 = 0, $shr385 = 0, $shr398 = 0, $shr403 = 0, $shr408 = 0, $shr42 = 0, $shr421 = 0, $shr426 = 0, $shr431 = 0, $shr444 = 0;
 var $shr449 = 0, $shr454 = 0, $shr467 = 0, $shr472 = 0, $shr477 = 0, $shr490 = 0, $shr495 = 0, $shr500 = 0, $shr513 = 0, $shr518 = 0, $shr523 = 0, $shr536 = 0, $shr54 = 0, $shr541 = 0, $shr546 = 0, $shr559 = 0, $shr564 = 0, $shr569 = 0, $shr582 = 0, $shr587 = 0;
 var $shr59 = 0, $shr592 = 0, $shr605 = 0, $shr610 = 0, $shr615 = 0, $shr628 = 0, $shr633 = 0, $shr638 = 0, $shr64 = 0, $shr651 = 0, $shr656 = 0, $shr661 = 0, $shr674 = 0, $shr679 = 0, $shr684 = 0, $shr697 = 0, $shr702 = 0, $shr707 = 0, $shr720 = 0, $shr725 = 0;
 var $shr730 = 0, $shr743 = 0, $shr748 = 0, $shr753 = 0, $shr76 = 0, $shr766 = 0, $shr771 = 0, $shr776 = 0, $shr789 = 0, $shr794 = 0, $shr799 = 0, $shr81 = 0, $shr812 = 0, $shr817 = 0, $shr822 = 0, $shr835 = 0, $shr840 = 0, $shr845 = 0, $shr858 = 0, $shr86 = 0;
 var $shr863 = 0, $shr868 = 0, $shr881 = 0, $shr886 = 0, $shr891 = 0, $shr904 = 0, $shr909 = 0, $shr914 = 0, $shr99 = 0, $xor = 0, $xor102 = 0, $xor107 = 0, $xor112 = 0, $xor113 = 0, $xor125 = 0, $xor130 = 0, $xor135 = 0, $xor136 = 0, $xor148 = 0, $xor153 = 0;
 var $xor158 = 0, $xor159 = 0, $xor171 = 0, $xor176 = 0, $xor18 = 0, $xor181 = 0, $xor182 = 0, $xor194 = 0, $xor199 = 0, $xor204 = 0, $xor205 = 0, $xor217 = 0, $xor222 = 0, $xor227 = 0, $xor228 = 0, $xor23 = 0, $xor24 = 0, $xor240 = 0, $xor245 = 0, $xor250 = 0;
 var $xor251 = 0, $xor263 = 0, $xor268 = 0, $xor273 = 0, $xor274 = 0, $xor286 = 0, $xor291 = 0, $xor296 = 0, $xor297 = 0, $xor309 = 0, $xor314 = 0, $xor319 = 0, $xor320 = 0, $xor332 = 0, $xor337 = 0, $xor342 = 0, $xor343 = 0, $xor35 = 0, $xor355 = 0, $xor360 = 0;
 var $xor365 = 0, $xor366 = 0, $xor378 = 0, $xor383 = 0, $xor388 = 0, $xor389 = 0, $xor40 = 0, $xor401 = 0, $xor406 = 0, $xor411 = 0, $xor412 = 0, $xor424 = 0, $xor429 = 0, $xor434 = 0, $xor435 = 0, $xor447 = 0, $xor45 = 0, $xor452 = 0, $xor457 = 0, $xor458 = 0;
 var $xor46 = 0, $xor470 = 0, $xor475 = 0, $xor480 = 0, $xor481 = 0, $xor493 = 0, $xor498 = 0, $xor503 = 0, $xor504 = 0, $xor516 = 0, $xor521 = 0, $xor526 = 0, $xor527 = 0, $xor539 = 0, $xor544 = 0, $xor549 = 0, $xor550 = 0, $xor562 = 0, $xor567 = 0, $xor57 = 0;
 var $xor572 = 0, $xor573 = 0, $xor585 = 0, $xor590 = 0, $xor595 = 0, $xor596 = 0, $xor608 = 0, $xor613 = 0, $xor618 = 0, $xor619 = 0, $xor62 = 0, $xor631 = 0, $xor636 = 0, $xor641 = 0, $xor642 = 0, $xor654 = 0, $xor659 = 0, $xor664 = 0, $xor665 = 0, $xor67 = 0;
 var $xor677 = 0, $xor68 = 0, $xor682 = 0, $xor687 = 0, $xor688 = 0, $xor700 = 0, $xor705 = 0, $xor710 = 0, $xor711 = 0, $xor723 = 0, $xor728 = 0, $xor733 = 0, $xor734 = 0, $xor746 = 0, $xor751 = 0, $xor756 = 0, $xor757 = 0, $xor769 = 0, $xor774 = 0, $xor779 = 0;
 var $xor780 = 0, $xor79 = 0, $xor792 = 0, $xor797 = 0, $xor802 = 0, $xor803 = 0, $xor815 = 0, $xor820 = 0, $xor825 = 0, $xor826 = 0, $xor838 = 0, $xor84 = 0, $xor843 = 0, $xor848 = 0, $xor849 = 0, $xor861 = 0, $xor866 = 0, $xor871 = 0, $xor872 = 0, $xor884 = 0;
 var $xor889 = 0, $xor89 = 0, $xor894 = 0, $xor895 = 0, $xor90 = 0, $xor907 = 0, $xor912 = 0, $xor917 = 0, $xor918 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$in >> 2] | 0;
 $add$ptr1 = $in + 4 | 0;
 $1 = HEAP32[$add$ptr1 >> 2] | 0;
 $add$ptr3 = $in + 8 | 0;
 $2 = HEAP32[$add$ptr3 >> 2] | 0;
 $add$ptr5 = $in + 12 | 0;
 $3 = HEAP32[$add$ptr5 >> 2] | 0;
 $4 = HEAP32[$expandedKey >> 2] | 0;
 $and = $0 & 255;
 $arrayidx9 = 33136 + ($and << 2) | 0;
 $5 = HEAP32[$arrayidx9 >> 2] | 0;
 $shr11 = $1 >>> 8;
 $and12 = $shr11 & 255;
 $arrayidx13 = 34160 + ($and12 << 2) | 0;
 $6 = HEAP32[$arrayidx13 >> 2] | 0;
 $shr15 = $2 >>> 16;
 $and16 = $shr15 & 255;
 $arrayidx17 = 35184 + ($and16 << 2) | 0;
 $7 = HEAP32[$arrayidx17 >> 2] | 0;
 $shr20 = $3 >>> 24;
 $arrayidx22 = 36208 + ($shr20 << 2) | 0;
 $8 = HEAP32[$arrayidx22 >> 2] | 0;
 $xor = $5 ^ $4;
 $xor18 = $xor ^ $6;
 $xor23 = $xor18 ^ $7;
 $xor24 = $xor23 ^ $8;
 $arrayidx26 = $expandedKey + 4 | 0;
 $9 = HEAP32[$arrayidx26 >> 2] | 0;
 $and29 = $1 & 255;
 $arrayidx30 = 33136 + ($and29 << 2) | 0;
 $10 = HEAP32[$arrayidx30 >> 2] | 0;
 $shr32 = $2 >>> 8;
 $and33 = $shr32 & 255;
 $arrayidx34 = 34160 + ($and33 << 2) | 0;
 $11 = HEAP32[$arrayidx34 >> 2] | 0;
 $shr37 = $3 >>> 16;
 $and38 = $shr37 & 255;
 $arrayidx39 = 35184 + ($and38 << 2) | 0;
 $12 = HEAP32[$arrayidx39 >> 2] | 0;
 $shr42 = $0 >>> 24;
 $arrayidx44 = 36208 + ($shr42 << 2) | 0;
 $13 = HEAP32[$arrayidx44 >> 2] | 0;
 $xor35 = $10 ^ $9;
 $xor40 = $xor35 ^ $11;
 $xor45 = $xor40 ^ $12;
 $xor46 = $xor45 ^ $13;
 $arrayidx48 = $expandedKey + 8 | 0;
 $14 = HEAP32[$arrayidx48 >> 2] | 0;
 $and51 = $2 & 255;
 $arrayidx52 = 33136 + ($and51 << 2) | 0;
 $15 = HEAP32[$arrayidx52 >> 2] | 0;
 $shr54 = $3 >>> 8;
 $and55 = $shr54 & 255;
 $arrayidx56 = 34160 + ($and55 << 2) | 0;
 $16 = HEAP32[$arrayidx56 >> 2] | 0;
 $shr59 = $0 >>> 16;
 $and60 = $shr59 & 255;
 $arrayidx61 = 35184 + ($and60 << 2) | 0;
 $17 = HEAP32[$arrayidx61 >> 2] | 0;
 $shr64 = $1 >>> 24;
 $arrayidx66 = 36208 + ($shr64 << 2) | 0;
 $18 = HEAP32[$arrayidx66 >> 2] | 0;
 $xor57 = $15 ^ $14;
 $xor62 = $xor57 ^ $16;
 $xor67 = $xor62 ^ $17;
 $xor68 = $xor67 ^ $18;
 $arrayidx70 = $expandedKey + 12 | 0;
 $19 = HEAP32[$arrayidx70 >> 2] | 0;
 $and73 = $3 & 255;
 $arrayidx74 = 33136 + ($and73 << 2) | 0;
 $20 = HEAP32[$arrayidx74 >> 2] | 0;
 $shr76 = $0 >>> 8;
 $and77 = $shr76 & 255;
 $arrayidx78 = 34160 + ($and77 << 2) | 0;
 $21 = HEAP32[$arrayidx78 >> 2] | 0;
 $shr81 = $1 >>> 16;
 $and82 = $shr81 & 255;
 $arrayidx83 = 35184 + ($and82 << 2) | 0;
 $22 = HEAP32[$arrayidx83 >> 2] | 0;
 $shr86 = $2 >>> 24;
 $arrayidx88 = 36208 + ($shr86 << 2) | 0;
 $23 = HEAP32[$arrayidx88 >> 2] | 0;
 $xor79 = $20 ^ $19;
 $xor84 = $xor79 ^ $21;
 $xor89 = $xor84 ^ $22;
 $xor90 = $xor89 ^ $23;
 $add$ptr92 = $expandedKey + 16 | 0;
 $24 = HEAP32[$add$ptr92 >> 2] | 0;
 $and96 = $xor24 & 255;
 $arrayidx97 = 33136 + ($and96 << 2) | 0;
 $25 = HEAP32[$arrayidx97 >> 2] | 0;
 $shr99 = $xor46 >>> 8;
 $and100 = $shr99 & 255;
 $arrayidx101 = 34160 + ($and100 << 2) | 0;
 $26 = HEAP32[$arrayidx101 >> 2] | 0;
 $shr104 = $xor68 >>> 16;
 $and105 = $shr104 & 255;
 $arrayidx106 = 35184 + ($and105 << 2) | 0;
 $27 = HEAP32[$arrayidx106 >> 2] | 0;
 $shr109 = $xor90 >>> 24;
 $arrayidx111 = 36208 + ($shr109 << 2) | 0;
 $28 = HEAP32[$arrayidx111 >> 2] | 0;
 $xor102 = $25 ^ $24;
 $xor107 = $xor102 ^ $26;
 $xor112 = $xor107 ^ $27;
 $xor113 = $xor112 ^ $28;
 $arrayidx116 = $expandedKey + 20 | 0;
 $29 = HEAP32[$arrayidx116 >> 2] | 0;
 $and119 = $xor46 & 255;
 $arrayidx120 = 33136 + ($and119 << 2) | 0;
 $30 = HEAP32[$arrayidx120 >> 2] | 0;
 $shr122 = $xor68 >>> 8;
 $and123 = $shr122 & 255;
 $arrayidx124 = 34160 + ($and123 << 2) | 0;
 $31 = HEAP32[$arrayidx124 >> 2] | 0;
 $shr127 = $xor90 >>> 16;
 $and128 = $shr127 & 255;
 $arrayidx129 = 35184 + ($and128 << 2) | 0;
 $32 = HEAP32[$arrayidx129 >> 2] | 0;
 $shr132 = $xor24 >>> 24;
 $arrayidx134 = 36208 + ($shr132 << 2) | 0;
 $33 = HEAP32[$arrayidx134 >> 2] | 0;
 $xor125 = $30 ^ $29;
 $xor130 = $xor125 ^ $31;
 $xor135 = $xor130 ^ $32;
 $xor136 = $xor135 ^ $33;
 $arrayidx139 = $expandedKey + 24 | 0;
 $34 = HEAP32[$arrayidx139 >> 2] | 0;
 $and142 = $xor68 & 255;
 $arrayidx143 = 33136 + ($and142 << 2) | 0;
 $35 = HEAP32[$arrayidx143 >> 2] | 0;
 $shr145 = $xor90 >>> 8;
 $and146 = $shr145 & 255;
 $arrayidx147 = 34160 + ($and146 << 2) | 0;
 $36 = HEAP32[$arrayidx147 >> 2] | 0;
 $shr150 = $xor24 >>> 16;
 $and151 = $shr150 & 255;
 $arrayidx152 = 35184 + ($and151 << 2) | 0;
 $37 = HEAP32[$arrayidx152 >> 2] | 0;
 $shr155 = $xor46 >>> 24;
 $arrayidx157 = 36208 + ($shr155 << 2) | 0;
 $38 = HEAP32[$arrayidx157 >> 2] | 0;
 $xor148 = $35 ^ $34;
 $xor153 = $xor148 ^ $36;
 $xor158 = $xor153 ^ $37;
 $xor159 = $xor158 ^ $38;
 $arrayidx162 = $expandedKey + 28 | 0;
 $39 = HEAP32[$arrayidx162 >> 2] | 0;
 $and165 = $xor90 & 255;
 $arrayidx166 = 33136 + ($and165 << 2) | 0;
 $40 = HEAP32[$arrayidx166 >> 2] | 0;
 $shr168 = $xor24 >>> 8;
 $and169 = $shr168 & 255;
 $arrayidx170 = 34160 + ($and169 << 2) | 0;
 $41 = HEAP32[$arrayidx170 >> 2] | 0;
 $shr173 = $xor46 >>> 16;
 $and174 = $shr173 & 255;
 $arrayidx175 = 35184 + ($and174 << 2) | 0;
 $42 = HEAP32[$arrayidx175 >> 2] | 0;
 $shr178 = $xor68 >>> 24;
 $arrayidx180 = 36208 + ($shr178 << 2) | 0;
 $43 = HEAP32[$arrayidx180 >> 2] | 0;
 $xor171 = $40 ^ $39;
 $xor176 = $xor171 ^ $41;
 $xor181 = $xor176 ^ $42;
 $xor182 = $xor181 ^ $43;
 $add$ptr184 = $expandedKey + 32 | 0;
 $44 = HEAP32[$add$ptr184 >> 2] | 0;
 $and188 = $xor113 & 255;
 $arrayidx189 = 33136 + ($and188 << 2) | 0;
 $45 = HEAP32[$arrayidx189 >> 2] | 0;
 $shr191 = $xor136 >>> 8;
 $and192 = $shr191 & 255;
 $arrayidx193 = 34160 + ($and192 << 2) | 0;
 $46 = HEAP32[$arrayidx193 >> 2] | 0;
 $shr196 = $xor159 >>> 16;
 $and197 = $shr196 & 255;
 $arrayidx198 = 35184 + ($and197 << 2) | 0;
 $47 = HEAP32[$arrayidx198 >> 2] | 0;
 $shr201 = $xor182 >>> 24;
 $arrayidx203 = 36208 + ($shr201 << 2) | 0;
 $48 = HEAP32[$arrayidx203 >> 2] | 0;
 $xor194 = $45 ^ $44;
 $xor199 = $xor194 ^ $46;
 $xor204 = $xor199 ^ $47;
 $xor205 = $xor204 ^ $48;
 $arrayidx208 = $expandedKey + 36 | 0;
 $49 = HEAP32[$arrayidx208 >> 2] | 0;
 $and211 = $xor136 & 255;
 $arrayidx212 = 33136 + ($and211 << 2) | 0;
 $50 = HEAP32[$arrayidx212 >> 2] | 0;
 $shr214 = $xor159 >>> 8;
 $and215 = $shr214 & 255;
 $arrayidx216 = 34160 + ($and215 << 2) | 0;
 $51 = HEAP32[$arrayidx216 >> 2] | 0;
 $shr219 = $xor182 >>> 16;
 $and220 = $shr219 & 255;
 $arrayidx221 = 35184 + ($and220 << 2) | 0;
 $52 = HEAP32[$arrayidx221 >> 2] | 0;
 $shr224 = $xor113 >>> 24;
 $arrayidx226 = 36208 + ($shr224 << 2) | 0;
 $53 = HEAP32[$arrayidx226 >> 2] | 0;
 $xor217 = $50 ^ $49;
 $xor222 = $xor217 ^ $51;
 $xor227 = $xor222 ^ $52;
 $xor228 = $xor227 ^ $53;
 $arrayidx231 = $expandedKey + 40 | 0;
 $54 = HEAP32[$arrayidx231 >> 2] | 0;
 $and234 = $xor159 & 255;
 $arrayidx235 = 33136 + ($and234 << 2) | 0;
 $55 = HEAP32[$arrayidx235 >> 2] | 0;
 $shr237 = $xor182 >>> 8;
 $and238 = $shr237 & 255;
 $arrayidx239 = 34160 + ($and238 << 2) | 0;
 $56 = HEAP32[$arrayidx239 >> 2] | 0;
 $shr242 = $xor113 >>> 16;
 $and243 = $shr242 & 255;
 $arrayidx244 = 35184 + ($and243 << 2) | 0;
 $57 = HEAP32[$arrayidx244 >> 2] | 0;
 $shr247 = $xor136 >>> 24;
 $arrayidx249 = 36208 + ($shr247 << 2) | 0;
 $58 = HEAP32[$arrayidx249 >> 2] | 0;
 $xor240 = $55 ^ $54;
 $xor245 = $xor240 ^ $56;
 $xor250 = $xor245 ^ $57;
 $xor251 = $xor250 ^ $58;
 $arrayidx254 = $expandedKey + 44 | 0;
 $59 = HEAP32[$arrayidx254 >> 2] | 0;
 $and257 = $xor182 & 255;
 $arrayidx258 = 33136 + ($and257 << 2) | 0;
 $60 = HEAP32[$arrayidx258 >> 2] | 0;
 $shr260 = $xor113 >>> 8;
 $and261 = $shr260 & 255;
 $arrayidx262 = 34160 + ($and261 << 2) | 0;
 $61 = HEAP32[$arrayidx262 >> 2] | 0;
 $shr265 = $xor136 >>> 16;
 $and266 = $shr265 & 255;
 $arrayidx267 = 35184 + ($and266 << 2) | 0;
 $62 = HEAP32[$arrayidx267 >> 2] | 0;
 $shr270 = $xor159 >>> 24;
 $arrayidx272 = 36208 + ($shr270 << 2) | 0;
 $63 = HEAP32[$arrayidx272 >> 2] | 0;
 $xor263 = $60 ^ $59;
 $xor268 = $xor263 ^ $61;
 $xor273 = $xor268 ^ $62;
 $xor274 = $xor273 ^ $63;
 $add$ptr276 = $expandedKey + 48 | 0;
 $64 = HEAP32[$add$ptr276 >> 2] | 0;
 $and280 = $xor205 & 255;
 $arrayidx281 = 33136 + ($and280 << 2) | 0;
 $65 = HEAP32[$arrayidx281 >> 2] | 0;
 $shr283 = $xor228 >>> 8;
 $and284 = $shr283 & 255;
 $arrayidx285 = 34160 + ($and284 << 2) | 0;
 $66 = HEAP32[$arrayidx285 >> 2] | 0;
 $shr288 = $xor251 >>> 16;
 $and289 = $shr288 & 255;
 $arrayidx290 = 35184 + ($and289 << 2) | 0;
 $67 = HEAP32[$arrayidx290 >> 2] | 0;
 $shr293 = $xor274 >>> 24;
 $arrayidx295 = 36208 + ($shr293 << 2) | 0;
 $68 = HEAP32[$arrayidx295 >> 2] | 0;
 $xor286 = $65 ^ $64;
 $xor291 = $xor286 ^ $66;
 $xor296 = $xor291 ^ $67;
 $xor297 = $xor296 ^ $68;
 $arrayidx300 = $expandedKey + 52 | 0;
 $69 = HEAP32[$arrayidx300 >> 2] | 0;
 $and303 = $xor228 & 255;
 $arrayidx304 = 33136 + ($and303 << 2) | 0;
 $70 = HEAP32[$arrayidx304 >> 2] | 0;
 $shr306 = $xor251 >>> 8;
 $and307 = $shr306 & 255;
 $arrayidx308 = 34160 + ($and307 << 2) | 0;
 $71 = HEAP32[$arrayidx308 >> 2] | 0;
 $shr311 = $xor274 >>> 16;
 $and312 = $shr311 & 255;
 $arrayidx313 = 35184 + ($and312 << 2) | 0;
 $72 = HEAP32[$arrayidx313 >> 2] | 0;
 $shr316 = $xor205 >>> 24;
 $arrayidx318 = 36208 + ($shr316 << 2) | 0;
 $73 = HEAP32[$arrayidx318 >> 2] | 0;
 $xor309 = $70 ^ $69;
 $xor314 = $xor309 ^ $71;
 $xor319 = $xor314 ^ $72;
 $xor320 = $xor319 ^ $73;
 $arrayidx323 = $expandedKey + 56 | 0;
 $74 = HEAP32[$arrayidx323 >> 2] | 0;
 $and326 = $xor251 & 255;
 $arrayidx327 = 33136 + ($and326 << 2) | 0;
 $75 = HEAP32[$arrayidx327 >> 2] | 0;
 $shr329 = $xor274 >>> 8;
 $and330 = $shr329 & 255;
 $arrayidx331 = 34160 + ($and330 << 2) | 0;
 $76 = HEAP32[$arrayidx331 >> 2] | 0;
 $shr334 = $xor205 >>> 16;
 $and335 = $shr334 & 255;
 $arrayidx336 = 35184 + ($and335 << 2) | 0;
 $77 = HEAP32[$arrayidx336 >> 2] | 0;
 $shr339 = $xor228 >>> 24;
 $arrayidx341 = 36208 + ($shr339 << 2) | 0;
 $78 = HEAP32[$arrayidx341 >> 2] | 0;
 $xor332 = $75 ^ $74;
 $xor337 = $xor332 ^ $76;
 $xor342 = $xor337 ^ $77;
 $xor343 = $xor342 ^ $78;
 $arrayidx346 = $expandedKey + 60 | 0;
 $79 = HEAP32[$arrayidx346 >> 2] | 0;
 $and349 = $xor274 & 255;
 $arrayidx350 = 33136 + ($and349 << 2) | 0;
 $80 = HEAP32[$arrayidx350 >> 2] | 0;
 $shr352 = $xor205 >>> 8;
 $and353 = $shr352 & 255;
 $arrayidx354 = 34160 + ($and353 << 2) | 0;
 $81 = HEAP32[$arrayidx354 >> 2] | 0;
 $shr357 = $xor228 >>> 16;
 $and358 = $shr357 & 255;
 $arrayidx359 = 35184 + ($and358 << 2) | 0;
 $82 = HEAP32[$arrayidx359 >> 2] | 0;
 $shr362 = $xor251 >>> 24;
 $arrayidx364 = 36208 + ($shr362 << 2) | 0;
 $83 = HEAP32[$arrayidx364 >> 2] | 0;
 $xor355 = $80 ^ $79;
 $xor360 = $xor355 ^ $81;
 $xor365 = $xor360 ^ $82;
 $xor366 = $xor365 ^ $83;
 $add$ptr368 = $expandedKey + 64 | 0;
 $84 = HEAP32[$add$ptr368 >> 2] | 0;
 $and372 = $xor297 & 255;
 $arrayidx373 = 33136 + ($and372 << 2) | 0;
 $85 = HEAP32[$arrayidx373 >> 2] | 0;
 $shr375 = $xor320 >>> 8;
 $and376 = $shr375 & 255;
 $arrayidx377 = 34160 + ($and376 << 2) | 0;
 $86 = HEAP32[$arrayidx377 >> 2] | 0;
 $shr380 = $xor343 >>> 16;
 $and381 = $shr380 & 255;
 $arrayidx382 = 35184 + ($and381 << 2) | 0;
 $87 = HEAP32[$arrayidx382 >> 2] | 0;
 $shr385 = $xor366 >>> 24;
 $arrayidx387 = 36208 + ($shr385 << 2) | 0;
 $88 = HEAP32[$arrayidx387 >> 2] | 0;
 $xor378 = $85 ^ $84;
 $xor383 = $xor378 ^ $86;
 $xor388 = $xor383 ^ $87;
 $xor389 = $xor388 ^ $88;
 $arrayidx392 = $expandedKey + 68 | 0;
 $89 = HEAP32[$arrayidx392 >> 2] | 0;
 $and395 = $xor320 & 255;
 $arrayidx396 = 33136 + ($and395 << 2) | 0;
 $90 = HEAP32[$arrayidx396 >> 2] | 0;
 $shr398 = $xor343 >>> 8;
 $and399 = $shr398 & 255;
 $arrayidx400 = 34160 + ($and399 << 2) | 0;
 $91 = HEAP32[$arrayidx400 >> 2] | 0;
 $shr403 = $xor366 >>> 16;
 $and404 = $shr403 & 255;
 $arrayidx405 = 35184 + ($and404 << 2) | 0;
 $92 = HEAP32[$arrayidx405 >> 2] | 0;
 $shr408 = $xor297 >>> 24;
 $arrayidx410 = 36208 + ($shr408 << 2) | 0;
 $93 = HEAP32[$arrayidx410 >> 2] | 0;
 $xor401 = $90 ^ $89;
 $xor406 = $xor401 ^ $91;
 $xor411 = $xor406 ^ $92;
 $xor412 = $xor411 ^ $93;
 $arrayidx415 = $expandedKey + 72 | 0;
 $94 = HEAP32[$arrayidx415 >> 2] | 0;
 $and418 = $xor343 & 255;
 $arrayidx419 = 33136 + ($and418 << 2) | 0;
 $95 = HEAP32[$arrayidx419 >> 2] | 0;
 $shr421 = $xor366 >>> 8;
 $and422 = $shr421 & 255;
 $arrayidx423 = 34160 + ($and422 << 2) | 0;
 $96 = HEAP32[$arrayidx423 >> 2] | 0;
 $shr426 = $xor297 >>> 16;
 $and427 = $shr426 & 255;
 $arrayidx428 = 35184 + ($and427 << 2) | 0;
 $97 = HEAP32[$arrayidx428 >> 2] | 0;
 $shr431 = $xor320 >>> 24;
 $arrayidx433 = 36208 + ($shr431 << 2) | 0;
 $98 = HEAP32[$arrayidx433 >> 2] | 0;
 $xor424 = $95 ^ $94;
 $xor429 = $xor424 ^ $96;
 $xor434 = $xor429 ^ $97;
 $xor435 = $xor434 ^ $98;
 $arrayidx438 = $expandedKey + 76 | 0;
 $99 = HEAP32[$arrayidx438 >> 2] | 0;
 $and441 = $xor366 & 255;
 $arrayidx442 = 33136 + ($and441 << 2) | 0;
 $100 = HEAP32[$arrayidx442 >> 2] | 0;
 $shr444 = $xor297 >>> 8;
 $and445 = $shr444 & 255;
 $arrayidx446 = 34160 + ($and445 << 2) | 0;
 $101 = HEAP32[$arrayidx446 >> 2] | 0;
 $shr449 = $xor320 >>> 16;
 $and450 = $shr449 & 255;
 $arrayidx451 = 35184 + ($and450 << 2) | 0;
 $102 = HEAP32[$arrayidx451 >> 2] | 0;
 $shr454 = $xor343 >>> 24;
 $arrayidx456 = 36208 + ($shr454 << 2) | 0;
 $103 = HEAP32[$arrayidx456 >> 2] | 0;
 $xor447 = $100 ^ $99;
 $xor452 = $xor447 ^ $101;
 $xor457 = $xor452 ^ $102;
 $xor458 = $xor457 ^ $103;
 $add$ptr460 = $expandedKey + 80 | 0;
 $104 = HEAP32[$add$ptr460 >> 2] | 0;
 $and464 = $xor389 & 255;
 $arrayidx465 = 33136 + ($and464 << 2) | 0;
 $105 = HEAP32[$arrayidx465 >> 2] | 0;
 $shr467 = $xor412 >>> 8;
 $and468 = $shr467 & 255;
 $arrayidx469 = 34160 + ($and468 << 2) | 0;
 $106 = HEAP32[$arrayidx469 >> 2] | 0;
 $shr472 = $xor435 >>> 16;
 $and473 = $shr472 & 255;
 $arrayidx474 = 35184 + ($and473 << 2) | 0;
 $107 = HEAP32[$arrayidx474 >> 2] | 0;
 $shr477 = $xor458 >>> 24;
 $arrayidx479 = 36208 + ($shr477 << 2) | 0;
 $108 = HEAP32[$arrayidx479 >> 2] | 0;
 $xor470 = $105 ^ $104;
 $xor475 = $xor470 ^ $106;
 $xor480 = $xor475 ^ $107;
 $xor481 = $xor480 ^ $108;
 $arrayidx484 = $expandedKey + 84 | 0;
 $109 = HEAP32[$arrayidx484 >> 2] | 0;
 $and487 = $xor412 & 255;
 $arrayidx488 = 33136 + ($and487 << 2) | 0;
 $110 = HEAP32[$arrayidx488 >> 2] | 0;
 $shr490 = $xor435 >>> 8;
 $and491 = $shr490 & 255;
 $arrayidx492 = 34160 + ($and491 << 2) | 0;
 $111 = HEAP32[$arrayidx492 >> 2] | 0;
 $shr495 = $xor458 >>> 16;
 $and496 = $shr495 & 255;
 $arrayidx497 = 35184 + ($and496 << 2) | 0;
 $112 = HEAP32[$arrayidx497 >> 2] | 0;
 $shr500 = $xor389 >>> 24;
 $arrayidx502 = 36208 + ($shr500 << 2) | 0;
 $113 = HEAP32[$arrayidx502 >> 2] | 0;
 $xor493 = $110 ^ $109;
 $xor498 = $xor493 ^ $111;
 $xor503 = $xor498 ^ $112;
 $xor504 = $xor503 ^ $113;
 $arrayidx507 = $expandedKey + 88 | 0;
 $114 = HEAP32[$arrayidx507 >> 2] | 0;
 $and510 = $xor435 & 255;
 $arrayidx511 = 33136 + ($and510 << 2) | 0;
 $115 = HEAP32[$arrayidx511 >> 2] | 0;
 $shr513 = $xor458 >>> 8;
 $and514 = $shr513 & 255;
 $arrayidx515 = 34160 + ($and514 << 2) | 0;
 $116 = HEAP32[$arrayidx515 >> 2] | 0;
 $shr518 = $xor389 >>> 16;
 $and519 = $shr518 & 255;
 $arrayidx520 = 35184 + ($and519 << 2) | 0;
 $117 = HEAP32[$arrayidx520 >> 2] | 0;
 $shr523 = $xor412 >>> 24;
 $arrayidx525 = 36208 + ($shr523 << 2) | 0;
 $118 = HEAP32[$arrayidx525 >> 2] | 0;
 $xor516 = $115 ^ $114;
 $xor521 = $xor516 ^ $116;
 $xor526 = $xor521 ^ $117;
 $xor527 = $xor526 ^ $118;
 $arrayidx530 = $expandedKey + 92 | 0;
 $119 = HEAP32[$arrayidx530 >> 2] | 0;
 $and533 = $xor458 & 255;
 $arrayidx534 = 33136 + ($and533 << 2) | 0;
 $120 = HEAP32[$arrayidx534 >> 2] | 0;
 $shr536 = $xor389 >>> 8;
 $and537 = $shr536 & 255;
 $arrayidx538 = 34160 + ($and537 << 2) | 0;
 $121 = HEAP32[$arrayidx538 >> 2] | 0;
 $shr541 = $xor412 >>> 16;
 $and542 = $shr541 & 255;
 $arrayidx543 = 35184 + ($and542 << 2) | 0;
 $122 = HEAP32[$arrayidx543 >> 2] | 0;
 $shr546 = $xor435 >>> 24;
 $arrayidx548 = 36208 + ($shr546 << 2) | 0;
 $123 = HEAP32[$arrayidx548 >> 2] | 0;
 $xor539 = $120 ^ $119;
 $xor544 = $xor539 ^ $121;
 $xor549 = $xor544 ^ $122;
 $xor550 = $xor549 ^ $123;
 $add$ptr552 = $expandedKey + 96 | 0;
 $124 = HEAP32[$add$ptr552 >> 2] | 0;
 $and556 = $xor481 & 255;
 $arrayidx557 = 33136 + ($and556 << 2) | 0;
 $125 = HEAP32[$arrayidx557 >> 2] | 0;
 $shr559 = $xor504 >>> 8;
 $and560 = $shr559 & 255;
 $arrayidx561 = 34160 + ($and560 << 2) | 0;
 $126 = HEAP32[$arrayidx561 >> 2] | 0;
 $shr564 = $xor527 >>> 16;
 $and565 = $shr564 & 255;
 $arrayidx566 = 35184 + ($and565 << 2) | 0;
 $127 = HEAP32[$arrayidx566 >> 2] | 0;
 $shr569 = $xor550 >>> 24;
 $arrayidx571 = 36208 + ($shr569 << 2) | 0;
 $128 = HEAP32[$arrayidx571 >> 2] | 0;
 $xor562 = $125 ^ $124;
 $xor567 = $xor562 ^ $126;
 $xor572 = $xor567 ^ $127;
 $xor573 = $xor572 ^ $128;
 $arrayidx576 = $expandedKey + 100 | 0;
 $129 = HEAP32[$arrayidx576 >> 2] | 0;
 $and579 = $xor504 & 255;
 $arrayidx580 = 33136 + ($and579 << 2) | 0;
 $130 = HEAP32[$arrayidx580 >> 2] | 0;
 $shr582 = $xor527 >>> 8;
 $and583 = $shr582 & 255;
 $arrayidx584 = 34160 + ($and583 << 2) | 0;
 $131 = HEAP32[$arrayidx584 >> 2] | 0;
 $shr587 = $xor550 >>> 16;
 $and588 = $shr587 & 255;
 $arrayidx589 = 35184 + ($and588 << 2) | 0;
 $132 = HEAP32[$arrayidx589 >> 2] | 0;
 $shr592 = $xor481 >>> 24;
 $arrayidx594 = 36208 + ($shr592 << 2) | 0;
 $133 = HEAP32[$arrayidx594 >> 2] | 0;
 $xor585 = $130 ^ $129;
 $xor590 = $xor585 ^ $131;
 $xor595 = $xor590 ^ $132;
 $xor596 = $xor595 ^ $133;
 $arrayidx599 = $expandedKey + 104 | 0;
 $134 = HEAP32[$arrayidx599 >> 2] | 0;
 $and602 = $xor527 & 255;
 $arrayidx603 = 33136 + ($and602 << 2) | 0;
 $135 = HEAP32[$arrayidx603 >> 2] | 0;
 $shr605 = $xor550 >>> 8;
 $and606 = $shr605 & 255;
 $arrayidx607 = 34160 + ($and606 << 2) | 0;
 $136 = HEAP32[$arrayidx607 >> 2] | 0;
 $shr610 = $xor481 >>> 16;
 $and611 = $shr610 & 255;
 $arrayidx612 = 35184 + ($and611 << 2) | 0;
 $137 = HEAP32[$arrayidx612 >> 2] | 0;
 $shr615 = $xor504 >>> 24;
 $arrayidx617 = 36208 + ($shr615 << 2) | 0;
 $138 = HEAP32[$arrayidx617 >> 2] | 0;
 $xor608 = $135 ^ $134;
 $xor613 = $xor608 ^ $136;
 $xor618 = $xor613 ^ $137;
 $xor619 = $xor618 ^ $138;
 $arrayidx622 = $expandedKey + 108 | 0;
 $139 = HEAP32[$arrayidx622 >> 2] | 0;
 $and625 = $xor550 & 255;
 $arrayidx626 = 33136 + ($and625 << 2) | 0;
 $140 = HEAP32[$arrayidx626 >> 2] | 0;
 $shr628 = $xor481 >>> 8;
 $and629 = $shr628 & 255;
 $arrayidx630 = 34160 + ($and629 << 2) | 0;
 $141 = HEAP32[$arrayidx630 >> 2] | 0;
 $shr633 = $xor504 >>> 16;
 $and634 = $shr633 & 255;
 $arrayidx635 = 35184 + ($and634 << 2) | 0;
 $142 = HEAP32[$arrayidx635 >> 2] | 0;
 $shr638 = $xor527 >>> 24;
 $arrayidx640 = 36208 + ($shr638 << 2) | 0;
 $143 = HEAP32[$arrayidx640 >> 2] | 0;
 $xor631 = $140 ^ $139;
 $xor636 = $xor631 ^ $141;
 $xor641 = $xor636 ^ $142;
 $xor642 = $xor641 ^ $143;
 $add$ptr644 = $expandedKey + 112 | 0;
 $144 = HEAP32[$add$ptr644 >> 2] | 0;
 $and648 = $xor573 & 255;
 $arrayidx649 = 33136 + ($and648 << 2) | 0;
 $145 = HEAP32[$arrayidx649 >> 2] | 0;
 $shr651 = $xor596 >>> 8;
 $and652 = $shr651 & 255;
 $arrayidx653 = 34160 + ($and652 << 2) | 0;
 $146 = HEAP32[$arrayidx653 >> 2] | 0;
 $shr656 = $xor619 >>> 16;
 $and657 = $shr656 & 255;
 $arrayidx658 = 35184 + ($and657 << 2) | 0;
 $147 = HEAP32[$arrayidx658 >> 2] | 0;
 $shr661 = $xor642 >>> 24;
 $arrayidx663 = 36208 + ($shr661 << 2) | 0;
 $148 = HEAP32[$arrayidx663 >> 2] | 0;
 $xor654 = $145 ^ $144;
 $xor659 = $xor654 ^ $146;
 $xor664 = $xor659 ^ $147;
 $xor665 = $xor664 ^ $148;
 $arrayidx668 = $expandedKey + 116 | 0;
 $149 = HEAP32[$arrayidx668 >> 2] | 0;
 $and671 = $xor596 & 255;
 $arrayidx672 = 33136 + ($and671 << 2) | 0;
 $150 = HEAP32[$arrayidx672 >> 2] | 0;
 $shr674 = $xor619 >>> 8;
 $and675 = $shr674 & 255;
 $arrayidx676 = 34160 + ($and675 << 2) | 0;
 $151 = HEAP32[$arrayidx676 >> 2] | 0;
 $shr679 = $xor642 >>> 16;
 $and680 = $shr679 & 255;
 $arrayidx681 = 35184 + ($and680 << 2) | 0;
 $152 = HEAP32[$arrayidx681 >> 2] | 0;
 $shr684 = $xor573 >>> 24;
 $arrayidx686 = 36208 + ($shr684 << 2) | 0;
 $153 = HEAP32[$arrayidx686 >> 2] | 0;
 $xor677 = $150 ^ $149;
 $xor682 = $xor677 ^ $151;
 $xor687 = $xor682 ^ $152;
 $xor688 = $xor687 ^ $153;
 $arrayidx691 = $expandedKey + 120 | 0;
 $154 = HEAP32[$arrayidx691 >> 2] | 0;
 $and694 = $xor619 & 255;
 $arrayidx695 = 33136 + ($and694 << 2) | 0;
 $155 = HEAP32[$arrayidx695 >> 2] | 0;
 $shr697 = $xor642 >>> 8;
 $and698 = $shr697 & 255;
 $arrayidx699 = 34160 + ($and698 << 2) | 0;
 $156 = HEAP32[$arrayidx699 >> 2] | 0;
 $shr702 = $xor573 >>> 16;
 $and703 = $shr702 & 255;
 $arrayidx704 = 35184 + ($and703 << 2) | 0;
 $157 = HEAP32[$arrayidx704 >> 2] | 0;
 $shr707 = $xor596 >>> 24;
 $arrayidx709 = 36208 + ($shr707 << 2) | 0;
 $158 = HEAP32[$arrayidx709 >> 2] | 0;
 $xor700 = $155 ^ $154;
 $xor705 = $xor700 ^ $156;
 $xor710 = $xor705 ^ $157;
 $xor711 = $xor710 ^ $158;
 $arrayidx714 = $expandedKey + 124 | 0;
 $159 = HEAP32[$arrayidx714 >> 2] | 0;
 $and717 = $xor642 & 255;
 $arrayidx718 = 33136 + ($and717 << 2) | 0;
 $160 = HEAP32[$arrayidx718 >> 2] | 0;
 $shr720 = $xor573 >>> 8;
 $and721 = $shr720 & 255;
 $arrayidx722 = 34160 + ($and721 << 2) | 0;
 $161 = HEAP32[$arrayidx722 >> 2] | 0;
 $shr725 = $xor596 >>> 16;
 $and726 = $shr725 & 255;
 $arrayidx727 = 35184 + ($and726 << 2) | 0;
 $162 = HEAP32[$arrayidx727 >> 2] | 0;
 $shr730 = $xor619 >>> 24;
 $arrayidx732 = 36208 + ($shr730 << 2) | 0;
 $163 = HEAP32[$arrayidx732 >> 2] | 0;
 $xor723 = $160 ^ $159;
 $xor728 = $xor723 ^ $161;
 $xor733 = $xor728 ^ $162;
 $xor734 = $xor733 ^ $163;
 $add$ptr736 = $expandedKey + 128 | 0;
 $164 = HEAP32[$add$ptr736 >> 2] | 0;
 $and740 = $xor665 & 255;
 $arrayidx741 = 33136 + ($and740 << 2) | 0;
 $165 = HEAP32[$arrayidx741 >> 2] | 0;
 $shr743 = $xor688 >>> 8;
 $and744 = $shr743 & 255;
 $arrayidx745 = 34160 + ($and744 << 2) | 0;
 $166 = HEAP32[$arrayidx745 >> 2] | 0;
 $shr748 = $xor711 >>> 16;
 $and749 = $shr748 & 255;
 $arrayidx750 = 35184 + ($and749 << 2) | 0;
 $167 = HEAP32[$arrayidx750 >> 2] | 0;
 $shr753 = $xor734 >>> 24;
 $arrayidx755 = 36208 + ($shr753 << 2) | 0;
 $168 = HEAP32[$arrayidx755 >> 2] | 0;
 $xor746 = $165 ^ $164;
 $xor751 = $xor746 ^ $166;
 $xor756 = $xor751 ^ $167;
 $xor757 = $xor756 ^ $168;
 $arrayidx760 = $expandedKey + 132 | 0;
 $169 = HEAP32[$arrayidx760 >> 2] | 0;
 $and763 = $xor688 & 255;
 $arrayidx764 = 33136 + ($and763 << 2) | 0;
 $170 = HEAP32[$arrayidx764 >> 2] | 0;
 $shr766 = $xor711 >>> 8;
 $and767 = $shr766 & 255;
 $arrayidx768 = 34160 + ($and767 << 2) | 0;
 $171 = HEAP32[$arrayidx768 >> 2] | 0;
 $shr771 = $xor734 >>> 16;
 $and772 = $shr771 & 255;
 $arrayidx773 = 35184 + ($and772 << 2) | 0;
 $172 = HEAP32[$arrayidx773 >> 2] | 0;
 $shr776 = $xor665 >>> 24;
 $arrayidx778 = 36208 + ($shr776 << 2) | 0;
 $173 = HEAP32[$arrayidx778 >> 2] | 0;
 $xor769 = $170 ^ $169;
 $xor774 = $xor769 ^ $171;
 $xor779 = $xor774 ^ $172;
 $xor780 = $xor779 ^ $173;
 $arrayidx783 = $expandedKey + 136 | 0;
 $174 = HEAP32[$arrayidx783 >> 2] | 0;
 $and786 = $xor711 & 255;
 $arrayidx787 = 33136 + ($and786 << 2) | 0;
 $175 = HEAP32[$arrayidx787 >> 2] | 0;
 $shr789 = $xor734 >>> 8;
 $and790 = $shr789 & 255;
 $arrayidx791 = 34160 + ($and790 << 2) | 0;
 $176 = HEAP32[$arrayidx791 >> 2] | 0;
 $shr794 = $xor665 >>> 16;
 $and795 = $shr794 & 255;
 $arrayidx796 = 35184 + ($and795 << 2) | 0;
 $177 = HEAP32[$arrayidx796 >> 2] | 0;
 $shr799 = $xor688 >>> 24;
 $arrayidx801 = 36208 + ($shr799 << 2) | 0;
 $178 = HEAP32[$arrayidx801 >> 2] | 0;
 $xor792 = $175 ^ $174;
 $xor797 = $xor792 ^ $176;
 $xor802 = $xor797 ^ $177;
 $xor803 = $xor802 ^ $178;
 $arrayidx806 = $expandedKey + 140 | 0;
 $179 = HEAP32[$arrayidx806 >> 2] | 0;
 $and809 = $xor734 & 255;
 $arrayidx810 = 33136 + ($and809 << 2) | 0;
 $180 = HEAP32[$arrayidx810 >> 2] | 0;
 $shr812 = $xor665 >>> 8;
 $and813 = $shr812 & 255;
 $arrayidx814 = 34160 + ($and813 << 2) | 0;
 $181 = HEAP32[$arrayidx814 >> 2] | 0;
 $shr817 = $xor688 >>> 16;
 $and818 = $shr817 & 255;
 $arrayidx819 = 35184 + ($and818 << 2) | 0;
 $182 = HEAP32[$arrayidx819 >> 2] | 0;
 $shr822 = $xor711 >>> 24;
 $arrayidx824 = 36208 + ($shr822 << 2) | 0;
 $183 = HEAP32[$arrayidx824 >> 2] | 0;
 $xor815 = $180 ^ $179;
 $xor820 = $xor815 ^ $181;
 $xor825 = $xor820 ^ $182;
 $xor826 = $xor825 ^ $183;
 $add$ptr828 = $expandedKey + 144 | 0;
 $184 = HEAP32[$add$ptr828 >> 2] | 0;
 $and832 = $xor757 & 255;
 $arrayidx833 = 33136 + ($and832 << 2) | 0;
 $185 = HEAP32[$arrayidx833 >> 2] | 0;
 $shr835 = $xor780 >>> 8;
 $and836 = $shr835 & 255;
 $arrayidx837 = 34160 + ($and836 << 2) | 0;
 $186 = HEAP32[$arrayidx837 >> 2] | 0;
 $shr840 = $xor803 >>> 16;
 $and841 = $shr840 & 255;
 $arrayidx842 = 35184 + ($and841 << 2) | 0;
 $187 = HEAP32[$arrayidx842 >> 2] | 0;
 $shr845 = $xor826 >>> 24;
 $arrayidx847 = 36208 + ($shr845 << 2) | 0;
 $188 = HEAP32[$arrayidx847 >> 2] | 0;
 $xor838 = $185 ^ $184;
 $xor843 = $xor838 ^ $186;
 $xor848 = $xor843 ^ $187;
 $xor849 = $xor848 ^ $188;
 $arrayidx852 = $expandedKey + 148 | 0;
 $189 = HEAP32[$arrayidx852 >> 2] | 0;
 $and855 = $xor780 & 255;
 $arrayidx856 = 33136 + ($and855 << 2) | 0;
 $190 = HEAP32[$arrayidx856 >> 2] | 0;
 $shr858 = $xor803 >>> 8;
 $and859 = $shr858 & 255;
 $arrayidx860 = 34160 + ($and859 << 2) | 0;
 $191 = HEAP32[$arrayidx860 >> 2] | 0;
 $shr863 = $xor826 >>> 16;
 $and864 = $shr863 & 255;
 $arrayidx865 = 35184 + ($and864 << 2) | 0;
 $192 = HEAP32[$arrayidx865 >> 2] | 0;
 $shr868 = $xor757 >>> 24;
 $arrayidx870 = 36208 + ($shr868 << 2) | 0;
 $193 = HEAP32[$arrayidx870 >> 2] | 0;
 $xor861 = $190 ^ $189;
 $xor866 = $xor861 ^ $191;
 $xor871 = $xor866 ^ $192;
 $xor872 = $xor871 ^ $193;
 $arrayidx875 = $expandedKey + 152 | 0;
 $194 = HEAP32[$arrayidx875 >> 2] | 0;
 $and878 = $xor803 & 255;
 $arrayidx879 = 33136 + ($and878 << 2) | 0;
 $195 = HEAP32[$arrayidx879 >> 2] | 0;
 $shr881 = $xor826 >>> 8;
 $and882 = $shr881 & 255;
 $arrayidx883 = 34160 + ($and882 << 2) | 0;
 $196 = HEAP32[$arrayidx883 >> 2] | 0;
 $shr886 = $xor757 >>> 16;
 $and887 = $shr886 & 255;
 $arrayidx888 = 35184 + ($and887 << 2) | 0;
 $197 = HEAP32[$arrayidx888 >> 2] | 0;
 $shr891 = $xor780 >>> 24;
 $arrayidx893 = 36208 + ($shr891 << 2) | 0;
 $198 = HEAP32[$arrayidx893 >> 2] | 0;
 $xor884 = $195 ^ $194;
 $xor889 = $xor884 ^ $196;
 $xor894 = $xor889 ^ $197;
 $xor895 = $xor894 ^ $198;
 $arrayidx898 = $expandedKey + 156 | 0;
 $199 = HEAP32[$arrayidx898 >> 2] | 0;
 $and901 = $xor826 & 255;
 $arrayidx902 = 33136 + ($and901 << 2) | 0;
 $200 = HEAP32[$arrayidx902 >> 2] | 0;
 $shr904 = $xor757 >>> 8;
 $and905 = $shr904 & 255;
 $arrayidx906 = 34160 + ($and905 << 2) | 0;
 $201 = HEAP32[$arrayidx906 >> 2] | 0;
 $shr909 = $xor780 >>> 16;
 $and910 = $shr909 & 255;
 $arrayidx911 = 35184 + ($and910 << 2) | 0;
 $202 = HEAP32[$arrayidx911 >> 2] | 0;
 $shr914 = $xor803 >>> 24;
 $arrayidx916 = 36208 + ($shr914 << 2) | 0;
 $203 = HEAP32[$arrayidx916 >> 2] | 0;
 $xor907 = $200 ^ $199;
 $xor912 = $xor907 ^ $201;
 $xor917 = $xor912 ^ $202;
 $xor918 = $xor917 ^ $203;
 HEAP32[$out >> 2] = $xor849;
 $add$ptr923 = $out + 4 | 0;
 HEAP32[$add$ptr923 >> 2] = $xor872;
 $add$ptr925 = $out + 8 | 0;
 HEAP32[$add$ptr925 >> 2] = $xor895;
 $add$ptr927 = $out + 12 | 0;
 HEAP32[$add$ptr927 >> 2] = $xor918;
 return;
}

function _fmt_fp($f, $y, $w, $p, $fl, $t) {
 $f = $f | 0;
 $y = +$y;
 $w = $w | 0;
 $p = $p | 0;
 $fl = $fl | 0;
 $t = $t | 0;
 var $$ = 0, $$pr = 0, $$pr415 = 0, $$pre = 0, $$pre517 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $a$1$lcssa = 0, $a$1502 = 0, $a$2 = 0, $a$3$lcssa = 0, $a$3488 = 0, $a$5$lcssa = 0, $a$5471 = 0, $a$6 = 0, $a$8 = 0;
 var $a$9 = 0, $add = 0, $add$ptr213 = 0, $add$ptr311 = 0, $add$ptr354 = 0, $add$ptr358 = 0, $add$ptr373 = 0, $add$ptr442 = 0, $add$ptr65 = 0, $add$ptr671 = 0, $add$ptr742 = 0, $add$ptr756 = 0, $add113 = 0, $add150 = 0, $add154 = 0, $add163 = 0, $add165 = 0, $add273 = 0, $add275 = 0, $add284 = 0;
 var $add313 = 0, $add355 = 0, $add410 = 0.0, $add414 = 0, $add477$neg = 0, $add561 = 0, $add608 = 0, $add612 = 0, $add620 = 0, $add653 = 0, $add653$sink524 = 0, $add67 = 0, $add737 = 0, $add810 = 0, $add87 = 0.0, $add90 = 0.0, $and = 0, $and12 = 0, $and134 = 0, $and282 = 0;
 var $and36 = 0, $and379 = 0, $and45 = 0, $and483 = 0, $and610 = 0, $and610$lobit = 0, $and62 = 0, $and702 = 0, $and780 = 0, $arrayidx = 0, $arrayidx117 = 0, $arrayidx251 = 0, $arrayidx453 = 0, $arrayidx489 = 0, $big = 0, $buf = 0, $call55 = 0.0, $carry$0493 = 0, $carry262$0484 = 0, $cmp103 = 0;
 var $cmp127 = 0, $cmp131 = 0, $cmp147 = 0, $cmp196 = 0, $cmp205 = 0, $cmp225 = 0, $cmp225500 = 0, $cmp235 = 0, $cmp235492 = 0, $cmp249 = 0, $cmp249496 = 0, $cmp259 = 0, $cmp259486 = 0, $cmp277 = 0, $cmp277482 = 0, $cmp299 = 0, $cmp308 = 0, $cmp315 = 0, $cmp324 = 0, $cmp324478 = 0;
 var $cmp333 = 0, $cmp338 = 0, $cmp350 = 0, $cmp363 = 0, $cmp363474 = 0, $cmp374 = 0, $cmp38 = 0, $cmp385 = 0, $cmp390 = 0, $cmp403 = 0, $cmp411 = 0, $cmp416 = 0, $cmp416469 = 0, $cmp420 = 0, $cmp433 = 0, $cmp433465 = 0, $cmp443 = 0, $cmp450 = 0, $cmp450$lcssa = 0, $cmp450458 = 0;
 var $cmp470 = 0, $cmp473 = 0, $cmp495 = 0, $cmp495454 = 0, $cmp505 = 0, $cmp528 = 0, $cmp577 = 0, $cmp59 = 0, $cmp614 = 0, $cmp617 = 0, $cmp623 = 0, $cmp636 = 0, $cmp636449 = 0, $cmp660 = 0, $cmp665 = 0, $cmp673 = 0, $cmp678 = 0, $cmp678435 = 0, $cmp686 = 0, $cmp707 = 0;
 var $cmp707430 = 0, $cmp710 = 0, $cmp710431 = 0, $cmp722 = 0, $cmp722427 = 0, $cmp745 = 0, $cmp745442 = 0, $cmp748 = 0, $cmp748443 = 0, $cmp760 = 0, $cmp765 = 0, $cmp770 = 0, $cmp770439 = 0, $cmp777 = 0, $cmp790 = 0, $cmp818 = 0, $cmp82 = 0, $cmp94 = 0, $cond = 0, $cond100 = 0;
 var $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond43 = 0, $cond629 = 0, $cond732 = 0, $cond800 = 0, $conv111 = 0, $conv114 = 0, $conv116 = 0, $conv118393 = 0, $conv121 = 0, $conv123 = 0.0, $conv216 = 0, $conv218 = 0.0, $conv644 = 0, $conv646 = 0, $d$0 = 0, $d$0491 = 0, $d$0494 = 0;
 var $d$1483 = 0, $d$2$lcssa = 0, $d$2470 = 0, $d$4 = 0, $d$5438 = 0, $d$6432 = 0, $d$7444 = 0, $dec = 0, $dec476 = 0, $dec481 = 0, $dec78 = 0, $div274 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0480 = 0, $e$1 = 0, $e$2467 = 0, $e$4 = 0, $e$5 = 0;
 var $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1450 = 0, $estr$2 = 0, $i$0479 = 0, $i$1$lcssa = 0, $i$1475 = 0, $i$2466 = 0, $i$3455 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc468 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr112 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0;
 var $incdec$ptr137 = 0, $incdec$ptr217 = 0, $incdec$ptr246 = 0, $incdec$ptr288 = 0, $incdec$ptr292 = 0, $incdec$ptr292520 = 0, $incdec$ptr296 = 0, $incdec$ptr419 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr645 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr698 = 0, $incdec$ptr725 = 0, $incdec$ptr734 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0;
 var $incdec$ptr808 = 0, $j$0 = 0, $j$0$in476 = 0, $j$1456 = 0, $j$2 = 0, $l$0 = 0, $l$1 = 0, $land$ext$neg = 0, $mul = 0.0, $mul125 = 0.0, $mul202 = 0.0, $mul220 = 0.0, $mul286 = 0, $mul322 = 0, $mul328 = 0, $mul335 = 0, $mul349 = 0, $mul367 = 0, $mul406 = 0.0, $mul407 = 0.0;
 var $mul431 = 0, $mul437 = 0, $mul499 = 0, $mul513 = 0, $mul80 = 0.0, $not$tobool341 = 0, $or = 0, $or$cond = 0, $or$cond1$not = 0, $or$cond2 = 0, $or$cond398 = 0, $or$cond400 = 0, $or$cond409 = 0, $or$cond411 = 0, $or120 = 0, $or504 = 0, $or613 = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0;
 var $p$addr$4433 = 0, $p$addr$5$lcssa = 0, $p$addr$5445 = 0, $pl$0 = 0, $prefix$0 = 0, $re$1426 = 0, $rem494 = 0, $rem494453 = 0, $round$0425 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s35$0 = 0, $s668$0436 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0428 = 0, $s753$0 = 0, $s753$1440 = 0, $s753$2 = 0;
 var $scevgep513 = 0, $scevgep513514 = 0, $shl280 = 0, $shr283 = 0, $shr285 = 0, $small$1 = 0.0, $spec$select = 0, $spec$select395 = 0, $spec$select396 = 0, $spec$select396521 = 0, $spec$select396523 = 0, $spec$select397 = 0, $spec$select399 = 0.0, $spec$select401 = 0, $spec$select402 = 0, $spec$select403 = 0, $spec$select405 = 0, $spec$select408 = 0, $spec$select410 = 0, $spec$select412 = 0.0;
 var $spec$select413 = 0, $spec$select414 = 0, $spec$select416 = 0, $spec$select417 = 0, $spec$select418 = 0.0, $spec$select419 = 0.0, $spec$select420 = 0.0, $sub = 0.0, $sub$ptr$div = 0, $sub$ptr$div321 = 0, $sub$ptr$div347 = 0, $sub$ptr$div430 = 0, $sub$ptr$div511 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast160 = 0, $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0, $sub$ptr$lhs$cast305 = 0, $sub$ptr$lhs$cast344 = 0, $sub$ptr$lhs$cast508 = 0;
 var $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$lhs$cast811 = 0, $sub$ptr$rhs$cast$le = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast161 = 0, $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast306 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast345 = 0, $sub$ptr$rhs$cast428 = 0, $sub$ptr$rhs$cast634 = 0, $sub$ptr$rhs$cast634447 = 0, $sub$ptr$rhs$cast649 = 0, $sub$ptr$rhs$cast695 = 0, $sub$ptr$rhs$cast788 = 0, $sub$ptr$rhs$cast812 = 0, $sub$ptr$sub = 0, $sub$ptr$sub145 = 0;
 var $sub$ptr$sub153 = 0, $sub$ptr$sub159 = 0, $sub$ptr$sub162 = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub175 = 0, $sub$ptr$sub307 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub346 = 0, $sub$ptr$sub429 = 0, $sub$ptr$sub510 = 0, $sub$ptr$sub635 = 0, $sub$ptr$sub635448 = 0, $sub$ptr$sub650 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub696 = 0, $sub$ptr$sub789 = 0, $sub$ptr$sub813 = 0, $sub124 = 0.0, $sub146 = 0, $sub181 = 0;
 var $sub203 = 0, $sub219 = 0.0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub336 = 0, $sub343 = 0, $sub357 = 0, $sub478 = 0, $sub480 = 0, $sub514 = 0, $sub562 = 0, $sub626 = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $sub85 = 0.0, $sub86 = 0.0, $sub88 = 0.0, $sub91 = 0.0;
 var $sub97 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool129 = 0, $tobool13 = 0, $tobool135 = 0, $tobool139 = 0, $tobool140 = 0, $tobool222 = 0, $tobool244 = 0, $tobool252 = 0, $tobool290 = 0, $tobool290519 = 0, $tobool294 = 0, $tobool341 = 0, $tobool37 = 0, $tobool371 = 0, $tobool380 = 0, $tobool400 = 0, $tobool454 = 0;
 var $tobool484 = 0, $tobool490 = 0, $tobool56 = 0, $tobool609 = 0, $tobool609$not = 0, $tobool63 = 0, $tobool703 = 0, $tobool76 = 0, $tobool76421 = 0, $tobool781 = 0, $tobool79 = 0, $tobool9 = 0, $w$add653 = 0, $xor = 0, $xor167 = 0, $xor186 = 0, $xor655 = 0, $xor816 = 0, $y$addr$0 = 0.0, $y$addr$1 = 0.0;
 var $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1 = 0, $z$2$lcssa = 0, $z$2501 = 0, $z$3$lcssa = 0, $z$3497 = 0, $z$4$lcssa = 0, $z$4487 = 0, $z$5 = 0, $z$8 = 0, $z$9$lcssa = 0, $z$9459 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560 | 0);
 $big = sp + 32 | 0;
 $e2 = sp + 536 | 0;
 $buf = sp;
 $sub$ptr$rhs$cast$le = $buf;
 $0 = 0 - $sub$ptr$rhs$cast$le | 0;
 $ebuf0 = sp + 540 | 0;
 HEAP32[$e2 >> 2] = 0;
 $arrayidx = $ebuf0 + 12 | 0;
 $1 = ___DOUBLE_BITS_527($y) | 0;
 $2 = getTempRet0() | 0;
 $3 = ($2 | 0) < 0;
 if ($3) {
  $sub = -$y;
  $4 = ___DOUBLE_BITS_527($sub) | 0;
  $5 = getTempRet0() | 0;
  $85 = $4;
  $9 = $5;
  $pl$0 = 1;
  $prefix$0 = 46724;
  $y$addr$0 = $sub;
 } else {
  $and = $fl & 2048;
  $tobool9 = ($and | 0) == 0;
  $and12 = $fl & 1;
  $tobool13 = ($and12 | 0) == 0;
  $$ = $tobool13 ? 46725 : 46730;
  $spec$select416 = $tobool9 ? $$ : 46727;
  $6 = $fl & 2049;
  $7 = ($6 | 0) != 0;
  $spec$select417 = $7 & 1;
  $85 = $1;
  $9 = $2;
  $pl$0 = $spec$select417;
  $prefix$0 = $spec$select416;
  $y$addr$0 = $y;
 }
 $8 = $9 & 2146435072;
 $10 = 0 == 0;
 $11 = ($8 | 0) == 2146435072;
 $12 = $10 & $11;
 do {
  if ($12) {
   $and36 = $t & 32;
   $tobool37 = ($and36 | 0) != 0;
   $cond = $tobool37 ? 46743 : 46747;
   $cmp38 = $y$addr$0 != $y$addr$0 | 0.0 != 0.0;
   $cond43 = $tobool37 ? 46755 : 46751;
   $s35$0 = $cmp38 ? $cond43 : $cond;
   $add = $pl$0 + 3 | 0;
   $and45 = $fl & -65537;
   _pad_524($f, 32, $w, $add, $and45);
   _out($f, $prefix$0, $pl$0);
   _out($f, $s35$0, 3);
   $xor = $fl ^ 8192;
   _pad_524($f, 32, $w, $add, $xor);
   $add653$sink524 = $add;
  } else {
   $call55 = +_frexp($y$addr$0, $e2);
   $mul = $call55 * 2.0;
   $tobool56 = $mul != 0.0;
   if ($tobool56) {
    $13 = HEAP32[$e2 >> 2] | 0;
    $dec = $13 + -1 | 0;
    HEAP32[$e2 >> 2] = $dec;
   }
   $or = $t | 32;
   $cmp59 = ($or | 0) == 97;
   if ($cmp59) {
    $and62 = $t & 32;
    $tobool63 = ($and62 | 0) == 0;
    $add$ptr65 = $prefix$0 + 9 | 0;
    $spec$select = $tobool63 ? $prefix$0 : $add$ptr65;
    $add67 = $pl$0 | 2;
    $14 = $p >>> 0 > 11;
    $sub74 = 12 - $p | 0;
    $tobool76421 = ($sub74 | 0) == 0;
    $tobool76 = $14 | $tobool76421;
    do {
     if ($tobool76) {
      $y$addr$1 = $mul;
     } else {
      $re$1426 = $sub74;
      $round$0425 = 8.0;
      while (1) {
       $dec78 = $re$1426 + -1 | 0;
       $mul80 = $round$0425 * 16.0;
       $tobool79 = ($dec78 | 0) == 0;
       if ($tobool79) {
        break;
       } else {
        $re$1426 = $dec78;
        $round$0425 = $mul80;
       }
      }
      $15 = HEAP8[$spec$select >> 0] | 0;
      $cmp82 = $15 << 24 >> 24 == 45;
      if ($cmp82) {
       $sub85 = -$mul;
       $sub86 = $sub85 - $mul80;
       $add87 = $mul80 + $sub86;
       $sub88 = -$add87;
       $y$addr$1 = $sub88;
       break;
      } else {
       $add90 = $mul + $mul80;
       $sub91 = $add90 - $mul80;
       $y$addr$1 = $sub91;
       break;
      }
     }
    } while (0);
    $16 = HEAP32[$e2 >> 2] | 0;
    $cmp94 = ($16 | 0) < 0;
    $sub97 = 0 - $16 | 0;
    $cond100 = $cmp94 ? $sub97 : $16;
    $17 = ($cond100 | 0) < 0;
    $18 = $17 << 31 >> 31;
    $19 = _fmt_u($cond100, $18, $arrayidx) | 0;
    $cmp103 = ($19 | 0) == ($arrayidx | 0);
    if ($cmp103) {
     $incdec$ptr106 = $ebuf0 + 11 | 0;
     HEAP8[$incdec$ptr106 >> 0] = 48;
     $estr$0 = $incdec$ptr106;
    } else {
     $estr$0 = $19;
    }
    $20 = $16 >> 31;
    $21 = $20 & 2;
    $22 = $21 + 43 | 0;
    $conv111 = $22 & 255;
    $incdec$ptr112 = $estr$0 + -1 | 0;
    HEAP8[$incdec$ptr112 >> 0] = $conv111;
    $add113 = $t + 15 | 0;
    $conv114 = $add113 & 255;
    $incdec$ptr115 = $estr$0 + -2 | 0;
    HEAP8[$incdec$ptr115 >> 0] = $conv114;
    $cmp131 = ($p | 0) < 1;
    $and134 = $fl & 8;
    $tobool135 = ($and134 | 0) == 0;
    $s$0 = $buf;
    $y$addr$2 = $y$addr$1;
    while (1) {
     $conv116 = ~~$y$addr$2;
     $arrayidx117 = 41952 + $conv116 | 0;
     $23 = HEAP8[$arrayidx117 >> 0] | 0;
     $conv118393 = $23 & 255;
     $or120 = $and62 | $conv118393;
     $conv121 = $or120 & 255;
     $incdec$ptr122 = $s$0 + 1 | 0;
     HEAP8[$s$0 >> 0] = $conv121;
     $conv123 = +($conv116 | 0);
     $sub124 = $y$addr$2 - $conv123;
     $mul125 = $sub124 * 16.0;
     $sub$ptr$lhs$cast = $incdec$ptr122;
     $sub$ptr$sub = $sub$ptr$lhs$cast - $sub$ptr$rhs$cast$le | 0;
     $cmp127 = ($sub$ptr$sub | 0) == 1;
     if ($cmp127) {
      $tobool129 = $mul125 == 0.0;
      $or$cond1$not = $cmp131 & $tobool129;
      $or$cond = $tobool135 & $or$cond1$not;
      if ($or$cond) {
       $s$1 = $incdec$ptr122;
      } else {
       $incdec$ptr137 = $s$0 + 2 | 0;
       HEAP8[$incdec$ptr122 >> 0] = 46;
       $s$1 = $incdec$ptr137;
      }
     } else {
      $s$1 = $incdec$ptr122;
     }
     $tobool139 = $mul125 != 0.0;
     if ($tobool139) {
      $s$0 = $s$1;
      $y$addr$2 = $mul125;
     } else {
      break;
     }
    }
    $tobool140 = ($p | 0) == 0;
    $$pre517 = $s$1;
    if ($tobool140) {
     label = 25;
    } else {
     $sub$ptr$sub145 = -2 - $sub$ptr$rhs$cast$le | 0;
     $sub146 = $sub$ptr$sub145 + $$pre517 | 0;
     $cmp147 = ($sub146 | 0) < ($p | 0);
     if ($cmp147) {
      $sub$ptr$lhs$cast151 = $arrayidx;
      $sub$ptr$rhs$cast152 = $incdec$ptr115;
      $sub$ptr$sub153 = $p + 2 | 0;
      $add150 = $sub$ptr$sub153 + $sub$ptr$lhs$cast151 | 0;
      $add154 = $add150 - $sub$ptr$rhs$cast152 | 0;
      $l$0 = $add154;
      $sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;
      $sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
     } else {
      label = 25;
     }
    }
    if ((label | 0) == 25) {
     $sub$ptr$lhs$cast160 = $arrayidx;
     $sub$ptr$rhs$cast161 = $incdec$ptr115;
     $sub$ptr$sub159 = $sub$ptr$lhs$cast160 - $sub$ptr$rhs$cast$le | 0;
     $sub$ptr$sub162 = $sub$ptr$sub159 - $sub$ptr$rhs$cast161 | 0;
     $add163 = $sub$ptr$sub162 + $$pre517 | 0;
     $l$0 = $add163;
     $sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;
     $sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
    }
    $add165 = $l$0 + $add67 | 0;
    _pad_524($f, 32, $w, $add165, $fl);
    _out($f, $spec$select, $add67);
    $xor167 = $fl ^ 65536;
    _pad_524($f, 48, $w, $add165, $xor167);
    $sub$ptr$sub172 = $$pre517 - $sub$ptr$rhs$cast$le | 0;
    _out($f, $buf, $sub$ptr$sub172);
    $sub$ptr$sub175 = $sub$ptr$lhs$cast173$pre$phiZZZZ2D - $sub$ptr$rhs$cast174$pre$phiZZZZ2D | 0;
    $24 = $sub$ptr$sub175 + $sub$ptr$sub172 | 0;
    $sub181 = $l$0 - $24 | 0;
    _pad_524($f, 48, $sub181, 0, 0);
    _out($f, $incdec$ptr115, $sub$ptr$sub175);
    $xor186 = $fl ^ 8192;
    _pad_524($f, 32, $w, $add165, $xor186);
    $add653$sink524 = $add165;
    break;
   }
   $cmp196 = ($p | 0) < 0;
   $spec$select395 = $cmp196 ? 6 : $p;
   if ($tobool56) {
    $mul202 = $mul * 268435456.0;
    $25 = HEAP32[$e2 >> 2] | 0;
    $sub203 = $25 + -28 | 0;
    HEAP32[$e2 >> 2] = $sub203;
    $$pr = $sub203;
    $y$addr$3 = $mul202;
   } else {
    $$pre = HEAP32[$e2 >> 2] | 0;
    $$pr = $$pre;
    $y$addr$3 = $mul;
   }
   $cmp205 = ($$pr | 0) < 0;
   $add$ptr213 = $big + 288 | 0;
   $z$0 = $cmp205 ? $big : $add$ptr213;
   $y$addr$4 = $y$addr$3;
   $z$1 = $z$0;
   while (1) {
    $conv216 = ~~$y$addr$4 >>> 0;
    HEAP32[$z$1 >> 2] = $conv216;
    $incdec$ptr217 = $z$1 + 4 | 0;
    $conv218 = +($conv216 >>> 0);
    $sub219 = $y$addr$4 - $conv218;
    $mul220 = $sub219 * 1.0e9;
    $tobool222 = $mul220 != 0.0;
    if ($tobool222) {
     $y$addr$4 = $mul220;
     $z$1 = $incdec$ptr217;
    } else {
     break;
    }
   }
   $sub$ptr$rhs$cast345 = $z$0;
   $cmp225500 = ($$pr | 0) > 0;
   if ($cmp225500) {
    $27 = $$pr;
    $a$1502 = $z$0;
    $z$2501 = $incdec$ptr217;
    while (1) {
     $26 = ($27 | 0) < 29;
     $cond233 = $26 ? $27 : 29;
     $d$0491 = $z$2501 + -4 | 0;
     $cmp235492 = $d$0491 >>> 0 < $a$1502 >>> 0;
     if ($cmp235492) {
      $a$2 = $a$1502;
     } else {
      $carry$0493 = 0;
      $d$0494 = $d$0491;
      while (1) {
       $28 = HEAP32[$d$0494 >> 2] | 0;
       $29 = _bitshift64Shl($28 | 0, 0, $cond233 | 0) | 0;
       $30 = getTempRet0() | 0;
       $31 = _i64Add($29 | 0, $30 | 0, $carry$0493 | 0, 0) | 0;
       $32 = getTempRet0() | 0;
       $33 = ___udivdi3($31 | 0, $32 | 0, 1e9, 0) | 0;
       $34 = getTempRet0() | 0;
       $35 = ___muldi3($33 | 0, $34 | 0, -1e9, -1) | 0;
       $36 = getTempRet0() | 0;
       $37 = _i64Add($35 | 0, $36 | 0, $31 | 0, $32 | 0) | 0;
       $38 = getTempRet0() | 0;
       HEAP32[$d$0494 >> 2] = $37;
       $d$0 = $d$0494 + -4 | 0;
       $cmp235 = $d$0 >>> 0 < $a$1502 >>> 0;
       if ($cmp235) {
        break;
       } else {
        $carry$0493 = $33;
        $d$0494 = $d$0;
       }
      }
      $tobool244 = ($33 | 0) == 0;
      if ($tobool244) {
       $a$2 = $a$1502;
      } else {
       $incdec$ptr246 = $a$1502 + -4 | 0;
       HEAP32[$incdec$ptr246 >> 2] = $33;
       $a$2 = $incdec$ptr246;
      }
     }
     $cmp249496 = $z$2501 >>> 0 > $a$2 >>> 0;
     L57 : do {
      if ($cmp249496) {
       $z$3497 = $z$2501;
       while (1) {
        $arrayidx251 = $z$3497 + -4 | 0;
        $39 = HEAP32[$arrayidx251 >> 2] | 0;
        $tobool252 = ($39 | 0) == 0;
        if (!$tobool252) {
         $z$3$lcssa = $z$3497;
         break L57;
        }
        $cmp249 = $arrayidx251 >>> 0 > $a$2 >>> 0;
        if ($cmp249) {
         $z$3497 = $arrayidx251;
        } else {
         $z$3$lcssa = $arrayidx251;
         break;
        }
       }
      } else {
       $z$3$lcssa = $z$2501;
      }
     } while (0);
     $40 = HEAP32[$e2 >> 2] | 0;
     $sub256 = $40 - $cond233 | 0;
     HEAP32[$e2 >> 2] = $sub256;
     $cmp225 = ($sub256 | 0) > 0;
     if ($cmp225) {
      $27 = $sub256;
      $a$1502 = $a$2;
      $z$2501 = $z$3$lcssa;
     } else {
      $$pr415 = $sub256;
      $a$1$lcssa = $a$2;
      $z$2$lcssa = $z$3$lcssa;
      break;
     }
    }
   } else {
    $$pr415 = $$pr;
    $a$1$lcssa = $z$0;
    $z$2$lcssa = $incdec$ptr217;
   }
   $cmp259486 = ($$pr415 | 0) < 0;
   if ($cmp259486) {
    $add273 = $spec$select395 + 25 | 0;
    $div274 = ($add273 | 0) / 9 & -1;
    $add275 = $div274 + 1 | 0;
    $cmp299 = ($or | 0) == 102;
    $41 = $$pr415;
    $a$3488 = $a$1$lcssa;
    $z$4487 = $z$2$lcssa;
    while (1) {
     $sub264 = 0 - $41 | 0;
     $42 = ($sub264 | 0) < 9;
     $cond271 = $42 ? $sub264 : 9;
     $cmp277482 = $a$3488 >>> 0 < $z$4487 >>> 0;
     if ($cmp277482) {
      $shl280 = 1 << $cond271;
      $sub281 = $shl280 + -1 | 0;
      $shr285 = 1e9 >>> $cond271;
      $carry262$0484 = 0;
      $d$1483 = $a$3488;
      while (1) {
       $44 = HEAP32[$d$1483 >> 2] | 0;
       $and282 = $44 & $sub281;
       $shr283 = $44 >>> $cond271;
       $add284 = $shr283 + $carry262$0484 | 0;
       HEAP32[$d$1483 >> 2] = $add284;
       $mul286 = Math_imul($and282, $shr285) | 0;
       $incdec$ptr288 = $d$1483 + 4 | 0;
       $cmp277 = $incdec$ptr288 >>> 0 < $z$4487 >>> 0;
       if ($cmp277) {
        $carry262$0484 = $mul286;
        $d$1483 = $incdec$ptr288;
       } else {
        break;
       }
      }
      $45 = HEAP32[$a$3488 >> 2] | 0;
      $tobool290 = ($45 | 0) == 0;
      $incdec$ptr292 = $a$3488 + 4 | 0;
      $spec$select396 = $tobool290 ? $incdec$ptr292 : $a$3488;
      $tobool294 = ($mul286 | 0) == 0;
      if ($tobool294) {
       $spec$select396523 = $spec$select396;
       $z$5 = $z$4487;
      } else {
       $incdec$ptr296 = $z$4487 + 4 | 0;
       HEAP32[$z$4487 >> 2] = $mul286;
       $spec$select396523 = $spec$select396;
       $z$5 = $incdec$ptr296;
      }
     } else {
      $43 = HEAP32[$a$3488 >> 2] | 0;
      $tobool290519 = ($43 | 0) == 0;
      $incdec$ptr292520 = $a$3488 + 4 | 0;
      $spec$select396521 = $tobool290519 ? $incdec$ptr292520 : $a$3488;
      $spec$select396523 = $spec$select396521;
      $z$5 = $z$4487;
     }
     $cond304 = $cmp299 ? $z$0 : $spec$select396523;
     $sub$ptr$lhs$cast305 = $z$5;
     $sub$ptr$rhs$cast306 = $cond304;
     $sub$ptr$sub307 = $sub$ptr$lhs$cast305 - $sub$ptr$rhs$cast306 | 0;
     $sub$ptr$div = $sub$ptr$sub307 >> 2;
     $cmp308 = ($sub$ptr$div | 0) > ($add275 | 0);
     $add$ptr311 = $cond304 + ($add275 << 2) | 0;
     $spec$select397 = $cmp308 ? $add$ptr311 : $z$5;
     $46 = HEAP32[$e2 >> 2] | 0;
     $add313 = $46 + $cond271 | 0;
     HEAP32[$e2 >> 2] = $add313;
     $cmp259 = ($add313 | 0) < 0;
     if ($cmp259) {
      $41 = $add313;
      $a$3488 = $spec$select396523;
      $z$4487 = $spec$select397;
     } else {
      $a$3$lcssa = $spec$select396523;
      $z$4$lcssa = $spec$select397;
      break;
     }
    }
   } else {
    $a$3$lcssa = $a$1$lcssa;
    $z$4$lcssa = $z$2$lcssa;
   }
   $cmp315 = $a$3$lcssa >>> 0 < $z$4$lcssa >>> 0;
   if ($cmp315) {
    $sub$ptr$rhs$cast319 = $a$3$lcssa;
    $sub$ptr$sub320 = $sub$ptr$rhs$cast345 - $sub$ptr$rhs$cast319 | 0;
    $sub$ptr$div321 = $sub$ptr$sub320 >> 2;
    $mul322 = $sub$ptr$div321 * 9 | 0;
    $47 = HEAP32[$a$3$lcssa >> 2] | 0;
    $cmp324478 = $47 >>> 0 < 10;
    if ($cmp324478) {
     $e$1 = $mul322;
    } else {
     $e$0480 = $mul322;
     $i$0479 = 10;
     while (1) {
      $mul328 = $i$0479 * 10 | 0;
      $inc = $e$0480 + 1 | 0;
      $cmp324 = $47 >>> 0 < $mul328 >>> 0;
      if ($cmp324) {
       $e$1 = $inc;
       break;
      } else {
       $e$0480 = $inc;
       $i$0479 = $mul328;
      }
     }
    }
   } else {
    $e$1 = 0;
   }
   $cmp333 = ($or | 0) == 102;
   $mul335 = $cmp333 ? 0 : $e$1;
   $sub336 = $spec$select395 - $mul335 | 0;
   $cmp338 = ($or | 0) == 103;
   $tobool341 = ($spec$select395 | 0) != 0;
   $48 = $tobool341 & $cmp338;
   $land$ext$neg = $48 << 31 >> 31;
   $sub343 = $sub336 + $land$ext$neg | 0;
   $sub$ptr$lhs$cast344 = $z$4$lcssa;
   $sub$ptr$sub346 = $sub$ptr$lhs$cast344 - $sub$ptr$rhs$cast345 | 0;
   $sub$ptr$div347 = $sub$ptr$sub346 >> 2;
   $49 = $sub$ptr$div347 * 9 | 0;
   $mul349 = $49 + -9 | 0;
   $cmp350 = ($sub343 | 0) < ($mul349 | 0);
   if ($cmp350) {
    $add$ptr354 = $z$0 + 4 | 0;
    $add355 = $sub343 + 9216 | 0;
    $div356 = ($add355 | 0) / 9 & -1;
    $sub357 = $div356 + -1024 | 0;
    $add$ptr358 = $add$ptr354 + ($sub357 << 2) | 0;
    $50 = Math_imul($div356, -9) | 0;
    $51 = $50 + $add355 | 0;
    $cmp363474 = ($51 | 0) < 8;
    if ($cmp363474) {
     $i$1475 = 10;
     $j$0$in476 = $51;
     while (1) {
      $j$0 = $j$0$in476 + 1 | 0;
      $mul367 = $i$1475 * 10 | 0;
      $cmp363 = ($j$0$in476 | 0) < 7;
      if ($cmp363) {
       $i$1475 = $mul367;
       $j$0$in476 = $j$0;
      } else {
       $i$1$lcssa = $mul367;
       break;
      }
     }
    } else {
     $i$1$lcssa = 10;
    }
    $52 = HEAP32[$add$ptr358 >> 2] | 0;
    $div378 = ($52 >>> 0) / ($i$1$lcssa >>> 0) & -1;
    $53 = Math_imul($div378, $i$1$lcssa) | 0;
    $54 = $52 - $53 | 0;
    $tobool371 = ($54 | 0) == 0;
    $add$ptr373 = $add$ptr358 + 4 | 0;
    $cmp374 = ($add$ptr373 | 0) == ($z$4$lcssa | 0);
    $or$cond398 = $cmp374 & $tobool371;
    if ($or$cond398) {
     $a$8 = $a$3$lcssa;
     $d$4 = $add$ptr358;
     $e$4 = $e$1;
    } else {
     $and379 = $div378 & 1;
     $tobool380 = ($and379 | 0) == 0;
     $spec$select399 = $tobool380 ? 9007199254740992.0 : 9007199254740994.0;
     $div384 = $i$1$lcssa >>> 1;
     $cmp385 = $54 >>> 0 < $div384 >>> 0;
     $cmp390 = ($54 | 0) == ($div384 | 0);
     $or$cond400 = $cmp374 & $cmp390;
     $spec$select412 = $or$cond400 ? 1.0 : 1.5;
     $spec$select418 = $cmp385 ? .5 : $spec$select412;
     $tobool400 = ($pl$0 | 0) == 0;
     if ($tobool400) {
      $round377$1 = $spec$select399;
      $small$1 = $spec$select418;
     } else {
      $mul407 = -$spec$select418;
      $mul406 = -$spec$select399;
      $55 = HEAP8[$prefix$0 >> 0] | 0;
      $cmp403 = $55 << 24 >> 24 == 45;
      $spec$select419 = $cmp403 ? $mul406 : $spec$select399;
      $spec$select420 = $cmp403 ? $mul407 : $spec$select418;
      $round377$1 = $spec$select419;
      $small$1 = $spec$select420;
     }
     HEAP32[$add$ptr358 >> 2] = $53;
     $add410 = $round377$1 + $small$1;
     $cmp411 = $add410 != $round377$1;
     if ($cmp411) {
      $add414 = $53 + $i$1$lcssa | 0;
      HEAP32[$add$ptr358 >> 2] = $add414;
      $cmp416469 = $add414 >>> 0 > 999999999;
      if ($cmp416469) {
       $a$5471 = $a$3$lcssa;
       $d$2470 = $add$ptr358;
       while (1) {
        $incdec$ptr419 = $d$2470 + -4 | 0;
        HEAP32[$d$2470 >> 2] = 0;
        $cmp420 = $incdec$ptr419 >>> 0 < $a$5471 >>> 0;
        if ($cmp420) {
         $incdec$ptr423 = $a$5471 + -4 | 0;
         HEAP32[$incdec$ptr423 >> 2] = 0;
         $a$6 = $incdec$ptr423;
        } else {
         $a$6 = $a$5471;
        }
        $56 = HEAP32[$incdec$ptr419 >> 2] | 0;
        $inc425 = $56 + 1 | 0;
        HEAP32[$incdec$ptr419 >> 2] = $inc425;
        $cmp416 = $inc425 >>> 0 > 999999999;
        if ($cmp416) {
         $a$5471 = $a$6;
         $d$2470 = $incdec$ptr419;
        } else {
         $a$5$lcssa = $a$6;
         $d$2$lcssa = $incdec$ptr419;
         break;
        }
       }
      } else {
       $a$5$lcssa = $a$3$lcssa;
       $d$2$lcssa = $add$ptr358;
      }
      $sub$ptr$rhs$cast428 = $a$5$lcssa;
      $sub$ptr$sub429 = $sub$ptr$rhs$cast345 - $sub$ptr$rhs$cast428 | 0;
      $sub$ptr$div430 = $sub$ptr$sub429 >> 2;
      $mul431 = $sub$ptr$div430 * 9 | 0;
      $57 = HEAP32[$a$5$lcssa >> 2] | 0;
      $cmp433465 = $57 >>> 0 < 10;
      if ($cmp433465) {
       $a$8 = $a$5$lcssa;
       $d$4 = $d$2$lcssa;
       $e$4 = $mul431;
      } else {
       $e$2467 = $mul431;
       $i$2466 = 10;
       while (1) {
        $mul437 = $i$2466 * 10 | 0;
        $inc438 = $e$2467 + 1 | 0;
        $cmp433 = $57 >>> 0 < $mul437 >>> 0;
        if ($cmp433) {
         $a$8 = $a$5$lcssa;
         $d$4 = $d$2$lcssa;
         $e$4 = $inc438;
         break;
        } else {
         $e$2467 = $inc438;
         $i$2466 = $mul437;
        }
       }
      }
     } else {
      $a$8 = $a$3$lcssa;
      $d$4 = $add$ptr358;
      $e$4 = $e$1;
     }
    }
    $add$ptr442 = $d$4 + 4 | 0;
    $cmp443 = $z$4$lcssa >>> 0 > $add$ptr442 >>> 0;
    $spec$select401 = $cmp443 ? $add$ptr442 : $z$4$lcssa;
    $a$9 = $a$8;
    $e$5 = $e$4;
    $z$8 = $spec$select401;
   } else {
    $a$9 = $a$3$lcssa;
    $e$5 = $e$1;
    $z$8 = $z$4$lcssa;
   }
   $sub626 = 0 - $e$5 | 0;
   $cmp450458 = $z$8 >>> 0 > $a$9 >>> 0;
   L109 : do {
    if ($cmp450458) {
     $z$9459 = $z$8;
     while (1) {
      $arrayidx453 = $z$9459 + -4 | 0;
      $58 = HEAP32[$arrayidx453 >> 2] | 0;
      $tobool454 = ($58 | 0) == 0;
      if (!$tobool454) {
       $cmp450$lcssa = 1;
       $z$9$lcssa = $z$9459;
       break L109;
      }
      $cmp450 = $arrayidx453 >>> 0 > $a$9 >>> 0;
      if ($cmp450) {
       $z$9459 = $arrayidx453;
      } else {
       $cmp450$lcssa = 0;
       $z$9$lcssa = $arrayidx453;
       break;
      }
     }
    } else {
     $cmp450$lcssa = 0;
     $z$9$lcssa = $z$8;
    }
   } while (0);
   do {
    if ($cmp338) {
     $not$tobool341 = $tobool341 ^ 1;
     $inc468 = $not$tobool341 & 1;
     $spec$select402 = $spec$select395 + $inc468 | 0;
     $cmp470 = ($spec$select402 | 0) > ($e$5 | 0);
     $cmp473 = ($e$5 | 0) > -5;
     $or$cond2 = $cmp470 & $cmp473;
     if ($or$cond2) {
      $dec476 = $t + -1 | 0;
      $add477$neg = $spec$select402 + -1 | 0;
      $sub478 = $add477$neg - $e$5 | 0;
      $p$addr$2 = $sub478;
      $t$addr$0 = $dec476;
     } else {
      $sub480 = $t + -2 | 0;
      $dec481 = $spec$select402 + -1 | 0;
      $p$addr$2 = $dec481;
      $t$addr$0 = $sub480;
     }
     $and483 = $fl & 8;
     $tobool484 = ($and483 | 0) == 0;
     if ($tobool484) {
      if ($cmp450$lcssa) {
       $arrayidx489 = $z$9$lcssa + -4 | 0;
       $59 = HEAP32[$arrayidx489 >> 2] | 0;
       $tobool490 = ($59 | 0) == 0;
       if ($tobool490) {
        $j$2 = 9;
       } else {
        $rem494453 = ($59 >>> 0) % 10 & -1;
        $cmp495454 = ($rem494453 | 0) == 0;
        if ($cmp495454) {
         $i$3455 = 10;
         $j$1456 = 0;
         while (1) {
          $mul499 = $i$3455 * 10 | 0;
          $inc500 = $j$1456 + 1 | 0;
          $rem494 = ($59 >>> 0) % ($mul499 >>> 0) & -1;
          $cmp495 = ($rem494 | 0) == 0;
          if ($cmp495) {
           $i$3455 = $mul499;
           $j$1456 = $inc500;
          } else {
           $j$2 = $inc500;
           break;
          }
         }
        } else {
         $j$2 = 0;
        }
       }
      } else {
       $j$2 = 9;
      }
      $or504 = $t$addr$0 | 32;
      $cmp505 = ($or504 | 0) == 102;
      $sub$ptr$lhs$cast508 = $z$9$lcssa;
      $sub$ptr$sub510 = $sub$ptr$lhs$cast508 - $sub$ptr$rhs$cast345 | 0;
      $sub$ptr$div511 = $sub$ptr$sub510 >> 2;
      $60 = $sub$ptr$div511 * 9 | 0;
      $mul513 = $60 + -9 | 0;
      if ($cmp505) {
       $sub514 = $mul513 - $j$2 | 0;
       $61 = ($sub514 | 0) > 0;
       $spec$select403 = $61 ? $sub514 : 0;
       $cmp528 = ($p$addr$2 | 0) < ($spec$select403 | 0);
       $spec$select413 = $cmp528 ? $p$addr$2 : $spec$select403;
       $p$addr$3 = $spec$select413;
       $t$addr$1 = $t$addr$0;
       break;
      } else {
       $add561 = $mul513 + $e$5 | 0;
       $sub562 = $add561 - $j$2 | 0;
       $62 = ($sub562 | 0) > 0;
       $spec$select405 = $62 ? $sub562 : 0;
       $cmp577 = ($p$addr$2 | 0) < ($spec$select405 | 0);
       $spec$select414 = $cmp577 ? $p$addr$2 : $spec$select405;
       $p$addr$3 = $spec$select414;
       $t$addr$1 = $t$addr$0;
       break;
      }
     } else {
      $p$addr$3 = $p$addr$2;
      $t$addr$1 = $t$addr$0;
     }
    } else {
     $p$addr$3 = $spec$select395;
     $t$addr$1 = $t;
    }
   } while (0);
   $tobool609 = ($p$addr$3 | 0) != 0;
   $and610 = $fl >>> 3;
   $and610$lobit = $and610 & 1;
   $63 = $tobool609 ? 1 : $and610$lobit;
   $or613 = $t$addr$1 | 32;
   $cmp614 = ($or613 | 0) == 102;
   if ($cmp614) {
    $cmp617 = ($e$5 | 0) > 0;
    $add620 = $cmp617 ? $e$5 : 0;
    $estr$2 = 0;
    $sub$ptr$sub650$pn = $add620;
   } else {
    $cmp623 = ($e$5 | 0) < 0;
    $cond629 = $cmp623 ? $sub626 : $e$5;
    $64 = ($cond629 | 0) < 0;
    $65 = $64 << 31 >> 31;
    $66 = _fmt_u($cond629, $65, $arrayidx) | 0;
    $sub$ptr$lhs$cast633 = $arrayidx;
    $sub$ptr$rhs$cast634447 = $66;
    $sub$ptr$sub635448 = $sub$ptr$lhs$cast633 - $sub$ptr$rhs$cast634447 | 0;
    $cmp636449 = ($sub$ptr$sub635448 | 0) < 2;
    if ($cmp636449) {
     $estr$1450 = $66;
     while (1) {
      $incdec$ptr639 = $estr$1450 + -1 | 0;
      HEAP8[$incdec$ptr639 >> 0] = 48;
      $sub$ptr$rhs$cast634 = $incdec$ptr639;
      $sub$ptr$sub635 = $sub$ptr$lhs$cast633 - $sub$ptr$rhs$cast634 | 0;
      $cmp636 = ($sub$ptr$sub635 | 0) < 2;
      if ($cmp636) {
       $estr$1450 = $incdec$ptr639;
      } else {
       $estr$1$lcssa = $incdec$ptr639;
       break;
      }
     }
    } else {
     $estr$1$lcssa = $66;
    }
    $67 = $e$5 >> 31;
    $68 = $67 & 2;
    $69 = $68 + 43 | 0;
    $conv644 = $69 & 255;
    $incdec$ptr645 = $estr$1$lcssa + -1 | 0;
    HEAP8[$incdec$ptr645 >> 0] = $conv644;
    $conv646 = $t$addr$1 & 255;
    $incdec$ptr647 = $estr$1$lcssa + -2 | 0;
    HEAP8[$incdec$ptr647 >> 0] = $conv646;
    $sub$ptr$rhs$cast649 = $incdec$ptr647;
    $sub$ptr$sub650 = $sub$ptr$lhs$cast633 - $sub$ptr$rhs$cast649 | 0;
    $estr$2 = $incdec$ptr647;
    $sub$ptr$sub650$pn = $sub$ptr$sub650;
   }
   $add608 = $pl$0 + 1 | 0;
   $add612 = $add608 + $p$addr$3 | 0;
   $l$1 = $add612 + $63 | 0;
   $add653 = $l$1 + $sub$ptr$sub650$pn | 0;
   _pad_524($f, 32, $w, $add653, $fl);
   _out($f, $prefix$0, $pl$0);
   $xor655 = $fl ^ 65536;
   _pad_524($f, 48, $w, $add653, $xor655);
   if ($cmp614) {
    $cmp660 = $a$9 >>> 0 > $z$0 >>> 0;
    $spec$select408 = $cmp660 ? $z$0 : $a$9;
    $add$ptr671 = $buf + 9 | 0;
    $sub$ptr$lhs$cast694 = $add$ptr671;
    $incdec$ptr689 = $buf + 8 | 0;
    $d$5438 = $spec$select408;
    while (1) {
     $70 = HEAP32[$d$5438 >> 2] | 0;
     $71 = _fmt_u($70, 0, $add$ptr671) | 0;
     $cmp673 = ($d$5438 | 0) == ($spec$select408 | 0);
     if ($cmp673) {
      $cmp686 = ($71 | 0) == ($add$ptr671 | 0);
      if ($cmp686) {
       HEAP8[$incdec$ptr689 >> 0] = 48;
       $s668$1 = $incdec$ptr689;
      } else {
       $s668$1 = $71;
      }
     } else {
      $cmp678435 = $71 >>> 0 > $buf >>> 0;
      if ($cmp678435) {
       $72 = $71;
       $73 = $72 - $sub$ptr$rhs$cast$le | 0;
       _memset($buf | 0, 48, $73 | 0) | 0;
       $s668$0436 = $71;
       while (1) {
        $incdec$ptr681 = $s668$0436 + -1 | 0;
        $cmp678 = $incdec$ptr681 >>> 0 > $buf >>> 0;
        if ($cmp678) {
         $s668$0436 = $incdec$ptr681;
        } else {
         $s668$1 = $incdec$ptr681;
         break;
        }
       }
      } else {
       $s668$1 = $71;
      }
     }
     $sub$ptr$rhs$cast695 = $s668$1;
     $sub$ptr$sub696 = $sub$ptr$lhs$cast694 - $sub$ptr$rhs$cast695 | 0;
     _out($f, $s668$1, $sub$ptr$sub696);
     $incdec$ptr698 = $d$5438 + 4 | 0;
     $cmp665 = $incdec$ptr698 >>> 0 > $z$0 >>> 0;
     if ($cmp665) {
      break;
     } else {
      $d$5438 = $incdec$ptr698;
     }
    }
    $tobool609$not = $tobool609 ^ 1;
    $and702 = $fl & 8;
    $tobool703 = ($and702 | 0) == 0;
    $or$cond409 = $tobool703 & $tobool609$not;
    if (!$or$cond409) {
     _out($f, 48268, 1);
    }
    $cmp707430 = $incdec$ptr698 >>> 0 < $z$9$lcssa >>> 0;
    $cmp710431 = ($p$addr$3 | 0) > 0;
    $74 = $cmp710431 & $cmp707430;
    if ($74) {
     $d$6432 = $incdec$ptr698;
     $p$addr$4433 = $p$addr$3;
     while (1) {
      $75 = HEAP32[$d$6432 >> 2] | 0;
      $76 = _fmt_u($75, 0, $add$ptr671) | 0;
      $cmp722427 = $76 >>> 0 > $buf >>> 0;
      if ($cmp722427) {
       $77 = $76;
       $78 = $77 - $sub$ptr$rhs$cast$le | 0;
       _memset($buf | 0, 48, $78 | 0) | 0;
       $s715$0428 = $76;
       while (1) {
        $incdec$ptr725 = $s715$0428 + -1 | 0;
        $cmp722 = $incdec$ptr725 >>> 0 > $buf >>> 0;
        if ($cmp722) {
         $s715$0428 = $incdec$ptr725;
        } else {
         $s715$0$lcssa = $incdec$ptr725;
         break;
        }
       }
      } else {
       $s715$0$lcssa = $76;
      }
      $79 = ($p$addr$4433 | 0) < 9;
      $cond732 = $79 ? $p$addr$4433 : 9;
      _out($f, $s715$0$lcssa, $cond732);
      $incdec$ptr734 = $d$6432 + 4 | 0;
      $sub735 = $p$addr$4433 + -9 | 0;
      $cmp707 = $incdec$ptr734 >>> 0 < $z$9$lcssa >>> 0;
      $cmp710 = ($p$addr$4433 | 0) > 9;
      $80 = $cmp710 & $cmp707;
      if ($80) {
       $d$6432 = $incdec$ptr734;
       $p$addr$4433 = $sub735;
      } else {
       $p$addr$4$lcssa = $sub735;
       break;
      }
     }
    } else {
     $p$addr$4$lcssa = $p$addr$3;
    }
    $add737 = $p$addr$4$lcssa + 9 | 0;
    _pad_524($f, 48, $add737, 9, 0);
   } else {
    $add$ptr742 = $a$9 + 4 | 0;
    $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $add$ptr742;
    $cmp745442 = $a$9 >>> 0 < $spec$select410 >>> 0;
    $cmp748443 = ($p$addr$3 | 0) > -1;
    $81 = $cmp745442 & $cmp748443;
    if ($81) {
     $add$ptr756 = $buf + 9 | 0;
     $and780 = $fl & 8;
     $tobool781 = ($and780 | 0) == 0;
     $sub$ptr$lhs$cast787 = $add$ptr756;
     $incdec$ptr763 = $buf + 8 | 0;
     $d$7444 = $a$9;
     $p$addr$5445 = $p$addr$3;
     while (1) {
      $82 = HEAP32[$d$7444 >> 2] | 0;
      $83 = _fmt_u($82, 0, $add$ptr756) | 0;
      $cmp760 = ($83 | 0) == ($add$ptr756 | 0);
      if ($cmp760) {
       HEAP8[$incdec$ptr763 >> 0] = 48;
       $s753$0 = $incdec$ptr763;
      } else {
       $s753$0 = $83;
      }
      $cmp765 = ($d$7444 | 0) == ($a$9 | 0);
      do {
       if ($cmp765) {
        $incdec$ptr776 = $s753$0 + 1 | 0;
        _out($f, $s753$0, 1);
        $cmp777 = ($p$addr$5445 | 0) < 1;
        $or$cond411 = $tobool781 & $cmp777;
        if ($or$cond411) {
         $s753$2 = $incdec$ptr776;
         break;
        }
        _out($f, 48268, 1);
        $s753$2 = $incdec$ptr776;
       } else {
        $cmp770439 = $s753$0 >>> 0 > $buf >>> 0;
        if (!$cmp770439) {
         $s753$2 = $s753$0;
         break;
        }
        $scevgep513 = $s753$0 + $0 | 0;
        $scevgep513514 = $scevgep513;
        _memset($buf | 0, 48, $scevgep513514 | 0) | 0;
        $s753$1440 = $s753$0;
        while (1) {
         $incdec$ptr773 = $s753$1440 + -1 | 0;
         $cmp770 = $incdec$ptr773 >>> 0 > $buf >>> 0;
         if ($cmp770) {
          $s753$1440 = $incdec$ptr773;
         } else {
          $s753$2 = $incdec$ptr773;
          break;
         }
        }
       }
      } while (0);
      $sub$ptr$rhs$cast788 = $s753$2;
      $sub$ptr$sub789 = $sub$ptr$lhs$cast787 - $sub$ptr$rhs$cast788 | 0;
      $cmp790 = ($p$addr$5445 | 0) > ($sub$ptr$sub789 | 0);
      $cond800 = $cmp790 ? $sub$ptr$sub789 : $p$addr$5445;
      _out($f, $s753$2, $cond800);
      $sub806 = $p$addr$5445 - $sub$ptr$sub789 | 0;
      $incdec$ptr808 = $d$7444 + 4 | 0;
      $cmp745 = $incdec$ptr808 >>> 0 < $spec$select410 >>> 0;
      $cmp748 = ($sub806 | 0) > -1;
      $84 = $cmp745 & $cmp748;
      if ($84) {
       $d$7444 = $incdec$ptr808;
       $p$addr$5445 = $sub806;
      } else {
       $p$addr$5$lcssa = $sub806;
       break;
      }
     }
    } else {
     $p$addr$5$lcssa = $p$addr$3;
    }
    $add810 = $p$addr$5$lcssa + 18 | 0;
    _pad_524($f, 48, $add810, 18, 0);
    $sub$ptr$lhs$cast811 = $arrayidx;
    $sub$ptr$rhs$cast812 = $estr$2;
    $sub$ptr$sub813 = $sub$ptr$lhs$cast811 - $sub$ptr$rhs$cast812 | 0;
    _out($f, $estr$2, $sub$ptr$sub813);
   }
   $xor816 = $fl ^ 8192;
   _pad_524($f, 32, $w, $add653, $xor816);
   $add653$sink524 = $add653;
  }
 } while (0);
 $cmp818 = ($add653$sink524 | 0) < ($w | 0);
 $w$add653 = $cmp818 ? $w : $add653$sink524;
 STACKTOP = sp;
 return $w$add653 | 0;
}

function _blake256_compress($S, $block) {
 $S = $S | 0;
 $block = $block | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add$ptr$1 = 0, $add$ptr$10 = 0, $add$ptr$11 = 0, $add$ptr$12 = 0, $add$ptr$13 = 0, $add$ptr$14 = 0, $add$ptr$15 = 0, $add$ptr$2 = 0;
 var $add$ptr$3 = 0, $add$ptr$4 = 0, $add$ptr$5 = 0, $add$ptr$6 = 0, $add$ptr$7 = 0, $add$ptr$8 = 0, $add$ptr$9 = 0, $add109 = 0, $add111 = 0, $add124 = 0, $add145 = 0, $add147 = 0, $add160 = 0, $add181 = 0, $add183 = 0, $add196 = 0, $add217 = 0, $add219 = 0, $add232 = 0, $add253 = 0;
 var $add255 = 0, $add268 = 0, $add289 = 0, $add291 = 0, $add304 = 0, $add325 = 0, $add327 = 0, $add340 = 0, $add361 = 0, $add363 = 0, $add376 = 0, $add397 = 0, $add399 = 0, $add39983 = 0, $add412 = 0, $add41277 = 0, $add433 = 0, $add435 = 0, $add448 = 0, $add469 = 0;
 var $add471 = 0, $add47179 = 0, $add484 = 0, $add48473 = 0, $add505 = 0, $add507 = 0, $add520 = 0, $add541 = 0, $add543 = 0, $add54371 = 0, $add556 = 0, $add55681 = 0, $add577 = 0, $add579 = 0, $add592 = 0, $add613 = 0, $add615 = 0, $add61575 = 0, $add628 = 0, $add62885 = 0;
 var $add76 = 0, $add88 = 0, $arrayidx102 = 0, $arrayidx106 = 0, $arrayidx136 = 0, $arrayidx138 = 0, $arrayidx14 = 0, $arrayidx14$1 = 0, $arrayidx14$10 = 0, $arrayidx14$11 = 0, $arrayidx14$12 = 0, $arrayidx14$13 = 0, $arrayidx14$14 = 0, $arrayidx14$15 = 0, $arrayidx14$2 = 0, $arrayidx14$3 = 0, $arrayidx14$4 = 0, $arrayidx14$5 = 0, $arrayidx14$6 = 0, $arrayidx14$7 = 0;
 var $arrayidx14$8 = 0, $arrayidx14$9 = 0, $arrayidx140 = 0, $arrayidx142 = 0, $arrayidx17$1 = 0, $arrayidx17$10 = 0, $arrayidx17$11 = 0, $arrayidx17$12 = 0, $arrayidx17$13 = 0, $arrayidx17$14 = 0, $arrayidx17$15 = 0, $arrayidx17$2 = 0, $arrayidx17$3 = 0, $arrayidx17$4 = 0, $arrayidx17$5 = 0, $arrayidx17$6 = 0, $arrayidx17$7 = 0, $arrayidx17$8 = 0, $arrayidx17$9 = 0, $arrayidx174 = 0;
 var $arrayidx178 = 0, $arrayidx208 = 0, $arrayidx210 = 0, $arrayidx212 = 0, $arrayidx214 = 0, $arrayidx246 = 0, $arrayidx250 = 0, $arrayidx27 = 0, $arrayidx280 = 0, $arrayidx282 = 0, $arrayidx284 = 0, $arrayidx286 = 0, $arrayidx3 = 0, $arrayidx3$1 = 0, $arrayidx3$10 = 0, $arrayidx3$11 = 0, $arrayidx3$12 = 0, $arrayidx3$13 = 0, $arrayidx3$14 = 0, $arrayidx3$15 = 0;
 var $arrayidx3$2 = 0, $arrayidx3$3 = 0, $arrayidx3$4 = 0, $arrayidx3$5 = 0, $arrayidx3$6 = 0, $arrayidx3$7 = 0, $arrayidx3$8 = 0, $arrayidx3$9 = 0, $arrayidx30 = 0, $arrayidx318 = 0, $arrayidx322 = 0, $arrayidx34 = 0, $arrayidx352 = 0, $arrayidx354 = 0, $arrayidx356 = 0, $arrayidx358 = 0, $arrayidx38 = 0, $arrayidx390 = 0, $arrayidx394 = 0, $arrayidx41$promoted = 0;
 var $arrayidx42$promoted = 0, $arrayidx424 = 0, $arrayidx426 = 0, $arrayidx428 = 0, $arrayidx43$promoted = 0, $arrayidx430 = 0, $arrayidx44$promoted = 0, $arrayidx462 = 0, $arrayidx466 = 0, $arrayidx47 = 0, $arrayidx496 = 0, $arrayidx498 = 0, $arrayidx500 = 0, $arrayidx502 = 0, $arrayidx534 = 0, $arrayidx538 = 0, $arrayidx55 = 0, $arrayidx568 = 0, $arrayidx570 = 0, $arrayidx572 = 0;
 var $arrayidx574 = 0, $arrayidx606 = 0, $arrayidx610 = 0, $arrayidx67 = 0, $arrayidx68 = 0, $arrayidx70 = 0, $arrayidx72 = 0, $arrayidx8 = 0, $arrayidx8$1 = 0, $arrayidx8$10 = 0, $arrayidx8$11 = 0, $arrayidx8$12 = 0, $arrayidx8$13 = 0, $arrayidx8$14 = 0, $arrayidx8$15 = 0, $arrayidx8$2 = 0, $arrayidx8$3 = 0, $arrayidx8$4 = 0, $arrayidx8$5 = 0, $arrayidx8$6 = 0;
 var $arrayidx8$7 = 0, $arrayidx8$8 = 0, $arrayidx8$9 = 0, $cmp45 = 0, $conv = 0, $conv$1 = 0, $conv$10 = 0, $conv$11 = 0, $conv$12 = 0, $conv$13 = 0, $conv$14 = 0, $conv$15 = 0, $conv$2 = 0, $conv$3 = 0, $conv$4 = 0, $conv$5 = 0, $conv$6 = 0, $conv$7 = 0, $conv$8 = 0, $conv$9 = 0;
 var $conv15 = 0, $conv15$1 = 0, $conv15$10 = 0, $conv15$11 = 0, $conv15$12 = 0, $conv15$13 = 0, $conv15$14 = 0, $conv15$15 = 0, $conv15$2 = 0, $conv15$3 = 0, $conv15$4 = 0, $conv15$5 = 0, $conv15$6 = 0, $conv15$7 = 0, $conv15$8 = 0, $conv15$9 = 0, $conv4 = 0, $conv4$1 = 0, $conv4$10 = 0, $conv4$11 = 0;
 var $conv4$12 = 0, $conv4$13 = 0, $conv4$14 = 0, $conv4$15 = 0, $conv4$2 = 0, $conv4$3 = 0, $conv4$4 = 0, $conv4$5 = 0, $conv4$6 = 0, $conv4$7 = 0, $conv4$8 = 0, $conv4$9 = 0, $conv9 = 0, $conv9$1 = 0, $conv9$10 = 0, $conv9$11 = 0, $conv9$12 = 0, $conv9$13 = 0, $conv9$14 = 0, $conv9$15 = 0;
 var $conv9$2 = 0, $conv9$3 = 0, $conv9$4 = 0, $conv9$5 = 0, $conv9$6 = 0, $conv9$7 = 0, $conv9$8 = 0, $conv9$9 = 0, $exitcond = 0, $i$269 = 0, $idxprom = 0, $idxprom137 = 0, $idxprom141 = 0, $idxprom209 = 0, $idxprom213 = 0, $idxprom281 = 0, $idxprom285 = 0, $idxprom353 = 0, $idxprom357 = 0, $idxprom425 = 0;
 var $idxprom429 = 0, $idxprom497 = 0, $idxprom501 = 0, $idxprom569 = 0, $idxprom573 = 0, $idxprom71 = 0, $inc640 = 0, $m = 0, $nullt = 0, $or = 0, $or$1 = 0, $or$10 = 0, $or$11 = 0, $or$12 = 0, $or$13 = 0, $or$14 = 0, $or$15 = 0, $or$2 = 0, $or$3 = 0, $or$4 = 0;
 var $or$5 = 0, $or$6 = 0, $or$7 = 0, $or$8 = 0, $or$9 = 0, $or11 = 0, $or11$1 = 0, $or11$10 = 0, $or11$11 = 0, $or11$12 = 0, $or11$13 = 0, $or11$14 = 0, $or11$15 = 0, $or11$2 = 0, $or11$3 = 0, $or11$4 = 0, $or11$5 = 0, $or11$6 = 0, $or11$7 = 0, $or11$8 = 0;
 var $or11$9 = 0, $or120 = 0, $or133 = 0, $or156 = 0, $or16 = 0, $or16$1 = 0, $or16$10 = 0, $or16$11 = 0, $or16$12 = 0, $or16$13 = 0, $or16$14 = 0, $or16$15 = 0, $or16$2 = 0, $or16$3 = 0, $or16$4 = 0, $or16$5 = 0, $or16$6 = 0, $or16$7 = 0, $or16$8 = 0, $or16$9 = 0;
 var $or169 = 0, $or192 = 0, $or205 = 0, $or228 = 0, $or241 = 0, $or264 = 0, $or277 = 0, $or300 = 0, $or313 = 0, $or336 = 0, $or349 = 0, $or372 = 0, $or385 = 0, $or408 = 0, $or40880 = 0, $or421 = 0, $or42170 = 0, $or444 = 0, $or457 = 0, $or480 = 0;
 var $or48076 = 0, $or493 = 0, $or49382 = 0, $or516 = 0, $or529 = 0, $or552 = 0, $or55284 = 0, $or565 = 0, $or56574 = 0, $or588 = 0, $or601 = 0, $or624 = 0, $or62472 = 0, $or637 = 0, $or63778 = 0, $or84 = 0, $or97 = 0, $shl = 0, $shl$1 = 0, $shl$10 = 0;
 var $shl$11 = 0, $shl$12 = 0, $shl$13 = 0, $shl$14 = 0, $shl$15 = 0, $shl$2 = 0, $shl$3 = 0, $shl$4 = 0, $shl$5 = 0, $shl$6 = 0, $shl$7 = 0, $shl$8 = 0, $shl$9 = 0, $shl10 = 0, $shl10$1 = 0, $shl10$10 = 0, $shl10$11 = 0, $shl10$12 = 0, $shl10$13 = 0, $shl10$14 = 0;
 var $shl10$15 = 0, $shl10$2 = 0, $shl10$3 = 0, $shl10$4 = 0, $shl10$5 = 0, $shl10$6 = 0, $shl10$7 = 0, $shl10$8 = 0, $shl10$9 = 0, $shl115 = 0, $shl128 = 0, $shl151 = 0, $shl164 = 0, $shl187 = 0, $shl200 = 0, $shl223 = 0, $shl236 = 0, $shl259 = 0, $shl272 = 0, $shl295 = 0;
 var $shl308 = 0, $shl331 = 0, $shl344 = 0, $shl367 = 0, $shl380 = 0, $shl403 = 0, $shl416 = 0, $shl439 = 0, $shl452 = 0, $shl475 = 0, $shl488 = 0, $shl5 = 0, $shl5$1 = 0, $shl5$10 = 0, $shl5$11 = 0, $shl5$12 = 0, $shl5$13 = 0, $shl5$14 = 0, $shl5$15 = 0, $shl5$2 = 0;
 var $shl5$3 = 0, $shl5$4 = 0, $shl5$5 = 0, $shl5$6 = 0, $shl5$7 = 0, $shl5$8 = 0, $shl5$9 = 0, $shl511 = 0, $shl524 = 0, $shl547 = 0, $shl560 = 0, $shl583 = 0, $shl596 = 0, $shl619 = 0, $shl632 = 0, $shl80 = 0, $shl92 = 0, $shr = 0, $shr119 = 0, $shr132 = 0;
 var $shr155 = 0, $shr168 = 0, $shr191 = 0, $shr204 = 0, $shr227 = 0, $shr240 = 0, $shr263 = 0, $shr276 = 0, $shr299 = 0, $shr312 = 0, $shr335 = 0, $shr348 = 0, $shr371 = 0, $shr384 = 0, $shr407 = 0, $shr420 = 0, $shr443 = 0, $shr456 = 0, $shr479 = 0, $shr492 = 0;
 var $shr515 = 0, $shr528 = 0, $shr551 = 0, $shr564 = 0, $shr587 = 0, $shr600 = 0, $shr623 = 0, $shr636 = 0, $shr96 = 0, $v$sroa$0$0$copyload = 0, $v$sroa$2$0$S90$sroa_idx1 = 0, $v$sroa$2$0$copyload = 0, $v$sroa$3$0$S90$sroa_idx2 = 0, $v$sroa$3$0$copyload = 0, $v$sroa$4$0$S90$sroa_idx3 = 0, $v$sroa$4$0$copyload = 0, $v$sroa$5$0$S90$sroa_idx4 = 0, $v$sroa$5$0$copyload = 0, $v$sroa$6$0$S90$sroa_idx5 = 0, $v$sroa$6$0$copyload = 0;
 var $v$sroa$7$0$S90$sroa_idx6 = 0, $v$sroa$7$0$copyload = 0, $v$sroa$8$0$S90$sroa_idx7 = 0, $v$sroa$8$0$copyload = 0, $xor = 0, $xor107 = 0, $xor114 = 0, $xor127 = 0, $xor143 = 0, $xor150 = 0, $xor163 = 0, $xor179 = 0, $xor186 = 0, $xor199 = 0, $xor215 = 0, $xor222 = 0, $xor235 = 0, $xor251 = 0, $xor258 = 0, $xor271 = 0;
 var $xor287 = 0, $xor294 = 0, $xor307 = 0, $xor31 = 0, $xor323 = 0, $xor330 = 0, $xor343 = 0, $xor35 = 0, $xor359 = 0, $xor366 = 0, $xor379 = 0, $xor39 = 0, $xor395 = 0, $xor402 = 0, $xor415 = 0, $xor431 = 0, $xor438 = 0, $xor451 = 0, $xor467 = 0, $xor474 = 0;
 var $xor487 = 0, $xor49 = 0, $xor503 = 0, $xor510 = 0, $xor523 = 0, $xor53 = 0, $xor539 = 0, $xor546 = 0, $xor559 = 0, $xor57 = 0, $xor575 = 0, $xor582 = 0, $xor595 = 0, $xor61 = 0, $xor611 = 0, $xor618 = 0, $xor631 = 0, $xor649 = 0, $xor649$1 = 0, $xor649$10 = 0;
 var $xor649$11 = 0, $xor649$12 = 0, $xor649$13 = 0, $xor649$14 = 0, $xor649$15 = 0, $xor649$2 = 0, $xor649$3 = 0, $xor649$4 = 0, $xor649$5 = 0, $xor649$6 = 0, $xor649$7 = 0, $xor649$8 = 0, $xor649$9 = 0, $xor662 = 0, $xor662$1 = 0, $xor662$2 = 0, $xor662$3 = 0, $xor662$4 = 0, $xor662$5 = 0, $xor662$6 = 0;
 var $xor662$7 = 0, $xor73 = 0, $xor79 = 0, $xor91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $m = sp;
 $0 = HEAP8[$block >> 0] | 0;
 $conv = $0 & 255;
 $shl = $conv << 24;
 $arrayidx3 = $block + 1 | 0;
 $1 = HEAP8[$arrayidx3 >> 0] | 0;
 $conv4 = $1 & 255;
 $shl5 = $conv4 << 16;
 $or = $shl5 | $shl;
 $arrayidx8 = $block + 2 | 0;
 $2 = HEAP8[$arrayidx8 >> 0] | 0;
 $conv9 = $2 & 255;
 $shl10 = $conv9 << 8;
 $or11 = $or | $shl10;
 $arrayidx14 = $block + 3 | 0;
 $3 = HEAP8[$arrayidx14 >> 0] | 0;
 $conv15 = $3 & 255;
 $or16 = $or11 | $conv15;
 HEAP32[$m >> 2] = $or16;
 $add$ptr$1 = $block + 4 | 0;
 $4 = HEAP8[$add$ptr$1 >> 0] | 0;
 $conv$1 = $4 & 255;
 $shl$1 = $conv$1 << 24;
 $arrayidx3$1 = $block + 5 | 0;
 $5 = HEAP8[$arrayidx3$1 >> 0] | 0;
 $conv4$1 = $5 & 255;
 $shl5$1 = $conv4$1 << 16;
 $or$1 = $shl5$1 | $shl$1;
 $arrayidx8$1 = $block + 6 | 0;
 $6 = HEAP8[$arrayidx8$1 >> 0] | 0;
 $conv9$1 = $6 & 255;
 $shl10$1 = $conv9$1 << 8;
 $or11$1 = $or$1 | $shl10$1;
 $arrayidx14$1 = $block + 7 | 0;
 $7 = HEAP8[$arrayidx14$1 >> 0] | 0;
 $conv15$1 = $7 & 255;
 $or16$1 = $or11$1 | $conv15$1;
 $arrayidx17$1 = $m + 4 | 0;
 HEAP32[$arrayidx17$1 >> 2] = $or16$1;
 $add$ptr$2 = $block + 8 | 0;
 $8 = HEAP8[$add$ptr$2 >> 0] | 0;
 $conv$2 = $8 & 255;
 $shl$2 = $conv$2 << 24;
 $arrayidx3$2 = $block + 9 | 0;
 $9 = HEAP8[$arrayidx3$2 >> 0] | 0;
 $conv4$2 = $9 & 255;
 $shl5$2 = $conv4$2 << 16;
 $or$2 = $shl5$2 | $shl$2;
 $arrayidx8$2 = $block + 10 | 0;
 $10 = HEAP8[$arrayidx8$2 >> 0] | 0;
 $conv9$2 = $10 & 255;
 $shl10$2 = $conv9$2 << 8;
 $or11$2 = $or$2 | $shl10$2;
 $arrayidx14$2 = $block + 11 | 0;
 $11 = HEAP8[$arrayidx14$2 >> 0] | 0;
 $conv15$2 = $11 & 255;
 $or16$2 = $or11$2 | $conv15$2;
 $arrayidx17$2 = $m + 8 | 0;
 HEAP32[$arrayidx17$2 >> 2] = $or16$2;
 $add$ptr$3 = $block + 12 | 0;
 $12 = HEAP8[$add$ptr$3 >> 0] | 0;
 $conv$3 = $12 & 255;
 $shl$3 = $conv$3 << 24;
 $arrayidx3$3 = $block + 13 | 0;
 $13 = HEAP8[$arrayidx3$3 >> 0] | 0;
 $conv4$3 = $13 & 255;
 $shl5$3 = $conv4$3 << 16;
 $or$3 = $shl5$3 | $shl$3;
 $arrayidx8$3 = $block + 14 | 0;
 $14 = HEAP8[$arrayidx8$3 >> 0] | 0;
 $conv9$3 = $14 & 255;
 $shl10$3 = $conv9$3 << 8;
 $or11$3 = $or$3 | $shl10$3;
 $arrayidx14$3 = $block + 15 | 0;
 $15 = HEAP8[$arrayidx14$3 >> 0] | 0;
 $conv15$3 = $15 & 255;
 $or16$3 = $or11$3 | $conv15$3;
 $arrayidx17$3 = $m + 12 | 0;
 HEAP32[$arrayidx17$3 >> 2] = $or16$3;
 $add$ptr$4 = $block + 16 | 0;
 $16 = HEAP8[$add$ptr$4 >> 0] | 0;
 $conv$4 = $16 & 255;
 $shl$4 = $conv$4 << 24;
 $arrayidx3$4 = $block + 17 | 0;
 $17 = HEAP8[$arrayidx3$4 >> 0] | 0;
 $conv4$4 = $17 & 255;
 $shl5$4 = $conv4$4 << 16;
 $or$4 = $shl5$4 | $shl$4;
 $arrayidx8$4 = $block + 18 | 0;
 $18 = HEAP8[$arrayidx8$4 >> 0] | 0;
 $conv9$4 = $18 & 255;
 $shl10$4 = $conv9$4 << 8;
 $or11$4 = $or$4 | $shl10$4;
 $arrayidx14$4 = $block + 19 | 0;
 $19 = HEAP8[$arrayidx14$4 >> 0] | 0;
 $conv15$4 = $19 & 255;
 $or16$4 = $or11$4 | $conv15$4;
 $arrayidx17$4 = $m + 16 | 0;
 HEAP32[$arrayidx17$4 >> 2] = $or16$4;
 $add$ptr$5 = $block + 20 | 0;
 $20 = HEAP8[$add$ptr$5 >> 0] | 0;
 $conv$5 = $20 & 255;
 $shl$5 = $conv$5 << 24;
 $arrayidx3$5 = $block + 21 | 0;
 $21 = HEAP8[$arrayidx3$5 >> 0] | 0;
 $conv4$5 = $21 & 255;
 $shl5$5 = $conv4$5 << 16;
 $or$5 = $shl5$5 | $shl$5;
 $arrayidx8$5 = $block + 22 | 0;
 $22 = HEAP8[$arrayidx8$5 >> 0] | 0;
 $conv9$5 = $22 & 255;
 $shl10$5 = $conv9$5 << 8;
 $or11$5 = $or$5 | $shl10$5;
 $arrayidx14$5 = $block + 23 | 0;
 $23 = HEAP8[$arrayidx14$5 >> 0] | 0;
 $conv15$5 = $23 & 255;
 $or16$5 = $or11$5 | $conv15$5;
 $arrayidx17$5 = $m + 20 | 0;
 HEAP32[$arrayidx17$5 >> 2] = $or16$5;
 $add$ptr$6 = $block + 24 | 0;
 $24 = HEAP8[$add$ptr$6 >> 0] | 0;
 $conv$6 = $24 & 255;
 $shl$6 = $conv$6 << 24;
 $arrayidx3$6 = $block + 25 | 0;
 $25 = HEAP8[$arrayidx3$6 >> 0] | 0;
 $conv4$6 = $25 & 255;
 $shl5$6 = $conv4$6 << 16;
 $or$6 = $shl5$6 | $shl$6;
 $arrayidx8$6 = $block + 26 | 0;
 $26 = HEAP8[$arrayidx8$6 >> 0] | 0;
 $conv9$6 = $26 & 255;
 $shl10$6 = $conv9$6 << 8;
 $or11$6 = $or$6 | $shl10$6;
 $arrayidx14$6 = $block + 27 | 0;
 $27 = HEAP8[$arrayidx14$6 >> 0] | 0;
 $conv15$6 = $27 & 255;
 $or16$6 = $or11$6 | $conv15$6;
 $arrayidx17$6 = $m + 24 | 0;
 HEAP32[$arrayidx17$6 >> 2] = $or16$6;
 $add$ptr$7 = $block + 28 | 0;
 $28 = HEAP8[$add$ptr$7 >> 0] | 0;
 $conv$7 = $28 & 255;
 $shl$7 = $conv$7 << 24;
 $arrayidx3$7 = $block + 29 | 0;
 $29 = HEAP8[$arrayidx3$7 >> 0] | 0;
 $conv4$7 = $29 & 255;
 $shl5$7 = $conv4$7 << 16;
 $or$7 = $shl5$7 | $shl$7;
 $arrayidx8$7 = $block + 30 | 0;
 $30 = HEAP8[$arrayidx8$7 >> 0] | 0;
 $conv9$7 = $30 & 255;
 $shl10$7 = $conv9$7 << 8;
 $or11$7 = $or$7 | $shl10$7;
 $arrayidx14$7 = $block + 31 | 0;
 $31 = HEAP8[$arrayidx14$7 >> 0] | 0;
 $conv15$7 = $31 & 255;
 $or16$7 = $or11$7 | $conv15$7;
 $arrayidx17$7 = $m + 28 | 0;
 HEAP32[$arrayidx17$7 >> 2] = $or16$7;
 $add$ptr$8 = $block + 32 | 0;
 $32 = HEAP8[$add$ptr$8 >> 0] | 0;
 $conv$8 = $32 & 255;
 $shl$8 = $conv$8 << 24;
 $arrayidx3$8 = $block + 33 | 0;
 $33 = HEAP8[$arrayidx3$8 >> 0] | 0;
 $conv4$8 = $33 & 255;
 $shl5$8 = $conv4$8 << 16;
 $or$8 = $shl5$8 | $shl$8;
 $arrayidx8$8 = $block + 34 | 0;
 $34 = HEAP8[$arrayidx8$8 >> 0] | 0;
 $conv9$8 = $34 & 255;
 $shl10$8 = $conv9$8 << 8;
 $or11$8 = $or$8 | $shl10$8;
 $arrayidx14$8 = $block + 35 | 0;
 $35 = HEAP8[$arrayidx14$8 >> 0] | 0;
 $conv15$8 = $35 & 255;
 $or16$8 = $or11$8 | $conv15$8;
 $arrayidx17$8 = $m + 32 | 0;
 HEAP32[$arrayidx17$8 >> 2] = $or16$8;
 $add$ptr$9 = $block + 36 | 0;
 $36 = HEAP8[$add$ptr$9 >> 0] | 0;
 $conv$9 = $36 & 255;
 $shl$9 = $conv$9 << 24;
 $arrayidx3$9 = $block + 37 | 0;
 $37 = HEAP8[$arrayidx3$9 >> 0] | 0;
 $conv4$9 = $37 & 255;
 $shl5$9 = $conv4$9 << 16;
 $or$9 = $shl5$9 | $shl$9;
 $arrayidx8$9 = $block + 38 | 0;
 $38 = HEAP8[$arrayidx8$9 >> 0] | 0;
 $conv9$9 = $38 & 255;
 $shl10$9 = $conv9$9 << 8;
 $or11$9 = $or$9 | $shl10$9;
 $arrayidx14$9 = $block + 39 | 0;
 $39 = HEAP8[$arrayidx14$9 >> 0] | 0;
 $conv15$9 = $39 & 255;
 $or16$9 = $or11$9 | $conv15$9;
 $arrayidx17$9 = $m + 36 | 0;
 HEAP32[$arrayidx17$9 >> 2] = $or16$9;
 $add$ptr$10 = $block + 40 | 0;
 $40 = HEAP8[$add$ptr$10 >> 0] | 0;
 $conv$10 = $40 & 255;
 $shl$10 = $conv$10 << 24;
 $arrayidx3$10 = $block + 41 | 0;
 $41 = HEAP8[$arrayidx3$10 >> 0] | 0;
 $conv4$10 = $41 & 255;
 $shl5$10 = $conv4$10 << 16;
 $or$10 = $shl5$10 | $shl$10;
 $arrayidx8$10 = $block + 42 | 0;
 $42 = HEAP8[$arrayidx8$10 >> 0] | 0;
 $conv9$10 = $42 & 255;
 $shl10$10 = $conv9$10 << 8;
 $or11$10 = $or$10 | $shl10$10;
 $arrayidx14$10 = $block + 43 | 0;
 $43 = HEAP8[$arrayidx14$10 >> 0] | 0;
 $conv15$10 = $43 & 255;
 $or16$10 = $or11$10 | $conv15$10;
 $arrayidx17$10 = $m + 40 | 0;
 HEAP32[$arrayidx17$10 >> 2] = $or16$10;
 $add$ptr$11 = $block + 44 | 0;
 $44 = HEAP8[$add$ptr$11 >> 0] | 0;
 $conv$11 = $44 & 255;
 $shl$11 = $conv$11 << 24;
 $arrayidx3$11 = $block + 45 | 0;
 $45 = HEAP8[$arrayidx3$11 >> 0] | 0;
 $conv4$11 = $45 & 255;
 $shl5$11 = $conv4$11 << 16;
 $or$11 = $shl5$11 | $shl$11;
 $arrayidx8$11 = $block + 46 | 0;
 $46 = HEAP8[$arrayidx8$11 >> 0] | 0;
 $conv9$11 = $46 & 255;
 $shl10$11 = $conv9$11 << 8;
 $or11$11 = $or$11 | $shl10$11;
 $arrayidx14$11 = $block + 47 | 0;
 $47 = HEAP8[$arrayidx14$11 >> 0] | 0;
 $conv15$11 = $47 & 255;
 $or16$11 = $or11$11 | $conv15$11;
 $arrayidx17$11 = $m + 44 | 0;
 HEAP32[$arrayidx17$11 >> 2] = $or16$11;
 $add$ptr$12 = $block + 48 | 0;
 $48 = HEAP8[$add$ptr$12 >> 0] | 0;
 $conv$12 = $48 & 255;
 $shl$12 = $conv$12 << 24;
 $arrayidx3$12 = $block + 49 | 0;
 $49 = HEAP8[$arrayidx3$12 >> 0] | 0;
 $conv4$12 = $49 & 255;
 $shl5$12 = $conv4$12 << 16;
 $or$12 = $shl5$12 | $shl$12;
 $arrayidx8$12 = $block + 50 | 0;
 $50 = HEAP8[$arrayidx8$12 >> 0] | 0;
 $conv9$12 = $50 & 255;
 $shl10$12 = $conv9$12 << 8;
 $or11$12 = $or$12 | $shl10$12;
 $arrayidx14$12 = $block + 51 | 0;
 $51 = HEAP8[$arrayidx14$12 >> 0] | 0;
 $conv15$12 = $51 & 255;
 $or16$12 = $or11$12 | $conv15$12;
 $arrayidx17$12 = $m + 48 | 0;
 HEAP32[$arrayidx17$12 >> 2] = $or16$12;
 $add$ptr$13 = $block + 52 | 0;
 $52 = HEAP8[$add$ptr$13 >> 0] | 0;
 $conv$13 = $52 & 255;
 $shl$13 = $conv$13 << 24;
 $arrayidx3$13 = $block + 53 | 0;
 $53 = HEAP8[$arrayidx3$13 >> 0] | 0;
 $conv4$13 = $53 & 255;
 $shl5$13 = $conv4$13 << 16;
 $or$13 = $shl5$13 | $shl$13;
 $arrayidx8$13 = $block + 54 | 0;
 $54 = HEAP8[$arrayidx8$13 >> 0] | 0;
 $conv9$13 = $54 & 255;
 $shl10$13 = $conv9$13 << 8;
 $or11$13 = $or$13 | $shl10$13;
 $arrayidx14$13 = $block + 55 | 0;
 $55 = HEAP8[$arrayidx14$13 >> 0] | 0;
 $conv15$13 = $55 & 255;
 $or16$13 = $or11$13 | $conv15$13;
 $arrayidx17$13 = $m + 52 | 0;
 HEAP32[$arrayidx17$13 >> 2] = $or16$13;
 $add$ptr$14 = $block + 56 | 0;
 $56 = HEAP8[$add$ptr$14 >> 0] | 0;
 $conv$14 = $56 & 255;
 $shl$14 = $conv$14 << 24;
 $arrayidx3$14 = $block + 57 | 0;
 $57 = HEAP8[$arrayidx3$14 >> 0] | 0;
 $conv4$14 = $57 & 255;
 $shl5$14 = $conv4$14 << 16;
 $or$14 = $shl5$14 | $shl$14;
 $arrayidx8$14 = $block + 58 | 0;
 $58 = HEAP8[$arrayidx8$14 >> 0] | 0;
 $conv9$14 = $58 & 255;
 $shl10$14 = $conv9$14 << 8;
 $or11$14 = $or$14 | $shl10$14;
 $arrayidx14$14 = $block + 59 | 0;
 $59 = HEAP8[$arrayidx14$14 >> 0] | 0;
 $conv15$14 = $59 & 255;
 $or16$14 = $or11$14 | $conv15$14;
 $arrayidx17$14 = $m + 56 | 0;
 HEAP32[$arrayidx17$14 >> 2] = $or16$14;
 $add$ptr$15 = $block + 60 | 0;
 $60 = HEAP8[$add$ptr$15 >> 0] | 0;
 $conv$15 = $60 & 255;
 $shl$15 = $conv$15 << 24;
 $arrayidx3$15 = $block + 61 | 0;
 $61 = HEAP8[$arrayidx3$15 >> 0] | 0;
 $conv4$15 = $61 & 255;
 $shl5$15 = $conv4$15 << 16;
 $or$15 = $shl5$15 | $shl$15;
 $arrayidx8$15 = $block + 62 | 0;
 $62 = HEAP8[$arrayidx8$15 >> 0] | 0;
 $conv9$15 = $62 & 255;
 $shl10$15 = $conv9$15 << 8;
 $or11$15 = $or$15 | $shl10$15;
 $arrayidx14$15 = $block + 63 | 0;
 $63 = HEAP8[$arrayidx14$15 >> 0] | 0;
 $conv15$15 = $63 & 255;
 $or16$15 = $or11$15 | $conv15$15;
 $arrayidx17$15 = $m + 60 | 0;
 HEAP32[$arrayidx17$15 >> 2] = $or16$15;
 $v$sroa$0$0$copyload = HEAP32[$S >> 2] | 0;
 $v$sroa$2$0$S90$sroa_idx1 = $S + 4 | 0;
 $v$sroa$2$0$copyload = HEAP32[$v$sroa$2$0$S90$sroa_idx1 >> 2] | 0;
 $v$sroa$3$0$S90$sroa_idx2 = $S + 8 | 0;
 $v$sroa$3$0$copyload = HEAP32[$v$sroa$3$0$S90$sroa_idx2 >> 2] | 0;
 $v$sroa$4$0$S90$sroa_idx3 = $S + 12 | 0;
 $v$sroa$4$0$copyload = HEAP32[$v$sroa$4$0$S90$sroa_idx3 >> 2] | 0;
 $v$sroa$5$0$S90$sroa_idx4 = $S + 16 | 0;
 $v$sroa$5$0$copyload = HEAP32[$v$sroa$5$0$S90$sroa_idx4 >> 2] | 0;
 $v$sroa$6$0$S90$sroa_idx5 = $S + 20 | 0;
 $v$sroa$6$0$copyload = HEAP32[$v$sroa$6$0$S90$sroa_idx5 >> 2] | 0;
 $v$sroa$7$0$S90$sroa_idx6 = $S + 24 | 0;
 $v$sroa$7$0$copyload = HEAP32[$v$sroa$7$0$S90$sroa_idx6 >> 2] | 0;
 $v$sroa$8$0$S90$sroa_idx7 = $S + 28 | 0;
 $v$sroa$8$0$copyload = HEAP32[$v$sroa$8$0$S90$sroa_idx7 >> 2] | 0;
 $arrayidx27 = $S + 32 | 0;
 $64 = HEAP32[$arrayidx27 >> 2] | 0;
 $xor = $64 ^ 608135816;
 $arrayidx30 = $S + 36 | 0;
 $65 = HEAP32[$arrayidx30 >> 2] | 0;
 $xor31 = $65 ^ -2052912941;
 $arrayidx34 = $S + 40 | 0;
 $66 = HEAP32[$arrayidx34 >> 2] | 0;
 $xor35 = $66 ^ 320440878;
 $arrayidx38 = $S + 44 | 0;
 $67 = HEAP32[$arrayidx38 >> 2] | 0;
 $xor39 = $67 ^ 57701188;
 $nullt = $S + 60 | 0;
 $68 = HEAP32[$nullt >> 2] | 0;
 $cmp45 = ($68 | 0) == 0;
 if ($cmp45) {
  $arrayidx47 = $S + 48 | 0;
  $69 = HEAP32[$arrayidx47 >> 2] | 0;
  $xor49 = $69 ^ -1542899678;
  $xor53 = $69 ^ 698298832;
  $arrayidx55 = $S + 52 | 0;
  $70 = HEAP32[$arrayidx55 >> 2] | 0;
  $xor57 = $70 ^ 137296536;
  $xor61 = $70 ^ -330404727;
  $arrayidx41$promoted = $xor49;
  $arrayidx42$promoted = $xor53;
  $arrayidx43$promoted = $xor57;
  $arrayidx44$promoted = $xor61;
 } else {
  $arrayidx41$promoted = -1542899678;
  $arrayidx42$promoted = 698298832;
  $arrayidx43$promoted = 137296536;
  $arrayidx44$promoted = -330404727;
 }
 $add39983 = $v$sroa$4$0$copyload;
 $add41277 = $xor31;
 $add47179 = $v$sroa$3$0$copyload;
 $add48473 = $xor;
 $add54371 = $v$sroa$0$0$copyload;
 $add55681 = $xor35;
 $add61575 = $v$sroa$2$0$copyload;
 $add62885 = $xor39;
 $i$269 = 0;
 $or40880 = $arrayidx43$promoted;
 $or42170 = $v$sroa$5$0$copyload;
 $or48076 = $arrayidx42$promoted;
 $or49382 = $v$sroa$8$0$copyload;
 $or55284 = $arrayidx44$promoted;
 $or56574 = $v$sroa$6$0$copyload;
 $or62472 = $arrayidx41$promoted;
 $or63778 = $v$sroa$7$0$copyload;
 while (1) {
  $arrayidx67 = 39024 + ($i$269 << 4) | 0;
  $71 = HEAP8[$arrayidx67 >> 0] | 0;
  $idxprom = $71 & 255;
  $arrayidx68 = $m + ($idxprom << 2) | 0;
  $72 = HEAP32[$arrayidx68 >> 2] | 0;
  $arrayidx70 = (39024 + ($i$269 << 4) | 0) + 1 | 0;
  $73 = HEAP8[$arrayidx70 >> 0] | 0;
  $idxprom71 = $73 & 255;
  $arrayidx72 = 39248 + ($idxprom71 << 2) | 0;
  $74 = HEAP32[$arrayidx72 >> 2] | 0;
  $xor73 = $74 ^ $72;
  $add = $xor73 + $or42170 | 0;
  $add76 = $add + $add54371 | 0;
  $xor79 = $or62472 ^ $add76;
  $shl80 = $xor79 << 16;
  $shr = $xor79 >>> 16;
  $or84 = $shl80 | $shr;
  $add88 = $or84 + $add48473 | 0;
  $xor91 = $add88 ^ $or42170;
  $shl92 = $xor91 << 20;
  $shr96 = $xor91 >>> 12;
  $or97 = $shl92 | $shr96;
  $arrayidx102 = $m + ($idxprom71 << 2) | 0;
  $75 = HEAP32[$arrayidx102 >> 2] | 0;
  $arrayidx106 = 39248 + ($idxprom << 2) | 0;
  $76 = HEAP32[$arrayidx106 >> 2] | 0;
  $xor107 = $76 ^ $75;
  $add109 = $or97 + $add76 | 0;
  $add111 = $add109 + $xor107 | 0;
  $xor114 = $add111 ^ $or84;
  $shl115 = $xor114 << 24;
  $shr119 = $xor114 >>> 8;
  $or120 = $shl115 | $shr119;
  $add124 = $or120 + $add88 | 0;
  $xor127 = $add124 ^ $or97;
  $shl128 = $xor127 << 25;
  $shr132 = $xor127 >>> 7;
  $or133 = $shl128 | $shr132;
  $arrayidx136 = (39024 + ($i$269 << 4) | 0) + 2 | 0;
  $77 = HEAP8[$arrayidx136 >> 0] | 0;
  $idxprom137 = $77 & 255;
  $arrayidx138 = $m + ($idxprom137 << 2) | 0;
  $78 = HEAP32[$arrayidx138 >> 2] | 0;
  $arrayidx140 = (39024 + ($i$269 << 4) | 0) + 3 | 0;
  $79 = HEAP8[$arrayidx140 >> 0] | 0;
  $idxprom141 = $79 & 255;
  $arrayidx142 = 39248 + ($idxprom141 << 2) | 0;
  $80 = HEAP32[$arrayidx142 >> 2] | 0;
  $xor143 = $80 ^ $78;
  $add145 = $xor143 + $or56574 | 0;
  $add147 = $add145 + $add61575 | 0;
  $xor150 = $or48076 ^ $add147;
  $shl151 = $xor150 << 16;
  $shr155 = $xor150 >>> 16;
  $or156 = $shl151 | $shr155;
  $add160 = $or156 + $add41277 | 0;
  $xor163 = $add160 ^ $or56574;
  $shl164 = $xor163 << 20;
  $shr168 = $xor163 >>> 12;
  $or169 = $shl164 | $shr168;
  $arrayidx174 = $m + ($idxprom141 << 2) | 0;
  $81 = HEAP32[$arrayidx174 >> 2] | 0;
  $arrayidx178 = 39248 + ($idxprom137 << 2) | 0;
  $82 = HEAP32[$arrayidx178 >> 2] | 0;
  $xor179 = $82 ^ $81;
  $add181 = $or169 + $add147 | 0;
  $add183 = $add181 + $xor179 | 0;
  $xor186 = $add183 ^ $or156;
  $shl187 = $xor186 << 24;
  $shr191 = $xor186 >>> 8;
  $or192 = $shl187 | $shr191;
  $add196 = $or192 + $add160 | 0;
  $xor199 = $add196 ^ $or169;
  $shl200 = $xor199 << 25;
  $shr204 = $xor199 >>> 7;
  $or205 = $shl200 | $shr204;
  $arrayidx208 = (39024 + ($i$269 << 4) | 0) + 4 | 0;
  $83 = HEAP8[$arrayidx208 >> 0] | 0;
  $idxprom209 = $83 & 255;
  $arrayidx210 = $m + ($idxprom209 << 2) | 0;
  $84 = HEAP32[$arrayidx210 >> 2] | 0;
  $arrayidx212 = (39024 + ($i$269 << 4) | 0) + 5 | 0;
  $85 = HEAP8[$arrayidx212 >> 0] | 0;
  $idxprom213 = $85 & 255;
  $arrayidx214 = 39248 + ($idxprom213 << 2) | 0;
  $86 = HEAP32[$arrayidx214 >> 2] | 0;
  $xor215 = $86 ^ $84;
  $add217 = $xor215 + $or63778 | 0;
  $add219 = $add217 + $add47179 | 0;
  $xor222 = $or40880 ^ $add219;
  $shl223 = $xor222 << 16;
  $shr227 = $xor222 >>> 16;
  $or228 = $shl223 | $shr227;
  $add232 = $or228 + $add55681 | 0;
  $xor235 = $add232 ^ $or63778;
  $shl236 = $xor235 << 20;
  $shr240 = $xor235 >>> 12;
  $or241 = $shl236 | $shr240;
  $arrayidx246 = $m + ($idxprom213 << 2) | 0;
  $87 = HEAP32[$arrayidx246 >> 2] | 0;
  $arrayidx250 = 39248 + ($idxprom209 << 2) | 0;
  $88 = HEAP32[$arrayidx250 >> 2] | 0;
  $xor251 = $88 ^ $87;
  $add253 = $or241 + $add219 | 0;
  $add255 = $add253 + $xor251 | 0;
  $xor258 = $add255 ^ $or228;
  $shl259 = $xor258 << 24;
  $shr263 = $xor258 >>> 8;
  $or264 = $shl259 | $shr263;
  $add268 = $or264 + $add232 | 0;
  $xor271 = $add268 ^ $or241;
  $shl272 = $xor271 << 25;
  $shr276 = $xor271 >>> 7;
  $or277 = $shl272 | $shr276;
  $arrayidx280 = (39024 + ($i$269 << 4) | 0) + 6 | 0;
  $89 = HEAP8[$arrayidx280 >> 0] | 0;
  $idxprom281 = $89 & 255;
  $arrayidx282 = $m + ($idxprom281 << 2) | 0;
  $90 = HEAP32[$arrayidx282 >> 2] | 0;
  $arrayidx284 = (39024 + ($i$269 << 4) | 0) + 7 | 0;
  $91 = HEAP8[$arrayidx284 >> 0] | 0;
  $idxprom285 = $91 & 255;
  $arrayidx286 = 39248 + ($idxprom285 << 2) | 0;
  $92 = HEAP32[$arrayidx286 >> 2] | 0;
  $xor287 = $92 ^ $90;
  $add289 = $xor287 + $or49382 | 0;
  $add291 = $add289 + $add39983 | 0;
  $xor294 = $or55284 ^ $add291;
  $shl295 = $xor294 << 16;
  $shr299 = $xor294 >>> 16;
  $or300 = $shl295 | $shr299;
  $add304 = $or300 + $add62885 | 0;
  $xor307 = $add304 ^ $or49382;
  $shl308 = $xor307 << 20;
  $shr312 = $xor307 >>> 12;
  $or313 = $shl308 | $shr312;
  $arrayidx318 = $m + ($idxprom285 << 2) | 0;
  $93 = HEAP32[$arrayidx318 >> 2] | 0;
  $arrayidx322 = 39248 + ($idxprom281 << 2) | 0;
  $94 = HEAP32[$arrayidx322 >> 2] | 0;
  $xor323 = $94 ^ $93;
  $add325 = $or313 + $add291 | 0;
  $add327 = $add325 + $xor323 | 0;
  $xor330 = $add327 ^ $or300;
  $shl331 = $xor330 << 24;
  $shr335 = $xor330 >>> 8;
  $or336 = $shl331 | $shr335;
  $add340 = $or336 + $add304 | 0;
  $xor343 = $add340 ^ $or313;
  $shl344 = $xor343 << 25;
  $shr348 = $xor343 >>> 7;
  $or349 = $shl344 | $shr348;
  $arrayidx352 = (39024 + ($i$269 << 4) | 0) + 14 | 0;
  $95 = HEAP8[$arrayidx352 >> 0] | 0;
  $idxprom353 = $95 & 255;
  $arrayidx354 = $m + ($idxprom353 << 2) | 0;
  $96 = HEAP32[$arrayidx354 >> 2] | 0;
  $arrayidx356 = (39024 + ($i$269 << 4) | 0) + 15 | 0;
  $97 = HEAP8[$arrayidx356 >> 0] | 0;
  $idxprom357 = $97 & 255;
  $arrayidx358 = 39248 + ($idxprom357 << 2) | 0;
  $98 = HEAP32[$arrayidx358 >> 2] | 0;
  $xor359 = $98 ^ $96;
  $add361 = $add327 + $or133 | 0;
  $add363 = $add361 + $xor359 | 0;
  $xor366 = $add363 ^ $or264;
  $shl367 = $xor366 << 16;
  $shr371 = $xor366 >>> 16;
  $or372 = $shl367 | $shr371;
  $add376 = $or372 + $add196 | 0;
  $xor379 = $add376 ^ $or133;
  $shl380 = $xor379 << 20;
  $shr384 = $xor379 >>> 12;
  $or385 = $shl380 | $shr384;
  $arrayidx390 = $m + ($idxprom357 << 2) | 0;
  $99 = HEAP32[$arrayidx390 >> 2] | 0;
  $arrayidx394 = 39248 + ($idxprom353 << 2) | 0;
  $100 = HEAP32[$arrayidx394 >> 2] | 0;
  $xor395 = $100 ^ $99;
  $add397 = $xor395 + $add363 | 0;
  $add399 = $add397 + $or385 | 0;
  $xor402 = $add399 ^ $or372;
  $shl403 = $xor402 << 24;
  $shr407 = $xor402 >>> 8;
  $or408 = $shl403 | $shr407;
  $add412 = $or408 + $add376 | 0;
  $xor415 = $add412 ^ $or385;
  $shl416 = $xor415 << 25;
  $shr420 = $xor415 >>> 7;
  $or421 = $shl416 | $shr420;
  $arrayidx424 = (39024 + ($i$269 << 4) | 0) + 12 | 0;
  $101 = HEAP8[$arrayidx424 >> 0] | 0;
  $idxprom425 = $101 & 255;
  $arrayidx426 = $m + ($idxprom425 << 2) | 0;
  $102 = HEAP32[$arrayidx426 >> 2] | 0;
  $arrayidx428 = (39024 + ($i$269 << 4) | 0) + 13 | 0;
  $103 = HEAP8[$arrayidx428 >> 0] | 0;
  $idxprom429 = $103 & 255;
  $arrayidx430 = 39248 + ($idxprom429 << 2) | 0;
  $104 = HEAP32[$arrayidx430 >> 2] | 0;
  $xor431 = $104 ^ $102;
  $add433 = $or349 + $add255 | 0;
  $add435 = $add433 + $xor431 | 0;
  $xor438 = $add435 ^ $or192;
  $shl439 = $xor438 << 16;
  $shr443 = $xor438 >>> 16;
  $or444 = $shl439 | $shr443;
  $add448 = $or444 + $add124 | 0;
  $xor451 = $add448 ^ $or349;
  $shl452 = $xor451 << 20;
  $shr456 = $xor451 >>> 12;
  $or457 = $shl452 | $shr456;
  $arrayidx462 = $m + ($idxprom429 << 2) | 0;
  $105 = HEAP32[$arrayidx462 >> 2] | 0;
  $arrayidx466 = 39248 + ($idxprom425 << 2) | 0;
  $106 = HEAP32[$arrayidx466 >> 2] | 0;
  $xor467 = $106 ^ $105;
  $add469 = $xor467 + $add435 | 0;
  $add471 = $add469 + $or457 | 0;
  $xor474 = $add471 ^ $or444;
  $shl475 = $xor474 << 24;
  $shr479 = $xor474 >>> 8;
  $or480 = $shl475 | $shr479;
  $add484 = $or480 + $add448 | 0;
  $xor487 = $add484 ^ $or457;
  $shl488 = $xor487 << 25;
  $shr492 = $xor487 >>> 7;
  $or493 = $shl488 | $shr492;
  $arrayidx496 = (39024 + ($i$269 << 4) | 0) + 8 | 0;
  $107 = HEAP8[$arrayidx496 >> 0] | 0;
  $idxprom497 = $107 & 255;
  $arrayidx498 = $m + ($idxprom497 << 2) | 0;
  $108 = HEAP32[$arrayidx498 >> 2] | 0;
  $arrayidx500 = (39024 + ($i$269 << 4) | 0) + 9 | 0;
  $109 = HEAP8[$arrayidx500 >> 0] | 0;
  $idxprom501 = $109 & 255;
  $arrayidx502 = 39248 + ($idxprom501 << 2) | 0;
  $110 = HEAP32[$arrayidx502 >> 2] | 0;
  $xor503 = $110 ^ $108;
  $add505 = $or205 + $add111 | 0;
  $add507 = $add505 + $xor503 | 0;
  $xor510 = $add507 ^ $or336;
  $shl511 = $xor510 << 16;
  $shr515 = $xor510 >>> 16;
  $or516 = $shl511 | $shr515;
  $add520 = $or516 + $add268 | 0;
  $xor523 = $add520 ^ $or205;
  $shl524 = $xor523 << 20;
  $shr528 = $xor523 >>> 12;
  $or529 = $shl524 | $shr528;
  $arrayidx534 = $m + ($idxprom501 << 2) | 0;
  $111 = HEAP32[$arrayidx534 >> 2] | 0;
  $arrayidx538 = 39248 + ($idxprom497 << 2) | 0;
  $112 = HEAP32[$arrayidx538 >> 2] | 0;
  $xor539 = $112 ^ $111;
  $add541 = $xor539 + $add507 | 0;
  $add543 = $add541 + $or529 | 0;
  $xor546 = $add543 ^ $or516;
  $shl547 = $xor546 << 24;
  $shr551 = $xor546 >>> 8;
  $or552 = $shl547 | $shr551;
  $add556 = $or552 + $add520 | 0;
  $xor559 = $add556 ^ $or529;
  $shl560 = $xor559 << 25;
  $shr564 = $xor559 >>> 7;
  $or565 = $shl560 | $shr564;
  $arrayidx568 = (39024 + ($i$269 << 4) | 0) + 10 | 0;
  $113 = HEAP8[$arrayidx568 >> 0] | 0;
  $idxprom569 = $113 & 255;
  $arrayidx570 = $m + ($idxprom569 << 2) | 0;
  $114 = HEAP32[$arrayidx570 >> 2] | 0;
  $arrayidx572 = (39024 + ($i$269 << 4) | 0) + 11 | 0;
  $115 = HEAP8[$arrayidx572 >> 0] | 0;
  $idxprom573 = $115 & 255;
  $arrayidx574 = 39248 + ($idxprom573 << 2) | 0;
  $116 = HEAP32[$arrayidx574 >> 2] | 0;
  $xor575 = $116 ^ $114;
  $add577 = $or277 + $add183 | 0;
  $add579 = $add577 + $xor575 | 0;
  $xor582 = $add579 ^ $or120;
  $shl583 = $xor582 << 16;
  $shr587 = $xor582 >>> 16;
  $or588 = $shl583 | $shr587;
  $add592 = $or588 + $add340 | 0;
  $xor595 = $add592 ^ $or277;
  $shl596 = $xor595 << 20;
  $shr600 = $xor595 >>> 12;
  $or601 = $shl596 | $shr600;
  $arrayidx606 = $m + ($idxprom573 << 2) | 0;
  $117 = HEAP32[$arrayidx606 >> 2] | 0;
  $arrayidx610 = 39248 + ($idxprom569 << 2) | 0;
  $118 = HEAP32[$arrayidx610 >> 2] | 0;
  $xor611 = $118 ^ $117;
  $add613 = $xor611 + $add579 | 0;
  $add615 = $add613 + $or601 | 0;
  $xor618 = $add615 ^ $or588;
  $shl619 = $xor618 << 24;
  $shr623 = $xor618 >>> 8;
  $or624 = $shl619 | $shr623;
  $add628 = $or624 + $add592 | 0;
  $xor631 = $add628 ^ $or601;
  $shl632 = $xor631 << 25;
  $shr636 = $xor631 >>> 7;
  $or637 = $shl632 | $shr636;
  $inc640 = $i$269 + 1 | 0;
  $exitcond = ($inc640 | 0) == 14;
  if ($exitcond) {
   break;
  } else {
   $add39983 = $add399;
   $add41277 = $add412;
   $add47179 = $add471;
   $add48473 = $add484;
   $add54371 = $add543;
   $add55681 = $add556;
   $add61575 = $add615;
   $add62885 = $add628;
   $i$269 = $inc640;
   $or40880 = $or408;
   $or42170 = $or421;
   $or48076 = $or480;
   $or49382 = $or493;
   $or55284 = $or552;
   $or56574 = $or565;
   $or62472 = $or624;
   $or63778 = $or637;
  }
 }
 $119 = HEAP32[$S >> 2] | 0;
 $xor649 = $119 ^ $add543;
 $120 = HEAP32[$v$sroa$2$0$S90$sroa_idx1 >> 2] | 0;
 $xor649$1 = $120 ^ $add615;
 $121 = HEAP32[$v$sroa$3$0$S90$sroa_idx2 >> 2] | 0;
 $xor649$2 = $121 ^ $add471;
 $122 = HEAP32[$v$sroa$4$0$S90$sroa_idx3 >> 2] | 0;
 $xor649$3 = $122 ^ $add399;
 $123 = HEAP32[$v$sroa$5$0$S90$sroa_idx4 >> 2] | 0;
 $xor649$4 = $123 ^ $or421;
 $124 = HEAP32[$v$sroa$6$0$S90$sroa_idx5 >> 2] | 0;
 $xor649$5 = $124 ^ $or565;
 $125 = HEAP32[$v$sroa$7$0$S90$sroa_idx6 >> 2] | 0;
 $xor649$6 = $125 ^ $or637;
 $126 = HEAP32[$v$sroa$8$0$S90$sroa_idx7 >> 2] | 0;
 $xor649$7 = $126 ^ $or493;
 $xor649$8 = $xor649 ^ $add484;
 $xor649$9 = $xor649$1 ^ $add412;
 $xor649$10 = $xor649$2 ^ $add556;
 $xor649$11 = $xor649$3 ^ $add628;
 $xor649$12 = $xor649$4 ^ $or624;
 $xor649$13 = $xor649$5 ^ $or480;
 $xor649$14 = $xor649$6 ^ $or408;
 $xor649$15 = $xor649$7 ^ $or552;
 $127 = HEAP32[$arrayidx27 >> 2] | 0;
 $xor662 = $xor649$8 ^ $127;
 HEAP32[$S >> 2] = $xor662;
 $128 = HEAP32[$arrayidx30 >> 2] | 0;
 $xor662$1 = $xor649$9 ^ $128;
 HEAP32[$v$sroa$2$0$S90$sroa_idx1 >> 2] = $xor662$1;
 $129 = HEAP32[$arrayidx34 >> 2] | 0;
 $xor662$2 = $xor649$10 ^ $129;
 HEAP32[$v$sroa$3$0$S90$sroa_idx2 >> 2] = $xor662$2;
 $130 = HEAP32[$arrayidx38 >> 2] | 0;
 $xor662$3 = $xor649$11 ^ $130;
 HEAP32[$v$sroa$4$0$S90$sroa_idx3 >> 2] = $xor662$3;
 $xor662$4 = $xor649$12 ^ $127;
 HEAP32[$v$sroa$5$0$S90$sroa_idx4 >> 2] = $xor662$4;
 $xor662$5 = $xor649$13 ^ $128;
 HEAP32[$v$sroa$6$0$S90$sroa_idx5 >> 2] = $xor662$5;
 $xor662$6 = $xor649$14 ^ $129;
 HEAP32[$v$sroa$7$0$S90$sroa_idx6 >> 2] = $xor662$6;
 $xor662$7 = $xor649$15 ^ $130;
 HEAP32[$v$sroa$8$0$S90$sroa_idx7 >> 2] = $xor662$7;
 STACKTOP = sp;
 return;
}

function _keccakf($st) {
 $st = $st | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx$2 = 0, $arrayidx$3 = 0, $arrayidx$4 = 0, $arrayidx12$1$phi$trans$insert = 0, $arrayidx12$2$phi$trans$insert = 0, $arrayidx12$3$phi$trans$insert = 0, $arrayidx12$4$phi$trans$insert = 0, $arrayidx12$phi$trans$insert = 0, $arrayidx39 = 0, $arrayidx4 = 0;
 var $arrayidx4$1 = 0, $arrayidx4$2 = 0, $arrayidx4$3 = 0, $arrayidx4$4 = 0, $arrayidx43 = 0, $arrayidx44 = 0, $arrayidx46 = 0, $arrayidx6$1$phi$trans$insert = 0, $arrayidx6$2$phi$trans$insert = 0, $arrayidx6$3$phi$trans$insert = 0, $arrayidx6$4$phi$trans$insert = 0, $arrayidx6$phi$trans$insert = 0, $arrayidx87 = 0, $arrayidx9$1$phi$trans$insert = 0, $arrayidx9$2$phi$trans$insert = 0, $arrayidx9$3$phi$trans$insert = 0, $arrayidx9$4$phi$trans$insert = 0, $arrayidx9$phi$trans$insert = 0, $exitcond = 0, $exitcond94 = 0;
 var $i$254 = 0, $inc55 = 0, $inc91 = 0, $round$060 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arrayidx39 = $st + 8 | 0;
 $0 = $st;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $arrayidx12$phi$trans$insert = $st + 160 | 0;
 $6 = $arrayidx12$phi$trans$insert;
 $7 = $6;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $6 + 4 | 0;
 $10 = $9;
 $11 = HEAP32[$10 >> 2] | 0;
 $arrayidx9$1$phi$trans$insert = $st + 128 | 0;
 $12 = $arrayidx9$1$phi$trans$insert;
 $13 = $12;
 $14 = HEAP32[$13 >> 2] | 0;
 $15 = $12 + 4 | 0;
 $16 = $15;
 $17 = HEAP32[$16 >> 2] | 0;
 $arrayidx12$1$phi$trans$insert = $st + 168 | 0;
 $18 = $arrayidx12$1$phi$trans$insert;
 $19 = $18;
 $20 = HEAP32[$19 >> 2] | 0;
 $21 = $18 + 4 | 0;
 $22 = $21;
 $23 = HEAP32[$22 >> 2] | 0;
 $arrayidx9$2$phi$trans$insert = $st + 136 | 0;
 $24 = $arrayidx9$2$phi$trans$insert;
 $25 = $24;
 $26 = HEAP32[$25 >> 2] | 0;
 $27 = $24 + 4 | 0;
 $28 = $27;
 $29 = HEAP32[$28 >> 2] | 0;
 $arrayidx12$2$phi$trans$insert = $st + 176 | 0;
 $30 = $arrayidx12$2$phi$trans$insert;
 $31 = $30;
 $32 = HEAP32[$31 >> 2] | 0;
 $33 = $30 + 4 | 0;
 $34 = $33;
 $35 = HEAP32[$34 >> 2] | 0;
 $arrayidx9$3$phi$trans$insert = $st + 144 | 0;
 $36 = $arrayidx9$3$phi$trans$insert;
 $37 = $36;
 $38 = HEAP32[$37 >> 2] | 0;
 $39 = $36 + 4 | 0;
 $40 = $39;
 $41 = HEAP32[$40 >> 2] | 0;
 $arrayidx12$3$phi$trans$insert = $st + 184 | 0;
 $42 = $arrayidx12$3$phi$trans$insert;
 $43 = $42;
 $44 = HEAP32[$43 >> 2] | 0;
 $45 = $42 + 4 | 0;
 $46 = $45;
 $47 = HEAP32[$46 >> 2] | 0;
 $arrayidx9$4$phi$trans$insert = $st + 152 | 0;
 $48 = $arrayidx9$4$phi$trans$insert;
 $49 = $48;
 $50 = HEAP32[$49 >> 2] | 0;
 $51 = $48 + 4 | 0;
 $52 = $51;
 $53 = HEAP32[$52 >> 2] | 0;
 $arrayidx12$4$phi$trans$insert = $st + 192 | 0;
 $54 = $arrayidx12$4$phi$trans$insert;
 $55 = $54;
 $56 = HEAP32[$55 >> 2] | 0;
 $57 = $54 + 4 | 0;
 $58 = $57;
 $59 = HEAP32[$58 >> 2] | 0;
 $arrayidx6$phi$trans$insert = $st + 80 | 0;
 $60 = $arrayidx6$phi$trans$insert;
 $61 = $60;
 $62 = HEAP32[$61 >> 2] | 0;
 $63 = $60 + 4 | 0;
 $64 = $63;
 $65 = HEAP32[$64 >> 2] | 0;
 $arrayidx9$phi$trans$insert = $st + 120 | 0;
 $66 = $arrayidx9$phi$trans$insert;
 $67 = $66;
 $68 = HEAP32[$67 >> 2] | 0;
 $69 = $66 + 4 | 0;
 $70 = $69;
 $71 = HEAP32[$70 >> 2] | 0;
 $arrayidx6$1$phi$trans$insert = $st + 88 | 0;
 $72 = $arrayidx6$1$phi$trans$insert;
 $73 = $72;
 $74 = HEAP32[$73 >> 2] | 0;
 $75 = $72 + 4 | 0;
 $76 = $75;
 $77 = HEAP32[$76 >> 2] | 0;
 $arrayidx6$2$phi$trans$insert = $st + 96 | 0;
 $78 = $arrayidx6$2$phi$trans$insert;
 $79 = $78;
 $80 = HEAP32[$79 >> 2] | 0;
 $81 = $78 + 4 | 0;
 $82 = $81;
 $83 = HEAP32[$82 >> 2] | 0;
 $arrayidx6$3$phi$trans$insert = $st + 104 | 0;
 $84 = $arrayidx6$3$phi$trans$insert;
 $85 = $84;
 $86 = HEAP32[$85 >> 2] | 0;
 $87 = $84 + 4 | 0;
 $88 = $87;
 $89 = HEAP32[$88 >> 2] | 0;
 $arrayidx6$4$phi$trans$insert = $st + 112 | 0;
 $90 = $arrayidx6$4$phi$trans$insert;
 $91 = $90;
 $92 = HEAP32[$91 >> 2] | 0;
 $93 = $90 + 4 | 0;
 $94 = $93;
 $95 = HEAP32[$94 >> 2] | 0;
 $arrayidx4 = $st + 40 | 0;
 $arrayidx4$1 = $st + 48 | 0;
 $arrayidx$2 = $st + 16 | 0;
 $arrayidx4$2 = $st + 56 | 0;
 $arrayidx$3 = $st + 24 | 0;
 $arrayidx4$3 = $st + 64 | 0;
 $arrayidx$4 = $st + 32 | 0;
 $arrayidx4$4 = $st + 72 | 0;
 $96 = $arrayidx4$4;
 $97 = $96;
 $98 = HEAP32[$97 >> 2] | 0;
 $99 = $96 + 4 | 0;
 $100 = $99;
 $101 = HEAP32[$100 >> 2] | 0;
 $109 = $2;
 $111 = $5;
 $113 = $62;
 $115 = $65;
 $117 = $68;
 $119 = $71;
 $121 = $8;
 $123 = $11;
 $139 = $74;
 $141 = $77;
 $143 = $14;
 $145 = $17;
 $147 = $20;
 $149 = $23;
 $165 = $80;
 $167 = $83;
 $169 = $26;
 $171 = $29;
 $173 = $32;
 $175 = $35;
 $191 = $86;
 $193 = $89;
 $195 = $38;
 $197 = $41;
 $199 = $44;
 $201 = $47;
 $209 = $98;
 $211 = $101;
 $213 = $92;
 $215 = $95;
 $217 = $50;
 $219 = $53;
 $221 = $56;
 $223 = $59;
 $round$060 = 0;
 while (1) {
  $102 = $arrayidx4;
  $103 = $102;
  $104 = HEAP32[$103 >> 2] | 0;
  $105 = $102 + 4 | 0;
  $106 = $105;
  $107 = HEAP32[$106 >> 2] | 0;
  $108 = $104 ^ $109;
  $110 = $107 ^ $111;
  $112 = $108 ^ $113;
  $114 = $110 ^ $115;
  $116 = $112 ^ $117;
  $118 = $114 ^ $119;
  $120 = $116 ^ $121;
  $122 = $118 ^ $123;
  $124 = $arrayidx39;
  $125 = $124;
  $126 = HEAP32[$125 >> 2] | 0;
  $127 = $124 + 4 | 0;
  $128 = $127;
  $129 = HEAP32[$128 >> 2] | 0;
  $130 = $arrayidx4$1;
  $131 = $130;
  $132 = HEAP32[$131 >> 2] | 0;
  $133 = $130 + 4 | 0;
  $134 = $133;
  $135 = HEAP32[$134 >> 2] | 0;
  $136 = $132 ^ $126;
  $137 = $135 ^ $129;
  $138 = $136 ^ $139;
  $140 = $137 ^ $141;
  $142 = $138 ^ $143;
  $144 = $140 ^ $145;
  $146 = $142 ^ $147;
  $148 = $144 ^ $149;
  $150 = $arrayidx$2;
  $151 = $150;
  $152 = HEAP32[$151 >> 2] | 0;
  $153 = $150 + 4 | 0;
  $154 = $153;
  $155 = HEAP32[$154 >> 2] | 0;
  $156 = $arrayidx4$2;
  $157 = $156;
  $158 = HEAP32[$157 >> 2] | 0;
  $159 = $156 + 4 | 0;
  $160 = $159;
  $161 = HEAP32[$160 >> 2] | 0;
  $162 = $158 ^ $152;
  $163 = $161 ^ $155;
  $164 = $162 ^ $165;
  $166 = $163 ^ $167;
  $168 = $164 ^ $169;
  $170 = $166 ^ $171;
  $172 = $168 ^ $173;
  $174 = $170 ^ $175;
  $176 = $arrayidx$3;
  $177 = $176;
  $178 = HEAP32[$177 >> 2] | 0;
  $179 = $176 + 4 | 0;
  $180 = $179;
  $181 = HEAP32[$180 >> 2] | 0;
  $182 = $arrayidx4$3;
  $183 = $182;
  $184 = HEAP32[$183 >> 2] | 0;
  $185 = $182 + 4 | 0;
  $186 = $185;
  $187 = HEAP32[$186 >> 2] | 0;
  $188 = $184 ^ $178;
  $189 = $187 ^ $181;
  $190 = $188 ^ $191;
  $192 = $189 ^ $193;
  $194 = $190 ^ $195;
  $196 = $192 ^ $197;
  $198 = $194 ^ $199;
  $200 = $196 ^ $201;
  $202 = $arrayidx$4;
  $203 = $202;
  $204 = HEAP32[$203 >> 2] | 0;
  $205 = $202 + 4 | 0;
  $206 = $205;
  $207 = HEAP32[$206 >> 2] | 0;
  $208 = $209 ^ $204;
  $210 = $211 ^ $207;
  $212 = $208 ^ $213;
  $214 = $210 ^ $215;
  $216 = $212 ^ $217;
  $218 = $214 ^ $219;
  $220 = $216 ^ $221;
  $222 = $218 ^ $223;
  $224 = _bitshift64Shl($146 | 0, $148 | 0, 1) | 0;
  $225 = getTempRet0() | 0;
  $226 = _bitshift64Lshr($146 | 0, $148 | 0, 63) | 0;
  $227 = getTempRet0() | 0;
  $228 = $224 | $226;
  $229 = $225 | $227;
  $230 = $228 ^ $220;
  $231 = $229 ^ $222;
  $232 = $230 ^ $109;
  $233 = $231 ^ $111;
  $234 = $st;
  $235 = $234;
  HEAP32[$235 >> 2] = $232;
  $236 = $234 + 4 | 0;
  $237 = $236;
  HEAP32[$237 >> 2] = $233;
  $238 = $230 ^ $104;
  $239 = $231 ^ $107;
  $240 = $arrayidx4;
  $241 = $240;
  HEAP32[$241 >> 2] = $238;
  $242 = $240 + 4 | 0;
  $243 = $242;
  HEAP32[$243 >> 2] = $239;
  $244 = $230 ^ $113;
  $245 = $231 ^ $115;
  $246 = $arrayidx6$phi$trans$insert;
  $247 = $246;
  HEAP32[$247 >> 2] = $244;
  $248 = $246 + 4 | 0;
  $249 = $248;
  HEAP32[$249 >> 2] = $245;
  $250 = $230 ^ $117;
  $251 = $231 ^ $119;
  $252 = $arrayidx9$phi$trans$insert;
  $253 = $252;
  HEAP32[$253 >> 2] = $250;
  $254 = $252 + 4 | 0;
  $255 = $254;
  HEAP32[$255 >> 2] = $251;
  $256 = $230 ^ $121;
  $257 = $231 ^ $123;
  $258 = $arrayidx12$phi$trans$insert;
  $259 = $258;
  HEAP32[$259 >> 2] = $256;
  $260 = $258 + 4 | 0;
  $261 = $260;
  HEAP32[$261 >> 2] = $257;
  $262 = _bitshift64Shl($172 | 0, $174 | 0, 1) | 0;
  $263 = getTempRet0() | 0;
  $264 = _bitshift64Lshr($172 | 0, $174 | 0, 63) | 0;
  $265 = getTempRet0() | 0;
  $266 = $262 | $264;
  $267 = $263 | $265;
  $268 = $266 ^ $120;
  $269 = $267 ^ $122;
  $270 = $268 ^ $126;
  $271 = $269 ^ $129;
  $272 = $arrayidx39;
  $273 = $272;
  HEAP32[$273 >> 2] = $270;
  $274 = $272 + 4 | 0;
  $275 = $274;
  HEAP32[$275 >> 2] = $271;
  $276 = $268 ^ $132;
  $277 = $269 ^ $135;
  $278 = $arrayidx4$1;
  $279 = $278;
  HEAP32[$279 >> 2] = $276;
  $280 = $278 + 4 | 0;
  $281 = $280;
  HEAP32[$281 >> 2] = $277;
  $282 = $268 ^ $139;
  $283 = $269 ^ $141;
  $284 = $arrayidx6$1$phi$trans$insert;
  $285 = $284;
  HEAP32[$285 >> 2] = $282;
  $286 = $284 + 4 | 0;
  $287 = $286;
  HEAP32[$287 >> 2] = $283;
  $288 = $268 ^ $143;
  $289 = $269 ^ $145;
  $290 = $arrayidx9$1$phi$trans$insert;
  $291 = $290;
  HEAP32[$291 >> 2] = $288;
  $292 = $290 + 4 | 0;
  $293 = $292;
  HEAP32[$293 >> 2] = $289;
  $294 = $268 ^ $147;
  $295 = $269 ^ $149;
  $296 = $arrayidx12$1$phi$trans$insert;
  $297 = $296;
  HEAP32[$297 >> 2] = $294;
  $298 = $296 + 4 | 0;
  $299 = $298;
  HEAP32[$299 >> 2] = $295;
  $300 = _bitshift64Shl($198 | 0, $200 | 0, 1) | 0;
  $301 = getTempRet0() | 0;
  $302 = _bitshift64Lshr($198 | 0, $200 | 0, 63) | 0;
  $303 = getTempRet0() | 0;
  $304 = $300 | $302;
  $305 = $301 | $303;
  $306 = $304 ^ $146;
  $307 = $305 ^ $148;
  $308 = $306 ^ $152;
  $309 = $307 ^ $155;
  $310 = $arrayidx$2;
  $311 = $310;
  HEAP32[$311 >> 2] = $308;
  $312 = $310 + 4 | 0;
  $313 = $312;
  HEAP32[$313 >> 2] = $309;
  $314 = $306 ^ $158;
  $315 = $307 ^ $161;
  $316 = $arrayidx4$2;
  $317 = $316;
  HEAP32[$317 >> 2] = $314;
  $318 = $316 + 4 | 0;
  $319 = $318;
  HEAP32[$319 >> 2] = $315;
  $320 = $306 ^ $165;
  $321 = $307 ^ $167;
  $322 = $arrayidx6$2$phi$trans$insert;
  $323 = $322;
  HEAP32[$323 >> 2] = $320;
  $324 = $322 + 4 | 0;
  $325 = $324;
  HEAP32[$325 >> 2] = $321;
  $326 = $306 ^ $169;
  $327 = $307 ^ $171;
  $328 = $arrayidx9$2$phi$trans$insert;
  $329 = $328;
  HEAP32[$329 >> 2] = $326;
  $330 = $328 + 4 | 0;
  $331 = $330;
  HEAP32[$331 >> 2] = $327;
  $332 = $306 ^ $173;
  $333 = $307 ^ $175;
  $334 = $arrayidx12$2$phi$trans$insert;
  $335 = $334;
  HEAP32[$335 >> 2] = $332;
  $336 = $334 + 4 | 0;
  $337 = $336;
  HEAP32[$337 >> 2] = $333;
  $338 = _bitshift64Shl($220 | 0, $222 | 0, 1) | 0;
  $339 = getTempRet0() | 0;
  $340 = _bitshift64Lshr($220 | 0, $222 | 0, 63) | 0;
  $341 = getTempRet0() | 0;
  $342 = $338 | $340;
  $343 = $339 | $341;
  $344 = $342 ^ $172;
  $345 = $343 ^ $174;
  $346 = $344 ^ $178;
  $347 = $345 ^ $181;
  $348 = $arrayidx$3;
  $349 = $348;
  HEAP32[$349 >> 2] = $346;
  $350 = $348 + 4 | 0;
  $351 = $350;
  HEAP32[$351 >> 2] = $347;
  $352 = $344 ^ $184;
  $353 = $345 ^ $187;
  $354 = $arrayidx4$3;
  $355 = $354;
  HEAP32[$355 >> 2] = $352;
  $356 = $354 + 4 | 0;
  $357 = $356;
  HEAP32[$357 >> 2] = $353;
  $358 = $344 ^ $191;
  $359 = $345 ^ $193;
  $360 = $arrayidx6$3$phi$trans$insert;
  $361 = $360;
  HEAP32[$361 >> 2] = $358;
  $362 = $360 + 4 | 0;
  $363 = $362;
  HEAP32[$363 >> 2] = $359;
  $364 = $344 ^ $195;
  $365 = $345 ^ $197;
  $366 = $arrayidx9$3$phi$trans$insert;
  $367 = $366;
  HEAP32[$367 >> 2] = $364;
  $368 = $366 + 4 | 0;
  $369 = $368;
  HEAP32[$369 >> 2] = $365;
  $370 = $arrayidx12$3$phi$trans$insert;
  $371 = $370;
  $372 = HEAP32[$371 >> 2] | 0;
  $373 = $370 + 4 | 0;
  $374 = $373;
  $375 = HEAP32[$374 >> 2] | 0;
  $376 = $344 ^ $372;
  $377 = $345 ^ $375;
  $378 = $arrayidx12$3$phi$trans$insert;
  $379 = $378;
  HEAP32[$379 >> 2] = $376;
  $380 = $378 + 4 | 0;
  $381 = $380;
  HEAP32[$381 >> 2] = $377;
  $382 = _bitshift64Shl($120 | 0, $122 | 0, 1) | 0;
  $383 = getTempRet0() | 0;
  $384 = _bitshift64Lshr($120 | 0, $122 | 0, 63) | 0;
  $385 = getTempRet0() | 0;
  $386 = $382 | $384;
  $387 = $383 | $385;
  $388 = $386 ^ $198;
  $389 = $387 ^ $200;
  $390 = $388 ^ $204;
  $391 = $389 ^ $207;
  $392 = $arrayidx$4;
  $393 = $392;
  HEAP32[$393 >> 2] = $390;
  $394 = $392 + 4 | 0;
  $395 = $394;
  HEAP32[$395 >> 2] = $391;
  $396 = $388 ^ $209;
  $397 = $389 ^ $211;
  $398 = $arrayidx4$4;
  $399 = $398;
  HEAP32[$399 >> 2] = $396;
  $400 = $398 + 4 | 0;
  $401 = $400;
  HEAP32[$401 >> 2] = $397;
  $402 = $388 ^ $213;
  $403 = $389 ^ $215;
  $404 = $arrayidx6$4$phi$trans$insert;
  $405 = $404;
  HEAP32[$405 >> 2] = $402;
  $406 = $404 + 4 | 0;
  $407 = $406;
  HEAP32[$407 >> 2] = $403;
  $408 = $arrayidx9$4$phi$trans$insert;
  $409 = $408;
  $410 = HEAP32[$409 >> 2] | 0;
  $411 = $408 + 4 | 0;
  $412 = $411;
  $413 = HEAP32[$412 >> 2] | 0;
  $414 = $388 ^ $410;
  $415 = $389 ^ $413;
  $416 = $arrayidx9$4$phi$trans$insert;
  $417 = $416;
  HEAP32[$417 >> 2] = $414;
  $418 = $416 + 4 | 0;
  $419 = $418;
  HEAP32[$419 >> 2] = $415;
  $420 = $arrayidx12$4$phi$trans$insert;
  $421 = $420;
  $422 = HEAP32[$421 >> 2] | 0;
  $423 = $420 + 4 | 0;
  $424 = $423;
  $425 = HEAP32[$424 >> 2] | 0;
  $426 = $388 ^ $422;
  $427 = $389 ^ $425;
  $428 = $arrayidx12$4$phi$trans$insert;
  $429 = $428;
  HEAP32[$429 >> 2] = $426;
  $430 = $428 + 4 | 0;
  $431 = $430;
  HEAP32[$431 >> 2] = $427;
  $440 = $270;
  $441 = $271;
  $i$254 = 0;
  while (1) {
   $arrayidx43 = 32768 + ($i$254 << 2) | 0;
   $432 = HEAP32[$arrayidx43 >> 2] | 0;
   $arrayidx44 = $st + ($432 << 3) | 0;
   $433 = $arrayidx44;
   $434 = $433;
   $435 = HEAP32[$434 >> 2] | 0;
   $436 = $433 + 4 | 0;
   $437 = $436;
   $438 = HEAP32[$437 >> 2] | 0;
   $arrayidx46 = 32672 + ($i$254 << 2) | 0;
   $439 = HEAP32[$arrayidx46 >> 2] | 0;
   $442 = _bitshift64Shl($440 | 0, $441 | 0, $439 | 0) | 0;
   $443 = getTempRet0() | 0;
   $sub = 64 - $439 | 0;
   $444 = _bitshift64Lshr($440 | 0, $441 | 0, $sub | 0) | 0;
   $445 = getTempRet0() | 0;
   $446 = $444 | $442;
   $447 = $445 | $443;
   $448 = $arrayidx44;
   $449 = $448;
   HEAP32[$449 >> 2] = $446;
   $450 = $448 + 4 | 0;
   $451 = $450;
   HEAP32[$451 >> 2] = $447;
   $inc55 = $i$254 + 1 | 0;
   $exitcond = ($inc55 | 0) == 24;
   if ($exitcond) {
    break;
   } else {
    $440 = $435;
    $441 = $438;
    $i$254 = $inc55;
   }
  }
  $452 = $st;
  $453 = $452;
  $454 = HEAP32[$453 >> 2] | 0;
  $455 = $452 + 4 | 0;
  $456 = $455;
  $457 = HEAP32[$456 >> 2] | 0;
  $458 = $arrayidx39;
  $459 = $458;
  $460 = HEAP32[$459 >> 2] | 0;
  $461 = $458 + 4 | 0;
  $462 = $461;
  $463 = HEAP32[$462 >> 2] | 0;
  $464 = $arrayidx$2;
  $465 = $464;
  $466 = HEAP32[$465 >> 2] | 0;
  $467 = $464 + 4 | 0;
  $468 = $467;
  $469 = HEAP32[$468 >> 2] | 0;
  $470 = $arrayidx$3;
  $471 = $470;
  $472 = HEAP32[$471 >> 2] | 0;
  $473 = $470 + 4 | 0;
  $474 = $473;
  $475 = HEAP32[$474 >> 2] | 0;
  $476 = $arrayidx$4;
  $477 = $476;
  $478 = HEAP32[$477 >> 2] | 0;
  $479 = $476 + 4 | 0;
  $480 = $479;
  $481 = HEAP32[$480 >> 2] | 0;
  $482 = $460 ^ -1;
  $483 = $463 ^ -1;
  $484 = $466 & $482;
  $485 = $469 & $483;
  $486 = $454 ^ $484;
  $487 = $457 ^ $485;
  $488 = $st;
  $489 = $488;
  HEAP32[$489 >> 2] = $486;
  $490 = $488 + 4 | 0;
  $491 = $490;
  HEAP32[$491 >> 2] = $487;
  $492 = $466 ^ -1;
  $493 = $469 ^ -1;
  $494 = $472 & $492;
  $495 = $475 & $493;
  $496 = $460 ^ $494;
  $497 = $463 ^ $495;
  $498 = $arrayidx39;
  $499 = $498;
  HEAP32[$499 >> 2] = $496;
  $500 = $498 + 4 | 0;
  $501 = $500;
  HEAP32[$501 >> 2] = $497;
  $502 = $472 ^ -1;
  $503 = $475 ^ -1;
  $504 = $478 & $502;
  $505 = $481 & $503;
  $506 = $466 ^ $504;
  $507 = $469 ^ $505;
  $508 = $arrayidx$2;
  $509 = $508;
  HEAP32[$509 >> 2] = $506;
  $510 = $508 + 4 | 0;
  $511 = $510;
  HEAP32[$511 >> 2] = $507;
  $512 = $478 ^ -1;
  $513 = $481 ^ -1;
  $514 = $454 & $512;
  $515 = $457 & $513;
  $516 = $472 ^ $514;
  $517 = $475 ^ $515;
  $518 = $arrayidx$3;
  $519 = $518;
  HEAP32[$519 >> 2] = $516;
  $520 = $518 + 4 | 0;
  $521 = $520;
  HEAP32[$521 >> 2] = $517;
  $522 = $454 ^ -1;
  $523 = $457 ^ -1;
  $524 = $460 & $522;
  $525 = $463 & $523;
  $526 = $478 ^ $524;
  $527 = $481 ^ $525;
  $528 = $arrayidx$4;
  $529 = $528;
  HEAP32[$529 >> 2] = $526;
  $530 = $528 + 4 | 0;
  $531 = $530;
  HEAP32[$531 >> 2] = $527;
  $532 = $arrayidx4;
  $533 = $532;
  $534 = HEAP32[$533 >> 2] | 0;
  $535 = $532 + 4 | 0;
  $536 = $535;
  $537 = HEAP32[$536 >> 2] | 0;
  $538 = $arrayidx4$1;
  $539 = $538;
  $540 = HEAP32[$539 >> 2] | 0;
  $541 = $538 + 4 | 0;
  $542 = $541;
  $543 = HEAP32[$542 >> 2] | 0;
  $544 = $arrayidx4$2;
  $545 = $544;
  $546 = HEAP32[$545 >> 2] | 0;
  $547 = $544 + 4 | 0;
  $548 = $547;
  $549 = HEAP32[$548 >> 2] | 0;
  $550 = $arrayidx4$3;
  $551 = $550;
  $552 = HEAP32[$551 >> 2] | 0;
  $553 = $550 + 4 | 0;
  $554 = $553;
  $555 = HEAP32[$554 >> 2] | 0;
  $556 = $arrayidx4$4;
  $557 = $556;
  $558 = HEAP32[$557 >> 2] | 0;
  $559 = $556 + 4 | 0;
  $560 = $559;
  $561 = HEAP32[$560 >> 2] | 0;
  $562 = $540 ^ -1;
  $563 = $543 ^ -1;
  $564 = $546 & $562;
  $565 = $549 & $563;
  $566 = $534 ^ $564;
  $567 = $537 ^ $565;
  $568 = $arrayidx4;
  $569 = $568;
  HEAP32[$569 >> 2] = $566;
  $570 = $568 + 4 | 0;
  $571 = $570;
  HEAP32[$571 >> 2] = $567;
  $572 = $546 ^ -1;
  $573 = $549 ^ -1;
  $574 = $552 & $572;
  $575 = $555 & $573;
  $576 = $540 ^ $574;
  $577 = $543 ^ $575;
  $578 = $arrayidx4$1;
  $579 = $578;
  HEAP32[$579 >> 2] = $576;
  $580 = $578 + 4 | 0;
  $581 = $580;
  HEAP32[$581 >> 2] = $577;
  $582 = $552 ^ -1;
  $583 = $555 ^ -1;
  $584 = $558 & $582;
  $585 = $561 & $583;
  $586 = $546 ^ $584;
  $587 = $549 ^ $585;
  $588 = $arrayidx4$2;
  $589 = $588;
  HEAP32[$589 >> 2] = $586;
  $590 = $588 + 4 | 0;
  $591 = $590;
  HEAP32[$591 >> 2] = $587;
  $592 = $558 ^ -1;
  $593 = $561 ^ -1;
  $594 = $534 & $592;
  $595 = $537 & $593;
  $596 = $552 ^ $594;
  $597 = $555 ^ $595;
  $598 = $arrayidx4$3;
  $599 = $598;
  HEAP32[$599 >> 2] = $596;
  $600 = $598 + 4 | 0;
  $601 = $600;
  HEAP32[$601 >> 2] = $597;
  $602 = $534 ^ -1;
  $603 = $537 ^ -1;
  $604 = $540 & $602;
  $605 = $543 & $603;
  $606 = $558 ^ $604;
  $607 = $561 ^ $605;
  $608 = $arrayidx4$4;
  $609 = $608;
  HEAP32[$609 >> 2] = $606;
  $610 = $608 + 4 | 0;
  $611 = $610;
  HEAP32[$611 >> 2] = $607;
  $612 = $arrayidx6$phi$trans$insert;
  $613 = $612;
  $614 = HEAP32[$613 >> 2] | 0;
  $615 = $612 + 4 | 0;
  $616 = $615;
  $617 = HEAP32[$616 >> 2] | 0;
  $618 = $arrayidx6$1$phi$trans$insert;
  $619 = $618;
  $620 = HEAP32[$619 >> 2] | 0;
  $621 = $618 + 4 | 0;
  $622 = $621;
  $623 = HEAP32[$622 >> 2] | 0;
  $624 = $arrayidx6$2$phi$trans$insert;
  $625 = $624;
  $626 = HEAP32[$625 >> 2] | 0;
  $627 = $624 + 4 | 0;
  $628 = $627;
  $629 = HEAP32[$628 >> 2] | 0;
  $630 = $arrayidx6$3$phi$trans$insert;
  $631 = $630;
  $632 = HEAP32[$631 >> 2] | 0;
  $633 = $630 + 4 | 0;
  $634 = $633;
  $635 = HEAP32[$634 >> 2] | 0;
  $636 = $arrayidx6$4$phi$trans$insert;
  $637 = $636;
  $638 = HEAP32[$637 >> 2] | 0;
  $639 = $636 + 4 | 0;
  $640 = $639;
  $641 = HEAP32[$640 >> 2] | 0;
  $642 = $620 ^ -1;
  $643 = $623 ^ -1;
  $644 = $626 & $642;
  $645 = $629 & $643;
  $646 = $614 ^ $644;
  $647 = $617 ^ $645;
  $648 = $arrayidx6$phi$trans$insert;
  $649 = $648;
  HEAP32[$649 >> 2] = $646;
  $650 = $648 + 4 | 0;
  $651 = $650;
  HEAP32[$651 >> 2] = $647;
  $652 = $626 ^ -1;
  $653 = $629 ^ -1;
  $654 = $632 & $652;
  $655 = $635 & $653;
  $656 = $620 ^ $654;
  $657 = $623 ^ $655;
  $658 = $arrayidx6$1$phi$trans$insert;
  $659 = $658;
  HEAP32[$659 >> 2] = $656;
  $660 = $658 + 4 | 0;
  $661 = $660;
  HEAP32[$661 >> 2] = $657;
  $662 = $632 ^ -1;
  $663 = $635 ^ -1;
  $664 = $638 & $662;
  $665 = $641 & $663;
  $666 = $626 ^ $664;
  $667 = $629 ^ $665;
  $668 = $arrayidx6$2$phi$trans$insert;
  $669 = $668;
  HEAP32[$669 >> 2] = $666;
  $670 = $668 + 4 | 0;
  $671 = $670;
  HEAP32[$671 >> 2] = $667;
  $672 = $638 ^ -1;
  $673 = $641 ^ -1;
  $674 = $614 & $672;
  $675 = $617 & $673;
  $676 = $632 ^ $674;
  $677 = $635 ^ $675;
  $678 = $arrayidx6$3$phi$trans$insert;
  $679 = $678;
  HEAP32[$679 >> 2] = $676;
  $680 = $678 + 4 | 0;
  $681 = $680;
  HEAP32[$681 >> 2] = $677;
  $682 = $614 ^ -1;
  $683 = $617 ^ -1;
  $684 = $620 & $682;
  $685 = $623 & $683;
  $686 = $638 ^ $684;
  $687 = $641 ^ $685;
  $688 = $arrayidx6$4$phi$trans$insert;
  $689 = $688;
  HEAP32[$689 >> 2] = $686;
  $690 = $688 + 4 | 0;
  $691 = $690;
  HEAP32[$691 >> 2] = $687;
  $692 = $arrayidx9$phi$trans$insert;
  $693 = $692;
  $694 = HEAP32[$693 >> 2] | 0;
  $695 = $692 + 4 | 0;
  $696 = $695;
  $697 = HEAP32[$696 >> 2] | 0;
  $698 = $arrayidx9$1$phi$trans$insert;
  $699 = $698;
  $700 = HEAP32[$699 >> 2] | 0;
  $701 = $698 + 4 | 0;
  $702 = $701;
  $703 = HEAP32[$702 >> 2] | 0;
  $704 = $arrayidx9$2$phi$trans$insert;
  $705 = $704;
  $706 = HEAP32[$705 >> 2] | 0;
  $707 = $704 + 4 | 0;
  $708 = $707;
  $709 = HEAP32[$708 >> 2] | 0;
  $710 = $arrayidx9$3$phi$trans$insert;
  $711 = $710;
  $712 = HEAP32[$711 >> 2] | 0;
  $713 = $710 + 4 | 0;
  $714 = $713;
  $715 = HEAP32[$714 >> 2] | 0;
  $716 = $arrayidx9$4$phi$trans$insert;
  $717 = $716;
  $718 = HEAP32[$717 >> 2] | 0;
  $719 = $716 + 4 | 0;
  $720 = $719;
  $721 = HEAP32[$720 >> 2] | 0;
  $722 = $700 ^ -1;
  $723 = $703 ^ -1;
  $724 = $706 & $722;
  $725 = $709 & $723;
  $726 = $694 ^ $724;
  $727 = $697 ^ $725;
  $728 = $arrayidx9$phi$trans$insert;
  $729 = $728;
  HEAP32[$729 >> 2] = $726;
  $730 = $728 + 4 | 0;
  $731 = $730;
  HEAP32[$731 >> 2] = $727;
  $732 = $706 ^ -1;
  $733 = $709 ^ -1;
  $734 = $712 & $732;
  $735 = $715 & $733;
  $736 = $700 ^ $734;
  $737 = $703 ^ $735;
  $738 = $arrayidx9$1$phi$trans$insert;
  $739 = $738;
  HEAP32[$739 >> 2] = $736;
  $740 = $738 + 4 | 0;
  $741 = $740;
  HEAP32[$741 >> 2] = $737;
  $742 = $712 ^ -1;
  $743 = $715 ^ -1;
  $744 = $718 & $742;
  $745 = $721 & $743;
  $746 = $706 ^ $744;
  $747 = $709 ^ $745;
  $748 = $arrayidx9$2$phi$trans$insert;
  $749 = $748;
  HEAP32[$749 >> 2] = $746;
  $750 = $748 + 4 | 0;
  $751 = $750;
  HEAP32[$751 >> 2] = $747;
  $752 = $718 ^ -1;
  $753 = $721 ^ -1;
  $754 = $694 & $752;
  $755 = $697 & $753;
  $756 = $712 ^ $754;
  $757 = $715 ^ $755;
  $758 = $arrayidx9$3$phi$trans$insert;
  $759 = $758;
  HEAP32[$759 >> 2] = $756;
  $760 = $758 + 4 | 0;
  $761 = $760;
  HEAP32[$761 >> 2] = $757;
  $762 = $694 ^ -1;
  $763 = $697 ^ -1;
  $764 = $700 & $762;
  $765 = $703 & $763;
  $766 = $718 ^ $764;
  $767 = $721 ^ $765;
  $768 = $arrayidx9$4$phi$trans$insert;
  $769 = $768;
  HEAP32[$769 >> 2] = $766;
  $770 = $768 + 4 | 0;
  $771 = $770;
  HEAP32[$771 >> 2] = $767;
  $772 = $arrayidx12$phi$trans$insert;
  $773 = $772;
  $774 = HEAP32[$773 >> 2] | 0;
  $775 = $772 + 4 | 0;
  $776 = $775;
  $777 = HEAP32[$776 >> 2] | 0;
  $778 = $arrayidx12$1$phi$trans$insert;
  $779 = $778;
  $780 = HEAP32[$779 >> 2] | 0;
  $781 = $778 + 4 | 0;
  $782 = $781;
  $783 = HEAP32[$782 >> 2] | 0;
  $784 = $arrayidx12$2$phi$trans$insert;
  $785 = $784;
  $786 = HEAP32[$785 >> 2] | 0;
  $787 = $784 + 4 | 0;
  $788 = $787;
  $789 = HEAP32[$788 >> 2] | 0;
  $790 = $arrayidx12$3$phi$trans$insert;
  $791 = $790;
  $792 = HEAP32[$791 >> 2] | 0;
  $793 = $790 + 4 | 0;
  $794 = $793;
  $795 = HEAP32[$794 >> 2] | 0;
  $796 = $arrayidx12$4$phi$trans$insert;
  $797 = $796;
  $798 = HEAP32[$797 >> 2] | 0;
  $799 = $796 + 4 | 0;
  $800 = $799;
  $801 = HEAP32[$800 >> 2] | 0;
  $802 = $780 ^ -1;
  $803 = $783 ^ -1;
  $804 = $786 & $802;
  $805 = $789 & $803;
  $806 = $774 ^ $804;
  $807 = $777 ^ $805;
  $808 = $arrayidx12$phi$trans$insert;
  $809 = $808;
  HEAP32[$809 >> 2] = $806;
  $810 = $808 + 4 | 0;
  $811 = $810;
  HEAP32[$811 >> 2] = $807;
  $812 = $786 ^ -1;
  $813 = $789 ^ -1;
  $814 = $792 & $812;
  $815 = $795 & $813;
  $816 = $780 ^ $814;
  $817 = $783 ^ $815;
  $818 = $arrayidx12$1$phi$trans$insert;
  $819 = $818;
  HEAP32[$819 >> 2] = $816;
  $820 = $818 + 4 | 0;
  $821 = $820;
  HEAP32[$821 >> 2] = $817;
  $822 = $792 ^ -1;
  $823 = $795 ^ -1;
  $824 = $798 & $822;
  $825 = $801 & $823;
  $826 = $786 ^ $824;
  $827 = $789 ^ $825;
  $828 = $arrayidx12$2$phi$trans$insert;
  $829 = $828;
  HEAP32[$829 >> 2] = $826;
  $830 = $828 + 4 | 0;
  $831 = $830;
  HEAP32[$831 >> 2] = $827;
  $832 = $798 ^ -1;
  $833 = $801 ^ -1;
  $834 = $774 & $832;
  $835 = $777 & $833;
  $836 = $792 ^ $834;
  $837 = $795 ^ $835;
  $838 = $arrayidx12$3$phi$trans$insert;
  $839 = $838;
  HEAP32[$839 >> 2] = $836;
  $840 = $838 + 4 | 0;
  $841 = $840;
  HEAP32[$841 >> 2] = $837;
  $842 = $774 ^ -1;
  $843 = $777 ^ -1;
  $844 = $780 & $842;
  $845 = $783 & $843;
  $846 = $798 ^ $844;
  $847 = $801 ^ $845;
  $848 = $arrayidx12$4$phi$trans$insert;
  $849 = $848;
  HEAP32[$849 >> 2] = $846;
  $850 = $848 + 4 | 0;
  $851 = $850;
  HEAP32[$851 >> 2] = $847;
  $arrayidx87 = 32480 + ($round$060 << 3) | 0;
  $852 = $arrayidx87;
  $853 = $852;
  $854 = HEAP32[$853 >> 2] | 0;
  $855 = $852 + 4 | 0;
  $856 = $855;
  $857 = HEAP32[$856 >> 2] | 0;
  $858 = $st;
  $859 = $858;
  $860 = HEAP32[$859 >> 2] | 0;
  $861 = $858 + 4 | 0;
  $862 = $861;
  $863 = HEAP32[$862 >> 2] | 0;
  $864 = $860 ^ $854;
  $865 = $863 ^ $857;
  $866 = $st;
  $867 = $866;
  HEAP32[$867 >> 2] = $864;
  $868 = $866 + 4 | 0;
  $869 = $868;
  HEAP32[$869 >> 2] = $865;
  $inc91 = $round$060 + 1 | 0;
  $exitcond94 = ($inc91 | 0) == 24;
  if ($exitcond94) {
   break;
  } else {
   $109 = $864;
   $111 = $865;
   $113 = $646;
   $115 = $647;
   $117 = $726;
   $119 = $727;
   $121 = $806;
   $123 = $807;
   $139 = $656;
   $141 = $657;
   $143 = $736;
   $145 = $737;
   $147 = $816;
   $149 = $817;
   $165 = $666;
   $167 = $667;
   $169 = $746;
   $171 = $747;
   $173 = $826;
   $175 = $827;
   $191 = $676;
   $193 = $677;
   $195 = $756;
   $197 = $757;
   $199 = $836;
   $201 = $837;
   $209 = $606;
   $211 = $607;
   $213 = $686;
   $215 = $687;
   $217 = $766;
   $219 = $767;
   $221 = $846;
   $223 = $847;
   $round$060 = $inc91;
  }
 }
 return;
}

function _cn_slow_hash($data, $length, $hash, $light, $variant, $page_size, $scratchpad, $iterations, $0, $1) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 $light = $light | 0;
 $variant = $variant | 0;
 $page_size = $page_size | 0;
 $scratchpad = $scratchpad | 0;
 $iterations = $iterations | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $add$ptr = 0, $add$ptr112 = 0, $add$ptr114 = 0, $add$ptr116 = 0, $add$ptr24 = 0, $add$ptr274 = 0;
 var $add$ptr278 = 0, $add$ptr292 = 0, $add$ptr34 = 0, $add$ptr37 = 0, $add$ptr379 = 0, $add$ptr41 = 0, $add241 = 0.0, $add261 = 0, $add420$1 = 0, $add420$2 = 0, $add420$3 = 0, $add420$4 = 0, $add420$5 = 0, $add420$6 = 0, $add420$7 = 0, $aes_ctx = 0, $and191 = 0, $and193 = 0, $and198 = 0, $and442 = 0;
 var $arrayidx = 0, $arrayidx104 = 0, $arrayidx125 = 0, $arrayidx132 = 0, $arrayidx140 = 0, $arrayidx156 = 0, $arrayidx161 = 0, $arrayidx189 = 0, $arrayidx208 = 0, $arrayidx220 = 0, $arrayidx307 = 0, $arrayidx315 = 0, $arrayidx323 = 0, $arrayidx340 = 0, $arrayidx345 = 0, $arrayidx417$1 = 0, $arrayidx417$2 = 0, $arrayidx417$3 = 0, $arrayidx417$4 = 0, $arrayidx417$5 = 0;
 var $arrayidx417$6 = 0, $arrayidx417$7 = 0, $arrayidx421 = 0, $arrayidx421$1 = 0, $arrayidx421$2 = 0, $arrayidx421$3 = 0, $arrayidx421$4 = 0, $arrayidx421$5 = 0, $arrayidx421$6 = 0, $arrayidx421$7 = 0, $arrayidx43 = 0, $arrayidx443 = 0, $arrayidx46 = 0, $arrayidx55$1 = 0, $arrayidx55$2 = 0, $arrayidx55$3 = 0, $arrayidx55$4 = 0, $arrayidx55$5 = 0, $arrayidx55$6 = 0, $arrayidx55$7 = 0;
 var $arrayidx60 = 0, $arrayidx68 = 0, $arrayidx74 = 0, $arrayidx77 = 0, $arrayidx80 = 0, $arrayidx82 = 0, $arrayidx85 = 0, $arrayidx92 = 0, $arrayidx95 = 0, $arrayidx98 = 0, $b = 0, $b1$sroa$0$0$add$ptr119$sroa_idx = 0, $b1$sroa$3$0$add$ptr119$sroa_idx = 0, $c = 0, $c1 = 0, $call = 0, $call4 = 0, $cmp = 0, $cmp100144 = 0, $cmp11 = 0;
 var $cmp126 = 0, $cmp21 = 0, $cmp21132 = 0, $cmp384 = 0, $cmp51149 = 0, $cond = 0, $cond260 = 0, $conv190 = 0, $conv200 = 0, $conv224 = 0, $conv228 = 0, $d = 0, $div = 0, $div1 = 0, $exitcond = 0, $exitcond151 = 0, $exitcond153 = 0, $exp_data = 0, $exp_data405 = 0, $exp_data_len = 0;
 var $exp_data_len407 = 0, $expandedKey = 0, $i$0150 = 0, $i$1147 = 0, $i$2143 = 0, $inc394 = 0, $inc431 = 0, $inc63 = 0, $init = 0, $mul242 = 0.0, $mul418 = 0, $mul59 = 0, $or = 0, $shl = 0, $shr197 = 0, $state = 0, $sub = 0.0, $text = 0, $tweak1_2 = 0, $xor111 = 0;
 var $xor113 = 0, $xor115 = 0, $xor199 = 0, $xor273 = 0, $xor277 = 0, $xor291 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(704 | 0);
 $text = sp + 352 | 0;
 $a = sp + 336 | 0;
 $b = sp + 304 | 0;
 $c = sp + 288 | 0;
 $c1 = sp + 272 | 0;
 $d = sp + 256 | 0;
 $expandedKey = sp;
 $state = sp + 488 | 0;
 $aes_ctx = sp + 688 | 0;
 $tweak1_2 = sp + 480 | 0;
 $div = $scratchpad >>> 7;
 $div1 = $iterations >>> 1;
 $call = _malloc($page_size) | 0;
 _hash_process($state, $data, $length);
 $init = $state + 64 | 0;
 dest = $text;
 src = $init;
 stop = dest + 128 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $call4 = _oaes_alloc() | 0;
 HEAP32[$aes_ctx >> 2] = $call4;
 _oaes_key_import_data($call4, $state);
 $cmp = ($variant | 0) == 1;
 do {
  if ($cmp) {
   $cmp11 = $length >>> 0 < 43;
   if ($cmp11) {
    _fwrite(45989, 52, 1, 42288) | 0;
    _abort();
   } else {
    $arrayidx = $state + 192 | 0;
    $2 = $arrayidx;
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $2 + 4 | 0;
    $6 = $5;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $tweak1_2;
    $9 = $8;
    HEAP32[$9 >> 2] = $4;
    $10 = $8 + 4 | 0;
    $11 = $10;
    HEAP32[$11 >> 2] = $7;
    $add$ptr = $data + 35 | 0;
    _xor64($tweak1_2, $add$ptr);
    $485 = 0;
    $486 = 0;
    $487 = 0;
    $488 = 0;
    $cmp21132 = 0;
    break;
   }
  } else {
   $cmp21 = ($variant | 0) == 2;
   if ($cmp21) {
    $add$ptr24 = $b + 16 | 0;
    HEAP32[$add$ptr24 >> 2] = HEAP32[$init >> 2] | 0;
    HEAP32[$add$ptr24 + 4 >> 2] = HEAP32[$init + 4 >> 2] | 0;
    HEAP32[$add$ptr24 + 8 >> 2] = HEAP32[$init + 8 >> 2] | 0;
    HEAP32[$add$ptr24 + 12 >> 2] = HEAP32[$init + 12 >> 2] | 0;
    $add$ptr34 = $state + 80 | 0;
    _xor64($add$ptr24, $add$ptr34);
    $add$ptr37 = $b + 24 | 0;
    $add$ptr41 = $state + 88 | 0;
    _xor64($add$ptr37, $add$ptr41);
    $arrayidx43 = $state + 96 | 0;
    $12 = $arrayidx43;
    $13 = $12;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $12 + 4 | 0;
    $16 = $15;
    $17 = HEAP32[$16 >> 2] | 0;
    $arrayidx46 = $state + 104 | 0;
    $18 = $arrayidx46;
    $19 = $18;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $18 + 4 | 0;
    $22 = $21;
    $23 = HEAP32[$22 >> 2] | 0;
    $485 = $20;
    $486 = $23;
    $487 = $14;
    $488 = $17;
    $cmp21132 = 1;
   } else {
    $485 = 0;
    $486 = 0;
    $487 = 0;
    $488 = 0;
    $cmp21132 = 0;
   }
  }
 } while (0);
 $24 = HEAP32[$aes_ctx >> 2] | 0;
 $25 = HEAP32[$24 >> 2] | 0;
 $exp_data = $25 + 12 | 0;
 $26 = HEAP32[$exp_data >> 2] | 0;
 $exp_data_len = $25 + 8 | 0;
 $27 = HEAP32[$exp_data_len >> 2] | 0;
 _memcpy($expandedKey | 0, $26 | 0, $27 | 0) | 0;
 $cmp51149 = ($div | 0) == 0;
 if (!$cmp51149) {
  $arrayidx55$1 = $text + 16 | 0;
  $arrayidx55$2 = $text + 32 | 0;
  $arrayidx55$3 = $text + 48 | 0;
  $arrayidx55$4 = $text + 64 | 0;
  $arrayidx55$5 = $text + 80 | 0;
  $arrayidx55$6 = $text + 96 | 0;
  $arrayidx55$7 = $text + 112 | 0;
  $i$0150 = 0;
  while (1) {
   _aesb_pseudo_round($text, $text, $expandedKey);
   _aesb_pseudo_round($arrayidx55$1, $arrayidx55$1, $expandedKey);
   _aesb_pseudo_round($arrayidx55$2, $arrayidx55$2, $expandedKey);
   _aesb_pseudo_round($arrayidx55$3, $arrayidx55$3, $expandedKey);
   _aesb_pseudo_round($arrayidx55$4, $arrayidx55$4, $expandedKey);
   _aesb_pseudo_round($arrayidx55$5, $arrayidx55$5, $expandedKey);
   _aesb_pseudo_round($arrayidx55$6, $arrayidx55$6, $expandedKey);
   _aesb_pseudo_round($arrayidx55$7, $arrayidx55$7, $expandedKey);
   $mul59 = $i$0150 << 7;
   $arrayidx60 = $call + $mul59 | 0;
   dest = $arrayidx60;
   src = $text;
   stop = dest + 128 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $inc63 = $i$0150 + 1 | 0;
   $exitcond153 = ($inc63 | 0) == ($div | 0);
   if ($exitcond153) {
    break;
   } else {
    $i$0150 = $inc63;
   }
  }
 }
 $28 = $state;
 $29 = $28;
 $30 = HEAP32[$29 >> 2] | 0;
 $31 = $28 + 4 | 0;
 $32 = $31;
 $33 = HEAP32[$32 >> 2] | 0;
 $arrayidx68 = $state + 32 | 0;
 $34 = $arrayidx68;
 $35 = $34;
 $36 = HEAP32[$35 >> 2] | 0;
 $37 = $34 + 4 | 0;
 $38 = $37;
 $39 = HEAP32[$38 >> 2] | 0;
 $40 = $36 ^ $30;
 $41 = $39 ^ $33;
 $42 = $a;
 $43 = $42;
 HEAP32[$43 >> 2] = $40;
 $44 = $42 + 4 | 0;
 $45 = $44;
 HEAP32[$45 >> 2] = $41;
 $arrayidx74 = $state + 8 | 0;
 $46 = $arrayidx74;
 $47 = $46;
 $48 = HEAP32[$47 >> 2] | 0;
 $49 = $46 + 4 | 0;
 $50 = $49;
 $51 = HEAP32[$50 >> 2] | 0;
 $arrayidx77 = $state + 40 | 0;
 $52 = $arrayidx77;
 $53 = $52;
 $54 = HEAP32[$53 >> 2] | 0;
 $55 = $52 + 4 | 0;
 $56 = $55;
 $57 = HEAP32[$56 >> 2] | 0;
 $58 = $54 ^ $48;
 $59 = $57 ^ $51;
 $arrayidx80 = $a + 8 | 0;
 $60 = $arrayidx80;
 $61 = $60;
 HEAP32[$61 >> 2] = $58;
 $62 = $60 + 4 | 0;
 $63 = $62;
 HEAP32[$63 >> 2] = $59;
 $arrayidx82 = $state + 16 | 0;
 $64 = $arrayidx82;
 $65 = $64;
 $66 = HEAP32[$65 >> 2] | 0;
 $67 = $64 + 4 | 0;
 $68 = $67;
 $69 = HEAP32[$68 >> 2] | 0;
 $arrayidx85 = $state + 48 | 0;
 $70 = $arrayidx85;
 $71 = $70;
 $72 = HEAP32[$71 >> 2] | 0;
 $73 = $70 + 4 | 0;
 $74 = $73;
 $75 = HEAP32[$74 >> 2] | 0;
 $76 = $72 ^ $66;
 $77 = $75 ^ $69;
 $78 = $b;
 $79 = $78;
 HEAP32[$79 >> 2] = $76;
 $80 = $78 + 4 | 0;
 $81 = $80;
 HEAP32[$81 >> 2] = $77;
 $arrayidx92 = $state + 24 | 0;
 $82 = $arrayidx92;
 $83 = $82;
 $84 = HEAP32[$83 >> 2] | 0;
 $85 = $82 + 4 | 0;
 $86 = $85;
 $87 = HEAP32[$86 >> 2] | 0;
 $arrayidx95 = $state + 56 | 0;
 $88 = $arrayidx95;
 $89 = $88;
 $90 = HEAP32[$89 >> 2] | 0;
 $91 = $88 + 4 | 0;
 $92 = $91;
 $93 = HEAP32[$92 >> 2] | 0;
 $94 = $90 ^ $84;
 $95 = $93 ^ $87;
 $arrayidx98 = $b + 8 | 0;
 $96 = $arrayidx98;
 $97 = $96;
 HEAP32[$97 >> 2] = $94;
 $98 = $96 + 4 | 0;
 $99 = $98;
 HEAP32[$99 >> 2] = $95;
 $cmp100144 = ($div1 | 0) == 0;
 L14 : do {
  if (!$cmp100144) {
   $b1$sroa$0$0$add$ptr119$sroa_idx = $b + 16 | 0;
   $b1$sroa$3$0$add$ptr119$sroa_idx = $b + 24 | 0;
   $cmp126 = ($light | 0) == 2;
   $arrayidx220 = $c1 + 8 | 0;
   $add$ptr379 = $c + 8 | 0;
   $cmp384 = ($variant | 0) > 1;
   $101 = $40;
   $102 = $41;
   $253 = $488;
   $254 = $485;
   $262 = $487;
   $489 = $486;
   $i$1147 = 0;
   while (1) {
    $100 = $101 & $0;
    $102 & $1;
    $arrayidx104 = $call + $100 | 0;
    _aesb_single_round($arrayidx104, $arrayidx104, $a);
    _copy_block_419($c1, $arrayidx104);
    if ($cmp21132) {
     $xor111 = $100 ^ 16;
     $add$ptr112 = $call + $xor111 | 0;
     $xor113 = $100 ^ 32;
     $add$ptr114 = $call + $xor113 | 0;
     $xor115 = $100 ^ 48;
     $add$ptr116 = $call + $xor115 | 0;
     $103 = $b1$sroa$0$0$add$ptr119$sroa_idx;
     $104 = $103;
     $105 = HEAP32[$104 >> 2] | 0;
     $106 = $103 + 4 | 0;
     $107 = $106;
     $108 = HEAP32[$107 >> 2] | 0;
     $109 = $b1$sroa$3$0$add$ptr119$sroa_idx;
     $110 = $109;
     $111 = HEAP32[$110 >> 2] | 0;
     $112 = $109 + 4 | 0;
     $113 = $112;
     $114 = HEAP32[$113 >> 2] | 0;
     $115 = $arrayidx80;
     $116 = $115;
     $117 = HEAP32[$116 >> 2] | 0;
     $118 = $115 + 4 | 0;
     $119 = $118;
     $120 = HEAP32[$119 >> 2] | 0;
     $121 = $b;
     $122 = $121;
     $123 = HEAP32[$122 >> 2] | 0;
     $124 = $121 + 4 | 0;
     $125 = $124;
     $126 = HEAP32[$125 >> 2] | 0;
     $127 = $arrayidx98;
     $128 = $127;
     $129 = HEAP32[$128 >> 2] | 0;
     $130 = $127 + 4 | 0;
     $131 = $130;
     $132 = HEAP32[$131 >> 2] | 0;
     $133 = $add$ptr114;
     $134 = $133;
     $135 = HEAP32[$134 >> 2] | 0;
     $136 = $133 + 4 | 0;
     $137 = $136;
     $138 = HEAP32[$137 >> 2] | 0;
     $arrayidx125 = $add$ptr114 + 8 | 0;
     $139 = $arrayidx125;
     $140 = $139;
     $141 = HEAP32[$140 >> 2] | 0;
     $142 = $139 + 4 | 0;
     $143 = $142;
     $144 = HEAP32[$143 >> 2] | 0;
     $145 = $add$ptr112;
     $146 = $145;
     $147 = HEAP32[$146 >> 2] | 0;
     $148 = $145 + 4 | 0;
     $149 = $148;
     $150 = HEAP32[$149 >> 2] | 0;
     if ($cmp126) {
      $151 = _i64Add($147 | 0, $150 | 0, $105 | 0, $108 | 0) | 0;
      $152 = getTempRet0() | 0;
      $153 = $add$ptr112;
      $154 = $153;
      HEAP32[$154 >> 2] = $151;
      $155 = $153 + 4 | 0;
      $156 = $155;
      HEAP32[$156 >> 2] = $152;
      $arrayidx132 = $add$ptr112 + 8 | 0;
      $157 = $arrayidx132;
      $158 = $157;
      $159 = HEAP32[$158 >> 2] | 0;
      $160 = $157 + 4 | 0;
      $161 = $160;
      $162 = HEAP32[$161 >> 2] | 0;
      $163 = _i64Add($159 | 0, $162 | 0, $111 | 0, $114 | 0) | 0;
      $164 = getTempRet0() | 0;
      $165 = $arrayidx132;
      $166 = $165;
      HEAP32[$166 >> 2] = $163;
      $167 = $165 + 4 | 0;
      $168 = $167;
      HEAP32[$168 >> 2] = $164;
      $169 = $add$ptr116;
      $170 = $169;
      $171 = HEAP32[$170 >> 2] | 0;
      $172 = $169 + 4 | 0;
      $173 = $172;
      $174 = HEAP32[$173 >> 2] | 0;
      $175 = _i64Add($171 | 0, $174 | 0, $123 | 0, $126 | 0) | 0;
      $176 = getTempRet0() | 0;
      $177 = $add$ptr114;
      $178 = $177;
      HEAP32[$178 >> 2] = $175;
      $179 = $177 + 4 | 0;
      $180 = $179;
      HEAP32[$180 >> 2] = $176;
      $arrayidx140 = $add$ptr116 + 8 | 0;
      $181 = $arrayidx140;
      $182 = $181;
      $183 = HEAP32[$182 >> 2] | 0;
      $184 = $181 + 4 | 0;
      $185 = $184;
      $186 = HEAP32[$185 >> 2] | 0;
      $$sink = $arrayidx140;
      $223 = $183;
      $224 = $186;
     } else {
      $arrayidx156 = $add$ptr112 + 8 | 0;
      $187 = $arrayidx156;
      $188 = $187;
      $189 = HEAP32[$188 >> 2] | 0;
      $190 = $187 + 4 | 0;
      $191 = $190;
      $192 = HEAP32[$191 >> 2] | 0;
      $193 = $add$ptr116;
      $194 = $193;
      $195 = HEAP32[$194 >> 2] | 0;
      $196 = $193 + 4 | 0;
      $197 = $196;
      $198 = HEAP32[$197 >> 2] | 0;
      $199 = _i64Add($195 | 0, $198 | 0, $105 | 0, $108 | 0) | 0;
      $200 = getTempRet0() | 0;
      $201 = $add$ptr112;
      $202 = $201;
      HEAP32[$202 >> 2] = $199;
      $203 = $201 + 4 | 0;
      $204 = $203;
      HEAP32[$204 >> 2] = $200;
      $arrayidx161 = $add$ptr116 + 8 | 0;
      $205 = $arrayidx161;
      $206 = $205;
      $207 = HEAP32[$206 >> 2] | 0;
      $208 = $205 + 4 | 0;
      $209 = $208;
      $210 = HEAP32[$209 >> 2] | 0;
      $211 = _i64Add($207 | 0, $210 | 0, $111 | 0, $114 | 0) | 0;
      $212 = getTempRet0() | 0;
      $213 = $arrayidx156;
      $214 = $213;
      HEAP32[$214 >> 2] = $211;
      $215 = $213 + 4 | 0;
      $216 = $215;
      HEAP32[$216 >> 2] = $212;
      $217 = _i64Add($147 | 0, $150 | 0, $123 | 0, $126 | 0) | 0;
      $218 = getTempRet0() | 0;
      $219 = $add$ptr114;
      $220 = $219;
      HEAP32[$220 >> 2] = $217;
      $221 = $219 + 4 | 0;
      $222 = $221;
      HEAP32[$222 >> 2] = $218;
      $$sink = $arrayidx161;
      $223 = $189;
      $224 = $192;
     }
     $225 = _i64Add($223 | 0, $224 | 0, $129 | 0, $132 | 0) | 0;
     $226 = getTempRet0() | 0;
     $227 = $arrayidx125;
     $228 = $227;
     HEAP32[$228 >> 2] = $225;
     $229 = $227 + 4 | 0;
     $230 = $229;
     HEAP32[$230 >> 2] = $226;
     $231 = _i64Add($135 | 0, $138 | 0, $101 | 0, $102 | 0) | 0;
     $232 = getTempRet0() | 0;
     $233 = $add$ptr116;
     $234 = $233;
     HEAP32[$234 >> 2] = $231;
     $235 = $233 + 4 | 0;
     $236 = $235;
     HEAP32[$236 >> 2] = $232;
     $237 = _i64Add($141 | 0, $144 | 0, $117 | 0, $120 | 0) | 0;
     $238 = getTempRet0() | 0;
     $239 = $$sink;
     $240 = $239;
     HEAP32[$240 >> 2] = $237;
     $241 = $239 + 4 | 0;
     $242 = $241;
     HEAP32[$242 >> 2] = $238;
    }
    _xor_blocks($arrayidx104, $b);
    if ($cmp) {
     $arrayidx189 = $arrayidx104 + 11 | 0;
     $243 = HEAP8[$arrayidx189 >> 0] | 0;
     $conv190 = $243 & 255;
     $244 = $conv190 >>> 3;
     $and191 = $244 & 6;
     $and193 = $conv190 & 1;
     $or = $and191 | $and193;
     $shl = $or << 1;
     $shr197 = 480016 >>> $shl;
     $and198 = $shr197 & 48;
     $xor199 = $and198 ^ $conv190;
     $conv200 = $xor199 & 255;
     HEAP8[$arrayidx189 >> 0] = $conv200;
    }
    $245 = $c1;
    $246 = $245;
    $247 = HEAP32[$246 >> 2] | 0;
    $248 = $245 + 4 | 0;
    $249 = $248;
    $250 = HEAP32[$249 >> 2] | 0;
    $251 = $247 & $0;
    $250 & $1;
    $arrayidx208 = $call + $251 | 0;
    _copy_block_419($c, $arrayidx208);
    do {
     if ($cmp21132) {
      $252 = $253 ^ $254;
      $255 = $c;
      $256 = $255;
      $257 = HEAP32[$256 >> 2] | 0;
      $258 = $255 + 4 | 0;
      $259 = $258;
      $260 = HEAP32[$259 >> 2] | 0;
      $261 = $262 ^ $257;
      $263 = $252 ^ $260;
      $264 = $c;
      $265 = $264;
      HEAP32[$265 >> 2] = $261;
      $266 = $264 + 4 | 0;
      $267 = $266;
      HEAP32[$267 >> 2] = $263;
      $268 = $arrayidx220;
      $269 = $268;
      $270 = HEAP32[$269 >> 2] | 0;
      $271 = $268 + 4 | 0;
      $272 = $271;
      $273 = HEAP32[$272 >> 2] | 0;
      $conv224 = $254 << 1;
      $274 = $conv224 + $247 | 0;
      $conv228 = $274 | -2147483647;
      $275 = ___udivdi3($270 | 0, $273 | 0, $conv228 | 0, 0) | 0;
      $276 = getTempRet0() | 0;
      $277 = ___muldi3($275 | 0, $276 | 0, $conv228 | 0, 0) | 0;
      $278 = getTempRet0() | 0;
      $279 = _i64Subtract($270 | 0, $273 | 0, $277 | 0, $278 | 0) | 0;
      $280 = getTempRet0() | 0;
      $281 = _i64Add($275 | 0, $279 | 0, $247 | 0, $250 | 0) | 0;
      $282 = getTempRet0() | 0;
      $283 = +($281 >>> 0) + 4294967296.0 * +($282 >>> 0);
      $add241 = $283 + 18446744073709551616.0;
      $284 = +Math_sqrt(+$add241);
      $mul242 = $284 * 2.0;
      $sub = $mul242 + -8589934592.0;
      $285 = ~~$sub >>> 0;
      $286 = +Math_abs($sub) >= 1.0 ? ($sub > 0.0 ? ~~+Math_min(+Math_floor($sub / 4294967296.0), 4294967295.0) >>> 0 : ~~+Math_ceil(($sub - +(~~$sub >>> 0)) / 4294967296.0) >>> 0) : 0;
      $287 = _bitshift64Lshr($285 | 0, $286 | 0, 1) | 0;
      $288 = getTempRet0() | 0;
      $289 = $285 & 1;
      $290 = _i64Add($287 | 0, $288 | 0, $289 | 0, 0) | 0;
      $291 = getTempRet0() | 0;
      $292 = ___muldi3($290 | 0, $291 | 0, $287 | 0, $288 | 0) | 0;
      $293 = getTempRet0() | 0;
      $294 = _i64Add($292 | 0, $293 | 0, 0, $285 | 0) | 0;
      $295 = getTempRet0() | 0;
      $296 = _i64Add($294 | 0, $295 | 0, $289 | 0, 0) | 0;
      $297 = getTempRet0() | 0;
      $298 = $297 >>> 0 > $282 >>> 0;
      $299 = $296 >>> 0 > $281 >>> 0;
      $300 = ($297 | 0) == ($282 | 0);
      $301 = $300 & $299;
      $302 = $298 | $301;
      $cond = $302 << 31 >> 31;
      $303 = _i64Add($294 | 0, $295 | 0, 0, 1) | 0;
      $304 = getTempRet0() | 0;
      $305 = _i64Subtract($281 | 0, $282 | 0, $287 | 0, $288 | 0) | 0;
      $306 = getTempRet0() | 0;
      $307 = $304 >>> 0 < $306 >>> 0;
      $308 = $303 >>> 0 < $305 >>> 0;
      $309 = ($304 | 0) == ($306 | 0);
      $310 = $309 & $308;
      $311 = $307 | $310;
      $cond260 = $311 & 1;
      $add261 = $cond + $cond260 | 0;
      $312 = ($add261 | 0) < 0;
      $313 = $312 << 31 >> 31;
      $314 = _i64Add($add261 | 0, $313 | 0, $285 | 0, $286 | 0) | 0;
      $315 = getTempRet0() | 0;
      _mul($c1, $c, $d);
      $xor273 = $251 ^ 16;
      $add$ptr274 = $call + $xor273 | 0;
      _xor_blocks($add$ptr274, $d);
      $xor277 = $251 ^ 32;
      $add$ptr278 = $call + $xor277 | 0;
      _xor_blocks($d, $add$ptr278);
      $xor291 = $251 ^ 48;
      $add$ptr292 = $call + $xor291 | 0;
      $316 = $b1$sroa$0$0$add$ptr119$sroa_idx;
      $317 = $316;
      $318 = HEAP32[$317 >> 2] | 0;
      $319 = $316 + 4 | 0;
      $320 = $319;
      $321 = HEAP32[$320 >> 2] | 0;
      $322 = $b1$sroa$3$0$add$ptr119$sroa_idx;
      $323 = $322;
      $324 = HEAP32[$323 >> 2] | 0;
      $325 = $322 + 4 | 0;
      $326 = $325;
      $327 = HEAP32[$326 >> 2] | 0;
      $328 = $arrayidx80;
      $329 = $328;
      $330 = HEAP32[$329 >> 2] | 0;
      $331 = $328 + 4 | 0;
      $332 = $331;
      $333 = HEAP32[$332 >> 2] | 0;
      $334 = $b;
      $335 = $334;
      $336 = HEAP32[$335 >> 2] | 0;
      $337 = $334 + 4 | 0;
      $338 = $337;
      $339 = HEAP32[$338 >> 2] | 0;
      $340 = $arrayidx98;
      $341 = $340;
      $342 = HEAP32[$341 >> 2] | 0;
      $343 = $340 + 4 | 0;
      $344 = $343;
      $345 = HEAP32[$344 >> 2] | 0;
      $346 = $add$ptr278;
      $347 = $346;
      $348 = HEAP32[$347 >> 2] | 0;
      $349 = $346 + 4 | 0;
      $350 = $349;
      $351 = HEAP32[$350 >> 2] | 0;
      $arrayidx307 = $add$ptr278 + 8 | 0;
      $352 = $arrayidx307;
      $353 = $352;
      $354 = HEAP32[$353 >> 2] | 0;
      $355 = $352 + 4 | 0;
      $356 = $355;
      $357 = HEAP32[$356 >> 2] | 0;
      $358 = $add$ptr274;
      $359 = $358;
      $360 = HEAP32[$359 >> 2] | 0;
      $361 = $358 + 4 | 0;
      $362 = $361;
      $363 = HEAP32[$362 >> 2] | 0;
      if ($cmp126) {
       $364 = _i64Add($360 | 0, $363 | 0, $318 | 0, $321 | 0) | 0;
       $365 = getTempRet0() | 0;
       $366 = $add$ptr274;
       $367 = $366;
       HEAP32[$367 >> 2] = $364;
       $368 = $366 + 4 | 0;
       $369 = $368;
       HEAP32[$369 >> 2] = $365;
       $arrayidx315 = $add$ptr274 + 8 | 0;
       $370 = $arrayidx315;
       $371 = $370;
       $372 = HEAP32[$371 >> 2] | 0;
       $373 = $370 + 4 | 0;
       $374 = $373;
       $375 = HEAP32[$374 >> 2] | 0;
       $376 = _i64Add($372 | 0, $375 | 0, $324 | 0, $327 | 0) | 0;
       $377 = getTempRet0() | 0;
       $378 = $arrayidx315;
       $379 = $378;
       HEAP32[$379 >> 2] = $376;
       $380 = $378 + 4 | 0;
       $381 = $380;
       HEAP32[$381 >> 2] = $377;
       $382 = $add$ptr292;
       $383 = $382;
       $384 = HEAP32[$383 >> 2] | 0;
       $385 = $382 + 4 | 0;
       $386 = $385;
       $387 = HEAP32[$386 >> 2] | 0;
       $388 = _i64Add($384 | 0, $387 | 0, $336 | 0, $339 | 0) | 0;
       $389 = getTempRet0() | 0;
       $390 = $add$ptr278;
       $391 = $390;
       HEAP32[$391 >> 2] = $388;
       $392 = $390 + 4 | 0;
       $393 = $392;
       HEAP32[$393 >> 2] = $389;
       $arrayidx323 = $add$ptr292 + 8 | 0;
       $394 = $arrayidx323;
       $395 = $394;
       $396 = HEAP32[$395 >> 2] | 0;
       $397 = $394 + 4 | 0;
       $398 = $397;
       $399 = HEAP32[$398 >> 2] | 0;
       $400 = _i64Add($396 | 0, $399 | 0, $342 | 0, $345 | 0) | 0;
       $401 = getTempRet0() | 0;
       $402 = $arrayidx307;
       $403 = $402;
       HEAP32[$403 >> 2] = $400;
       $404 = $402 + 4 | 0;
       $405 = $404;
       HEAP32[$405 >> 2] = $401;
       $406 = _i64Add($348 | 0, $351 | 0, $101 | 0, $102 | 0) | 0;
       $407 = getTempRet0() | 0;
       $408 = $add$ptr292;
       $409 = $408;
       HEAP32[$409 >> 2] = $406;
       $410 = $408 + 4 | 0;
       $411 = $410;
       HEAP32[$411 >> 2] = $407;
       $412 = _i64Add($354 | 0, $357 | 0, $330 | 0, $333 | 0) | 0;
       $413 = getTempRet0() | 0;
       $414 = $arrayidx323;
       $415 = $414;
       HEAP32[$415 >> 2] = $412;
       $416 = $414 + 4 | 0;
       $417 = $416;
       HEAP32[$417 >> 2] = $413;
       $490 = $275;
       $491 = $279;
       $492 = $314;
       $493 = $315;
       break;
      } else {
       $arrayidx340 = $add$ptr274 + 8 | 0;
       $418 = $arrayidx340;
       $419 = $418;
       $420 = HEAP32[$419 >> 2] | 0;
       $421 = $418 + 4 | 0;
       $422 = $421;
       $423 = HEAP32[$422 >> 2] | 0;
       $424 = $add$ptr292;
       $425 = $424;
       $426 = HEAP32[$425 >> 2] | 0;
       $427 = $424 + 4 | 0;
       $428 = $427;
       $429 = HEAP32[$428 >> 2] | 0;
       $430 = _i64Add($426 | 0, $429 | 0, $318 | 0, $321 | 0) | 0;
       $431 = getTempRet0() | 0;
       $432 = $add$ptr274;
       $433 = $432;
       HEAP32[$433 >> 2] = $430;
       $434 = $432 + 4 | 0;
       $435 = $434;
       HEAP32[$435 >> 2] = $431;
       $arrayidx345 = $add$ptr292 + 8 | 0;
       $436 = $arrayidx345;
       $437 = $436;
       $438 = HEAP32[$437 >> 2] | 0;
       $439 = $436 + 4 | 0;
       $440 = $439;
       $441 = HEAP32[$440 >> 2] | 0;
       $442 = _i64Add($438 | 0, $441 | 0, $324 | 0, $327 | 0) | 0;
       $443 = getTempRet0() | 0;
       $444 = $arrayidx340;
       $445 = $444;
       HEAP32[$445 >> 2] = $442;
       $446 = $444 + 4 | 0;
       $447 = $446;
       HEAP32[$447 >> 2] = $443;
       $448 = _i64Add($360 | 0, $363 | 0, $336 | 0, $339 | 0) | 0;
       $449 = getTempRet0() | 0;
       $450 = $add$ptr278;
       $451 = $450;
       HEAP32[$451 >> 2] = $448;
       $452 = $450 + 4 | 0;
       $453 = $452;
       HEAP32[$453 >> 2] = $449;
       $454 = _i64Add($420 | 0, $423 | 0, $342 | 0, $345 | 0) | 0;
       $455 = getTempRet0() | 0;
       $456 = $arrayidx307;
       $457 = $456;
       HEAP32[$457 >> 2] = $454;
       $458 = $456 + 4 | 0;
       $459 = $458;
       HEAP32[$459 >> 2] = $455;
       $460 = _i64Add($348 | 0, $351 | 0, $101 | 0, $102 | 0) | 0;
       $461 = getTempRet0() | 0;
       $462 = $add$ptr292;
       $463 = $462;
       HEAP32[$463 >> 2] = $460;
       $464 = $462 + 4 | 0;
       $465 = $464;
       HEAP32[$465 >> 2] = $461;
       $466 = _i64Add($354 | 0, $357 | 0, $330 | 0, $333 | 0) | 0;
       $467 = getTempRet0() | 0;
       $468 = $arrayidx345;
       $469 = $468;
       HEAP32[$469 >> 2] = $466;
       $470 = $468 + 4 | 0;
       $471 = $470;
       HEAP32[$471 >> 2] = $467;
       $490 = $275;
       $491 = $279;
       $492 = $314;
       $493 = $315;
       break;
      }
     } else {
      _mul($c1, $c, $d);
      $490 = $262;
      $491 = $253;
      $492 = $254;
      $493 = $489;
     }
    } while (0);
    _sum_half_blocks($a, $d);
    _swap_blocks($a, $c);
    _xor_blocks($a, $c);
    if ($cmp) {
     _xor64($add$ptr379, $tweak1_2);
     _copy_block_419($arrayidx208, $c);
    } else {
     _copy_block_419($arrayidx208, $c);
     if ($cmp384) {
      _copy_block_419($b1$sroa$0$0$add$ptr119$sroa_idx, $b);
     }
    }
    _copy_block_419($b, $c1);
    $inc394 = $i$1147 + 1 | 0;
    $exitcond151 = ($inc394 | 0) == ($div1 | 0);
    if ($exitcond151) {
     break L14;
    }
    $472 = $a;
    $473 = $472;
    $474 = HEAP32[$473 >> 2] | 0;
    $475 = $472 + 4 | 0;
    $476 = $475;
    $477 = HEAP32[$476 >> 2] | 0;
    $101 = $474;
    $102 = $477;
    $253 = $491;
    $254 = $492;
    $262 = $490;
    $489 = $493;
    $i$1147 = $inc394;
   }
  }
 } while (0);
 dest = $text;
 src = $init;
 stop = dest + 128 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $478 = HEAP32[$aes_ctx >> 2] | 0;
 _oaes_key_import_data($478, $arrayidx68);
 $479 = HEAP32[$478 >> 2] | 0;
 $exp_data405 = $479 + 12 | 0;
 $480 = HEAP32[$exp_data405 >> 2] | 0;
 $exp_data_len407 = $479 + 8 | 0;
 $481 = HEAP32[$exp_data_len407 >> 2] | 0;
 _memcpy($expandedKey | 0, $480 | 0, $481 | 0) | 0;
 if ($cmp51149) {
  _oaes_free($aes_ctx);
  dest = $init;
  src = $text;
  stop = dest + 128 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  _hash_permutation($state);
  $482 = HEAP8[$state >> 0] | 0;
  $483 = $482 & 3;
  $and442 = $483 & 255;
  $arrayidx443 = 32864 + ($and442 << 2) | 0;
  $484 = HEAP32[$arrayidx443 >> 2] | 0;
  FUNCTION_TABLE_viii[$484 & 255]($state, 200, $hash);
  _oaes_free($aes_ctx);
  _free($call);
  STACKTOP = sp;
  return;
 }
 $arrayidx417$1 = $text + 16 | 0;
 $arrayidx417$2 = $text + 32 | 0;
 $arrayidx417$3 = $text + 48 | 0;
 $arrayidx417$4 = $text + 64 | 0;
 $arrayidx417$5 = $text + 80 | 0;
 $arrayidx417$6 = $text + 96 | 0;
 $arrayidx417$7 = $text + 112 | 0;
 $i$2143 = 0;
 while (1) {
  $mul418 = $i$2143 << 7;
  $arrayidx421 = $call + $mul418 | 0;
  _xor_blocks($text, $arrayidx421);
  _aesb_pseudo_round($text, $text, $expandedKey);
  $add420$1 = $mul418 | 16;
  $arrayidx421$1 = $call + $add420$1 | 0;
  _xor_blocks($arrayidx417$1, $arrayidx421$1);
  _aesb_pseudo_round($arrayidx417$1, $arrayidx417$1, $expandedKey);
  $add420$2 = $mul418 | 32;
  $arrayidx421$2 = $call + $add420$2 | 0;
  _xor_blocks($arrayidx417$2, $arrayidx421$2);
  _aesb_pseudo_round($arrayidx417$2, $arrayidx417$2, $expandedKey);
  $add420$3 = $mul418 | 48;
  $arrayidx421$3 = $call + $add420$3 | 0;
  _xor_blocks($arrayidx417$3, $arrayidx421$3);
  _aesb_pseudo_round($arrayidx417$3, $arrayidx417$3, $expandedKey);
  $add420$4 = $mul418 | 64;
  $arrayidx421$4 = $call + $add420$4 | 0;
  _xor_blocks($arrayidx417$4, $arrayidx421$4);
  _aesb_pseudo_round($arrayidx417$4, $arrayidx417$4, $expandedKey);
  $add420$5 = $mul418 | 80;
  $arrayidx421$5 = $call + $add420$5 | 0;
  _xor_blocks($arrayidx417$5, $arrayidx421$5);
  _aesb_pseudo_round($arrayidx417$5, $arrayidx417$5, $expandedKey);
  $add420$6 = $mul418 | 96;
  $arrayidx421$6 = $call + $add420$6 | 0;
  _xor_blocks($arrayidx417$6, $arrayidx421$6);
  _aesb_pseudo_round($arrayidx417$6, $arrayidx417$6, $expandedKey);
  $add420$7 = $mul418 | 112;
  $arrayidx421$7 = $call + $add420$7 | 0;
  _xor_blocks($arrayidx417$7, $arrayidx421$7);
  _aesb_pseudo_round($arrayidx417$7, $arrayidx417$7, $expandedKey);
  $inc431 = $i$2143 + 1 | 0;
  $exitcond = ($inc431 | 0) == ($div | 0);
  if ($exitcond) {
   break;
  } else {
   $i$2143 = $inc431;
  }
 }
 _oaes_free($aes_ctx);
 dest = $init;
 src = $text;
 stop = dest + 128 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _hash_permutation($state);
 $482 = HEAP8[$state >> 0] | 0;
 $483 = $482 & 3;
 $and442 = $483 & 255;
 $arrayidx443 = 32864 + ($and442 << 2) | 0;
 $484 = HEAP32[$arrayidx443 >> 2] | 0;
 FUNCTION_TABLE_viii[$484 & 255]($state, 200, $hash);
 _oaes_free($aes_ctx);
 _free($call);
 STACKTOP = sp;
 return;
}

function _sc_add($s, $a, $b) {
 $s = $s | 0;
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$idx = 0, $a$idx$val = 0, $a$idx281 = 0, $a$idx281$val = 0, $a$val = 0, $add$ptr11 = 0, $add$ptr15 = 0, $add$ptr15$idx = 0, $add$ptr15$idx$val = 0, $add$ptr15$idx279 = 0, $add$ptr15$idx279$val = 0, $add$ptr15$val = 0;
 var $add$ptr23 = 0, $add$ptr23$idx = 0, $add$ptr23$idx$val = 0, $add$ptr23$idx278 = 0, $add$ptr23$idx278$val = 0, $add$ptr23$val = 0, $add$ptr27 = 0, $add$ptr27$idx = 0, $add$ptr27$idx$val = 0, $add$ptr27$idx277 = 0, $add$ptr27$idx277$val = 0, $add$ptr27$val = 0, $add$ptr3 = 0, $add$ptr3$idx = 0, $add$ptr3$idx$val = 0, $add$ptr3$idx280 = 0, $add$ptr3$idx280$val = 0, $add$ptr3$val = 0, $add$ptr34 = 0, $add$ptr34$idx = 0;
 var $add$ptr34$idx$val = 0, $add$ptr34$idx276 = 0, $add$ptr34$idx276$val = 0, $add$ptr34$val = 0, $add$ptr47 = 0, $add$ptr47$idx = 0, $add$ptr47$idx$val = 0, $add$ptr47$idx274 = 0, $add$ptr47$idx274$val = 0, $add$ptr47$val = 0, $add$ptr55 = 0, $add$ptr59 = 0, $add$ptr59$idx = 0, $add$ptr59$idx$val = 0, $add$ptr59$idx273 = 0, $add$ptr59$idx273$val = 0, $add$ptr59$val = 0, $add$ptr67 = 0, $add$ptr67$idx = 0, $add$ptr67$idx$val = 0;
 var $add$ptr67$idx272 = 0, $add$ptr67$idx272$val = 0, $add$ptr67$val = 0, $add$ptr71 = 0, $add$ptr71$idx = 0, $add$ptr71$idx$val = 0, $add$ptr71$idx271 = 0, $add$ptr71$idx271$val = 0, $add$ptr71$val = 0, $add$ptr78 = 0, $add$ptr78$idx = 0, $add$ptr78$idx$val = 0, $add$ptr78$idx270 = 0, $add$ptr78$idx270$val = 0, $add$ptr78$val = 0, $arrayidx272 = 0, $arrayidx276 = 0, $arrayidx279 = 0, $arrayidx282 = 0, $arrayidx287 = 0;
 var $arrayidx290 = 0, $arrayidx295 = 0, $arrayidx298 = 0, $arrayidx301 = 0, $arrayidx306 = 0, $arrayidx309 = 0, $arrayidx312 = 0, $arrayidx317 = 0, $arrayidx320 = 0, $arrayidx325 = 0, $arrayidx328 = 0, $arrayidx331 = 0, $arrayidx336 = 0, $arrayidx339 = 0, $arrayidx342 = 0, $arrayidx345 = 0, $arrayidx348 = 0, $arrayidx353 = 0, $arrayidx356 = 0, $arrayidx359 = 0;
 var $arrayidx364 = 0, $arrayidx367 = 0, $arrayidx372 = 0, $arrayidx375 = 0, $arrayidx378 = 0, $arrayidx381 = 0, $b$idx = 0, $b$idx$val = 0, $b$idx275 = 0, $b$idx275$val = 0, $b$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $a$val = HEAP8[$a >> 0] | 0;
 $a$idx = $a + 1 | 0;
 $a$idx$val = HEAP8[$a$idx >> 0] | 0;
 $a$idx281 = $a + 2 | 0;
 $a$idx281$val = HEAP8[$a$idx281 >> 0] | 0;
 $0 = _load_3($a$val, $a$idx$val, $a$idx281$val) | 0;
 $1 = getTempRet0() | 0;
 $2 = $0 & 2097151;
 $3 = _load_4($a$idx281) | 0;
 $4 = getTempRet0() | 0;
 $5 = _bitshift64Lshr($3 | 0, $4 | 0, 5) | 0;
 $6 = getTempRet0() | 0;
 $7 = $5 & 2097151;
 $add$ptr3 = $a + 5 | 0;
 $add$ptr3$val = HEAP8[$add$ptr3 >> 0] | 0;
 $add$ptr3$idx = $a + 6 | 0;
 $add$ptr3$idx$val = HEAP8[$add$ptr3$idx >> 0] | 0;
 $add$ptr3$idx280 = $a + 7 | 0;
 $add$ptr3$idx280$val = HEAP8[$add$ptr3$idx280 >> 0] | 0;
 $8 = _load_3($add$ptr3$val, $add$ptr3$idx$val, $add$ptr3$idx280$val) | 0;
 $9 = getTempRet0() | 0;
 $10 = _bitshift64Lshr($8 | 0, $9 | 0, 2) | 0;
 $11 = getTempRet0() | 0;
 $12 = $10 & 2097151;
 $13 = _load_4($add$ptr3$idx280) | 0;
 $14 = getTempRet0() | 0;
 $15 = _bitshift64Lshr($13 | 0, $14 | 0, 7) | 0;
 $16 = getTempRet0() | 0;
 $17 = $15 & 2097151;
 $add$ptr11 = $a + 10 | 0;
 $18 = _load_4($add$ptr11) | 0;
 $19 = getTempRet0() | 0;
 $20 = _bitshift64Lshr($18 | 0, $19 | 0, 4) | 0;
 $21 = getTempRet0() | 0;
 $22 = $20 & 2097151;
 $add$ptr15 = $a + 13 | 0;
 $add$ptr15$val = HEAP8[$add$ptr15 >> 0] | 0;
 $add$ptr15$idx = $a + 14 | 0;
 $add$ptr15$idx$val = HEAP8[$add$ptr15$idx >> 0] | 0;
 $add$ptr15$idx279 = $a + 15 | 0;
 $add$ptr15$idx279$val = HEAP8[$add$ptr15$idx279 >> 0] | 0;
 $23 = _load_3($add$ptr15$val, $add$ptr15$idx$val, $add$ptr15$idx279$val) | 0;
 $24 = getTempRet0() | 0;
 $25 = _bitshift64Lshr($23 | 0, $24 | 0, 1) | 0;
 $26 = getTempRet0() | 0;
 $27 = $25 & 2097151;
 $28 = _load_4($add$ptr15$idx279) | 0;
 $29 = getTempRet0() | 0;
 $30 = _bitshift64Lshr($28 | 0, $29 | 0, 6) | 0;
 $31 = getTempRet0() | 0;
 $32 = $30 & 2097151;
 $add$ptr23 = $a + 18 | 0;
 $add$ptr23$val = HEAP8[$add$ptr23 >> 0] | 0;
 $add$ptr23$idx = $a + 19 | 0;
 $add$ptr23$idx$val = HEAP8[$add$ptr23$idx >> 0] | 0;
 $add$ptr23$idx278 = $a + 20 | 0;
 $add$ptr23$idx278$val = HEAP8[$add$ptr23$idx278 >> 0] | 0;
 $33 = _load_3($add$ptr23$val, $add$ptr23$idx$val, $add$ptr23$idx278$val) | 0;
 $34 = getTempRet0() | 0;
 $35 = _bitshift64Lshr($33 | 0, $34 | 0, 3) | 0;
 $36 = getTempRet0() | 0;
 $37 = $35 & 2097151;
 $add$ptr27 = $a + 21 | 0;
 $add$ptr27$val = HEAP8[$add$ptr27 >> 0] | 0;
 $add$ptr27$idx = $a + 22 | 0;
 $add$ptr27$idx$val = HEAP8[$add$ptr27$idx >> 0] | 0;
 $add$ptr27$idx277 = $a + 23 | 0;
 $add$ptr27$idx277$val = HEAP8[$add$ptr27$idx277 >> 0] | 0;
 $38 = _load_3($add$ptr27$val, $add$ptr27$idx$val, $add$ptr27$idx277$val) | 0;
 $39 = getTempRet0() | 0;
 $40 = $38 & 2097151;
 $41 = _load_4($add$ptr27$idx277) | 0;
 $42 = getTempRet0() | 0;
 $43 = _bitshift64Lshr($41 | 0, $42 | 0, 5) | 0;
 $44 = getTempRet0() | 0;
 $45 = $43 & 2097151;
 $add$ptr34 = $a + 26 | 0;
 $add$ptr34$val = HEAP8[$add$ptr34 >> 0] | 0;
 $add$ptr34$idx = $a + 27 | 0;
 $add$ptr34$idx$val = HEAP8[$add$ptr34$idx >> 0] | 0;
 $add$ptr34$idx276 = $a + 28 | 0;
 $add$ptr34$idx276$val = HEAP8[$add$ptr34$idx276 >> 0] | 0;
 $46 = _load_3($add$ptr34$val, $add$ptr34$idx$val, $add$ptr34$idx276$val) | 0;
 $47 = getTempRet0() | 0;
 $48 = _bitshift64Lshr($46 | 0, $47 | 0, 2) | 0;
 $49 = getTempRet0() | 0;
 $50 = $48 & 2097151;
 $51 = _load_4($add$ptr34$idx276) | 0;
 $52 = getTempRet0() | 0;
 $53 = _bitshift64Lshr($51 | 0, $52 | 0, 7) | 0;
 $54 = getTempRet0() | 0;
 $b$val = HEAP8[$b >> 0] | 0;
 $b$idx = $b + 1 | 0;
 $b$idx$val = HEAP8[$b$idx >> 0] | 0;
 $b$idx275 = $b + 2 | 0;
 $b$idx275$val = HEAP8[$b$idx275 >> 0] | 0;
 $55 = _load_3($b$val, $b$idx$val, $b$idx275$val) | 0;
 $56 = getTempRet0() | 0;
 $57 = $55 & 2097151;
 $58 = _load_4($b$idx275) | 0;
 $59 = getTempRet0() | 0;
 $60 = _bitshift64Lshr($58 | 0, $59 | 0, 5) | 0;
 $61 = getTempRet0() | 0;
 $62 = $60 & 2097151;
 $add$ptr47 = $b + 5 | 0;
 $add$ptr47$val = HEAP8[$add$ptr47 >> 0] | 0;
 $add$ptr47$idx = $b + 6 | 0;
 $add$ptr47$idx$val = HEAP8[$add$ptr47$idx >> 0] | 0;
 $add$ptr47$idx274 = $b + 7 | 0;
 $add$ptr47$idx274$val = HEAP8[$add$ptr47$idx274 >> 0] | 0;
 $63 = _load_3($add$ptr47$val, $add$ptr47$idx$val, $add$ptr47$idx274$val) | 0;
 $64 = getTempRet0() | 0;
 $65 = _bitshift64Lshr($63 | 0, $64 | 0, 2) | 0;
 $66 = getTempRet0() | 0;
 $67 = $65 & 2097151;
 $68 = _load_4($add$ptr47$idx274) | 0;
 $69 = getTempRet0() | 0;
 $70 = _bitshift64Lshr($68 | 0, $69 | 0, 7) | 0;
 $71 = getTempRet0() | 0;
 $72 = $70 & 2097151;
 $add$ptr55 = $b + 10 | 0;
 $73 = _load_4($add$ptr55) | 0;
 $74 = getTempRet0() | 0;
 $75 = _bitshift64Lshr($73 | 0, $74 | 0, 4) | 0;
 $76 = getTempRet0() | 0;
 $77 = $75 & 2097151;
 $add$ptr59 = $b + 13 | 0;
 $add$ptr59$val = HEAP8[$add$ptr59 >> 0] | 0;
 $add$ptr59$idx = $b + 14 | 0;
 $add$ptr59$idx$val = HEAP8[$add$ptr59$idx >> 0] | 0;
 $add$ptr59$idx273 = $b + 15 | 0;
 $add$ptr59$idx273$val = HEAP8[$add$ptr59$idx273 >> 0] | 0;
 $78 = _load_3($add$ptr59$val, $add$ptr59$idx$val, $add$ptr59$idx273$val) | 0;
 $79 = getTempRet0() | 0;
 $80 = _bitshift64Lshr($78 | 0, $79 | 0, 1) | 0;
 $81 = getTempRet0() | 0;
 $82 = $80 & 2097151;
 $83 = _load_4($add$ptr59$idx273) | 0;
 $84 = getTempRet0() | 0;
 $85 = _bitshift64Lshr($83 | 0, $84 | 0, 6) | 0;
 $86 = getTempRet0() | 0;
 $87 = $85 & 2097151;
 $add$ptr67 = $b + 18 | 0;
 $add$ptr67$val = HEAP8[$add$ptr67 >> 0] | 0;
 $add$ptr67$idx = $b + 19 | 0;
 $add$ptr67$idx$val = HEAP8[$add$ptr67$idx >> 0] | 0;
 $add$ptr67$idx272 = $b + 20 | 0;
 $add$ptr67$idx272$val = HEAP8[$add$ptr67$idx272 >> 0] | 0;
 $88 = _load_3($add$ptr67$val, $add$ptr67$idx$val, $add$ptr67$idx272$val) | 0;
 $89 = getTempRet0() | 0;
 $90 = _bitshift64Lshr($88 | 0, $89 | 0, 3) | 0;
 $91 = getTempRet0() | 0;
 $92 = $90 & 2097151;
 $add$ptr71 = $b + 21 | 0;
 $add$ptr71$val = HEAP8[$add$ptr71 >> 0] | 0;
 $add$ptr71$idx = $b + 22 | 0;
 $add$ptr71$idx$val = HEAP8[$add$ptr71$idx >> 0] | 0;
 $add$ptr71$idx271 = $b + 23 | 0;
 $add$ptr71$idx271$val = HEAP8[$add$ptr71$idx271 >> 0] | 0;
 $93 = _load_3($add$ptr71$val, $add$ptr71$idx$val, $add$ptr71$idx271$val) | 0;
 $94 = getTempRet0() | 0;
 $95 = $93 & 2097151;
 $96 = _load_4($add$ptr71$idx271) | 0;
 $97 = getTempRet0() | 0;
 $98 = _bitshift64Lshr($96 | 0, $97 | 0, 5) | 0;
 $99 = getTempRet0() | 0;
 $100 = $98 & 2097151;
 $add$ptr78 = $b + 26 | 0;
 $add$ptr78$val = HEAP8[$add$ptr78 >> 0] | 0;
 $add$ptr78$idx = $b + 27 | 0;
 $add$ptr78$idx$val = HEAP8[$add$ptr78$idx >> 0] | 0;
 $add$ptr78$idx270 = $b + 28 | 0;
 $add$ptr78$idx270$val = HEAP8[$add$ptr78$idx270 >> 0] | 0;
 $101 = _load_3($add$ptr78$val, $add$ptr78$idx$val, $add$ptr78$idx270$val) | 0;
 $102 = getTempRet0() | 0;
 $103 = _bitshift64Lshr($101 | 0, $102 | 0, 2) | 0;
 $104 = getTempRet0() | 0;
 $105 = $103 & 2097151;
 $106 = _load_4($add$ptr78$idx270) | 0;
 $107 = getTempRet0() | 0;
 $108 = _bitshift64Lshr($106 | 0, $107 | 0, 7) | 0;
 $109 = getTempRet0() | 0;
 $110 = _i64Add($57 | 0, 0, $2 | 0, 0) | 0;
 $111 = getTempRet0() | 0;
 $112 = _i64Add($62 | 0, 0, $7 | 0, 0) | 0;
 $113 = getTempRet0() | 0;
 $114 = _i64Add($67 | 0, 0, $12 | 0, 0) | 0;
 $115 = getTempRet0() | 0;
 $116 = _i64Add($72 | 0, 0, $17 | 0, 0) | 0;
 $117 = getTempRet0() | 0;
 $118 = _i64Add($77 | 0, 0, $22 | 0, 0) | 0;
 $119 = getTempRet0() | 0;
 $120 = _i64Add($87 | 0, 0, $32 | 0, 0) | 0;
 $121 = getTempRet0() | 0;
 $122 = _i64Add($95 | 0, 0, $40 | 0, 0) | 0;
 $123 = getTempRet0() | 0;
 $124 = _i64Add($100 | 0, 0, $45 | 0, 0) | 0;
 $125 = getTempRet0() | 0;
 $126 = _i64Add($105 | 0, 0, $50 | 0, 0) | 0;
 $127 = getTempRet0() | 0;
 $128 = _i64Add($108 | 0, $109 | 0, $53 | 0, $54 | 0) | 0;
 $129 = getTempRet0() | 0;
 $130 = _i64Add($110 | 0, $111 | 0, 1048576, 0) | 0;
 $131 = getTempRet0() | 0;
 $132 = _bitshift64Lshr($130 | 0, $131 | 0, 21) | 0;
 $133 = getTempRet0() | 0;
 $134 = _i64Add($112 | 0, $113 | 0, $132 | 0, $133 | 0) | 0;
 $135 = getTempRet0() | 0;
 $136 = $130 & 6291456;
 $137 = _i64Subtract($110 | 0, $111 | 0, $136 | 0, 0) | 0;
 $138 = getTempRet0() | 0;
 $139 = _i64Add($114 | 0, $115 | 0, 1048576, 0) | 0;
 $140 = getTempRet0() | 0;
 $141 = _bitshift64Lshr($139 | 0, $140 | 0, 21) | 0;
 $142 = getTempRet0() | 0;
 $143 = _i64Add($116 | 0, $117 | 0, $141 | 0, $142 | 0) | 0;
 $144 = getTempRet0() | 0;
 $145 = $139 & 6291456;
 $146 = _i64Add($118 | 0, $119 | 0, 1048576, 0) | 0;
 $147 = getTempRet0() | 0;
 $148 = _bitshift64Lshr($146 | 0, $147 | 0, 21) | 0;
 $149 = getTempRet0() | 0;
 $150 = _i64Add($148 | 0, $149 | 0, $27 | 0, 0) | 0;
 $151 = getTempRet0() | 0;
 $152 = _i64Add($150 | 0, $151 | 0, $82 | 0, 0) | 0;
 $153 = getTempRet0() | 0;
 $154 = $146 & 6291456;
 $155 = _i64Subtract($118 | 0, $119 | 0, $154 | 0, 0) | 0;
 $156 = getTempRet0() | 0;
 $157 = _i64Add($120 | 0, $121 | 0, 1048576, 0) | 0;
 $158 = getTempRet0() | 0;
 $159 = _bitshift64Lshr($157 | 0, $158 | 0, 21) | 0;
 $160 = getTempRet0() | 0;
 $161 = _i64Add($159 | 0, $160 | 0, $37 | 0, 0) | 0;
 $162 = getTempRet0() | 0;
 $163 = _i64Add($161 | 0, $162 | 0, $92 | 0, 0) | 0;
 $164 = getTempRet0() | 0;
 $165 = $157 & 6291456;
 $166 = _i64Subtract($120 | 0, $121 | 0, $165 | 0, 0) | 0;
 $167 = getTempRet0() | 0;
 $168 = _i64Add($122 | 0, $123 | 0, 1048576, 0) | 0;
 $169 = getTempRet0() | 0;
 $170 = _bitshift64Lshr($168 | 0, $169 | 0, 21) | 0;
 $171 = getTempRet0() | 0;
 $172 = _i64Add($124 | 0, $125 | 0, $170 | 0, $171 | 0) | 0;
 $173 = getTempRet0() | 0;
 $174 = $168 & 6291456;
 $175 = _i64Add($126 | 0, $127 | 0, 1048576, 0) | 0;
 $176 = getTempRet0() | 0;
 $177 = _bitshift64Lshr($175 | 0, $176 | 0, 21) | 0;
 $178 = getTempRet0() | 0;
 $179 = _i64Add($128 | 0, $129 | 0, $177 | 0, $178 | 0) | 0;
 $180 = getTempRet0() | 0;
 $181 = $175 & 6291456;
 $182 = _i64Add($134 | 0, $135 | 0, 1048576, 0) | 0;
 $183 = getTempRet0() | 0;
 $184 = _bitshift64Lshr($182 | 0, $183 | 0, 21) | 0;
 $185 = getTempRet0() | 0;
 $186 = $182 & -2097152;
 $187 = $183 & 8191;
 $188 = _i64Subtract($134 | 0, $135 | 0, $186 | 0, $187 | 0) | 0;
 $189 = getTempRet0() | 0;
 $190 = _i64Add($143 | 0, $144 | 0, 1048576, 0) | 0;
 $191 = getTempRet0() | 0;
 $192 = _bitshift64Lshr($190 | 0, $191 | 0, 21) | 0;
 $193 = getTempRet0() | 0;
 $194 = _i64Add($155 | 0, $156 | 0, $192 | 0, $193 | 0) | 0;
 $195 = getTempRet0() | 0;
 $196 = $190 & -2097152;
 $197 = $191 & 8191;
 $198 = _i64Subtract($143 | 0, $144 | 0, $196 | 0, $197 | 0) | 0;
 $199 = getTempRet0() | 0;
 $200 = _i64Add($152 | 0, $153 | 0, 1048576, 0) | 0;
 $201 = getTempRet0() | 0;
 $202 = _bitshift64Lshr($200 | 0, $201 | 0, 21) | 0;
 $203 = getTempRet0() | 0;
 $204 = _i64Add($166 | 0, $167 | 0, $202 | 0, $203 | 0) | 0;
 $205 = getTempRet0() | 0;
 $206 = $200 & -2097152;
 $207 = $201 & 8191;
 $208 = _i64Subtract($152 | 0, $153 | 0, $206 | 0, $207 | 0) | 0;
 $209 = getTempRet0() | 0;
 $210 = _i64Add($163 | 0, $164 | 0, 1048576, 0) | 0;
 $211 = getTempRet0() | 0;
 $212 = _bitshift64Lshr($210 | 0, $211 | 0, 21) | 0;
 $213 = getTempRet0() | 0;
 $214 = $210 & -2097152;
 $215 = $211 & 8191;
 $216 = _i64Subtract($163 | 0, $164 | 0, $214 | 0, $215 | 0) | 0;
 $217 = getTempRet0() | 0;
 $218 = _i64Add($172 | 0, $173 | 0, 1048576, 0) | 0;
 $219 = getTempRet0() | 0;
 $220 = _bitshift64Lshr($218 | 0, $219 | 0, 21) | 0;
 $221 = getTempRet0() | 0;
 $222 = $218 & -2097152;
 $223 = $219 & 8191;
 $224 = _i64Subtract($172 | 0, $173 | 0, $222 | 0, $223 | 0) | 0;
 $225 = getTempRet0() | 0;
 $226 = _i64Add($179 | 0, $180 | 0, 1048576, 0) | 0;
 $227 = getTempRet0() | 0;
 $228 = _bitshift64Lshr($226 | 0, $227 | 0, 21) | 0;
 $229 = getTempRet0() | 0;
 $230 = $226 & -2097152;
 $231 = $227 & 268435455;
 $232 = _i64Subtract($179 | 0, $180 | 0, $230 | 0, $231 | 0) | 0;
 $233 = getTempRet0() | 0;
 $234 = ___muldi3($228 | 0, $229 | 0, 666643, 0) | 0;
 $235 = getTempRet0() | 0;
 $236 = _i64Add($234 | 0, $235 | 0, $137 | 0, $138 | 0) | 0;
 $237 = getTempRet0() | 0;
 $238 = ___muldi3($228 | 0, $229 | 0, 470296, 0) | 0;
 $239 = getTempRet0() | 0;
 $240 = _i64Add($188 | 0, $189 | 0, $238 | 0, $239 | 0) | 0;
 $241 = getTempRet0() | 0;
 $242 = ___muldi3($228 | 0, $229 | 0, 654183, 0) | 0;
 $243 = getTempRet0() | 0;
 $244 = ___muldi3($228 | 0, $229 | 0, -997805, -1) | 0;
 $245 = getTempRet0() | 0;
 $246 = _i64Add($198 | 0, $199 | 0, $244 | 0, $245 | 0) | 0;
 $247 = getTempRet0() | 0;
 $248 = ___muldi3($228 | 0, $229 | 0, 136657, 0) | 0;
 $249 = getTempRet0() | 0;
 $250 = _i64Add($194 | 0, $195 | 0, $248 | 0, $249 | 0) | 0;
 $251 = getTempRet0() | 0;
 $252 = ___muldi3($228 | 0, $229 | 0, -683901, -1) | 0;
 $253 = getTempRet0() | 0;
 $254 = _i64Add($208 | 0, $209 | 0, $252 | 0, $253 | 0) | 0;
 $255 = getTempRet0() | 0;
 $256 = _bitshift64Ashr($236 | 0, $237 | 0, 21) | 0;
 $257 = getTempRet0() | 0;
 $258 = _i64Add($240 | 0, $241 | 0, $256 | 0, $257 | 0) | 0;
 $259 = getTempRet0() | 0;
 $260 = $236 & 2097151;
 $261 = _bitshift64Ashr($258 | 0, $259 | 0, 21) | 0;
 $262 = getTempRet0() | 0;
 $263 = _i64Add($114 | 0, $115 | 0, $184 | 0, $185 | 0) | 0;
 $264 = getTempRet0() | 0;
 $265 = _i64Subtract($263 | 0, $264 | 0, $145 | 0, 0) | 0;
 $266 = getTempRet0() | 0;
 $267 = _i64Add($265 | 0, $266 | 0, $242 | 0, $243 | 0) | 0;
 $268 = getTempRet0() | 0;
 $269 = _i64Add($267 | 0, $268 | 0, $261 | 0, $262 | 0) | 0;
 $270 = getTempRet0() | 0;
 $271 = $258 & 2097151;
 $272 = _bitshift64Ashr($269 | 0, $270 | 0, 21) | 0;
 $273 = getTempRet0() | 0;
 $274 = _i64Add($246 | 0, $247 | 0, $272 | 0, $273 | 0) | 0;
 $275 = getTempRet0() | 0;
 $276 = $269 & 2097151;
 $277 = _bitshift64Ashr($274 | 0, $275 | 0, 21) | 0;
 $278 = getTempRet0() | 0;
 $279 = _i64Add($250 | 0, $251 | 0, $277 | 0, $278 | 0) | 0;
 $280 = getTempRet0() | 0;
 $281 = $274 & 2097151;
 $282 = _bitshift64Ashr($279 | 0, $280 | 0, 21) | 0;
 $283 = getTempRet0() | 0;
 $284 = _i64Add($254 | 0, $255 | 0, $282 | 0, $283 | 0) | 0;
 $285 = getTempRet0() | 0;
 $286 = $279 & 2097151;
 $287 = _bitshift64Ashr($284 | 0, $285 | 0, 21) | 0;
 $288 = getTempRet0() | 0;
 $289 = _i64Add($204 | 0, $205 | 0, $287 | 0, $288 | 0) | 0;
 $290 = getTempRet0() | 0;
 $291 = $284 & 2097151;
 $292 = _bitshift64Ashr($289 | 0, $290 | 0, 21) | 0;
 $293 = getTempRet0() | 0;
 $294 = _i64Add($292 | 0, $293 | 0, $216 | 0, $217 | 0) | 0;
 $295 = getTempRet0() | 0;
 $296 = $289 & 2097151;
 $297 = _bitshift64Ashr($294 | 0, $295 | 0, 21) | 0;
 $298 = getTempRet0() | 0;
 $299 = _i64Add($212 | 0, $213 | 0, $122 | 0, $123 | 0) | 0;
 $300 = getTempRet0() | 0;
 $301 = _i64Subtract($299 | 0, $300 | 0, $174 | 0, 0) | 0;
 $302 = getTempRet0() | 0;
 $303 = _i64Add($301 | 0, $302 | 0, $297 | 0, $298 | 0) | 0;
 $304 = getTempRet0() | 0;
 $305 = $294 & 2097151;
 $306 = _bitshift64Ashr($303 | 0, $304 | 0, 21) | 0;
 $307 = getTempRet0() | 0;
 $308 = _i64Add($306 | 0, $307 | 0, $224 | 0, $225 | 0) | 0;
 $309 = getTempRet0() | 0;
 $310 = $303 & 2097151;
 $311 = _bitshift64Ashr($308 | 0, $309 | 0, 21) | 0;
 $312 = getTempRet0() | 0;
 $313 = _i64Add($126 | 0, $127 | 0, $220 | 0, $221 | 0) | 0;
 $314 = getTempRet0() | 0;
 $315 = _i64Subtract($313 | 0, $314 | 0, $181 | 0, 0) | 0;
 $316 = getTempRet0() | 0;
 $317 = _i64Add($315 | 0, $316 | 0, $311 | 0, $312 | 0) | 0;
 $318 = getTempRet0() | 0;
 $319 = $308 & 2097151;
 $320 = _bitshift64Ashr($317 | 0, $318 | 0, 21) | 0;
 $321 = getTempRet0() | 0;
 $322 = _i64Add($320 | 0, $321 | 0, $232 | 0, $233 | 0) | 0;
 $323 = getTempRet0() | 0;
 $324 = $317 & 2097151;
 $325 = _bitshift64Ashr($322 | 0, $323 | 0, 21) | 0;
 $326 = getTempRet0() | 0;
 $327 = $322 & 2097151;
 $328 = ___muldi3($325 | 0, $326 | 0, 666643, 0) | 0;
 $329 = getTempRet0() | 0;
 $330 = _i64Add($328 | 0, $329 | 0, $260 | 0, 0) | 0;
 $331 = getTempRet0() | 0;
 $332 = ___muldi3($325 | 0, $326 | 0, 470296, 0) | 0;
 $333 = getTempRet0() | 0;
 $334 = _i64Add($332 | 0, $333 | 0, $271 | 0, 0) | 0;
 $335 = getTempRet0() | 0;
 $336 = ___muldi3($325 | 0, $326 | 0, 654183, 0) | 0;
 $337 = getTempRet0() | 0;
 $338 = _i64Add($336 | 0, $337 | 0, $276 | 0, 0) | 0;
 $339 = getTempRet0() | 0;
 $340 = ___muldi3($325 | 0, $326 | 0, -997805, -1) | 0;
 $341 = getTempRet0() | 0;
 $342 = _i64Add($340 | 0, $341 | 0, $281 | 0, 0) | 0;
 $343 = getTempRet0() | 0;
 $344 = ___muldi3($325 | 0, $326 | 0, 136657, 0) | 0;
 $345 = getTempRet0() | 0;
 $346 = _i64Add($344 | 0, $345 | 0, $286 | 0, 0) | 0;
 $347 = getTempRet0() | 0;
 $348 = ___muldi3($325 | 0, $326 | 0, -683901, -1) | 0;
 $349 = getTempRet0() | 0;
 $350 = _i64Add($348 | 0, $349 | 0, $291 | 0, 0) | 0;
 $351 = getTempRet0() | 0;
 $352 = _bitshift64Ashr($330 | 0, $331 | 0, 21) | 0;
 $353 = getTempRet0() | 0;
 $354 = _i64Add($334 | 0, $335 | 0, $352 | 0, $353 | 0) | 0;
 $355 = getTempRet0() | 0;
 $356 = _bitshift64Ashr($354 | 0, $355 | 0, 21) | 0;
 $357 = getTempRet0() | 0;
 $358 = _i64Add($338 | 0, $339 | 0, $356 | 0, $357 | 0) | 0;
 $359 = getTempRet0() | 0;
 $360 = $354 & 2097151;
 $361 = _bitshift64Ashr($358 | 0, $359 | 0, 21) | 0;
 $362 = getTempRet0() | 0;
 $363 = _i64Add($342 | 0, $343 | 0, $361 | 0, $362 | 0) | 0;
 $364 = getTempRet0() | 0;
 $365 = $358 & 2097151;
 $366 = _bitshift64Ashr($363 | 0, $364 | 0, 21) | 0;
 $367 = getTempRet0() | 0;
 $368 = _i64Add($346 | 0, $347 | 0, $366 | 0, $367 | 0) | 0;
 $369 = getTempRet0() | 0;
 $370 = $363 & 2097151;
 $371 = _bitshift64Ashr($368 | 0, $369 | 0, 21) | 0;
 $372 = getTempRet0() | 0;
 $373 = _i64Add($350 | 0, $351 | 0, $371 | 0, $372 | 0) | 0;
 $374 = getTempRet0() | 0;
 $375 = $368 & 2097151;
 $376 = _bitshift64Ashr($373 | 0, $374 | 0, 21) | 0;
 $377 = getTempRet0() | 0;
 $378 = _i64Add($376 | 0, $377 | 0, $296 | 0, 0) | 0;
 $379 = getTempRet0() | 0;
 $380 = $373 & 2097151;
 $381 = _bitshift64Ashr($378 | 0, $379 | 0, 21) | 0;
 $382 = getTempRet0() | 0;
 $383 = _i64Add($381 | 0, $382 | 0, $305 | 0, 0) | 0;
 $384 = getTempRet0() | 0;
 $385 = $378 & 2097151;
 $386 = _bitshift64Ashr($383 | 0, $384 | 0, 21) | 0;
 $387 = getTempRet0() | 0;
 $388 = _i64Add($386 | 0, $387 | 0, $310 | 0, 0) | 0;
 $389 = getTempRet0() | 0;
 $390 = _bitshift64Ashr($388 | 0, $389 | 0, 21) | 0;
 $391 = getTempRet0() | 0;
 $392 = _i64Add($390 | 0, $391 | 0, $319 | 0, 0) | 0;
 $393 = getTempRet0() | 0;
 $394 = _bitshift64Ashr($392 | 0, $393 | 0, 21) | 0;
 $395 = getTempRet0() | 0;
 $396 = _i64Add($394 | 0, $395 | 0, $324 | 0, 0) | 0;
 $397 = getTempRet0() | 0;
 $398 = $392 & 2097151;
 $399 = _bitshift64Ashr($396 | 0, $397 | 0, 21) | 0;
 $400 = getTempRet0() | 0;
 $401 = _i64Add($399 | 0, $400 | 0, $327 | 0, 0) | 0;
 $402 = getTempRet0() | 0;
 $403 = $396 & 2097151;
 $404 = $330 & 255;
 HEAP8[$s >> 0] = $404;
 $405 = _bitshift64Lshr($330 | 0, $331 | 0, 8) | 0;
 $406 = getTempRet0() | 0;
 $407 = $405 & 255;
 $arrayidx272 = $s + 1 | 0;
 HEAP8[$arrayidx272 >> 0] = $407;
 $408 = _bitshift64Lshr($330 | 0, $331 | 0, 16) | 0;
 $409 = getTempRet0() | 0;
 $410 = $408 & 31;
 $411 = _bitshift64Shl($360 | 0, 0, 5) | 0;
 $412 = getTempRet0() | 0;
 $413 = $411 | $410;
 $414 = $413 & 255;
 $arrayidx276 = $s + 2 | 0;
 HEAP8[$arrayidx276 >> 0] = $414;
 $415 = _bitshift64Lshr($354 | 0, $355 | 0, 3) | 0;
 $416 = getTempRet0() | 0;
 $417 = $415 & 255;
 $arrayidx279 = $s + 3 | 0;
 HEAP8[$arrayidx279 >> 0] = $417;
 $418 = _bitshift64Lshr($354 | 0, $355 | 0, 11) | 0;
 $419 = getTempRet0() | 0;
 $420 = $418 & 255;
 $arrayidx282 = $s + 4 | 0;
 HEAP8[$arrayidx282 >> 0] = $420;
 $421 = _bitshift64Lshr($360 | 0, 0, 19) | 0;
 $422 = getTempRet0() | 0;
 $423 = _bitshift64Shl($365 | 0, 0, 2) | 0;
 $424 = getTempRet0() | 0;
 $425 = $423 | $421;
 $424 | $422;
 $426 = $425 & 255;
 $arrayidx287 = $s + 5 | 0;
 HEAP8[$arrayidx287 >> 0] = $426;
 $427 = _bitshift64Lshr($358 | 0, $359 | 0, 6) | 0;
 $428 = getTempRet0() | 0;
 $429 = $427 & 255;
 $arrayidx290 = $s + 6 | 0;
 HEAP8[$arrayidx290 >> 0] = $429;
 $430 = _bitshift64Lshr($365 | 0, 0, 14) | 0;
 $431 = getTempRet0() | 0;
 $432 = _bitshift64Shl($370 | 0, 0, 7) | 0;
 $433 = getTempRet0() | 0;
 $434 = $432 | $430;
 $433 | $431;
 $435 = $434 & 255;
 $arrayidx295 = $s + 7 | 0;
 HEAP8[$arrayidx295 >> 0] = $435;
 $436 = _bitshift64Lshr($363 | 0, $364 | 0, 1) | 0;
 $437 = getTempRet0() | 0;
 $438 = $436 & 255;
 $arrayidx298 = $s + 8 | 0;
 HEAP8[$arrayidx298 >> 0] = $438;
 $439 = _bitshift64Lshr($363 | 0, $364 | 0, 9) | 0;
 $440 = getTempRet0() | 0;
 $441 = $439 & 255;
 $arrayidx301 = $s + 9 | 0;
 HEAP8[$arrayidx301 >> 0] = $441;
 $442 = _bitshift64Lshr($370 | 0, 0, 17) | 0;
 $443 = getTempRet0() | 0;
 $444 = _bitshift64Shl($375 | 0, 0, 4) | 0;
 $445 = getTempRet0() | 0;
 $446 = $444 | $442;
 $445 | $443;
 $447 = $446 & 255;
 $arrayidx306 = $s + 10 | 0;
 HEAP8[$arrayidx306 >> 0] = $447;
 $448 = _bitshift64Lshr($368 | 0, $369 | 0, 4) | 0;
 $449 = getTempRet0() | 0;
 $450 = $448 & 255;
 $arrayidx309 = $s + 11 | 0;
 HEAP8[$arrayidx309 >> 0] = $450;
 $451 = _bitshift64Lshr($368 | 0, $369 | 0, 12) | 0;
 $452 = getTempRet0() | 0;
 $453 = $451 & 255;
 $arrayidx312 = $s + 12 | 0;
 HEAP8[$arrayidx312 >> 0] = $453;
 $454 = _bitshift64Lshr($375 | 0, 0, 20) | 0;
 $455 = getTempRet0() | 0;
 $456 = _bitshift64Shl($380 | 0, 0, 1) | 0;
 $457 = getTempRet0() | 0;
 $458 = $456 | $454;
 $457 | $455;
 $459 = $458 & 255;
 $arrayidx317 = $s + 13 | 0;
 HEAP8[$arrayidx317 >> 0] = $459;
 $460 = _bitshift64Lshr($373 | 0, $374 | 0, 7) | 0;
 $461 = getTempRet0() | 0;
 $462 = $460 & 255;
 $arrayidx320 = $s + 14 | 0;
 HEAP8[$arrayidx320 >> 0] = $462;
 $463 = _bitshift64Lshr($380 | 0, 0, 15) | 0;
 $464 = getTempRet0() | 0;
 $465 = _bitshift64Shl($385 | 0, 0, 6) | 0;
 $466 = getTempRet0() | 0;
 $467 = $465 | $463;
 $466 | $464;
 $468 = $467 & 255;
 $arrayidx325 = $s + 15 | 0;
 HEAP8[$arrayidx325 >> 0] = $468;
 $469 = _bitshift64Lshr($378 | 0, $379 | 0, 2) | 0;
 $470 = getTempRet0() | 0;
 $471 = $469 & 255;
 $arrayidx328 = $s + 16 | 0;
 HEAP8[$arrayidx328 >> 0] = $471;
 $472 = _bitshift64Lshr($378 | 0, $379 | 0, 10) | 0;
 $473 = getTempRet0() | 0;
 $474 = $472 & 255;
 $arrayidx331 = $s + 17 | 0;
 HEAP8[$arrayidx331 >> 0] = $474;
 $475 = _bitshift64Lshr($385 | 0, 0, 18) | 0;
 $476 = getTempRet0() | 0;
 $477 = _bitshift64Shl($383 | 0, $384 | 0, 3) | 0;
 $478 = getTempRet0() | 0;
 $479 = $477 | $475;
 $478 | $476;
 $480 = $479 & 255;
 $arrayidx336 = $s + 18 | 0;
 HEAP8[$arrayidx336 >> 0] = $480;
 $481 = _bitshift64Lshr($383 | 0, $384 | 0, 5) | 0;
 $482 = getTempRet0() | 0;
 $483 = $481 & 255;
 $arrayidx339 = $s + 19 | 0;
 HEAP8[$arrayidx339 >> 0] = $483;
 $484 = _bitshift64Lshr($383 | 0, $384 | 0, 13) | 0;
 $485 = getTempRet0() | 0;
 $486 = $484 & 255;
 $arrayidx342 = $s + 20 | 0;
 HEAP8[$arrayidx342 >> 0] = $486;
 $487 = $388 & 255;
 $arrayidx345 = $s + 21 | 0;
 HEAP8[$arrayidx345 >> 0] = $487;
 $488 = _bitshift64Lshr($388 | 0, $389 | 0, 8) | 0;
 $489 = getTempRet0() | 0;
 $490 = $488 & 255;
 $arrayidx348 = $s + 22 | 0;
 HEAP8[$arrayidx348 >> 0] = $490;
 $491 = _bitshift64Lshr($388 | 0, $389 | 0, 16) | 0;
 $492 = getTempRet0() | 0;
 $493 = $491 & 31;
 $494 = _bitshift64Shl($398 | 0, 0, 5) | 0;
 $495 = getTempRet0() | 0;
 $496 = $494 | $493;
 $497 = $496 & 255;
 $arrayidx353 = $s + 23 | 0;
 HEAP8[$arrayidx353 >> 0] = $497;
 $498 = _bitshift64Lshr($392 | 0, $393 | 0, 3) | 0;
 $499 = getTempRet0() | 0;
 $500 = $498 & 255;
 $arrayidx356 = $s + 24 | 0;
 HEAP8[$arrayidx356 >> 0] = $500;
 $501 = _bitshift64Lshr($392 | 0, $393 | 0, 11) | 0;
 $502 = getTempRet0() | 0;
 $503 = $501 & 255;
 $arrayidx359 = $s + 25 | 0;
 HEAP8[$arrayidx359 >> 0] = $503;
 $504 = _bitshift64Lshr($398 | 0, 0, 19) | 0;
 $505 = getTempRet0() | 0;
 $506 = _bitshift64Shl($403 | 0, 0, 2) | 0;
 $507 = getTempRet0() | 0;
 $508 = $506 | $504;
 $507 | $505;
 $509 = $508 & 255;
 $arrayidx364 = $s + 26 | 0;
 HEAP8[$arrayidx364 >> 0] = $509;
 $510 = _bitshift64Lshr($396 | 0, $397 | 0, 6) | 0;
 $511 = getTempRet0() | 0;
 $512 = $510 & 255;
 $arrayidx367 = $s + 27 | 0;
 HEAP8[$arrayidx367 >> 0] = $512;
 $513 = _bitshift64Lshr($403 | 0, 0, 14) | 0;
 $514 = getTempRet0() | 0;
 $515 = _bitshift64Shl($401 | 0, $402 | 0, 7) | 0;
 $516 = getTempRet0() | 0;
 $517 = $515 | $513;
 $516 | $514;
 $518 = $517 & 255;
 $arrayidx372 = $s + 28 | 0;
 HEAP8[$arrayidx372 >> 0] = $518;
 $519 = _bitshift64Lshr($401 | 0, $402 | 0, 1) | 0;
 $520 = getTempRet0() | 0;
 $521 = $519 & 255;
 $arrayidx375 = $s + 29 | 0;
 HEAP8[$arrayidx375 >> 0] = $521;
 $522 = _bitshift64Lshr($401 | 0, $402 | 0, 9) | 0;
 $523 = getTempRet0() | 0;
 $524 = $522 & 255;
 $arrayidx378 = $s + 30 | 0;
 HEAP8[$arrayidx378 >> 0] = $524;
 $525 = _bitshift64Ashr($401 | 0, $402 | 0, 17) | 0;
 $526 = getTempRet0() | 0;
 $527 = $525 & 255;
 $arrayidx381 = $s + 31 | 0;
 HEAP8[$arrayidx381 >> 0] = $527;
 return;
}

function _sc_sub($s, $a, $b) {
 $s = $s | 0;
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$idx = 0, $a$idx$val = 0, $a$idx281 = 0, $a$idx281$val = 0, $a$val = 0, $add$ptr11 = 0, $add$ptr15 = 0, $add$ptr15$idx = 0, $add$ptr15$idx$val = 0, $add$ptr15$idx279 = 0, $add$ptr15$idx279$val = 0, $add$ptr15$val = 0, $add$ptr23 = 0, $add$ptr23$idx = 0, $add$ptr23$idx$val = 0, $add$ptr23$idx278 = 0, $add$ptr23$idx278$val = 0, $add$ptr23$val = 0;
 var $add$ptr27 = 0, $add$ptr27$idx = 0, $add$ptr27$idx$val = 0, $add$ptr27$idx277 = 0, $add$ptr27$idx277$val = 0, $add$ptr27$val = 0, $add$ptr3 = 0, $add$ptr3$idx = 0, $add$ptr3$idx$val = 0, $add$ptr3$idx280 = 0, $add$ptr3$idx280$val = 0, $add$ptr3$val = 0, $add$ptr34 = 0, $add$ptr34$idx = 0, $add$ptr34$idx$val = 0, $add$ptr34$idx276 = 0, $add$ptr34$idx276$val = 0, $add$ptr34$val = 0, $add$ptr47 = 0, $add$ptr47$idx = 0;
 var $add$ptr47$idx$val = 0, $add$ptr47$idx274 = 0, $add$ptr47$idx274$val = 0, $add$ptr47$val = 0, $add$ptr55 = 0, $add$ptr59 = 0, $add$ptr59$idx = 0, $add$ptr59$idx$val = 0, $add$ptr59$idx273 = 0, $add$ptr59$idx273$val = 0, $add$ptr59$val = 0, $add$ptr67 = 0, $add$ptr67$idx = 0, $add$ptr67$idx$val = 0, $add$ptr67$idx272 = 0, $add$ptr67$idx272$val = 0, $add$ptr67$val = 0, $add$ptr71 = 0, $add$ptr71$idx = 0, $add$ptr71$idx$val = 0;
 var $add$ptr71$idx271 = 0, $add$ptr71$idx271$val = 0, $add$ptr71$val = 0, $add$ptr78 = 0, $add$ptr78$idx = 0, $add$ptr78$idx$val = 0, $add$ptr78$idx270 = 0, $add$ptr78$idx270$val = 0, $add$ptr78$val = 0, $arrayidx272 = 0, $arrayidx276 = 0, $arrayidx279 = 0, $arrayidx282 = 0, $arrayidx287 = 0, $arrayidx290 = 0, $arrayidx295 = 0, $arrayidx298 = 0, $arrayidx301 = 0, $arrayidx306 = 0, $arrayidx309 = 0;
 var $arrayidx312 = 0, $arrayidx317 = 0, $arrayidx320 = 0, $arrayidx325 = 0, $arrayidx328 = 0, $arrayidx331 = 0, $arrayidx336 = 0, $arrayidx339 = 0, $arrayidx342 = 0, $arrayidx345 = 0, $arrayidx348 = 0, $arrayidx353 = 0, $arrayidx356 = 0, $arrayidx359 = 0, $arrayidx364 = 0, $arrayidx367 = 0, $arrayidx372 = 0, $arrayidx375 = 0, $arrayidx378 = 0, $arrayidx381 = 0;
 var $b$idx = 0, $b$idx$val = 0, $b$idx275 = 0, $b$idx275$val = 0, $b$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $a$val = HEAP8[$a >> 0] | 0;
 $a$idx = $a + 1 | 0;
 $a$idx$val = HEAP8[$a$idx >> 0] | 0;
 $a$idx281 = $a + 2 | 0;
 $a$idx281$val = HEAP8[$a$idx281 >> 0] | 0;
 $0 = _load_3($a$val, $a$idx$val, $a$idx281$val) | 0;
 $1 = getTempRet0() | 0;
 $2 = $0 & 2097151;
 $3 = _load_4($a$idx281) | 0;
 $4 = getTempRet0() | 0;
 $5 = _bitshift64Lshr($3 | 0, $4 | 0, 5) | 0;
 $6 = getTempRet0() | 0;
 $7 = $5 & 2097151;
 $add$ptr3 = $a + 5 | 0;
 $add$ptr3$val = HEAP8[$add$ptr3 >> 0] | 0;
 $add$ptr3$idx = $a + 6 | 0;
 $add$ptr3$idx$val = HEAP8[$add$ptr3$idx >> 0] | 0;
 $add$ptr3$idx280 = $a + 7 | 0;
 $add$ptr3$idx280$val = HEAP8[$add$ptr3$idx280 >> 0] | 0;
 $8 = _load_3($add$ptr3$val, $add$ptr3$idx$val, $add$ptr3$idx280$val) | 0;
 $9 = getTempRet0() | 0;
 $10 = _bitshift64Lshr($8 | 0, $9 | 0, 2) | 0;
 $11 = getTempRet0() | 0;
 $12 = $10 & 2097151;
 $13 = _load_4($add$ptr3$idx280) | 0;
 $14 = getTempRet0() | 0;
 $15 = _bitshift64Lshr($13 | 0, $14 | 0, 7) | 0;
 $16 = getTempRet0() | 0;
 $17 = $15 & 2097151;
 $add$ptr11 = $a + 10 | 0;
 $18 = _load_4($add$ptr11) | 0;
 $19 = getTempRet0() | 0;
 $20 = _bitshift64Lshr($18 | 0, $19 | 0, 4) | 0;
 $21 = getTempRet0() | 0;
 $22 = $20 & 2097151;
 $add$ptr15 = $a + 13 | 0;
 $add$ptr15$val = HEAP8[$add$ptr15 >> 0] | 0;
 $add$ptr15$idx = $a + 14 | 0;
 $add$ptr15$idx$val = HEAP8[$add$ptr15$idx >> 0] | 0;
 $add$ptr15$idx279 = $a + 15 | 0;
 $add$ptr15$idx279$val = HEAP8[$add$ptr15$idx279 >> 0] | 0;
 $23 = _load_3($add$ptr15$val, $add$ptr15$idx$val, $add$ptr15$idx279$val) | 0;
 $24 = getTempRet0() | 0;
 $25 = _bitshift64Lshr($23 | 0, $24 | 0, 1) | 0;
 $26 = getTempRet0() | 0;
 $27 = $25 & 2097151;
 $28 = _load_4($add$ptr15$idx279) | 0;
 $29 = getTempRet0() | 0;
 $30 = _bitshift64Lshr($28 | 0, $29 | 0, 6) | 0;
 $31 = getTempRet0() | 0;
 $32 = $30 & 2097151;
 $add$ptr23 = $a + 18 | 0;
 $add$ptr23$val = HEAP8[$add$ptr23 >> 0] | 0;
 $add$ptr23$idx = $a + 19 | 0;
 $add$ptr23$idx$val = HEAP8[$add$ptr23$idx >> 0] | 0;
 $add$ptr23$idx278 = $a + 20 | 0;
 $add$ptr23$idx278$val = HEAP8[$add$ptr23$idx278 >> 0] | 0;
 $33 = _load_3($add$ptr23$val, $add$ptr23$idx$val, $add$ptr23$idx278$val) | 0;
 $34 = getTempRet0() | 0;
 $35 = _bitshift64Lshr($33 | 0, $34 | 0, 3) | 0;
 $36 = getTempRet0() | 0;
 $37 = $35 & 2097151;
 $add$ptr27 = $a + 21 | 0;
 $add$ptr27$val = HEAP8[$add$ptr27 >> 0] | 0;
 $add$ptr27$idx = $a + 22 | 0;
 $add$ptr27$idx$val = HEAP8[$add$ptr27$idx >> 0] | 0;
 $add$ptr27$idx277 = $a + 23 | 0;
 $add$ptr27$idx277$val = HEAP8[$add$ptr27$idx277 >> 0] | 0;
 $38 = _load_3($add$ptr27$val, $add$ptr27$idx$val, $add$ptr27$idx277$val) | 0;
 $39 = getTempRet0() | 0;
 $40 = $38 & 2097151;
 $41 = _load_4($add$ptr27$idx277) | 0;
 $42 = getTempRet0() | 0;
 $43 = _bitshift64Lshr($41 | 0, $42 | 0, 5) | 0;
 $44 = getTempRet0() | 0;
 $45 = $43 & 2097151;
 $add$ptr34 = $a + 26 | 0;
 $add$ptr34$val = HEAP8[$add$ptr34 >> 0] | 0;
 $add$ptr34$idx = $a + 27 | 0;
 $add$ptr34$idx$val = HEAP8[$add$ptr34$idx >> 0] | 0;
 $add$ptr34$idx276 = $a + 28 | 0;
 $add$ptr34$idx276$val = HEAP8[$add$ptr34$idx276 >> 0] | 0;
 $46 = _load_3($add$ptr34$val, $add$ptr34$idx$val, $add$ptr34$idx276$val) | 0;
 $47 = getTempRet0() | 0;
 $48 = _bitshift64Lshr($46 | 0, $47 | 0, 2) | 0;
 $49 = getTempRet0() | 0;
 $50 = $48 & 2097151;
 $51 = _load_4($add$ptr34$idx276) | 0;
 $52 = getTempRet0() | 0;
 $53 = _bitshift64Lshr($51 | 0, $52 | 0, 7) | 0;
 $54 = getTempRet0() | 0;
 $b$val = HEAP8[$b >> 0] | 0;
 $b$idx = $b + 1 | 0;
 $b$idx$val = HEAP8[$b$idx >> 0] | 0;
 $b$idx275 = $b + 2 | 0;
 $b$idx275$val = HEAP8[$b$idx275 >> 0] | 0;
 $55 = _load_3($b$val, $b$idx$val, $b$idx275$val) | 0;
 $56 = getTempRet0() | 0;
 $57 = $55 & 2097151;
 $58 = _load_4($b$idx275) | 0;
 $59 = getTempRet0() | 0;
 $60 = _bitshift64Lshr($58 | 0, $59 | 0, 5) | 0;
 $61 = getTempRet0() | 0;
 $62 = $60 & 2097151;
 $add$ptr47 = $b + 5 | 0;
 $add$ptr47$val = HEAP8[$add$ptr47 >> 0] | 0;
 $add$ptr47$idx = $b + 6 | 0;
 $add$ptr47$idx$val = HEAP8[$add$ptr47$idx >> 0] | 0;
 $add$ptr47$idx274 = $b + 7 | 0;
 $add$ptr47$idx274$val = HEAP8[$add$ptr47$idx274 >> 0] | 0;
 $63 = _load_3($add$ptr47$val, $add$ptr47$idx$val, $add$ptr47$idx274$val) | 0;
 $64 = getTempRet0() | 0;
 $65 = _bitshift64Lshr($63 | 0, $64 | 0, 2) | 0;
 $66 = getTempRet0() | 0;
 $67 = $65 & 2097151;
 $68 = _load_4($add$ptr47$idx274) | 0;
 $69 = getTempRet0() | 0;
 $70 = _bitshift64Lshr($68 | 0, $69 | 0, 7) | 0;
 $71 = getTempRet0() | 0;
 $72 = $70 & 2097151;
 $add$ptr55 = $b + 10 | 0;
 $73 = _load_4($add$ptr55) | 0;
 $74 = getTempRet0() | 0;
 $75 = _bitshift64Lshr($73 | 0, $74 | 0, 4) | 0;
 $76 = getTempRet0() | 0;
 $77 = $75 & 2097151;
 $add$ptr59 = $b + 13 | 0;
 $add$ptr59$val = HEAP8[$add$ptr59 >> 0] | 0;
 $add$ptr59$idx = $b + 14 | 0;
 $add$ptr59$idx$val = HEAP8[$add$ptr59$idx >> 0] | 0;
 $add$ptr59$idx273 = $b + 15 | 0;
 $add$ptr59$idx273$val = HEAP8[$add$ptr59$idx273 >> 0] | 0;
 $78 = _load_3($add$ptr59$val, $add$ptr59$idx$val, $add$ptr59$idx273$val) | 0;
 $79 = getTempRet0() | 0;
 $80 = _bitshift64Lshr($78 | 0, $79 | 0, 1) | 0;
 $81 = getTempRet0() | 0;
 $82 = $80 & 2097151;
 $83 = _load_4($add$ptr59$idx273) | 0;
 $84 = getTempRet0() | 0;
 $85 = _bitshift64Lshr($83 | 0, $84 | 0, 6) | 0;
 $86 = getTempRet0() | 0;
 $87 = $85 & 2097151;
 $add$ptr67 = $b + 18 | 0;
 $add$ptr67$val = HEAP8[$add$ptr67 >> 0] | 0;
 $add$ptr67$idx = $b + 19 | 0;
 $add$ptr67$idx$val = HEAP8[$add$ptr67$idx >> 0] | 0;
 $add$ptr67$idx272 = $b + 20 | 0;
 $add$ptr67$idx272$val = HEAP8[$add$ptr67$idx272 >> 0] | 0;
 $88 = _load_3($add$ptr67$val, $add$ptr67$idx$val, $add$ptr67$idx272$val) | 0;
 $89 = getTempRet0() | 0;
 $90 = _bitshift64Lshr($88 | 0, $89 | 0, 3) | 0;
 $91 = getTempRet0() | 0;
 $92 = $90 & 2097151;
 $add$ptr71 = $b + 21 | 0;
 $add$ptr71$val = HEAP8[$add$ptr71 >> 0] | 0;
 $add$ptr71$idx = $b + 22 | 0;
 $add$ptr71$idx$val = HEAP8[$add$ptr71$idx >> 0] | 0;
 $add$ptr71$idx271 = $b + 23 | 0;
 $add$ptr71$idx271$val = HEAP8[$add$ptr71$idx271 >> 0] | 0;
 $93 = _load_3($add$ptr71$val, $add$ptr71$idx$val, $add$ptr71$idx271$val) | 0;
 $94 = getTempRet0() | 0;
 $95 = $93 & 2097151;
 $96 = _load_4($add$ptr71$idx271) | 0;
 $97 = getTempRet0() | 0;
 $98 = _bitshift64Lshr($96 | 0, $97 | 0, 5) | 0;
 $99 = getTempRet0() | 0;
 $100 = $98 & 2097151;
 $add$ptr78 = $b + 26 | 0;
 $add$ptr78$val = HEAP8[$add$ptr78 >> 0] | 0;
 $add$ptr78$idx = $b + 27 | 0;
 $add$ptr78$idx$val = HEAP8[$add$ptr78$idx >> 0] | 0;
 $add$ptr78$idx270 = $b + 28 | 0;
 $add$ptr78$idx270$val = HEAP8[$add$ptr78$idx270 >> 0] | 0;
 $101 = _load_3($add$ptr78$val, $add$ptr78$idx$val, $add$ptr78$idx270$val) | 0;
 $102 = getTempRet0() | 0;
 $103 = _bitshift64Lshr($101 | 0, $102 | 0, 2) | 0;
 $104 = getTempRet0() | 0;
 $105 = $103 & 2097151;
 $106 = _load_4($add$ptr78$idx270) | 0;
 $107 = getTempRet0() | 0;
 $108 = _bitshift64Lshr($106 | 0, $107 | 0, 7) | 0;
 $109 = getTempRet0() | 0;
 $110 = _i64Subtract($2 | 0, 0, $57 | 0, 0) | 0;
 $111 = getTempRet0() | 0;
 $112 = _i64Subtract($7 | 0, 0, $62 | 0, 0) | 0;
 $113 = getTempRet0() | 0;
 $114 = _i64Subtract($12 | 0, 0, $67 | 0, 0) | 0;
 $115 = getTempRet0() | 0;
 $116 = _i64Subtract($17 | 0, 0, $72 | 0, 0) | 0;
 $117 = getTempRet0() | 0;
 $118 = _i64Subtract($22 | 0, 0, $77 | 0, 0) | 0;
 $119 = getTempRet0() | 0;
 $120 = _i64Subtract($27 | 0, 0, $82 | 0, 0) | 0;
 $121 = getTempRet0() | 0;
 $122 = _i64Subtract($32 | 0, 0, $87 | 0, 0) | 0;
 $123 = getTempRet0() | 0;
 $124 = _i64Subtract($37 | 0, 0, $92 | 0, 0) | 0;
 $125 = getTempRet0() | 0;
 $126 = _i64Subtract($40 | 0, 0, $95 | 0, 0) | 0;
 $127 = getTempRet0() | 0;
 $128 = _i64Subtract($45 | 0, 0, $100 | 0, 0) | 0;
 $129 = getTempRet0() | 0;
 $130 = _i64Subtract($50 | 0, 0, $105 | 0, 0) | 0;
 $131 = getTempRet0() | 0;
 $132 = _i64Subtract($53 | 0, $54 | 0, $108 | 0, $109 | 0) | 0;
 $133 = getTempRet0() | 0;
 $134 = _i64Add($110 | 0, $111 | 0, 1048576, 0) | 0;
 $135 = getTempRet0() | 0;
 $136 = _bitshift64Ashr($134 | 0, $135 | 0, 21) | 0;
 $137 = getTempRet0() | 0;
 $138 = _i64Add($112 | 0, $113 | 0, $136 | 0, $137 | 0) | 0;
 $139 = getTempRet0() | 0;
 $140 = $134 & -2097152;
 $141 = _i64Subtract($110 | 0, $111 | 0, $140 | 0, $135 | 0) | 0;
 $142 = getTempRet0() | 0;
 $143 = _i64Add($114 | 0, $115 | 0, 1048576, 0) | 0;
 $144 = getTempRet0() | 0;
 $145 = _bitshift64Ashr($143 | 0, $144 | 0, 21) | 0;
 $146 = getTempRet0() | 0;
 $147 = _i64Add($145 | 0, $146 | 0, $116 | 0, $117 | 0) | 0;
 $148 = getTempRet0() | 0;
 $149 = $143 & -2097152;
 $150 = _i64Add($118 | 0, $119 | 0, 1048576, 0) | 0;
 $151 = getTempRet0() | 0;
 $152 = _bitshift64Ashr($150 | 0, $151 | 0, 21) | 0;
 $153 = getTempRet0() | 0;
 $154 = _i64Add($120 | 0, $121 | 0, $152 | 0, $153 | 0) | 0;
 $155 = getTempRet0() | 0;
 $156 = $150 & -2097152;
 $157 = _i64Subtract($118 | 0, $119 | 0, $156 | 0, $151 | 0) | 0;
 $158 = getTempRet0() | 0;
 $159 = _i64Add($122 | 0, $123 | 0, 1048576, 0) | 0;
 $160 = getTempRet0() | 0;
 $161 = _bitshift64Ashr($159 | 0, $160 | 0, 21) | 0;
 $162 = getTempRet0() | 0;
 $163 = _i64Add($124 | 0, $125 | 0, $161 | 0, $162 | 0) | 0;
 $164 = getTempRet0() | 0;
 $165 = $159 & -2097152;
 $166 = _i64Subtract($122 | 0, $123 | 0, $165 | 0, $160 | 0) | 0;
 $167 = getTempRet0() | 0;
 $168 = _i64Add($126 | 0, $127 | 0, 1048576, 0) | 0;
 $169 = getTempRet0() | 0;
 $170 = _bitshift64Ashr($168 | 0, $169 | 0, 21) | 0;
 $171 = getTempRet0() | 0;
 $172 = _i64Add($128 | 0, $129 | 0, $170 | 0, $171 | 0) | 0;
 $173 = getTempRet0() | 0;
 $174 = $168 & -2097152;
 $175 = _i64Add($130 | 0, $131 | 0, 1048576, 0) | 0;
 $176 = getTempRet0() | 0;
 $177 = _bitshift64Ashr($175 | 0, $176 | 0, 21) | 0;
 $178 = getTempRet0() | 0;
 $179 = _i64Add($177 | 0, $178 | 0, $132 | 0, $133 | 0) | 0;
 $180 = getTempRet0() | 0;
 $181 = $175 & -2097152;
 $182 = _i64Add($138 | 0, $139 | 0, 1048576, 0) | 0;
 $183 = getTempRet0() | 0;
 $184 = _bitshift64Ashr($182 | 0, $183 | 0, 21) | 0;
 $185 = getTempRet0() | 0;
 $186 = $182 & -2097152;
 $187 = _i64Subtract($138 | 0, $139 | 0, $186 | 0, $183 | 0) | 0;
 $188 = getTempRet0() | 0;
 $189 = _i64Add($147 | 0, $148 | 0, 1048576, 0) | 0;
 $190 = getTempRet0() | 0;
 $191 = _bitshift64Ashr($189 | 0, $190 | 0, 21) | 0;
 $192 = getTempRet0() | 0;
 $193 = _i64Add($157 | 0, $158 | 0, $191 | 0, $192 | 0) | 0;
 $194 = getTempRet0() | 0;
 $195 = $189 & -2097152;
 $196 = _i64Subtract($147 | 0, $148 | 0, $195 | 0, $190 | 0) | 0;
 $197 = getTempRet0() | 0;
 $198 = _i64Add($154 | 0, $155 | 0, 1048576, 0) | 0;
 $199 = getTempRet0() | 0;
 $200 = _bitshift64Ashr($198 | 0, $199 | 0, 21) | 0;
 $201 = getTempRet0() | 0;
 $202 = _i64Add($166 | 0, $167 | 0, $200 | 0, $201 | 0) | 0;
 $203 = getTempRet0() | 0;
 $204 = $198 & -2097152;
 $205 = _i64Subtract($154 | 0, $155 | 0, $204 | 0, $199 | 0) | 0;
 $206 = getTempRet0() | 0;
 $207 = _i64Add($163 | 0, $164 | 0, 1048576, 0) | 0;
 $208 = getTempRet0() | 0;
 $209 = _bitshift64Ashr($207 | 0, $208 | 0, 21) | 0;
 $210 = getTempRet0() | 0;
 $211 = $207 & -2097152;
 $212 = _i64Subtract($163 | 0, $164 | 0, $211 | 0, $208 | 0) | 0;
 $213 = getTempRet0() | 0;
 $214 = _i64Add($172 | 0, $173 | 0, 1048576, 0) | 0;
 $215 = getTempRet0() | 0;
 $216 = _bitshift64Ashr($214 | 0, $215 | 0, 21) | 0;
 $217 = getTempRet0() | 0;
 $218 = $214 & -2097152;
 $219 = _i64Subtract($172 | 0, $173 | 0, $218 | 0, $215 | 0) | 0;
 $220 = getTempRet0() | 0;
 $221 = _i64Add($179 | 0, $180 | 0, 1048576, 0) | 0;
 $222 = getTempRet0() | 0;
 $223 = _bitshift64Ashr($221 | 0, $222 | 0, 21) | 0;
 $224 = getTempRet0() | 0;
 $225 = $221 & -2097152;
 $226 = _i64Subtract($179 | 0, $180 | 0, $225 | 0, $222 | 0) | 0;
 $227 = getTempRet0() | 0;
 $228 = ___muldi3($223 | 0, $224 | 0, 666643, 0) | 0;
 $229 = getTempRet0() | 0;
 $230 = _i64Add($228 | 0, $229 | 0, $141 | 0, $142 | 0) | 0;
 $231 = getTempRet0() | 0;
 $232 = ___muldi3($223 | 0, $224 | 0, 470296, 0) | 0;
 $233 = getTempRet0() | 0;
 $234 = _i64Add($187 | 0, $188 | 0, $232 | 0, $233 | 0) | 0;
 $235 = getTempRet0() | 0;
 $236 = ___muldi3($223 | 0, $224 | 0, 654183, 0) | 0;
 $237 = getTempRet0() | 0;
 $238 = ___muldi3($223 | 0, $224 | 0, -997805, -1) | 0;
 $239 = getTempRet0() | 0;
 $240 = _i64Add($196 | 0, $197 | 0, $238 | 0, $239 | 0) | 0;
 $241 = getTempRet0() | 0;
 $242 = ___muldi3($223 | 0, $224 | 0, 136657, 0) | 0;
 $243 = getTempRet0() | 0;
 $244 = _i64Add($193 | 0, $194 | 0, $242 | 0, $243 | 0) | 0;
 $245 = getTempRet0() | 0;
 $246 = ___muldi3($223 | 0, $224 | 0, -683901, -1) | 0;
 $247 = getTempRet0() | 0;
 $248 = _i64Add($205 | 0, $206 | 0, $246 | 0, $247 | 0) | 0;
 $249 = getTempRet0() | 0;
 $250 = _bitshift64Ashr($230 | 0, $231 | 0, 21) | 0;
 $251 = getTempRet0() | 0;
 $252 = _i64Add($234 | 0, $235 | 0, $250 | 0, $251 | 0) | 0;
 $253 = getTempRet0() | 0;
 $254 = $230 & 2097151;
 $255 = _bitshift64Ashr($252 | 0, $253 | 0, 21) | 0;
 $256 = getTempRet0() | 0;
 $257 = _i64Add($114 | 0, $115 | 0, $184 | 0, $185 | 0) | 0;
 $258 = getTempRet0() | 0;
 $259 = _i64Subtract($257 | 0, $258 | 0, $149 | 0, $144 | 0) | 0;
 $260 = getTempRet0() | 0;
 $261 = _i64Add($259 | 0, $260 | 0, $236 | 0, $237 | 0) | 0;
 $262 = getTempRet0() | 0;
 $263 = _i64Add($261 | 0, $262 | 0, $255 | 0, $256 | 0) | 0;
 $264 = getTempRet0() | 0;
 $265 = $252 & 2097151;
 $266 = _bitshift64Ashr($263 | 0, $264 | 0, 21) | 0;
 $267 = getTempRet0() | 0;
 $268 = _i64Add($240 | 0, $241 | 0, $266 | 0, $267 | 0) | 0;
 $269 = getTempRet0() | 0;
 $270 = $263 & 2097151;
 $271 = _bitshift64Ashr($268 | 0, $269 | 0, 21) | 0;
 $272 = getTempRet0() | 0;
 $273 = _i64Add($244 | 0, $245 | 0, $271 | 0, $272 | 0) | 0;
 $274 = getTempRet0() | 0;
 $275 = $268 & 2097151;
 $276 = _bitshift64Ashr($273 | 0, $274 | 0, 21) | 0;
 $277 = getTempRet0() | 0;
 $278 = _i64Add($248 | 0, $249 | 0, $276 | 0, $277 | 0) | 0;
 $279 = getTempRet0() | 0;
 $280 = $273 & 2097151;
 $281 = _bitshift64Ashr($278 | 0, $279 | 0, 21) | 0;
 $282 = getTempRet0() | 0;
 $283 = _i64Add($202 | 0, $203 | 0, $281 | 0, $282 | 0) | 0;
 $284 = getTempRet0() | 0;
 $285 = $278 & 2097151;
 $286 = _bitshift64Ashr($283 | 0, $284 | 0, 21) | 0;
 $287 = getTempRet0() | 0;
 $288 = _i64Add($286 | 0, $287 | 0, $212 | 0, $213 | 0) | 0;
 $289 = getTempRet0() | 0;
 $290 = $283 & 2097151;
 $291 = _bitshift64Ashr($288 | 0, $289 | 0, 21) | 0;
 $292 = getTempRet0() | 0;
 $293 = _i64Add($209 | 0, $210 | 0, $126 | 0, $127 | 0) | 0;
 $294 = getTempRet0() | 0;
 $295 = _i64Subtract($293 | 0, $294 | 0, $174 | 0, $169 | 0) | 0;
 $296 = getTempRet0() | 0;
 $297 = _i64Add($295 | 0, $296 | 0, $291 | 0, $292 | 0) | 0;
 $298 = getTempRet0() | 0;
 $299 = $288 & 2097151;
 $300 = _bitshift64Ashr($297 | 0, $298 | 0, 21) | 0;
 $301 = getTempRet0() | 0;
 $302 = _i64Add($300 | 0, $301 | 0, $219 | 0, $220 | 0) | 0;
 $303 = getTempRet0() | 0;
 $304 = $297 & 2097151;
 $305 = _bitshift64Ashr($302 | 0, $303 | 0, 21) | 0;
 $306 = getTempRet0() | 0;
 $307 = _i64Add($130 | 0, $131 | 0, $216 | 0, $217 | 0) | 0;
 $308 = getTempRet0() | 0;
 $309 = _i64Subtract($307 | 0, $308 | 0, $181 | 0, $176 | 0) | 0;
 $310 = getTempRet0() | 0;
 $311 = _i64Add($309 | 0, $310 | 0, $305 | 0, $306 | 0) | 0;
 $312 = getTempRet0() | 0;
 $313 = $302 & 2097151;
 $314 = _bitshift64Ashr($311 | 0, $312 | 0, 21) | 0;
 $315 = getTempRet0() | 0;
 $316 = _i64Add($314 | 0, $315 | 0, $226 | 0, $227 | 0) | 0;
 $317 = getTempRet0() | 0;
 $318 = $311 & 2097151;
 $319 = _bitshift64Ashr($316 | 0, $317 | 0, 21) | 0;
 $320 = getTempRet0() | 0;
 $321 = $316 & 2097151;
 $322 = ___muldi3($319 | 0, $320 | 0, 666643, 0) | 0;
 $323 = getTempRet0() | 0;
 $324 = _i64Add($322 | 0, $323 | 0, $254 | 0, 0) | 0;
 $325 = getTempRet0() | 0;
 $326 = ___muldi3($319 | 0, $320 | 0, 470296, 0) | 0;
 $327 = getTempRet0() | 0;
 $328 = _i64Add($326 | 0, $327 | 0, $265 | 0, 0) | 0;
 $329 = getTempRet0() | 0;
 $330 = ___muldi3($319 | 0, $320 | 0, 654183, 0) | 0;
 $331 = getTempRet0() | 0;
 $332 = _i64Add($330 | 0, $331 | 0, $270 | 0, 0) | 0;
 $333 = getTempRet0() | 0;
 $334 = ___muldi3($319 | 0, $320 | 0, -997805, -1) | 0;
 $335 = getTempRet0() | 0;
 $336 = _i64Add($334 | 0, $335 | 0, $275 | 0, 0) | 0;
 $337 = getTempRet0() | 0;
 $338 = ___muldi3($319 | 0, $320 | 0, 136657, 0) | 0;
 $339 = getTempRet0() | 0;
 $340 = _i64Add($338 | 0, $339 | 0, $280 | 0, 0) | 0;
 $341 = getTempRet0() | 0;
 $342 = ___muldi3($319 | 0, $320 | 0, -683901, -1) | 0;
 $343 = getTempRet0() | 0;
 $344 = _i64Add($342 | 0, $343 | 0, $285 | 0, 0) | 0;
 $345 = getTempRet0() | 0;
 $346 = _bitshift64Ashr($324 | 0, $325 | 0, 21) | 0;
 $347 = getTempRet0() | 0;
 $348 = _i64Add($328 | 0, $329 | 0, $346 | 0, $347 | 0) | 0;
 $349 = getTempRet0() | 0;
 $350 = _bitshift64Ashr($348 | 0, $349 | 0, 21) | 0;
 $351 = getTempRet0() | 0;
 $352 = _i64Add($332 | 0, $333 | 0, $350 | 0, $351 | 0) | 0;
 $353 = getTempRet0() | 0;
 $354 = $348 & 2097151;
 $355 = _bitshift64Ashr($352 | 0, $353 | 0, 21) | 0;
 $356 = getTempRet0() | 0;
 $357 = _i64Add($336 | 0, $337 | 0, $355 | 0, $356 | 0) | 0;
 $358 = getTempRet0() | 0;
 $359 = $352 & 2097151;
 $360 = _bitshift64Ashr($357 | 0, $358 | 0, 21) | 0;
 $361 = getTempRet0() | 0;
 $362 = _i64Add($340 | 0, $341 | 0, $360 | 0, $361 | 0) | 0;
 $363 = getTempRet0() | 0;
 $364 = $357 & 2097151;
 $365 = _bitshift64Ashr($362 | 0, $363 | 0, 21) | 0;
 $366 = getTempRet0() | 0;
 $367 = _i64Add($344 | 0, $345 | 0, $365 | 0, $366 | 0) | 0;
 $368 = getTempRet0() | 0;
 $369 = $362 & 2097151;
 $370 = _bitshift64Ashr($367 | 0, $368 | 0, 21) | 0;
 $371 = getTempRet0() | 0;
 $372 = _i64Add($370 | 0, $371 | 0, $290 | 0, 0) | 0;
 $373 = getTempRet0() | 0;
 $374 = $367 & 2097151;
 $375 = _bitshift64Ashr($372 | 0, $373 | 0, 21) | 0;
 $376 = getTempRet0() | 0;
 $377 = _i64Add($375 | 0, $376 | 0, $299 | 0, 0) | 0;
 $378 = getTempRet0() | 0;
 $379 = $372 & 2097151;
 $380 = _bitshift64Ashr($377 | 0, $378 | 0, 21) | 0;
 $381 = getTempRet0() | 0;
 $382 = _i64Add($380 | 0, $381 | 0, $304 | 0, 0) | 0;
 $383 = getTempRet0() | 0;
 $384 = _bitshift64Ashr($382 | 0, $383 | 0, 21) | 0;
 $385 = getTempRet0() | 0;
 $386 = _i64Add($384 | 0, $385 | 0, $313 | 0, 0) | 0;
 $387 = getTempRet0() | 0;
 $388 = _bitshift64Ashr($386 | 0, $387 | 0, 21) | 0;
 $389 = getTempRet0() | 0;
 $390 = _i64Add($388 | 0, $389 | 0, $318 | 0, 0) | 0;
 $391 = getTempRet0() | 0;
 $392 = $386 & 2097151;
 $393 = _bitshift64Ashr($390 | 0, $391 | 0, 21) | 0;
 $394 = getTempRet0() | 0;
 $395 = _i64Add($393 | 0, $394 | 0, $321 | 0, 0) | 0;
 $396 = getTempRet0() | 0;
 $397 = $390 & 2097151;
 $398 = $324 & 255;
 HEAP8[$s >> 0] = $398;
 $399 = _bitshift64Lshr($324 | 0, $325 | 0, 8) | 0;
 $400 = getTempRet0() | 0;
 $401 = $399 & 255;
 $arrayidx272 = $s + 1 | 0;
 HEAP8[$arrayidx272 >> 0] = $401;
 $402 = _bitshift64Lshr($324 | 0, $325 | 0, 16) | 0;
 $403 = getTempRet0() | 0;
 $404 = $402 & 31;
 $405 = _bitshift64Shl($354 | 0, 0, 5) | 0;
 $406 = getTempRet0() | 0;
 $407 = $405 | $404;
 $408 = $407 & 255;
 $arrayidx276 = $s + 2 | 0;
 HEAP8[$arrayidx276 >> 0] = $408;
 $409 = _bitshift64Lshr($348 | 0, $349 | 0, 3) | 0;
 $410 = getTempRet0() | 0;
 $411 = $409 & 255;
 $arrayidx279 = $s + 3 | 0;
 HEAP8[$arrayidx279 >> 0] = $411;
 $412 = _bitshift64Lshr($348 | 0, $349 | 0, 11) | 0;
 $413 = getTempRet0() | 0;
 $414 = $412 & 255;
 $arrayidx282 = $s + 4 | 0;
 HEAP8[$arrayidx282 >> 0] = $414;
 $415 = _bitshift64Lshr($354 | 0, 0, 19) | 0;
 $416 = getTempRet0() | 0;
 $417 = _bitshift64Shl($359 | 0, 0, 2) | 0;
 $418 = getTempRet0() | 0;
 $419 = $417 | $415;
 $418 | $416;
 $420 = $419 & 255;
 $arrayidx287 = $s + 5 | 0;
 HEAP8[$arrayidx287 >> 0] = $420;
 $421 = _bitshift64Lshr($352 | 0, $353 | 0, 6) | 0;
 $422 = getTempRet0() | 0;
 $423 = $421 & 255;
 $arrayidx290 = $s + 6 | 0;
 HEAP8[$arrayidx290 >> 0] = $423;
 $424 = _bitshift64Lshr($359 | 0, 0, 14) | 0;
 $425 = getTempRet0() | 0;
 $426 = _bitshift64Shl($364 | 0, 0, 7) | 0;
 $427 = getTempRet0() | 0;
 $428 = $426 | $424;
 $427 | $425;
 $429 = $428 & 255;
 $arrayidx295 = $s + 7 | 0;
 HEAP8[$arrayidx295 >> 0] = $429;
 $430 = _bitshift64Lshr($357 | 0, $358 | 0, 1) | 0;
 $431 = getTempRet0() | 0;
 $432 = $430 & 255;
 $arrayidx298 = $s + 8 | 0;
 HEAP8[$arrayidx298 >> 0] = $432;
 $433 = _bitshift64Lshr($357 | 0, $358 | 0, 9) | 0;
 $434 = getTempRet0() | 0;
 $435 = $433 & 255;
 $arrayidx301 = $s + 9 | 0;
 HEAP8[$arrayidx301 >> 0] = $435;
 $436 = _bitshift64Lshr($364 | 0, 0, 17) | 0;
 $437 = getTempRet0() | 0;
 $438 = _bitshift64Shl($369 | 0, 0, 4) | 0;
 $439 = getTempRet0() | 0;
 $440 = $438 | $436;
 $439 | $437;
 $441 = $440 & 255;
 $arrayidx306 = $s + 10 | 0;
 HEAP8[$arrayidx306 >> 0] = $441;
 $442 = _bitshift64Lshr($362 | 0, $363 | 0, 4) | 0;
 $443 = getTempRet0() | 0;
 $444 = $442 & 255;
 $arrayidx309 = $s + 11 | 0;
 HEAP8[$arrayidx309 >> 0] = $444;
 $445 = _bitshift64Lshr($362 | 0, $363 | 0, 12) | 0;
 $446 = getTempRet0() | 0;
 $447 = $445 & 255;
 $arrayidx312 = $s + 12 | 0;
 HEAP8[$arrayidx312 >> 0] = $447;
 $448 = _bitshift64Lshr($369 | 0, 0, 20) | 0;
 $449 = getTempRet0() | 0;
 $450 = _bitshift64Shl($374 | 0, 0, 1) | 0;
 $451 = getTempRet0() | 0;
 $452 = $450 | $448;
 $451 | $449;
 $453 = $452 & 255;
 $arrayidx317 = $s + 13 | 0;
 HEAP8[$arrayidx317 >> 0] = $453;
 $454 = _bitshift64Lshr($367 | 0, $368 | 0, 7) | 0;
 $455 = getTempRet0() | 0;
 $456 = $454 & 255;
 $arrayidx320 = $s + 14 | 0;
 HEAP8[$arrayidx320 >> 0] = $456;
 $457 = _bitshift64Lshr($374 | 0, 0, 15) | 0;
 $458 = getTempRet0() | 0;
 $459 = _bitshift64Shl($379 | 0, 0, 6) | 0;
 $460 = getTempRet0() | 0;
 $461 = $459 | $457;
 $460 | $458;
 $462 = $461 & 255;
 $arrayidx325 = $s + 15 | 0;
 HEAP8[$arrayidx325 >> 0] = $462;
 $463 = _bitshift64Lshr($372 | 0, $373 | 0, 2) | 0;
 $464 = getTempRet0() | 0;
 $465 = $463 & 255;
 $arrayidx328 = $s + 16 | 0;
 HEAP8[$arrayidx328 >> 0] = $465;
 $466 = _bitshift64Lshr($372 | 0, $373 | 0, 10) | 0;
 $467 = getTempRet0() | 0;
 $468 = $466 & 255;
 $arrayidx331 = $s + 17 | 0;
 HEAP8[$arrayidx331 >> 0] = $468;
 $469 = _bitshift64Lshr($379 | 0, 0, 18) | 0;
 $470 = getTempRet0() | 0;
 $471 = _bitshift64Shl($377 | 0, $378 | 0, 3) | 0;
 $472 = getTempRet0() | 0;
 $473 = $471 | $469;
 $472 | $470;
 $474 = $473 & 255;
 $arrayidx336 = $s + 18 | 0;
 HEAP8[$arrayidx336 >> 0] = $474;
 $475 = _bitshift64Lshr($377 | 0, $378 | 0, 5) | 0;
 $476 = getTempRet0() | 0;
 $477 = $475 & 255;
 $arrayidx339 = $s + 19 | 0;
 HEAP8[$arrayidx339 >> 0] = $477;
 $478 = _bitshift64Lshr($377 | 0, $378 | 0, 13) | 0;
 $479 = getTempRet0() | 0;
 $480 = $478 & 255;
 $arrayidx342 = $s + 20 | 0;
 HEAP8[$arrayidx342 >> 0] = $480;
 $481 = $382 & 255;
 $arrayidx345 = $s + 21 | 0;
 HEAP8[$arrayidx345 >> 0] = $481;
 $482 = _bitshift64Lshr($382 | 0, $383 | 0, 8) | 0;
 $483 = getTempRet0() | 0;
 $484 = $482 & 255;
 $arrayidx348 = $s + 22 | 0;
 HEAP8[$arrayidx348 >> 0] = $484;
 $485 = _bitshift64Lshr($382 | 0, $383 | 0, 16) | 0;
 $486 = getTempRet0() | 0;
 $487 = $485 & 31;
 $488 = _bitshift64Shl($392 | 0, 0, 5) | 0;
 $489 = getTempRet0() | 0;
 $490 = $488 | $487;
 $491 = $490 & 255;
 $arrayidx353 = $s + 23 | 0;
 HEAP8[$arrayidx353 >> 0] = $491;
 $492 = _bitshift64Lshr($386 | 0, $387 | 0, 3) | 0;
 $493 = getTempRet0() | 0;
 $494 = $492 & 255;
 $arrayidx356 = $s + 24 | 0;
 HEAP8[$arrayidx356 >> 0] = $494;
 $495 = _bitshift64Lshr($386 | 0, $387 | 0, 11) | 0;
 $496 = getTempRet0() | 0;
 $497 = $495 & 255;
 $arrayidx359 = $s + 25 | 0;
 HEAP8[$arrayidx359 >> 0] = $497;
 $498 = _bitshift64Lshr($392 | 0, 0, 19) | 0;
 $499 = getTempRet0() | 0;
 $500 = _bitshift64Shl($397 | 0, 0, 2) | 0;
 $501 = getTempRet0() | 0;
 $502 = $500 | $498;
 $501 | $499;
 $503 = $502 & 255;
 $arrayidx364 = $s + 26 | 0;
 HEAP8[$arrayidx364 >> 0] = $503;
 $504 = _bitshift64Lshr($390 | 0, $391 | 0, 6) | 0;
 $505 = getTempRet0() | 0;
 $506 = $504 & 255;
 $arrayidx367 = $s + 27 | 0;
 HEAP8[$arrayidx367 >> 0] = $506;
 $507 = _bitshift64Lshr($397 | 0, 0, 14) | 0;
 $508 = getTempRet0() | 0;
 $509 = _bitshift64Shl($395 | 0, $396 | 0, 7) | 0;
 $510 = getTempRet0() | 0;
 $511 = $509 | $507;
 $510 | $508;
 $512 = $511 & 255;
 $arrayidx372 = $s + 28 | 0;
 HEAP8[$arrayidx372 >> 0] = $512;
 $513 = _bitshift64Lshr($395 | 0, $396 | 0, 1) | 0;
 $514 = getTempRet0() | 0;
 $515 = $513 & 255;
 $arrayidx375 = $s + 29 | 0;
 HEAP8[$arrayidx375 >> 0] = $515;
 $516 = _bitshift64Lshr($395 | 0, $396 | 0, 9) | 0;
 $517 = getTempRet0() | 0;
 $518 = $516 & 255;
 $arrayidx378 = $s + 30 | 0;
 HEAP8[$arrayidx378 >> 0] = $518;
 $519 = _bitshift64Ashr($395 | 0, $396 | 0, 17) | 0;
 $520 = getTempRet0() | 0;
 $521 = $519 & 255;
 $arrayidx381 = $s + 31 | 0;
 HEAP8[$arrayidx381 >> 0] = $521;
 return;
}

function _fe_mul($h, $f, $g) {
 $h = $h | 0;
 $f = $f | 0;
 $g = $g | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx1 = 0, $arrayidx11 = 0;
 var $arrayidx12 = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx15 = 0, $arrayidx16 = 0, $arrayidx17 = 0, $arrayidx18 = 0, $arrayidx19 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $arrayidx482 = 0, $arrayidx484 = 0, $arrayidx486 = 0, $arrayidx488 = 0, $arrayidx490 = 0, $arrayidx492 = 0, $arrayidx494 = 0, $arrayidx496 = 0, $arrayidx498 = 0;
 var $arrayidx5 = 0, $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $mul = 0, $mul20 = 0, $mul21 = 0, $mul22 = 0, $mul23 = 0, $mul24 = 0, $mul25 = 0, $mul26 = 0, $mul27 = 0, $mul28 = 0, $mul29 = 0, $mul30 = 0, $mul31 = 0, $mul32 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f >> 2] | 0;
 $arrayidx1 = $f + 4 | 0;
 $1 = HEAP32[$arrayidx1 >> 2] | 0;
 $arrayidx2 = $f + 8 | 0;
 $2 = HEAP32[$arrayidx2 >> 2] | 0;
 $arrayidx3 = $f + 12 | 0;
 $3 = HEAP32[$arrayidx3 >> 2] | 0;
 $arrayidx4 = $f + 16 | 0;
 $4 = HEAP32[$arrayidx4 >> 2] | 0;
 $arrayidx5 = $f + 20 | 0;
 $5 = HEAP32[$arrayidx5 >> 2] | 0;
 $arrayidx6 = $f + 24 | 0;
 $6 = HEAP32[$arrayidx6 >> 2] | 0;
 $arrayidx7 = $f + 28 | 0;
 $7 = HEAP32[$arrayidx7 >> 2] | 0;
 $arrayidx8 = $f + 32 | 0;
 $8 = HEAP32[$arrayidx8 >> 2] | 0;
 $arrayidx9 = $f + 36 | 0;
 $9 = HEAP32[$arrayidx9 >> 2] | 0;
 $10 = HEAP32[$g >> 2] | 0;
 $arrayidx11 = $g + 4 | 0;
 $11 = HEAP32[$arrayidx11 >> 2] | 0;
 $arrayidx12 = $g + 8 | 0;
 $12 = HEAP32[$arrayidx12 >> 2] | 0;
 $arrayidx13 = $g + 12 | 0;
 $13 = HEAP32[$arrayidx13 >> 2] | 0;
 $arrayidx14 = $g + 16 | 0;
 $14 = HEAP32[$arrayidx14 >> 2] | 0;
 $arrayidx15 = $g + 20 | 0;
 $15 = HEAP32[$arrayidx15 >> 2] | 0;
 $arrayidx16 = $g + 24 | 0;
 $16 = HEAP32[$arrayidx16 >> 2] | 0;
 $arrayidx17 = $g + 28 | 0;
 $17 = HEAP32[$arrayidx17 >> 2] | 0;
 $arrayidx18 = $g + 32 | 0;
 $18 = HEAP32[$arrayidx18 >> 2] | 0;
 $arrayidx19 = $g + 36 | 0;
 $19 = HEAP32[$arrayidx19 >> 2] | 0;
 $mul = $11 * 19 | 0;
 $mul20 = $12 * 19 | 0;
 $mul21 = $13 * 19 | 0;
 $mul22 = $14 * 19 | 0;
 $mul23 = $15 * 19 | 0;
 $mul24 = $16 * 19 | 0;
 $mul25 = $17 * 19 | 0;
 $mul26 = $18 * 19 | 0;
 $mul27 = $19 * 19 | 0;
 $mul28 = $1 << 1;
 $mul29 = $3 << 1;
 $mul30 = $5 << 1;
 $mul31 = $7 << 1;
 $mul32 = $9 << 1;
 $20 = ($0 | 0) < 0;
 $21 = $20 << 31 >> 31;
 $22 = ($10 | 0) < 0;
 $23 = $22 << 31 >> 31;
 $24 = ___muldi3($10 | 0, $23 | 0, $0 | 0, $21 | 0) | 0;
 $25 = getTempRet0() | 0;
 $26 = ($11 | 0) < 0;
 $27 = $26 << 31 >> 31;
 $28 = ___muldi3($11 | 0, $27 | 0, $0 | 0, $21 | 0) | 0;
 $29 = getTempRet0() | 0;
 $30 = ($12 | 0) < 0;
 $31 = $30 << 31 >> 31;
 $32 = ___muldi3($12 | 0, $31 | 0, $0 | 0, $21 | 0) | 0;
 $33 = getTempRet0() | 0;
 $34 = ($13 | 0) < 0;
 $35 = $34 << 31 >> 31;
 $36 = ___muldi3($13 | 0, $35 | 0, $0 | 0, $21 | 0) | 0;
 $37 = getTempRet0() | 0;
 $38 = ($14 | 0) < 0;
 $39 = $38 << 31 >> 31;
 $40 = ___muldi3($14 | 0, $39 | 0, $0 | 0, $21 | 0) | 0;
 $41 = getTempRet0() | 0;
 $42 = ($15 | 0) < 0;
 $43 = $42 << 31 >> 31;
 $44 = ___muldi3($15 | 0, $43 | 0, $0 | 0, $21 | 0) | 0;
 $45 = getTempRet0() | 0;
 $46 = ($16 | 0) < 0;
 $47 = $46 << 31 >> 31;
 $48 = ___muldi3($16 | 0, $47 | 0, $0 | 0, $21 | 0) | 0;
 $49 = getTempRet0() | 0;
 $50 = ($17 | 0) < 0;
 $51 = $50 << 31 >> 31;
 $52 = ___muldi3($17 | 0, $51 | 0, $0 | 0, $21 | 0) | 0;
 $53 = getTempRet0() | 0;
 $54 = ($18 | 0) < 0;
 $55 = $54 << 31 >> 31;
 $56 = ___muldi3($18 | 0, $55 | 0, $0 | 0, $21 | 0) | 0;
 $57 = getTempRet0() | 0;
 $58 = ($19 | 0) < 0;
 $59 = $58 << 31 >> 31;
 $60 = ___muldi3($19 | 0, $59 | 0, $0 | 0, $21 | 0) | 0;
 $61 = getTempRet0() | 0;
 $62 = ($1 | 0) < 0;
 $63 = $62 << 31 >> 31;
 $64 = ___muldi3($10 | 0, $23 | 0, $1 | 0, $63 | 0) | 0;
 $65 = getTempRet0() | 0;
 $66 = ($mul28 | 0) < 0;
 $67 = $66 << 31 >> 31;
 $68 = ___muldi3($11 | 0, $27 | 0, $mul28 | 0, $67 | 0) | 0;
 $69 = getTempRet0() | 0;
 $70 = ___muldi3($12 | 0, $31 | 0, $1 | 0, $63 | 0) | 0;
 $71 = getTempRet0() | 0;
 $72 = ___muldi3($13 | 0, $35 | 0, $mul28 | 0, $67 | 0) | 0;
 $73 = getTempRet0() | 0;
 $74 = ___muldi3($14 | 0, $39 | 0, $1 | 0, $63 | 0) | 0;
 $75 = getTempRet0() | 0;
 $76 = ___muldi3($15 | 0, $43 | 0, $mul28 | 0, $67 | 0) | 0;
 $77 = getTempRet0() | 0;
 $78 = ___muldi3($16 | 0, $47 | 0, $1 | 0, $63 | 0) | 0;
 $79 = getTempRet0() | 0;
 $80 = ___muldi3($17 | 0, $51 | 0, $mul28 | 0, $67 | 0) | 0;
 $81 = getTempRet0() | 0;
 $82 = ___muldi3($18 | 0, $55 | 0, $1 | 0, $63 | 0) | 0;
 $83 = getTempRet0() | 0;
 $84 = ($mul27 | 0) < 0;
 $85 = $84 << 31 >> 31;
 $86 = ___muldi3($mul27 | 0, $85 | 0, $mul28 | 0, $67 | 0) | 0;
 $87 = getTempRet0() | 0;
 $88 = ($2 | 0) < 0;
 $89 = $88 << 31 >> 31;
 $90 = ___muldi3($10 | 0, $23 | 0, $2 | 0, $89 | 0) | 0;
 $91 = getTempRet0() | 0;
 $92 = ___muldi3($11 | 0, $27 | 0, $2 | 0, $89 | 0) | 0;
 $93 = getTempRet0() | 0;
 $94 = ___muldi3($12 | 0, $31 | 0, $2 | 0, $89 | 0) | 0;
 $95 = getTempRet0() | 0;
 $96 = ___muldi3($13 | 0, $35 | 0, $2 | 0, $89 | 0) | 0;
 $97 = getTempRet0() | 0;
 $98 = ___muldi3($14 | 0, $39 | 0, $2 | 0, $89 | 0) | 0;
 $99 = getTempRet0() | 0;
 $100 = ___muldi3($15 | 0, $43 | 0, $2 | 0, $89 | 0) | 0;
 $101 = getTempRet0() | 0;
 $102 = ___muldi3($16 | 0, $47 | 0, $2 | 0, $89 | 0) | 0;
 $103 = getTempRet0() | 0;
 $104 = ___muldi3($17 | 0, $51 | 0, $2 | 0, $89 | 0) | 0;
 $105 = getTempRet0() | 0;
 $106 = ($mul26 | 0) < 0;
 $107 = $106 << 31 >> 31;
 $108 = ___muldi3($mul26 | 0, $107 | 0, $2 | 0, $89 | 0) | 0;
 $109 = getTempRet0() | 0;
 $110 = ___muldi3($mul27 | 0, $85 | 0, $2 | 0, $89 | 0) | 0;
 $111 = getTempRet0() | 0;
 $112 = ($3 | 0) < 0;
 $113 = $112 << 31 >> 31;
 $114 = ___muldi3($10 | 0, $23 | 0, $3 | 0, $113 | 0) | 0;
 $115 = getTempRet0() | 0;
 $116 = ($mul29 | 0) < 0;
 $117 = $116 << 31 >> 31;
 $118 = ___muldi3($11 | 0, $27 | 0, $mul29 | 0, $117 | 0) | 0;
 $119 = getTempRet0() | 0;
 $120 = ___muldi3($12 | 0, $31 | 0, $3 | 0, $113 | 0) | 0;
 $121 = getTempRet0() | 0;
 $122 = ___muldi3($13 | 0, $35 | 0, $mul29 | 0, $117 | 0) | 0;
 $123 = getTempRet0() | 0;
 $124 = ___muldi3($14 | 0, $39 | 0, $3 | 0, $113 | 0) | 0;
 $125 = getTempRet0() | 0;
 $126 = ___muldi3($15 | 0, $43 | 0, $mul29 | 0, $117 | 0) | 0;
 $127 = getTempRet0() | 0;
 $128 = ___muldi3($16 | 0, $47 | 0, $3 | 0, $113 | 0) | 0;
 $129 = getTempRet0() | 0;
 $130 = ($mul25 | 0) < 0;
 $131 = $130 << 31 >> 31;
 $132 = ___muldi3($mul25 | 0, $131 | 0, $mul29 | 0, $117 | 0) | 0;
 $133 = getTempRet0() | 0;
 $134 = ___muldi3($mul26 | 0, $107 | 0, $3 | 0, $113 | 0) | 0;
 $135 = getTempRet0() | 0;
 $136 = ___muldi3($mul27 | 0, $85 | 0, $mul29 | 0, $117 | 0) | 0;
 $137 = getTempRet0() | 0;
 $138 = ($4 | 0) < 0;
 $139 = $138 << 31 >> 31;
 $140 = ___muldi3($10 | 0, $23 | 0, $4 | 0, $139 | 0) | 0;
 $141 = getTempRet0() | 0;
 $142 = ___muldi3($11 | 0, $27 | 0, $4 | 0, $139 | 0) | 0;
 $143 = getTempRet0() | 0;
 $144 = ___muldi3($12 | 0, $31 | 0, $4 | 0, $139 | 0) | 0;
 $145 = getTempRet0() | 0;
 $146 = ___muldi3($13 | 0, $35 | 0, $4 | 0, $139 | 0) | 0;
 $147 = getTempRet0() | 0;
 $148 = ___muldi3($14 | 0, $39 | 0, $4 | 0, $139 | 0) | 0;
 $149 = getTempRet0() | 0;
 $150 = ___muldi3($15 | 0, $43 | 0, $4 | 0, $139 | 0) | 0;
 $151 = getTempRet0() | 0;
 $152 = ($mul24 | 0) < 0;
 $153 = $152 << 31 >> 31;
 $154 = ___muldi3($mul24 | 0, $153 | 0, $4 | 0, $139 | 0) | 0;
 $155 = getTempRet0() | 0;
 $156 = ___muldi3($mul25 | 0, $131 | 0, $4 | 0, $139 | 0) | 0;
 $157 = getTempRet0() | 0;
 $158 = ___muldi3($mul26 | 0, $107 | 0, $4 | 0, $139 | 0) | 0;
 $159 = getTempRet0() | 0;
 $160 = ___muldi3($mul27 | 0, $85 | 0, $4 | 0, $139 | 0) | 0;
 $161 = getTempRet0() | 0;
 $162 = ($5 | 0) < 0;
 $163 = $162 << 31 >> 31;
 $164 = ___muldi3($10 | 0, $23 | 0, $5 | 0, $163 | 0) | 0;
 $165 = getTempRet0() | 0;
 $166 = ($mul30 | 0) < 0;
 $167 = $166 << 31 >> 31;
 $168 = ___muldi3($11 | 0, $27 | 0, $mul30 | 0, $167 | 0) | 0;
 $169 = getTempRet0() | 0;
 $170 = ___muldi3($12 | 0, $31 | 0, $5 | 0, $163 | 0) | 0;
 $171 = getTempRet0() | 0;
 $172 = ___muldi3($13 | 0, $35 | 0, $mul30 | 0, $167 | 0) | 0;
 $173 = getTempRet0() | 0;
 $174 = ___muldi3($14 | 0, $39 | 0, $5 | 0, $163 | 0) | 0;
 $175 = getTempRet0() | 0;
 $176 = ($mul23 | 0) < 0;
 $177 = $176 << 31 >> 31;
 $178 = ___muldi3($mul23 | 0, $177 | 0, $mul30 | 0, $167 | 0) | 0;
 $179 = getTempRet0() | 0;
 $180 = ___muldi3($mul24 | 0, $153 | 0, $5 | 0, $163 | 0) | 0;
 $181 = getTempRet0() | 0;
 $182 = ___muldi3($mul25 | 0, $131 | 0, $mul30 | 0, $167 | 0) | 0;
 $183 = getTempRet0() | 0;
 $184 = ___muldi3($mul26 | 0, $107 | 0, $5 | 0, $163 | 0) | 0;
 $185 = getTempRet0() | 0;
 $186 = ___muldi3($mul27 | 0, $85 | 0, $mul30 | 0, $167 | 0) | 0;
 $187 = getTempRet0() | 0;
 $188 = ($6 | 0) < 0;
 $189 = $188 << 31 >> 31;
 $190 = ___muldi3($10 | 0, $23 | 0, $6 | 0, $189 | 0) | 0;
 $191 = getTempRet0() | 0;
 $192 = ___muldi3($11 | 0, $27 | 0, $6 | 0, $189 | 0) | 0;
 $193 = getTempRet0() | 0;
 $194 = ___muldi3($12 | 0, $31 | 0, $6 | 0, $189 | 0) | 0;
 $195 = getTempRet0() | 0;
 $196 = ___muldi3($13 | 0, $35 | 0, $6 | 0, $189 | 0) | 0;
 $197 = getTempRet0() | 0;
 $198 = ($mul22 | 0) < 0;
 $199 = $198 << 31 >> 31;
 $200 = ___muldi3($mul22 | 0, $199 | 0, $6 | 0, $189 | 0) | 0;
 $201 = getTempRet0() | 0;
 $202 = ___muldi3($mul23 | 0, $177 | 0, $6 | 0, $189 | 0) | 0;
 $203 = getTempRet0() | 0;
 $204 = ___muldi3($mul24 | 0, $153 | 0, $6 | 0, $189 | 0) | 0;
 $205 = getTempRet0() | 0;
 $206 = ___muldi3($mul25 | 0, $131 | 0, $6 | 0, $189 | 0) | 0;
 $207 = getTempRet0() | 0;
 $208 = ___muldi3($mul26 | 0, $107 | 0, $6 | 0, $189 | 0) | 0;
 $209 = getTempRet0() | 0;
 $210 = ___muldi3($mul27 | 0, $85 | 0, $6 | 0, $189 | 0) | 0;
 $211 = getTempRet0() | 0;
 $212 = ($7 | 0) < 0;
 $213 = $212 << 31 >> 31;
 $214 = ___muldi3($10 | 0, $23 | 0, $7 | 0, $213 | 0) | 0;
 $215 = getTempRet0() | 0;
 $216 = ($mul31 | 0) < 0;
 $217 = $216 << 31 >> 31;
 $218 = ___muldi3($11 | 0, $27 | 0, $mul31 | 0, $217 | 0) | 0;
 $219 = getTempRet0() | 0;
 $220 = ___muldi3($12 | 0, $31 | 0, $7 | 0, $213 | 0) | 0;
 $221 = getTempRet0() | 0;
 $222 = ($mul21 | 0) < 0;
 $223 = $222 << 31 >> 31;
 $224 = ___muldi3($mul21 | 0, $223 | 0, $mul31 | 0, $217 | 0) | 0;
 $225 = getTempRet0() | 0;
 $226 = ___muldi3($mul22 | 0, $199 | 0, $7 | 0, $213 | 0) | 0;
 $227 = getTempRet0() | 0;
 $228 = ___muldi3($mul23 | 0, $177 | 0, $mul31 | 0, $217 | 0) | 0;
 $229 = getTempRet0() | 0;
 $230 = ___muldi3($mul24 | 0, $153 | 0, $7 | 0, $213 | 0) | 0;
 $231 = getTempRet0() | 0;
 $232 = ___muldi3($mul25 | 0, $131 | 0, $mul31 | 0, $217 | 0) | 0;
 $233 = getTempRet0() | 0;
 $234 = ___muldi3($mul26 | 0, $107 | 0, $7 | 0, $213 | 0) | 0;
 $235 = getTempRet0() | 0;
 $236 = ___muldi3($mul27 | 0, $85 | 0, $mul31 | 0, $217 | 0) | 0;
 $237 = getTempRet0() | 0;
 $238 = ($8 | 0) < 0;
 $239 = $238 << 31 >> 31;
 $240 = ___muldi3($10 | 0, $23 | 0, $8 | 0, $239 | 0) | 0;
 $241 = getTempRet0() | 0;
 $242 = ___muldi3($11 | 0, $27 | 0, $8 | 0, $239 | 0) | 0;
 $243 = getTempRet0() | 0;
 $244 = ($mul20 | 0) < 0;
 $245 = $244 << 31 >> 31;
 $246 = ___muldi3($mul20 | 0, $245 | 0, $8 | 0, $239 | 0) | 0;
 $247 = getTempRet0() | 0;
 $248 = ___muldi3($mul21 | 0, $223 | 0, $8 | 0, $239 | 0) | 0;
 $249 = getTempRet0() | 0;
 $250 = ___muldi3($mul22 | 0, $199 | 0, $8 | 0, $239 | 0) | 0;
 $251 = getTempRet0() | 0;
 $252 = ___muldi3($mul23 | 0, $177 | 0, $8 | 0, $239 | 0) | 0;
 $253 = getTempRet0() | 0;
 $254 = ___muldi3($mul24 | 0, $153 | 0, $8 | 0, $239 | 0) | 0;
 $255 = getTempRet0() | 0;
 $256 = ___muldi3($mul25 | 0, $131 | 0, $8 | 0, $239 | 0) | 0;
 $257 = getTempRet0() | 0;
 $258 = ___muldi3($mul26 | 0, $107 | 0, $8 | 0, $239 | 0) | 0;
 $259 = getTempRet0() | 0;
 $260 = ___muldi3($mul27 | 0, $85 | 0, $8 | 0, $239 | 0) | 0;
 $261 = getTempRet0() | 0;
 $262 = ($9 | 0) < 0;
 $263 = $262 << 31 >> 31;
 $264 = ___muldi3($10 | 0, $23 | 0, $9 | 0, $263 | 0) | 0;
 $265 = getTempRet0() | 0;
 $266 = ($mul32 | 0) < 0;
 $267 = $266 << 31 >> 31;
 $268 = ($mul | 0) < 0;
 $269 = $268 << 31 >> 31;
 $270 = ___muldi3($mul | 0, $269 | 0, $mul32 | 0, $267 | 0) | 0;
 $271 = getTempRet0() | 0;
 $272 = ___muldi3($mul20 | 0, $245 | 0, $9 | 0, $263 | 0) | 0;
 $273 = getTempRet0() | 0;
 $274 = ___muldi3($mul21 | 0, $223 | 0, $mul32 | 0, $267 | 0) | 0;
 $275 = getTempRet0() | 0;
 $276 = ___muldi3($mul22 | 0, $199 | 0, $9 | 0, $263 | 0) | 0;
 $277 = getTempRet0() | 0;
 $278 = ___muldi3($mul23 | 0, $177 | 0, $mul32 | 0, $267 | 0) | 0;
 $279 = getTempRet0() | 0;
 $280 = ___muldi3($mul24 | 0, $153 | 0, $9 | 0, $263 | 0) | 0;
 $281 = getTempRet0() | 0;
 $282 = ___muldi3($mul25 | 0, $131 | 0, $mul32 | 0, $267 | 0) | 0;
 $283 = getTempRet0() | 0;
 $284 = ___muldi3($mul26 | 0, $107 | 0, $9 | 0, $263 | 0) | 0;
 $285 = getTempRet0() | 0;
 $286 = ___muldi3($mul27 | 0, $85 | 0, $mul32 | 0, $267 | 0) | 0;
 $287 = getTempRet0() | 0;
 $288 = _i64Add($270 | 0, $271 | 0, $24 | 0, $25 | 0) | 0;
 $289 = getTempRet0() | 0;
 $290 = _i64Add($288 | 0, $289 | 0, $246 | 0, $247 | 0) | 0;
 $291 = getTempRet0() | 0;
 $292 = _i64Add($290 | 0, $291 | 0, $224 | 0, $225 | 0) | 0;
 $293 = getTempRet0() | 0;
 $294 = _i64Add($292 | 0, $293 | 0, $200 | 0, $201 | 0) | 0;
 $295 = getTempRet0() | 0;
 $296 = _i64Add($294 | 0, $295 | 0, $178 | 0, $179 | 0) | 0;
 $297 = getTempRet0() | 0;
 $298 = _i64Add($296 | 0, $297 | 0, $154 | 0, $155 | 0) | 0;
 $299 = getTempRet0() | 0;
 $300 = _i64Add($298 | 0, $299 | 0, $132 | 0, $133 | 0) | 0;
 $301 = getTempRet0() | 0;
 $302 = _i64Add($300 | 0, $301 | 0, $108 | 0, $109 | 0) | 0;
 $303 = getTempRet0() | 0;
 $304 = _i64Add($302 | 0, $303 | 0, $86 | 0, $87 | 0) | 0;
 $305 = getTempRet0() | 0;
 $306 = _i64Add($28 | 0, $29 | 0, $64 | 0, $65 | 0) | 0;
 $307 = getTempRet0() | 0;
 $308 = _i64Add($118 | 0, $119 | 0, $140 | 0, $141 | 0) | 0;
 $309 = getTempRet0() | 0;
 $310 = _i64Add($308 | 0, $309 | 0, $94 | 0, $95 | 0) | 0;
 $311 = getTempRet0() | 0;
 $312 = _i64Add($310 | 0, $311 | 0, $72 | 0, $73 | 0) | 0;
 $313 = getTempRet0() | 0;
 $314 = _i64Add($312 | 0, $313 | 0, $40 | 0, $41 | 0) | 0;
 $315 = getTempRet0() | 0;
 $316 = _i64Add($314 | 0, $315 | 0, $278 | 0, $279 | 0) | 0;
 $317 = getTempRet0() | 0;
 $318 = _i64Add($316 | 0, $317 | 0, $254 | 0, $255 | 0) | 0;
 $319 = getTempRet0() | 0;
 $320 = _i64Add($318 | 0, $319 | 0, $232 | 0, $233 | 0) | 0;
 $321 = getTempRet0() | 0;
 $322 = _i64Add($320 | 0, $321 | 0, $208 | 0, $209 | 0) | 0;
 $323 = getTempRet0() | 0;
 $324 = _i64Add($322 | 0, $323 | 0, $186 | 0, $187 | 0) | 0;
 $325 = getTempRet0() | 0;
 $326 = _i64Add($304 | 0, $305 | 0, 33554432, 0) | 0;
 $327 = getTempRet0() | 0;
 $328 = _bitshift64Ashr($326 | 0, $327 | 0, 26) | 0;
 $329 = getTempRet0() | 0;
 $330 = _i64Add($306 | 0, $307 | 0, $272 | 0, $273 | 0) | 0;
 $331 = getTempRet0() | 0;
 $332 = _i64Add($330 | 0, $331 | 0, $248 | 0, $249 | 0) | 0;
 $333 = getTempRet0() | 0;
 $334 = _i64Add($332 | 0, $333 | 0, $226 | 0, $227 | 0) | 0;
 $335 = getTempRet0() | 0;
 $336 = _i64Add($334 | 0, $335 | 0, $202 | 0, $203 | 0) | 0;
 $337 = getTempRet0() | 0;
 $338 = _i64Add($336 | 0, $337 | 0, $180 | 0, $181 | 0) | 0;
 $339 = getTempRet0() | 0;
 $340 = _i64Add($338 | 0, $339 | 0, $156 | 0, $157 | 0) | 0;
 $341 = getTempRet0() | 0;
 $342 = _i64Add($340 | 0, $341 | 0, $134 | 0, $135 | 0) | 0;
 $343 = getTempRet0() | 0;
 $344 = _i64Add($342 | 0, $343 | 0, $110 | 0, $111 | 0) | 0;
 $345 = getTempRet0() | 0;
 $346 = _i64Add($344 | 0, $345 | 0, $328 | 0, $329 | 0) | 0;
 $347 = getTempRet0() | 0;
 $348 = $326 & -67108864;
 $349 = _i64Subtract($304 | 0, $305 | 0, $348 | 0, $327 | 0) | 0;
 $350 = getTempRet0() | 0;
 $351 = _i64Add($324 | 0, $325 | 0, 33554432, 0) | 0;
 $352 = getTempRet0() | 0;
 $353 = _bitshift64Ashr($351 | 0, $352 | 0, 26) | 0;
 $354 = getTempRet0() | 0;
 $355 = _i64Add($142 | 0, $143 | 0, $164 | 0, $165 | 0) | 0;
 $356 = getTempRet0() | 0;
 $357 = _i64Add($355 | 0, $356 | 0, $120 | 0, $121 | 0) | 0;
 $358 = getTempRet0() | 0;
 $359 = _i64Add($357 | 0, $358 | 0, $96 | 0, $97 | 0) | 0;
 $360 = getTempRet0() | 0;
 $361 = _i64Add($359 | 0, $360 | 0, $74 | 0, $75 | 0) | 0;
 $362 = getTempRet0() | 0;
 $363 = _i64Add($361 | 0, $362 | 0, $44 | 0, $45 | 0) | 0;
 $364 = getTempRet0() | 0;
 $365 = _i64Add($363 | 0, $364 | 0, $280 | 0, $281 | 0) | 0;
 $366 = getTempRet0() | 0;
 $367 = _i64Add($365 | 0, $366 | 0, $256 | 0, $257 | 0) | 0;
 $368 = getTempRet0() | 0;
 $369 = _i64Add($367 | 0, $368 | 0, $234 | 0, $235 | 0) | 0;
 $370 = getTempRet0() | 0;
 $371 = _i64Add($369 | 0, $370 | 0, $210 | 0, $211 | 0) | 0;
 $372 = getTempRet0() | 0;
 $373 = _i64Add($371 | 0, $372 | 0, $353 | 0, $354 | 0) | 0;
 $374 = getTempRet0() | 0;
 $375 = $351 & -67108864;
 $376 = _i64Subtract($324 | 0, $325 | 0, $375 | 0, $352 | 0) | 0;
 $377 = getTempRet0() | 0;
 $378 = _i64Add($346 | 0, $347 | 0, 16777216, 0) | 0;
 $379 = getTempRet0() | 0;
 $380 = _bitshift64Ashr($378 | 0, $379 | 0, 25) | 0;
 $381 = getTempRet0() | 0;
 $382 = _i64Add($68 | 0, $69 | 0, $90 | 0, $91 | 0) | 0;
 $383 = getTempRet0() | 0;
 $384 = _i64Add($382 | 0, $383 | 0, $32 | 0, $33 | 0) | 0;
 $385 = getTempRet0() | 0;
 $386 = _i64Add($384 | 0, $385 | 0, $274 | 0, $275 | 0) | 0;
 $387 = getTempRet0() | 0;
 $388 = _i64Add($386 | 0, $387 | 0, $250 | 0, $251 | 0) | 0;
 $389 = getTempRet0() | 0;
 $390 = _i64Add($388 | 0, $389 | 0, $228 | 0, $229 | 0) | 0;
 $391 = getTempRet0() | 0;
 $392 = _i64Add($390 | 0, $391 | 0, $204 | 0, $205 | 0) | 0;
 $393 = getTempRet0() | 0;
 $394 = _i64Add($392 | 0, $393 | 0, $182 | 0, $183 | 0) | 0;
 $395 = getTempRet0() | 0;
 $396 = _i64Add($394 | 0, $395 | 0, $158 | 0, $159 | 0) | 0;
 $397 = getTempRet0() | 0;
 $398 = _i64Add($396 | 0, $397 | 0, $136 | 0, $137 | 0) | 0;
 $399 = getTempRet0() | 0;
 $400 = _i64Add($398 | 0, $399 | 0, $380 | 0, $381 | 0) | 0;
 $401 = getTempRet0() | 0;
 $402 = $378 & -33554432;
 $403 = _i64Subtract($346 | 0, $347 | 0, $402 | 0, 0) | 0;
 $404 = getTempRet0() | 0;
 $405 = _i64Add($373 | 0, $374 | 0, 16777216, 0) | 0;
 $406 = getTempRet0() | 0;
 $407 = _bitshift64Ashr($405 | 0, $406 | 0, 25) | 0;
 $408 = getTempRet0() | 0;
 $409 = _i64Add($168 | 0, $169 | 0, $190 | 0, $191 | 0) | 0;
 $410 = getTempRet0() | 0;
 $411 = _i64Add($409 | 0, $410 | 0, $144 | 0, $145 | 0) | 0;
 $412 = getTempRet0() | 0;
 $413 = _i64Add($411 | 0, $412 | 0, $122 | 0, $123 | 0) | 0;
 $414 = getTempRet0() | 0;
 $415 = _i64Add($413 | 0, $414 | 0, $98 | 0, $99 | 0) | 0;
 $416 = getTempRet0() | 0;
 $417 = _i64Add($415 | 0, $416 | 0, $76 | 0, $77 | 0) | 0;
 $418 = getTempRet0() | 0;
 $419 = _i64Add($417 | 0, $418 | 0, $48 | 0, $49 | 0) | 0;
 $420 = getTempRet0() | 0;
 $421 = _i64Add($419 | 0, $420 | 0, $282 | 0, $283 | 0) | 0;
 $422 = getTempRet0() | 0;
 $423 = _i64Add($421 | 0, $422 | 0, $258 | 0, $259 | 0) | 0;
 $424 = getTempRet0() | 0;
 $425 = _i64Add($423 | 0, $424 | 0, $236 | 0, $237 | 0) | 0;
 $426 = getTempRet0() | 0;
 $427 = _i64Add($425 | 0, $426 | 0, $407 | 0, $408 | 0) | 0;
 $428 = getTempRet0() | 0;
 $429 = $405 & -33554432;
 $430 = _i64Subtract($373 | 0, $374 | 0, $429 | 0, 0) | 0;
 $431 = getTempRet0() | 0;
 $432 = _i64Add($400 | 0, $401 | 0, 33554432, 0) | 0;
 $433 = getTempRet0() | 0;
 $434 = _bitshift64Ashr($432 | 0, $433 | 0, 26) | 0;
 $435 = getTempRet0() | 0;
 $436 = _i64Add($92 | 0, $93 | 0, $114 | 0, $115 | 0) | 0;
 $437 = getTempRet0() | 0;
 $438 = _i64Add($436 | 0, $437 | 0, $70 | 0, $71 | 0) | 0;
 $439 = getTempRet0() | 0;
 $440 = _i64Add($438 | 0, $439 | 0, $36 | 0, $37 | 0) | 0;
 $441 = getTempRet0() | 0;
 $442 = _i64Add($440 | 0, $441 | 0, $276 | 0, $277 | 0) | 0;
 $443 = getTempRet0() | 0;
 $444 = _i64Add($442 | 0, $443 | 0, $252 | 0, $253 | 0) | 0;
 $445 = getTempRet0() | 0;
 $446 = _i64Add($444 | 0, $445 | 0, $230 | 0, $231 | 0) | 0;
 $447 = getTempRet0() | 0;
 $448 = _i64Add($446 | 0, $447 | 0, $206 | 0, $207 | 0) | 0;
 $449 = getTempRet0() | 0;
 $450 = _i64Add($448 | 0, $449 | 0, $184 | 0, $185 | 0) | 0;
 $451 = getTempRet0() | 0;
 $452 = _i64Add($450 | 0, $451 | 0, $160 | 0, $161 | 0) | 0;
 $453 = getTempRet0() | 0;
 $454 = _i64Add($452 | 0, $453 | 0, $434 | 0, $435 | 0) | 0;
 $455 = getTempRet0() | 0;
 $456 = $432 & -67108864;
 $457 = _i64Subtract($400 | 0, $401 | 0, $456 | 0, 0) | 0;
 $458 = getTempRet0() | 0;
 $459 = _i64Add($427 | 0, $428 | 0, 33554432, 0) | 0;
 $460 = getTempRet0() | 0;
 $461 = _bitshift64Ashr($459 | 0, $460 | 0, 26) | 0;
 $462 = getTempRet0() | 0;
 $463 = _i64Add($192 | 0, $193 | 0, $214 | 0, $215 | 0) | 0;
 $464 = getTempRet0() | 0;
 $465 = _i64Add($463 | 0, $464 | 0, $170 | 0, $171 | 0) | 0;
 $466 = getTempRet0() | 0;
 $467 = _i64Add($465 | 0, $466 | 0, $146 | 0, $147 | 0) | 0;
 $468 = getTempRet0() | 0;
 $469 = _i64Add($467 | 0, $468 | 0, $124 | 0, $125 | 0) | 0;
 $470 = getTempRet0() | 0;
 $471 = _i64Add($469 | 0, $470 | 0, $100 | 0, $101 | 0) | 0;
 $472 = getTempRet0() | 0;
 $473 = _i64Add($471 | 0, $472 | 0, $78 | 0, $79 | 0) | 0;
 $474 = getTempRet0() | 0;
 $475 = _i64Add($473 | 0, $474 | 0, $52 | 0, $53 | 0) | 0;
 $476 = getTempRet0() | 0;
 $477 = _i64Add($475 | 0, $476 | 0, $284 | 0, $285 | 0) | 0;
 $478 = getTempRet0() | 0;
 $479 = _i64Add($477 | 0, $478 | 0, $260 | 0, $261 | 0) | 0;
 $480 = getTempRet0() | 0;
 $481 = _i64Add($479 | 0, $480 | 0, $461 | 0, $462 | 0) | 0;
 $482 = getTempRet0() | 0;
 $483 = $459 & -67108864;
 $484 = _i64Subtract($427 | 0, $428 | 0, $483 | 0, 0) | 0;
 $485 = getTempRet0() | 0;
 $486 = _i64Add($454 | 0, $455 | 0, 16777216, 0) | 0;
 $487 = getTempRet0() | 0;
 $488 = _bitshift64Ashr($486 | 0, $487 | 0, 25) | 0;
 $489 = getTempRet0() | 0;
 $490 = _i64Add($488 | 0, $489 | 0, $376 | 0, $377 | 0) | 0;
 $491 = getTempRet0() | 0;
 $492 = $486 & -33554432;
 $493 = _i64Subtract($454 | 0, $455 | 0, $492 | 0, 0) | 0;
 $494 = getTempRet0() | 0;
 $495 = _i64Add($481 | 0, $482 | 0, 16777216, 0) | 0;
 $496 = getTempRet0() | 0;
 $497 = _bitshift64Ashr($495 | 0, $496 | 0, 25) | 0;
 $498 = getTempRet0() | 0;
 $499 = _i64Add($218 | 0, $219 | 0, $240 | 0, $241 | 0) | 0;
 $500 = getTempRet0() | 0;
 $501 = _i64Add($499 | 0, $500 | 0, $194 | 0, $195 | 0) | 0;
 $502 = getTempRet0() | 0;
 $503 = _i64Add($501 | 0, $502 | 0, $172 | 0, $173 | 0) | 0;
 $504 = getTempRet0() | 0;
 $505 = _i64Add($503 | 0, $504 | 0, $148 | 0, $149 | 0) | 0;
 $506 = getTempRet0() | 0;
 $507 = _i64Add($505 | 0, $506 | 0, $126 | 0, $127 | 0) | 0;
 $508 = getTempRet0() | 0;
 $509 = _i64Add($507 | 0, $508 | 0, $102 | 0, $103 | 0) | 0;
 $510 = getTempRet0() | 0;
 $511 = _i64Add($509 | 0, $510 | 0, $80 | 0, $81 | 0) | 0;
 $512 = getTempRet0() | 0;
 $513 = _i64Add($511 | 0, $512 | 0, $56 | 0, $57 | 0) | 0;
 $514 = getTempRet0() | 0;
 $515 = _i64Add($513 | 0, $514 | 0, $286 | 0, $287 | 0) | 0;
 $516 = getTempRet0() | 0;
 $517 = _i64Add($515 | 0, $516 | 0, $497 | 0, $498 | 0) | 0;
 $518 = getTempRet0() | 0;
 $519 = $495 & -33554432;
 $520 = _i64Subtract($481 | 0, $482 | 0, $519 | 0, 0) | 0;
 $521 = getTempRet0() | 0;
 $522 = _i64Add($490 | 0, $491 | 0, 33554432, 0) | 0;
 $523 = getTempRet0() | 0;
 $524 = _bitshift64Lshr($522 | 0, $523 | 0, 26) | 0;
 $525 = getTempRet0() | 0;
 $526 = _i64Add($430 | 0, $431 | 0, $524 | 0, $525 | 0) | 0;
 $527 = getTempRet0() | 0;
 $528 = $522 & -67108864;
 $529 = _i64Subtract($490 | 0, $491 | 0, $528 | 0, 0) | 0;
 $530 = getTempRet0() | 0;
 $531 = _i64Add($517 | 0, $518 | 0, 33554432, 0) | 0;
 $532 = getTempRet0() | 0;
 $533 = _bitshift64Ashr($531 | 0, $532 | 0, 26) | 0;
 $534 = getTempRet0() | 0;
 $535 = _i64Add($242 | 0, $243 | 0, $264 | 0, $265 | 0) | 0;
 $536 = getTempRet0() | 0;
 $537 = _i64Add($535 | 0, $536 | 0, $220 | 0, $221 | 0) | 0;
 $538 = getTempRet0() | 0;
 $539 = _i64Add($537 | 0, $538 | 0, $196 | 0, $197 | 0) | 0;
 $540 = getTempRet0() | 0;
 $541 = _i64Add($539 | 0, $540 | 0, $174 | 0, $175 | 0) | 0;
 $542 = getTempRet0() | 0;
 $543 = _i64Add($541 | 0, $542 | 0, $150 | 0, $151 | 0) | 0;
 $544 = getTempRet0() | 0;
 $545 = _i64Add($543 | 0, $544 | 0, $128 | 0, $129 | 0) | 0;
 $546 = getTempRet0() | 0;
 $547 = _i64Add($545 | 0, $546 | 0, $104 | 0, $105 | 0) | 0;
 $548 = getTempRet0() | 0;
 $549 = _i64Add($547 | 0, $548 | 0, $82 | 0, $83 | 0) | 0;
 $550 = getTempRet0() | 0;
 $551 = _i64Add($549 | 0, $550 | 0, $60 | 0, $61 | 0) | 0;
 $552 = getTempRet0() | 0;
 $553 = _i64Add($551 | 0, $552 | 0, $533 | 0, $534 | 0) | 0;
 $554 = getTempRet0() | 0;
 $555 = $531 & -67108864;
 $556 = _i64Subtract($517 | 0, $518 | 0, $555 | 0, 0) | 0;
 $557 = getTempRet0() | 0;
 $558 = _i64Add($553 | 0, $554 | 0, 16777216, 0) | 0;
 $559 = getTempRet0() | 0;
 $560 = _bitshift64Ashr($558 | 0, $559 | 0, 25) | 0;
 $561 = getTempRet0() | 0;
 $562 = ___muldi3($560 | 0, $561 | 0, 19, 0) | 0;
 $563 = getTempRet0() | 0;
 $564 = _i64Add($562 | 0, $563 | 0, $349 | 0, $350 | 0) | 0;
 $565 = getTempRet0() | 0;
 $566 = $558 & -33554432;
 $567 = _i64Subtract($553 | 0, $554 | 0, $566 | 0, 0) | 0;
 $568 = getTempRet0() | 0;
 $569 = _i64Add($564 | 0, $565 | 0, 33554432, 0) | 0;
 $570 = getTempRet0() | 0;
 $571 = _bitshift64Lshr($569 | 0, $570 | 0, 26) | 0;
 $572 = getTempRet0() | 0;
 $573 = _i64Add($403 | 0, $404 | 0, $571 | 0, $572 | 0) | 0;
 $574 = getTempRet0() | 0;
 $575 = $569 & -67108864;
 $576 = _i64Subtract($564 | 0, $565 | 0, $575 | 0, 0) | 0;
 $577 = getTempRet0() | 0;
 HEAP32[$h >> 2] = $576;
 $arrayidx482 = $h + 4 | 0;
 HEAP32[$arrayidx482 >> 2] = $573;
 $arrayidx484 = $h + 8 | 0;
 HEAP32[$arrayidx484 >> 2] = $457;
 $arrayidx486 = $h + 12 | 0;
 HEAP32[$arrayidx486 >> 2] = $493;
 $arrayidx488 = $h + 16 | 0;
 HEAP32[$arrayidx488 >> 2] = $529;
 $arrayidx490 = $h + 20 | 0;
 HEAP32[$arrayidx490 >> 2] = $526;
 $arrayidx492 = $h + 24 | 0;
 HEAP32[$arrayidx492 >> 2] = $484;
 $arrayidx494 = $h + 28 | 0;
 HEAP32[$arrayidx494 >> 2] = $520;
 $arrayidx496 = $h + 32 | 0;
 HEAP32[$arrayidx496 >> 2] = $556;
 $arrayidx498 = $h + 36 | 0;
 HEAP32[$arrayidx498 >> 2] = $567;
 return;
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$ = 0, $$lcssa213 = 0, $$pre = 0, $$pre262 = 0, $$pre263 = 0, $$pre263$pre = 0, $$pre267 = 0, $$pre36 = 0, $$pre37 = 0, $$pre38 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $a$0 = 0, $a$1 = 0, $add = 0, $add$ptr = 0, $add$ptr139 = 0, $add$ptr206 = 0, $add$ptr258 = 0, $add$ptr341 = 0, $add$ptr354 = 0, $add$ptr468 = 0, $add$ptr88 = 0, $add270 = 0, $add323 = 0, $add390 = 0, $add407 = 0, $add436 = 0, $and = 0, $and211 = 0, $and215 = 0;
 var $and217 = 0, $and220 = 0, $and233 = 0, $and250 = 0, $and255 = 0, $and264 = 0, $and290 = 0, $and295 = 0, $and310 = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $arrayidx114 = 0, $arrayidx119 = 0, $arrayidx124 = 0, $arrayidx132 = 0, $arrayidx16 = 0;
 var $arrayidx174 = 0, $arrayidx193 = 0, $arrayidx31 = 0, $arrayidx35 = 0, $arrayidx365 = 0, $arrayidx464 = 0, $arrayidx476$phi$trans$insert = 0, $arrayidx68 = 0, $arrayidx73 = 0, $arrayidx81 = 0, $brmerge = 0, $brmerge235 = 0, $buf = 0, $call104 = 0, $call121 = 0, $call160 = 0, $call33 = 0, $call351 = 0, $call379 = 0, $call406 = 0;
 var $call424 = 0, $call70 = 0, $cmp = 0, $cmp1 = 0, $cmp105 = 0, $cmp111 = 0, $cmp116 = 0, $cmp126 = 0, $cmp13 = 0, $cmp166 = 0, $cmp177 = 0, $cmp18 = 0, $cmp182 = 0, $cmp185 = 0, $cmp212 = 0, $cmp241 = 0, $cmp271 = 0, $cmp307 = 0, $cmp324 = 0, $cmp37 = 0;
 var $cmp372 = 0, $cmp372242 = 0, $cmp380 = 0, $cmp385 = 0, $cmp399 = 0, $cmp399247 = 0, $cmp408 = 0, $cmp416 = 0, $cmp429 = 0, $cmp437 = 0, $cmp461 = 0, $cmp473 = 0, $cmp50 = 0, $cmp50231 = 0, $cmp65 = 0, $cmp75 = 0, $cmp97 = 0, $cnt$0 = 0, $cnt$0$ph = 0, $cnt$1 = 0;
 var $cond149 = 0, $cond246 = 0, $cond350 = 0, $cond421 = 0, $conv120 = 0, $conv134 = 0, $conv164 = 0, $conv172 = 0, $conv175 = 0, $conv208 = 0, $conv230 = 0, $conv233 = 0, $conv32 = 0, $conv48 = 0, $conv48229 = 0, $conv69 = 0, $conv83 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0;
 var $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0$lcssa = 0, $fl$0237 = 0, $fl$1 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0217 = 0, $i$0217271 = 0, $i$0243 = 0, $i$1248 = 0, $i$2224 = 0, $i137 = 0, $i86 = 0;
 var $inc = 0, $inc48376 = 0, $inc48376$in = 0, $incdec$ptr = 0, $incdec$ptr171 = 0, $incdec$ptr23 = 0, $incdec$ptr378 = 0, $incdec$ptr405 = 0, $incdec$ptr45$pre$phiZZ2D = 0, $incdec$ptr62 = 0, $l$0 = 0, $l$0$ph = 0, $l$0$ph$be = 0, $l10n$0$ph = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $lnot = 0, $lnot$ext = 0, $mb = 0;
 var $or = 0, $or$cond = 0, $or$cond189 = 0, $or$cond190 = 0, $or$cond194 = 0, $or100 = 0, $or247 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$add323 = 0, $p$3 = 0, $p$4269 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0;
 var $retval$0 = 0, $s = 0, $shl = 0, $shl232 = 0, $shl60 = 0, $shr199 = 0, $spec$select = 0, $spec$select1 = 0, $spec$select193 = 0, $spec$select195 = 0, $spec$select2 = 0, $spec$select200 = 0, $spec$select201 = 0, $spec$select202 = 0, $spec$select203 = 0, $spec$select204 = 0, $spec$select205 = 0, $spec$select206 = 0, $spec$select207 = 0, $spec$select208 = 0;
 var $spec$select3 = 0, $st$0 = 0, $storemerge187236 = 0, $storemerge188 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast356 = 0, $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast268 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast357 = 0, $sub$ptr$rhs$cast427 = 0, $sub$ptr$sub = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub358 = 0, $sub$ptr$sub428 = 0, $sub101 = 0;
 var $sub131 = 0, $sub135 = 0, $sub165 = 0, $sub173 = 0, $sub176 = 0, $sub384 = 0, $sub42 = 0, $sub49 = 0, $sub49230 = 0, $sub49238 = 0, $sub80 = 0, $sub84 = 0, $t$0 = 0, $t$1 = 0, $tobool = 0, $tobool122 = 0, $tobool141 = 0, $tobool179 = 0, $tobool209 = 0, $tobool218 = 0;
 var $tobool25 = 0, $tobool256 = 0, $tobool265 = 0, $tobool28 = 0, $tobool291 = 0, $tobool296 = 0, $tobool315 = 0, $tobool34 = 0, $tobool345 = 0, $tobool352 = 0, $tobool375 = 0, $tobool402 = 0, $tobool454 = 0, $tobool457 = 0, $tobool465 = 0, $tobool477 = 0, $tobool55 = 0, $tobool55234 = 0, $tobool71 = 0, $tobool90 = 0;
 var $trunc = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0244 = 0, $ws$1249 = 0, $xor = 0, $xor444 = 0, $xor452 = 0, $z$0$lcssa = 0, $z$0226 = 0, $z$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $s = sp + 56 | 0;
 $arg = sp + 40 | 0;
 $buf = sp;
 $wc = sp + 48 | 0;
 $mb = sp + 60 | 0;
 HEAP32[$s >> 2] = $fmt;
 $tobool25 = ($f | 0) != (0 | 0);
 $add$ptr206 = $buf + 40 | 0;
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = $buf + 39 | 0;
 $arrayidx365 = $wc + 4 | 0;
 $148 = $fmt;
 $cnt$0$ph = 0;
 $l$0$ph = 0;
 $l10n$0$ph = 0;
 L1 : while (1) {
  $1 = $148;
  $cnt$0 = $cnt$0$ph;
  $l$0 = $l$0$ph;
  while (1) {
   $cmp = ($cnt$0 | 0) > -1;
   do {
    if ($cmp) {
     $sub = 2147483647 - $cnt$0 | 0;
     $cmp1 = ($l$0 | 0) > ($sub | 0);
     if ($cmp1) {
      HEAP32[144138] = 75;
      $cnt$1 = -1;
      break;
     } else {
      $add = $l$0 + $cnt$0 | 0;
      $cnt$1 = $add;
      break;
     }
    } else {
     $cnt$1 = $cnt$0;
    }
   } while (0);
   $0 = HEAP8[$1 >> 0] | 0;
   $tobool = $0 << 24 >> 24 == 0;
   if ($tobool) {
    label = 91;
    break L1;
   }
   $2 = $0;
   $3 = $1;
   L12 : while (1) {
    switch ($2 << 24 >> 24) {
    case 37:
     {
      label = 10;
      break L12;
      break;
     }
    case 0:
     {
      $7 = $3;
      $z$0$lcssa = $3;
      break L12;
      break;
     }
    default:
     {}
    }
    $incdec$ptr = $3 + 1 | 0;
    HEAP32[$s >> 2] = $incdec$ptr;
    $$pre = HEAP8[$incdec$ptr >> 0] | 0;
    $2 = $$pre;
    $3 = $incdec$ptr;
   }
   L15 : do {
    if ((label | 0) == 10) {
     label = 0;
     $4 = $3;
     $z$0226 = $3;
     while (1) {
      $arrayidx16 = $4 + 1 | 0;
      $5 = HEAP8[$arrayidx16 >> 0] | 0;
      $cmp18 = $5 << 24 >> 24 == 37;
      if (!$cmp18) {
       $7 = $4;
       $z$0$lcssa = $z$0226;
       break L15;
      }
      $incdec$ptr23 = $z$0226 + 1 | 0;
      $add$ptr = $4 + 2 | 0;
      HEAP32[$s >> 2] = $add$ptr;
      $6 = HEAP8[$add$ptr >> 0] | 0;
      $cmp13 = $6 << 24 >> 24 == 37;
      if ($cmp13) {
       $4 = $add$ptr;
       $z$0226 = $incdec$ptr23;
      } else {
       $7 = $add$ptr;
       $z$0$lcssa = $incdec$ptr23;
       break;
      }
     }
    }
   } while (0);
   $sub$ptr$lhs$cast = $z$0$lcssa;
   $sub$ptr$rhs$cast = $1;
   $sub$ptr$sub = $sub$ptr$lhs$cast - $sub$ptr$rhs$cast | 0;
   if ($tobool25) {
    _out($f, $1, $sub$ptr$sub);
   }
   $tobool28 = ($sub$ptr$sub | 0) == 0;
   if ($tobool28) {
    break;
   } else {
    $1 = $7;
    $cnt$0 = $cnt$1;
    $l$0 = $sub$ptr$sub;
   }
  }
  $arrayidx31 = $7 + 1 | 0;
  $8 = HEAP8[$arrayidx31 >> 0] | 0;
  $conv32 = $8 << 24 >> 24;
  $call33 = _isdigit($conv32) | 0;
  $tobool34 = ($call33 | 0) == 0;
  if ($tobool34) {
   $argpos$0 = -1;
   $incdec$ptr45$pre$phiZZ2D = $arrayidx31;
   $l10n$1 = $l10n$0$ph;
  } else {
   $arrayidx35 = $7 + 2 | 0;
   $9 = HEAP8[$arrayidx35 >> 0] | 0;
   $cmp37 = $9 << 24 >> 24 == 36;
   $sub42 = $conv32 + -48 | 0;
   $spec$select1 = $cmp37 ? 3 : 1;
   $spec$select2 = $cmp37 ? 1 : $l10n$0$ph;
   $spec$select3 = $cmp37 ? $sub42 : -1;
   $$pre38 = $7 + $spec$select1 | 0;
   $argpos$0 = $spec$select3;
   $incdec$ptr45$pre$phiZZ2D = $$pre38;
   $l10n$1 = $spec$select2;
  }
  HEAP32[$s >> 2] = $incdec$ptr45$pre$phiZZ2D;
  $10 = HEAP8[$incdec$ptr45$pre$phiZZ2D >> 0] | 0;
  $conv48229 = $10 << 24 >> 24;
  $sub49230 = $conv48229 + -32 | 0;
  $cmp50231 = $sub49230 >>> 0 > 31;
  $shl232 = 1 << $sub49230;
  $and233 = $shl232 & 75913;
  $tobool55234 = ($and233 | 0) == 0;
  $brmerge235 = $cmp50231 | $tobool55234;
  if ($brmerge235) {
   $$lcssa213 = $10;
   $12 = $incdec$ptr45$pre$phiZZ2D;
   $fl$0$lcssa = 0;
  } else {
   $fl$0237 = 0;
   $storemerge187236 = $incdec$ptr45$pre$phiZZ2D;
   $sub49238 = $sub49230;
   while (1) {
    $shl60 = 1 << $sub49238;
    $or = $shl60 | $fl$0237;
    $incdec$ptr62 = $storemerge187236 + 1 | 0;
    HEAP32[$s >> 2] = $incdec$ptr62;
    $11 = HEAP8[$incdec$ptr62 >> 0] | 0;
    $conv48 = $11 << 24 >> 24;
    $sub49 = $conv48 + -32 | 0;
    $cmp50 = $sub49 >>> 0 > 31;
    $shl = 1 << $sub49;
    $and = $shl & 75913;
    $tobool55 = ($and | 0) == 0;
    $brmerge = $cmp50 | $tobool55;
    if ($brmerge) {
     $$lcssa213 = $11;
     $12 = $incdec$ptr62;
     $fl$0$lcssa = $or;
     break;
    } else {
     $fl$0237 = $or;
     $storemerge187236 = $incdec$ptr62;
     $sub49238 = $sub49;
    }
   }
  }
  $cmp65 = $$lcssa213 << 24 >> 24 == 42;
  if ($cmp65) {
   $arrayidx68 = $12 + 1 | 0;
   $13 = HEAP8[$arrayidx68 >> 0] | 0;
   $conv69 = $13 << 24 >> 24;
   $call70 = _isdigit($conv69) | 0;
   $tobool71 = ($call70 | 0) == 0;
   if ($tobool71) {
    label = 26;
   } else {
    $arrayidx73 = $12 + 2 | 0;
    $14 = HEAP8[$arrayidx73 >> 0] | 0;
    $cmp75 = $14 << 24 >> 24 == 36;
    if ($cmp75) {
     $sub80 = $conv69 + -48 | 0;
     $arrayidx81 = $nl_type + ($sub80 << 2) | 0;
     HEAP32[$arrayidx81 >> 2] = 10;
     $15 = HEAP8[$arrayidx68 >> 0] | 0;
     $conv83 = $15 << 24 >> 24;
     $sub84 = $conv83 + -48 | 0;
     $i86 = $nl_arg + ($sub84 << 3) | 0;
     $16 = $i86;
     $17 = $16;
     $18 = HEAP32[$17 >> 2] | 0;
     $19 = $16 + 4 | 0;
     $20 = $19;
     $21 = HEAP32[$20 >> 2] | 0;
     $add$ptr88 = $12 + 3 | 0;
     $l10n$2 = 1;
     $storemerge188 = $add$ptr88;
     $w$0 = $18;
    } else {
     label = 26;
    }
   }
   if ((label | 0) == 26) {
    label = 0;
    $tobool90 = ($l10n$1 | 0) == 0;
    if (!$tobool90) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $arglist_current = HEAP32[$ap >> 2] | 0;
     $22 = $arglist_current;
     $23 = 0 + 4 | 0;
     $expanded4 = $23;
     $expanded = $expanded4 - 1 | 0;
     $24 = $22 + $expanded | 0;
     $25 = 0 + 4 | 0;
     $expanded8 = $25;
     $expanded7 = $expanded8 - 1 | 0;
     $expanded6 = $expanded7 ^ -1;
     $26 = $24 & $expanded6;
     $27 = $26;
     $28 = HEAP32[$27 >> 2] | 0;
     $arglist_next = $27 + 4 | 0;
     HEAP32[$ap >> 2] = $arglist_next;
     $l10n$2 = 0;
     $storemerge188 = $arrayidx68;
     $w$0 = $28;
    } else {
     $l10n$2 = 0;
     $storemerge188 = $arrayidx68;
     $w$0 = 0;
    }
   }
   HEAP32[$s >> 2] = $storemerge188;
   $cmp97 = ($w$0 | 0) < 0;
   $or100 = $fl$0$lcssa | 8192;
   $sub101 = 0 - $w$0 | 0;
   $spec$select200 = $cmp97 ? $or100 : $fl$0$lcssa;
   $spec$select201 = $cmp97 ? $sub101 : $w$0;
   $30 = $storemerge188;
   $fl$1 = $spec$select200;
   $l10n$3 = $l10n$2;
   $w$1 = $spec$select201;
  } else {
   $call104 = _getint($s) | 0;
   $cmp105 = ($call104 | 0) < 0;
   if ($cmp105) {
    $retval$0 = -1;
    break;
   }
   $$pre262 = HEAP32[$s >> 2] | 0;
   $30 = $$pre262;
   $fl$1 = $fl$0$lcssa;
   $l10n$3 = $l10n$1;
   $w$1 = $call104;
  }
  $29 = HEAP8[$30 >> 0] | 0;
  $cmp111 = $29 << 24 >> 24 == 46;
  do {
   if ($cmp111) {
    $arrayidx114 = $30 + 1 | 0;
    $31 = HEAP8[$arrayidx114 >> 0] | 0;
    $cmp116 = $31 << 24 >> 24 == 42;
    if (!$cmp116) {
     HEAP32[$s >> 2] = $arrayidx114;
     $call160 = _getint($s) | 0;
     $$pre263$pre = HEAP32[$s >> 2] | 0;
     $$pre263 = $$pre263$pre;
     $p$0 = $call160;
     break;
    }
    $arrayidx119 = $30 + 2 | 0;
    $32 = HEAP8[$arrayidx119 >> 0] | 0;
    $conv120 = $32 << 24 >> 24;
    $call121 = _isdigit($conv120) | 0;
    $tobool122 = ($call121 | 0) == 0;
    if (!$tobool122) {
     $arrayidx124 = $30 + 3 | 0;
     $33 = HEAP8[$arrayidx124 >> 0] | 0;
     $cmp126 = $33 << 24 >> 24 == 36;
     if ($cmp126) {
      $sub131 = $conv120 + -48 | 0;
      $arrayidx132 = $nl_type + ($sub131 << 2) | 0;
      HEAP32[$arrayidx132 >> 2] = 10;
      $34 = HEAP8[$arrayidx119 >> 0] | 0;
      $conv134 = $34 << 24 >> 24;
      $sub135 = $conv134 + -48 | 0;
      $i137 = $nl_arg + ($sub135 << 3) | 0;
      $35 = $i137;
      $36 = $35;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $35 + 4 | 0;
      $39 = $38;
      $40 = HEAP32[$39 >> 2] | 0;
      $add$ptr139 = $30 + 4 | 0;
      HEAP32[$s >> 2] = $add$ptr139;
      $$pre263 = $add$ptr139;
      $p$0 = $37;
      break;
     }
    }
    $tobool141 = ($l10n$3 | 0) == 0;
    if (!$tobool141) {
     $retval$0 = -1;
     break L1;
    }
    if ($tobool25) {
     $arglist_current2 = HEAP32[$ap >> 2] | 0;
     $41 = $arglist_current2;
     $42 = 0 + 4 | 0;
     $expanded11 = $42;
     $expanded10 = $expanded11 - 1 | 0;
     $43 = $41 + $expanded10 | 0;
     $44 = 0 + 4 | 0;
     $expanded15 = $44;
     $expanded14 = $expanded15 - 1 | 0;
     $expanded13 = $expanded14 ^ -1;
     $45 = $43 & $expanded13;
     $46 = $45;
     $47 = HEAP32[$46 >> 2] | 0;
     $arglist_next3 = $46 + 4 | 0;
     HEAP32[$ap >> 2] = $arglist_next3;
     $cond149 = $47;
    } else {
     $cond149 = 0;
    }
    HEAP32[$s >> 2] = $arrayidx119;
    $$pre263 = $arrayidx119;
    $p$0 = $cond149;
   } else {
    $$pre263 = $30;
    $p$0 = -1;
   }
  } while (0);
  $49 = $$pre263;
  $st$0 = 0;
  while (1) {
   $48 = HEAP8[$49 >> 0] | 0;
   $conv164 = $48 << 24 >> 24;
   $sub165 = $conv164 + -65 | 0;
   $cmp166 = $sub165 >>> 0 > 57;
   if ($cmp166) {
    $retval$0 = -1;
    break L1;
   }
   $incdec$ptr171 = $49 + 1 | 0;
   HEAP32[$s >> 2] = $incdec$ptr171;
   $50 = HEAP8[$49 >> 0] | 0;
   $conv172 = $50 << 24 >> 24;
   $sub173 = $conv172 + -65 | 0;
   $arrayidx174 = (41488 + ($st$0 * 58 | 0) | 0) + $sub173 | 0;
   $51 = HEAP8[$arrayidx174 >> 0] | 0;
   $conv175 = $51 & 255;
   $sub176 = $conv175 + -1 | 0;
   $cmp177 = $sub176 >>> 0 < 8;
   if ($cmp177) {
    $49 = $incdec$ptr171;
    $st$0 = $conv175;
   } else {
    break;
   }
  }
  $tobool179 = $51 << 24 >> 24 == 0;
  if ($tobool179) {
   $retval$0 = -1;
   break;
  }
  $cmp182 = $51 << 24 >> 24 == 19;
  $cmp185 = ($argpos$0 | 0) > -1;
  do {
   if ($cmp182) {
    if ($cmp185) {
     $retval$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($cmp185) {
     $arrayidx193 = $nl_type + ($argpos$0 << 2) | 0;
     HEAP32[$arrayidx193 >> 2] = $conv175;
     $52 = $nl_arg + ($argpos$0 << 3) | 0;
     $53 = $52;
     $54 = $53;
     $55 = HEAP32[$54 >> 2] | 0;
     $56 = $53 + 4 | 0;
     $57 = $56;
     $58 = HEAP32[$57 >> 2] | 0;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60 >> 2] = $55;
     $61 = $59 + 4 | 0;
     $62 = $61;
     HEAP32[$62 >> 2] = $58;
     label = 52;
     break;
    }
    if (!$tobool25) {
     $retval$0 = 0;
     break L1;
    }
    _pop_arg($arg, $conv175, $ap);
    label = 53;
   }
  } while (0);
  if ((label | 0) == 52) {
   label = 0;
   if ($tobool25) {
    label = 53;
   } else {
    $l$0$ph$be = 0;
   }
  }
  L74 : do {
   if ((label | 0) == 53) {
    label = 0;
    $63 = HEAP8[$49 >> 0] | 0;
    $conv208 = $63 << 24 >> 24;
    $tobool209 = ($st$0 | 0) != 0;
    $and211 = $conv208 & 15;
    $cmp212 = ($and211 | 0) == 3;
    $or$cond189 = $tobool209 & $cmp212;
    $and215 = $conv208 & -33;
    $t$0 = $or$cond189 ? $and215 : $conv208;
    $and217 = $fl$1 & 8192;
    $tobool218 = ($and217 | 0) == 0;
    $and220 = $fl$1 & -65537;
    $spec$select = $tobool218 ? $fl$1 : $and220;
    L76 : do {
     switch ($t$0 | 0) {
     case 110:
      {
       $trunc = $st$0 & 255;
       switch ($trunc << 24 >> 24) {
       case 0:
        {
         $70 = HEAP32[$arg >> 2] | 0;
         HEAP32[$70 >> 2] = $cnt$1;
         $l$0$ph$be = 0;
         break L74;
         break;
        }
       case 1:
        {
         $71 = HEAP32[$arg >> 2] | 0;
         HEAP32[$71 >> 2] = $cnt$1;
         $l$0$ph$be = 0;
         break L74;
         break;
        }
       case 2:
        {
         $72 = ($cnt$1 | 0) < 0;
         $73 = $72 << 31 >> 31;
         $74 = HEAP32[$arg >> 2] | 0;
         $75 = $74;
         $76 = $75;
         HEAP32[$76 >> 2] = $cnt$1;
         $77 = $75 + 4 | 0;
         $78 = $77;
         HEAP32[$78 >> 2] = $73;
         $l$0$ph$be = 0;
         break L74;
         break;
        }
       case 3:
        {
         $conv230 = $cnt$1 & 65535;
         $79 = HEAP32[$arg >> 2] | 0;
         HEAP16[$79 >> 1] = $conv230;
         $l$0$ph$be = 0;
         break L74;
         break;
        }
       case 4:
        {
         $conv233 = $cnt$1 & 255;
         $80 = HEAP32[$arg >> 2] | 0;
         HEAP8[$80 >> 0] = $conv233;
         $l$0$ph$be = 0;
         break L74;
         break;
        }
       case 6:
        {
         $81 = HEAP32[$arg >> 2] | 0;
         HEAP32[$81 >> 2] = $cnt$1;
         $l$0$ph$be = 0;
         break L74;
         break;
        }
       case 7:
        {
         $82 = ($cnt$1 | 0) < 0;
         $83 = $82 << 31 >> 31;
         $84 = HEAP32[$arg >> 2] | 0;
         $85 = $84;
         $86 = $85;
         HEAP32[$86 >> 2] = $cnt$1;
         $87 = $85 + 4 | 0;
         $88 = $87;
         HEAP32[$88 >> 2] = $83;
         $l$0$ph$be = 0;
         break L74;
         break;
        }
       default:
        {
         $l$0$ph$be = 0;
         break L74;
        }
       }
       break;
      }
     case 112:
      {
       $cmp241 = $p$0 >>> 0 > 8;
       $cond246 = $cmp241 ? $p$0 : 8;
       $or247 = $spec$select | 8;
       $fl$3 = $or247;
       $p$1 = $cond246;
       $t$1 = 120;
       label = 65;
       break;
      }
     case 88:
     case 120:
      {
       $fl$3 = $spec$select;
       $p$1 = $p$0;
       $t$1 = $t$0;
       label = 65;
       break;
      }
     case 111:
      {
       $99 = $arg;
       $100 = $99;
       $101 = HEAP32[$100 >> 2] | 0;
       $102 = $99 + 4 | 0;
       $103 = $102;
       $104 = HEAP32[$103 >> 2] | 0;
       $105 = _fmt_o($101, $104, $add$ptr206) | 0;
       $and264 = $spec$select & 8;
       $tobool265 = ($and264 | 0) == 0;
       $sub$ptr$rhs$cast268 = $105;
       $sub$ptr$sub269 = $sub$ptr$lhs$cast318 - $sub$ptr$rhs$cast268 | 0;
       $cmp271 = ($p$0 | 0) > ($sub$ptr$sub269 | 0);
       $add270 = $sub$ptr$sub269 + 1 | 0;
       $106 = $tobool265 | $cmp271;
       $spec$select204 = $106 ? $p$0 : $add270;
       $126 = $101;
       $128 = $104;
       $a$0 = $105;
       $fl$4 = $spec$select;
       $p$2 = $spec$select204;
       $pl$1 = 0;
       $prefix$1 = 46714;
       label = 71;
       break;
      }
     case 105:
     case 100:
      {
       $107 = $arg;
       $108 = $107;
       $109 = HEAP32[$108 >> 2] | 0;
       $110 = $107 + 4 | 0;
       $111 = $110;
       $112 = HEAP32[$111 >> 2] | 0;
       $113 = ($112 | 0) < 0;
       if ($113) {
        $114 = _i64Subtract(0, 0, $109 | 0, $112 | 0) | 0;
        $115 = getTempRet0() | 0;
        $116 = $arg;
        $117 = $116;
        HEAP32[$117 >> 2] = $114;
        $118 = $116 + 4 | 0;
        $119 = $118;
        HEAP32[$119 >> 2] = $115;
        $122 = $114;
        $123 = $115;
        $pl$0 = 1;
        $prefix$0 = 46714;
        label = 70;
        break L76;
       } else {
        $and290 = $spec$select & 2048;
        $tobool291 = ($and290 | 0) == 0;
        $and295 = $spec$select & 1;
        $tobool296 = ($and295 | 0) == 0;
        $$ = $tobool296 ? 46714 : 46716;
        $spec$select205 = $tobool291 ? $$ : 46715;
        $120 = $spec$select & 2049;
        $121 = ($120 | 0) != 0;
        $spec$select206 = $121 & 1;
        $122 = $109;
        $123 = $112;
        $pl$0 = $spec$select206;
        $prefix$0 = $spec$select205;
        label = 70;
        break L76;
       }
       break;
      }
     case 117:
      {
       $64 = $arg;
       $65 = $64;
       $66 = HEAP32[$65 >> 2] | 0;
       $67 = $64 + 4 | 0;
       $68 = $67;
       $69 = HEAP32[$68 >> 2] | 0;
       $122 = $66;
       $123 = $69;
       $pl$0 = 0;
       $prefix$0 = 46714;
       label = 70;
       break;
      }
     case 99:
      {
       $130 = $arg;
       $131 = $130;
       $132 = HEAP32[$131 >> 2] | 0;
       $133 = $130 + 4 | 0;
       $134 = $133;
       $135 = HEAP32[$134 >> 2] | 0;
       $136 = $132 & 255;
       HEAP8[$add$ptr341 >> 0] = $136;
       $a$1 = $add$ptr341;
       $fl$6 = $and220;
       $p$5 = 1;
       $pl$2 = 0;
       $prefix$2 = 46714;
       $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
       break;
      }
     case 115:
      {
       $137 = HEAP32[$arg >> 2] | 0;
       $tobool345 = ($137 | 0) == (0 | 0);
       $cond350 = $tobool345 ? 46759 : $137;
       $call351 = _memchr($cond350, $p$0) | 0;
       $tobool352 = ($call351 | 0) == (0 | 0);
       $sub$ptr$lhs$cast356 = $call351;
       $sub$ptr$rhs$cast357 = $cond350;
       $sub$ptr$sub358 = $sub$ptr$lhs$cast356 - $sub$ptr$rhs$cast357 | 0;
       $add$ptr354 = $cond350 + $p$0 | 0;
       $p$3 = $tobool352 ? $p$0 : $sub$ptr$sub358;
       $z$1 = $tobool352 ? $add$ptr354 : $call351;
       $$pre267 = $z$1;
       $a$1 = $cond350;
       $fl$6 = $and220;
       $p$5 = $p$3;
       $pl$2 = 0;
       $prefix$2 = 46714;
       $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $$pre267;
       break;
      }
     case 67:
      {
       $138 = $arg;
       $139 = $138;
       $140 = HEAP32[$139 >> 2] | 0;
       $141 = $138 + 4 | 0;
       $142 = $141;
       $143 = HEAP32[$142 >> 2] | 0;
       HEAP32[$wc >> 2] = $140;
       HEAP32[$arrayidx365 >> 2] = 0;
       HEAP32[$arg >> 2] = $wc;
       $149 = $wc;
       $150 = $wc;
       $p$4269 = -1;
       label = 78;
       break;
      }
     case 83:
      {
       $cmp372242 = ($p$0 | 0) == 0;
       if ($cmp372242) {
        _pad_524($f, 32, $w$1, 0, $spec$select);
        $i$0217271 = 0;
        label = 88;
        break L76;
       } else {
        $$pre36 = HEAP32[$arg >> 2] | 0;
        $149 = $$pre36;
        $150 = $$pre36;
        $p$4269 = $p$0;
        label = 78;
        break L76;
       }
       break;
      }
     case 65:
     case 71:
     case 70:
     case 69:
     case 97:
     case 103:
     case 102:
     case 101:
      {
       $146 = +HEAPF64[$arg >> 3];
       $call424 = _fmt_fp($f, $146, $w$1, $p$0, $spec$select, $t$0) | 0;
       $l$0$ph$be = $call424;
       break L74;
       break;
      }
     default:
      {
       $a$1 = $1;
       $fl$6 = $spec$select;
       $p$5 = $p$0;
       $pl$2 = 0;
       $prefix$2 = 46714;
       $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
      }
     }
    } while (0);
    L101 : do {
     if ((label | 0) == 65) {
      label = 0;
      $89 = $arg;
      $90 = $89;
      $91 = HEAP32[$90 >> 2] | 0;
      $92 = $89 + 4 | 0;
      $93 = $92;
      $94 = HEAP32[$93 >> 2] | 0;
      $and250 = $t$1 & 32;
      $95 = _fmt_x($91, $94, $add$ptr206, $and250) | 0;
      $96 = ($91 | 0) == 0;
      $97 = ($94 | 0) == 0;
      $98 = $96 & $97;
      $and255 = $fl$3 & 8;
      $tobool256 = ($and255 | 0) == 0;
      $or$cond190 = $tobool256 | $98;
      $shr199 = $t$1 >>> 4;
      $add$ptr258 = 46714 + $shr199 | 0;
      $spec$select202 = $or$cond190 ? 46714 : $add$ptr258;
      $spec$select203 = $or$cond190 ? 0 : 2;
      $126 = $91;
      $128 = $94;
      $a$0 = $95;
      $fl$4 = $fl$3;
      $p$2 = $p$1;
      $pl$1 = $spec$select203;
      $prefix$1 = $spec$select202;
      label = 71;
     } else if ((label | 0) == 70) {
      label = 0;
      $124 = _fmt_u($122, $123, $add$ptr206) | 0;
      $126 = $122;
      $128 = $123;
      $a$0 = $124;
      $fl$4 = $spec$select;
      $p$2 = $p$0;
      $pl$1 = $pl$0;
      $prefix$1 = $prefix$0;
      label = 71;
     } else if ((label | 0) == 78) {
      label = 0;
      $i$0243 = 0;
      $ws$0244 = $150;
      while (1) {
       $144 = HEAP32[$ws$0244 >> 2] | 0;
       $tobool375 = ($144 | 0) == 0;
       if ($tobool375) {
        $i$0217 = $i$0243;
        break;
       }
       $call379 = _wctomb($mb, $144) | 0;
       $cmp380 = ($call379 | 0) < 0;
       $sub384 = $p$4269 - $i$0243 | 0;
       $cmp385 = $call379 >>> 0 > $sub384 >>> 0;
       $or$cond194 = $cmp380 | $cmp385;
       if ($or$cond194) {
        label = 82;
        break;
       }
       $incdec$ptr378 = $ws$0244 + 4 | 0;
       $add390 = $call379 + $i$0243 | 0;
       $cmp372 = $p$4269 >>> 0 > $add390 >>> 0;
       if ($cmp372) {
        $i$0243 = $add390;
        $ws$0244 = $incdec$ptr378;
       } else {
        $i$0217 = $add390;
        break;
       }
      }
      if ((label | 0) == 82) {
       label = 0;
       if ($cmp380) {
        $retval$0 = -1;
        break L1;
       } else {
        $i$0217 = $i$0243;
       }
      }
      _pad_524($f, 32, $w$1, $i$0217, $spec$select);
      $cmp399247 = ($i$0217 | 0) == 0;
      if ($cmp399247) {
       $i$0217271 = 0;
       label = 88;
      } else {
       $i$1248 = 0;
       $ws$1249 = $149;
       while (1) {
        $145 = HEAP32[$ws$1249 >> 2] | 0;
        $tobool402 = ($145 | 0) == 0;
        if ($tobool402) {
         $i$0217271 = $i$0217;
         label = 88;
         break L101;
        }
        $call406 = _wctomb($mb, $145) | 0;
        $add407 = $call406 + $i$1248 | 0;
        $cmp408 = ($add407 | 0) > ($i$0217 | 0);
        if ($cmp408) {
         $i$0217271 = $i$0217;
         label = 88;
         break L101;
        }
        $incdec$ptr405 = $ws$1249 + 4 | 0;
        _out($f, $mb, $call406);
        $cmp399 = $add407 >>> 0 < $i$0217 >>> 0;
        if ($cmp399) {
         $i$1248 = $add407;
         $ws$1249 = $incdec$ptr405;
        } else {
         $i$0217271 = $i$0217;
         label = 88;
         break;
        }
       }
      }
     }
    } while (0);
    if ((label | 0) == 71) {
     label = 0;
     $cmp307 = ($p$2 | 0) > -1;
     $and310 = $fl$4 & -65537;
     $spec$select193 = $cmp307 ? $and310 : $fl$4;
     $125 = ($126 | 0) != 0;
     $127 = ($128 | 0) != 0;
     $129 = $125 | $127;
     $tobool315 = ($p$2 | 0) != 0;
     $or$cond = $tobool315 | $129;
     $sub$ptr$rhs$cast319 = $a$0;
     $sub$ptr$sub320 = $sub$ptr$lhs$cast318 - $sub$ptr$rhs$cast319 | 0;
     $lnot = $129 ^ 1;
     $lnot$ext = $lnot & 1;
     $add323 = $sub$ptr$sub320 + $lnot$ext | 0;
     $cmp324 = ($p$2 | 0) > ($add323 | 0);
     $p$2$add323 = $cmp324 ? $p$2 : $add323;
     $spec$select207 = $or$cond ? $p$2$add323 : 0;
     $spec$select208 = $or$cond ? $a$0 : $add$ptr206;
     $a$1 = $spec$select208;
     $fl$6 = $spec$select193;
     $p$5 = $spec$select207;
     $pl$2 = $pl$1;
     $prefix$2 = $prefix$1;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
    } else if ((label | 0) == 88) {
     label = 0;
     $xor = $spec$select ^ 8192;
     _pad_524($f, 32, $w$1, $i$0217271, $xor);
     $cmp416 = ($w$1 | 0) > ($i$0217271 | 0);
     $cond421 = $cmp416 ? $w$1 : $i$0217271;
     $l$0$ph$be = $cond421;
     break;
    }
    $sub$ptr$rhs$cast427 = $a$1;
    $sub$ptr$sub428 = $sub$ptr$lhs$cast426$pre$phiZZZZ2D - $sub$ptr$rhs$cast427 | 0;
    $cmp429 = ($p$5 | 0) < ($sub$ptr$sub428 | 0);
    $spec$select195 = $cmp429 ? $sub$ptr$sub428 : $p$5;
    $add436 = $spec$select195 + $pl$2 | 0;
    $cmp437 = ($w$1 | 0) < ($add436 | 0);
    $w$2 = $cmp437 ? $add436 : $w$1;
    _pad_524($f, 32, $w$2, $add436, $fl$6);
    _out($f, $prefix$2, $pl$2);
    $xor444 = $fl$6 ^ 65536;
    _pad_524($f, 48, $w$2, $add436, $xor444);
    _pad_524($f, 48, $spec$select195, $sub$ptr$sub428, 0);
    _out($f, $a$1, $sub$ptr$sub428);
    $xor452 = $fl$6 ^ 8192;
    _pad_524($f, 32, $w$2, $add436, $xor452);
    $l$0$ph$be = $w$2;
   }
  } while (0);
  $148 = $incdec$ptr171;
  $cnt$0$ph = $cnt$1;
  $l$0$ph = $l$0$ph$be;
  $l10n$0$ph = $l10n$3;
 }
 L122 : do {
  if ((label | 0) == 91) {
   $tobool454 = ($f | 0) == (0 | 0);
   if ($tobool454) {
    $tobool457 = ($l10n$0$ph | 0) == 0;
    if ($tobool457) {
     $retval$0 = 0;
    } else {
     $i$2224 = 1;
     while (1) {
      $arrayidx464 = $nl_type + ($i$2224 << 2) | 0;
      $147 = HEAP32[$arrayidx464 >> 2] | 0;
      $tobool465 = ($147 | 0) == 0;
      if ($tobool465) {
       break;
      }
      $add$ptr468 = $nl_arg + ($i$2224 << 3) | 0;
      _pop_arg($add$ptr468, $147, $ap);
      $inc = $i$2224 + 1 | 0;
      $cmp461 = $inc >>> 0 < 10;
      if ($cmp461) {
       $i$2224 = $inc;
      } else {
       $retval$0 = 1;
       break L122;
      }
     }
     $inc48376$in = $i$2224;
     while (1) {
      $inc48376 = $inc48376$in + 1 | 0;
      $cmp473 = $inc48376 >>> 0 < 10;
      if (!$cmp473) {
       $retval$0 = 1;
       break L122;
      }
      $arrayidx476$phi$trans$insert = $nl_type + ($inc48376 << 2) | 0;
      $$pre37 = HEAP32[$arrayidx476$phi$trans$insert >> 2] | 0;
      $tobool477 = ($$pre37 | 0) == 0;
      if ($tobool477) {
       $inc48376$in = $inc48376;
      } else {
       $retval$0 = -1;
       break;
      }
     }
    }
   } else {
    $retval$0 = $cnt$1;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _sc_reduce32($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr11 = 0, $add$ptr15 = 0, $add$ptr15$idx = 0, $add$ptr15$idx$val = 0, $add$ptr15$idx263 = 0, $add$ptr15$idx263$val = 0, $add$ptr15$val = 0, $add$ptr23 = 0, $add$ptr23$idx = 0, $add$ptr23$idx$val = 0, $add$ptr23$idx262 = 0, $add$ptr23$idx262$val = 0, $add$ptr23$val = 0, $add$ptr27 = 0, $add$ptr27$idx = 0, $add$ptr27$idx$val = 0;
 var $add$ptr27$idx261 = 0, $add$ptr27$idx261$val = 0, $add$ptr27$val = 0, $add$ptr3 = 0, $add$ptr3$idx = 0, $add$ptr3$idx$val = 0, $add$ptr3$idx264 = 0, $add$ptr3$idx264$val = 0, $add$ptr3$val = 0, $add$ptr34 = 0, $add$ptr34$idx = 0, $add$ptr34$idx$val = 0, $add$ptr34$idx260 = 0, $add$ptr34$idx260$val = 0, $add$ptr34$val = 0, $arrayidx223 = 0, $arrayidx226 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx253 = 0;
 var $arrayidx256 = 0, $arrayidx272 = 0, $arrayidx275 = 0, $arrayidx300 = 0, $arrayidx303 = 0, $arrayidx319 = 0, $arrayidx322 = 0, $arrayidx325 = 0, $s$idx = 0, $s$idx$val = 0, $s$idx265 = 0, $s$idx265$val = 0, $s$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $s$val = HEAP8[$s >> 0] | 0;
 $s$idx = $s + 1 | 0;
 $s$idx$val = HEAP8[$s$idx >> 0] | 0;
 $s$idx265 = $s + 2 | 0;
 $s$idx265$val = HEAP8[$s$idx265 >> 0] | 0;
 $0 = _load_3($s$val, $s$idx$val, $s$idx265$val) | 0;
 $1 = getTempRet0() | 0;
 $2 = $0 & 2097151;
 $3 = _load_4($s$idx265) | 0;
 $4 = getTempRet0() | 0;
 $5 = _bitshift64Lshr($3 | 0, $4 | 0, 5) | 0;
 $6 = getTempRet0() | 0;
 $7 = $5 & 2097151;
 $add$ptr3 = $s + 5 | 0;
 $add$ptr3$val = HEAP8[$add$ptr3 >> 0] | 0;
 $add$ptr3$idx = $s + 6 | 0;
 $add$ptr3$idx$val = HEAP8[$add$ptr3$idx >> 0] | 0;
 $add$ptr3$idx264 = $s + 7 | 0;
 $add$ptr3$idx264$val = HEAP8[$add$ptr3$idx264 >> 0] | 0;
 $8 = _load_3($add$ptr3$val, $add$ptr3$idx$val, $add$ptr3$idx264$val) | 0;
 $9 = getTempRet0() | 0;
 $10 = _bitshift64Lshr($8 | 0, $9 | 0, 2) | 0;
 $11 = getTempRet0() | 0;
 $12 = $10 & 2097151;
 $13 = _load_4($add$ptr3$idx264) | 0;
 $14 = getTempRet0() | 0;
 $15 = _bitshift64Lshr($13 | 0, $14 | 0, 7) | 0;
 $16 = getTempRet0() | 0;
 $17 = $15 & 2097151;
 $add$ptr11 = $s + 10 | 0;
 $18 = _load_4($add$ptr11) | 0;
 $19 = getTempRet0() | 0;
 $20 = _bitshift64Lshr($18 | 0, $19 | 0, 4) | 0;
 $21 = getTempRet0() | 0;
 $22 = $20 & 2097151;
 $add$ptr15 = $s + 13 | 0;
 $add$ptr15$val = HEAP8[$add$ptr15 >> 0] | 0;
 $add$ptr15$idx = $s + 14 | 0;
 $add$ptr15$idx$val = HEAP8[$add$ptr15$idx >> 0] | 0;
 $add$ptr15$idx263 = $s + 15 | 0;
 $add$ptr15$idx263$val = HEAP8[$add$ptr15$idx263 >> 0] | 0;
 $23 = _load_3($add$ptr15$val, $add$ptr15$idx$val, $add$ptr15$idx263$val) | 0;
 $24 = getTempRet0() | 0;
 $25 = _bitshift64Lshr($23 | 0, $24 | 0, 1) | 0;
 $26 = getTempRet0() | 0;
 $27 = $25 & 2097151;
 $28 = _load_4($add$ptr15$idx263) | 0;
 $29 = getTempRet0() | 0;
 $30 = _bitshift64Lshr($28 | 0, $29 | 0, 6) | 0;
 $31 = getTempRet0() | 0;
 $32 = $30 & 2097151;
 $add$ptr23 = $s + 18 | 0;
 $add$ptr23$val = HEAP8[$add$ptr23 >> 0] | 0;
 $add$ptr23$idx = $s + 19 | 0;
 $add$ptr23$idx$val = HEAP8[$add$ptr23$idx >> 0] | 0;
 $add$ptr23$idx262 = $s + 20 | 0;
 $add$ptr23$idx262$val = HEAP8[$add$ptr23$idx262 >> 0] | 0;
 $33 = _load_3($add$ptr23$val, $add$ptr23$idx$val, $add$ptr23$idx262$val) | 0;
 $34 = getTempRet0() | 0;
 $35 = _bitshift64Lshr($33 | 0, $34 | 0, 3) | 0;
 $36 = getTempRet0() | 0;
 $37 = $35 & 2097151;
 $add$ptr27 = $s + 21 | 0;
 $add$ptr27$val = HEAP8[$add$ptr27 >> 0] | 0;
 $add$ptr27$idx = $s + 22 | 0;
 $add$ptr27$idx$val = HEAP8[$add$ptr27$idx >> 0] | 0;
 $add$ptr27$idx261 = $s + 23 | 0;
 $add$ptr27$idx261$val = HEAP8[$add$ptr27$idx261 >> 0] | 0;
 $38 = _load_3($add$ptr27$val, $add$ptr27$idx$val, $add$ptr27$idx261$val) | 0;
 $39 = getTempRet0() | 0;
 $40 = $38 & 2097151;
 $41 = _load_4($add$ptr27$idx261) | 0;
 $42 = getTempRet0() | 0;
 $43 = _bitshift64Lshr($41 | 0, $42 | 0, 5) | 0;
 $44 = getTempRet0() | 0;
 $45 = $43 & 2097151;
 $add$ptr34 = $s + 26 | 0;
 $add$ptr34$val = HEAP8[$add$ptr34 >> 0] | 0;
 $add$ptr34$idx = $s + 27 | 0;
 $add$ptr34$idx$val = HEAP8[$add$ptr34$idx >> 0] | 0;
 $add$ptr34$idx260 = $s + 28 | 0;
 $add$ptr34$idx260$val = HEAP8[$add$ptr34$idx260 >> 0] | 0;
 $46 = _load_3($add$ptr34$val, $add$ptr34$idx$val, $add$ptr34$idx260$val) | 0;
 $47 = getTempRet0() | 0;
 $48 = _bitshift64Lshr($46 | 0, $47 | 0, 2) | 0;
 $49 = getTempRet0() | 0;
 $50 = $48 & 2097151;
 $51 = _load_4($add$ptr34$idx260) | 0;
 $52 = getTempRet0() | 0;
 $53 = _bitshift64Lshr($51 | 0, $52 | 0, 7) | 0;
 $54 = getTempRet0() | 0;
 $55 = _i64Add($2 | 0, 0, 1048576, 0) | 0;
 $56 = getTempRet0() | 0;
 $57 = _bitshift64Lshr($55 | 0, $56 | 0, 21) | 0;
 $58 = getTempRet0() | 0;
 $59 = _i64Add($7 | 0, 0, $57 | 0, $58 | 0) | 0;
 $60 = getTempRet0() | 0;
 $61 = $55 & 2097152;
 $62 = _i64Subtract($2 | 0, 0, $61 | 0, 0) | 0;
 $63 = getTempRet0() | 0;
 $64 = _i64Add($12 | 0, 0, 1048576, 0) | 0;
 $65 = getTempRet0() | 0;
 $66 = _bitshift64Lshr($64 | 0, $65 | 0, 21) | 0;
 $67 = getTempRet0() | 0;
 $68 = _i64Add($66 | 0, $67 | 0, $17 | 0, 0) | 0;
 $69 = getTempRet0() | 0;
 $70 = $64 & 2097152;
 $71 = _i64Add($22 | 0, 0, 1048576, 0) | 0;
 $72 = getTempRet0() | 0;
 $73 = _bitshift64Lshr($71 | 0, $72 | 0, 21) | 0;
 $74 = getTempRet0() | 0;
 $75 = _i64Add($27 | 0, 0, $73 | 0, $74 | 0) | 0;
 $76 = getTempRet0() | 0;
 $77 = $71 & 2097152;
 $78 = _i64Subtract($22 | 0, 0, $77 | 0, 0) | 0;
 $79 = getTempRet0() | 0;
 $80 = _i64Add($32 | 0, 0, 1048576, 0) | 0;
 $81 = getTempRet0() | 0;
 $82 = _bitshift64Lshr($80 | 0, $81 | 0, 21) | 0;
 $83 = getTempRet0() | 0;
 $84 = _i64Add($37 | 0, 0, $82 | 0, $83 | 0) | 0;
 $85 = getTempRet0() | 0;
 $86 = $80 & 2097152;
 $87 = _i64Subtract($32 | 0, 0, $86 | 0, 0) | 0;
 $88 = getTempRet0() | 0;
 $89 = _i64Add($40 | 0, 0, 1048576, 0) | 0;
 $90 = getTempRet0() | 0;
 $91 = _bitshift64Lshr($89 | 0, $90 | 0, 21) | 0;
 $92 = getTempRet0() | 0;
 $93 = _i64Add($45 | 0, 0, $91 | 0, $92 | 0) | 0;
 $94 = getTempRet0() | 0;
 $95 = $89 & 2097152;
 $96 = _i64Add($50 | 0, 0, 1048576, 0) | 0;
 $97 = getTempRet0() | 0;
 $98 = _bitshift64Lshr($96 | 0, $97 | 0, 21) | 0;
 $99 = getTempRet0() | 0;
 $100 = _i64Add($98 | 0, $99 | 0, $53 | 0, $54 | 0) | 0;
 $101 = getTempRet0() | 0;
 $102 = $96 & 2097152;
 $103 = _i64Add($59 | 0, $60 | 0, 1048576, 0) | 0;
 $104 = getTempRet0() | 0;
 $105 = _bitshift64Lshr($103 | 0, $104 | 0, 21) | 0;
 $106 = getTempRet0() | 0;
 $107 = $103 & 6291456;
 $108 = _i64Subtract($59 | 0, $60 | 0, $107 | 0, 0) | 0;
 $109 = getTempRet0() | 0;
 $110 = _i64Add($68 | 0, $69 | 0, 1048576, 0) | 0;
 $111 = getTempRet0() | 0;
 $112 = _bitshift64Lshr($110 | 0, $111 | 0, 21) | 0;
 $113 = getTempRet0() | 0;
 $114 = _i64Add($78 | 0, $79 | 0, $112 | 0, $113 | 0) | 0;
 $115 = getTempRet0() | 0;
 $116 = $110 & 6291456;
 $117 = _i64Subtract($68 | 0, $69 | 0, $116 | 0, 0) | 0;
 $118 = getTempRet0() | 0;
 $119 = _i64Add($75 | 0, $76 | 0, 1048576, 0) | 0;
 $120 = getTempRet0() | 0;
 $121 = _bitshift64Lshr($119 | 0, $120 | 0, 21) | 0;
 $122 = getTempRet0() | 0;
 $123 = _i64Add($87 | 0, $88 | 0, $121 | 0, $122 | 0) | 0;
 $124 = getTempRet0() | 0;
 $125 = $119 & 6291456;
 $126 = _i64Subtract($75 | 0, $76 | 0, $125 | 0, 0) | 0;
 $127 = getTempRet0() | 0;
 $128 = _i64Add($84 | 0, $85 | 0, 1048576, 0) | 0;
 $129 = getTempRet0() | 0;
 $130 = _bitshift64Lshr($128 | 0, $129 | 0, 21) | 0;
 $131 = getTempRet0() | 0;
 $132 = $128 & 6291456;
 $133 = _i64Subtract($84 | 0, $85 | 0, $132 | 0, 0) | 0;
 $134 = getTempRet0() | 0;
 $135 = _i64Add($93 | 0, $94 | 0, 1048576, 0) | 0;
 $136 = getTempRet0() | 0;
 $137 = _bitshift64Lshr($135 | 0, $136 | 0, 21) | 0;
 $138 = getTempRet0() | 0;
 $139 = $135 & 6291456;
 $140 = _i64Subtract($93 | 0, $94 | 0, $139 | 0, 0) | 0;
 $141 = getTempRet0() | 0;
 $142 = _i64Add($100 | 0, $101 | 0, 1048576, 0) | 0;
 $143 = getTempRet0() | 0;
 $144 = _bitshift64Lshr($142 | 0, $143 | 0, 21) | 0;
 $145 = getTempRet0() | 0;
 $146 = $142 & -2097152;
 $147 = $143 & 134217727;
 $148 = _i64Subtract($100 | 0, $101 | 0, $146 | 0, $147 | 0) | 0;
 $149 = getTempRet0() | 0;
 $150 = ___muldi3($144 | 0, $145 | 0, 666643, 0) | 0;
 $151 = getTempRet0() | 0;
 $152 = _i64Add($150 | 0, $151 | 0, $62 | 0, $63 | 0) | 0;
 $153 = getTempRet0() | 0;
 $154 = ___muldi3($144 | 0, $145 | 0, 470296, 0) | 0;
 $155 = getTempRet0() | 0;
 $156 = _i64Add($108 | 0, $109 | 0, $154 | 0, $155 | 0) | 0;
 $157 = getTempRet0() | 0;
 $158 = ___muldi3($144 | 0, $145 | 0, 654183, 0) | 0;
 $159 = getTempRet0() | 0;
 $160 = ___muldi3($144 | 0, $145 | 0, -997805, -1) | 0;
 $161 = getTempRet0() | 0;
 $162 = _i64Add($117 | 0, $118 | 0, $160 | 0, $161 | 0) | 0;
 $163 = getTempRet0() | 0;
 $164 = ___muldi3($144 | 0, $145 | 0, 136657, 0) | 0;
 $165 = getTempRet0() | 0;
 $166 = _i64Add($114 | 0, $115 | 0, $164 | 0, $165 | 0) | 0;
 $167 = getTempRet0() | 0;
 $168 = ___muldi3($144 | 0, $145 | 0, -683901, -1) | 0;
 $169 = getTempRet0() | 0;
 $170 = _i64Add($126 | 0, $127 | 0, $168 | 0, $169 | 0) | 0;
 $171 = getTempRet0() | 0;
 $172 = _bitshift64Ashr($152 | 0, $153 | 0, 21) | 0;
 $173 = getTempRet0() | 0;
 $174 = _i64Add($156 | 0, $157 | 0, $172 | 0, $173 | 0) | 0;
 $175 = getTempRet0() | 0;
 $176 = $152 & 2097151;
 $177 = _bitshift64Ashr($174 | 0, $175 | 0, 21) | 0;
 $178 = getTempRet0() | 0;
 $179 = _i64Add($12 | 0, 0, $105 | 0, $106 | 0) | 0;
 $180 = getTempRet0() | 0;
 $181 = _i64Subtract($179 | 0, $180 | 0, $70 | 0, 0) | 0;
 $182 = getTempRet0() | 0;
 $183 = _i64Add($181 | 0, $182 | 0, $158 | 0, $159 | 0) | 0;
 $184 = getTempRet0() | 0;
 $185 = _i64Add($183 | 0, $184 | 0, $177 | 0, $178 | 0) | 0;
 $186 = getTempRet0() | 0;
 $187 = $174 & 2097151;
 $188 = _bitshift64Ashr($185 | 0, $186 | 0, 21) | 0;
 $189 = getTempRet0() | 0;
 $190 = _i64Add($162 | 0, $163 | 0, $188 | 0, $189 | 0) | 0;
 $191 = getTempRet0() | 0;
 $192 = $185 & 2097151;
 $193 = _bitshift64Ashr($190 | 0, $191 | 0, 21) | 0;
 $194 = getTempRet0() | 0;
 $195 = _i64Add($166 | 0, $167 | 0, $193 | 0, $194 | 0) | 0;
 $196 = getTempRet0() | 0;
 $197 = $190 & 2097151;
 $198 = _bitshift64Ashr($195 | 0, $196 | 0, 21) | 0;
 $199 = getTempRet0() | 0;
 $200 = _i64Add($170 | 0, $171 | 0, $198 | 0, $199 | 0) | 0;
 $201 = getTempRet0() | 0;
 $202 = $195 & 2097151;
 $203 = _bitshift64Ashr($200 | 0, $201 | 0, 21) | 0;
 $204 = getTempRet0() | 0;
 $205 = _i64Add($123 | 0, $124 | 0, $203 | 0, $204 | 0) | 0;
 $206 = getTempRet0() | 0;
 $207 = $200 & 2097151;
 $208 = _bitshift64Ashr($205 | 0, $206 | 0, 21) | 0;
 $209 = getTempRet0() | 0;
 $210 = _i64Add($208 | 0, $209 | 0, $133 | 0, $134 | 0) | 0;
 $211 = getTempRet0() | 0;
 $212 = $205 & 2097151;
 $213 = _bitshift64Ashr($210 | 0, $211 | 0, 21) | 0;
 $214 = getTempRet0() | 0;
 $215 = _i64Add($130 | 0, $131 | 0, $40 | 0, 0) | 0;
 $216 = getTempRet0() | 0;
 $217 = _i64Subtract($215 | 0, $216 | 0, $95 | 0, 0) | 0;
 $218 = getTempRet0() | 0;
 $219 = _i64Add($217 | 0, $218 | 0, $213 | 0, $214 | 0) | 0;
 $220 = getTempRet0() | 0;
 $221 = $210 & 2097151;
 $222 = _bitshift64Ashr($219 | 0, $220 | 0, 21) | 0;
 $223 = getTempRet0() | 0;
 $224 = _i64Add($222 | 0, $223 | 0, $140 | 0, $141 | 0) | 0;
 $225 = getTempRet0() | 0;
 $226 = $219 & 2097151;
 $227 = _bitshift64Ashr($224 | 0, $225 | 0, 21) | 0;
 $228 = getTempRet0() | 0;
 $229 = _i64Add($50 | 0, 0, $137 | 0, $138 | 0) | 0;
 $230 = getTempRet0() | 0;
 $231 = _i64Subtract($229 | 0, $230 | 0, $102 | 0, 0) | 0;
 $232 = getTempRet0() | 0;
 $233 = _i64Add($231 | 0, $232 | 0, $227 | 0, $228 | 0) | 0;
 $234 = getTempRet0() | 0;
 $235 = $224 & 2097151;
 $236 = _bitshift64Ashr($233 | 0, $234 | 0, 21) | 0;
 $237 = getTempRet0() | 0;
 $238 = _i64Add($236 | 0, $237 | 0, $148 | 0, $149 | 0) | 0;
 $239 = getTempRet0() | 0;
 $240 = $233 & 2097151;
 $241 = _bitshift64Ashr($238 | 0, $239 | 0, 21) | 0;
 $242 = getTempRet0() | 0;
 $243 = $238 & 2097151;
 $244 = ___muldi3($241 | 0, $242 | 0, 666643, 0) | 0;
 $245 = getTempRet0() | 0;
 $246 = _i64Add($244 | 0, $245 | 0, $176 | 0, 0) | 0;
 $247 = getTempRet0() | 0;
 $248 = ___muldi3($241 | 0, $242 | 0, 470296, 0) | 0;
 $249 = getTempRet0() | 0;
 $250 = _i64Add($248 | 0, $249 | 0, $187 | 0, 0) | 0;
 $251 = getTempRet0() | 0;
 $252 = ___muldi3($241 | 0, $242 | 0, 654183, 0) | 0;
 $253 = getTempRet0() | 0;
 $254 = _i64Add($252 | 0, $253 | 0, $192 | 0, 0) | 0;
 $255 = getTempRet0() | 0;
 $256 = ___muldi3($241 | 0, $242 | 0, -997805, -1) | 0;
 $257 = getTempRet0() | 0;
 $258 = _i64Add($256 | 0, $257 | 0, $197 | 0, 0) | 0;
 $259 = getTempRet0() | 0;
 $260 = ___muldi3($241 | 0, $242 | 0, 136657, 0) | 0;
 $261 = getTempRet0() | 0;
 $262 = _i64Add($260 | 0, $261 | 0, $202 | 0, 0) | 0;
 $263 = getTempRet0() | 0;
 $264 = ___muldi3($241 | 0, $242 | 0, -683901, -1) | 0;
 $265 = getTempRet0() | 0;
 $266 = _i64Add($264 | 0, $265 | 0, $207 | 0, 0) | 0;
 $267 = getTempRet0() | 0;
 $268 = _bitshift64Ashr($246 | 0, $247 | 0, 21) | 0;
 $269 = getTempRet0() | 0;
 $270 = _i64Add($250 | 0, $251 | 0, $268 | 0, $269 | 0) | 0;
 $271 = getTempRet0() | 0;
 $272 = _bitshift64Ashr($270 | 0, $271 | 0, 21) | 0;
 $273 = getTempRet0() | 0;
 $274 = _i64Add($254 | 0, $255 | 0, $272 | 0, $273 | 0) | 0;
 $275 = getTempRet0() | 0;
 $276 = $270 & 2097151;
 $277 = _bitshift64Ashr($274 | 0, $275 | 0, 21) | 0;
 $278 = getTempRet0() | 0;
 $279 = _i64Add($258 | 0, $259 | 0, $277 | 0, $278 | 0) | 0;
 $280 = getTempRet0() | 0;
 $281 = $274 & 2097151;
 $282 = _bitshift64Ashr($279 | 0, $280 | 0, 21) | 0;
 $283 = getTempRet0() | 0;
 $284 = _i64Add($262 | 0, $263 | 0, $282 | 0, $283 | 0) | 0;
 $285 = getTempRet0() | 0;
 $286 = $279 & 2097151;
 $287 = _bitshift64Ashr($284 | 0, $285 | 0, 21) | 0;
 $288 = getTempRet0() | 0;
 $289 = _i64Add($266 | 0, $267 | 0, $287 | 0, $288 | 0) | 0;
 $290 = getTempRet0() | 0;
 $291 = $284 & 2097151;
 $292 = _bitshift64Ashr($289 | 0, $290 | 0, 21) | 0;
 $293 = getTempRet0() | 0;
 $294 = _i64Add($292 | 0, $293 | 0, $212 | 0, 0) | 0;
 $295 = getTempRet0() | 0;
 $296 = $289 & 2097151;
 $297 = _bitshift64Ashr($294 | 0, $295 | 0, 21) | 0;
 $298 = getTempRet0() | 0;
 $299 = _i64Add($297 | 0, $298 | 0, $221 | 0, 0) | 0;
 $300 = getTempRet0() | 0;
 $301 = $294 & 2097151;
 $302 = _bitshift64Ashr($299 | 0, $300 | 0, 21) | 0;
 $303 = getTempRet0() | 0;
 $304 = _i64Add($302 | 0, $303 | 0, $226 | 0, 0) | 0;
 $305 = getTempRet0() | 0;
 $306 = _bitshift64Ashr($304 | 0, $305 | 0, 21) | 0;
 $307 = getTempRet0() | 0;
 $308 = _i64Add($306 | 0, $307 | 0, $235 | 0, 0) | 0;
 $309 = getTempRet0() | 0;
 $310 = _bitshift64Ashr($308 | 0, $309 | 0, 21) | 0;
 $311 = getTempRet0() | 0;
 $312 = _i64Add($310 | 0, $311 | 0, $240 | 0, 0) | 0;
 $313 = getTempRet0() | 0;
 $314 = $308 & 2097151;
 $315 = _bitshift64Ashr($312 | 0, $313 | 0, 21) | 0;
 $316 = getTempRet0() | 0;
 $317 = _i64Add($315 | 0, $316 | 0, $243 | 0, 0) | 0;
 $318 = getTempRet0() | 0;
 $319 = $312 & 2097151;
 $320 = $246 & 255;
 HEAP8[$s >> 0] = $320;
 $321 = _bitshift64Lshr($246 | 0, $247 | 0, 8) | 0;
 $322 = getTempRet0() | 0;
 $323 = $321 & 255;
 HEAP8[$s$idx >> 0] = $323;
 $324 = _bitshift64Lshr($246 | 0, $247 | 0, 16) | 0;
 $325 = getTempRet0() | 0;
 $326 = $324 & 31;
 $327 = _bitshift64Shl($276 | 0, 0, 5) | 0;
 $328 = getTempRet0() | 0;
 $329 = $327 | $326;
 $330 = $329 & 255;
 HEAP8[$s$idx265 >> 0] = $330;
 $331 = _bitshift64Lshr($270 | 0, $271 | 0, 3) | 0;
 $332 = getTempRet0() | 0;
 $333 = $331 & 255;
 $arrayidx223 = $s + 3 | 0;
 HEAP8[$arrayidx223 >> 0] = $333;
 $334 = _bitshift64Lshr($270 | 0, $271 | 0, 11) | 0;
 $335 = getTempRet0() | 0;
 $336 = $334 & 255;
 $arrayidx226 = $s + 4 | 0;
 HEAP8[$arrayidx226 >> 0] = $336;
 $337 = _bitshift64Lshr($276 | 0, 0, 19) | 0;
 $338 = getTempRet0() | 0;
 $339 = _bitshift64Shl($281 | 0, 0, 2) | 0;
 $340 = getTempRet0() | 0;
 $341 = $339 | $337;
 $340 | $338;
 $342 = $341 & 255;
 HEAP8[$add$ptr3 >> 0] = $342;
 $343 = _bitshift64Lshr($274 | 0, $275 | 0, 6) | 0;
 $344 = getTempRet0() | 0;
 $345 = $343 & 255;
 HEAP8[$add$ptr3$idx >> 0] = $345;
 $346 = _bitshift64Lshr($281 | 0, 0, 14) | 0;
 $347 = getTempRet0() | 0;
 $348 = _bitshift64Shl($286 | 0, 0, 7) | 0;
 $349 = getTempRet0() | 0;
 $350 = $348 | $346;
 $349 | $347;
 $351 = $350 & 255;
 HEAP8[$add$ptr3$idx264 >> 0] = $351;
 $352 = _bitshift64Lshr($279 | 0, $280 | 0, 1) | 0;
 $353 = getTempRet0() | 0;
 $354 = $352 & 255;
 $arrayidx242 = $s + 8 | 0;
 HEAP8[$arrayidx242 >> 0] = $354;
 $355 = _bitshift64Lshr($279 | 0, $280 | 0, 9) | 0;
 $356 = getTempRet0() | 0;
 $357 = $355 & 255;
 $arrayidx245 = $s + 9 | 0;
 HEAP8[$arrayidx245 >> 0] = $357;
 $358 = _bitshift64Lshr($286 | 0, 0, 17) | 0;
 $359 = getTempRet0() | 0;
 $360 = _bitshift64Shl($291 | 0, 0, 4) | 0;
 $361 = getTempRet0() | 0;
 $362 = $360 | $358;
 $361 | $359;
 $363 = $362 & 255;
 HEAP8[$add$ptr11 >> 0] = $363;
 $364 = _bitshift64Lshr($284 | 0, $285 | 0, 4) | 0;
 $365 = getTempRet0() | 0;
 $366 = $364 & 255;
 $arrayidx253 = $s + 11 | 0;
 HEAP8[$arrayidx253 >> 0] = $366;
 $367 = _bitshift64Lshr($284 | 0, $285 | 0, 12) | 0;
 $368 = getTempRet0() | 0;
 $369 = $367 & 255;
 $arrayidx256 = $s + 12 | 0;
 HEAP8[$arrayidx256 >> 0] = $369;
 $370 = _bitshift64Lshr($291 | 0, 0, 20) | 0;
 $371 = getTempRet0() | 0;
 $372 = _bitshift64Shl($296 | 0, 0, 1) | 0;
 $373 = getTempRet0() | 0;
 $374 = $372 | $370;
 $373 | $371;
 $375 = $374 & 255;
 HEAP8[$add$ptr15 >> 0] = $375;
 $376 = _bitshift64Lshr($289 | 0, $290 | 0, 7) | 0;
 $377 = getTempRet0() | 0;
 $378 = $376 & 255;
 HEAP8[$add$ptr15$idx >> 0] = $378;
 $379 = _bitshift64Lshr($296 | 0, 0, 15) | 0;
 $380 = getTempRet0() | 0;
 $381 = _bitshift64Shl($301 | 0, 0, 6) | 0;
 $382 = getTempRet0() | 0;
 $383 = $381 | $379;
 $382 | $380;
 $384 = $383 & 255;
 HEAP8[$add$ptr15$idx263 >> 0] = $384;
 $385 = _bitshift64Lshr($294 | 0, $295 | 0, 2) | 0;
 $386 = getTempRet0() | 0;
 $387 = $385 & 255;
 $arrayidx272 = $s + 16 | 0;
 HEAP8[$arrayidx272 >> 0] = $387;
 $388 = _bitshift64Lshr($294 | 0, $295 | 0, 10) | 0;
 $389 = getTempRet0() | 0;
 $390 = $388 & 255;
 $arrayidx275 = $s + 17 | 0;
 HEAP8[$arrayidx275 >> 0] = $390;
 $391 = _bitshift64Lshr($301 | 0, 0, 18) | 0;
 $392 = getTempRet0() | 0;
 $393 = _bitshift64Shl($299 | 0, $300 | 0, 3) | 0;
 $394 = getTempRet0() | 0;
 $395 = $393 | $391;
 $394 | $392;
 $396 = $395 & 255;
 HEAP8[$add$ptr23 >> 0] = $396;
 $397 = _bitshift64Lshr($299 | 0, $300 | 0, 5) | 0;
 $398 = getTempRet0() | 0;
 $399 = $397 & 255;
 HEAP8[$add$ptr23$idx >> 0] = $399;
 $400 = _bitshift64Lshr($299 | 0, $300 | 0, 13) | 0;
 $401 = getTempRet0() | 0;
 $402 = $400 & 255;
 HEAP8[$add$ptr23$idx262 >> 0] = $402;
 $403 = $304 & 255;
 HEAP8[$add$ptr27 >> 0] = $403;
 $404 = _bitshift64Lshr($304 | 0, $305 | 0, 8) | 0;
 $405 = getTempRet0() | 0;
 $406 = $404 & 255;
 HEAP8[$add$ptr27$idx >> 0] = $406;
 $407 = _bitshift64Lshr($304 | 0, $305 | 0, 16) | 0;
 $408 = getTempRet0() | 0;
 $409 = $407 & 31;
 $410 = _bitshift64Shl($314 | 0, 0, 5) | 0;
 $411 = getTempRet0() | 0;
 $412 = $410 | $409;
 $413 = $412 & 255;
 HEAP8[$add$ptr27$idx261 >> 0] = $413;
 $414 = _bitshift64Lshr($308 | 0, $309 | 0, 3) | 0;
 $415 = getTempRet0() | 0;
 $416 = $414 & 255;
 $arrayidx300 = $s + 24 | 0;
 HEAP8[$arrayidx300 >> 0] = $416;
 $417 = _bitshift64Lshr($308 | 0, $309 | 0, 11) | 0;
 $418 = getTempRet0() | 0;
 $419 = $417 & 255;
 $arrayidx303 = $s + 25 | 0;
 HEAP8[$arrayidx303 >> 0] = $419;
 $420 = _bitshift64Lshr($314 | 0, 0, 19) | 0;
 $421 = getTempRet0() | 0;
 $422 = _bitshift64Shl($319 | 0, 0, 2) | 0;
 $423 = getTempRet0() | 0;
 $424 = $422 | $420;
 $423 | $421;
 $425 = $424 & 255;
 HEAP8[$add$ptr34 >> 0] = $425;
 $426 = _bitshift64Lshr($312 | 0, $313 | 0, 6) | 0;
 $427 = getTempRet0() | 0;
 $428 = $426 & 255;
 HEAP8[$add$ptr34$idx >> 0] = $428;
 $429 = _bitshift64Lshr($319 | 0, 0, 14) | 0;
 $430 = getTempRet0() | 0;
 $431 = _bitshift64Shl($317 | 0, $318 | 0, 7) | 0;
 $432 = getTempRet0() | 0;
 $433 = $431 | $429;
 $432 | $430;
 $434 = $433 & 255;
 HEAP8[$add$ptr34$idx260 >> 0] = $434;
 $435 = _bitshift64Lshr($317 | 0, $318 | 0, 1) | 0;
 $436 = getTempRet0() | 0;
 $437 = $435 & 255;
 $arrayidx319 = $s + 29 | 0;
 HEAP8[$arrayidx319 >> 0] = $437;
 $438 = _bitshift64Lshr($317 | 0, $318 | 0, 9) | 0;
 $439 = getTempRet0() | 0;
 $440 = $438 & 255;
 $arrayidx322 = $s + 30 | 0;
 HEAP8[$arrayidx322 >> 0] = $440;
 $441 = _bitshift64Ashr($317 | 0, $318 | 0, 17) | 0;
 $442 = getTempRet0() | 0;
 $443 = $441 & 255;
 $arrayidx325 = $s + 31 | 0;
 HEAP8[$arrayidx325 >> 0] = $443;
 return;
}

function _fe_sq2($h, $f) {
 $h = $h | 0;
 $f = $f | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx301 = 0, $arrayidx303 = 0, $arrayidx305 = 0, $arrayidx307 = 0, $arrayidx309 = 0, $arrayidx311 = 0, $arrayidx313 = 0, $arrayidx315 = 0, $arrayidx317 = 0, $arrayidx4 = 0, $arrayidx5 = 0;
 var $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $mul = 0, $mul10 = 0, $mul11 = 0, $mul12 = 0, $mul13 = 0, $mul14 = 0, $mul15 = 0, $mul16 = 0, $mul17 = 0, $mul18 = 0, $mul19 = 0, $mul20 = 0, $mul21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f >> 2] | 0;
 $arrayidx1 = $f + 4 | 0;
 $1 = HEAP32[$arrayidx1 >> 2] | 0;
 $arrayidx2 = $f + 8 | 0;
 $2 = HEAP32[$arrayidx2 >> 2] | 0;
 $arrayidx3 = $f + 12 | 0;
 $3 = HEAP32[$arrayidx3 >> 2] | 0;
 $arrayidx4 = $f + 16 | 0;
 $4 = HEAP32[$arrayidx4 >> 2] | 0;
 $arrayidx5 = $f + 20 | 0;
 $5 = HEAP32[$arrayidx5 >> 2] | 0;
 $arrayidx6 = $f + 24 | 0;
 $6 = HEAP32[$arrayidx6 >> 2] | 0;
 $arrayidx7 = $f + 28 | 0;
 $7 = HEAP32[$arrayidx7 >> 2] | 0;
 $arrayidx8 = $f + 32 | 0;
 $8 = HEAP32[$arrayidx8 >> 2] | 0;
 $arrayidx9 = $f + 36 | 0;
 $9 = HEAP32[$arrayidx9 >> 2] | 0;
 $mul = $0 << 1;
 $mul10 = $1 << 1;
 $mul11 = $2 << 1;
 $mul12 = $3 << 1;
 $mul13 = $4 << 1;
 $mul14 = $5 << 1;
 $mul15 = $6 << 1;
 $mul16 = $7 << 1;
 $mul17 = $5 * 38 | 0;
 $mul18 = $6 * 19 | 0;
 $mul19 = $7 * 38 | 0;
 $mul20 = $8 * 19 | 0;
 $mul21 = $9 * 38 | 0;
 $10 = ($0 | 0) < 0;
 $11 = $10 << 31 >> 31;
 $12 = ___muldi3($0 | 0, $11 | 0, $0 | 0, $11 | 0) | 0;
 $13 = getTempRet0() | 0;
 $14 = ($mul | 0) < 0;
 $15 = $14 << 31 >> 31;
 $16 = ($1 | 0) < 0;
 $17 = $16 << 31 >> 31;
 $18 = ___muldi3($mul | 0, $15 | 0, $1 | 0, $17 | 0) | 0;
 $19 = getTempRet0() | 0;
 $20 = ($2 | 0) < 0;
 $21 = $20 << 31 >> 31;
 $22 = ___muldi3($2 | 0, $21 | 0, $mul | 0, $15 | 0) | 0;
 $23 = getTempRet0() | 0;
 $24 = ($3 | 0) < 0;
 $25 = $24 << 31 >> 31;
 $26 = ___muldi3($3 | 0, $25 | 0, $mul | 0, $15 | 0) | 0;
 $27 = getTempRet0() | 0;
 $28 = ($4 | 0) < 0;
 $29 = $28 << 31 >> 31;
 $30 = ___muldi3($4 | 0, $29 | 0, $mul | 0, $15 | 0) | 0;
 $31 = getTempRet0() | 0;
 $32 = ($5 | 0) < 0;
 $33 = $32 << 31 >> 31;
 $34 = ___muldi3($5 | 0, $33 | 0, $mul | 0, $15 | 0) | 0;
 $35 = getTempRet0() | 0;
 $36 = ($6 | 0) < 0;
 $37 = $36 << 31 >> 31;
 $38 = ___muldi3($6 | 0, $37 | 0, $mul | 0, $15 | 0) | 0;
 $39 = getTempRet0() | 0;
 $40 = ($7 | 0) < 0;
 $41 = $40 << 31 >> 31;
 $42 = ___muldi3($7 | 0, $41 | 0, $mul | 0, $15 | 0) | 0;
 $43 = getTempRet0() | 0;
 $44 = ($8 | 0) < 0;
 $45 = $44 << 31 >> 31;
 $46 = ___muldi3($8 | 0, $45 | 0, $mul | 0, $15 | 0) | 0;
 $47 = getTempRet0() | 0;
 $48 = ($9 | 0) < 0;
 $49 = $48 << 31 >> 31;
 $50 = ___muldi3($9 | 0, $49 | 0, $mul | 0, $15 | 0) | 0;
 $51 = getTempRet0() | 0;
 $52 = ($mul10 | 0) < 0;
 $53 = $52 << 31 >> 31;
 $54 = ___muldi3($mul10 | 0, $53 | 0, $1 | 0, $17 | 0) | 0;
 $55 = getTempRet0() | 0;
 $56 = ___muldi3($mul10 | 0, $53 | 0, $2 | 0, $21 | 0) | 0;
 $57 = getTempRet0() | 0;
 $58 = ($mul12 | 0) < 0;
 $59 = $58 << 31 >> 31;
 $60 = ___muldi3($mul12 | 0, $59 | 0, $mul10 | 0, $53 | 0) | 0;
 $61 = getTempRet0() | 0;
 $62 = ___muldi3($4 | 0, $29 | 0, $mul10 | 0, $53 | 0) | 0;
 $63 = getTempRet0() | 0;
 $64 = ($mul14 | 0) < 0;
 $65 = $64 << 31 >> 31;
 $66 = ___muldi3($mul14 | 0, $65 | 0, $mul10 | 0, $53 | 0) | 0;
 $67 = getTempRet0() | 0;
 $68 = ___muldi3($6 | 0, $37 | 0, $mul10 | 0, $53 | 0) | 0;
 $69 = getTempRet0() | 0;
 $70 = ($mul16 | 0) < 0;
 $71 = $70 << 31 >> 31;
 $72 = ___muldi3($mul16 | 0, $71 | 0, $mul10 | 0, $53 | 0) | 0;
 $73 = getTempRet0() | 0;
 $74 = ___muldi3($8 | 0, $45 | 0, $mul10 | 0, $53 | 0) | 0;
 $75 = getTempRet0() | 0;
 $76 = ($mul21 | 0) < 0;
 $77 = $76 << 31 >> 31;
 $78 = ___muldi3($mul21 | 0, $77 | 0, $mul10 | 0, $53 | 0) | 0;
 $79 = getTempRet0() | 0;
 $80 = ___muldi3($2 | 0, $21 | 0, $2 | 0, $21 | 0) | 0;
 $81 = getTempRet0() | 0;
 $82 = ($mul11 | 0) < 0;
 $83 = $82 << 31 >> 31;
 $84 = ___muldi3($mul11 | 0, $83 | 0, $3 | 0, $25 | 0) | 0;
 $85 = getTempRet0() | 0;
 $86 = ___muldi3($4 | 0, $29 | 0, $mul11 | 0, $83 | 0) | 0;
 $87 = getTempRet0() | 0;
 $88 = ___muldi3($5 | 0, $33 | 0, $mul11 | 0, $83 | 0) | 0;
 $89 = getTempRet0() | 0;
 $90 = ___muldi3($6 | 0, $37 | 0, $mul11 | 0, $83 | 0) | 0;
 $91 = getTempRet0() | 0;
 $92 = ___muldi3($7 | 0, $41 | 0, $mul11 | 0, $83 | 0) | 0;
 $93 = getTempRet0() | 0;
 $94 = ($mul20 | 0) < 0;
 $95 = $94 << 31 >> 31;
 $96 = ___muldi3($mul20 | 0, $95 | 0, $mul11 | 0, $83 | 0) | 0;
 $97 = getTempRet0() | 0;
 $98 = ___muldi3($mul21 | 0, $77 | 0, $2 | 0, $21 | 0) | 0;
 $99 = getTempRet0() | 0;
 $100 = ___muldi3($mul12 | 0, $59 | 0, $3 | 0, $25 | 0) | 0;
 $101 = getTempRet0() | 0;
 $102 = ___muldi3($mul12 | 0, $59 | 0, $4 | 0, $29 | 0) | 0;
 $103 = getTempRet0() | 0;
 $104 = ___muldi3($mul14 | 0, $65 | 0, $mul12 | 0, $59 | 0) | 0;
 $105 = getTempRet0() | 0;
 $106 = ___muldi3($6 | 0, $37 | 0, $mul12 | 0, $59 | 0) | 0;
 $107 = getTempRet0() | 0;
 $108 = ($mul19 | 0) < 0;
 $109 = $108 << 31 >> 31;
 $110 = ___muldi3($mul19 | 0, $109 | 0, $mul12 | 0, $59 | 0) | 0;
 $111 = getTempRet0() | 0;
 $112 = ___muldi3($mul20 | 0, $95 | 0, $mul12 | 0, $59 | 0) | 0;
 $113 = getTempRet0() | 0;
 $114 = ___muldi3($mul21 | 0, $77 | 0, $mul12 | 0, $59 | 0) | 0;
 $115 = getTempRet0() | 0;
 $116 = ___muldi3($4 | 0, $29 | 0, $4 | 0, $29 | 0) | 0;
 $117 = getTempRet0() | 0;
 $118 = ($mul13 | 0) < 0;
 $119 = $118 << 31 >> 31;
 $120 = ___muldi3($mul13 | 0, $119 | 0, $5 | 0, $33 | 0) | 0;
 $121 = getTempRet0() | 0;
 $122 = ($mul18 | 0) < 0;
 $123 = $122 << 31 >> 31;
 $124 = ___muldi3($mul18 | 0, $123 | 0, $mul13 | 0, $119 | 0) | 0;
 $125 = getTempRet0() | 0;
 $126 = ___muldi3($mul19 | 0, $109 | 0, $4 | 0, $29 | 0) | 0;
 $127 = getTempRet0() | 0;
 $128 = ___muldi3($mul20 | 0, $95 | 0, $mul13 | 0, $119 | 0) | 0;
 $129 = getTempRet0() | 0;
 $130 = ___muldi3($mul21 | 0, $77 | 0, $4 | 0, $29 | 0) | 0;
 $131 = getTempRet0() | 0;
 $132 = ($mul17 | 0) < 0;
 $133 = $132 << 31 >> 31;
 $134 = ___muldi3($mul17 | 0, $133 | 0, $5 | 0, $33 | 0) | 0;
 $135 = getTempRet0() | 0;
 $136 = ___muldi3($mul18 | 0, $123 | 0, $mul14 | 0, $65 | 0) | 0;
 $137 = getTempRet0() | 0;
 $138 = ___muldi3($mul19 | 0, $109 | 0, $mul14 | 0, $65 | 0) | 0;
 $139 = getTempRet0() | 0;
 $140 = ___muldi3($mul20 | 0, $95 | 0, $mul14 | 0, $65 | 0) | 0;
 $141 = getTempRet0() | 0;
 $142 = ___muldi3($mul21 | 0, $77 | 0, $mul14 | 0, $65 | 0) | 0;
 $143 = getTempRet0() | 0;
 $144 = ___muldi3($mul18 | 0, $123 | 0, $6 | 0, $37 | 0) | 0;
 $145 = getTempRet0() | 0;
 $146 = ___muldi3($mul19 | 0, $109 | 0, $6 | 0, $37 | 0) | 0;
 $147 = getTempRet0() | 0;
 $148 = ($mul15 | 0) < 0;
 $149 = $148 << 31 >> 31;
 $150 = ___muldi3($mul20 | 0, $95 | 0, $mul15 | 0, $149 | 0) | 0;
 $151 = getTempRet0() | 0;
 $152 = ___muldi3($mul21 | 0, $77 | 0, $6 | 0, $37 | 0) | 0;
 $153 = getTempRet0() | 0;
 $154 = ___muldi3($mul19 | 0, $109 | 0, $7 | 0, $41 | 0) | 0;
 $155 = getTempRet0() | 0;
 $156 = ___muldi3($mul20 | 0, $95 | 0, $mul16 | 0, $71 | 0) | 0;
 $157 = getTempRet0() | 0;
 $158 = ___muldi3($mul21 | 0, $77 | 0, $mul16 | 0, $71 | 0) | 0;
 $159 = getTempRet0() | 0;
 $160 = ___muldi3($mul20 | 0, $95 | 0, $8 | 0, $45 | 0) | 0;
 $161 = getTempRet0() | 0;
 $162 = ___muldi3($mul21 | 0, $77 | 0, $8 | 0, $45 | 0) | 0;
 $163 = getTempRet0() | 0;
 $164 = ___muldi3($mul21 | 0, $77 | 0, $9 | 0, $49 | 0) | 0;
 $165 = getTempRet0() | 0;
 $166 = _i64Add($134 | 0, $135 | 0, $12 | 0, $13 | 0) | 0;
 $167 = getTempRet0() | 0;
 $168 = _i64Add($166 | 0, $167 | 0, $124 | 0, $125 | 0) | 0;
 $169 = getTempRet0() | 0;
 $170 = _i64Add($168 | 0, $169 | 0, $110 | 0, $111 | 0) | 0;
 $171 = getTempRet0() | 0;
 $172 = _i64Add($170 | 0, $171 | 0, $96 | 0, $97 | 0) | 0;
 $173 = getTempRet0() | 0;
 $174 = _i64Add($172 | 0, $173 | 0, $78 | 0, $79 | 0) | 0;
 $175 = getTempRet0() | 0;
 $176 = _i64Add($136 | 0, $137 | 0, $18 | 0, $19 | 0) | 0;
 $177 = getTempRet0() | 0;
 $178 = _i64Add($176 | 0, $177 | 0, $126 | 0, $127 | 0) | 0;
 $179 = getTempRet0() | 0;
 $180 = _i64Add($178 | 0, $179 | 0, $112 | 0, $113 | 0) | 0;
 $181 = getTempRet0() | 0;
 $182 = _i64Add($180 | 0, $181 | 0, $98 | 0, $99 | 0) | 0;
 $183 = getTempRet0() | 0;
 $184 = _i64Add($22 | 0, $23 | 0, $54 | 0, $55 | 0) | 0;
 $185 = getTempRet0() | 0;
 $186 = _i64Add($184 | 0, $185 | 0, $144 | 0, $145 | 0) | 0;
 $187 = getTempRet0() | 0;
 $188 = _i64Add($186 | 0, $187 | 0, $138 | 0, $139 | 0) | 0;
 $189 = getTempRet0() | 0;
 $190 = _i64Add($188 | 0, $189 | 0, $128 | 0, $129 | 0) | 0;
 $191 = getTempRet0() | 0;
 $192 = _i64Add($190 | 0, $191 | 0, $114 | 0, $115 | 0) | 0;
 $193 = getTempRet0() | 0;
 $194 = _i64Add($26 | 0, $27 | 0, $56 | 0, $57 | 0) | 0;
 $195 = getTempRet0() | 0;
 $196 = _i64Add($194 | 0, $195 | 0, $146 | 0, $147 | 0) | 0;
 $197 = getTempRet0() | 0;
 $198 = _i64Add($196 | 0, $197 | 0, $140 | 0, $141 | 0) | 0;
 $199 = getTempRet0() | 0;
 $200 = _i64Add($198 | 0, $199 | 0, $130 | 0, $131 | 0) | 0;
 $201 = getTempRet0() | 0;
 $202 = _i64Add($60 | 0, $61 | 0, $80 | 0, $81 | 0) | 0;
 $203 = getTempRet0() | 0;
 $204 = _i64Add($202 | 0, $203 | 0, $30 | 0, $31 | 0) | 0;
 $205 = getTempRet0() | 0;
 $206 = _i64Add($204 | 0, $205 | 0, $154 | 0, $155 | 0) | 0;
 $207 = getTempRet0() | 0;
 $208 = _i64Add($206 | 0, $207 | 0, $150 | 0, $151 | 0) | 0;
 $209 = getTempRet0() | 0;
 $210 = _i64Add($208 | 0, $209 | 0, $142 | 0, $143 | 0) | 0;
 $211 = getTempRet0() | 0;
 $212 = _i64Add($62 | 0, $63 | 0, $84 | 0, $85 | 0) | 0;
 $213 = getTempRet0() | 0;
 $214 = _i64Add($212 | 0, $213 | 0, $34 | 0, $35 | 0) | 0;
 $215 = getTempRet0() | 0;
 $216 = _i64Add($214 | 0, $215 | 0, $156 | 0, $157 | 0) | 0;
 $217 = getTempRet0() | 0;
 $218 = _i64Add($216 | 0, $217 | 0, $152 | 0, $153 | 0) | 0;
 $219 = getTempRet0() | 0;
 $220 = _i64Add($100 | 0, $101 | 0, $86 | 0, $87 | 0) | 0;
 $221 = getTempRet0() | 0;
 $222 = _i64Add($220 | 0, $221 | 0, $66 | 0, $67 | 0) | 0;
 $223 = getTempRet0() | 0;
 $224 = _i64Add($222 | 0, $223 | 0, $38 | 0, $39 | 0) | 0;
 $225 = getTempRet0() | 0;
 $226 = _i64Add($224 | 0, $225 | 0, $160 | 0, $161 | 0) | 0;
 $227 = getTempRet0() | 0;
 $228 = _i64Add($226 | 0, $227 | 0, $158 | 0, $159 | 0) | 0;
 $229 = getTempRet0() | 0;
 $230 = _i64Add($88 | 0, $89 | 0, $102 | 0, $103 | 0) | 0;
 $231 = getTempRet0() | 0;
 $232 = _i64Add($230 | 0, $231 | 0, $68 | 0, $69 | 0) | 0;
 $233 = getTempRet0() | 0;
 $234 = _i64Add($232 | 0, $233 | 0, $42 | 0, $43 | 0) | 0;
 $235 = getTempRet0() | 0;
 $236 = _i64Add($234 | 0, $235 | 0, $162 | 0, $163 | 0) | 0;
 $237 = getTempRet0() | 0;
 $238 = _i64Add($90 | 0, $91 | 0, $116 | 0, $117 | 0) | 0;
 $239 = getTempRet0() | 0;
 $240 = _i64Add($238 | 0, $239 | 0, $104 | 0, $105 | 0) | 0;
 $241 = getTempRet0() | 0;
 $242 = _i64Add($240 | 0, $241 | 0, $72 | 0, $73 | 0) | 0;
 $243 = getTempRet0() | 0;
 $244 = _i64Add($242 | 0, $243 | 0, $46 | 0, $47 | 0) | 0;
 $245 = getTempRet0() | 0;
 $246 = _i64Add($244 | 0, $245 | 0, $164 | 0, $165 | 0) | 0;
 $247 = getTempRet0() | 0;
 $248 = _i64Add($106 | 0, $107 | 0, $120 | 0, $121 | 0) | 0;
 $249 = getTempRet0() | 0;
 $250 = _i64Add($248 | 0, $249 | 0, $92 | 0, $93 | 0) | 0;
 $251 = getTempRet0() | 0;
 $252 = _i64Add($250 | 0, $251 | 0, $74 | 0, $75 | 0) | 0;
 $253 = getTempRet0() | 0;
 $254 = _i64Add($252 | 0, $253 | 0, $50 | 0, $51 | 0) | 0;
 $255 = getTempRet0() | 0;
 $256 = _bitshift64Shl($174 | 0, $175 | 0, 1) | 0;
 $257 = getTempRet0() | 0;
 $258 = _bitshift64Shl($182 | 0, $183 | 0, 1) | 0;
 $259 = getTempRet0() | 0;
 $260 = _bitshift64Shl($192 | 0, $193 | 0, 1) | 0;
 $261 = getTempRet0() | 0;
 $262 = _bitshift64Shl($200 | 0, $201 | 0, 1) | 0;
 $263 = getTempRet0() | 0;
 $264 = _bitshift64Shl($210 | 0, $211 | 0, 1) | 0;
 $265 = getTempRet0() | 0;
 $266 = _bitshift64Shl($218 | 0, $219 | 0, 1) | 0;
 $267 = getTempRet0() | 0;
 $268 = _bitshift64Shl($228 | 0, $229 | 0, 1) | 0;
 $269 = getTempRet0() | 0;
 $270 = _bitshift64Shl($236 | 0, $237 | 0, 1) | 0;
 $271 = getTempRet0() | 0;
 $272 = _bitshift64Shl($246 | 0, $247 | 0, 1) | 0;
 $273 = getTempRet0() | 0;
 $274 = _bitshift64Shl($254 | 0, $255 | 0, 1) | 0;
 $275 = getTempRet0() | 0;
 $276 = _i64Add($256 | 0, $257 | 0, 33554432, 0) | 0;
 $277 = getTempRet0() | 0;
 $278 = _bitshift64Ashr($276 | 0, $277 | 0, 26) | 0;
 $279 = getTempRet0() | 0;
 $280 = _i64Add($278 | 0, $279 | 0, $258 | 0, $259 | 0) | 0;
 $281 = getTempRet0() | 0;
 $282 = $276 & -67108864;
 $283 = _i64Subtract($256 | 0, $257 | 0, $282 | 0, $277 | 0) | 0;
 $284 = getTempRet0() | 0;
 $285 = _i64Add($264 | 0, $265 | 0, 33554432, 0) | 0;
 $286 = getTempRet0() | 0;
 $287 = _bitshift64Ashr($285 | 0, $286 | 0, 26) | 0;
 $288 = getTempRet0() | 0;
 $289 = _i64Add($287 | 0, $288 | 0, $266 | 0, $267 | 0) | 0;
 $290 = getTempRet0() | 0;
 $291 = $285 & -67108864;
 $292 = _i64Subtract($264 | 0, $265 | 0, $291 | 0, $286 | 0) | 0;
 $293 = getTempRet0() | 0;
 $294 = _i64Add($280 | 0, $281 | 0, 16777216, 0) | 0;
 $295 = getTempRet0() | 0;
 $296 = _bitshift64Ashr($294 | 0, $295 | 0, 25) | 0;
 $297 = getTempRet0() | 0;
 $298 = _i64Add($296 | 0, $297 | 0, $260 | 0, $261 | 0) | 0;
 $299 = getTempRet0() | 0;
 $300 = $294 & -33554432;
 $301 = _i64Subtract($280 | 0, $281 | 0, $300 | 0, 0) | 0;
 $302 = getTempRet0() | 0;
 $303 = _i64Add($289 | 0, $290 | 0, 16777216, 0) | 0;
 $304 = getTempRet0() | 0;
 $305 = _bitshift64Ashr($303 | 0, $304 | 0, 25) | 0;
 $306 = getTempRet0() | 0;
 $307 = _i64Add($305 | 0, $306 | 0, $268 | 0, $269 | 0) | 0;
 $308 = getTempRet0() | 0;
 $309 = $303 & -33554432;
 $310 = _i64Subtract($289 | 0, $290 | 0, $309 | 0, 0) | 0;
 $311 = getTempRet0() | 0;
 $312 = _i64Add($298 | 0, $299 | 0, 33554432, 0) | 0;
 $313 = getTempRet0() | 0;
 $314 = _bitshift64Ashr($312 | 0, $313 | 0, 26) | 0;
 $315 = getTempRet0() | 0;
 $316 = _i64Add($314 | 0, $315 | 0, $262 | 0, $263 | 0) | 0;
 $317 = getTempRet0() | 0;
 $318 = $312 & -67108864;
 $319 = _i64Subtract($298 | 0, $299 | 0, $318 | 0, 0) | 0;
 $320 = getTempRet0() | 0;
 $321 = _i64Add($307 | 0, $308 | 0, 33554432, 0) | 0;
 $322 = getTempRet0() | 0;
 $323 = _bitshift64Ashr($321 | 0, $322 | 0, 26) | 0;
 $324 = getTempRet0() | 0;
 $325 = _i64Add($323 | 0, $324 | 0, $270 | 0, $271 | 0) | 0;
 $326 = getTempRet0() | 0;
 $327 = $321 & -67108864;
 $328 = _i64Subtract($307 | 0, $308 | 0, $327 | 0, 0) | 0;
 $329 = getTempRet0() | 0;
 $330 = _i64Add($316 | 0, $317 | 0, 16777216, 0) | 0;
 $331 = getTempRet0() | 0;
 $332 = _bitshift64Ashr($330 | 0, $331 | 0, 25) | 0;
 $333 = getTempRet0() | 0;
 $334 = _i64Add($332 | 0, $333 | 0, $292 | 0, $293 | 0) | 0;
 $335 = getTempRet0() | 0;
 $336 = $330 & -33554432;
 $337 = _i64Subtract($316 | 0, $317 | 0, $336 | 0, 0) | 0;
 $338 = getTempRet0() | 0;
 $339 = _i64Add($325 | 0, $326 | 0, 16777216, 0) | 0;
 $340 = getTempRet0() | 0;
 $341 = _bitshift64Ashr($339 | 0, $340 | 0, 25) | 0;
 $342 = getTempRet0() | 0;
 $343 = _i64Add($341 | 0, $342 | 0, $272 | 0, $273 | 0) | 0;
 $344 = getTempRet0() | 0;
 $345 = $339 & -33554432;
 $346 = _i64Subtract($325 | 0, $326 | 0, $345 | 0, 0) | 0;
 $347 = getTempRet0() | 0;
 $348 = _i64Add($334 | 0, $335 | 0, 33554432, 0) | 0;
 $349 = getTempRet0() | 0;
 $350 = _bitshift64Lshr($348 | 0, $349 | 0, 26) | 0;
 $351 = getTempRet0() | 0;
 $352 = _i64Add($310 | 0, $311 | 0, $350 | 0, $351 | 0) | 0;
 $353 = getTempRet0() | 0;
 $354 = $348 & -67108864;
 $355 = _i64Subtract($334 | 0, $335 | 0, $354 | 0, 0) | 0;
 $356 = getTempRet0() | 0;
 $357 = _i64Add($343 | 0, $344 | 0, 33554432, 0) | 0;
 $358 = getTempRet0() | 0;
 $359 = _bitshift64Ashr($357 | 0, $358 | 0, 26) | 0;
 $360 = getTempRet0() | 0;
 $361 = _i64Add($359 | 0, $360 | 0, $274 | 0, $275 | 0) | 0;
 $362 = getTempRet0() | 0;
 $363 = $357 & -67108864;
 $364 = _i64Subtract($343 | 0, $344 | 0, $363 | 0, 0) | 0;
 $365 = getTempRet0() | 0;
 $366 = _i64Add($361 | 0, $362 | 0, 16777216, 0) | 0;
 $367 = getTempRet0() | 0;
 $368 = _bitshift64Ashr($366 | 0, $367 | 0, 25) | 0;
 $369 = getTempRet0() | 0;
 $370 = ___muldi3($368 | 0, $369 | 0, 19, 0) | 0;
 $371 = getTempRet0() | 0;
 $372 = _i64Add($370 | 0, $371 | 0, $283 | 0, $284 | 0) | 0;
 $373 = getTempRet0() | 0;
 $374 = $366 & -33554432;
 $375 = _i64Subtract($361 | 0, $362 | 0, $374 | 0, 0) | 0;
 $376 = getTempRet0() | 0;
 $377 = _i64Add($372 | 0, $373 | 0, 33554432, 0) | 0;
 $378 = getTempRet0() | 0;
 $379 = _bitshift64Lshr($377 | 0, $378 | 0, 26) | 0;
 $380 = getTempRet0() | 0;
 $381 = _i64Add($301 | 0, $302 | 0, $379 | 0, $380 | 0) | 0;
 $382 = getTempRet0() | 0;
 $383 = $377 & -67108864;
 $384 = _i64Subtract($372 | 0, $373 | 0, $383 | 0, 0) | 0;
 $385 = getTempRet0() | 0;
 HEAP32[$h >> 2] = $384;
 $arrayidx301 = $h + 4 | 0;
 HEAP32[$arrayidx301 >> 2] = $381;
 $arrayidx303 = $h + 8 | 0;
 HEAP32[$arrayidx303 >> 2] = $319;
 $arrayidx305 = $h + 12 | 0;
 HEAP32[$arrayidx305 >> 2] = $337;
 $arrayidx307 = $h + 16 | 0;
 HEAP32[$arrayidx307 >> 2] = $355;
 $arrayidx309 = $h + 20 | 0;
 HEAP32[$arrayidx309 >> 2] = $352;
 $arrayidx311 = $h + 24 | 0;
 HEAP32[$arrayidx311 >> 2] = $328;
 $arrayidx313 = $h + 28 | 0;
 HEAP32[$arrayidx313 >> 2] = $346;
 $arrayidx315 = $h + 32 | 0;
 HEAP32[$arrayidx315 >> 2] = $364;
 $arrayidx317 = $h + 36 | 0;
 HEAP32[$arrayidx317 >> 2] = $375;
 return;
}

function _fe_sq($h, $f) {
 $h = $h | 0;
 $f = $f | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx291 = 0, $arrayidx293 = 0, $arrayidx295 = 0, $arrayidx297 = 0, $arrayidx299 = 0, $arrayidx3 = 0, $arrayidx301 = 0, $arrayidx303 = 0, $arrayidx305 = 0, $arrayidx307 = 0, $arrayidx4 = 0, $arrayidx5 = 0;
 var $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $mul = 0, $mul10 = 0, $mul11 = 0, $mul12 = 0, $mul13 = 0, $mul14 = 0, $mul15 = 0, $mul16 = 0, $mul17 = 0, $mul18 = 0, $mul19 = 0, $mul20 = 0, $mul21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f >> 2] | 0;
 $arrayidx1 = $f + 4 | 0;
 $1 = HEAP32[$arrayidx1 >> 2] | 0;
 $arrayidx2 = $f + 8 | 0;
 $2 = HEAP32[$arrayidx2 >> 2] | 0;
 $arrayidx3 = $f + 12 | 0;
 $3 = HEAP32[$arrayidx3 >> 2] | 0;
 $arrayidx4 = $f + 16 | 0;
 $4 = HEAP32[$arrayidx4 >> 2] | 0;
 $arrayidx5 = $f + 20 | 0;
 $5 = HEAP32[$arrayidx5 >> 2] | 0;
 $arrayidx6 = $f + 24 | 0;
 $6 = HEAP32[$arrayidx6 >> 2] | 0;
 $arrayidx7 = $f + 28 | 0;
 $7 = HEAP32[$arrayidx7 >> 2] | 0;
 $arrayidx8 = $f + 32 | 0;
 $8 = HEAP32[$arrayidx8 >> 2] | 0;
 $arrayidx9 = $f + 36 | 0;
 $9 = HEAP32[$arrayidx9 >> 2] | 0;
 $mul = $0 << 1;
 $mul10 = $1 << 1;
 $mul11 = $2 << 1;
 $mul12 = $3 << 1;
 $mul13 = $4 << 1;
 $mul14 = $5 << 1;
 $mul15 = $6 << 1;
 $mul16 = $7 << 1;
 $mul17 = $5 * 38 | 0;
 $mul18 = $6 * 19 | 0;
 $mul19 = $7 * 38 | 0;
 $mul20 = $8 * 19 | 0;
 $mul21 = $9 * 38 | 0;
 $10 = ($0 | 0) < 0;
 $11 = $10 << 31 >> 31;
 $12 = ___muldi3($0 | 0, $11 | 0, $0 | 0, $11 | 0) | 0;
 $13 = getTempRet0() | 0;
 $14 = ($mul | 0) < 0;
 $15 = $14 << 31 >> 31;
 $16 = ($1 | 0) < 0;
 $17 = $16 << 31 >> 31;
 $18 = ___muldi3($mul | 0, $15 | 0, $1 | 0, $17 | 0) | 0;
 $19 = getTempRet0() | 0;
 $20 = ($2 | 0) < 0;
 $21 = $20 << 31 >> 31;
 $22 = ___muldi3($2 | 0, $21 | 0, $mul | 0, $15 | 0) | 0;
 $23 = getTempRet0() | 0;
 $24 = ($3 | 0) < 0;
 $25 = $24 << 31 >> 31;
 $26 = ___muldi3($3 | 0, $25 | 0, $mul | 0, $15 | 0) | 0;
 $27 = getTempRet0() | 0;
 $28 = ($4 | 0) < 0;
 $29 = $28 << 31 >> 31;
 $30 = ___muldi3($4 | 0, $29 | 0, $mul | 0, $15 | 0) | 0;
 $31 = getTempRet0() | 0;
 $32 = ($5 | 0) < 0;
 $33 = $32 << 31 >> 31;
 $34 = ___muldi3($5 | 0, $33 | 0, $mul | 0, $15 | 0) | 0;
 $35 = getTempRet0() | 0;
 $36 = ($6 | 0) < 0;
 $37 = $36 << 31 >> 31;
 $38 = ___muldi3($6 | 0, $37 | 0, $mul | 0, $15 | 0) | 0;
 $39 = getTempRet0() | 0;
 $40 = ($7 | 0) < 0;
 $41 = $40 << 31 >> 31;
 $42 = ___muldi3($7 | 0, $41 | 0, $mul | 0, $15 | 0) | 0;
 $43 = getTempRet0() | 0;
 $44 = ($8 | 0) < 0;
 $45 = $44 << 31 >> 31;
 $46 = ___muldi3($8 | 0, $45 | 0, $mul | 0, $15 | 0) | 0;
 $47 = getTempRet0() | 0;
 $48 = ($9 | 0) < 0;
 $49 = $48 << 31 >> 31;
 $50 = ___muldi3($9 | 0, $49 | 0, $mul | 0, $15 | 0) | 0;
 $51 = getTempRet0() | 0;
 $52 = ($mul10 | 0) < 0;
 $53 = $52 << 31 >> 31;
 $54 = ___muldi3($mul10 | 0, $53 | 0, $1 | 0, $17 | 0) | 0;
 $55 = getTempRet0() | 0;
 $56 = ___muldi3($mul10 | 0, $53 | 0, $2 | 0, $21 | 0) | 0;
 $57 = getTempRet0() | 0;
 $58 = ($mul12 | 0) < 0;
 $59 = $58 << 31 >> 31;
 $60 = ___muldi3($mul12 | 0, $59 | 0, $mul10 | 0, $53 | 0) | 0;
 $61 = getTempRet0() | 0;
 $62 = ___muldi3($4 | 0, $29 | 0, $mul10 | 0, $53 | 0) | 0;
 $63 = getTempRet0() | 0;
 $64 = ($mul14 | 0) < 0;
 $65 = $64 << 31 >> 31;
 $66 = ___muldi3($mul14 | 0, $65 | 0, $mul10 | 0, $53 | 0) | 0;
 $67 = getTempRet0() | 0;
 $68 = ___muldi3($6 | 0, $37 | 0, $mul10 | 0, $53 | 0) | 0;
 $69 = getTempRet0() | 0;
 $70 = ($mul16 | 0) < 0;
 $71 = $70 << 31 >> 31;
 $72 = ___muldi3($mul16 | 0, $71 | 0, $mul10 | 0, $53 | 0) | 0;
 $73 = getTempRet0() | 0;
 $74 = ___muldi3($8 | 0, $45 | 0, $mul10 | 0, $53 | 0) | 0;
 $75 = getTempRet0() | 0;
 $76 = ($mul21 | 0) < 0;
 $77 = $76 << 31 >> 31;
 $78 = ___muldi3($mul21 | 0, $77 | 0, $mul10 | 0, $53 | 0) | 0;
 $79 = getTempRet0() | 0;
 $80 = ___muldi3($2 | 0, $21 | 0, $2 | 0, $21 | 0) | 0;
 $81 = getTempRet0() | 0;
 $82 = ($mul11 | 0) < 0;
 $83 = $82 << 31 >> 31;
 $84 = ___muldi3($mul11 | 0, $83 | 0, $3 | 0, $25 | 0) | 0;
 $85 = getTempRet0() | 0;
 $86 = ___muldi3($4 | 0, $29 | 0, $mul11 | 0, $83 | 0) | 0;
 $87 = getTempRet0() | 0;
 $88 = ___muldi3($5 | 0, $33 | 0, $mul11 | 0, $83 | 0) | 0;
 $89 = getTempRet0() | 0;
 $90 = ___muldi3($6 | 0, $37 | 0, $mul11 | 0, $83 | 0) | 0;
 $91 = getTempRet0() | 0;
 $92 = ___muldi3($7 | 0, $41 | 0, $mul11 | 0, $83 | 0) | 0;
 $93 = getTempRet0() | 0;
 $94 = ($mul20 | 0) < 0;
 $95 = $94 << 31 >> 31;
 $96 = ___muldi3($mul20 | 0, $95 | 0, $mul11 | 0, $83 | 0) | 0;
 $97 = getTempRet0() | 0;
 $98 = ___muldi3($mul21 | 0, $77 | 0, $2 | 0, $21 | 0) | 0;
 $99 = getTempRet0() | 0;
 $100 = ___muldi3($mul12 | 0, $59 | 0, $3 | 0, $25 | 0) | 0;
 $101 = getTempRet0() | 0;
 $102 = ___muldi3($mul12 | 0, $59 | 0, $4 | 0, $29 | 0) | 0;
 $103 = getTempRet0() | 0;
 $104 = ___muldi3($mul14 | 0, $65 | 0, $mul12 | 0, $59 | 0) | 0;
 $105 = getTempRet0() | 0;
 $106 = ___muldi3($6 | 0, $37 | 0, $mul12 | 0, $59 | 0) | 0;
 $107 = getTempRet0() | 0;
 $108 = ($mul19 | 0) < 0;
 $109 = $108 << 31 >> 31;
 $110 = ___muldi3($mul19 | 0, $109 | 0, $mul12 | 0, $59 | 0) | 0;
 $111 = getTempRet0() | 0;
 $112 = ___muldi3($mul20 | 0, $95 | 0, $mul12 | 0, $59 | 0) | 0;
 $113 = getTempRet0() | 0;
 $114 = ___muldi3($mul21 | 0, $77 | 0, $mul12 | 0, $59 | 0) | 0;
 $115 = getTempRet0() | 0;
 $116 = ___muldi3($4 | 0, $29 | 0, $4 | 0, $29 | 0) | 0;
 $117 = getTempRet0() | 0;
 $118 = ($mul13 | 0) < 0;
 $119 = $118 << 31 >> 31;
 $120 = ___muldi3($mul13 | 0, $119 | 0, $5 | 0, $33 | 0) | 0;
 $121 = getTempRet0() | 0;
 $122 = ($mul18 | 0) < 0;
 $123 = $122 << 31 >> 31;
 $124 = ___muldi3($mul18 | 0, $123 | 0, $mul13 | 0, $119 | 0) | 0;
 $125 = getTempRet0() | 0;
 $126 = ___muldi3($mul19 | 0, $109 | 0, $4 | 0, $29 | 0) | 0;
 $127 = getTempRet0() | 0;
 $128 = ___muldi3($mul20 | 0, $95 | 0, $mul13 | 0, $119 | 0) | 0;
 $129 = getTempRet0() | 0;
 $130 = ___muldi3($mul21 | 0, $77 | 0, $4 | 0, $29 | 0) | 0;
 $131 = getTempRet0() | 0;
 $132 = ($mul17 | 0) < 0;
 $133 = $132 << 31 >> 31;
 $134 = ___muldi3($mul17 | 0, $133 | 0, $5 | 0, $33 | 0) | 0;
 $135 = getTempRet0() | 0;
 $136 = ___muldi3($mul18 | 0, $123 | 0, $mul14 | 0, $65 | 0) | 0;
 $137 = getTempRet0() | 0;
 $138 = ___muldi3($mul19 | 0, $109 | 0, $mul14 | 0, $65 | 0) | 0;
 $139 = getTempRet0() | 0;
 $140 = ___muldi3($mul20 | 0, $95 | 0, $mul14 | 0, $65 | 0) | 0;
 $141 = getTempRet0() | 0;
 $142 = ___muldi3($mul21 | 0, $77 | 0, $mul14 | 0, $65 | 0) | 0;
 $143 = getTempRet0() | 0;
 $144 = ___muldi3($mul18 | 0, $123 | 0, $6 | 0, $37 | 0) | 0;
 $145 = getTempRet0() | 0;
 $146 = ___muldi3($mul19 | 0, $109 | 0, $6 | 0, $37 | 0) | 0;
 $147 = getTempRet0() | 0;
 $148 = ($mul15 | 0) < 0;
 $149 = $148 << 31 >> 31;
 $150 = ___muldi3($mul20 | 0, $95 | 0, $mul15 | 0, $149 | 0) | 0;
 $151 = getTempRet0() | 0;
 $152 = ___muldi3($mul21 | 0, $77 | 0, $6 | 0, $37 | 0) | 0;
 $153 = getTempRet0() | 0;
 $154 = ___muldi3($mul19 | 0, $109 | 0, $7 | 0, $41 | 0) | 0;
 $155 = getTempRet0() | 0;
 $156 = ___muldi3($mul20 | 0, $95 | 0, $mul16 | 0, $71 | 0) | 0;
 $157 = getTempRet0() | 0;
 $158 = ___muldi3($mul21 | 0, $77 | 0, $mul16 | 0, $71 | 0) | 0;
 $159 = getTempRet0() | 0;
 $160 = ___muldi3($mul20 | 0, $95 | 0, $8 | 0, $45 | 0) | 0;
 $161 = getTempRet0() | 0;
 $162 = ___muldi3($mul21 | 0, $77 | 0, $8 | 0, $45 | 0) | 0;
 $163 = getTempRet0() | 0;
 $164 = ___muldi3($mul21 | 0, $77 | 0, $9 | 0, $49 | 0) | 0;
 $165 = getTempRet0() | 0;
 $166 = _i64Add($134 | 0, $135 | 0, $12 | 0, $13 | 0) | 0;
 $167 = getTempRet0() | 0;
 $168 = _i64Add($166 | 0, $167 | 0, $124 | 0, $125 | 0) | 0;
 $169 = getTempRet0() | 0;
 $170 = _i64Add($168 | 0, $169 | 0, $110 | 0, $111 | 0) | 0;
 $171 = getTempRet0() | 0;
 $172 = _i64Add($170 | 0, $171 | 0, $96 | 0, $97 | 0) | 0;
 $173 = getTempRet0() | 0;
 $174 = _i64Add($172 | 0, $173 | 0, $78 | 0, $79 | 0) | 0;
 $175 = getTempRet0() | 0;
 $176 = _i64Add($22 | 0, $23 | 0, $54 | 0, $55 | 0) | 0;
 $177 = getTempRet0() | 0;
 $178 = _i64Add($26 | 0, $27 | 0, $56 | 0, $57 | 0) | 0;
 $179 = getTempRet0() | 0;
 $180 = _i64Add($60 | 0, $61 | 0, $80 | 0, $81 | 0) | 0;
 $181 = getTempRet0() | 0;
 $182 = _i64Add($180 | 0, $181 | 0, $30 | 0, $31 | 0) | 0;
 $183 = getTempRet0() | 0;
 $184 = _i64Add($182 | 0, $183 | 0, $154 | 0, $155 | 0) | 0;
 $185 = getTempRet0() | 0;
 $186 = _i64Add($184 | 0, $185 | 0, $150 | 0, $151 | 0) | 0;
 $187 = getTempRet0() | 0;
 $188 = _i64Add($186 | 0, $187 | 0, $142 | 0, $143 | 0) | 0;
 $189 = getTempRet0() | 0;
 $190 = _i64Add($174 | 0, $175 | 0, 33554432, 0) | 0;
 $191 = getTempRet0() | 0;
 $192 = _bitshift64Ashr($190 | 0, $191 | 0, 26) | 0;
 $193 = getTempRet0() | 0;
 $194 = _i64Add($136 | 0, $137 | 0, $18 | 0, $19 | 0) | 0;
 $195 = getTempRet0() | 0;
 $196 = _i64Add($194 | 0, $195 | 0, $126 | 0, $127 | 0) | 0;
 $197 = getTempRet0() | 0;
 $198 = _i64Add($196 | 0, $197 | 0, $112 | 0, $113 | 0) | 0;
 $199 = getTempRet0() | 0;
 $200 = _i64Add($198 | 0, $199 | 0, $98 | 0, $99 | 0) | 0;
 $201 = getTempRet0() | 0;
 $202 = _i64Add($200 | 0, $201 | 0, $192 | 0, $193 | 0) | 0;
 $203 = getTempRet0() | 0;
 $204 = $190 & -67108864;
 $205 = _i64Subtract($174 | 0, $175 | 0, $204 | 0, $191 | 0) | 0;
 $206 = getTempRet0() | 0;
 $207 = _i64Add($188 | 0, $189 | 0, 33554432, 0) | 0;
 $208 = getTempRet0() | 0;
 $209 = _bitshift64Ashr($207 | 0, $208 | 0, 26) | 0;
 $210 = getTempRet0() | 0;
 $211 = _i64Add($62 | 0, $63 | 0, $84 | 0, $85 | 0) | 0;
 $212 = getTempRet0() | 0;
 $213 = _i64Add($211 | 0, $212 | 0, $34 | 0, $35 | 0) | 0;
 $214 = getTempRet0() | 0;
 $215 = _i64Add($213 | 0, $214 | 0, $156 | 0, $157 | 0) | 0;
 $216 = getTempRet0() | 0;
 $217 = _i64Add($215 | 0, $216 | 0, $152 | 0, $153 | 0) | 0;
 $218 = getTempRet0() | 0;
 $219 = _i64Add($217 | 0, $218 | 0, $209 | 0, $210 | 0) | 0;
 $220 = getTempRet0() | 0;
 $221 = $207 & -67108864;
 $222 = _i64Subtract($188 | 0, $189 | 0, $221 | 0, $208 | 0) | 0;
 $223 = getTempRet0() | 0;
 $224 = _i64Add($202 | 0, $203 | 0, 16777216, 0) | 0;
 $225 = getTempRet0() | 0;
 $226 = _bitshift64Ashr($224 | 0, $225 | 0, 25) | 0;
 $227 = getTempRet0() | 0;
 $228 = _i64Add($176 | 0, $177 | 0, $144 | 0, $145 | 0) | 0;
 $229 = getTempRet0() | 0;
 $230 = _i64Add($228 | 0, $229 | 0, $138 | 0, $139 | 0) | 0;
 $231 = getTempRet0() | 0;
 $232 = _i64Add($230 | 0, $231 | 0, $128 | 0, $129 | 0) | 0;
 $233 = getTempRet0() | 0;
 $234 = _i64Add($232 | 0, $233 | 0, $114 | 0, $115 | 0) | 0;
 $235 = getTempRet0() | 0;
 $236 = _i64Add($234 | 0, $235 | 0, $226 | 0, $227 | 0) | 0;
 $237 = getTempRet0() | 0;
 $238 = $224 & -33554432;
 $239 = _i64Subtract($202 | 0, $203 | 0, $238 | 0, 0) | 0;
 $240 = getTempRet0() | 0;
 $241 = _i64Add($219 | 0, $220 | 0, 16777216, 0) | 0;
 $242 = getTempRet0() | 0;
 $243 = _bitshift64Ashr($241 | 0, $242 | 0, 25) | 0;
 $244 = getTempRet0() | 0;
 $245 = _i64Add($100 | 0, $101 | 0, $86 | 0, $87 | 0) | 0;
 $246 = getTempRet0() | 0;
 $247 = _i64Add($245 | 0, $246 | 0, $66 | 0, $67 | 0) | 0;
 $248 = getTempRet0() | 0;
 $249 = _i64Add($247 | 0, $248 | 0, $38 | 0, $39 | 0) | 0;
 $250 = getTempRet0() | 0;
 $251 = _i64Add($249 | 0, $250 | 0, $160 | 0, $161 | 0) | 0;
 $252 = getTempRet0() | 0;
 $253 = _i64Add($251 | 0, $252 | 0, $158 | 0, $159 | 0) | 0;
 $254 = getTempRet0() | 0;
 $255 = _i64Add($253 | 0, $254 | 0, $243 | 0, $244 | 0) | 0;
 $256 = getTempRet0() | 0;
 $257 = $241 & -33554432;
 $258 = _i64Subtract($219 | 0, $220 | 0, $257 | 0, 0) | 0;
 $259 = getTempRet0() | 0;
 $260 = _i64Add($236 | 0, $237 | 0, 33554432, 0) | 0;
 $261 = getTempRet0() | 0;
 $262 = _bitshift64Ashr($260 | 0, $261 | 0, 26) | 0;
 $263 = getTempRet0() | 0;
 $264 = _i64Add($178 | 0, $179 | 0, $146 | 0, $147 | 0) | 0;
 $265 = getTempRet0() | 0;
 $266 = _i64Add($264 | 0, $265 | 0, $140 | 0, $141 | 0) | 0;
 $267 = getTempRet0() | 0;
 $268 = _i64Add($266 | 0, $267 | 0, $130 | 0, $131 | 0) | 0;
 $269 = getTempRet0() | 0;
 $270 = _i64Add($268 | 0, $269 | 0, $262 | 0, $263 | 0) | 0;
 $271 = getTempRet0() | 0;
 $272 = $260 & -67108864;
 $273 = _i64Subtract($236 | 0, $237 | 0, $272 | 0, 0) | 0;
 $274 = getTempRet0() | 0;
 $275 = _i64Add($255 | 0, $256 | 0, 33554432, 0) | 0;
 $276 = getTempRet0() | 0;
 $277 = _bitshift64Ashr($275 | 0, $276 | 0, 26) | 0;
 $278 = getTempRet0() | 0;
 $279 = _i64Add($88 | 0, $89 | 0, $102 | 0, $103 | 0) | 0;
 $280 = getTempRet0() | 0;
 $281 = _i64Add($279 | 0, $280 | 0, $68 | 0, $69 | 0) | 0;
 $282 = getTempRet0() | 0;
 $283 = _i64Add($281 | 0, $282 | 0, $42 | 0, $43 | 0) | 0;
 $284 = getTempRet0() | 0;
 $285 = _i64Add($283 | 0, $284 | 0, $162 | 0, $163 | 0) | 0;
 $286 = getTempRet0() | 0;
 $287 = _i64Add($285 | 0, $286 | 0, $277 | 0, $278 | 0) | 0;
 $288 = getTempRet0() | 0;
 $289 = $275 & -67108864;
 $290 = _i64Subtract($255 | 0, $256 | 0, $289 | 0, 0) | 0;
 $291 = getTempRet0() | 0;
 $292 = _i64Add($270 | 0, $271 | 0, 16777216, 0) | 0;
 $293 = getTempRet0() | 0;
 $294 = _bitshift64Ashr($292 | 0, $293 | 0, 25) | 0;
 $295 = getTempRet0() | 0;
 $296 = _i64Add($294 | 0, $295 | 0, $222 | 0, $223 | 0) | 0;
 $297 = getTempRet0() | 0;
 $298 = $292 & -33554432;
 $299 = _i64Subtract($270 | 0, $271 | 0, $298 | 0, 0) | 0;
 $300 = getTempRet0() | 0;
 $301 = _i64Add($287 | 0, $288 | 0, 16777216, 0) | 0;
 $302 = getTempRet0() | 0;
 $303 = _bitshift64Ashr($301 | 0, $302 | 0, 25) | 0;
 $304 = getTempRet0() | 0;
 $305 = _i64Add($90 | 0, $91 | 0, $116 | 0, $117 | 0) | 0;
 $306 = getTempRet0() | 0;
 $307 = _i64Add($305 | 0, $306 | 0, $104 | 0, $105 | 0) | 0;
 $308 = getTempRet0() | 0;
 $309 = _i64Add($307 | 0, $308 | 0, $72 | 0, $73 | 0) | 0;
 $310 = getTempRet0() | 0;
 $311 = _i64Add($309 | 0, $310 | 0, $46 | 0, $47 | 0) | 0;
 $312 = getTempRet0() | 0;
 $313 = _i64Add($311 | 0, $312 | 0, $164 | 0, $165 | 0) | 0;
 $314 = getTempRet0() | 0;
 $315 = _i64Add($313 | 0, $314 | 0, $303 | 0, $304 | 0) | 0;
 $316 = getTempRet0() | 0;
 $317 = $301 & -33554432;
 $318 = _i64Subtract($287 | 0, $288 | 0, $317 | 0, 0) | 0;
 $319 = getTempRet0() | 0;
 $320 = _i64Add($296 | 0, $297 | 0, 33554432, 0) | 0;
 $321 = getTempRet0() | 0;
 $322 = _bitshift64Lshr($320 | 0, $321 | 0, 26) | 0;
 $323 = getTempRet0() | 0;
 $324 = _i64Add($258 | 0, $259 | 0, $322 | 0, $323 | 0) | 0;
 $325 = getTempRet0() | 0;
 $326 = $320 & -67108864;
 $327 = _i64Subtract($296 | 0, $297 | 0, $326 | 0, 0) | 0;
 $328 = getTempRet0() | 0;
 $329 = _i64Add($315 | 0, $316 | 0, 33554432, 0) | 0;
 $330 = getTempRet0() | 0;
 $331 = _bitshift64Ashr($329 | 0, $330 | 0, 26) | 0;
 $332 = getTempRet0() | 0;
 $333 = _i64Add($106 | 0, $107 | 0, $120 | 0, $121 | 0) | 0;
 $334 = getTempRet0() | 0;
 $335 = _i64Add($333 | 0, $334 | 0, $92 | 0, $93 | 0) | 0;
 $336 = getTempRet0() | 0;
 $337 = _i64Add($335 | 0, $336 | 0, $74 | 0, $75 | 0) | 0;
 $338 = getTempRet0() | 0;
 $339 = _i64Add($337 | 0, $338 | 0, $50 | 0, $51 | 0) | 0;
 $340 = getTempRet0() | 0;
 $341 = _i64Add($339 | 0, $340 | 0, $331 | 0, $332 | 0) | 0;
 $342 = getTempRet0() | 0;
 $343 = $329 & -67108864;
 $344 = _i64Subtract($315 | 0, $316 | 0, $343 | 0, 0) | 0;
 $345 = getTempRet0() | 0;
 $346 = _i64Add($341 | 0, $342 | 0, 16777216, 0) | 0;
 $347 = getTempRet0() | 0;
 $348 = _bitshift64Ashr($346 | 0, $347 | 0, 25) | 0;
 $349 = getTempRet0() | 0;
 $350 = ___muldi3($348 | 0, $349 | 0, 19, 0) | 0;
 $351 = getTempRet0() | 0;
 $352 = _i64Add($350 | 0, $351 | 0, $205 | 0, $206 | 0) | 0;
 $353 = getTempRet0() | 0;
 $354 = $346 & -33554432;
 $355 = _i64Subtract($341 | 0, $342 | 0, $354 | 0, 0) | 0;
 $356 = getTempRet0() | 0;
 $357 = _i64Add($352 | 0, $353 | 0, 33554432, 0) | 0;
 $358 = getTempRet0() | 0;
 $359 = _bitshift64Lshr($357 | 0, $358 | 0, 26) | 0;
 $360 = getTempRet0() | 0;
 $361 = _i64Add($239 | 0, $240 | 0, $359 | 0, $360 | 0) | 0;
 $362 = getTempRet0() | 0;
 $363 = $357 & -67108864;
 $364 = _i64Subtract($352 | 0, $353 | 0, $363 | 0, 0) | 0;
 $365 = getTempRet0() | 0;
 HEAP32[$h >> 2] = $364;
 $arrayidx291 = $h + 4 | 0;
 HEAP32[$arrayidx291 >> 2] = $361;
 $arrayidx293 = $h + 8 | 0;
 HEAP32[$arrayidx293 >> 2] = $273;
 $arrayidx295 = $h + 12 | 0;
 HEAP32[$arrayidx295 >> 2] = $299;
 $arrayidx297 = $h + 16 | 0;
 HEAP32[$arrayidx297 >> 2] = $327;
 $arrayidx299 = $h + 20 | 0;
 HEAP32[$arrayidx299 >> 2] = $324;
 $arrayidx301 = $h + 24 | 0;
 HEAP32[$arrayidx301 >> 2] = $290;
 $arrayidx303 = $h + 28 | 0;
 HEAP32[$arrayidx303 >> 2] = $318;
 $arrayidx305 = $h + 32 | 0;
 HEAP32[$arrayidx305 >> 2] = $344;
 $arrayidx307 = $h + 36 | 0;
 HEAP32[$arrayidx307 >> 2] = $355;
 return;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0266 = 0;
 var $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R332$1 = 0, $R332$1$be = 0, $R332$1$ph = 0, $R332$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP360$1 = 0, $RP360$1$be = 0, $RP360$1$ph = 0, $T$0$lcssa = 0, $T$0265 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr217 = 0, $add$ptr261 = 0;
 var $add$ptr482 = 0, $add$ptr498 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add550 = 0, $add555 = 0, $add559 = 0, $add561 = 0, $add564 = 0, $and12 = 0, $and140 = 0, $and210 = 0, $and215 = 0, $and232 = 0, $and240 = 0, $and266 = 0, $and301 = 0;
 var $and410 = 0, $and46 = 0, $and495 = 0, $and5 = 0, $and512 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $and563 = 0, $and574 = 0, $and592 = 0, $and592263 = 0, $and8 = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx157 = 0, $arrayidx157$sink = 0, $arrayidx182 = 0;
 var $arrayidx188 = 0, $arrayidx198 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx427 = 0, $arrayidx427$sink = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx470 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx570 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk = 0, $bk275 = 0, $bk321 = 0;
 var $bk333 = 0, $bk355 = 0, $bk529 = 0, $bk531 = 0, $bk580 = 0, $bk611 = 0, $bk631 = 0, $bk634 = 0, $bk66 = 0, $bk73 = 0, $bk94 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $child569 = 0, $cmp = 0, $cmp$i = 0, $cmp100 = 0, $cmp104 = 0;
 var $cmp109 = 0, $cmp114 = 0, $cmp127 = 0, $cmp13 = 0, $cmp131 = 0, $cmp150 = 0, $cmp162 = 0, $cmp173 = 0, $cmp18 = 0, $cmp189 = 0, $cmp211 = 0, $cmp22 = 0, $cmp228 = 0, $cmp243 = 0, $cmp249 = 0, $cmp25 = 0, $cmp255 = 0, $cmp269 = 0, $cmp296 = 0, $cmp334 = 0;
 var $cmp363 = 0, $cmp368 = 0, $cmp375 = 0, $cmp380 = 0, $cmp395 = 0, $cmp401 = 0, $cmp42 = 0, $cmp420 = 0, $cmp432 = 0, $cmp445 = 0, $cmp461 = 0, $cmp484 = 0, $cmp502 = 0, $cmp536 = 0, $cmp540 = 0, $cmp584 = 0, $cmp593 = 0, $cmp593264 = 0, $cmp601 = 0, $cmp640 = 0;
 var $cmp74 = 0, $cond = 0, $cond254 = 0, $cond255 = 0, $dec = 0, $fd = 0, $fd273 = 0, $fd322 = 0, $fd338 = 0, $fd356 = 0, $fd530 = 0, $fd581 = 0, $fd612 = 0, $fd620 = 0, $fd633 = 0, $fd67 = 0, $fd78 = 0, $fd95 = 0, $head209 = 0, $head216 = 0;
 var $head231 = 0, $head248 = 0, $head260 = 0, $head4 = 0, $head481 = 0, $head497 = 0, $head591 = 0, $head591262 = 0, $idx$neg = 0, $index = 0, $index399 = 0, $index568 = 0, $neg = 0, $neg139 = 0, $neg300 = 0, $neg409 = 0, $next4$i = 0, $or = 0, $or247 = 0, $or259 = 0;
 var $or480 = 0, $or496 = 0, $or516 = 0, $or578 = 0, $p$1 = 0, $parent = 0, $parent170 = 0, $parent183 = 0, $parent199 = 0, $parent331 = 0, $parent442 = 0, $parent455 = 0, $parent471 = 0, $parent579 = 0, $parent610 = 0, $parent635 = 0, $psize$1 = 0, $psize$2 = 0, $shl138 = 0, $shl299 = 0;
 var $shl408 = 0, $shl45 = 0, $shl508 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl557 = 0, $shl560 = 0, $shl573 = 0, $shl590 = 0, $shl600 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $shr544 = 0, $shr548 = 0, $shr553 = 0, $shr558 = 0, $shr562 = 0;
 var $shr586 = 0, $shr597 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sub = 0, $sub547 = 0, $sub552 = 0, $sub556 = 0, $sub589 = 0, $tobool233 = 0, $tobool241 = 0, $tobool513 = 0, $tobool575 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($mem | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $add$ptr = $mem + -8 | 0;
 $0 = HEAP32[576580 >> 2] | 0;
 $head4 = $mem + -4 | 0;
 $1 = HEAP32[$head4 >> 2] | 0;
 $and5 = $1 & -8;
 $add$ptr6 = $add$ptr + $and5 | 0;
 $and8 = $1 & 1;
 $tobool9 = ($and8 | 0) == 0;
 do {
  if ($tobool9) {
   $2 = HEAP32[$add$ptr >> 2] | 0;
   $and12 = $1 & 3;
   $cmp13 = ($and12 | 0) == 0;
   if ($cmp13) {
    return;
   }
   $idx$neg = 0 - $2 | 0;
   $add$ptr16 = $add$ptr + $idx$neg | 0;
   $add17 = $2 + $and5 | 0;
   $cmp18 = $add$ptr16 >>> 0 < $0 >>> 0;
   if ($cmp18) {
    return;
   }
   $3 = HEAP32[576584 >> 2] | 0;
   $cmp22 = ($3 | 0) == ($add$ptr16 | 0);
   if ($cmp22) {
    $head209 = $add$ptr6 + 4 | 0;
    $20 = HEAP32[$head209 >> 2] | 0;
    $and210 = $20 & 3;
    $cmp211 = ($and210 | 0) == 3;
    if (!$cmp211) {
     $21 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break;
    }
    $add$ptr217 = $add$ptr16 + $add17 | 0;
    $head216 = $add$ptr16 + 4 | 0;
    $or = $add17 | 1;
    $and215 = $20 & -2;
    HEAP32[576572 >> 2] = $add17;
    HEAP32[$head209 >> 2] = $and215;
    HEAP32[$head216 >> 2] = $or;
    HEAP32[$add$ptr217 >> 2] = $add17;
    return;
   }
   $shr = $2 >>> 3;
   $cmp25 = $2 >>> 0 < 256;
   if ($cmp25) {
    $fd = $add$ptr16 + 8 | 0;
    $4 = HEAP32[$fd >> 2] | 0;
    $bk = $add$ptr16 + 12 | 0;
    $5 = HEAP32[$bk >> 2] | 0;
    $cmp42 = ($5 | 0) == ($4 | 0);
    if ($cmp42) {
     $shl45 = 1 << $shr;
     $neg = $shl45 ^ -1;
     $6 = HEAP32[144141] | 0;
     $and46 = $6 & $neg;
     HEAP32[144141] = $and46;
     $21 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break;
    } else {
     $bk66 = $4 + 12 | 0;
     HEAP32[$bk66 >> 2] = $5;
     $fd67 = $5 + 8 | 0;
     HEAP32[$fd67 >> 2] = $4;
     $21 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break;
    }
   }
   $parent = $add$ptr16 + 24 | 0;
   $7 = HEAP32[$parent >> 2] | 0;
   $bk73 = $add$ptr16 + 12 | 0;
   $8 = HEAP32[$bk73 >> 2] | 0;
   $cmp74 = ($8 | 0) == ($add$ptr16 | 0);
   do {
    if ($cmp74) {
     $child = $add$ptr16 + 16 | 0;
     $arrayidx99 = $child + 4 | 0;
     $10 = HEAP32[$arrayidx99 >> 2] | 0;
     $cmp100 = ($10 | 0) == (0 | 0);
     if ($cmp100) {
      $11 = HEAP32[$child >> 2] | 0;
      $cmp104 = ($11 | 0) == (0 | 0);
      if ($cmp104) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $11;
       $RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $10;
      $RP$1$ph = $arrayidx99;
     }
     $R$1 = $R$1$ph;
     $RP$1 = $RP$1$ph;
     while (1) {
      $arrayidx108 = $R$1 + 20 | 0;
      $12 = HEAP32[$arrayidx108 >> 2] | 0;
      $cmp109 = ($12 | 0) == (0 | 0);
      if ($cmp109) {
       $arrayidx113 = $R$1 + 16 | 0;
       $13 = HEAP32[$arrayidx113 >> 2] | 0;
       $cmp114 = ($13 | 0) == (0 | 0);
       if ($cmp114) {
        break;
       } else {
        $R$1$be = $13;
        $RP$1$be = $arrayidx113;
       }
      } else {
       $R$1$be = $12;
       $RP$1$be = $arrayidx108;
      }
      $R$1 = $R$1$be;
      $RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1 >> 2] = 0;
     $R$3 = $R$1;
    } else {
     $fd78 = $add$ptr16 + 8 | 0;
     $9 = HEAP32[$fd78 >> 2] | 0;
     $bk94 = $9 + 12 | 0;
     HEAP32[$bk94 >> 2] = $8;
     $fd95 = $8 + 8 | 0;
     HEAP32[$fd95 >> 2] = $9;
     $R$3 = $8;
    }
   } while (0);
   $cmp127 = ($7 | 0) == (0 | 0);
   if ($cmp127) {
    $21 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
   } else {
    $index = $add$ptr16 + 28 | 0;
    $14 = HEAP32[$index >> 2] | 0;
    $arrayidx130 = 576868 + ($14 << 2) | 0;
    $15 = HEAP32[$arrayidx130 >> 2] | 0;
    $cmp131 = ($15 | 0) == ($add$ptr16 | 0);
    if ($cmp131) {
     HEAP32[$arrayidx130 >> 2] = $R$3;
     $cond254 = ($R$3 | 0) == (0 | 0);
     if ($cond254) {
      $shl138 = 1 << $14;
      $neg139 = $shl138 ^ -1;
      $16 = HEAP32[576568 >> 2] | 0;
      $and140 = $16 & $neg139;
      HEAP32[576568 >> 2] = $and140;
      $21 = $add$ptr16;
      $p$1 = $add$ptr16;
      $psize$1 = $add17;
      break;
     }
    } else {
     $arrayidx149 = $7 + 16 | 0;
     $17 = HEAP32[$arrayidx149 >> 2] | 0;
     $cmp150 = ($17 | 0) == ($add$ptr16 | 0);
     $arrayidx157 = $7 + 20 | 0;
     $arrayidx157$sink = $cmp150 ? $arrayidx149 : $arrayidx157;
     HEAP32[$arrayidx157$sink >> 2] = $R$3;
     $cmp162 = ($R$3 | 0) == (0 | 0);
     if ($cmp162) {
      $21 = $add$ptr16;
      $p$1 = $add$ptr16;
      $psize$1 = $add17;
      break;
     }
    }
    $parent170 = $R$3 + 24 | 0;
    HEAP32[$parent170 >> 2] = $7;
    $child171 = $add$ptr16 + 16 | 0;
    $18 = HEAP32[$child171 >> 2] | 0;
    $cmp173 = ($18 | 0) == (0 | 0);
    if (!$cmp173) {
     $arrayidx182 = $R$3 + 16 | 0;
     HEAP32[$arrayidx182 >> 2] = $18;
     $parent183 = $18 + 24 | 0;
     HEAP32[$parent183 >> 2] = $R$3;
    }
    $arrayidx188 = $child171 + 4 | 0;
    $19 = HEAP32[$arrayidx188 >> 2] | 0;
    $cmp189 = ($19 | 0) == (0 | 0);
    if ($cmp189) {
     $21 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
    } else {
     $arrayidx198 = $R$3 + 20 | 0;
     HEAP32[$arrayidx198 >> 2] = $19;
     $parent199 = $19 + 24 | 0;
     HEAP32[$parent199 >> 2] = $R$3;
     $21 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
    }
   }
  } else {
   $21 = $add$ptr;
   $p$1 = $add$ptr;
   $psize$1 = $and5;
  }
 } while (0);
 $cmp228 = $21 >>> 0 < $add$ptr6 >>> 0;
 if (!$cmp228) {
  return;
 }
 $head231 = $add$ptr6 + 4 | 0;
 $22 = HEAP32[$head231 >> 2] | 0;
 $and232 = $22 & 1;
 $tobool233 = ($and232 | 0) == 0;
 if ($tobool233) {
  return;
 }
 $and240 = $22 & 2;
 $tobool241 = ($and240 | 0) == 0;
 if ($tobool241) {
  $23 = HEAP32[576588 >> 2] | 0;
  $cmp243 = ($23 | 0) == ($add$ptr6 | 0);
  if ($cmp243) {
   $24 = HEAP32[576576 >> 2] | 0;
   $add246 = $24 + $psize$1 | 0;
   HEAP32[576576 >> 2] = $add246;
   HEAP32[576588 >> 2] = $p$1;
   $or247 = $add246 | 1;
   $head248 = $p$1 + 4 | 0;
   HEAP32[$head248 >> 2] = $or247;
   $25 = HEAP32[576584 >> 2] | 0;
   $cmp249 = ($p$1 | 0) == ($25 | 0);
   if (!$cmp249) {
    return;
   }
   HEAP32[576584 >> 2] = 0;
   HEAP32[576572 >> 2] = 0;
   return;
  }
  $26 = HEAP32[576584 >> 2] | 0;
  $cmp255 = ($26 | 0) == ($add$ptr6 | 0);
  if ($cmp255) {
   $27 = HEAP32[576572 >> 2] | 0;
   $add258 = $27 + $psize$1 | 0;
   HEAP32[576572 >> 2] = $add258;
   HEAP32[576584 >> 2] = $21;
   $or259 = $add258 | 1;
   $head260 = $p$1 + 4 | 0;
   HEAP32[$head260 >> 2] = $or259;
   $add$ptr261 = $21 + $add258 | 0;
   HEAP32[$add$ptr261 >> 2] = $add258;
   return;
  }
  $and266 = $22 & -8;
  $add267 = $and266 + $psize$1 | 0;
  $shr268 = $22 >>> 3;
  $cmp269 = $22 >>> 0 < 256;
  do {
   if ($cmp269) {
    $fd273 = $add$ptr6 + 8 | 0;
    $28 = HEAP32[$fd273 >> 2] | 0;
    $bk275 = $add$ptr6 + 12 | 0;
    $29 = HEAP32[$bk275 >> 2] | 0;
    $cmp296 = ($29 | 0) == ($28 | 0);
    if ($cmp296) {
     $shl299 = 1 << $shr268;
     $neg300 = $shl299 ^ -1;
     $30 = HEAP32[144141] | 0;
     $and301 = $30 & $neg300;
     HEAP32[144141] = $and301;
     break;
    } else {
     $bk321 = $28 + 12 | 0;
     HEAP32[$bk321 >> 2] = $29;
     $fd322 = $29 + 8 | 0;
     HEAP32[$fd322 >> 2] = $28;
     break;
    }
   } else {
    $parent331 = $add$ptr6 + 24 | 0;
    $31 = HEAP32[$parent331 >> 2] | 0;
    $bk333 = $add$ptr6 + 12 | 0;
    $32 = HEAP32[$bk333 >> 2] | 0;
    $cmp334 = ($32 | 0) == ($add$ptr6 | 0);
    do {
     if ($cmp334) {
      $child361 = $add$ptr6 + 16 | 0;
      $arrayidx362 = $child361 + 4 | 0;
      $34 = HEAP32[$arrayidx362 >> 2] | 0;
      $cmp363 = ($34 | 0) == (0 | 0);
      if ($cmp363) {
       $35 = HEAP32[$child361 >> 2] | 0;
       $cmp368 = ($35 | 0) == (0 | 0);
       if ($cmp368) {
        $R332$3 = 0;
        break;
       } else {
        $R332$1$ph = $35;
        $RP360$1$ph = $child361;
       }
      } else {
       $R332$1$ph = $34;
       $RP360$1$ph = $arrayidx362;
      }
      $R332$1 = $R332$1$ph;
      $RP360$1 = $RP360$1$ph;
      while (1) {
       $arrayidx374 = $R332$1 + 20 | 0;
       $36 = HEAP32[$arrayidx374 >> 2] | 0;
       $cmp375 = ($36 | 0) == (0 | 0);
       if ($cmp375) {
        $arrayidx379 = $R332$1 + 16 | 0;
        $37 = HEAP32[$arrayidx379 >> 2] | 0;
        $cmp380 = ($37 | 0) == (0 | 0);
        if ($cmp380) {
         break;
        } else {
         $R332$1$be = $37;
         $RP360$1$be = $arrayidx379;
        }
       } else {
        $R332$1$be = $36;
        $RP360$1$be = $arrayidx374;
       }
       $R332$1 = $R332$1$be;
       $RP360$1 = $RP360$1$be;
      }
      HEAP32[$RP360$1 >> 2] = 0;
      $R332$3 = $R332$1;
     } else {
      $fd338 = $add$ptr6 + 8 | 0;
      $33 = HEAP32[$fd338 >> 2] | 0;
      $bk355 = $33 + 12 | 0;
      HEAP32[$bk355 >> 2] = $32;
      $fd356 = $32 + 8 | 0;
      HEAP32[$fd356 >> 2] = $33;
      $R332$3 = $32;
     }
    } while (0);
    $cmp395 = ($31 | 0) == (0 | 0);
    if (!$cmp395) {
     $index399 = $add$ptr6 + 28 | 0;
     $38 = HEAP32[$index399 >> 2] | 0;
     $arrayidx400 = 576868 + ($38 << 2) | 0;
     $39 = HEAP32[$arrayidx400 >> 2] | 0;
     $cmp401 = ($39 | 0) == ($add$ptr6 | 0);
     if ($cmp401) {
      HEAP32[$arrayidx400 >> 2] = $R332$3;
      $cond255 = ($R332$3 | 0) == (0 | 0);
      if ($cond255) {
       $shl408 = 1 << $38;
       $neg409 = $shl408 ^ -1;
       $40 = HEAP32[576568 >> 2] | 0;
       $and410 = $40 & $neg409;
       HEAP32[576568 >> 2] = $and410;
       break;
      }
     } else {
      $arrayidx419 = $31 + 16 | 0;
      $41 = HEAP32[$arrayidx419 >> 2] | 0;
      $cmp420 = ($41 | 0) == ($add$ptr6 | 0);
      $arrayidx427 = $31 + 20 | 0;
      $arrayidx427$sink = $cmp420 ? $arrayidx419 : $arrayidx427;
      HEAP32[$arrayidx427$sink >> 2] = $R332$3;
      $cmp432 = ($R332$3 | 0) == (0 | 0);
      if ($cmp432) {
       break;
      }
     }
     $parent442 = $R332$3 + 24 | 0;
     HEAP32[$parent442 >> 2] = $31;
     $child443 = $add$ptr6 + 16 | 0;
     $42 = HEAP32[$child443 >> 2] | 0;
     $cmp445 = ($42 | 0) == (0 | 0);
     if (!$cmp445) {
      $arrayidx454 = $R332$3 + 16 | 0;
      HEAP32[$arrayidx454 >> 2] = $42;
      $parent455 = $42 + 24 | 0;
      HEAP32[$parent455 >> 2] = $R332$3;
     }
     $arrayidx460 = $child443 + 4 | 0;
     $43 = HEAP32[$arrayidx460 >> 2] | 0;
     $cmp461 = ($43 | 0) == (0 | 0);
     if (!$cmp461) {
      $arrayidx470 = $R332$3 + 20 | 0;
      HEAP32[$arrayidx470 >> 2] = $43;
      $parent471 = $43 + 24 | 0;
      HEAP32[$parent471 >> 2] = $R332$3;
     }
    }
   }
  } while (0);
  $or480 = $add267 | 1;
  $head481 = $p$1 + 4 | 0;
  HEAP32[$head481 >> 2] = $or480;
  $add$ptr482 = $21 + $add267 | 0;
  HEAP32[$add$ptr482 >> 2] = $add267;
  $44 = HEAP32[576584 >> 2] | 0;
  $cmp484 = ($p$1 | 0) == ($44 | 0);
  if ($cmp484) {
   HEAP32[576572 >> 2] = $add267;
   return;
  } else {
   $psize$2 = $add267;
  }
 } else {
  $and495 = $22 & -2;
  HEAP32[$head231 >> 2] = $and495;
  $or496 = $psize$1 | 1;
  $head497 = $p$1 + 4 | 0;
  HEAP32[$head497 >> 2] = $or496;
  $add$ptr498 = $21 + $psize$1 | 0;
  HEAP32[$add$ptr498 >> 2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 $cmp502 = $psize$2 >>> 0 < 256;
 if ($cmp502) {
  $shl508 = $shr501 << 1;
  $arrayidx509 = 576604 + ($shl508 << 2) | 0;
  $45 = HEAP32[144141] | 0;
  $shl511 = 1 << $shr501;
  $and512 = $45 & $shl511;
  $tobool513 = ($and512 | 0) == 0;
  if ($tobool513) {
   $or516 = $45 | $shl511;
   HEAP32[144141] = $or516;
   $$pre = $arrayidx509 + 8 | 0;
   $$pre$phiZ2D = $$pre;
   $F510$0 = $arrayidx509;
  } else {
   $46 = $arrayidx509 + 8 | 0;
   $47 = HEAP32[$46 >> 2] | 0;
   $$pre$phiZ2D = $46;
   $F510$0 = $47;
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$1;
  $bk529 = $F510$0 + 12 | 0;
  HEAP32[$bk529 >> 2] = $p$1;
  $fd530 = $p$1 + 8 | 0;
  HEAP32[$fd530 >> 2] = $F510$0;
  $bk531 = $p$1 + 12 | 0;
  HEAP32[$bk531 >> 2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 $cmp536 = ($shr535 | 0) == 0;
 if ($cmp536) {
  $I534$0 = 0;
 } else {
  $cmp540 = $psize$2 >>> 0 > 16777215;
  if ($cmp540) {
   $I534$0 = 31;
  } else {
   $sub = $shr535 + 1048320 | 0;
   $shr544 = $sub >>> 16;
   $and545 = $shr544 & 8;
   $shl546 = $shr535 << $and545;
   $sub547 = $shl546 + 520192 | 0;
   $shr548 = $sub547 >>> 16;
   $and549 = $shr548 & 4;
   $add550 = $and549 | $and545;
   $shl551 = $shl546 << $and549;
   $sub552 = $shl551 + 245760 | 0;
   $shr553 = $sub552 >>> 16;
   $and554 = $shr553 & 2;
   $add555 = $add550 | $and554;
   $sub556 = 14 - $add555 | 0;
   $shl557 = $shl551 << $and554;
   $shr558 = $shl557 >>> 15;
   $add559 = $sub556 + $shr558 | 0;
   $shl560 = $add559 << 1;
   $add561 = $add559 + 7 | 0;
   $shr562 = $psize$2 >>> $add561;
   $and563 = $shr562 & 1;
   $add564 = $and563 | $shl560;
   $I534$0 = $add564;
  }
 }
 $arrayidx567 = 576868 + ($I534$0 << 2) | 0;
 $index568 = $p$1 + 28 | 0;
 HEAP32[$index568 >> 2] = $I534$0;
 $child569 = $p$1 + 16 | 0;
 $arrayidx570 = $p$1 + 20 | 0;
 HEAP32[$arrayidx570 >> 2] = 0;
 HEAP32[$child569 >> 2] = 0;
 $48 = HEAP32[576568 >> 2] | 0;
 $shl573 = 1 << $I534$0;
 $and574 = $48 & $shl573;
 $tobool575 = ($and574 | 0) == 0;
 L112 : do {
  if ($tobool575) {
   $or578 = $48 | $shl573;
   HEAP32[576568 >> 2] = $or578;
   HEAP32[$arrayidx567 >> 2] = $p$1;
   $parent579 = $p$1 + 24 | 0;
   HEAP32[$parent579 >> 2] = $arrayidx567;
   $bk580 = $p$1 + 12 | 0;
   HEAP32[$bk580 >> 2] = $p$1;
   $fd581 = $p$1 + 8 | 0;
   HEAP32[$fd581 >> 2] = $p$1;
  } else {
   $49 = HEAP32[$arrayidx567 >> 2] | 0;
   $head591262 = $49 + 4 | 0;
   $50 = HEAP32[$head591262 >> 2] | 0;
   $and592263 = $50 & -8;
   $cmp593264 = ($and592263 | 0) == ($psize$2 | 0);
   L115 : do {
    if ($cmp593264) {
     $T$0$lcssa = $49;
    } else {
     $cmp584 = ($I534$0 | 0) == 31;
     $shr586 = $I534$0 >>> 1;
     $sub589 = 25 - $shr586 | 0;
     $cond = $cmp584 ? 0 : $sub589;
     $shl590 = $psize$2 << $cond;
     $K583$0266 = $shl590;
     $T$0265 = $49;
     while (1) {
      $shr597 = $K583$0266 >>> 31;
      $arrayidx599 = ($T$0265 + 16 | 0) + ($shr597 << 2) | 0;
      $51 = HEAP32[$arrayidx599 >> 2] | 0;
      $cmp601 = ($51 | 0) == (0 | 0);
      if ($cmp601) {
       break;
      }
      $shl600 = $K583$0266 << 1;
      $head591 = $51 + 4 | 0;
      $52 = HEAP32[$head591 >> 2] | 0;
      $and592 = $52 & -8;
      $cmp593 = ($and592 | 0) == ($psize$2 | 0);
      if ($cmp593) {
       $T$0$lcssa = $51;
       break L115;
      } else {
       $K583$0266 = $shl600;
       $T$0265 = $51;
      }
     }
     HEAP32[$arrayidx599 >> 2] = $p$1;
     $parent610 = $p$1 + 24 | 0;
     HEAP32[$parent610 >> 2] = $T$0265;
     $bk611 = $p$1 + 12 | 0;
     HEAP32[$bk611 >> 2] = $p$1;
     $fd612 = $p$1 + 8 | 0;
     HEAP32[$fd612 >> 2] = $p$1;
     break L112;
    }
   } while (0);
   $fd620 = $T$0$lcssa + 8 | 0;
   $53 = HEAP32[$fd620 >> 2] | 0;
   $bk631 = $53 + 12 | 0;
   HEAP32[$bk631 >> 2] = $p$1;
   HEAP32[$fd620 >> 2] = $p$1;
   $fd633 = $p$1 + 8 | 0;
   HEAP32[$fd633 >> 2] = $53;
   $bk634 = $p$1 + 12 | 0;
   HEAP32[$bk634 >> 2] = $T$0$lcssa;
   $parent635 = $p$1 + 24 | 0;
   HEAP32[$parent635 >> 2] = 0;
  }
 } while (0);
 $54 = HEAP32[576596 >> 2] | 0;
 $dec = $54 + -1 | 0;
 HEAP32[576596 >> 2] = $dec;
 $cmp640 = ($dec | 0) == 0;
 if (!$cmp640) {
  return;
 }
 $sp$0$in$i = 577020;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  $cmp$i = ($sp$0$i | 0) == (0 | 0);
  $next4$i = $sp$0$i + 8 | 0;
  if ($cmp$i) {
   break;
  } else {
   $sp$0$in$i = $next4$i;
  }
 }
 HEAP32[576596 >> 2] = -1;
 return;
}

function _fill_memory_blocks_mt($instance) {
 $instance = $instance | 0;
 var $$lcssa = 0, $$lcssa$1 = 0, $$lcssa$2 = 0, $$lcssa$3 = 0, $$pre = 0, $$pre71 = 0, $$pre72 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and6$i = 0, $and6$i15 = 0, $arrayidx = 0, $arrayidx$1 = 0, $arrayidx$2 = 0, $arrayidx$3 = 0, $arrayidx21 = 0, $arrayidx21$1 = 0, $arrayidx21$2 = 0, $arrayidx21$3 = 0;
 var $arrayidx23 = 0, $arrayidx23$1 = 0, $arrayidx23$2 = 0, $arrayidx23$3 = 0, $arrayidx37 = 0, $arrayidx37$1 = 0, $arrayidx37$2 = 0, $arrayidx37$3 = 0, $call$i = 0, $call$i11 = 0, $call17 = 0, $call17$1 = 0, $call17$2 = 0, $call17$3 = 0, $call25 = 0, $call25$1 = 0, $call25$2 = 0, $call25$3 = 0, $call38 = 0, $call38$1 = 0;
 var $call38$2 = 0, $call38$3 = 0, $cmp$i = 0, $cmp$i1 = 0, $cmp1$i = 0, $cmp1$i7 = 0, $cmp12 = 0, $cmp12$1 = 0, $cmp12$2 = 0, $cmp12$3 = 0, $cmp1253 = 0, $cmp1253$1 = 0, $cmp1253$2 = 0, $cmp1253$3 = 0, $cmp14 = 0, $cmp14$1 = 0, $cmp14$2 = 0, $cmp14$3 = 0, $cmp34 = 0, $cmp34$1 = 0;
 var $cmp34$2 = 0, $cmp34$3 = 0, $cmp3456 = 0, $cmp3456$1 = 0, $cmp3456$2 = 0, $cmp3456$3 = 0, $cmp4$i = 0, $cmp4$i12 = 0, $cmp6 = 0, $cmp659 = 0, $cmp7$i = 0, $cmp7$i16 = 0, $div$i = 0, $div$i6 = 0, $head$i = 0, $head$i14 = 0, $inc = 0, $inc$1 = 0, $inc$2 = 0, $inc$3 = 0;
 var $inc43 = 0, $inc43$1 = 0, $inc43$2 = 0, $inc43$3 = 0, $inc52 = 0, $l$054 = 0, $l$054$1 = 0, $l$054$2 = 0, $l$054$3 = 0, $l$157 = 0, $l$157$1 = 0, $l$157$2 = 0, $l$157$3 = 0, $lanes = 0, $mul$i = 0, $mul$i2 = 0, $passes = 0, $position$sroa$0$0$$sroa_idx = 0, $position$sroa$0$0$$sroa_idx$1 = 0, $position$sroa$0$0$$sroa_idx$2 = 0;
 var $position$sroa$0$0$$sroa_idx$3 = 0, $position$sroa$2$0$$sroa_idx1 = 0, $position$sroa$2$0$$sroa_idx1$1 = 0, $position$sroa$2$0$$sroa_idx1$2 = 0, $position$sroa$2$0$$sroa_idx1$3 = 0, $position$sroa$3$0$$sroa_idx = 0, $position$sroa$3$0$$sroa_idx$1 = 0, $position$sroa$3$0$$sroa_idx$2 = 0, $position$sroa$3$0$$sroa_idx$3 = 0, $position$sroa$4 = 0, $position$sroa$4$0$$sroa_raw_idx = 0, $position$sroa$4$0$$sroa_raw_idx$1 = 0, $position$sroa$4$0$$sroa_raw_idx$2 = 0, $position$sroa$4$0$$sroa_raw_idx$3 = 0, $position$sroa$42$0$$sroa_idx3 = 0, $position$sroa$42$0$$sroa_idx3$1 = 0, $position$sroa$42$0$$sroa_idx3$2 = 0, $position$sroa$42$0$$sroa_idx3$3 = 0, $print_internals = 0, $r$060 = 0;
 var $rc$04147 = 0, $rc$044 = 0, $req$0$i = 0, $req$0$i10 = 0, $spec$select$i = 0, $spec$select$i8 = 0, $sub = 0, $sub$1 = 0, $sub$2 = 0, $sub$3 = 0, $sub31 = 0, $sub31$1 = 0, $sub31$2 = 0, $sub31$3 = 0, $threads = 0, $tobool = 0, $tobool$1 = 0, $tobool$2 = 0, $tobool$3 = 0, $tobool$i = 0;
 var $tobool$i4 = 0, $tobool26 = 0, $tobool26$1 = 0, $tobool26$2 = 0, $tobool26$3 = 0, $tobool39 = 0, $tobool39$1 = 0, $tobool39$2 = 0, $tobool39$3 = 0, $tobool48 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $position$sroa$4 = sp;
 $lanes = $instance + 24 | 0;
 $0 = HEAP32[$lanes >> 2] | 0;
 $cmp$i = ($0 | 0) == 0;
 if ($cmp$i) {
  $req$0$i = 0;
 } else {
  $mul$i = $0 << 2;
  $tobool$i = $0 >>> 0 > 65535;
  if ($tobool$i) {
   $div$i = ($mul$i >>> 0) / ($0 >>> 0) & -1;
   $cmp1$i = ($div$i | 0) == 4;
   $spec$select$i = $cmp1$i ? $mul$i : -1;
   $req$0$i = $spec$select$i;
  } else {
   $req$0$i = $mul$i;
  }
 }
 $call$i = _malloc($req$0$i) | 0;
 $cmp4$i = ($call$i | 0) == (0 | 0);
 if ($cmp4$i) {
  $rc$04147 = -22;
  STACKTOP = sp;
  return $rc$04147 | 0;
 }
 $head$i = $call$i + -4 | 0;
 $1 = HEAP32[$head$i >> 2] | 0;
 $and6$i = $1 & 3;
 $cmp7$i = ($and6$i | 0) == 0;
 if (!$cmp7$i) {
  _memset($call$i | 0, 0, $req$0$i | 0) | 0;
 }
 $2 = HEAP32[$lanes >> 2] | 0;
 $cmp$i1 = ($2 | 0) == 0;
 if ($cmp$i1) {
  $req$0$i10 = 0;
 } else {
  $mul$i2 = $2 * 20 | 0;
  $tobool$i4 = $2 >>> 0 > 65535;
  if ($tobool$i4) {
   $div$i6 = ($mul$i2 >>> 0) / ($2 >>> 0) & -1;
   $cmp1$i7 = ($div$i6 | 0) == 20;
   $spec$select$i8 = $cmp1$i7 ? $mul$i2 : -1;
   $req$0$i10 = $spec$select$i8;
  } else {
   $req$0$i10 = $mul$i2;
  }
 }
 $call$i11 = _malloc($req$0$i10) | 0;
 $cmp4$i12 = ($call$i11 | 0) == (0 | 0);
 if ($cmp4$i12) {
  _free($call$i);
  $rc$04147 = -22;
  STACKTOP = sp;
  return $rc$04147 | 0;
 }
 $head$i14 = $call$i11 + -4 | 0;
 $3 = HEAP32[$head$i14 >> 2] | 0;
 $and6$i15 = $3 & 3;
 $cmp7$i16 = ($and6$i15 | 0) == 0;
 if (!$cmp7$i16) {
  _memset($call$i11 | 0, 0, $req$0$i10 | 0) | 0;
 }
 $passes = $instance + 8 | 0;
 $4 = HEAP32[$passes >> 2] | 0;
 $cmp659 = ($4 | 0) == 0;
 if ($cmp659) {
  _free($call$i);
  _free($call$i11);
  $rc$04147 = 0;
  STACKTOP = sp;
  return $rc$04147 | 0;
 }
 $threads = $instance + 28 | 0;
 $print_internals = $instance + 36 | 0;
 $r$060 = 0;
 L26 : while (1) {
  $5 = HEAP32[$lanes >> 2] | 0;
  $cmp1253 = ($5 | 0) == 0;
  $6 = HEAP32[$threads >> 2] | 0;
  if ($cmp1253) {
   $$lcssa = $6;
   $11 = 0;
  } else {
   $9 = $6;
   $l$054 = 0;
   while (1) {
    $cmp14 = $l$054 >>> 0 < $9 >>> 0;
    if (!$cmp14) {
     $sub = $l$054 - $9 | 0;
     $arrayidx = $call$i + ($sub << 2) | 0;
     $10 = HEAP32[$arrayidx >> 2] | 0;
     $call17 = _argon2_thread_join($10) | 0;
     $tobool = ($call17 | 0) == 0;
     if (!$tobool) {
      $rc$044 = -33;
      break L26;
     }
    }
    $arrayidx21 = $call$i11 + ($l$054 * 20 | 0) | 0;
    HEAP32[$arrayidx21 >> 2] = $instance;
    $position$sroa$0$0$$sroa_idx = ($call$i11 + ($l$054 * 20 | 0) | 0) + 4 | 0;
    HEAP32[$position$sroa$0$0$$sroa_idx >> 2] = $r$060;
    $position$sroa$2$0$$sroa_idx1 = ($call$i11 + ($l$054 * 20 | 0) | 0) + 8 | 0;
    HEAP32[$position$sroa$2$0$$sroa_idx1 >> 2] = $l$054;
    $position$sroa$3$0$$sroa_idx = ($call$i11 + ($l$054 * 20 | 0) | 0) + 12 | 0;
    HEAP8[$position$sroa$3$0$$sroa_idx >> 0] = 0;
    $position$sroa$4$0$$sroa_raw_idx = $arrayidx21 + 13 | 0;
    HEAP8[$position$sroa$4$0$$sroa_raw_idx >> 0] = HEAP8[$position$sroa$4 >> 0] | 0;
    HEAP8[$position$sroa$4$0$$sroa_raw_idx + 1 >> 0] = HEAP8[$position$sroa$4 + 1 >> 0] | 0;
    HEAP8[$position$sroa$4$0$$sroa_raw_idx + 2 >> 0] = HEAP8[$position$sroa$4 + 2 >> 0] | 0;
    $position$sroa$42$0$$sroa_idx3 = ($call$i11 + ($l$054 * 20 | 0) | 0) + 16 | 0;
    HEAP32[$position$sroa$42$0$$sroa_idx3 >> 2] = 0;
    $arrayidx23 = $call$i + ($l$054 << 2) | 0;
    $call25 = _argon2_thread_create($arrayidx23, $arrayidx21) | 0;
    $tobool26 = ($call25 | 0) == 0;
    $inc = $l$054 + 1 | 0;
    if (!$tobool26) {
     $rc$044 = -33;
     break L26;
    }
    $7 = HEAP32[$lanes >> 2] | 0;
    $cmp12 = $inc >>> 0 < $7 >>> 0;
    $8 = HEAP32[$threads >> 2] | 0;
    if ($cmp12) {
     $9 = $8;
     $l$054 = $inc;
    } else {
     $$lcssa = $8;
     $11 = $7;
     break;
    }
   }
  }
  $sub31 = $11 - $$lcssa | 0;
  $cmp3456 = $sub31 >>> 0 < $11 >>> 0;
  if ($cmp3456) {
   $l$157 = $sub31;
   while (1) {
    $arrayidx37 = $call$i + ($l$157 << 2) | 0;
    $13 = HEAP32[$arrayidx37 >> 2] | 0;
    $call38 = _argon2_thread_join($13) | 0;
    $tobool39 = ($call38 | 0) == 0;
    $inc43 = $l$157 + 1 | 0;
    if (!$tobool39) {
     $rc$044 = -33;
     break L26;
    }
    $12 = HEAP32[$lanes >> 2] | 0;
    $cmp34 = $inc43 >>> 0 < $12 >>> 0;
    if ($cmp34) {
     $l$157 = $inc43;
    } else {
     break;
    }
   }
   $$pre = HEAP32[$threads >> 2] | 0;
   $14 = $12;
   $40 = $$pre;
  } else {
   $14 = $11;
   $40 = $$lcssa;
  }
  $cmp1253$1 = ($14 | 0) == 0;
  if ($cmp1253$1) {
   $$lcssa$1 = $40;
   $20 = 0;
  } else {
   $16 = $40;
   $l$054$1 = 0;
   while (1) {
    $cmp14$1 = $l$054$1 >>> 0 < $16 >>> 0;
    if (!$cmp14$1) {
     $sub$1 = $l$054$1 - $16 | 0;
     $arrayidx$1 = $call$i + ($sub$1 << 2) | 0;
     $17 = HEAP32[$arrayidx$1 >> 2] | 0;
     $call17$1 = _argon2_thread_join($17) | 0;
     $tobool$1 = ($call17$1 | 0) == 0;
     if (!$tobool$1) {
      $rc$044 = -33;
      break L26;
     }
    }
    $arrayidx21$1 = $call$i11 + ($l$054$1 * 20 | 0) | 0;
    HEAP32[$arrayidx21$1 >> 2] = $instance;
    $position$sroa$0$0$$sroa_idx$1 = ($call$i11 + ($l$054$1 * 20 | 0) | 0) + 4 | 0;
    HEAP32[$position$sroa$0$0$$sroa_idx$1 >> 2] = $r$060;
    $position$sroa$2$0$$sroa_idx1$1 = ($call$i11 + ($l$054$1 * 20 | 0) | 0) + 8 | 0;
    HEAP32[$position$sroa$2$0$$sroa_idx1$1 >> 2] = $l$054$1;
    $position$sroa$3$0$$sroa_idx$1 = ($call$i11 + ($l$054$1 * 20 | 0) | 0) + 12 | 0;
    HEAP8[$position$sroa$3$0$$sroa_idx$1 >> 0] = 1;
    $position$sroa$4$0$$sroa_raw_idx$1 = $arrayidx21$1 + 13 | 0;
    HEAP8[$position$sroa$4$0$$sroa_raw_idx$1 >> 0] = HEAP8[$position$sroa$4 >> 0] | 0;
    HEAP8[$position$sroa$4$0$$sroa_raw_idx$1 + 1 >> 0] = HEAP8[$position$sroa$4 + 1 >> 0] | 0;
    HEAP8[$position$sroa$4$0$$sroa_raw_idx$1 + 2 >> 0] = HEAP8[$position$sroa$4 + 2 >> 0] | 0;
    $position$sroa$42$0$$sroa_idx3$1 = ($call$i11 + ($l$054$1 * 20 | 0) | 0) + 16 | 0;
    HEAP32[$position$sroa$42$0$$sroa_idx3$1 >> 2] = 0;
    $arrayidx23$1 = $call$i + ($l$054$1 << 2) | 0;
    $call25$1 = _argon2_thread_create($arrayidx23$1, $arrayidx21$1) | 0;
    $tobool26$1 = ($call25$1 | 0) == 0;
    $inc$1 = $l$054$1 + 1 | 0;
    if (!$tobool26$1) {
     $rc$044 = -33;
     break L26;
    }
    $18 = HEAP32[$lanes >> 2] | 0;
    $cmp12$1 = $inc$1 >>> 0 < $18 >>> 0;
    $19 = HEAP32[$threads >> 2] | 0;
    if ($cmp12$1) {
     $16 = $19;
     $l$054$1 = $inc$1;
    } else {
     $$lcssa$1 = $19;
     $20 = $18;
     break;
    }
   }
  }
  $sub31$1 = $20 - $$lcssa$1 | 0;
  $cmp3456$1 = $sub31$1 >>> 0 < $20 >>> 0;
  if ($cmp3456$1) {
   $l$157$1 = $sub31$1;
   while (1) {
    $arrayidx37$1 = $call$i + ($l$157$1 << 2) | 0;
    $21 = HEAP32[$arrayidx37$1 >> 2] | 0;
    $call38$1 = _argon2_thread_join($21) | 0;
    $tobool39$1 = ($call38$1 | 0) == 0;
    $inc43$1 = $l$157$1 + 1 | 0;
    if (!$tobool39$1) {
     $rc$044 = -33;
     break L26;
    }
    $22 = HEAP32[$lanes >> 2] | 0;
    $cmp34$1 = $inc43$1 >>> 0 < $22 >>> 0;
    if ($cmp34$1) {
     $l$157$1 = $inc43$1;
    } else {
     break;
    }
   }
   $$pre71 = HEAP32[$threads >> 2] | 0;
   $23 = $22;
   $41 = $$pre71;
  } else {
   $23 = $20;
   $41 = $$lcssa$1;
  }
  $cmp1253$2 = ($23 | 0) == 0;
  if ($cmp1253$2) {
   $$lcssa$2 = $41;
   $28 = 0;
  } else {
   $24 = $41;
   $l$054$2 = 0;
   while (1) {
    $cmp14$2 = $l$054$2 >>> 0 < $24 >>> 0;
    if (!$cmp14$2) {
     $sub$2 = $l$054$2 - $24 | 0;
     $arrayidx$2 = $call$i + ($sub$2 << 2) | 0;
     $25 = HEAP32[$arrayidx$2 >> 2] | 0;
     $call17$2 = _argon2_thread_join($25) | 0;
     $tobool$2 = ($call17$2 | 0) == 0;
     if (!$tobool$2) {
      $rc$044 = -33;
      break L26;
     }
    }
    $arrayidx21$2 = $call$i11 + ($l$054$2 * 20 | 0) | 0;
    HEAP32[$arrayidx21$2 >> 2] = $instance;
    $position$sroa$0$0$$sroa_idx$2 = ($call$i11 + ($l$054$2 * 20 | 0) | 0) + 4 | 0;
    HEAP32[$position$sroa$0$0$$sroa_idx$2 >> 2] = $r$060;
    $position$sroa$2$0$$sroa_idx1$2 = ($call$i11 + ($l$054$2 * 20 | 0) | 0) + 8 | 0;
    HEAP32[$position$sroa$2$0$$sroa_idx1$2 >> 2] = $l$054$2;
    $position$sroa$3$0$$sroa_idx$2 = ($call$i11 + ($l$054$2 * 20 | 0) | 0) + 12 | 0;
    HEAP8[$position$sroa$3$0$$sroa_idx$2 >> 0] = 2;
    $position$sroa$4$0$$sroa_raw_idx$2 = $arrayidx21$2 + 13 | 0;
    HEAP8[$position$sroa$4$0$$sroa_raw_idx$2 >> 0] = HEAP8[$position$sroa$4 >> 0] | 0;
    HEAP8[$position$sroa$4$0$$sroa_raw_idx$2 + 1 >> 0] = HEAP8[$position$sroa$4 + 1 >> 0] | 0;
    HEAP8[$position$sroa$4$0$$sroa_raw_idx$2 + 2 >> 0] = HEAP8[$position$sroa$4 + 2 >> 0] | 0;
    $position$sroa$42$0$$sroa_idx3$2 = ($call$i11 + ($l$054$2 * 20 | 0) | 0) + 16 | 0;
    HEAP32[$position$sroa$42$0$$sroa_idx3$2 >> 2] = 0;
    $arrayidx23$2 = $call$i + ($l$054$2 << 2) | 0;
    $call25$2 = _argon2_thread_create($arrayidx23$2, $arrayidx21$2) | 0;
    $tobool26$2 = ($call25$2 | 0) == 0;
    $inc$2 = $l$054$2 + 1 | 0;
    if (!$tobool26$2) {
     $rc$044 = -33;
     break L26;
    }
    $26 = HEAP32[$lanes >> 2] | 0;
    $cmp12$2 = $inc$2 >>> 0 < $26 >>> 0;
    $27 = HEAP32[$threads >> 2] | 0;
    if ($cmp12$2) {
     $24 = $27;
     $l$054$2 = $inc$2;
    } else {
     $$lcssa$2 = $27;
     $28 = $26;
     break;
    }
   }
  }
  $sub31$2 = $28 - $$lcssa$2 | 0;
  $cmp3456$2 = $sub31$2 >>> 0 < $28 >>> 0;
  if ($cmp3456$2) {
   $l$157$2 = $sub31$2;
   while (1) {
    $arrayidx37$2 = $call$i + ($l$157$2 << 2) | 0;
    $29 = HEAP32[$arrayidx37$2 >> 2] | 0;
    $call38$2 = _argon2_thread_join($29) | 0;
    $tobool39$2 = ($call38$2 | 0) == 0;
    $inc43$2 = $l$157$2 + 1 | 0;
    if (!$tobool39$2) {
     $rc$044 = -33;
     break L26;
    }
    $30 = HEAP32[$lanes >> 2] | 0;
    $cmp34$2 = $inc43$2 >>> 0 < $30 >>> 0;
    if ($cmp34$2) {
     $l$157$2 = $inc43$2;
    } else {
     break;
    }
   }
   $$pre72 = HEAP32[$threads >> 2] | 0;
   $31 = $30;
   $42 = $$pre72;
  } else {
   $31 = $28;
   $42 = $$lcssa$2;
  }
  $cmp1253$3 = ($31 | 0) == 0;
  if ($cmp1253$3) {
   $$lcssa$3 = $42;
   $36 = 0;
  } else {
   $32 = $42;
   $l$054$3 = 0;
   while (1) {
    $cmp14$3 = $l$054$3 >>> 0 < $32 >>> 0;
    if (!$cmp14$3) {
     $sub$3 = $l$054$3 - $32 | 0;
     $arrayidx$3 = $call$i + ($sub$3 << 2) | 0;
     $33 = HEAP32[$arrayidx$3 >> 2] | 0;
     $call17$3 = _argon2_thread_join($33) | 0;
     $tobool$3 = ($call17$3 | 0) == 0;
     if (!$tobool$3) {
      $rc$044 = -33;
      break L26;
     }
    }
    $arrayidx21$3 = $call$i11 + ($l$054$3 * 20 | 0) | 0;
    HEAP32[$arrayidx21$3 >> 2] = $instance;
    $position$sroa$0$0$$sroa_idx$3 = ($call$i11 + ($l$054$3 * 20 | 0) | 0) + 4 | 0;
    HEAP32[$position$sroa$0$0$$sroa_idx$3 >> 2] = $r$060;
    $position$sroa$2$0$$sroa_idx1$3 = ($call$i11 + ($l$054$3 * 20 | 0) | 0) + 8 | 0;
    HEAP32[$position$sroa$2$0$$sroa_idx1$3 >> 2] = $l$054$3;
    $position$sroa$3$0$$sroa_idx$3 = ($call$i11 + ($l$054$3 * 20 | 0) | 0) + 12 | 0;
    HEAP8[$position$sroa$3$0$$sroa_idx$3 >> 0] = 3;
    $position$sroa$4$0$$sroa_raw_idx$3 = $arrayidx21$3 + 13 | 0;
    HEAP8[$position$sroa$4$0$$sroa_raw_idx$3 >> 0] = HEAP8[$position$sroa$4 >> 0] | 0;
    HEAP8[$position$sroa$4$0$$sroa_raw_idx$3 + 1 >> 0] = HEAP8[$position$sroa$4 + 1 >> 0] | 0;
    HEAP8[$position$sroa$4$0$$sroa_raw_idx$3 + 2 >> 0] = HEAP8[$position$sroa$4 + 2 >> 0] | 0;
    $position$sroa$42$0$$sroa_idx3$3 = ($call$i11 + ($l$054$3 * 20 | 0) | 0) + 16 | 0;
    HEAP32[$position$sroa$42$0$$sroa_idx3$3 >> 2] = 0;
    $arrayidx23$3 = $call$i + ($l$054$3 << 2) | 0;
    $call25$3 = _argon2_thread_create($arrayidx23$3, $arrayidx21$3) | 0;
    $tobool26$3 = ($call25$3 | 0) == 0;
    $inc$3 = $l$054$3 + 1 | 0;
    if (!$tobool26$3) {
     $rc$044 = -33;
     break L26;
    }
    $34 = HEAP32[$lanes >> 2] | 0;
    $cmp12$3 = $inc$3 >>> 0 < $34 >>> 0;
    $35 = HEAP32[$threads >> 2] | 0;
    if ($cmp12$3) {
     $32 = $35;
     $l$054$3 = $inc$3;
    } else {
     $$lcssa$3 = $35;
     $36 = $34;
     break;
    }
   }
  }
  $sub31$3 = $36 - $$lcssa$3 | 0;
  $cmp3456$3 = $sub31$3 >>> 0 < $36 >>> 0;
  if ($cmp3456$3) {
   $l$157$3 = $sub31$3;
   while (1) {
    $arrayidx37$3 = $call$i + ($l$157$3 << 2) | 0;
    $37 = HEAP32[$arrayidx37$3 >> 2] | 0;
    $call38$3 = _argon2_thread_join($37) | 0;
    $tobool39$3 = ($call38$3 | 0) == 0;
    $inc43$3 = $l$157$3 + 1 | 0;
    if (!$tobool39$3) {
     $rc$044 = -33;
     break L26;
    }
    $38 = HEAP32[$lanes >> 2] | 0;
    $cmp34$3 = $inc43$3 >>> 0 < $38 >>> 0;
    if ($cmp34$3) {
     $l$157$3 = $inc43$3;
    } else {
     break;
    }
   }
  }
  $39 = HEAP32[$print_internals >> 2] | 0;
  $tobool48 = ($39 | 0) == 0;
  if (!$tobool48) {
   _internal_kat($instance, $r$060);
  }
  $inc52 = $r$060 + 1 | 0;
  $15 = HEAP32[$passes >> 2] | 0;
  $cmp6 = $inc52 >>> 0 < $15 >>> 0;
  if ($cmp6) {
   $r$060 = $inc52;
  } else {
   $rc$044 = 0;
   break;
  }
 }
 _free($call$i);
 _free($call$i11);
 $rc$04147 = $rc$044;
 STACKTOP = sp;
 return $rc$04147 | 0;
}

function _ge_check_subgroup_precomp_vartime($p) {
 $p = $p | 0;
 var $add$ptr = 0, $add$ptr1 = 0, $add$ptr10 = 0, $add$ptr2 = 0, $add$ptr3 = 0, $add$ptr4 = 0, $add$ptr7 = 0, $arraydecay = 0, $arraydecay21 = 0, $call = 0, $s = 0, $t = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(448 | 0);
 $s = sp + 280 | 0;
 $t = sp + 120 | 0;
 $u = sp;
 _ge_p3_0($s);
 $add$ptr = $p + 1120 | 0;
 _ge_add($t, $s, $add$ptr);
 _ge_p1p1_to_p3($s, $t);
 _ge_add($t, $s, $p);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 $add$ptr1 = $p + 320 | 0;
 _ge_add($t, $s, $add$ptr1);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 $add$ptr2 = $p + 480 | 0;
 _ge_add($t, $s, $add$ptr2);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 _ge_sub($t, $s, $p);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 $add$ptr3 = $p + 160 | 0;
 _ge_sub($t, $s, $add$ptr3);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 _ge_sub($t, $s, $p);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 $add$ptr4 = $p + 800 | 0;
 _ge_sub($t, $s, $add$ptr4);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 _ge_add($t, $s, $add$ptr3);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 _ge_sub($t, $s, $p);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 _ge_sub($t, $s, $add$ptr3);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 $add$ptr7 = $p + 960 | 0;
 _ge_sub($t, $s, $add$ptr7);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 _ge_add($t, $s, $add$ptr4);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 _ge_add($t, $s, $add$ptr4);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 $add$ptr10 = $p + 640 | 0;
 _ge_add($t, $s, $add$ptr10);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 _ge_add($t, $s, $add$ptr3);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 _ge_add($t, $s, $add$ptr3);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 _ge_add($t, $s, $add$ptr7);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 _ge_add($t, $s, $add$ptr3);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 _ge_sub($t, $s, $add$ptr3);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 _ge_sub($t, $s, $add$ptr1);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 _ge_sub($t, $s, $add$ptr4);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 _ge_sub($t, $s, $add$ptr1);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p2($u, $t);
 _ge_p2_dbl($t, $u);
 _ge_p1p1_to_p3($s, $t);
 _ge_add($t, $s, $p);
 $arraydecay = $t + 40 | 0;
 $arraydecay21 = $t + 120 | 0;
 _fe_sub($arraydecay, $arraydecay, $arraydecay21);
 $call = _fe_isnonzero($arraydecay) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _ge_frombytes_vartime($h, $s) {
 $h = $h | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr = 0, $add$ptr$idx = 0, $add$ptr$idx$val = 0, $add$ptr$idx100 = 0, $add$ptr$idx100$val = 0, $add$ptr$val = 0, $add$ptr11 = 0, $add$ptr13 = 0, $add$ptr13$idx = 0, $add$ptr13$idx$val = 0, $add$ptr13$idx96 = 0, $add$ptr13$idx96$val = 0, $add$ptr13$val = 0, $add$ptr16 = 0, $add$ptr16$idx = 0, $add$ptr16$idx$val = 0;
 var $add$ptr16$idx95 = 0, $add$ptr16$idx95$val = 0, $add$ptr16$val = 0, $add$ptr19 = 0, $add$ptr19$idx = 0, $add$ptr19$idx$val = 0, $add$ptr19$idx94 = 0, $add$ptr19$idx94$val = 0, $add$ptr19$val = 0, $add$ptr2 = 0, $add$ptr2$idx = 0, $add$ptr2$idx$val = 0, $add$ptr2$idx99 = 0, $add$ptr2$idx99$val = 0, $add$ptr2$val = 0, $add$ptr22 = 0, $add$ptr22$idx = 0, $add$ptr22$idx$val = 0, $add$ptr22$idx93 = 0, $add$ptr22$idx93$val = 0;
 var $add$ptr22$val = 0, $add$ptr5 = 0, $add$ptr5$idx = 0, $add$ptr5$idx$val = 0, $add$ptr5$idx98 = 0, $add$ptr5$idx98$val = 0, $add$ptr5$val = 0, $add$ptr8 = 0, $add$ptr8$idx = 0, $add$ptr8$idx$val = 0, $add$ptr8$idx97 = 0, $add$ptr8$idx97$val = 0, $add$ptr8$val = 0, $arraydecay = 0, $arraydecay177 = 0, $arrayidx = 0, $arrayidx100 = 0, $arrayidx103 = 0, $arrayidx106 = 0, $arrayidx109 = 0;
 var $arrayidx112 = 0, $arrayidx115 = 0, $arrayidx91 = 0, $arrayidx94 = 0, $arrayidx97 = 0, $call142 = 0, $call148 = 0, $call159 = 0, $call168 = 0, $check = 0, $cmp163 = 0, $conv161 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond7 = 0;
 var $or$cond8 = 0, $retval$0 = 0, $tobool = 0, $tobool149 = 0, $tobool169 = 0, $u = 0, $v = 0, $vxx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192 | 0);
 $u = sp + 144 | 0;
 $v = sp + 96 | 0;
 $vxx = sp + 48 | 0;
 $check = sp;
 $0 = _load_4($s) | 0;
 $1 = getTempRet0() | 0;
 $add$ptr = $s + 4 | 0;
 $add$ptr$val = HEAP8[$add$ptr >> 0] | 0;
 $add$ptr$idx = $s + 5 | 0;
 $add$ptr$idx$val = HEAP8[$add$ptr$idx >> 0] | 0;
 $add$ptr$idx100 = $s + 6 | 0;
 $add$ptr$idx100$val = HEAP8[$add$ptr$idx100 >> 0] | 0;
 $2 = _load_3($add$ptr$val, $add$ptr$idx$val, $add$ptr$idx100$val) | 0;
 $3 = getTempRet0() | 0;
 $4 = _bitshift64Shl($2 | 0, $3 | 0, 6) | 0;
 $5 = getTempRet0() | 0;
 $add$ptr2 = $s + 7 | 0;
 $add$ptr2$val = HEAP8[$add$ptr2 >> 0] | 0;
 $add$ptr2$idx = $s + 8 | 0;
 $add$ptr2$idx$val = HEAP8[$add$ptr2$idx >> 0] | 0;
 $add$ptr2$idx99 = $s + 9 | 0;
 $add$ptr2$idx99$val = HEAP8[$add$ptr2$idx99 >> 0] | 0;
 $6 = _load_3($add$ptr2$val, $add$ptr2$idx$val, $add$ptr2$idx99$val) | 0;
 $7 = getTempRet0() | 0;
 $8 = _bitshift64Shl($6 | 0, $7 | 0, 5) | 0;
 $9 = getTempRet0() | 0;
 $add$ptr5 = $s + 10 | 0;
 $add$ptr5$val = HEAP8[$add$ptr5 >> 0] | 0;
 $add$ptr5$idx = $s + 11 | 0;
 $add$ptr5$idx$val = HEAP8[$add$ptr5$idx >> 0] | 0;
 $add$ptr5$idx98 = $s + 12 | 0;
 $add$ptr5$idx98$val = HEAP8[$add$ptr5$idx98 >> 0] | 0;
 $10 = _load_3($add$ptr5$val, $add$ptr5$idx$val, $add$ptr5$idx98$val) | 0;
 $11 = getTempRet0() | 0;
 $12 = _bitshift64Shl($10 | 0, $11 | 0, 3) | 0;
 $13 = getTempRet0() | 0;
 $add$ptr8 = $s + 13 | 0;
 $add$ptr8$val = HEAP8[$add$ptr8 >> 0] | 0;
 $add$ptr8$idx = $s + 14 | 0;
 $add$ptr8$idx$val = HEAP8[$add$ptr8$idx >> 0] | 0;
 $add$ptr8$idx97 = $s + 15 | 0;
 $add$ptr8$idx97$val = HEAP8[$add$ptr8$idx97 >> 0] | 0;
 $14 = _load_3($add$ptr8$val, $add$ptr8$idx$val, $add$ptr8$idx97$val) | 0;
 $15 = getTempRet0() | 0;
 $16 = _bitshift64Shl($14 | 0, $15 | 0, 2) | 0;
 $17 = getTempRet0() | 0;
 $add$ptr11 = $s + 16 | 0;
 $18 = _load_4($add$ptr11) | 0;
 $19 = getTempRet0() | 0;
 $add$ptr13 = $s + 20 | 0;
 $add$ptr13$val = HEAP8[$add$ptr13 >> 0] | 0;
 $add$ptr13$idx = $s + 21 | 0;
 $add$ptr13$idx$val = HEAP8[$add$ptr13$idx >> 0] | 0;
 $add$ptr13$idx96 = $s + 22 | 0;
 $add$ptr13$idx96$val = HEAP8[$add$ptr13$idx96 >> 0] | 0;
 $20 = _load_3($add$ptr13$val, $add$ptr13$idx$val, $add$ptr13$idx96$val) | 0;
 $21 = getTempRet0() | 0;
 $22 = _bitshift64Shl($20 | 0, $21 | 0, 7) | 0;
 $23 = getTempRet0() | 0;
 $add$ptr16 = $s + 23 | 0;
 $add$ptr16$val = HEAP8[$add$ptr16 >> 0] | 0;
 $add$ptr16$idx = $s + 24 | 0;
 $add$ptr16$idx$val = HEAP8[$add$ptr16$idx >> 0] | 0;
 $add$ptr16$idx95 = $s + 25 | 0;
 $add$ptr16$idx95$val = HEAP8[$add$ptr16$idx95 >> 0] | 0;
 $24 = _load_3($add$ptr16$val, $add$ptr16$idx$val, $add$ptr16$idx95$val) | 0;
 $25 = getTempRet0() | 0;
 $26 = _bitshift64Shl($24 | 0, $25 | 0, 5) | 0;
 $27 = getTempRet0() | 0;
 $add$ptr19 = $s + 26 | 0;
 $add$ptr19$val = HEAP8[$add$ptr19 >> 0] | 0;
 $add$ptr19$idx = $s + 27 | 0;
 $add$ptr19$idx$val = HEAP8[$add$ptr19$idx >> 0] | 0;
 $add$ptr19$idx94 = $s + 28 | 0;
 $add$ptr19$idx94$val = HEAP8[$add$ptr19$idx94 >> 0] | 0;
 $28 = _load_3($add$ptr19$val, $add$ptr19$idx$val, $add$ptr19$idx94$val) | 0;
 $29 = getTempRet0() | 0;
 $30 = _bitshift64Shl($28 | 0, $29 | 0, 4) | 0;
 $31 = getTempRet0() | 0;
 $add$ptr22 = $s + 29 | 0;
 $add$ptr22$val = HEAP8[$add$ptr22 >> 0] | 0;
 $add$ptr22$idx = $s + 30 | 0;
 $add$ptr22$idx$val = HEAP8[$add$ptr22$idx >> 0] | 0;
 $add$ptr22$idx93 = $s + 31 | 0;
 $add$ptr22$idx93$val = HEAP8[$add$ptr22$idx93 >> 0] | 0;
 $32 = _load_3($add$ptr22$val, $add$ptr22$idx$val, $add$ptr22$idx93$val) | 0;
 $33 = getTempRet0() | 0;
 $34 = _bitshift64Shl($32 | 0, $33 | 0, 2) | 0;
 $35 = getTempRet0() | 0;
 $36 = $34 & 33554428;
 $37 = ($36 | 0) == 33554428;
 $38 = 0 == 0;
 $39 = $37 & $38;
 $40 = ($30 | 0) == 268435440;
 $41 = ($31 | 0) == 0;
 $42 = $40 & $41;
 $or$cond = $42 & $39;
 $43 = ($26 | 0) == 536870880;
 $44 = ($27 | 0) == 0;
 $45 = $43 & $44;
 $or$cond1 = $45 & $or$cond;
 $46 = ($22 | 0) == 2147483520;
 $47 = ($23 | 0) == 0;
 $48 = $46 & $47;
 $or$cond2 = $48 & $or$cond1;
 $49 = ($18 | 0) == -1;
 $50 = ($19 | 0) == 0;
 $51 = $49 & $50;
 $or$cond3 = $51 & $or$cond2;
 $52 = ($16 | 0) == 67108860;
 $53 = ($17 | 0) == 0;
 $54 = $52 & $53;
 $or$cond4 = $54 & $or$cond3;
 $55 = ($12 | 0) == 134217720;
 $56 = ($13 | 0) == 0;
 $57 = $55 & $56;
 $or$cond5 = $57 & $or$cond4;
 $58 = ($8 | 0) == 536870880;
 $59 = ($9 | 0) == 0;
 $60 = $58 & $59;
 $or$cond6 = $60 & $or$cond5;
 $61 = ($4 | 0) == 1073741760;
 $62 = ($5 | 0) == 0;
 $63 = $61 & $62;
 $or$cond7 = $63 & $or$cond6;
 $64 = ($1 | 0) > 0;
 $65 = $0 >>> 0 > 4294967276;
 $66 = ($1 | 0) == 0;
 $67 = $66 & $65;
 $68 = $64 | $67;
 $or$cond8 = $68 & $or$cond7;
 if ($or$cond8) {
  $retval$0 = -1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $69 = _i64Add($36 | 0, 0, 16777216, 0) | 0;
 $70 = getTempRet0() | 0;
 $71 = _bitshift64Lshr($69 | 0, $70 | 0, 25) | 0;
 $72 = getTempRet0() | 0;
 $73 = _i64Subtract(0, 0, $71 | 0, $72 | 0) | 0;
 $74 = getTempRet0() | 0;
 $75 = $73 & 19;
 $76 = _i64Add($75 | 0, 0, $0 | 0, $1 | 0) | 0;
 $77 = getTempRet0() | 0;
 $78 = $69 & 33554432;
 $79 = _i64Add($4 | 0, $5 | 0, 16777216, 0) | 0;
 $80 = getTempRet0() | 0;
 $81 = _bitshift64Ashr($79 | 0, $80 | 0, 25) | 0;
 $82 = getTempRet0() | 0;
 $83 = _i64Add($8 | 0, $9 | 0, $81 | 0, $82 | 0) | 0;
 $84 = getTempRet0() | 0;
 $85 = $79 & -33554432;
 $86 = _i64Subtract($4 | 0, $5 | 0, $85 | 0, 0) | 0;
 $87 = getTempRet0() | 0;
 $88 = _i64Add($12 | 0, $13 | 0, 16777216, 0) | 0;
 $89 = getTempRet0() | 0;
 $90 = _bitshift64Ashr($88 | 0, $89 | 0, 25) | 0;
 $91 = getTempRet0() | 0;
 $92 = _i64Add($16 | 0, $17 | 0, $90 | 0, $91 | 0) | 0;
 $93 = getTempRet0() | 0;
 $94 = $88 & -33554432;
 $95 = _i64Add($18 | 0, $19 | 0, 16777216, 0) | 0;
 $96 = getTempRet0() | 0;
 $97 = _bitshift64Ashr($95 | 0, $96 | 0, 25) | 0;
 $98 = getTempRet0() | 0;
 $99 = _i64Add($22 | 0, $23 | 0, $97 | 0, $98 | 0) | 0;
 $100 = getTempRet0() | 0;
 $101 = $95 & -33554432;
 $102 = _i64Subtract($18 | 0, $19 | 0, $101 | 0, 0) | 0;
 $103 = getTempRet0() | 0;
 $104 = _i64Add($26 | 0, $27 | 0, 16777216, 0) | 0;
 $105 = getTempRet0() | 0;
 $106 = _bitshift64Ashr($104 | 0, $105 | 0, 25) | 0;
 $107 = getTempRet0() | 0;
 $108 = _i64Add($30 | 0, $31 | 0, $106 | 0, $107 | 0) | 0;
 $109 = getTempRet0() | 0;
 $110 = $104 & -33554432;
 $111 = _i64Add($76 | 0, $77 | 0, 33554432, 0) | 0;
 $112 = getTempRet0() | 0;
 $113 = _bitshift64Lshr($111 | 0, $112 | 0, 26) | 0;
 $114 = getTempRet0() | 0;
 $115 = _i64Add($86 | 0, $87 | 0, $113 | 0, $114 | 0) | 0;
 $116 = getTempRet0() | 0;
 $117 = $111 & -67108864;
 $118 = _i64Subtract($76 | 0, $77 | 0, $117 | 0, 0) | 0;
 $119 = getTempRet0() | 0;
 $120 = _i64Add($83 | 0, $84 | 0, 33554432, 0) | 0;
 $121 = getTempRet0() | 0;
 $122 = _bitshift64Lshr($120 | 0, $121 | 0, 26) | 0;
 $123 = getTempRet0() | 0;
 $124 = _i64Add($12 | 0, $13 | 0, $122 | 0, $123 | 0) | 0;
 $125 = getTempRet0() | 0;
 $126 = _i64Subtract($124 | 0, $125 | 0, $94 | 0, 0) | 0;
 $127 = getTempRet0() | 0;
 $128 = $120 & -67108864;
 $129 = _i64Subtract($83 | 0, $84 | 0, $128 | 0, 0) | 0;
 $130 = getTempRet0() | 0;
 $131 = _i64Add($92 | 0, $93 | 0, 33554432, 0) | 0;
 $132 = getTempRet0() | 0;
 $133 = _bitshift64Lshr($131 | 0, $132 | 0, 26) | 0;
 $134 = getTempRet0() | 0;
 $135 = _i64Add($102 | 0, $103 | 0, $133 | 0, $134 | 0) | 0;
 $136 = getTempRet0() | 0;
 $137 = $131 & -67108864;
 $138 = _i64Subtract($92 | 0, $93 | 0, $137 | 0, 0) | 0;
 $139 = getTempRet0() | 0;
 $140 = _i64Add($99 | 0, $100 | 0, 33554432, 0) | 0;
 $141 = getTempRet0() | 0;
 $142 = _bitshift64Lshr($140 | 0, $141 | 0, 26) | 0;
 $143 = getTempRet0() | 0;
 $144 = _i64Add($26 | 0, $27 | 0, $142 | 0, $143 | 0) | 0;
 $145 = getTempRet0() | 0;
 $146 = _i64Subtract($144 | 0, $145 | 0, $110 | 0, 0) | 0;
 $147 = getTempRet0() | 0;
 $148 = $140 & -67108864;
 $149 = _i64Subtract($99 | 0, $100 | 0, $148 | 0, 0) | 0;
 $150 = getTempRet0() | 0;
 $151 = _i64Add($108 | 0, $109 | 0, 33554432, 0) | 0;
 $152 = getTempRet0() | 0;
 $153 = _bitshift64Lshr($151 | 0, $152 | 0, 26) | 0;
 $154 = getTempRet0() | 0;
 $155 = _i64Add($36 | 0, 0, $153 | 0, $154 | 0) | 0;
 $156 = getTempRet0() | 0;
 $157 = _i64Subtract($155 | 0, $156 | 0, $78 | 0, 0) | 0;
 $158 = getTempRet0() | 0;
 $159 = $151 & -67108864;
 $160 = _i64Subtract($108 | 0, $109 | 0, $159 | 0, 0) | 0;
 $161 = getTempRet0() | 0;
 $arrayidx = $h + 40 | 0;
 HEAP32[$arrayidx >> 2] = $118;
 $arrayidx91 = $h + 44 | 0;
 HEAP32[$arrayidx91 >> 2] = $115;
 $arrayidx94 = $h + 48 | 0;
 HEAP32[$arrayidx94 >> 2] = $129;
 $arrayidx97 = $h + 52 | 0;
 HEAP32[$arrayidx97 >> 2] = $126;
 $arrayidx100 = $h + 56 | 0;
 HEAP32[$arrayidx100 >> 2] = $138;
 $arrayidx103 = $h + 60 | 0;
 HEAP32[$arrayidx103 >> 2] = $135;
 $arrayidx106 = $h + 64 | 0;
 HEAP32[$arrayidx106 >> 2] = $149;
 $arrayidx109 = $h + 68 | 0;
 HEAP32[$arrayidx109 >> 2] = $146;
 $arrayidx112 = $h + 72 | 0;
 HEAP32[$arrayidx112 >> 2] = $160;
 $arrayidx115 = $h + 76 | 0;
 HEAP32[$arrayidx115 >> 2] = $157;
 $arraydecay = $h + 80 | 0;
 _fe_1($arraydecay);
 _fe_sq($u, $arrayidx);
 _fe_mul($v, $u, 368);
 _fe_sub($u, $u, $arraydecay);
 _fe_add($v, $v, $arraydecay);
 _fe_divpowm1($h, $u, $v);
 _fe_sq($vxx, $h);
 _fe_mul($vxx, $vxx, $v);
 _fe_sub($check, $vxx, $u);
 $call142 = _fe_isnonzero($check) | 0;
 $tobool = ($call142 | 0) == 0;
 do {
  if (!$tobool) {
   _fe_add($check, $vxx, $u);
   $call148 = _fe_isnonzero($check) | 0;
   $tobool149 = ($call148 | 0) == 0;
   if ($tobool149) {
    _fe_mul($h, $h, 416);
    break;
   } else {
    $retval$0 = -1;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
  }
 } while (0);
 $call159 = _fe_isnegative($h) | 0;
 $162 = HEAP8[$add$ptr22$idx93 >> 0] | 0;
 $conv161 = $162 & 255;
 $163 = $conv161 >>> 7;
 $cmp163 = ($call159 | 0) == ($163 | 0);
 do {
  if (!$cmp163) {
   $call168 = _fe_isnonzero($h) | 0;
   $tobool169 = ($call168 | 0) == 0;
   if ($tobool169) {
    $retval$0 = -1;
    STACKTOP = sp;
    return $retval$0 | 0;
   } else {
    _fe_neg($h, $h);
    break;
   }
  }
 } while (0);
 $arraydecay177 = $h + 120 | 0;
 _fe_mul($arraydecay177, $h, $arrayidx);
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _ge_fromfe_frombytes_vartime($r, $s) {
 $r = $r | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr = 0, $add$ptr$idx = 0, $add$ptr$idx$val = 0, $add$ptr$idx80 = 0, $add$ptr$idx80$val = 0, $add$ptr$val = 0, $add$ptr11 = 0, $add$ptr13 = 0, $add$ptr13$idx = 0, $add$ptr13$idx$val = 0, $add$ptr13$idx76 = 0, $add$ptr13$idx76$val = 0;
 var $add$ptr13$val = 0, $add$ptr16 = 0, $add$ptr16$idx = 0, $add$ptr16$idx$val = 0, $add$ptr16$idx75 = 0, $add$ptr16$idx75$val = 0, $add$ptr16$val = 0, $add$ptr19 = 0, $add$ptr19$idx = 0, $add$ptr19$idx$val = 0, $add$ptr19$idx74 = 0, $add$ptr19$idx74$val = 0, $add$ptr19$val = 0, $add$ptr2 = 0, $add$ptr2$idx = 0, $add$ptr2$idx$val = 0, $add$ptr2$idx79 = 0, $add$ptr2$idx79$val = 0, $add$ptr2$val = 0, $add$ptr22 = 0;
 var $add$ptr22$idx = 0, $add$ptr22$idx$val = 0, $add$ptr22$idx73 = 0, $add$ptr22$idx73$val = 0, $add$ptr22$val = 0, $add$ptr5 = 0, $add$ptr5$idx = 0, $add$ptr5$idx$val = 0, $add$ptr5$idx78 = 0, $add$ptr5$idx78$val = 0, $add$ptr5$val = 0, $add$ptr8 = 0, $add$ptr8$idx = 0, $add$ptr8$idx$val = 0, $add$ptr8$idx77 = 0, $add$ptr8$idx77$val = 0, $add$ptr8$val = 0, $arraydecay185 = 0, $arraydecay188 = 0, $arrayidx73 = 0;
 var $arrayidx75 = 0, $arrayidx77 = 0, $arrayidx79 = 0, $arrayidx81 = 0, $arrayidx83 = 0, $arrayidx85 = 0, $arrayidx87 = 0, $arrayidx89 = 0, $call116 = 0, $call121 = 0, $call148 = 0, $call155 = 0, $call169 = 0, $call175 = 0, $call228 = 0, $check_iz = 0, $check_v = 0, $check_x = 0, $check_y = 0, $cmp = 0;
 var $sign$0 = 0, $tobool = 0, $tobool122 = 0, $tobool149 = 0, $tobool156 = 0, $tobool176 = 0, $tobool229 = 0, $u = 0, $v = 0, $w = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(480 | 0);
 $u = sp + 432 | 0;
 $v = sp + 384 | 0;
 $w = sp + 336 | 0;
 $x = sp + 288 | 0;
 $y = sp + 240 | 0;
 $z = sp + 192 | 0;
 $check_x = sp + 144 | 0;
 $check_y = sp + 96 | 0;
 $check_iz = sp + 48 | 0;
 $check_v = sp;
 $0 = _load_4($s) | 0;
 $1 = getTempRet0() | 0;
 $add$ptr = $s + 4 | 0;
 $add$ptr$val = HEAP8[$add$ptr >> 0] | 0;
 $add$ptr$idx = $s + 5 | 0;
 $add$ptr$idx$val = HEAP8[$add$ptr$idx >> 0] | 0;
 $add$ptr$idx80 = $s + 6 | 0;
 $add$ptr$idx80$val = HEAP8[$add$ptr$idx80 >> 0] | 0;
 $2 = _load_3($add$ptr$val, $add$ptr$idx$val, $add$ptr$idx80$val) | 0;
 $3 = getTempRet0() | 0;
 $4 = _bitshift64Shl($2 | 0, $3 | 0, 6) | 0;
 $5 = getTempRet0() | 0;
 $add$ptr2 = $s + 7 | 0;
 $add$ptr2$val = HEAP8[$add$ptr2 >> 0] | 0;
 $add$ptr2$idx = $s + 8 | 0;
 $add$ptr2$idx$val = HEAP8[$add$ptr2$idx >> 0] | 0;
 $add$ptr2$idx79 = $s + 9 | 0;
 $add$ptr2$idx79$val = HEAP8[$add$ptr2$idx79 >> 0] | 0;
 $6 = _load_3($add$ptr2$val, $add$ptr2$idx$val, $add$ptr2$idx79$val) | 0;
 $7 = getTempRet0() | 0;
 $8 = _bitshift64Shl($6 | 0, $7 | 0, 5) | 0;
 $9 = getTempRet0() | 0;
 $add$ptr5 = $s + 10 | 0;
 $add$ptr5$val = HEAP8[$add$ptr5 >> 0] | 0;
 $add$ptr5$idx = $s + 11 | 0;
 $add$ptr5$idx$val = HEAP8[$add$ptr5$idx >> 0] | 0;
 $add$ptr5$idx78 = $s + 12 | 0;
 $add$ptr5$idx78$val = HEAP8[$add$ptr5$idx78 >> 0] | 0;
 $10 = _load_3($add$ptr5$val, $add$ptr5$idx$val, $add$ptr5$idx78$val) | 0;
 $11 = getTempRet0() | 0;
 $12 = _bitshift64Shl($10 | 0, $11 | 0, 3) | 0;
 $13 = getTempRet0() | 0;
 $add$ptr8 = $s + 13 | 0;
 $add$ptr8$val = HEAP8[$add$ptr8 >> 0] | 0;
 $add$ptr8$idx = $s + 14 | 0;
 $add$ptr8$idx$val = HEAP8[$add$ptr8$idx >> 0] | 0;
 $add$ptr8$idx77 = $s + 15 | 0;
 $add$ptr8$idx77$val = HEAP8[$add$ptr8$idx77 >> 0] | 0;
 $14 = _load_3($add$ptr8$val, $add$ptr8$idx$val, $add$ptr8$idx77$val) | 0;
 $15 = getTempRet0() | 0;
 $16 = _bitshift64Shl($14 | 0, $15 | 0, 2) | 0;
 $17 = getTempRet0() | 0;
 $add$ptr11 = $s + 16 | 0;
 $18 = _load_4($add$ptr11) | 0;
 $19 = getTempRet0() | 0;
 $add$ptr13 = $s + 20 | 0;
 $add$ptr13$val = HEAP8[$add$ptr13 >> 0] | 0;
 $add$ptr13$idx = $s + 21 | 0;
 $add$ptr13$idx$val = HEAP8[$add$ptr13$idx >> 0] | 0;
 $add$ptr13$idx76 = $s + 22 | 0;
 $add$ptr13$idx76$val = HEAP8[$add$ptr13$idx76 >> 0] | 0;
 $20 = _load_3($add$ptr13$val, $add$ptr13$idx$val, $add$ptr13$idx76$val) | 0;
 $21 = getTempRet0() | 0;
 $22 = _bitshift64Shl($20 | 0, $21 | 0, 7) | 0;
 $23 = getTempRet0() | 0;
 $add$ptr16 = $s + 23 | 0;
 $add$ptr16$val = HEAP8[$add$ptr16 >> 0] | 0;
 $add$ptr16$idx = $s + 24 | 0;
 $add$ptr16$idx$val = HEAP8[$add$ptr16$idx >> 0] | 0;
 $add$ptr16$idx75 = $s + 25 | 0;
 $add$ptr16$idx75$val = HEAP8[$add$ptr16$idx75 >> 0] | 0;
 $24 = _load_3($add$ptr16$val, $add$ptr16$idx$val, $add$ptr16$idx75$val) | 0;
 $25 = getTempRet0() | 0;
 $26 = _bitshift64Shl($24 | 0, $25 | 0, 5) | 0;
 $27 = getTempRet0() | 0;
 $add$ptr19 = $s + 26 | 0;
 $add$ptr19$val = HEAP8[$add$ptr19 >> 0] | 0;
 $add$ptr19$idx = $s + 27 | 0;
 $add$ptr19$idx$val = HEAP8[$add$ptr19$idx >> 0] | 0;
 $add$ptr19$idx74 = $s + 28 | 0;
 $add$ptr19$idx74$val = HEAP8[$add$ptr19$idx74 >> 0] | 0;
 $28 = _load_3($add$ptr19$val, $add$ptr19$idx$val, $add$ptr19$idx74$val) | 0;
 $29 = getTempRet0() | 0;
 $30 = _bitshift64Shl($28 | 0, $29 | 0, 4) | 0;
 $31 = getTempRet0() | 0;
 $add$ptr22 = $s + 29 | 0;
 $add$ptr22$val = HEAP8[$add$ptr22 >> 0] | 0;
 $add$ptr22$idx = $s + 30 | 0;
 $add$ptr22$idx$val = HEAP8[$add$ptr22$idx >> 0] | 0;
 $add$ptr22$idx73 = $s + 31 | 0;
 $add$ptr22$idx73$val = HEAP8[$add$ptr22$idx73 >> 0] | 0;
 $32 = _load_3($add$ptr22$val, $add$ptr22$idx$val, $add$ptr22$idx73$val) | 0;
 $33 = getTempRet0() | 0;
 $34 = _bitshift64Shl($32 | 0, $33 | 0, 2) | 0;
 $35 = getTempRet0() | 0;
 $36 = _i64Add($34 | 0, $35 | 0, 16777216, 0) | 0;
 $37 = getTempRet0() | 0;
 $38 = _bitshift64Ashr($36 | 0, $37 | 0, 25) | 0;
 $39 = getTempRet0() | 0;
 $40 = ___muldi3($38 | 0, $39 | 0, 19, 0) | 0;
 $41 = getTempRet0() | 0;
 $42 = _i64Add($40 | 0, $41 | 0, $0 | 0, $1 | 0) | 0;
 $43 = getTempRet0() | 0;
 $44 = $36 & -33554432;
 $45 = _i64Add($4 | 0, $5 | 0, 16777216, 0) | 0;
 $46 = getTempRet0() | 0;
 $47 = _bitshift64Ashr($45 | 0, $46 | 0, 25) | 0;
 $48 = getTempRet0() | 0;
 $49 = _i64Add($8 | 0, $9 | 0, $47 | 0, $48 | 0) | 0;
 $50 = getTempRet0() | 0;
 $51 = $45 & -33554432;
 $52 = _i64Subtract($4 | 0, $5 | 0, $51 | 0, 0) | 0;
 $53 = getTempRet0() | 0;
 $54 = _i64Add($12 | 0, $13 | 0, 16777216, 0) | 0;
 $55 = getTempRet0() | 0;
 $56 = _bitshift64Ashr($54 | 0, $55 | 0, 25) | 0;
 $57 = getTempRet0() | 0;
 $58 = _i64Add($16 | 0, $17 | 0, $56 | 0, $57 | 0) | 0;
 $59 = getTempRet0() | 0;
 $60 = $54 & -33554432;
 $61 = _i64Add($18 | 0, $19 | 0, 16777216, 0) | 0;
 $62 = getTempRet0() | 0;
 $63 = _bitshift64Ashr($61 | 0, $62 | 0, 25) | 0;
 $64 = getTempRet0() | 0;
 $65 = _i64Add($22 | 0, $23 | 0, $63 | 0, $64 | 0) | 0;
 $66 = getTempRet0() | 0;
 $67 = $61 & -33554432;
 $68 = _i64Subtract($18 | 0, $19 | 0, $67 | 0, 0) | 0;
 $69 = getTempRet0() | 0;
 $70 = _i64Add($26 | 0, $27 | 0, 16777216, 0) | 0;
 $71 = getTempRet0() | 0;
 $72 = _bitshift64Ashr($70 | 0, $71 | 0, 25) | 0;
 $73 = getTempRet0() | 0;
 $74 = _i64Add($30 | 0, $31 | 0, $72 | 0, $73 | 0) | 0;
 $75 = getTempRet0() | 0;
 $76 = $70 & -33554432;
 $77 = _i64Add($42 | 0, $43 | 0, 33554432, 0) | 0;
 $78 = getTempRet0() | 0;
 $79 = _bitshift64Lshr($77 | 0, $78 | 0, 26) | 0;
 $80 = getTempRet0() | 0;
 $81 = _i64Add($52 | 0, $53 | 0, $79 | 0, $80 | 0) | 0;
 $82 = getTempRet0() | 0;
 $83 = $77 & -67108864;
 $84 = _i64Subtract($42 | 0, $43 | 0, $83 | 0, 0) | 0;
 $85 = getTempRet0() | 0;
 $86 = _i64Add($49 | 0, $50 | 0, 33554432, 0) | 0;
 $87 = getTempRet0() | 0;
 $88 = _bitshift64Lshr($86 | 0, $87 | 0, 26) | 0;
 $89 = getTempRet0() | 0;
 $90 = _i64Add($12 | 0, $13 | 0, $88 | 0, $89 | 0) | 0;
 $91 = getTempRet0() | 0;
 $92 = _i64Subtract($90 | 0, $91 | 0, $60 | 0, 0) | 0;
 $93 = getTempRet0() | 0;
 $94 = $86 & -67108864;
 $95 = _i64Subtract($49 | 0, $50 | 0, $94 | 0, 0) | 0;
 $96 = getTempRet0() | 0;
 $97 = _i64Add($58 | 0, $59 | 0, 33554432, 0) | 0;
 $98 = getTempRet0() | 0;
 $99 = _bitshift64Lshr($97 | 0, $98 | 0, 26) | 0;
 $100 = getTempRet0() | 0;
 $101 = _i64Add($68 | 0, $69 | 0, $99 | 0, $100 | 0) | 0;
 $102 = getTempRet0() | 0;
 $103 = $97 & -67108864;
 $104 = _i64Subtract($58 | 0, $59 | 0, $103 | 0, 0) | 0;
 $105 = getTempRet0() | 0;
 $106 = _i64Add($65 | 0, $66 | 0, 33554432, 0) | 0;
 $107 = getTempRet0() | 0;
 $108 = _bitshift64Lshr($106 | 0, $107 | 0, 26) | 0;
 $109 = getTempRet0() | 0;
 $110 = _i64Add($26 | 0, $27 | 0, $108 | 0, $109 | 0) | 0;
 $111 = getTempRet0() | 0;
 $112 = _i64Subtract($110 | 0, $111 | 0, $76 | 0, 0) | 0;
 $113 = getTempRet0() | 0;
 $114 = $106 & -67108864;
 $115 = _i64Subtract($65 | 0, $66 | 0, $114 | 0, 0) | 0;
 $116 = getTempRet0() | 0;
 $117 = _i64Add($74 | 0, $75 | 0, 33554432, 0) | 0;
 $118 = getTempRet0() | 0;
 $119 = _bitshift64Lshr($117 | 0, $118 | 0, 26) | 0;
 $120 = getTempRet0() | 0;
 $121 = _i64Add($34 | 0, $35 | 0, $119 | 0, $120 | 0) | 0;
 $122 = getTempRet0() | 0;
 $123 = _i64Subtract($121 | 0, $122 | 0, $44 | 0, 0) | 0;
 $124 = getTempRet0() | 0;
 $125 = $117 & -67108864;
 $126 = _i64Subtract($74 | 0, $75 | 0, $125 | 0, 0) | 0;
 $127 = getTempRet0() | 0;
 HEAP32[$u >> 2] = $84;
 $arrayidx73 = $u + 4 | 0;
 HEAP32[$arrayidx73 >> 2] = $81;
 $arrayidx75 = $u + 8 | 0;
 HEAP32[$arrayidx75 >> 2] = $95;
 $arrayidx77 = $u + 12 | 0;
 HEAP32[$arrayidx77 >> 2] = $92;
 $arrayidx79 = $u + 16 | 0;
 HEAP32[$arrayidx79 >> 2] = $104;
 $arrayidx81 = $u + 20 | 0;
 HEAP32[$arrayidx81 >> 2] = $101;
 $arrayidx83 = $u + 24 | 0;
 HEAP32[$arrayidx83 >> 2] = $115;
 $arrayidx85 = $u + 28 | 0;
 HEAP32[$arrayidx85 >> 2] = $112;
 $arrayidx87 = $u + 32 | 0;
 HEAP32[$arrayidx87 >> 2] = $126;
 $arrayidx89 = $u + 36 | 0;
 HEAP32[$arrayidx89 >> 2] = $123;
 _fe_sq2($v, $u);
 _fe_1($w);
 _fe_add($w, $v, $w);
 _fe_sq($x, $w);
 _fe_mul($y, 32192, $v);
 _fe_add($x, $x, $y);
 _fe_divpowm1($r, $w, $x);
 _fe_sq($y, $r);
 _fe_mul($x, $y, $x);
 _fe_sub($y, $w, $x);
 _fe_copy($z, 32240);
 $call116 = _fe_isnonzero($y) | 0;
 $tobool = ($call116 | 0) == 0;
 do {
  if ($tobool) {
   _fe_mul($r, $r, 32336);
   label = 5;
  } else {
   _fe_add($y, $w, $x);
   $call121 = _fe_isnonzero($y) | 0;
   $tobool122 = ($call121 | 0) == 0;
   if ($tobool122) {
    _fe_mul($r, $r, 32288);
    label = 5;
    break;
   }
   _fe_mul($x, $x, 416);
   _fe_sub($y, $w, $x);
   $call148 = _fe_isnonzero($y) | 0;
   $tobool149 = ($call148 | 0) == 0;
   if ($tobool149) {
    _fe_mul($r, $r, 32432);
    $sign$0 = 1;
    break;
   }
   _fe_add($y, $w, $x);
   $call155 = _fe_isnonzero($y) | 0;
   $tobool156 = ($call155 | 0) == 0;
   if ($tobool156) {
    _fe_mul($r, $r, 32384);
    $sign$0 = 1;
    break;
   } else {
    ___assert_fail(45815 | 0, 45753 | 0, 3032, 45851 | 0);
   }
  }
 } while (0);
 if ((label | 0) == 5) {
  _fe_mul($r, $r, $u);
  _fe_mul($z, $z, $v);
  $sign$0 = 0;
 }
 $call169 = _fe_isnegative($r) | 0;
 $cmp = ($call169 | 0) == ($sign$0 | 0);
 do {
  if (!$cmp) {
   $call175 = _fe_isnonzero($r) | 0;
   $tobool176 = ($call175 | 0) == 0;
   if ($tobool176) {
    ___assert_fail(45879 | 0, 45753 | 0, 3045, 45851 | 0);
   } else {
    _fe_neg($r, $r);
    break;
   }
  }
 } while (0);
 $arraydecay185 = $r + 80 | 0;
 _fe_add($arraydecay185, $z, $w);
 $arraydecay188 = $r + 40 | 0;
 _fe_sub($arraydecay188, $z, $w);
 _fe_mul($r, $r, $arraydecay185);
 _fe_invert($check_iz, $arraydecay185);
 _fe_mul($check_x, $r, $check_iz);
 _fe_mul($check_y, $arraydecay188, $check_iz);
 _fe_sq($check_x, $check_x);
 _fe_sq($check_y, $check_y);
 _fe_mul($check_v, $check_x, $check_y);
 _fe_mul($check_v, 368, $check_v);
 _fe_add($check_v, $check_v, $check_x);
 _fe_sub($check_v, $check_v, $check_y);
 _fe_1($check_x);
 _fe_add($check_v, $check_v, $check_x);
 $call228 = _fe_isnonzero($check_v) | 0;
 $tobool229 = ($call228 | 0) == 0;
 if ($tobool229) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(45898 | 0, 45753 | 0, 3065, 45851 | 0);
 }
}

function _ge_scalarmult_base($h, $a) {
 $h = $h | 0;
 $a = $a | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $add18 = 0, $add37 = 0, $add45 = 0, $add54 = 0, $arrayidx$1 = 0, $arrayidx$10 = 0, $arrayidx$11 = 0, $arrayidx$12 = 0, $arrayidx$13 = 0, $arrayidx$14 = 0, $arrayidx$15 = 0, $arrayidx$16 = 0, $arrayidx$17 = 0, $arrayidx$18 = 0, $arrayidx$19 = 0, $arrayidx$2 = 0, $arrayidx$20 = 0, $arrayidx$21 = 0, $arrayidx$22 = 0, $arrayidx$23 = 0;
 var $arrayidx$24 = 0, $arrayidx$25 = 0, $arrayidx$26 = 0, $arrayidx$27 = 0, $arrayidx$28 = 0, $arrayidx$29 = 0, $arrayidx$3 = 0, $arrayidx$30 = 0, $arrayidx$31 = 0, $arrayidx$4 = 0, $arrayidx$5 = 0, $arrayidx$6 = 0, $arrayidx$7 = 0, $arrayidx$8 = 0, $arrayidx$9 = 0, $arrayidx10 = 0, $arrayidx10$1 = 0, $arrayidx10$10 = 0, $arrayidx10$11 = 0, $arrayidx10$12 = 0;
 var $arrayidx10$13 = 0, $arrayidx10$14 = 0, $arrayidx10$15 = 0, $arrayidx10$16 = 0, $arrayidx10$17 = 0, $arrayidx10$18 = 0, $arrayidx10$19 = 0, $arrayidx10$2 = 0, $arrayidx10$20 = 0, $arrayidx10$21 = 0, $arrayidx10$22 = 0, $arrayidx10$23 = 0, $arrayidx10$24 = 0, $arrayidx10$25 = 0, $arrayidx10$26 = 0, $arrayidx10$27 = 0, $arrayidx10$28 = 0, $arrayidx10$29 = 0, $arrayidx10$3 = 0, $arrayidx10$30 = 0;
 var $arrayidx10$31 = 0, $arrayidx10$4 = 0, $arrayidx10$5 = 0, $arrayidx10$6 = 0, $arrayidx10$7 = 0, $arrayidx10$8 = 0, $arrayidx10$9 = 0, $arrayidx16 = 0, $arrayidx2$1 = 0, $arrayidx2$10 = 0, $arrayidx2$11 = 0, $arrayidx2$12 = 0, $arrayidx2$13 = 0, $arrayidx2$14 = 0, $arrayidx2$15 = 0, $arrayidx2$16 = 0, $arrayidx2$17 = 0, $arrayidx2$18 = 0, $arrayidx2$19 = 0, $arrayidx2$2 = 0;
 var $arrayidx2$20 = 0, $arrayidx2$21 = 0, $arrayidx2$22 = 0, $arrayidx2$23 = 0, $arrayidx2$24 = 0, $arrayidx2$25 = 0, $arrayidx2$26 = 0, $arrayidx2$27 = 0, $arrayidx2$28 = 0, $arrayidx2$29 = 0, $arrayidx2$3 = 0, $arrayidx2$30 = 0, $arrayidx2$31 = 0, $arrayidx2$4 = 0, $arrayidx2$5 = 0, $arrayidx2$6 = 0, $arrayidx2$7 = 0, $arrayidx2$8 = 0, $arrayidx2$9 = 0, $arrayidx43 = 0;
 var $arrayidx52 = 0, $carry$033 = 0, $cmp40 = 0, $cmp48 = 0, $conv1729 = 0, $conv30 = 0, $conv3628 = 0, $conv38 = 0, $div = 0, $div51 = 0, $e = 0, $exitcond = 0, $i$134 = 0, $i$232 = 0, $i$331 = 0, $inc32 = 0, $r = 0, $s = 0, $sext = 0, $sext30 = 0;
 var $shl = 0, $shr25 = 0, $sub = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(464 | 0);
 $e = sp;
 $r = sp + 304 | 0;
 $s = sp + 184 | 0;
 $t = sp + 64 | 0;
 $0 = HEAP8[$a >> 0] | 0;
 $1 = $0 & 15;
 HEAP8[$e >> 0] = $1;
 $2 = ($0 & 255) >>> 4;
 $arrayidx10 = $e + 1 | 0;
 HEAP8[$arrayidx10 >> 0] = $2;
 $arrayidx$1 = $a + 1 | 0;
 $3 = HEAP8[$arrayidx$1 >> 0] | 0;
 $4 = $3 & 15;
 $arrayidx2$1 = $e + 2 | 0;
 HEAP8[$arrayidx2$1 >> 0] = $4;
 $5 = ($3 & 255) >>> 4;
 $arrayidx10$1 = $e + 3 | 0;
 HEAP8[$arrayidx10$1 >> 0] = $5;
 $arrayidx$2 = $a + 2 | 0;
 $6 = HEAP8[$arrayidx$2 >> 0] | 0;
 $7 = $6 & 15;
 $arrayidx2$2 = $e + 4 | 0;
 HEAP8[$arrayidx2$2 >> 0] = $7;
 $8 = ($6 & 255) >>> 4;
 $arrayidx10$2 = $e + 5 | 0;
 HEAP8[$arrayidx10$2 >> 0] = $8;
 $arrayidx$3 = $a + 3 | 0;
 $9 = HEAP8[$arrayidx$3 >> 0] | 0;
 $10 = $9 & 15;
 $arrayidx2$3 = $e + 6 | 0;
 HEAP8[$arrayidx2$3 >> 0] = $10;
 $11 = ($9 & 255) >>> 4;
 $arrayidx10$3 = $e + 7 | 0;
 HEAP8[$arrayidx10$3 >> 0] = $11;
 $arrayidx$4 = $a + 4 | 0;
 $12 = HEAP8[$arrayidx$4 >> 0] | 0;
 $13 = $12 & 15;
 $arrayidx2$4 = $e + 8 | 0;
 HEAP8[$arrayidx2$4 >> 0] = $13;
 $14 = ($12 & 255) >>> 4;
 $arrayidx10$4 = $e + 9 | 0;
 HEAP8[$arrayidx10$4 >> 0] = $14;
 $arrayidx$5 = $a + 5 | 0;
 $15 = HEAP8[$arrayidx$5 >> 0] | 0;
 $16 = $15 & 15;
 $arrayidx2$5 = $e + 10 | 0;
 HEAP8[$arrayidx2$5 >> 0] = $16;
 $17 = ($15 & 255) >>> 4;
 $arrayidx10$5 = $e + 11 | 0;
 HEAP8[$arrayidx10$5 >> 0] = $17;
 $arrayidx$6 = $a + 6 | 0;
 $18 = HEAP8[$arrayidx$6 >> 0] | 0;
 $19 = $18 & 15;
 $arrayidx2$6 = $e + 12 | 0;
 HEAP8[$arrayidx2$6 >> 0] = $19;
 $20 = ($18 & 255) >>> 4;
 $arrayidx10$6 = $e + 13 | 0;
 HEAP8[$arrayidx10$6 >> 0] = $20;
 $arrayidx$7 = $a + 7 | 0;
 $21 = HEAP8[$arrayidx$7 >> 0] | 0;
 $22 = $21 & 15;
 $arrayidx2$7 = $e + 14 | 0;
 HEAP8[$arrayidx2$7 >> 0] = $22;
 $23 = ($21 & 255) >>> 4;
 $arrayidx10$7 = $e + 15 | 0;
 HEAP8[$arrayidx10$7 >> 0] = $23;
 $arrayidx$8 = $a + 8 | 0;
 $24 = HEAP8[$arrayidx$8 >> 0] | 0;
 $25 = $24 & 15;
 $arrayidx2$8 = $e + 16 | 0;
 HEAP8[$arrayidx2$8 >> 0] = $25;
 $26 = ($24 & 255) >>> 4;
 $arrayidx10$8 = $e + 17 | 0;
 HEAP8[$arrayidx10$8 >> 0] = $26;
 $arrayidx$9 = $a + 9 | 0;
 $27 = HEAP8[$arrayidx$9 >> 0] | 0;
 $28 = $27 & 15;
 $arrayidx2$9 = $e + 18 | 0;
 HEAP8[$arrayidx2$9 >> 0] = $28;
 $29 = ($27 & 255) >>> 4;
 $arrayidx10$9 = $e + 19 | 0;
 HEAP8[$arrayidx10$9 >> 0] = $29;
 $arrayidx$10 = $a + 10 | 0;
 $30 = HEAP8[$arrayidx$10 >> 0] | 0;
 $31 = $30 & 15;
 $arrayidx2$10 = $e + 20 | 0;
 HEAP8[$arrayidx2$10 >> 0] = $31;
 $32 = ($30 & 255) >>> 4;
 $arrayidx10$10 = $e + 21 | 0;
 HEAP8[$arrayidx10$10 >> 0] = $32;
 $arrayidx$11 = $a + 11 | 0;
 $33 = HEAP8[$arrayidx$11 >> 0] | 0;
 $34 = $33 & 15;
 $arrayidx2$11 = $e + 22 | 0;
 HEAP8[$arrayidx2$11 >> 0] = $34;
 $35 = ($33 & 255) >>> 4;
 $arrayidx10$11 = $e + 23 | 0;
 HEAP8[$arrayidx10$11 >> 0] = $35;
 $arrayidx$12 = $a + 12 | 0;
 $36 = HEAP8[$arrayidx$12 >> 0] | 0;
 $37 = $36 & 15;
 $arrayidx2$12 = $e + 24 | 0;
 HEAP8[$arrayidx2$12 >> 0] = $37;
 $38 = ($36 & 255) >>> 4;
 $arrayidx10$12 = $e + 25 | 0;
 HEAP8[$arrayidx10$12 >> 0] = $38;
 $arrayidx$13 = $a + 13 | 0;
 $39 = HEAP8[$arrayidx$13 >> 0] | 0;
 $40 = $39 & 15;
 $arrayidx2$13 = $e + 26 | 0;
 HEAP8[$arrayidx2$13 >> 0] = $40;
 $41 = ($39 & 255) >>> 4;
 $arrayidx10$13 = $e + 27 | 0;
 HEAP8[$arrayidx10$13 >> 0] = $41;
 $arrayidx$14 = $a + 14 | 0;
 $42 = HEAP8[$arrayidx$14 >> 0] | 0;
 $43 = $42 & 15;
 $arrayidx2$14 = $e + 28 | 0;
 HEAP8[$arrayidx2$14 >> 0] = $43;
 $44 = ($42 & 255) >>> 4;
 $arrayidx10$14 = $e + 29 | 0;
 HEAP8[$arrayidx10$14 >> 0] = $44;
 $arrayidx$15 = $a + 15 | 0;
 $45 = HEAP8[$arrayidx$15 >> 0] | 0;
 $46 = $45 & 15;
 $arrayidx2$15 = $e + 30 | 0;
 HEAP8[$arrayidx2$15 >> 0] = $46;
 $47 = ($45 & 255) >>> 4;
 $arrayidx10$15 = $e + 31 | 0;
 HEAP8[$arrayidx10$15 >> 0] = $47;
 $arrayidx$16 = $a + 16 | 0;
 $48 = HEAP8[$arrayidx$16 >> 0] | 0;
 $49 = $48 & 15;
 $arrayidx2$16 = $e + 32 | 0;
 HEAP8[$arrayidx2$16 >> 0] = $49;
 $50 = ($48 & 255) >>> 4;
 $arrayidx10$16 = $e + 33 | 0;
 HEAP8[$arrayidx10$16 >> 0] = $50;
 $arrayidx$17 = $a + 17 | 0;
 $51 = HEAP8[$arrayidx$17 >> 0] | 0;
 $52 = $51 & 15;
 $arrayidx2$17 = $e + 34 | 0;
 HEAP8[$arrayidx2$17 >> 0] = $52;
 $53 = ($51 & 255) >>> 4;
 $arrayidx10$17 = $e + 35 | 0;
 HEAP8[$arrayidx10$17 >> 0] = $53;
 $arrayidx$18 = $a + 18 | 0;
 $54 = HEAP8[$arrayidx$18 >> 0] | 0;
 $55 = $54 & 15;
 $arrayidx2$18 = $e + 36 | 0;
 HEAP8[$arrayidx2$18 >> 0] = $55;
 $56 = ($54 & 255) >>> 4;
 $arrayidx10$18 = $e + 37 | 0;
 HEAP8[$arrayidx10$18 >> 0] = $56;
 $arrayidx$19 = $a + 19 | 0;
 $57 = HEAP8[$arrayidx$19 >> 0] | 0;
 $58 = $57 & 15;
 $arrayidx2$19 = $e + 38 | 0;
 HEAP8[$arrayidx2$19 >> 0] = $58;
 $59 = ($57 & 255) >>> 4;
 $arrayidx10$19 = $e + 39 | 0;
 HEAP8[$arrayidx10$19 >> 0] = $59;
 $arrayidx$20 = $a + 20 | 0;
 $60 = HEAP8[$arrayidx$20 >> 0] | 0;
 $61 = $60 & 15;
 $arrayidx2$20 = $e + 40 | 0;
 HEAP8[$arrayidx2$20 >> 0] = $61;
 $62 = ($60 & 255) >>> 4;
 $arrayidx10$20 = $e + 41 | 0;
 HEAP8[$arrayidx10$20 >> 0] = $62;
 $arrayidx$21 = $a + 21 | 0;
 $63 = HEAP8[$arrayidx$21 >> 0] | 0;
 $64 = $63 & 15;
 $arrayidx2$21 = $e + 42 | 0;
 HEAP8[$arrayidx2$21 >> 0] = $64;
 $65 = ($63 & 255) >>> 4;
 $arrayidx10$21 = $e + 43 | 0;
 HEAP8[$arrayidx10$21 >> 0] = $65;
 $arrayidx$22 = $a + 22 | 0;
 $66 = HEAP8[$arrayidx$22 >> 0] | 0;
 $67 = $66 & 15;
 $arrayidx2$22 = $e + 44 | 0;
 HEAP8[$arrayidx2$22 >> 0] = $67;
 $68 = ($66 & 255) >>> 4;
 $arrayidx10$22 = $e + 45 | 0;
 HEAP8[$arrayidx10$22 >> 0] = $68;
 $arrayidx$23 = $a + 23 | 0;
 $69 = HEAP8[$arrayidx$23 >> 0] | 0;
 $70 = $69 & 15;
 $arrayidx2$23 = $e + 46 | 0;
 HEAP8[$arrayidx2$23 >> 0] = $70;
 $71 = ($69 & 255) >>> 4;
 $arrayidx10$23 = $e + 47 | 0;
 HEAP8[$arrayidx10$23 >> 0] = $71;
 $arrayidx$24 = $a + 24 | 0;
 $72 = HEAP8[$arrayidx$24 >> 0] | 0;
 $73 = $72 & 15;
 $arrayidx2$24 = $e + 48 | 0;
 HEAP8[$arrayidx2$24 >> 0] = $73;
 $74 = ($72 & 255) >>> 4;
 $arrayidx10$24 = $e + 49 | 0;
 HEAP8[$arrayidx10$24 >> 0] = $74;
 $arrayidx$25 = $a + 25 | 0;
 $75 = HEAP8[$arrayidx$25 >> 0] | 0;
 $76 = $75 & 15;
 $arrayidx2$25 = $e + 50 | 0;
 HEAP8[$arrayidx2$25 >> 0] = $76;
 $77 = ($75 & 255) >>> 4;
 $arrayidx10$25 = $e + 51 | 0;
 HEAP8[$arrayidx10$25 >> 0] = $77;
 $arrayidx$26 = $a + 26 | 0;
 $78 = HEAP8[$arrayidx$26 >> 0] | 0;
 $79 = $78 & 15;
 $arrayidx2$26 = $e + 52 | 0;
 HEAP8[$arrayidx2$26 >> 0] = $79;
 $80 = ($78 & 255) >>> 4;
 $arrayidx10$26 = $e + 53 | 0;
 HEAP8[$arrayidx10$26 >> 0] = $80;
 $arrayidx$27 = $a + 27 | 0;
 $81 = HEAP8[$arrayidx$27 >> 0] | 0;
 $82 = $81 & 15;
 $arrayidx2$27 = $e + 54 | 0;
 HEAP8[$arrayidx2$27 >> 0] = $82;
 $83 = ($81 & 255) >>> 4;
 $arrayidx10$27 = $e + 55 | 0;
 HEAP8[$arrayidx10$27 >> 0] = $83;
 $arrayidx$28 = $a + 28 | 0;
 $84 = HEAP8[$arrayidx$28 >> 0] | 0;
 $85 = $84 & 15;
 $arrayidx2$28 = $e + 56 | 0;
 HEAP8[$arrayidx2$28 >> 0] = $85;
 $86 = ($84 & 255) >>> 4;
 $arrayidx10$28 = $e + 57 | 0;
 HEAP8[$arrayidx10$28 >> 0] = $86;
 $arrayidx$29 = $a + 29 | 0;
 $87 = HEAP8[$arrayidx$29 >> 0] | 0;
 $88 = $87 & 15;
 $arrayidx2$29 = $e + 58 | 0;
 HEAP8[$arrayidx2$29 >> 0] = $88;
 $89 = ($87 & 255) >>> 4;
 $arrayidx10$29 = $e + 59 | 0;
 HEAP8[$arrayidx10$29 >> 0] = $89;
 $arrayidx$30 = $a + 30 | 0;
 $90 = HEAP8[$arrayidx$30 >> 0] | 0;
 $91 = $90 & 15;
 $arrayidx2$30 = $e + 60 | 0;
 HEAP8[$arrayidx2$30 >> 0] = $91;
 $92 = ($90 & 255) >>> 4;
 $arrayidx10$30 = $e + 61 | 0;
 HEAP8[$arrayidx10$30 >> 0] = $92;
 $arrayidx$31 = $a + 31 | 0;
 $93 = HEAP8[$arrayidx$31 >> 0] | 0;
 $94 = $93 & 15;
 $arrayidx2$31 = $e + 62 | 0;
 HEAP8[$arrayidx2$31 >> 0] = $94;
 $95 = ($93 & 255) >>> 4;
 $arrayidx10$31 = $e + 63 | 0;
 HEAP8[$arrayidx10$31 >> 0] = $95;
 $carry$033 = 0;
 $i$134 = 0;
 while (1) {
  $arrayidx16 = $e + $i$134 | 0;
  $96 = HEAP8[$arrayidx16 >> 0] | 0;
  $conv1729 = $96 & 255;
  $add18 = $carry$033 + $conv1729 | 0;
  $sext = $add18 << 24;
  $sext30 = $sext + 134217728 | 0;
  $shr25 = $sext30 >> 28;
  $shl = $shr25 << 4;
  $sub = $add18 - $shl | 0;
  $conv30 = $sub & 255;
  HEAP8[$arrayidx16 >> 0] = $conv30;
  $inc32 = $i$134 + 1 | 0;
  $exitcond = ($inc32 | 0) == 63;
  if ($exitcond) {
   break;
  } else {
   $carry$033 = $shr25;
   $i$134 = $inc32;
  }
 }
 $97 = HEAP8[$arrayidx10$31 >> 0] | 0;
 $conv3628 = $97 & 255;
 $add37 = $shr25 + $conv3628 | 0;
 $conv38 = $add37 & 255;
 HEAP8[$arrayidx10$31 >> 0] = $conv38;
 _ge_p3_0($h);
 $i$232 = 1;
 while (1) {
  $div = $i$232 >>> 1;
  $arrayidx43 = $e + $i$232 | 0;
  $98 = HEAP8[$arrayidx43 >> 0] | 0;
  _select_552($t, $div, $98);
  _ge_madd($r, $h, $t);
  _ge_p1p1_to_p3($h, $r);
  $add45 = $i$232 + 2 | 0;
  $cmp40 = $add45 >>> 0 < 64;
  if ($cmp40) {
   $i$232 = $add45;
  } else {
   break;
  }
 }
 _ge_p3_dbl($r, $h);
 _ge_p1p1_to_p2($s, $r);
 _ge_p2_dbl($r, $s);
 _ge_p1p1_to_p2($s, $r);
 _ge_p2_dbl($r, $s);
 _ge_p1p1_to_p2($s, $r);
 _ge_p2_dbl($r, $s);
 _ge_p1p1_to_p3($h, $r);
 $i$331 = 0;
 while (1) {
  $div51 = $i$331 >>> 1;
  $arrayidx52 = $e + $i$331 | 0;
  $99 = HEAP8[$arrayidx52 >> 0] | 0;
  _select_552($t, $div51, $99);
  _ge_madd($r, $h, $t);
  _ge_p1p1_to_p3($h, $r);
  $add54 = $i$331 + 2 | 0;
  $cmp48 = $add54 >>> 0 < 64;
  if ($cmp48) {
   $i$331 = $add54;
  } else {
   break;
  }
 }
 STACKTOP = sp;
 return;
}
function _slide($r, $a) {
 $r = $r | 0;
 $a = $a | 0;
 var $$pre = 0, $$pre10 = 0, $$pre11 = 0, $$pre12 = 0, $$pre7 = 0, $$pre8 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$1 = 0, $add$2 = 0, $add$3 = 0, $add$4 = 0, $add$5 = 0, $add25 = 0, $add25$1 = 0, $add25$2 = 0, $add25$3 = 0, $add25$4 = 0, $add25$5 = 0, $and = 0, $and2 = 0;
 var $arrayidx = 0, $arrayidx17 = 0, $arrayidx17$1 = 0, $arrayidx17$2 = 0, $arrayidx17$3 = 0, $arrayidx17$4 = 0, $arrayidx17$5 = 0, $arrayidx4 = 0, $arrayidx61 = 0, $arrayidx61$1 = 0, $arrayidx61$1$phi$trans$insert = 0, $arrayidx61$2 = 0, $arrayidx61$2$phi$trans$insert = 0, $arrayidx61$3 = 0, $arrayidx61$3$phi$trans$insert = 0, $arrayidx61$4 = 0, $arrayidx61$4$phi$trans$insert = 0, $arrayidx61$5 = 0, $arrayidx61$5$phi$trans$insert = 0, $arrayidx61$phi$trans$insert = 0;
 var $arrayidx9 = 0, $cmp13 = 0, $cmp13$1 = 0, $cmp13$2 = 0, $cmp13$3 = 0, $cmp13$4 = 0, $cmp13$5 = 0, $cmp26 = 0, $cmp26$1 = 0, $cmp26$2 = 0, $cmp26$3 = 0, $cmp26$4 = 0, $cmp26$5 = 0, $cmp45 = 0, $cmp45$1 = 0, $cmp45$2 = 0, $cmp45$3 = 0, $cmp45$4 = 0, $cmp45$5 = 0, $cmp58 = 0;
 var $cmp58$1 = 0, $cmp58$2 = 0, $cmp58$3 = 0, $cmp58$4 = 0, $cmp58$5 = 0, $conv = 0, $conv21 = 0, $conv21$1 = 0, $conv21$2 = 0, $conv21$3 = 0, $conv21$4 = 0, $conv21$5 = 0, $conv24 = 0, $conv24$1 = 0, $conv24$2 = 0, $conv24$3 = 0, $conv24$4 = 0, $conv24$5 = 0, $conv3 = 0, $conv36 = 0;
 var $conv36$1 = 0, $conv36$2 = 0, $conv36$3 = 0, $conv36$4 = 0, $conv36$5 = 0, $conv55 = 0, $conv55$1 = 0, $conv55$2 = 0, $conv55$3 = 0, $conv55$4 = 0, $conv55$5 = 0, $exitcond = 0, $exitcond55 = 0, $i$053 = 0, $i$150 = 0, $inc = 0, $inc67 = 0, $inc67$1 = 0, $inc67$2 = 0, $inc67$3 = 0;
 var $inc67$4 = 0, $inc67$5 = 0, $k$048 = 0, $k$048$1 = 0, $k$048$2 = 0, $k$048$3 = 0, $k$048$4 = 0, $k$048$5 = 0, $or$cond = 0, $shl = 0, $shl$1 = 0, $shl$2 = 0, $shl$3 = 0, $shl$4 = 0, $shl$5 = 0, $shr1 = 0, $sub = 0, $sub$1 = 0, $sub$2 = 0, $sub$3 = 0;
 var $sub$4 = 0, $sub$5 = 0, $tobool = 0, $tobool18 = 0, $tobool18$1 = 0, $tobool18$2 = 0, $tobool18$3 = 0, $tobool18$4 = 0, $tobool18$5 = 0, $tobool62 = 0, $tobool62$1 = 0, $tobool62$2 = 0, $tobool62$3 = 0, $tobool62$4 = 0, $tobool62$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$053 = 0;
 while (1) {
  $0 = $i$053 >>> 3;
  $arrayidx = $a + $0 | 0;
  $1 = HEAP8[$arrayidx >> 0] | 0;
  $conv = $1 & 255;
  $and = $i$053 & 7;
  $shr1 = $conv >>> $and;
  $and2 = $shr1 & 1;
  $conv3 = $and2 & 255;
  $arrayidx4 = $r + $i$053 | 0;
  HEAP8[$arrayidx4 >> 0] = $conv3;
  $inc = $i$053 + 1 | 0;
  $exitcond55 = ($inc | 0) == 256;
  if ($exitcond55) {
   break;
  } else {
   $i$053 = $inc;
  }
 }
 $i$150 = 0;
 while (1) {
  $arrayidx9 = $r + $i$150 | 0;
  $2 = HEAP8[$arrayidx9 >> 0] | 0;
  $tobool = $2 << 24 >> 24 != 0;
  $$pre = $i$150 + 1 | 0;
  $cmp13 = $$pre >>> 0 < 256;
  $or$cond = $tobool & $cmp13;
  L6 : do {
   if ($or$cond) {
    $arrayidx17 = $r + $$pre | 0;
    $3 = HEAP8[$arrayidx17 >> 0] | 0;
    $tobool18 = $3 << 24 >> 24 == 0;
    L8 : do {
     if (!$tobool18) {
      $conv21 = $2 << 24 >> 24;
      $conv24 = $3 << 24 >> 24;
      $shl = $conv24 << 1;
      $add25 = $shl + $conv21 | 0;
      $cmp26 = ($add25 | 0) < 16;
      if ($cmp26) {
       $conv36 = $add25 & 255;
       HEAP8[$arrayidx9 >> 0] = $conv36;
       HEAP8[$arrayidx17 >> 0] = 0;
       break;
      }
      $sub = $conv21 - $shl | 0;
      $cmp45 = ($sub | 0) > -16;
      if (!$cmp45) {
       break L6;
      }
      $conv55 = $sub & 255;
      HEAP8[$arrayidx9 >> 0] = $conv55;
      $4 = $3;
      $k$048 = $$pre;
      while (1) {
       $arrayidx61 = $r + $k$048 | 0;
       $tobool62 = $4 << 24 >> 24 == 0;
       if ($tobool62) {
        break;
       }
       HEAP8[$arrayidx61 >> 0] = 0;
       $inc67 = $k$048 + 1 | 0;
       $cmp58 = $k$048 >>> 0 < 255;
       if (!$cmp58) {
        break L8;
       }
       $arrayidx61$phi$trans$insert = $r + $inc67 | 0;
       $$pre7 = HEAP8[$arrayidx61$phi$trans$insert >> 0] | 0;
       $4 = $$pre7;
       $k$048 = $inc67;
      }
      HEAP8[$arrayidx61 >> 0] = 1;
     }
    } while (0);
    $add$1 = $i$150 + 2 | 0;
    $cmp13$1 = $add$1 >>> 0 < 256;
    if ($cmp13$1) {
     $arrayidx17$1 = $r + $add$1 | 0;
     $5 = HEAP8[$arrayidx17$1 >> 0] | 0;
     $tobool18$1 = $5 << 24 >> 24 == 0;
     L21 : do {
      if (!$tobool18$1) {
       $6 = HEAP8[$arrayidx9 >> 0] | 0;
       $conv21$1 = $6 << 24 >> 24;
       $conv24$1 = $5 << 24 >> 24;
       $shl$1 = $conv24$1 << 2;
       $add25$1 = $shl$1 + $conv21$1 | 0;
       $cmp26$1 = ($add25$1 | 0) < 16;
       if ($cmp26$1) {
        $conv36$1 = $add25$1 & 255;
        HEAP8[$arrayidx9 >> 0] = $conv36$1;
        HEAP8[$arrayidx17$1 >> 0] = 0;
        break;
       }
       $sub$1 = $conv21$1 - $shl$1 | 0;
       $cmp45$1 = ($sub$1 | 0) > -16;
       if (!$cmp45$1) {
        break L6;
       }
       $conv55$1 = $sub$1 & 255;
       HEAP8[$arrayidx9 >> 0] = $conv55$1;
       $7 = $5;
       $k$048$1 = $add$1;
       while (1) {
        $arrayidx61$1 = $r + $k$048$1 | 0;
        $tobool62$1 = $7 << 24 >> 24 == 0;
        if ($tobool62$1) {
         break;
        }
        HEAP8[$arrayidx61$1 >> 0] = 0;
        $inc67$1 = $k$048$1 + 1 | 0;
        $cmp58$1 = $k$048$1 >>> 0 < 255;
        if (!$cmp58$1) {
         break L21;
        }
        $arrayidx61$1$phi$trans$insert = $r + $inc67$1 | 0;
        $$pre8 = HEAP8[$arrayidx61$1$phi$trans$insert >> 0] | 0;
        $7 = $$pre8;
        $k$048$1 = $inc67$1;
       }
       HEAP8[$arrayidx61$1 >> 0] = 1;
      }
     } while (0);
     $add$2 = $i$150 + 3 | 0;
     $cmp13$2 = $add$2 >>> 0 < 256;
     if ($cmp13$2) {
      $arrayidx17$2 = $r + $add$2 | 0;
      $8 = HEAP8[$arrayidx17$2 >> 0] | 0;
      $tobool18$2 = $8 << 24 >> 24 == 0;
      L34 : do {
       if (!$tobool18$2) {
        $9 = HEAP8[$arrayidx9 >> 0] | 0;
        $conv21$2 = $9 << 24 >> 24;
        $conv24$2 = $8 << 24 >> 24;
        $shl$2 = $conv24$2 << 3;
        $add25$2 = $shl$2 + $conv21$2 | 0;
        $cmp26$2 = ($add25$2 | 0) < 16;
        if ($cmp26$2) {
         $conv36$2 = $add25$2 & 255;
         HEAP8[$arrayidx9 >> 0] = $conv36$2;
         HEAP8[$arrayidx17$2 >> 0] = 0;
         break;
        }
        $sub$2 = $conv21$2 - $shl$2 | 0;
        $cmp45$2 = ($sub$2 | 0) > -16;
        if (!$cmp45$2) {
         break L6;
        }
        $conv55$2 = $sub$2 & 255;
        HEAP8[$arrayidx9 >> 0] = $conv55$2;
        $10 = $8;
        $k$048$2 = $add$2;
        while (1) {
         $arrayidx61$2 = $r + $k$048$2 | 0;
         $tobool62$2 = $10 << 24 >> 24 == 0;
         if ($tobool62$2) {
          break;
         }
         HEAP8[$arrayidx61$2 >> 0] = 0;
         $inc67$2 = $k$048$2 + 1 | 0;
         $cmp58$2 = $k$048$2 >>> 0 < 255;
         if (!$cmp58$2) {
          break L34;
         }
         $arrayidx61$2$phi$trans$insert = $r + $inc67$2 | 0;
         $$pre9 = HEAP8[$arrayidx61$2$phi$trans$insert >> 0] | 0;
         $10 = $$pre9;
         $k$048$2 = $inc67$2;
        }
        HEAP8[$arrayidx61$2 >> 0] = 1;
       }
      } while (0);
      $add$3 = $i$150 + 4 | 0;
      $cmp13$3 = $add$3 >>> 0 < 256;
      if ($cmp13$3) {
       $arrayidx17$3 = $r + $add$3 | 0;
       $11 = HEAP8[$arrayidx17$3 >> 0] | 0;
       $tobool18$3 = $11 << 24 >> 24 == 0;
       L47 : do {
        if (!$tobool18$3) {
         $12 = HEAP8[$arrayidx9 >> 0] | 0;
         $conv21$3 = $12 << 24 >> 24;
         $conv24$3 = $11 << 24 >> 24;
         $shl$3 = $conv24$3 << 4;
         $add25$3 = $shl$3 + $conv21$3 | 0;
         $cmp26$3 = ($add25$3 | 0) < 16;
         if ($cmp26$3) {
          $conv36$3 = $add25$3 & 255;
          HEAP8[$arrayidx9 >> 0] = $conv36$3;
          HEAP8[$arrayidx17$3 >> 0] = 0;
          break;
         }
         $sub$3 = $conv21$3 - $shl$3 | 0;
         $cmp45$3 = ($sub$3 | 0) > -16;
         if (!$cmp45$3) {
          break L6;
         }
         $conv55$3 = $sub$3 & 255;
         HEAP8[$arrayidx9 >> 0] = $conv55$3;
         $13 = $11;
         $k$048$3 = $add$3;
         while (1) {
          $arrayidx61$3 = $r + $k$048$3 | 0;
          $tobool62$3 = $13 << 24 >> 24 == 0;
          if ($tobool62$3) {
           break;
          }
          HEAP8[$arrayidx61$3 >> 0] = 0;
          $inc67$3 = $k$048$3 + 1 | 0;
          $cmp58$3 = $k$048$3 >>> 0 < 255;
          if (!$cmp58$3) {
           break L47;
          }
          $arrayidx61$3$phi$trans$insert = $r + $inc67$3 | 0;
          $$pre10 = HEAP8[$arrayidx61$3$phi$trans$insert >> 0] | 0;
          $13 = $$pre10;
          $k$048$3 = $inc67$3;
         }
         HEAP8[$arrayidx61$3 >> 0] = 1;
        }
       } while (0);
       $add$4 = $i$150 + 5 | 0;
       $cmp13$4 = $add$4 >>> 0 < 256;
       if ($cmp13$4) {
        $arrayidx17$4 = $r + $add$4 | 0;
        $14 = HEAP8[$arrayidx17$4 >> 0] | 0;
        $tobool18$4 = $14 << 24 >> 24 == 0;
        L60 : do {
         if (!$tobool18$4) {
          $15 = HEAP8[$arrayidx9 >> 0] | 0;
          $conv21$4 = $15 << 24 >> 24;
          $conv24$4 = $14 << 24 >> 24;
          $shl$4 = $conv24$4 << 5;
          $add25$4 = $shl$4 + $conv21$4 | 0;
          $cmp26$4 = ($add25$4 | 0) < 16;
          if ($cmp26$4) {
           $conv36$4 = $add25$4 & 255;
           HEAP8[$arrayidx9 >> 0] = $conv36$4;
           HEAP8[$arrayidx17$4 >> 0] = 0;
           break;
          }
          $sub$4 = $conv21$4 - $shl$4 | 0;
          $cmp45$4 = ($sub$4 | 0) > -16;
          if (!$cmp45$4) {
           break L6;
          }
          $conv55$4 = $sub$4 & 255;
          HEAP8[$arrayidx9 >> 0] = $conv55$4;
          $16 = $14;
          $k$048$4 = $add$4;
          while (1) {
           $arrayidx61$4 = $r + $k$048$4 | 0;
           $tobool62$4 = $16 << 24 >> 24 == 0;
           if ($tobool62$4) {
            break;
           }
           HEAP8[$arrayidx61$4 >> 0] = 0;
           $inc67$4 = $k$048$4 + 1 | 0;
           $cmp58$4 = $k$048$4 >>> 0 < 255;
           if (!$cmp58$4) {
            break L60;
           }
           $arrayidx61$4$phi$trans$insert = $r + $inc67$4 | 0;
           $$pre11 = HEAP8[$arrayidx61$4$phi$trans$insert >> 0] | 0;
           $16 = $$pre11;
           $k$048$4 = $inc67$4;
          }
          HEAP8[$arrayidx61$4 >> 0] = 1;
         }
        } while (0);
        $add$5 = $i$150 + 6 | 0;
        $cmp13$5 = $add$5 >>> 0 < 256;
        if ($cmp13$5) {
         $arrayidx17$5 = $r + $add$5 | 0;
         $17 = HEAP8[$arrayidx17$5 >> 0] | 0;
         $tobool18$5 = $17 << 24 >> 24 == 0;
         if (!$tobool18$5) {
          $18 = HEAP8[$arrayidx9 >> 0] | 0;
          $conv21$5 = $18 << 24 >> 24;
          $conv24$5 = $17 << 24 >> 24;
          $shl$5 = $conv24$5 << 6;
          $add25$5 = $shl$5 + $conv21$5 | 0;
          $cmp26$5 = ($add25$5 | 0) < 16;
          if ($cmp26$5) {
           $conv36$5 = $add25$5 & 255;
           HEAP8[$arrayidx9 >> 0] = $conv36$5;
           HEAP8[$arrayidx17$5 >> 0] = 0;
           break;
          }
          $sub$5 = $conv21$5 - $shl$5 | 0;
          $cmp45$5 = ($sub$5 | 0) > -16;
          if ($cmp45$5) {
           $conv55$5 = $sub$5 & 255;
           HEAP8[$arrayidx9 >> 0] = $conv55$5;
           $19 = $17;
           $k$048$5 = $add$5;
           while (1) {
            $arrayidx61$5 = $r + $k$048$5 | 0;
            $tobool62$5 = $19 << 24 >> 24 == 0;
            if ($tobool62$5) {
             break;
            }
            HEAP8[$arrayidx61$5 >> 0] = 0;
            $inc67$5 = $k$048$5 + 1 | 0;
            $cmp58$5 = $k$048$5 >>> 0 < 255;
            if (!$cmp58$5) {
             break L6;
            }
            $arrayidx61$5$phi$trans$insert = $r + $inc67$5 | 0;
            $$pre12 = HEAP8[$arrayidx61$5$phi$trans$insert >> 0] | 0;
            $19 = $$pre12;
            $k$048$5 = $inc67$5;
           }
           HEAP8[$arrayidx61$5 >> 0] = 1;
          }
         }
        }
       }
      }
     }
    }
   }
  } while (0);
  $exitcond = ($$pre | 0) == 256;
  if ($exitcond) {
   break;
  } else {
   $i$150 = $$pre;
  }
 }
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_count = 0, $__base_count63 = 0, $__flags34 = 0, $__flags72 = 0, $add = 0, $add$ptr = 0, $add$ptr64 = 0, $and = 0, $and35 = 0, $and73 = 0, $and88 = 0, $arraydecay = 0, $arraydecay62 = 0, $call = 0;
 var $call3 = 0, $cmp = 0, $cmp100 = 0, $cmp106 = 0, $cmp11 = 0, $cmp115 = 0, $cmp121 = 0, $cmp16 = 0, $cmp165 = 0, $cmp27 = 0, $cmp5 = 0, $cmp51 = 0, $cmp53 = 0, $cmp7 = 0, $cmp70 = 0, $cmp77 = 0, $cmp85 = 0, $cmp97 = 0, $does_dst_type_point_to_our_static_type$0$lcssa = 0, $does_dst_type_point_to_our_static_type$08 = 0;
 var $does_dst_type_point_to_our_static_type$1 = 0, $does_dst_type_point_to_our_static_type$273 = 0, $does_dst_type_point_to_our_static_type$274 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $extract$t = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $incdec$ptr = 0, $incdec$ptr105 = 0, $incdec$ptr120 = 0, $incdec$ptr69 = 0, $incdec$ptr84 = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off0$lcssa = 0, $is_dst_type_derived_from_static_type13$0$off06 = 0, $is_dst_type_derived_from_static_type13$1$off0 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $number_to_static_ptr76 = 0;
 var $p$07 = 0, $p65$0 = 0, $p65$1 = 0, $p65$2 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr52 = 0, $path_dst_ptr_to_static_ptr99 = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $search_done110 = 0, $search_done55 = 0, $search_done79 = 0, $search_done92 = 0, $static_type = 0, $tobool111 = 0, $tobool18 = 0, $tobool22 = 0, $tobool25 = 0, $tobool30 = 0;
 var $tobool36 = 0, $tobool74 = 0, $tobool80 = 0, $tobool89 = 0, $tobool93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = $info + 8 | 0;
 $0 = HEAP32[$static_type >> 2] | 0;
 $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, $use_strcmp) | 0;
 L1 : do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($info, $current_ptr, $path_below);
  } else {
   $1 = HEAP32[$info >> 2] | 0;
   $call3 = __ZL8is_equalPKSt9type_infoS1_b($this, $1, $use_strcmp) | 0;
   if (!$call3) {
    $arraydecay62 = $this + 16 | 0;
    $__base_count63 = $this + 12 | 0;
    $17 = HEAP32[$__base_count63 >> 2] | 0;
    $add$ptr64 = ($this + 16 | 0) + ($17 << 3) | 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($arraydecay62, $info, $current_ptr, $path_below, $use_strcmp);
    $incdec$ptr69 = $this + 24 | 0;
    $cmp70 = ($17 | 0) > 1;
    if (!$cmp70) {
     break;
    }
    $__flags72 = $this + 8 | 0;
    $18 = HEAP32[$__flags72 >> 2] | 0;
    $and73 = $18 & 2;
    $tobool74 = ($and73 | 0) == 0;
    if ($tobool74) {
     $number_to_static_ptr76 = $info + 36 | 0;
     $19 = HEAP32[$number_to_static_ptr76 >> 2] | 0;
     $cmp77 = ($19 | 0) == 1;
     if (!$cmp77) {
      $and88 = $18 & 1;
      $tobool89 = ($and88 | 0) == 0;
      if ($tobool89) {
       $search_done110 = $info + 54 | 0;
       $p65$2 = $incdec$ptr69;
       while (1) {
        $24 = HEAP8[$search_done110 >> 0] | 0;
        $tobool111 = $24 << 24 >> 24 == 0;
        if (!$tobool111) {
         break L1;
        }
        $25 = HEAP32[$number_to_static_ptr76 >> 2] | 0;
        $cmp115 = ($25 | 0) == 1;
        if ($cmp115) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$2, $info, $current_ptr, $path_below, $use_strcmp);
        $incdec$ptr120 = $p65$2 + 8 | 0;
        $cmp121 = $incdec$ptr120 >>> 0 < $add$ptr64 >>> 0;
        if ($cmp121) {
         $p65$2 = $incdec$ptr120;
        } else {
         break L1;
        }
       }
      }
      $path_dst_ptr_to_static_ptr99 = $info + 24 | 0;
      $search_done92 = $info + 54 | 0;
      $p65$1 = $incdec$ptr69;
      while (1) {
       $21 = HEAP8[$search_done92 >> 0] | 0;
       $tobool93 = $21 << 24 >> 24 == 0;
       if (!$tobool93) {
        break L1;
       }
       $22 = HEAP32[$number_to_static_ptr76 >> 2] | 0;
       $cmp97 = ($22 | 0) == 1;
       if ($cmp97) {
        $23 = HEAP32[$path_dst_ptr_to_static_ptr99 >> 2] | 0;
        $cmp100 = ($23 | 0) == 1;
        if ($cmp100) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$1, $info, $current_ptr, $path_below, $use_strcmp);
       $incdec$ptr105 = $p65$1 + 8 | 0;
       $cmp106 = $incdec$ptr105 >>> 0 < $add$ptr64 >>> 0;
       if ($cmp106) {
        $p65$1 = $incdec$ptr105;
       } else {
        break L1;
       }
      }
     }
    }
    $search_done79 = $info + 54 | 0;
    $p65$0 = $incdec$ptr69;
    while (1) {
     $20 = HEAP8[$search_done79 >> 0] | 0;
     $tobool80 = $20 << 24 >> 24 == 0;
     if (!$tobool80) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$0, $info, $current_ptr, $path_below, $use_strcmp);
     $incdec$ptr84 = $p65$0 + 8 | 0;
     $cmp85 = $incdec$ptr84 >>> 0 < $add$ptr64 >>> 0;
     if ($cmp85) {
      $p65$0 = $incdec$ptr84;
     } else {
      break L1;
     }
    }
   }
   $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
   $2 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
   $cmp = ($2 | 0) == ($current_ptr | 0);
   if (!$cmp) {
    $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
    $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0;
    $cmp5 = ($3 | 0) == ($current_ptr | 0);
    if (!$cmp5) {
     $path_dynamic_ptr_to_dst_ptr10 = $info + 32 | 0;
     HEAP32[$path_dynamic_ptr_to_dst_ptr10 >> 2] = $path_below;
     $is_dst_type_derived_from_static_type = $info + 44 | 0;
     $4 = HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0;
     $cmp11 = ($4 | 0) == 4;
     do {
      if (!$cmp11) {
       $__base_count = $this + 12 | 0;
       $5 = HEAP32[$__base_count >> 2] | 0;
       $add$ptr = ($this + 16 | 0) + ($5 << 3) | 0;
       $found_our_static_ptr = $info + 52 | 0;
       $found_any_static_type = $info + 53 | 0;
       $search_done = $info + 54 | 0;
       $__flags34 = $this + 8 | 0;
       $path_dst_ptr_to_static_ptr = $info + 24 | 0;
       $cmp165 = ($5 | 0) > 0;
       if (!$cmp165) {
        HEAP32[$is_dst_type_derived_from_static_type >> 2] = 4;
        break;
       }
       $arraydecay = $this + 16 | 0;
       $does_dst_type_point_to_our_static_type$08 = 0;
       $is_dst_type_derived_from_static_type13$0$off06 = 0;
       $p$07 = $arraydecay;
       L36 : while (1) {
        HEAP8[$found_our_static_ptr >> 0] = 0;
        HEAP8[$found_any_static_type >> 0] = 0;
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$07, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
        $6 = HEAP8[$search_done >> 0] | 0;
        $tobool18 = $6 << 24 >> 24 == 0;
        if (!$tobool18) {
         $does_dst_type_point_to_our_static_type$0$lcssa = $does_dst_type_point_to_our_static_type$08;
         $is_dst_type_derived_from_static_type13$0$off0$lcssa = $is_dst_type_derived_from_static_type13$0$off06;
         label = 19;
         break;
        }
        $7 = HEAP8[$found_any_static_type >> 0] | 0;
        $tobool22 = $7 << 24 >> 24 == 0;
        do {
         if ($tobool22) {
          $does_dst_type_point_to_our_static_type$1 = $does_dst_type_point_to_our_static_type$08;
          $is_dst_type_derived_from_static_type13$1$off0 = $is_dst_type_derived_from_static_type13$0$off06;
         } else {
          $8 = HEAP8[$found_our_static_ptr >> 0] | 0;
          $tobool25 = $8 << 24 >> 24 == 0;
          if ($tobool25) {
           $11 = HEAP32[$__flags34 >> 2] | 0;
           $and35 = $11 & 1;
           $tobool36 = ($and35 | 0) == 0;
           if ($tobool36) {
            $does_dst_type_point_to_our_static_type$274 = $does_dst_type_point_to_our_static_type$08;
            label = 20;
            break L36;
           } else {
            $does_dst_type_point_to_our_static_type$1 = $does_dst_type_point_to_our_static_type$08;
            $is_dst_type_derived_from_static_type13$1$off0 = 1;
            break;
           }
          }
          $9 = HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
          $cmp27 = ($9 | 0) == 1;
          if ($cmp27) {
           $does_dst_type_point_to_our_static_type$274 = 1;
           label = 20;
           break L36;
          }
          $10 = HEAP32[$__flags34 >> 2] | 0;
          $and = $10 & 2;
          $tobool30 = ($and | 0) == 0;
          if ($tobool30) {
           $does_dst_type_point_to_our_static_type$274 = 1;
           label = 20;
           break L36;
          } else {
           $does_dst_type_point_to_our_static_type$1 = 1;
           $is_dst_type_derived_from_static_type13$1$off0 = 1;
          }
         }
        } while (0);
        $incdec$ptr = $p$07 + 8 | 0;
        $cmp16 = $incdec$ptr >>> 0 < $add$ptr >>> 0;
        if ($cmp16) {
         $does_dst_type_point_to_our_static_type$08 = $does_dst_type_point_to_our_static_type$1;
         $is_dst_type_derived_from_static_type13$0$off06 = $is_dst_type_derived_from_static_type13$1$off0;
         $p$07 = $incdec$ptr;
        } else {
         $does_dst_type_point_to_our_static_type$0$lcssa = $does_dst_type_point_to_our_static_type$1;
         $is_dst_type_derived_from_static_type13$0$off0$lcssa = $is_dst_type_derived_from_static_type13$1$off0;
         label = 19;
         break;
        }
       }
       if ((label | 0) == 19) {
        if ($is_dst_type_derived_from_static_type13$0$off0$lcssa) {
         $does_dst_type_point_to_our_static_type$274 = $does_dst_type_point_to_our_static_type$0$lcssa;
         label = 20;
        } else {
         $12 = 4;
         $does_dst_type_point_to_our_static_type$273 = $does_dst_type_point_to_our_static_type$0$lcssa;
        }
       }
       if ((label | 0) == 20) {
        $12 = 3;
        $does_dst_type_point_to_our_static_type$273 = $does_dst_type_point_to_our_static_type$274;
       }
       HEAP32[$is_dst_type_derived_from_static_type >> 2] = $12;
       $13 = $does_dst_type_point_to_our_static_type$273 & 1;
       $extract$t = $13 << 24 >> 24 == 0;
       if (!$extract$t) {
        break L1;
       }
      }
     } while (0);
     HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
     $number_to_dst_ptr = $info + 40 | 0;
     $14 = HEAP32[$number_to_dst_ptr >> 2] | 0;
     $add = $14 + 1 | 0;
     HEAP32[$number_to_dst_ptr >> 2] = $add;
     $number_to_static_ptr = $info + 36 | 0;
     $15 = HEAP32[$number_to_static_ptr >> 2] | 0;
     $cmp51 = ($15 | 0) == 1;
     if (!$cmp51) {
      break;
     }
     $path_dst_ptr_to_static_ptr52 = $info + 24 | 0;
     $16 = HEAP32[$path_dst_ptr_to_static_ptr52 >> 2] | 0;
     $cmp53 = ($16 | 0) == 2;
     if (!$cmp53) {
      break;
     }
     $search_done55 = $info + 54 | 0;
     HEAP8[$search_done55 >> 0] = 1;
     break;
    }
   }
   $cmp7 = ($path_below | 0) == 1;
   if ($cmp7) {
    $path_dynamic_ptr_to_dst_ptr = $info + 32 | 0;
    HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] = 1;
   }
  }
 } while (0);
 return;
}

function _Final_372($ctx, $output) {
 $ctx = $ctx | 0;
 $output = $output | 0;
 var $$ph = 0, $$pr = 0, $$pr46 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arraydecay31 = 0, $arraydecay79 = 0, $arrayidx = 0;
 var $arrayidx13 = 0, $arrayidx19 = 0, $arrayidx29 = 0, $arrayidx42 = 0, $arrayidx61 = 0, $arrayidx74 = 0, $arrayidx83 = 0, $arrayidx83$1 = 0, $arrayidx83$10 = 0, $arrayidx83$11 = 0, $arrayidx83$12 = 0, $arrayidx83$13 = 0, $arrayidx83$14 = 0, $arrayidx83$15 = 0, $arrayidx83$16 = 0, $arrayidx83$17 = 0, $arrayidx83$18 = 0, $arrayidx83$19 = 0, $arrayidx83$2 = 0, $arrayidx83$20 = 0;
 var $arrayidx83$21 = 0, $arrayidx83$22 = 0, $arrayidx83$23 = 0, $arrayidx83$24 = 0, $arrayidx83$25 = 0, $arrayidx83$26 = 0, $arrayidx83$27 = 0, $arrayidx83$28 = 0, $arrayidx83$29 = 0, $arrayidx83$3 = 0, $arrayidx83$30 = 0, $arrayidx83$31 = 0, $arrayidx83$4 = 0, $arrayidx83$5 = 0, $arrayidx83$6 = 0, $arrayidx83$7 = 0, $arrayidx83$8 = 0, $arrayidx83$9 = 0, $arrayidx84$1 = 0, $arrayidx84$10 = 0;
 var $arrayidx84$11 = 0, $arrayidx84$12 = 0, $arrayidx84$13 = 0, $arrayidx84$14 = 0, $arrayidx84$15 = 0, $arrayidx84$16 = 0, $arrayidx84$17 = 0, $arrayidx84$18 = 0, $arrayidx84$19 = 0, $arrayidx84$2 = 0, $arrayidx84$20 = 0, $arrayidx84$21 = 0, $arrayidx84$22 = 0, $arrayidx84$23 = 0, $arrayidx84$24 = 0, $arrayidx84$25 = 0, $arrayidx84$26 = 0, $arrayidx84$27 = 0, $arrayidx84$28 = 0, $arrayidx84$29 = 0;
 var $arrayidx84$3 = 0, $arrayidx84$30 = 0, $arrayidx84$31 = 0, $arrayidx84$4 = 0, $arrayidx84$5 = 0, $arrayidx84$6 = 0, $arrayidx84$7 = 0, $arrayidx84$8 = 0, $arrayidx84$9 = 0, $bits_in_last_byte = 0, $block_counter1 = 0, $block_counter2 = 0, $block_counter269 = 0, $buf_ptr = 0, $buf_ptr18 = 0, $buf_ptr20$pre$phiZ2D = 0, $cmp = 0, $cmp24 = 0, $cmp2453 = 0, $cmp36 = 0;
 var $cmp3652 = 0, $cmp46 = 0, $cmp54 = 0, $cmp66 = 0, $cmp6651 = 0, $conv = 0, $conv14 = 0, $conv15 = 0, $conv58 = 0, $conv6 = 0, $conv70 = 0, $dec = 0, $dec73 = 0, $inc = 0, $inc28 = 0, $inc41 = 0, $inc44 = 0, $inc49 = 0, $shl = 0, $shl4 = 0;
 var $shl9 = 0, $shr = 0, $shr76 = 0, $sub = 0, $sub12 = 0, $sub3 = 0, $sub5 = 0, $sub8 = 0, $tobool = 0, $xor = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $bits_in_last_byte = $ctx + 140 | 0;
 $0 = HEAP32[$bits_in_last_byte >> 2] | 0;
 $tobool = ($0 | 0) == 0;
 if ($tobool) {
  $buf_ptr18 = $ctx + 136 | 0;
  $6 = HEAP32[$buf_ptr18 >> 2] | 0;
  $inc = $6 + 1 | 0;
  HEAP32[$buf_ptr18 >> 2] = $inc;
  $arrayidx19 = ($ctx + 72 | 0) + $6 | 0;
  HEAP8[$arrayidx19 >> 0] = -128;
  $buf_ptr20$pre$phiZ2D = $buf_ptr18;
 } else {
  $shl = 1 << $0;
  $sub = $shl + -1 | 0;
  $sub3 = 8 - $0 | 0;
  $shl4 = $sub << $sub3;
  $buf_ptr = $ctx + 136 | 0;
  $1 = HEAP32[$buf_ptr >> 2] | 0;
  $sub5 = $1 + -1 | 0;
  $arrayidx = ($ctx + 72 | 0) + $sub5 | 0;
  $2 = HEAP8[$arrayidx >> 0] | 0;
  $conv = $2 & 255;
  $and = $shl4 & $conv;
  $conv6 = $and & 255;
  HEAP8[$arrayidx >> 0] = $conv6;
  $3 = HEAP32[$bits_in_last_byte >> 2] | 0;
  $sub8 = 7 - $3 | 0;
  $shl9 = 1 << $sub8;
  $4 = HEAP32[$buf_ptr >> 2] | 0;
  $sub12 = $4 + -1 | 0;
  $arrayidx13 = ($ctx + 72 | 0) + $sub12 | 0;
  $5 = HEAP8[$arrayidx13 >> 0] | 0;
  $conv14 = $5 & 255;
  $xor = $shl9 ^ $conv14;
  $conv15 = $xor & 255;
  HEAP8[$arrayidx13 >> 0] = $conv15;
  HEAP32[$bits_in_last_byte >> 2] = 0;
  $buf_ptr20$pre$phiZ2D = $buf_ptr;
 }
 $7 = HEAP32[$buf_ptr20$pre$phiZ2D >> 2] | 0;
 $cmp = ($7 | 0) > 56;
 if ($cmp) {
  $cmp2453 = ($7 | 0) < 64;
  if ($cmp2453) {
   $8 = $7;
   while (1) {
    $inc28 = $8 + 1 | 0;
    HEAP32[$buf_ptr20$pre$phiZ2D >> 2] = $inc28;
    $arrayidx29 = ($ctx + 72 | 0) + $8 | 0;
    HEAP8[$arrayidx29 >> 0] = 0;
    $$pr = HEAP32[$buf_ptr20$pre$phiZ2D >> 2] | 0;
    $cmp24 = ($$pr | 0) < 64;
    if ($cmp24) {
     $8 = $$pr;
    } else {
     break;
    }
   }
  }
  $arraydecay31 = $ctx + 72 | 0;
  _Transform($ctx, $arraydecay31, 64);
  HEAP32[$buf_ptr20$pre$phiZ2D >> 2] = 0;
  $$ph = 0;
  label = 10;
 } else {
  $cmp3652 = ($7 | 0) == 56;
  if (!$cmp3652) {
   $$ph = $7;
   label = 10;
  }
 }
 if ((label | 0) == 10) {
  $9 = $$ph;
  while (1) {
   $inc41 = $9 + 1 | 0;
   HEAP32[$buf_ptr20$pre$phiZ2D >> 2] = $inc41;
   $arrayidx42 = ($ctx + 72 | 0) + $9 | 0;
   HEAP8[$arrayidx42 >> 0] = 0;
   $10 = HEAP32[$buf_ptr20$pre$phiZ2D >> 2] | 0;
   $cmp36 = ($10 | 0) < 56;
   if ($cmp36) {
    $9 = $10;
   } else {
    break;
   }
  }
 }
 $block_counter1 = $ctx + 64 | 0;
 $11 = HEAP32[$block_counter1 >> 2] | 0;
 $inc44 = $11 + 1 | 0;
 HEAP32[$block_counter1 >> 2] = $inc44;
 $cmp46 = ($inc44 | 0) == 0;
 if ($cmp46) {
  $block_counter2 = $ctx + 68 | 0;
  $12 = HEAP32[$block_counter2 >> 2] | 0;
  $inc49 = $12 + 1 | 0;
  HEAP32[$block_counter2 >> 2] = $inc49;
 }
 HEAP32[$buf_ptr20$pre$phiZ2D >> 2] = 64;
 $13 = $inc44;
 $14 = 64;
 while (1) {
  $conv58 = $13 & 255;
  $dec = $14 + -1 | 0;
  HEAP32[$buf_ptr20$pre$phiZ2D >> 2] = $dec;
  $arrayidx61 = ($ctx + 72 | 0) + $dec | 0;
  HEAP8[$arrayidx61 >> 0] = $conv58;
  $15 = HEAP32[$block_counter1 >> 2] | 0;
  $shr = $15 >>> 8;
  HEAP32[$block_counter1 >> 2] = $shr;
  $$pr46 = HEAP32[$buf_ptr20$pre$phiZ2D >> 2] | 0;
  $cmp54 = ($$pr46 | 0) > 60;
  if ($cmp54) {
   $13 = $shr;
   $14 = $$pr46;
  } else {
   break;
  }
 }
 $cmp6651 = ($$pr46 | 0) > 56;
 if ($cmp6651) {
  $block_counter269 = $ctx + 68 | 0;
  $$pre = HEAP32[$block_counter269 >> 2] | 0;
  $16 = $$pre;
  $17 = $$pr46;
  while (1) {
   $conv70 = $16 & 255;
   $dec73 = $17 + -1 | 0;
   HEAP32[$buf_ptr20$pre$phiZ2D >> 2] = $dec73;
   $arrayidx74 = ($ctx + 72 | 0) + $dec73 | 0;
   HEAP8[$arrayidx74 >> 0] = $conv70;
   $18 = HEAP32[$block_counter269 >> 2] | 0;
   $shr76 = $18 >>> 8;
   HEAP32[$block_counter269 >> 2] = $shr76;
   $19 = HEAP32[$buf_ptr20$pre$phiZ2D >> 2] | 0;
   $cmp66 = ($19 | 0) > 56;
   if ($cmp66) {
    $16 = $shr76;
    $17 = $19;
   } else {
    break;
   }
  }
 }
 $arraydecay79 = $ctx + 72 | 0;
 _Transform($ctx, $arraydecay79, 64);
 _OutputTransformation($ctx);
 $arrayidx83 = $ctx + 32 | 0;
 $20 = HEAP8[$arrayidx83 >> 0] | 0;
 HEAP8[$output >> 0] = $20;
 $arrayidx83$1 = $ctx + 33 | 0;
 $21 = HEAP8[$arrayidx83$1 >> 0] | 0;
 $arrayidx84$1 = $output + 1 | 0;
 HEAP8[$arrayidx84$1 >> 0] = $21;
 $arrayidx83$2 = $ctx + 34 | 0;
 $22 = HEAP8[$arrayidx83$2 >> 0] | 0;
 $arrayidx84$2 = $output + 2 | 0;
 HEAP8[$arrayidx84$2 >> 0] = $22;
 $arrayidx83$3 = $ctx + 35 | 0;
 $23 = HEAP8[$arrayidx83$3 >> 0] | 0;
 $arrayidx84$3 = $output + 3 | 0;
 HEAP8[$arrayidx84$3 >> 0] = $23;
 $arrayidx83$4 = $ctx + 36 | 0;
 $24 = HEAP8[$arrayidx83$4 >> 0] | 0;
 $arrayidx84$4 = $output + 4 | 0;
 HEAP8[$arrayidx84$4 >> 0] = $24;
 $arrayidx83$5 = $ctx + 37 | 0;
 $25 = HEAP8[$arrayidx83$5 >> 0] | 0;
 $arrayidx84$5 = $output + 5 | 0;
 HEAP8[$arrayidx84$5 >> 0] = $25;
 $arrayidx83$6 = $ctx + 38 | 0;
 $26 = HEAP8[$arrayidx83$6 >> 0] | 0;
 $arrayidx84$6 = $output + 6 | 0;
 HEAP8[$arrayidx84$6 >> 0] = $26;
 $arrayidx83$7 = $ctx + 39 | 0;
 $27 = HEAP8[$arrayidx83$7 >> 0] | 0;
 $arrayidx84$7 = $output + 7 | 0;
 HEAP8[$arrayidx84$7 >> 0] = $27;
 $arrayidx83$8 = $ctx + 40 | 0;
 $28 = HEAP8[$arrayidx83$8 >> 0] | 0;
 $arrayidx84$8 = $output + 8 | 0;
 HEAP8[$arrayidx84$8 >> 0] = $28;
 $arrayidx83$9 = $ctx + 41 | 0;
 $29 = HEAP8[$arrayidx83$9 >> 0] | 0;
 $arrayidx84$9 = $output + 9 | 0;
 HEAP8[$arrayidx84$9 >> 0] = $29;
 $arrayidx83$10 = $ctx + 42 | 0;
 $30 = HEAP8[$arrayidx83$10 >> 0] | 0;
 $arrayidx84$10 = $output + 10 | 0;
 HEAP8[$arrayidx84$10 >> 0] = $30;
 $arrayidx83$11 = $ctx + 43 | 0;
 $31 = HEAP8[$arrayidx83$11 >> 0] | 0;
 $arrayidx84$11 = $output + 11 | 0;
 HEAP8[$arrayidx84$11 >> 0] = $31;
 $arrayidx83$12 = $ctx + 44 | 0;
 $32 = HEAP8[$arrayidx83$12 >> 0] | 0;
 $arrayidx84$12 = $output + 12 | 0;
 HEAP8[$arrayidx84$12 >> 0] = $32;
 $arrayidx83$13 = $ctx + 45 | 0;
 $33 = HEAP8[$arrayidx83$13 >> 0] | 0;
 $arrayidx84$13 = $output + 13 | 0;
 HEAP8[$arrayidx84$13 >> 0] = $33;
 $arrayidx83$14 = $ctx + 46 | 0;
 $34 = HEAP8[$arrayidx83$14 >> 0] | 0;
 $arrayidx84$14 = $output + 14 | 0;
 HEAP8[$arrayidx84$14 >> 0] = $34;
 $arrayidx83$15 = $ctx + 47 | 0;
 $35 = HEAP8[$arrayidx83$15 >> 0] | 0;
 $arrayidx84$15 = $output + 15 | 0;
 HEAP8[$arrayidx84$15 >> 0] = $35;
 $arrayidx83$16 = $ctx + 48 | 0;
 $36 = HEAP8[$arrayidx83$16 >> 0] | 0;
 $arrayidx84$16 = $output + 16 | 0;
 HEAP8[$arrayidx84$16 >> 0] = $36;
 $arrayidx83$17 = $ctx + 49 | 0;
 $37 = HEAP8[$arrayidx83$17 >> 0] | 0;
 $arrayidx84$17 = $output + 17 | 0;
 HEAP8[$arrayidx84$17 >> 0] = $37;
 $arrayidx83$18 = $ctx + 50 | 0;
 $38 = HEAP8[$arrayidx83$18 >> 0] | 0;
 $arrayidx84$18 = $output + 18 | 0;
 HEAP8[$arrayidx84$18 >> 0] = $38;
 $arrayidx83$19 = $ctx + 51 | 0;
 $39 = HEAP8[$arrayidx83$19 >> 0] | 0;
 $arrayidx84$19 = $output + 19 | 0;
 HEAP8[$arrayidx84$19 >> 0] = $39;
 $arrayidx83$20 = $ctx + 52 | 0;
 $40 = HEAP8[$arrayidx83$20 >> 0] | 0;
 $arrayidx84$20 = $output + 20 | 0;
 HEAP8[$arrayidx84$20 >> 0] = $40;
 $arrayidx83$21 = $ctx + 53 | 0;
 $41 = HEAP8[$arrayidx83$21 >> 0] | 0;
 $arrayidx84$21 = $output + 21 | 0;
 HEAP8[$arrayidx84$21 >> 0] = $41;
 $arrayidx83$22 = $ctx + 54 | 0;
 $42 = HEAP8[$arrayidx83$22 >> 0] | 0;
 $arrayidx84$22 = $output + 22 | 0;
 HEAP8[$arrayidx84$22 >> 0] = $42;
 $arrayidx83$23 = $ctx + 55 | 0;
 $43 = HEAP8[$arrayidx83$23 >> 0] | 0;
 $arrayidx84$23 = $output + 23 | 0;
 HEAP8[$arrayidx84$23 >> 0] = $43;
 $arrayidx83$24 = $ctx + 56 | 0;
 $44 = HEAP8[$arrayidx83$24 >> 0] | 0;
 $arrayidx84$24 = $output + 24 | 0;
 HEAP8[$arrayidx84$24 >> 0] = $44;
 $arrayidx83$25 = $ctx + 57 | 0;
 $45 = HEAP8[$arrayidx83$25 >> 0] | 0;
 $arrayidx84$25 = $output + 25 | 0;
 HEAP8[$arrayidx84$25 >> 0] = $45;
 $arrayidx83$26 = $ctx + 58 | 0;
 $46 = HEAP8[$arrayidx83$26 >> 0] | 0;
 $arrayidx84$26 = $output + 26 | 0;
 HEAP8[$arrayidx84$26 >> 0] = $46;
 $arrayidx83$27 = $ctx + 59 | 0;
 $47 = HEAP8[$arrayidx83$27 >> 0] | 0;
 $arrayidx84$27 = $output + 27 | 0;
 HEAP8[$arrayidx84$27 >> 0] = $47;
 $arrayidx83$28 = $ctx + 60 | 0;
 $48 = HEAP8[$arrayidx83$28 >> 0] | 0;
 $arrayidx84$28 = $output + 28 | 0;
 HEAP8[$arrayidx84$28 >> 0] = $48;
 $arrayidx83$29 = $ctx + 61 | 0;
 $49 = HEAP8[$arrayidx83$29 >> 0] | 0;
 $arrayidx84$29 = $output + 29 | 0;
 HEAP8[$arrayidx84$29 >> 0] = $49;
 $arrayidx83$30 = $ctx + 62 | 0;
 $50 = HEAP8[$arrayidx83$30 >> 0] | 0;
 $arrayidx84$30 = $output + 30 | 0;
 HEAP8[$arrayidx84$30 >> 0] = $50;
 $arrayidx83$31 = $ctx + 63 | 0;
 $51 = HEAP8[$arrayidx83$31 >> 0] | 0;
 $arrayidx84$31 = $output + 31 | 0;
 HEAP8[$arrayidx84$31 >> 0] = $51;
 HEAP32[$ctx >> 2] = 0 | 0;
 HEAP32[$ctx + 4 >> 2] = 0 | 0;
 HEAP32[$ctx + 8 >> 2] = 0 | 0;
 HEAP32[$ctx + 12 >> 2] = 0 | 0;
 HEAP32[$ctx + 16 >> 2] = 0 | 0;
 HEAP32[$ctx + 20 >> 2] = 0 | 0;
 HEAP32[$ctx + 24 >> 2] = 0 | 0;
 HEAP32[$ctx + 28 >> 2] = 0 | 0;
 dest = $arraydecay79;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function _F8($state) {
 $state = $state | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arraydecay = 0, $arrayidx$1 = 0, $arrayidx$2 = 0, $arrayidx$3 = 0, $arrayidx$4 = 0, $arrayidx$5 = 0, $arrayidx$6 = 0, $arrayidx$7 = 0, $arrayidx19 = 0, $arrayidx19$1 = 0, $arrayidx19$2 = 0, $arrayidx19$3 = 0;
 var $arrayidx19$4 = 0, $arrayidx19$5 = 0, $arrayidx19$6 = 0, $arrayidx19$7 = 0, $arrayidx4 = 0, $arrayidx4$1 = 0, $arrayidx4$2 = 0, $arrayidx4$3 = 0, $arrayidx4$4 = 0, $arrayidx4$5 = 0, $arrayidx4$6 = 0, $arrayidx4$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay = $state + 160 | 0;
 $0 = $arraydecay;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $arrayidx4 = $state + 32 | 0;
 $6 = $arrayidx4;
 $7 = $6;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $6 + 4 | 0;
 $10 = $9;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $8 ^ $2;
 $13 = $11 ^ $5;
 $14 = $arrayidx4;
 $15 = $14;
 HEAP32[$15 >> 2] = $12;
 $16 = $14 + 4 | 0;
 $17 = $16;
 HEAP32[$17 >> 2] = $13;
 $arrayidx$1 = $state + 168 | 0;
 $18 = $arrayidx$1;
 $19 = $18;
 $20 = HEAP32[$19 >> 2] | 0;
 $21 = $18 + 4 | 0;
 $22 = $21;
 $23 = HEAP32[$22 >> 2] | 0;
 $arrayidx4$1 = $state + 40 | 0;
 $24 = $arrayidx4$1;
 $25 = $24;
 $26 = HEAP32[$25 >> 2] | 0;
 $27 = $24 + 4 | 0;
 $28 = $27;
 $29 = HEAP32[$28 >> 2] | 0;
 $30 = $26 ^ $20;
 $31 = $29 ^ $23;
 $32 = $arrayidx4$1;
 $33 = $32;
 HEAP32[$33 >> 2] = $30;
 $34 = $32 + 4 | 0;
 $35 = $34;
 HEAP32[$35 >> 2] = $31;
 $arrayidx$2 = $state + 176 | 0;
 $36 = $arrayidx$2;
 $37 = $36;
 $38 = HEAP32[$37 >> 2] | 0;
 $39 = $36 + 4 | 0;
 $40 = $39;
 $41 = HEAP32[$40 >> 2] | 0;
 $arrayidx4$2 = $state + 48 | 0;
 $42 = $arrayidx4$2;
 $43 = $42;
 $44 = HEAP32[$43 >> 2] | 0;
 $45 = $42 + 4 | 0;
 $46 = $45;
 $47 = HEAP32[$46 >> 2] | 0;
 $48 = $44 ^ $38;
 $49 = $47 ^ $41;
 $50 = $arrayidx4$2;
 $51 = $50;
 HEAP32[$51 >> 2] = $48;
 $52 = $50 + 4 | 0;
 $53 = $52;
 HEAP32[$53 >> 2] = $49;
 $arrayidx$3 = $state + 184 | 0;
 $54 = $arrayidx$3;
 $55 = $54;
 $56 = HEAP32[$55 >> 2] | 0;
 $57 = $54 + 4 | 0;
 $58 = $57;
 $59 = HEAP32[$58 >> 2] | 0;
 $arrayidx4$3 = $state + 56 | 0;
 $60 = $arrayidx4$3;
 $61 = $60;
 $62 = HEAP32[$61 >> 2] | 0;
 $63 = $60 + 4 | 0;
 $64 = $63;
 $65 = HEAP32[$64 >> 2] | 0;
 $66 = $62 ^ $56;
 $67 = $65 ^ $59;
 $68 = $arrayidx4$3;
 $69 = $68;
 HEAP32[$69 >> 2] = $66;
 $70 = $68 + 4 | 0;
 $71 = $70;
 HEAP32[$71 >> 2] = $67;
 $arrayidx$4 = $state + 192 | 0;
 $72 = $arrayidx$4;
 $73 = $72;
 $74 = HEAP32[$73 >> 2] | 0;
 $75 = $72 + 4 | 0;
 $76 = $75;
 $77 = HEAP32[$76 >> 2] | 0;
 $arrayidx4$4 = $state + 64 | 0;
 $78 = $arrayidx4$4;
 $79 = $78;
 $80 = HEAP32[$79 >> 2] | 0;
 $81 = $78 + 4 | 0;
 $82 = $81;
 $83 = HEAP32[$82 >> 2] | 0;
 $84 = $80 ^ $74;
 $85 = $83 ^ $77;
 $86 = $arrayidx4$4;
 $87 = $86;
 HEAP32[$87 >> 2] = $84;
 $88 = $86 + 4 | 0;
 $89 = $88;
 HEAP32[$89 >> 2] = $85;
 $arrayidx$5 = $state + 200 | 0;
 $90 = $arrayidx$5;
 $91 = $90;
 $92 = HEAP32[$91 >> 2] | 0;
 $93 = $90 + 4 | 0;
 $94 = $93;
 $95 = HEAP32[$94 >> 2] | 0;
 $arrayidx4$5 = $state + 72 | 0;
 $96 = $arrayidx4$5;
 $97 = $96;
 $98 = HEAP32[$97 >> 2] | 0;
 $99 = $96 + 4 | 0;
 $100 = $99;
 $101 = HEAP32[$100 >> 2] | 0;
 $102 = $98 ^ $92;
 $103 = $101 ^ $95;
 $104 = $arrayidx4$5;
 $105 = $104;
 HEAP32[$105 >> 2] = $102;
 $106 = $104 + 4 | 0;
 $107 = $106;
 HEAP32[$107 >> 2] = $103;
 $arrayidx$6 = $state + 208 | 0;
 $108 = $arrayidx$6;
 $109 = $108;
 $110 = HEAP32[$109 >> 2] | 0;
 $111 = $108 + 4 | 0;
 $112 = $111;
 $113 = HEAP32[$112 >> 2] | 0;
 $arrayidx4$6 = $state + 80 | 0;
 $114 = $arrayidx4$6;
 $115 = $114;
 $116 = HEAP32[$115 >> 2] | 0;
 $117 = $114 + 4 | 0;
 $118 = $117;
 $119 = HEAP32[$118 >> 2] | 0;
 $120 = $116 ^ $110;
 $121 = $119 ^ $113;
 $122 = $arrayidx4$6;
 $123 = $122;
 HEAP32[$123 >> 2] = $120;
 $124 = $122 + 4 | 0;
 $125 = $124;
 HEAP32[$125 >> 2] = $121;
 $arrayidx$7 = $state + 216 | 0;
 $126 = $arrayidx$7;
 $127 = $126;
 $128 = HEAP32[$127 >> 2] | 0;
 $129 = $126 + 4 | 0;
 $130 = $129;
 $131 = HEAP32[$130 >> 2] | 0;
 $arrayidx4$7 = $state + 88 | 0;
 $132 = $arrayidx4$7;
 $133 = $132;
 $134 = HEAP32[$133 >> 2] | 0;
 $135 = $132 + 4 | 0;
 $136 = $135;
 $137 = HEAP32[$136 >> 2] | 0;
 $138 = $134 ^ $128;
 $139 = $137 ^ $131;
 $140 = $arrayidx4$7;
 $141 = $140;
 HEAP32[$141 >> 2] = $138;
 $142 = $140 + 4 | 0;
 $143 = $142;
 HEAP32[$143 >> 2] = $139;
 _E8($state);
 $144 = $arraydecay;
 $145 = $144;
 $146 = HEAP32[$145 >> 2] | 0;
 $147 = $144 + 4 | 0;
 $148 = $147;
 $149 = HEAP32[$148 >> 2] | 0;
 $arrayidx19 = $state + 96 | 0;
 $150 = $arrayidx19;
 $151 = $150;
 $152 = HEAP32[$151 >> 2] | 0;
 $153 = $150 + 4 | 0;
 $154 = $153;
 $155 = HEAP32[$154 >> 2] | 0;
 $156 = $152 ^ $146;
 $157 = $155 ^ $149;
 $158 = $arrayidx19;
 $159 = $158;
 HEAP32[$159 >> 2] = $156;
 $160 = $158 + 4 | 0;
 $161 = $160;
 HEAP32[$161 >> 2] = $157;
 $162 = $arrayidx$1;
 $163 = $162;
 $164 = HEAP32[$163 >> 2] | 0;
 $165 = $162 + 4 | 0;
 $166 = $165;
 $167 = HEAP32[$166 >> 2] | 0;
 $arrayidx19$1 = $state + 104 | 0;
 $168 = $arrayidx19$1;
 $169 = $168;
 $170 = HEAP32[$169 >> 2] | 0;
 $171 = $168 + 4 | 0;
 $172 = $171;
 $173 = HEAP32[$172 >> 2] | 0;
 $174 = $170 ^ $164;
 $175 = $173 ^ $167;
 $176 = $arrayidx19$1;
 $177 = $176;
 HEAP32[$177 >> 2] = $174;
 $178 = $176 + 4 | 0;
 $179 = $178;
 HEAP32[$179 >> 2] = $175;
 $180 = $arrayidx$2;
 $181 = $180;
 $182 = HEAP32[$181 >> 2] | 0;
 $183 = $180 + 4 | 0;
 $184 = $183;
 $185 = HEAP32[$184 >> 2] | 0;
 $arrayidx19$2 = $state + 112 | 0;
 $186 = $arrayidx19$2;
 $187 = $186;
 $188 = HEAP32[$187 >> 2] | 0;
 $189 = $186 + 4 | 0;
 $190 = $189;
 $191 = HEAP32[$190 >> 2] | 0;
 $192 = $188 ^ $182;
 $193 = $191 ^ $185;
 $194 = $arrayidx19$2;
 $195 = $194;
 HEAP32[$195 >> 2] = $192;
 $196 = $194 + 4 | 0;
 $197 = $196;
 HEAP32[$197 >> 2] = $193;
 $198 = $arrayidx$3;
 $199 = $198;
 $200 = HEAP32[$199 >> 2] | 0;
 $201 = $198 + 4 | 0;
 $202 = $201;
 $203 = HEAP32[$202 >> 2] | 0;
 $arrayidx19$3 = $state + 120 | 0;
 $204 = $arrayidx19$3;
 $205 = $204;
 $206 = HEAP32[$205 >> 2] | 0;
 $207 = $204 + 4 | 0;
 $208 = $207;
 $209 = HEAP32[$208 >> 2] | 0;
 $210 = $206 ^ $200;
 $211 = $209 ^ $203;
 $212 = $arrayidx19$3;
 $213 = $212;
 HEAP32[$213 >> 2] = $210;
 $214 = $212 + 4 | 0;
 $215 = $214;
 HEAP32[$215 >> 2] = $211;
 $216 = $arrayidx$4;
 $217 = $216;
 $218 = HEAP32[$217 >> 2] | 0;
 $219 = $216 + 4 | 0;
 $220 = $219;
 $221 = HEAP32[$220 >> 2] | 0;
 $arrayidx19$4 = $state + 128 | 0;
 $222 = $arrayidx19$4;
 $223 = $222;
 $224 = HEAP32[$223 >> 2] | 0;
 $225 = $222 + 4 | 0;
 $226 = $225;
 $227 = HEAP32[$226 >> 2] | 0;
 $228 = $224 ^ $218;
 $229 = $227 ^ $221;
 $230 = $arrayidx19$4;
 $231 = $230;
 HEAP32[$231 >> 2] = $228;
 $232 = $230 + 4 | 0;
 $233 = $232;
 HEAP32[$233 >> 2] = $229;
 $234 = $arrayidx$5;
 $235 = $234;
 $236 = HEAP32[$235 >> 2] | 0;
 $237 = $234 + 4 | 0;
 $238 = $237;
 $239 = HEAP32[$238 >> 2] | 0;
 $arrayidx19$5 = $state + 136 | 0;
 $240 = $arrayidx19$5;
 $241 = $240;
 $242 = HEAP32[$241 >> 2] | 0;
 $243 = $240 + 4 | 0;
 $244 = $243;
 $245 = HEAP32[$244 >> 2] | 0;
 $246 = $242 ^ $236;
 $247 = $245 ^ $239;
 $248 = $arrayidx19$5;
 $249 = $248;
 HEAP32[$249 >> 2] = $246;
 $250 = $248 + 4 | 0;
 $251 = $250;
 HEAP32[$251 >> 2] = $247;
 $252 = $arrayidx$6;
 $253 = $252;
 $254 = HEAP32[$253 >> 2] | 0;
 $255 = $252 + 4 | 0;
 $256 = $255;
 $257 = HEAP32[$256 >> 2] | 0;
 $arrayidx19$6 = $state + 144 | 0;
 $258 = $arrayidx19$6;
 $259 = $258;
 $260 = HEAP32[$259 >> 2] | 0;
 $261 = $258 + 4 | 0;
 $262 = $261;
 $263 = HEAP32[$262 >> 2] | 0;
 $264 = $260 ^ $254;
 $265 = $263 ^ $257;
 $266 = $arrayidx19$6;
 $267 = $266;
 HEAP32[$267 >> 2] = $264;
 $268 = $266 + 4 | 0;
 $269 = $268;
 HEAP32[$269 >> 2] = $265;
 $270 = $arrayidx$7;
 $271 = $270;
 $272 = HEAP32[$271 >> 2] | 0;
 $273 = $270 + 4 | 0;
 $274 = $273;
 $275 = HEAP32[$274 >> 2] | 0;
 $arrayidx19$7 = $state + 152 | 0;
 $276 = $arrayidx19$7;
 $277 = $276;
 $278 = HEAP32[$277 >> 2] | 0;
 $279 = $276 + 4 | 0;
 $280 = $279;
 $281 = HEAP32[$280 >> 2] | 0;
 $282 = $278 ^ $272;
 $283 = $281 ^ $275;
 $284 = $arrayidx19$7;
 $285 = $284;
 HEAP32[$285 >> 2] = $282;
 $286 = $284 + 4 | 0;
 $287 = $286;
 HEAP32[$287 >> 2] = $283;
 return;
}

function _fill_segment_64($instance, $position) {
 $instance = $instance | 0;
 $position = $position | 0;
 var $$mux = 0, $$not = 0, $$op = 0, $$pre = 0, $$pre45 = 0, $$pre46 = 0, $$pre47 = 0, $$pre48 = 0, $$pre49 = 0, $$pre50 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr$us = 0, $add$ptr104 = 0, $add$ptr104$us = 0, $add$ptr106 = 0, $add$ptr106$us = 0, $add$ptr108 = 0, $add$ptr108$us = 0, $add45 = 0, $address_block = 0, $arrayidx12 = 0, $arrayidx16 = 0;
 var $arrayidx19 = 0, $arrayidx22 = 0, $arrayidx26 = 0, $arrayidx73$us = 0, $arrayidx77 = 0, $brmerge = 0, $call = 0, $call$us = 0, $cmp = 0, $cmp112 = 0, $cmp112$us = 0, $cmp29 = 0, $cmp2952 = 0, $cmp34 = 0, $cmp4 = 0, $cmp47 = 0, $cmp5 = 0, $cmp55 = 0, $cmp55$us = 0, $cmp5540 = 0;
 var $cmp59 = 0, $cmp59$us = 0, $cmp67$us = 0, $cmp87 = 0, $conv43 = 0, $conv97 = 0, $conv97$us = 0, $curr_offset$042 = 0, $curr_offset$042$us = 0, $i$043 = 0, $i$043$us = 0, $idx$ext = 0, $idx$ext$us = 0, $inc = 0, $inc$us = 0, $inc117 = 0, $inc117$us = 0, $inc118 = 0, $inc118$us = 0, $index = 0;
 var $input_block = 0, $lane = 0, $lane41 = 0, $lane_length = 0, $lanes = 0, $memory_blocks = 0, $mul = 0, $mul44 = 0, $or$cond = 0, $passes = 0, $position$idx$val = 0, $position$idx1$val = 0, $position$idx3$val10 = 0, $position$idx3$val8 = 0, $position$idx3$val9 = 0, $prev_offset$0 = 0, $prev_offset$0$in = 0, $prev_offset$141 = 0, $prev_offset$141$us = 0, $rem = 0;
 var $rem58 = 0, $rem58$us = 0, $rem66$us = 0, $segment_length = 0, $slice = 0, $slice13$phi$trans$insert = 0, $slice32 = 0, $slice42$phi$trans$insert = 0, $spec$select = 0, $spec$select$us = 0, $starting_index$0 = 0, $sub62 = 0, $sub62$us = 0, $type = 0, $version = 0, $zero_block = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3072 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(3072 | 0);
 $address_block = sp + 2048 | 0;
 $input_block = sp + 1024 | 0;
 $zero_block = sp;
 $cmp = ($instance | 0) == (0 | 0);
 if ($cmp) {
  STACKTOP = sp;
  return;
 }
 $type = $instance + 32 | 0;
 $0 = HEAP32[$type >> 2] | 0;
 switch ($0 | 0) {
 case 1:
  {
   $$pre = HEAP32[$position >> 2] | 0;
   $slice13$phi$trans$insert = $position + 8 | 0;
   $$pre45 = HEAP8[$slice13$phi$trans$insert >> 0] | 0;
   $13 = $$pre45;
   $position$idx3$val10 = $$pre;
   label = 7;
   break;
  }
 case 2:
  {
   $1 = HEAP32[$position >> 2] | 0;
   $cmp4 = ($1 | 0) == 0;
   if ($cmp4) {
    $slice = $position + 8 | 0;
    $2 = HEAP8[$slice >> 0] | 0;
    $cmp5 = ($2 & 255) < 2;
    if ($cmp5) {
     $13 = $2;
     $position$idx3$val10 = 0;
     label = 7;
    } else {
     $76 = 0;
     $cmp2952 = 1;
     $position$idx$val = 0;
     $position$idx1$val = $2;
     $starting_index$0 = 0;
    }
   } else {
    $75 = 0;
    $position$idx3$val8 = $1;
    label = 9;
   }
   break;
  }
 default:
  {
   $$pre46 = HEAP32[$position >> 2] | 0;
   $34 = 0;
   $position$idx3$val9 = $$pre46;
   label = 8;
  }
 }
 if ((label | 0) == 7) {
  _init_block_value($zero_block);
  _init_block_value($input_block);
  $3 = $input_block;
  $4 = $3;
  HEAP32[$4 >> 2] = $position$idx3$val10;
  $5 = $3 + 4 | 0;
  $6 = $5;
  HEAP32[$6 >> 2] = 0;
  $lane = $position + 4 | 0;
  $7 = HEAP32[$lane >> 2] | 0;
  $arrayidx12 = $input_block + 8 | 0;
  $8 = $arrayidx12;
  $9 = $8;
  HEAP32[$9 >> 2] = $7;
  $10 = $8 + 4 | 0;
  $11 = $10;
  HEAP32[$11 >> 2] = 0;
  $12 = $13 & 255;
  $arrayidx16 = $input_block + 16 | 0;
  $14 = $arrayidx16;
  $15 = $14;
  HEAP32[$15 >> 2] = $12;
  $16 = $14 + 4 | 0;
  $17 = $16;
  HEAP32[$17 >> 2] = 0;
  $memory_blocks = $instance + 12 | 0;
  $18 = HEAP32[$memory_blocks >> 2] | 0;
  $arrayidx19 = $input_block + 24 | 0;
  $19 = $arrayidx19;
  $20 = $19;
  HEAP32[$20 >> 2] = $18;
  $21 = $19 + 4 | 0;
  $22 = $21;
  HEAP32[$22 >> 2] = 0;
  $passes = $instance + 8 | 0;
  $23 = HEAP32[$passes >> 2] | 0;
  $arrayidx22 = $input_block + 32 | 0;
  $24 = $arrayidx22;
  $25 = $24;
  HEAP32[$25 >> 2] = $23;
  $26 = $24 + 4 | 0;
  $27 = $26;
  HEAP32[$27 >> 2] = 0;
  $28 = HEAP32[$type >> 2] | 0;
  $arrayidx26 = $input_block + 40 | 0;
  $29 = $arrayidx26;
  $30 = $29;
  HEAP32[$30 >> 2] = $28;
  $31 = $29 + 4 | 0;
  $32 = $31;
  HEAP32[$32 >> 2] = 0;
  $34 = 1;
  $position$idx3$val9 = $position$idx3$val10;
  label = 8;
 }
 if ((label | 0) == 8) {
  $cmp29 = ($position$idx3$val9 | 0) == 0;
  if ($cmp29) {
   $slice32 = $position + 8 | 0;
   $33 = HEAP8[$slice32 >> 0] | 0;
   $cmp34 = $33 << 24 >> 24 != 0;
   $$not = $34 ^ 1;
   $brmerge = $cmp34 | $$not;
   $$mux = $cmp34 ? 0 : 2;
   if ($brmerge) {
    $76 = $34;
    $cmp2952 = 1;
    $position$idx$val = $position$idx3$val9;
    $position$idx1$val = $33;
    $starting_index$0 = $$mux;
   } else {
    _next_addresses($address_block, $input_block, $zero_block);
    $76 = $34;
    $cmp2952 = 1;
    $position$idx$val = $position$idx3$val9;
    $position$idx1$val = 0;
    $starting_index$0 = 2;
   }
  } else {
   $75 = $34;
   $position$idx3$val8 = $position$idx3$val9;
   label = 9;
  }
 }
 if ((label | 0) == 9) {
  $slice42$phi$trans$insert = $position + 8 | 0;
  $$pre47 = HEAP8[$slice42$phi$trans$insert >> 0] | 0;
  $76 = $75;
  $cmp2952 = 0;
  $position$idx$val = $position$idx3$val8;
  $position$idx1$val = $$pre47;
  $starting_index$0 = 0;
 }
 $lane41 = $position + 4 | 0;
 $35 = HEAP32[$lane41 >> 2] | 0;
 $lane_length = $instance + 20 | 0;
 $36 = HEAP32[$lane_length >> 2] | 0;
 $mul = Math_imul($36, $35) | 0;
 $conv43 = $position$idx1$val & 255;
 $segment_length = $instance + 16 | 0;
 $37 = HEAP32[$segment_length >> 2] | 0;
 $mul44 = Math_imul($37, $conv43) | 0;
 $add = $mul + $starting_index$0 | 0;
 $add45 = $add + $mul44 | 0;
 $rem = ($add45 >>> 0) % ($36 >>> 0) & -1;
 $cmp47 = ($rem | 0) == 0;
 $$op = $36 + -1 | 0;
 $prev_offset$0$in = $cmp47 ? $$op : -1;
 $prev_offset$0 = $prev_offset$0$in + $add45 | 0;
 $cmp5540 = $starting_index$0 >>> 0 < $37 >>> 0;
 if (!$cmp5540) {
  STACKTOP = sp;
  return;
 }
 $lanes = $instance + 24 | 0;
 $cmp87 = $position$idx1$val << 24 >> 24 == 0;
 $or$cond = $cmp2952 & $cmp87;
 $index = $position + 12 | 0;
 $version = $instance + 4 | 0;
 if (!$76) {
  $57 = $36;
  $curr_offset$042 = $add45;
  $i$043 = $starting_index$0;
  $prev_offset$141 = $prev_offset$0;
  while (1) {
   $rem58 = ($curr_offset$042 >>> 0) % ($57 >>> 0) & -1;
   $cmp59 = ($rem58 | 0) == 1;
   $sub62 = $curr_offset$042 + -1 | 0;
   $spec$select = $cmp59 ? $sub62 : $prev_offset$141;
   $58 = HEAP32[$instance >> 2] | 0;
   $arrayidx77 = $58 + ($spec$select << 10) | 0;
   $59 = $arrayidx77;
   $60 = $59;
   $61 = HEAP32[$60 >> 2] | 0;
   $62 = $59 + 4 | 0;
   $63 = $62;
   $64 = HEAP32[$63 >> 2] | 0;
   $65 = HEAP32[$lanes >> 2] | 0;
   $66 = ___uremdi3($64 | 0, 0, $65 | 0, 0) | 0;
   $67 = getTempRet0() | 0;
   $68 = $or$cond ? $35 : $66;
   $69 = $or$cond ? 0 : $67;
   HEAP32[$index >> 2] = $i$043;
   $70 = ($68 | 0) == ($35 | 0);
   $71 = ($69 | 0) == 0;
   $72 = $70 & $71;
   $conv97 = $72 & 1;
   $call = _index_alpha($instance, $position$idx$val, $position$idx1$val, $i$043, $61, $conv97) | 0;
   $idx$ext = Math_imul($57, $68) | 0;
   $add$ptr = $58 + ($idx$ext << 10) | 0;
   $add$ptr104 = $add$ptr + ($call << 10) | 0;
   $add$ptr106 = $58 + ($curr_offset$042 << 10) | 0;
   $add$ptr108 = $58 + ($spec$select << 10) | 0;
   if ($cmp2952) {
    label = 26;
   } else {
    $73 = HEAP32[$version >> 2] | 0;
    $cmp112 = ($73 | 0) == 16;
    if ($cmp112) {
     label = 26;
    } else {
     _fill_block($add$ptr108, $add$ptr104, $add$ptr106, 1);
    }
   }
   if ((label | 0) == 26) {
    label = 0;
    _fill_block($add$ptr108, $add$ptr104, $add$ptr106, 0);
   }
   $inc = $i$043 + 1 | 0;
   $74 = HEAP32[$segment_length >> 2] | 0;
   $cmp55 = $inc >>> 0 < $74 >>> 0;
   if (!$cmp55) {
    break;
   }
   $inc118 = $spec$select + 1 | 0;
   $inc117 = $curr_offset$042 + 1 | 0;
   $$pre48 = HEAP32[$lane_length >> 2] | 0;
   $57 = $$pre48;
   $curr_offset$042 = $inc117;
   $i$043 = $inc;
   $prev_offset$141 = $inc118;
  }
  STACKTOP = sp;
  return;
 }
 $38 = $36;
 $curr_offset$042$us = $add45;
 $i$043$us = $starting_index$0;
 $prev_offset$141$us = $prev_offset$0;
 while (1) {
  $rem58$us = ($curr_offset$042$us >>> 0) % ($38 >>> 0) & -1;
  $cmp59$us = ($rem58$us | 0) == 1;
  $sub62$us = $curr_offset$042$us + -1 | 0;
  $spec$select$us = $cmp59$us ? $sub62$us : $prev_offset$141$us;
  $rem66$us = $i$043$us & 127;
  $cmp67$us = ($rem66$us | 0) == 0;
  if ($cmp67$us) {
   _next_addresses($address_block, $input_block, $zero_block);
   $$pre50 = HEAP32[$lane_length >> 2] | 0;
   $54 = $$pre50;
  } else {
   $54 = $38;
  }
  $arrayidx73$us = $address_block + ($rem66$us << 3) | 0;
  $39 = $arrayidx73$us;
  $40 = $39;
  $41 = HEAP32[$40 >> 2] | 0;
  $42 = $39 + 4 | 0;
  $43 = $42;
  $44 = HEAP32[$43 >> 2] | 0;
  $45 = HEAP32[$lanes >> 2] | 0;
  $46 = ___uremdi3($44 | 0, 0, $45 | 0, 0) | 0;
  $47 = getTempRet0() | 0;
  $48 = $or$cond ? $35 : $46;
  $49 = $or$cond ? 0 : $47;
  HEAP32[$index >> 2] = $i$043$us;
  $50 = ($48 | 0) == ($35 | 0);
  $51 = ($49 | 0) == 0;
  $52 = $50 & $51;
  $conv97$us = $52 & 1;
  $call$us = _index_alpha($instance, $position$idx$val, $position$idx1$val, $i$043$us, $41, $conv97$us) | 0;
  $53 = HEAP32[$instance >> 2] | 0;
  $idx$ext$us = Math_imul($54, $48) | 0;
  $add$ptr$us = $53 + ($idx$ext$us << 10) | 0;
  $add$ptr104$us = $add$ptr$us + ($call$us << 10) | 0;
  $add$ptr106$us = $53 + ($curr_offset$042$us << 10) | 0;
  $add$ptr108$us = $53 + ($spec$select$us << 10) | 0;
  if ($cmp2952) {
   label = 21;
  } else {
   $55 = HEAP32[$version >> 2] | 0;
   $cmp112$us = ($55 | 0) == 16;
   if ($cmp112$us) {
    label = 21;
   } else {
    _fill_block($add$ptr108$us, $add$ptr104$us, $add$ptr106$us, 1);
   }
  }
  if ((label | 0) == 21) {
   label = 0;
   _fill_block($add$ptr108$us, $add$ptr104$us, $add$ptr106$us, 0);
  }
  $inc$us = $i$043$us + 1 | 0;
  $56 = HEAP32[$segment_length >> 2] | 0;
  $cmp55$us = $inc$us >>> 0 < $56 >>> 0;
  if (!$cmp55$us) {
   break;
  }
  $inc118$us = $spec$select$us + 1 | 0;
  $inc117$us = $curr_offset$042$us + 1 | 0;
  $$pre49 = HEAP32[$lane_length >> 2] | 0;
  $38 = $$pre49;
  $curr_offset$042$us = $inc117$us;
  $i$043$us = $inc$us;
  $prev_offset$141$us = $inc118$us;
 }
 STACKTOP = sp;
 return;
}

function __ZNK6Crypto9PublicKeyeqERKS0_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp$i$i$i = 0, $cmp$i$i$i$1 = 0, $cmp$i$i$i$10 = 0, $cmp$i$i$i$11 = 0, $cmp$i$i$i$12 = 0, $cmp$i$i$i$13 = 0, $cmp$i$i$i$14 = 0, $cmp$i$i$i$15 = 0, $cmp$i$i$i$16 = 0, $cmp$i$i$i$17 = 0, $cmp$i$i$i$18 = 0, $cmp$i$i$i$19 = 0, $cmp$i$i$i$2 = 0, $cmp$i$i$i$20 = 0, $cmp$i$i$i$21 = 0, $cmp$i$i$i$22 = 0;
 var $cmp$i$i$i$23 = 0, $cmp$i$i$i$24 = 0, $cmp$i$i$i$25 = 0, $cmp$i$i$i$26 = 0, $cmp$i$i$i$27 = 0, $cmp$i$i$i$28 = 0, $cmp$i$i$i$29 = 0, $cmp$i$i$i$3 = 0, $cmp$i$i$i$30 = 0, $cmp$i$i$i$31 = 0, $cmp$i$i$i$4 = 0, $cmp$i$i$i$5 = 0, $cmp$i$i$i$6 = 0, $cmp$i$i$i$7 = 0, $cmp$i$i$i$8 = 0, $cmp$i$i$i$9 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$1 = 0, $incdec$ptr$i$i$10 = 0, $incdec$ptr$i$i$11 = 0;
 var $incdec$ptr$i$i$12 = 0, $incdec$ptr$i$i$13 = 0, $incdec$ptr$i$i$14 = 0, $incdec$ptr$i$i$15 = 0, $incdec$ptr$i$i$16 = 0, $incdec$ptr$i$i$17 = 0, $incdec$ptr$i$i$18 = 0, $incdec$ptr$i$i$19 = 0, $incdec$ptr$i$i$2 = 0, $incdec$ptr$i$i$20 = 0, $incdec$ptr$i$i$21 = 0, $incdec$ptr$i$i$22 = 0, $incdec$ptr$i$i$23 = 0, $incdec$ptr$i$i$24 = 0, $incdec$ptr$i$i$25 = 0, $incdec$ptr$i$i$26 = 0, $incdec$ptr$i$i$27 = 0, $incdec$ptr$i$i$28 = 0, $incdec$ptr$i$i$29 = 0, $incdec$ptr$i$i$3 = 0;
 var $incdec$ptr$i$i$30 = 0, $incdec$ptr$i$i$4 = 0, $incdec$ptr$i$i$5 = 0, $incdec$ptr$i$i$6 = 0, $incdec$ptr$i$i$7 = 0, $incdec$ptr$i$i$8 = 0, $incdec$ptr$i$i$9 = 0, $incdec$ptr1$i$i = 0, $incdec$ptr1$i$i$1 = 0, $incdec$ptr1$i$i$10 = 0, $incdec$ptr1$i$i$11 = 0, $incdec$ptr1$i$i$12 = 0, $incdec$ptr1$i$i$13 = 0, $incdec$ptr1$i$i$14 = 0, $incdec$ptr1$i$i$15 = 0, $incdec$ptr1$i$i$16 = 0, $incdec$ptr1$i$i$17 = 0, $incdec$ptr1$i$i$18 = 0, $incdec$ptr1$i$i$19 = 0, $incdec$ptr1$i$i$2 = 0;
 var $incdec$ptr1$i$i$20 = 0, $incdec$ptr1$i$i$21 = 0, $incdec$ptr1$i$i$22 = 0, $incdec$ptr1$i$i$23 = 0, $incdec$ptr1$i$i$24 = 0, $incdec$ptr1$i$i$25 = 0, $incdec$ptr1$i$i$26 = 0, $incdec$ptr1$i$i$27 = 0, $incdec$ptr1$i$i$28 = 0, $incdec$ptr1$i$i$29 = 0, $incdec$ptr1$i$i$3 = 0, $incdec$ptr1$i$i$30 = 0, $incdec$ptr1$i$i$4 = 0, $incdec$ptr1$i$i$5 = 0, $incdec$ptr1$i$i$6 = 0, $incdec$ptr1$i$i$7 = 0, $incdec$ptr1$i$i$8 = 0, $incdec$ptr1$i$i$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $1 = HEAP8[$other >> 0] | 0;
 $cmp$i$i$i = $0 << 24 >> 24 == $1 << 24 >> 24;
 if (!$cmp$i$i$i) {
  return 0;
 }
 $incdec$ptr$i$i = $this + 1 | 0;
 $incdec$ptr1$i$i = $other + 1 | 0;
 $2 = HEAP8[$incdec$ptr$i$i >> 0] | 0;
 $3 = HEAP8[$incdec$ptr1$i$i >> 0] | 0;
 $cmp$i$i$i$1 = $2 << 24 >> 24 == $3 << 24 >> 24;
 if (!$cmp$i$i$i$1) {
  return 0;
 }
 $incdec$ptr$i$i$1 = $this + 2 | 0;
 $incdec$ptr1$i$i$1 = $other + 2 | 0;
 $4 = HEAP8[$incdec$ptr$i$i$1 >> 0] | 0;
 $5 = HEAP8[$incdec$ptr1$i$i$1 >> 0] | 0;
 $cmp$i$i$i$2 = $4 << 24 >> 24 == $5 << 24 >> 24;
 if (!$cmp$i$i$i$2) {
  return 0;
 }
 $incdec$ptr$i$i$2 = $this + 3 | 0;
 $incdec$ptr1$i$i$2 = $other + 3 | 0;
 $6 = HEAP8[$incdec$ptr$i$i$2 >> 0] | 0;
 $7 = HEAP8[$incdec$ptr1$i$i$2 >> 0] | 0;
 $cmp$i$i$i$3 = $6 << 24 >> 24 == $7 << 24 >> 24;
 if (!$cmp$i$i$i$3) {
  return 0;
 }
 $incdec$ptr$i$i$3 = $this + 4 | 0;
 $incdec$ptr1$i$i$3 = $other + 4 | 0;
 $8 = HEAP8[$incdec$ptr$i$i$3 >> 0] | 0;
 $9 = HEAP8[$incdec$ptr1$i$i$3 >> 0] | 0;
 $cmp$i$i$i$4 = $8 << 24 >> 24 == $9 << 24 >> 24;
 if (!$cmp$i$i$i$4) {
  return 0;
 }
 $incdec$ptr$i$i$4 = $this + 5 | 0;
 $incdec$ptr1$i$i$4 = $other + 5 | 0;
 $10 = HEAP8[$incdec$ptr$i$i$4 >> 0] | 0;
 $11 = HEAP8[$incdec$ptr1$i$i$4 >> 0] | 0;
 $cmp$i$i$i$5 = $10 << 24 >> 24 == $11 << 24 >> 24;
 if (!$cmp$i$i$i$5) {
  return 0;
 }
 $incdec$ptr$i$i$5 = $this + 6 | 0;
 $incdec$ptr1$i$i$5 = $other + 6 | 0;
 $12 = HEAP8[$incdec$ptr$i$i$5 >> 0] | 0;
 $13 = HEAP8[$incdec$ptr1$i$i$5 >> 0] | 0;
 $cmp$i$i$i$6 = $12 << 24 >> 24 == $13 << 24 >> 24;
 if (!$cmp$i$i$i$6) {
  return 0;
 }
 $incdec$ptr$i$i$6 = $this + 7 | 0;
 $incdec$ptr1$i$i$6 = $other + 7 | 0;
 $14 = HEAP8[$incdec$ptr$i$i$6 >> 0] | 0;
 $15 = HEAP8[$incdec$ptr1$i$i$6 >> 0] | 0;
 $cmp$i$i$i$7 = $14 << 24 >> 24 == $15 << 24 >> 24;
 if (!$cmp$i$i$i$7) {
  return 0;
 }
 $incdec$ptr$i$i$7 = $this + 8 | 0;
 $incdec$ptr1$i$i$7 = $other + 8 | 0;
 $16 = HEAP8[$incdec$ptr$i$i$7 >> 0] | 0;
 $17 = HEAP8[$incdec$ptr1$i$i$7 >> 0] | 0;
 $cmp$i$i$i$8 = $16 << 24 >> 24 == $17 << 24 >> 24;
 if (!$cmp$i$i$i$8) {
  return 0;
 }
 $incdec$ptr$i$i$8 = $this + 9 | 0;
 $incdec$ptr1$i$i$8 = $other + 9 | 0;
 $18 = HEAP8[$incdec$ptr$i$i$8 >> 0] | 0;
 $19 = HEAP8[$incdec$ptr1$i$i$8 >> 0] | 0;
 $cmp$i$i$i$9 = $18 << 24 >> 24 == $19 << 24 >> 24;
 if (!$cmp$i$i$i$9) {
  return 0;
 }
 $incdec$ptr$i$i$9 = $this + 10 | 0;
 $incdec$ptr1$i$i$9 = $other + 10 | 0;
 $20 = HEAP8[$incdec$ptr$i$i$9 >> 0] | 0;
 $21 = HEAP8[$incdec$ptr1$i$i$9 >> 0] | 0;
 $cmp$i$i$i$10 = $20 << 24 >> 24 == $21 << 24 >> 24;
 if (!$cmp$i$i$i$10) {
  return 0;
 }
 $incdec$ptr$i$i$10 = $this + 11 | 0;
 $incdec$ptr1$i$i$10 = $other + 11 | 0;
 $22 = HEAP8[$incdec$ptr$i$i$10 >> 0] | 0;
 $23 = HEAP8[$incdec$ptr1$i$i$10 >> 0] | 0;
 $cmp$i$i$i$11 = $22 << 24 >> 24 == $23 << 24 >> 24;
 if (!$cmp$i$i$i$11) {
  return 0;
 }
 $incdec$ptr$i$i$11 = $this + 12 | 0;
 $incdec$ptr1$i$i$11 = $other + 12 | 0;
 $24 = HEAP8[$incdec$ptr$i$i$11 >> 0] | 0;
 $25 = HEAP8[$incdec$ptr1$i$i$11 >> 0] | 0;
 $cmp$i$i$i$12 = $24 << 24 >> 24 == $25 << 24 >> 24;
 if (!$cmp$i$i$i$12) {
  return 0;
 }
 $incdec$ptr$i$i$12 = $this + 13 | 0;
 $incdec$ptr1$i$i$12 = $other + 13 | 0;
 $26 = HEAP8[$incdec$ptr$i$i$12 >> 0] | 0;
 $27 = HEAP8[$incdec$ptr1$i$i$12 >> 0] | 0;
 $cmp$i$i$i$13 = $26 << 24 >> 24 == $27 << 24 >> 24;
 if (!$cmp$i$i$i$13) {
  return 0;
 }
 $incdec$ptr$i$i$13 = $this + 14 | 0;
 $incdec$ptr1$i$i$13 = $other + 14 | 0;
 $28 = HEAP8[$incdec$ptr$i$i$13 >> 0] | 0;
 $29 = HEAP8[$incdec$ptr1$i$i$13 >> 0] | 0;
 $cmp$i$i$i$14 = $28 << 24 >> 24 == $29 << 24 >> 24;
 if (!$cmp$i$i$i$14) {
  return 0;
 }
 $incdec$ptr$i$i$14 = $this + 15 | 0;
 $incdec$ptr1$i$i$14 = $other + 15 | 0;
 $30 = HEAP8[$incdec$ptr$i$i$14 >> 0] | 0;
 $31 = HEAP8[$incdec$ptr1$i$i$14 >> 0] | 0;
 $cmp$i$i$i$15 = $30 << 24 >> 24 == $31 << 24 >> 24;
 if (!$cmp$i$i$i$15) {
  return 0;
 }
 $incdec$ptr$i$i$15 = $this + 16 | 0;
 $incdec$ptr1$i$i$15 = $other + 16 | 0;
 $32 = HEAP8[$incdec$ptr$i$i$15 >> 0] | 0;
 $33 = HEAP8[$incdec$ptr1$i$i$15 >> 0] | 0;
 $cmp$i$i$i$16 = $32 << 24 >> 24 == $33 << 24 >> 24;
 if (!$cmp$i$i$i$16) {
  return 0;
 }
 $incdec$ptr$i$i$16 = $this + 17 | 0;
 $incdec$ptr1$i$i$16 = $other + 17 | 0;
 $34 = HEAP8[$incdec$ptr$i$i$16 >> 0] | 0;
 $35 = HEAP8[$incdec$ptr1$i$i$16 >> 0] | 0;
 $cmp$i$i$i$17 = $34 << 24 >> 24 == $35 << 24 >> 24;
 if (!$cmp$i$i$i$17) {
  return 0;
 }
 $incdec$ptr$i$i$17 = $this + 18 | 0;
 $incdec$ptr1$i$i$17 = $other + 18 | 0;
 $36 = HEAP8[$incdec$ptr$i$i$17 >> 0] | 0;
 $37 = HEAP8[$incdec$ptr1$i$i$17 >> 0] | 0;
 $cmp$i$i$i$18 = $36 << 24 >> 24 == $37 << 24 >> 24;
 if (!$cmp$i$i$i$18) {
  return 0;
 }
 $incdec$ptr$i$i$18 = $this + 19 | 0;
 $incdec$ptr1$i$i$18 = $other + 19 | 0;
 $38 = HEAP8[$incdec$ptr$i$i$18 >> 0] | 0;
 $39 = HEAP8[$incdec$ptr1$i$i$18 >> 0] | 0;
 $cmp$i$i$i$19 = $38 << 24 >> 24 == $39 << 24 >> 24;
 if (!$cmp$i$i$i$19) {
  return 0;
 }
 $incdec$ptr$i$i$19 = $this + 20 | 0;
 $incdec$ptr1$i$i$19 = $other + 20 | 0;
 $40 = HEAP8[$incdec$ptr$i$i$19 >> 0] | 0;
 $41 = HEAP8[$incdec$ptr1$i$i$19 >> 0] | 0;
 $cmp$i$i$i$20 = $40 << 24 >> 24 == $41 << 24 >> 24;
 if (!$cmp$i$i$i$20) {
  return 0;
 }
 $incdec$ptr$i$i$20 = $this + 21 | 0;
 $incdec$ptr1$i$i$20 = $other + 21 | 0;
 $42 = HEAP8[$incdec$ptr$i$i$20 >> 0] | 0;
 $43 = HEAP8[$incdec$ptr1$i$i$20 >> 0] | 0;
 $cmp$i$i$i$21 = $42 << 24 >> 24 == $43 << 24 >> 24;
 if (!$cmp$i$i$i$21) {
  return 0;
 }
 $incdec$ptr$i$i$21 = $this + 22 | 0;
 $incdec$ptr1$i$i$21 = $other + 22 | 0;
 $44 = HEAP8[$incdec$ptr$i$i$21 >> 0] | 0;
 $45 = HEAP8[$incdec$ptr1$i$i$21 >> 0] | 0;
 $cmp$i$i$i$22 = $44 << 24 >> 24 == $45 << 24 >> 24;
 if (!$cmp$i$i$i$22) {
  return 0;
 }
 $incdec$ptr$i$i$22 = $this + 23 | 0;
 $incdec$ptr1$i$i$22 = $other + 23 | 0;
 $46 = HEAP8[$incdec$ptr$i$i$22 >> 0] | 0;
 $47 = HEAP8[$incdec$ptr1$i$i$22 >> 0] | 0;
 $cmp$i$i$i$23 = $46 << 24 >> 24 == $47 << 24 >> 24;
 if (!$cmp$i$i$i$23) {
  return 0;
 }
 $incdec$ptr$i$i$23 = $this + 24 | 0;
 $incdec$ptr1$i$i$23 = $other + 24 | 0;
 $48 = HEAP8[$incdec$ptr$i$i$23 >> 0] | 0;
 $49 = HEAP8[$incdec$ptr1$i$i$23 >> 0] | 0;
 $cmp$i$i$i$24 = $48 << 24 >> 24 == $49 << 24 >> 24;
 if (!$cmp$i$i$i$24) {
  return 0;
 }
 $incdec$ptr$i$i$24 = $this + 25 | 0;
 $incdec$ptr1$i$i$24 = $other + 25 | 0;
 $50 = HEAP8[$incdec$ptr$i$i$24 >> 0] | 0;
 $51 = HEAP8[$incdec$ptr1$i$i$24 >> 0] | 0;
 $cmp$i$i$i$25 = $50 << 24 >> 24 == $51 << 24 >> 24;
 if (!$cmp$i$i$i$25) {
  return 0;
 }
 $incdec$ptr$i$i$25 = $this + 26 | 0;
 $incdec$ptr1$i$i$25 = $other + 26 | 0;
 $52 = HEAP8[$incdec$ptr$i$i$25 >> 0] | 0;
 $53 = HEAP8[$incdec$ptr1$i$i$25 >> 0] | 0;
 $cmp$i$i$i$26 = $52 << 24 >> 24 == $53 << 24 >> 24;
 if (!$cmp$i$i$i$26) {
  return 0;
 }
 $incdec$ptr$i$i$26 = $this + 27 | 0;
 $incdec$ptr1$i$i$26 = $other + 27 | 0;
 $54 = HEAP8[$incdec$ptr$i$i$26 >> 0] | 0;
 $55 = HEAP8[$incdec$ptr1$i$i$26 >> 0] | 0;
 $cmp$i$i$i$27 = $54 << 24 >> 24 == $55 << 24 >> 24;
 if (!$cmp$i$i$i$27) {
  return 0;
 }
 $incdec$ptr$i$i$27 = $this + 28 | 0;
 $incdec$ptr1$i$i$27 = $other + 28 | 0;
 $56 = HEAP8[$incdec$ptr$i$i$27 >> 0] | 0;
 $57 = HEAP8[$incdec$ptr1$i$i$27 >> 0] | 0;
 $cmp$i$i$i$28 = $56 << 24 >> 24 == $57 << 24 >> 24;
 if (!$cmp$i$i$i$28) {
  return 0;
 }
 $incdec$ptr$i$i$28 = $this + 29 | 0;
 $incdec$ptr1$i$i$28 = $other + 29 | 0;
 $58 = HEAP8[$incdec$ptr$i$i$28 >> 0] | 0;
 $59 = HEAP8[$incdec$ptr1$i$i$28 >> 0] | 0;
 $cmp$i$i$i$29 = $58 << 24 >> 24 == $59 << 24 >> 24;
 if (!$cmp$i$i$i$29) {
  return 0;
 }
 $incdec$ptr$i$i$29 = $this + 30 | 0;
 $incdec$ptr1$i$i$29 = $other + 30 | 0;
 $60 = HEAP8[$incdec$ptr$i$i$29 >> 0] | 0;
 $61 = HEAP8[$incdec$ptr1$i$i$29 >> 0] | 0;
 $cmp$i$i$i$30 = $60 << 24 >> 24 == $61 << 24 >> 24;
 if ($cmp$i$i$i$30) {
  $incdec$ptr$i$i$30 = $this + 31 | 0;
  $incdec$ptr1$i$i$30 = $other + 31 | 0;
  $62 = HEAP8[$incdec$ptr$i$i$30 >> 0] | 0;
  $63 = HEAP8[$incdec$ptr1$i$i$30 >> 0] | 0;
  $cmp$i$i$i$31 = $62 << 24 >> 24 == $63 << 24 >> 24;
  return $cmp$i$i$i$31 | 0;
 } else {
  return 0;
 }
 return 0 | 0;
}

function _F512($h, $m) {
 $h = $h | 0;
 $m = $m | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $Ptmp = 0, $Qtmp = 0, $arrayidx$1 = 0, $arrayidx$10 = 0, $arrayidx$11 = 0, $arrayidx$12 = 0, $arrayidx$13 = 0, $arrayidx$14 = 0, $arrayidx$15 = 0, $arrayidx$2 = 0, $arrayidx$3 = 0, $arrayidx$4 = 0, $arrayidx$5 = 0, $arrayidx$6 = 0, $arrayidx$7 = 0, $arrayidx$8 = 0, $arrayidx$9 = 0, $arrayidx2$1 = 0, $arrayidx2$10 = 0, $arrayidx2$11 = 0;
 var $arrayidx2$12 = 0, $arrayidx2$13 = 0, $arrayidx2$14 = 0, $arrayidx2$15 = 0, $arrayidx2$2 = 0, $arrayidx2$3 = 0, $arrayidx2$4 = 0, $arrayidx2$5 = 0, $arrayidx2$6 = 0, $arrayidx2$7 = 0, $arrayidx2$8 = 0, $arrayidx2$9 = 0, $arrayidx4$1 = 0, $arrayidx4$10 = 0, $arrayidx4$11 = 0, $arrayidx4$12 = 0, $arrayidx4$13 = 0, $arrayidx4$14 = 0, $arrayidx4$15 = 0, $arrayidx4$2 = 0;
 var $arrayidx4$3 = 0, $arrayidx4$4 = 0, $arrayidx4$5 = 0, $arrayidx4$6 = 0, $arrayidx4$7 = 0, $arrayidx4$8 = 0, $arrayidx4$9 = 0, $arrayidx48$1 = 0, $arrayidx48$10 = 0, $arrayidx48$11 = 0, $arrayidx48$12 = 0, $arrayidx48$13 = 0, $arrayidx48$14 = 0, $arrayidx48$15 = 0, $arrayidx48$2 = 0, $arrayidx48$3 = 0, $arrayidx48$4 = 0, $arrayidx48$5 = 0, $arrayidx48$6 = 0, $arrayidx48$7 = 0;
 var $arrayidx48$8 = 0, $arrayidx48$9 = 0, $xor = 0, $xor$1 = 0, $xor$10 = 0, $xor$11 = 0, $xor$12 = 0, $xor$13 = 0, $xor$14 = 0, $xor$15 = 0, $xor$2 = 0, $xor$3 = 0, $xor$4 = 0, $xor$5 = 0, $xor$6 = 0, $xor$7 = 0, $xor$8 = 0, $xor$9 = 0, $xor49 = 0, $xor49$1 = 0;
 var $xor49$10 = 0, $xor49$11 = 0, $xor49$12 = 0, $xor49$13 = 0, $xor49$14 = 0, $xor49$15 = 0, $xor49$2 = 0, $xor49$3 = 0, $xor49$4 = 0, $xor49$5 = 0, $xor49$6 = 0, $xor49$7 = 0, $xor49$8 = 0, $xor49$9 = 0, $xor51 = 0, $xor51$1 = 0, $xor51$10 = 0, $xor51$11 = 0, $xor51$12 = 0, $xor51$13 = 0;
 var $xor51$14 = 0, $xor51$15 = 0, $xor51$2 = 0, $xor51$3 = 0, $xor51$4 = 0, $xor51$5 = 0, $xor51$6 = 0, $xor51$7 = 0, $xor51$8 = 0, $xor51$9 = 0, $y = 0, $z = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256 | 0);
 $Ptmp = sp + 192 | 0;
 $Qtmp = sp + 128 | 0;
 $y = sp + 64 | 0;
 $z = sp;
 dest = $z;
 src = $m;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = HEAP32[$m >> 2] | 0;
 $1 = HEAP32[$h >> 2] | 0;
 $xor = $1 ^ $0;
 HEAP32[$Ptmp >> 2] = $xor;
 $arrayidx$1 = $m + 4 | 0;
 $2 = HEAP32[$arrayidx$1 >> 2] | 0;
 $arrayidx2$1 = $h + 4 | 0;
 $3 = HEAP32[$arrayidx2$1 >> 2] | 0;
 $xor$1 = $3 ^ $2;
 $arrayidx4$1 = $Ptmp + 4 | 0;
 HEAP32[$arrayidx4$1 >> 2] = $xor$1;
 $arrayidx$2 = $m + 8 | 0;
 $4 = HEAP32[$arrayidx$2 >> 2] | 0;
 $arrayidx2$2 = $h + 8 | 0;
 $5 = HEAP32[$arrayidx2$2 >> 2] | 0;
 $xor$2 = $5 ^ $4;
 $arrayidx4$2 = $Ptmp + 8 | 0;
 HEAP32[$arrayidx4$2 >> 2] = $xor$2;
 $arrayidx$3 = $m + 12 | 0;
 $6 = HEAP32[$arrayidx$3 >> 2] | 0;
 $arrayidx2$3 = $h + 12 | 0;
 $7 = HEAP32[$arrayidx2$3 >> 2] | 0;
 $xor$3 = $7 ^ $6;
 $arrayidx4$3 = $Ptmp + 12 | 0;
 HEAP32[$arrayidx4$3 >> 2] = $xor$3;
 $arrayidx$4 = $m + 16 | 0;
 $8 = HEAP32[$arrayidx$4 >> 2] | 0;
 $arrayidx2$4 = $h + 16 | 0;
 $9 = HEAP32[$arrayidx2$4 >> 2] | 0;
 $xor$4 = $9 ^ $8;
 $arrayidx4$4 = $Ptmp + 16 | 0;
 HEAP32[$arrayidx4$4 >> 2] = $xor$4;
 $arrayidx$5 = $m + 20 | 0;
 $10 = HEAP32[$arrayidx$5 >> 2] | 0;
 $arrayidx2$5 = $h + 20 | 0;
 $11 = HEAP32[$arrayidx2$5 >> 2] | 0;
 $xor$5 = $11 ^ $10;
 $arrayidx4$5 = $Ptmp + 20 | 0;
 HEAP32[$arrayidx4$5 >> 2] = $xor$5;
 $arrayidx$6 = $m + 24 | 0;
 $12 = HEAP32[$arrayidx$6 >> 2] | 0;
 $arrayidx2$6 = $h + 24 | 0;
 $13 = HEAP32[$arrayidx2$6 >> 2] | 0;
 $xor$6 = $13 ^ $12;
 $arrayidx4$6 = $Ptmp + 24 | 0;
 HEAP32[$arrayidx4$6 >> 2] = $xor$6;
 $arrayidx$7 = $m + 28 | 0;
 $14 = HEAP32[$arrayidx$7 >> 2] | 0;
 $arrayidx2$7 = $h + 28 | 0;
 $15 = HEAP32[$arrayidx2$7 >> 2] | 0;
 $xor$7 = $15 ^ $14;
 $arrayidx4$7 = $Ptmp + 28 | 0;
 HEAP32[$arrayidx4$7 >> 2] = $xor$7;
 $arrayidx$8 = $m + 32 | 0;
 $16 = HEAP32[$arrayidx$8 >> 2] | 0;
 $arrayidx2$8 = $h + 32 | 0;
 $17 = HEAP32[$arrayidx2$8 >> 2] | 0;
 $xor$8 = $17 ^ $16;
 $arrayidx4$8 = $Ptmp + 32 | 0;
 HEAP32[$arrayidx4$8 >> 2] = $xor$8;
 $arrayidx$9 = $m + 36 | 0;
 $18 = HEAP32[$arrayidx$9 >> 2] | 0;
 $arrayidx2$9 = $h + 36 | 0;
 $19 = HEAP32[$arrayidx2$9 >> 2] | 0;
 $xor$9 = $19 ^ $18;
 $arrayidx4$9 = $Ptmp + 36 | 0;
 HEAP32[$arrayidx4$9 >> 2] = $xor$9;
 $arrayidx$10 = $m + 40 | 0;
 $20 = HEAP32[$arrayidx$10 >> 2] | 0;
 $arrayidx2$10 = $h + 40 | 0;
 $21 = HEAP32[$arrayidx2$10 >> 2] | 0;
 $xor$10 = $21 ^ $20;
 $arrayidx4$10 = $Ptmp + 40 | 0;
 HEAP32[$arrayidx4$10 >> 2] = $xor$10;
 $arrayidx$11 = $m + 44 | 0;
 $22 = HEAP32[$arrayidx$11 >> 2] | 0;
 $arrayidx2$11 = $h + 44 | 0;
 $23 = HEAP32[$arrayidx2$11 >> 2] | 0;
 $xor$11 = $23 ^ $22;
 $arrayidx4$11 = $Ptmp + 44 | 0;
 HEAP32[$arrayidx4$11 >> 2] = $xor$11;
 $arrayidx$12 = $m + 48 | 0;
 $24 = HEAP32[$arrayidx$12 >> 2] | 0;
 $arrayidx2$12 = $h + 48 | 0;
 $25 = HEAP32[$arrayidx2$12 >> 2] | 0;
 $xor$12 = $25 ^ $24;
 $arrayidx4$12 = $Ptmp + 48 | 0;
 HEAP32[$arrayidx4$12 >> 2] = $xor$12;
 $arrayidx$13 = $m + 52 | 0;
 $26 = HEAP32[$arrayidx$13 >> 2] | 0;
 $arrayidx2$13 = $h + 52 | 0;
 $27 = HEAP32[$arrayidx2$13 >> 2] | 0;
 $xor$13 = $27 ^ $26;
 $arrayidx4$13 = $Ptmp + 52 | 0;
 HEAP32[$arrayidx4$13 >> 2] = $xor$13;
 $arrayidx$14 = $m + 56 | 0;
 $28 = HEAP32[$arrayidx$14 >> 2] | 0;
 $arrayidx2$14 = $h + 56 | 0;
 $29 = HEAP32[$arrayidx2$14 >> 2] | 0;
 $xor$14 = $29 ^ $28;
 $arrayidx4$14 = $Ptmp + 56 | 0;
 HEAP32[$arrayidx4$14 >> 2] = $xor$14;
 $arrayidx$15 = $m + 60 | 0;
 $30 = HEAP32[$arrayidx$15 >> 2] | 0;
 $arrayidx2$15 = $h + 60 | 0;
 $31 = HEAP32[$arrayidx2$15 >> 2] | 0;
 $xor$15 = $31 ^ $30;
 $arrayidx4$15 = $Ptmp + 60 | 0;
 HEAP32[$arrayidx4$15 >> 2] = $xor$15;
 _RND512Q($z, $y, 0);
 _RND512Q($y, $z, 16777216);
 _RND512Q($z, $y, 33554432);
 _RND512Q($y, $z, 50331648);
 _RND512Q($z, $y, 67108864);
 _RND512Q($y, $z, 83886080);
 _RND512Q($z, $y, 100663296);
 _RND512Q($y, $z, 117440512);
 _RND512Q($z, $y, 134217728);
 _RND512Q($y, $Qtmp, 150994944);
 _RND512P($Ptmp, $y, 0);
 _RND512P($y, $z, 1);
 _RND512P($z, $y, 2);
 _RND512P($y, $z, 3);
 _RND512P($z, $y, 4);
 _RND512P($y, $z, 5);
 _RND512P($z, $y, 6);
 _RND512P($y, $z, 7);
 _RND512P($z, $y, 8);
 _RND512P($y, $Ptmp, 9);
 $32 = HEAP32[$Ptmp >> 2] | 0;
 $33 = HEAP32[$Qtmp >> 2] | 0;
 $xor49 = $33 ^ $32;
 $34 = HEAP32[$h >> 2] | 0;
 $xor51 = $xor49 ^ $34;
 HEAP32[$h >> 2] = $xor51;
 $35 = HEAP32[$arrayidx4$1 >> 2] | 0;
 $arrayidx48$1 = $Qtmp + 4 | 0;
 $36 = HEAP32[$arrayidx48$1 >> 2] | 0;
 $xor49$1 = $36 ^ $35;
 $37 = HEAP32[$arrayidx2$1 >> 2] | 0;
 $xor51$1 = $xor49$1 ^ $37;
 HEAP32[$arrayidx2$1 >> 2] = $xor51$1;
 $38 = HEAP32[$arrayidx4$2 >> 2] | 0;
 $arrayidx48$2 = $Qtmp + 8 | 0;
 $39 = HEAP32[$arrayidx48$2 >> 2] | 0;
 $xor49$2 = $39 ^ $38;
 $40 = HEAP32[$arrayidx2$2 >> 2] | 0;
 $xor51$2 = $xor49$2 ^ $40;
 HEAP32[$arrayidx2$2 >> 2] = $xor51$2;
 $41 = HEAP32[$arrayidx4$3 >> 2] | 0;
 $arrayidx48$3 = $Qtmp + 12 | 0;
 $42 = HEAP32[$arrayidx48$3 >> 2] | 0;
 $xor49$3 = $42 ^ $41;
 $43 = HEAP32[$arrayidx2$3 >> 2] | 0;
 $xor51$3 = $xor49$3 ^ $43;
 HEAP32[$arrayidx2$3 >> 2] = $xor51$3;
 $44 = HEAP32[$arrayidx4$4 >> 2] | 0;
 $arrayidx48$4 = $Qtmp + 16 | 0;
 $45 = HEAP32[$arrayidx48$4 >> 2] | 0;
 $xor49$4 = $45 ^ $44;
 $46 = HEAP32[$arrayidx2$4 >> 2] | 0;
 $xor51$4 = $xor49$4 ^ $46;
 HEAP32[$arrayidx2$4 >> 2] = $xor51$4;
 $47 = HEAP32[$arrayidx4$5 >> 2] | 0;
 $arrayidx48$5 = $Qtmp + 20 | 0;
 $48 = HEAP32[$arrayidx48$5 >> 2] | 0;
 $xor49$5 = $48 ^ $47;
 $49 = HEAP32[$arrayidx2$5 >> 2] | 0;
 $xor51$5 = $xor49$5 ^ $49;
 HEAP32[$arrayidx2$5 >> 2] = $xor51$5;
 $50 = HEAP32[$arrayidx4$6 >> 2] | 0;
 $arrayidx48$6 = $Qtmp + 24 | 0;
 $51 = HEAP32[$arrayidx48$6 >> 2] | 0;
 $xor49$6 = $51 ^ $50;
 $52 = HEAP32[$arrayidx2$6 >> 2] | 0;
 $xor51$6 = $xor49$6 ^ $52;
 HEAP32[$arrayidx2$6 >> 2] = $xor51$6;
 $53 = HEAP32[$arrayidx4$7 >> 2] | 0;
 $arrayidx48$7 = $Qtmp + 28 | 0;
 $54 = HEAP32[$arrayidx48$7 >> 2] | 0;
 $xor49$7 = $54 ^ $53;
 $55 = HEAP32[$arrayidx2$7 >> 2] | 0;
 $xor51$7 = $xor49$7 ^ $55;
 HEAP32[$arrayidx2$7 >> 2] = $xor51$7;
 $56 = HEAP32[$arrayidx4$8 >> 2] | 0;
 $arrayidx48$8 = $Qtmp + 32 | 0;
 $57 = HEAP32[$arrayidx48$8 >> 2] | 0;
 $xor49$8 = $57 ^ $56;
 $58 = HEAP32[$arrayidx2$8 >> 2] | 0;
 $xor51$8 = $xor49$8 ^ $58;
 HEAP32[$arrayidx2$8 >> 2] = $xor51$8;
 $59 = HEAP32[$arrayidx4$9 >> 2] | 0;
 $arrayidx48$9 = $Qtmp + 36 | 0;
 $60 = HEAP32[$arrayidx48$9 >> 2] | 0;
 $xor49$9 = $60 ^ $59;
 $61 = HEAP32[$arrayidx2$9 >> 2] | 0;
 $xor51$9 = $xor49$9 ^ $61;
 HEAP32[$arrayidx2$9 >> 2] = $xor51$9;
 $62 = HEAP32[$arrayidx4$10 >> 2] | 0;
 $arrayidx48$10 = $Qtmp + 40 | 0;
 $63 = HEAP32[$arrayidx48$10 >> 2] | 0;
 $xor49$10 = $63 ^ $62;
 $64 = HEAP32[$arrayidx2$10 >> 2] | 0;
 $xor51$10 = $xor49$10 ^ $64;
 HEAP32[$arrayidx2$10 >> 2] = $xor51$10;
 $65 = HEAP32[$arrayidx4$11 >> 2] | 0;
 $arrayidx48$11 = $Qtmp + 44 | 0;
 $66 = HEAP32[$arrayidx48$11 >> 2] | 0;
 $xor49$11 = $66 ^ $65;
 $67 = HEAP32[$arrayidx2$11 >> 2] | 0;
 $xor51$11 = $xor49$11 ^ $67;
 HEAP32[$arrayidx2$11 >> 2] = $xor51$11;
 $68 = HEAP32[$arrayidx4$12 >> 2] | 0;
 $arrayidx48$12 = $Qtmp + 48 | 0;
 $69 = HEAP32[$arrayidx48$12 >> 2] | 0;
 $xor49$12 = $69 ^ $68;
 $70 = HEAP32[$arrayidx2$12 >> 2] | 0;
 $xor51$12 = $xor49$12 ^ $70;
 HEAP32[$arrayidx2$12 >> 2] = $xor51$12;
 $71 = HEAP32[$arrayidx4$13 >> 2] | 0;
 $arrayidx48$13 = $Qtmp + 52 | 0;
 $72 = HEAP32[$arrayidx48$13 >> 2] | 0;
 $xor49$13 = $72 ^ $71;
 $73 = HEAP32[$arrayidx2$13 >> 2] | 0;
 $xor51$13 = $xor49$13 ^ $73;
 HEAP32[$arrayidx2$13 >> 2] = $xor51$13;
 $74 = HEAP32[$arrayidx4$14 >> 2] | 0;
 $arrayidx48$14 = $Qtmp + 56 | 0;
 $75 = HEAP32[$arrayidx48$14 >> 2] | 0;
 $xor49$14 = $75 ^ $74;
 $76 = HEAP32[$arrayidx2$14 >> 2] | 0;
 $xor51$14 = $xor49$14 ^ $76;
 HEAP32[$arrayidx2$14 >> 2] = $xor51$14;
 $77 = HEAP32[$arrayidx4$15 >> 2] | 0;
 $arrayidx48$15 = $Qtmp + 60 | 0;
 $78 = HEAP32[$arrayidx48$15 >> 2] | 0;
 $xor49$15 = $78 ^ $77;
 $79 = HEAP32[$arrayidx2$15 >> 2] | 0;
 $xor51$15 = $xor49$15 ^ $79;
 HEAP32[$arrayidx2$15 >> 2] = $xor51$15;
 STACKTOP = sp;
 return;
}

function _blake256_final_h($S, $digest) {
 $S = $S | 0;
 $digest = $digest | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr109 = 0, $add$ptr132 = 0, $add$ptr155 = 0, $add$ptr178 = 0, $add$ptr201 = 0, $add$ptr22 = 0, $add$ptr224 = 0, $add$ptr247 = 0, $arrayidx = 0, $arrayidx104 = 0, $arrayidx106 = 0, $arrayidx116 = 0, $arrayidx122 = 0, $arrayidx127 = 0, $arrayidx129 = 0, $arrayidx139 = 0;
 var $arrayidx14 = 0, $arrayidx145 = 0, $arrayidx150 = 0, $arrayidx152 = 0, $arrayidx162 = 0, $arrayidx168 = 0, $arrayidx173 = 0, $arrayidx175 = 0, $arrayidx18 = 0, $arrayidx185 = 0, $arrayidx191 = 0, $arrayidx196 = 0, $arrayidx198 = 0, $arrayidx2 = 0, $arrayidx208 = 0, $arrayidx214 = 0, $arrayidx219 = 0, $arrayidx221 = 0, $arrayidx231 = 0, $arrayidx237 = 0;
 var $arrayidx242 = 0, $arrayidx244 = 0, $arrayidx254 = 0, $arrayidx260 = 0, $arrayidx265 = 0, $arrayidx28 = 0, $arrayidx33 = 0, $arrayidx37 = 0, $arrayidx9 = 0, $arrayidx93 = 0, $arrayidx99 = 0, $buflen = 0, $cmp = 0, $cmp39 = 0, $cmp45 = 0, $cmp49 = 0, $conv = 0, $conv102 = 0, $conv108 = 0, $conv11 = 0;
 var $conv114 = 0, $conv120 = 0, $conv125 = 0, $conv131 = 0, $conv137 = 0, $conv143 = 0, $conv148 = 0, $conv15 = 0, $conv154 = 0, $conv160 = 0, $conv166 = 0, $conv171 = 0, $conv177 = 0, $conv183 = 0, $conv189 = 0, $conv194 = 0, $conv20 = 0, $conv200 = 0, $conv206 = 0, $conv212 = 0;
 var $conv217 = 0, $conv223 = 0, $conv229 = 0, $conv235 = 0, $conv240 = 0, $conv246 = 0, $conv25 = 0, $conv252 = 0, $conv258 = 0, $conv263 = 0, $conv30 = 0, $conv34 = 0, $conv6 = 0, $conv85 = 0, $conv91 = 0, $conv97 = 0, $inc = 0, $msglen = 0, $nullt = 0, $nullt73 = 0;
 var $pa$addr = 0, $pb$addr = 0, $shr = 0, $shr10 = 0, $shr107 = 0, $shr113 = 0, $shr119 = 0, $shr130 = 0, $shr136 = 0, $shr142 = 0, $shr153 = 0, $shr159 = 0, $shr165 = 0, $shr176 = 0, $shr182 = 0, $shr188 = 0, $shr19 = 0, $shr199 = 0, $shr205 = 0, $shr211 = 0;
 var $shr222 = 0, $shr228 = 0, $shr234 = 0, $shr24 = 0, $shr245 = 0, $shr251 = 0, $shr257 = 0, $shr29 = 0, $shr5 = 0, $shr84 = 0, $shr90 = 0, $shr96 = 0, $spec$select = 0, $sub = 0, $sub57 = 0, $sub59 = 0, $sub66 = 0, $sub68 = 0, $sub72 = 0, $sub77 = 0;
 var $sub81 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $pa$addr = sp + 9 | 0;
 $pb$addr = sp + 8 | 0;
 $msglen = sp;
 HEAP8[$pa$addr >> 0] = -127;
 HEAP8[$pb$addr >> 0] = 1;
 $arrayidx = $S + 48 | 0;
 $0 = HEAP32[$arrayidx >> 2] | 0;
 $buflen = $S + 56 | 0;
 $1 = HEAP32[$buflen >> 2] | 0;
 $add = $1 + $0 | 0;
 $arrayidx2 = $S + 52 | 0;
 $2 = HEAP32[$arrayidx2 >> 2] | 0;
 $cmp = $add >>> 0 < $1 >>> 0;
 $inc = $cmp & 1;
 $spec$select = $2 + $inc | 0;
 $shr = $spec$select >>> 24;
 $conv = $shr & 255;
 HEAP8[$msglen >> 0] = $conv;
 $shr5 = $spec$select >>> 16;
 $conv6 = $shr5 & 255;
 $arrayidx9 = $msglen + 1 | 0;
 HEAP8[$arrayidx9 >> 0] = $conv6;
 $shr10 = $spec$select >>> 8;
 $conv11 = $shr10 & 255;
 $arrayidx14 = $msglen + 2 | 0;
 HEAP8[$arrayidx14 >> 0] = $conv11;
 $conv15 = $spec$select & 255;
 $arrayidx18 = $msglen + 3 | 0;
 HEAP8[$arrayidx18 >> 0] = $conv15;
 $shr19 = $add >>> 24;
 $conv20 = $shr19 & 255;
 $add$ptr22 = $msglen + 4 | 0;
 HEAP8[$add$ptr22 >> 0] = $conv20;
 $shr24 = $add >>> 16;
 $conv25 = $shr24 & 255;
 $arrayidx28 = $msglen + 5 | 0;
 HEAP8[$arrayidx28 >> 0] = $conv25;
 $shr29 = $add >>> 8;
 $conv30 = $shr29 & 255;
 $arrayidx33 = $msglen + 6 | 0;
 HEAP8[$arrayidx33 >> 0] = $conv30;
 $conv34 = $add & 255;
 $arrayidx37 = $msglen + 7 | 0;
 HEAP8[$arrayidx37 >> 0] = $conv34;
 $cmp39 = ($1 | 0) == 440;
 if ($cmp39) {
  $sub = $0 + -8 | 0;
  HEAP32[$arrayidx >> 2] = $sub;
  _blake256_update($S, $pa$addr, 8, 0);
  $$pre = HEAP32[$arrayidx >> 2] | 0;
  $9 = $$pre;
 } else {
  $cmp45 = ($1 | 0) < 440;
  if ($cmp45) {
   $cmp49 = ($1 | 0) == 0;
   if ($cmp49) {
    $nullt = $S + 60 | 0;
    HEAP32[$nullt >> 2] = 1;
   }
   $sub57 = $add + -440 | 0;
   HEAP32[$arrayidx >> 2] = $sub57;
   $sub59 = 440 - $1 | 0;
   $3 = ($sub59 | 0) < 0;
   $4 = $3 << 31 >> 31;
   _blake256_update($S, 39312, $sub59, $4);
  } else {
   $sub66 = $add + -512 | 0;
   HEAP32[$arrayidx >> 2] = $sub66;
   $sub68 = 512 - $1 | 0;
   $5 = ($sub68 | 0) < 0;
   $6 = $5 << 31 >> 31;
   _blake256_update($S, 39312, $sub68, $6);
   $7 = HEAP32[$arrayidx >> 2] | 0;
   $sub72 = $7 + -440 | 0;
   HEAP32[$arrayidx >> 2] = $sub72;
   _blake256_update($S, 39313, 440, 0);
   $nullt73 = $S + 60 | 0;
   HEAP32[$nullt73 >> 2] = 1;
  }
  _blake256_update($S, $pb$addr, 8, 0);
  $8 = HEAP32[$arrayidx >> 2] | 0;
  $sub77 = $8 + -8 | 0;
  HEAP32[$arrayidx >> 2] = $sub77;
  $9 = $sub77;
 }
 $sub81 = $9 + -64 | 0;
 HEAP32[$arrayidx >> 2] = $sub81;
 _blake256_update($S, $msglen, 64, 0);
 $10 = HEAP32[$S >> 2] | 0;
 $shr84 = $10 >>> 24;
 $conv85 = $shr84 & 255;
 HEAP8[$digest >> 0] = $conv85;
 $11 = HEAP32[$S >> 2] | 0;
 $shr90 = $11 >>> 16;
 $conv91 = $shr90 & 255;
 $arrayidx93 = $digest + 1 | 0;
 HEAP8[$arrayidx93 >> 0] = $conv91;
 $12 = HEAP32[$S >> 2] | 0;
 $shr96 = $12 >>> 8;
 $conv97 = $shr96 & 255;
 $arrayidx99 = $digest + 2 | 0;
 HEAP8[$arrayidx99 >> 0] = $conv97;
 $13 = HEAP32[$S >> 2] | 0;
 $conv102 = $13 & 255;
 $arrayidx104 = $digest + 3 | 0;
 HEAP8[$arrayidx104 >> 0] = $conv102;
 $arrayidx106 = $S + 4 | 0;
 $14 = HEAP32[$arrayidx106 >> 2] | 0;
 $shr107 = $14 >>> 24;
 $conv108 = $shr107 & 255;
 $add$ptr109 = $digest + 4 | 0;
 HEAP8[$add$ptr109 >> 0] = $conv108;
 $15 = HEAP32[$arrayidx106 >> 2] | 0;
 $shr113 = $15 >>> 16;
 $conv114 = $shr113 & 255;
 $arrayidx116 = $digest + 5 | 0;
 HEAP8[$arrayidx116 >> 0] = $conv114;
 $16 = HEAP32[$arrayidx106 >> 2] | 0;
 $shr119 = $16 >>> 8;
 $conv120 = $shr119 & 255;
 $arrayidx122 = $digest + 6 | 0;
 HEAP8[$arrayidx122 >> 0] = $conv120;
 $17 = HEAP32[$arrayidx106 >> 2] | 0;
 $conv125 = $17 & 255;
 $arrayidx127 = $digest + 7 | 0;
 HEAP8[$arrayidx127 >> 0] = $conv125;
 $arrayidx129 = $S + 8 | 0;
 $18 = HEAP32[$arrayidx129 >> 2] | 0;
 $shr130 = $18 >>> 24;
 $conv131 = $shr130 & 255;
 $add$ptr132 = $digest + 8 | 0;
 HEAP8[$add$ptr132 >> 0] = $conv131;
 $19 = HEAP32[$arrayidx129 >> 2] | 0;
 $shr136 = $19 >>> 16;
 $conv137 = $shr136 & 255;
 $arrayidx139 = $digest + 9 | 0;
 HEAP8[$arrayidx139 >> 0] = $conv137;
 $20 = HEAP32[$arrayidx129 >> 2] | 0;
 $shr142 = $20 >>> 8;
 $conv143 = $shr142 & 255;
 $arrayidx145 = $digest + 10 | 0;
 HEAP8[$arrayidx145 >> 0] = $conv143;
 $21 = HEAP32[$arrayidx129 >> 2] | 0;
 $conv148 = $21 & 255;
 $arrayidx150 = $digest + 11 | 0;
 HEAP8[$arrayidx150 >> 0] = $conv148;
 $arrayidx152 = $S + 12 | 0;
 $22 = HEAP32[$arrayidx152 >> 2] | 0;
 $shr153 = $22 >>> 24;
 $conv154 = $shr153 & 255;
 $add$ptr155 = $digest + 12 | 0;
 HEAP8[$add$ptr155 >> 0] = $conv154;
 $23 = HEAP32[$arrayidx152 >> 2] | 0;
 $shr159 = $23 >>> 16;
 $conv160 = $shr159 & 255;
 $arrayidx162 = $digest + 13 | 0;
 HEAP8[$arrayidx162 >> 0] = $conv160;
 $24 = HEAP32[$arrayidx152 >> 2] | 0;
 $shr165 = $24 >>> 8;
 $conv166 = $shr165 & 255;
 $arrayidx168 = $digest + 14 | 0;
 HEAP8[$arrayidx168 >> 0] = $conv166;
 $25 = HEAP32[$arrayidx152 >> 2] | 0;
 $conv171 = $25 & 255;
 $arrayidx173 = $digest + 15 | 0;
 HEAP8[$arrayidx173 >> 0] = $conv171;
 $arrayidx175 = $S + 16 | 0;
 $26 = HEAP32[$arrayidx175 >> 2] | 0;
 $shr176 = $26 >>> 24;
 $conv177 = $shr176 & 255;
 $add$ptr178 = $digest + 16 | 0;
 HEAP8[$add$ptr178 >> 0] = $conv177;
 $27 = HEAP32[$arrayidx175 >> 2] | 0;
 $shr182 = $27 >>> 16;
 $conv183 = $shr182 & 255;
 $arrayidx185 = $digest + 17 | 0;
 HEAP8[$arrayidx185 >> 0] = $conv183;
 $28 = HEAP32[$arrayidx175 >> 2] | 0;
 $shr188 = $28 >>> 8;
 $conv189 = $shr188 & 255;
 $arrayidx191 = $digest + 18 | 0;
 HEAP8[$arrayidx191 >> 0] = $conv189;
 $29 = HEAP32[$arrayidx175 >> 2] | 0;
 $conv194 = $29 & 255;
 $arrayidx196 = $digest + 19 | 0;
 HEAP8[$arrayidx196 >> 0] = $conv194;
 $arrayidx198 = $S + 20 | 0;
 $30 = HEAP32[$arrayidx198 >> 2] | 0;
 $shr199 = $30 >>> 24;
 $conv200 = $shr199 & 255;
 $add$ptr201 = $digest + 20 | 0;
 HEAP8[$add$ptr201 >> 0] = $conv200;
 $31 = HEAP32[$arrayidx198 >> 2] | 0;
 $shr205 = $31 >>> 16;
 $conv206 = $shr205 & 255;
 $arrayidx208 = $digest + 21 | 0;
 HEAP8[$arrayidx208 >> 0] = $conv206;
 $32 = HEAP32[$arrayidx198 >> 2] | 0;
 $shr211 = $32 >>> 8;
 $conv212 = $shr211 & 255;
 $arrayidx214 = $digest + 22 | 0;
 HEAP8[$arrayidx214 >> 0] = $conv212;
 $33 = HEAP32[$arrayidx198 >> 2] | 0;
 $conv217 = $33 & 255;
 $arrayidx219 = $digest + 23 | 0;
 HEAP8[$arrayidx219 >> 0] = $conv217;
 $arrayidx221 = $S + 24 | 0;
 $34 = HEAP32[$arrayidx221 >> 2] | 0;
 $shr222 = $34 >>> 24;
 $conv223 = $shr222 & 255;
 $add$ptr224 = $digest + 24 | 0;
 HEAP8[$add$ptr224 >> 0] = $conv223;
 $35 = HEAP32[$arrayidx221 >> 2] | 0;
 $shr228 = $35 >>> 16;
 $conv229 = $shr228 & 255;
 $arrayidx231 = $digest + 25 | 0;
 HEAP8[$arrayidx231 >> 0] = $conv229;
 $36 = HEAP32[$arrayidx221 >> 2] | 0;
 $shr234 = $36 >>> 8;
 $conv235 = $shr234 & 255;
 $arrayidx237 = $digest + 26 | 0;
 HEAP8[$arrayidx237 >> 0] = $conv235;
 $37 = HEAP32[$arrayidx221 >> 2] | 0;
 $conv240 = $37 & 255;
 $arrayidx242 = $digest + 27 | 0;
 HEAP8[$arrayidx242 >> 0] = $conv240;
 $arrayidx244 = $S + 28 | 0;
 $38 = HEAP32[$arrayidx244 >> 2] | 0;
 $shr245 = $38 >>> 24;
 $conv246 = $shr245 & 255;
 $add$ptr247 = $digest + 28 | 0;
 HEAP8[$add$ptr247 >> 0] = $conv246;
 $39 = HEAP32[$arrayidx244 >> 2] | 0;
 $shr251 = $39 >>> 16;
 $conv252 = $shr251 & 255;
 $arrayidx254 = $digest + 29 | 0;
 HEAP8[$arrayidx254 >> 0] = $conv252;
 $40 = HEAP32[$arrayidx244 >> 2] | 0;
 $shr257 = $40 >>> 8;
 $conv258 = $shr257 & 255;
 $arrayidx260 = $digest + 30 | 0;
 HEAP8[$arrayidx260 >> 0] = $conv258;
 $41 = HEAP32[$arrayidx244 >> 2] | 0;
 $conv263 = $41 & 255;
 $arrayidx265 = $digest + 31 | 0;
 HEAP8[$arrayidx265 >> 0] = $conv263;
 STACKTOP = sp;
 return;
}

function __ZN39EmscriptenBindingInitializer_signaturesC2Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43320, 38);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43333, 39);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43349, 40);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43365, 41);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43381, 42);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43402, 43);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43423, 44);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43444, 45);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43465, 46);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43486, 47);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43507, 48);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43533, 49);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43559, 50);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43585, 51);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43608, 52);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43631, 53);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43654, 54);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43682, 55);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43710, 56);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43738, 57);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_iEJEEEvPKcPFT_DpT0_EDpT1_(43745, 58);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_iEJEEEvPKcPFT_DpT0_EDpT1_(43772, 59);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_iEJEEEvPKcPFT_DpT0_EDpT1_(43799, 60);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43826, 61);
 __ZN10emscripten8functionIjJjEJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJNS1_6vectorIS7_NS5_IS7_EEEEEJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionINSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEJSA_EJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJNS1_6vectorIS7_NS5_IS7_EEEES7_S7_EJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionINSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEJS8_S8_SA_S8_iEJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionI18PreparedSignaturesJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_NS2_6vectorIS8_NS6_IS8_EEEEiEJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionI18PreparedSignaturesJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_NS2_6vectorIS8_NS6_IS8_EEEEiS8_EJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionINSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEJS8_iS8_SA_EJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionIbJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEESA_EJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(43975, 62);
 __ZN10emscripten8functionI4KeysJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionI4KeysJEJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionI4KeysJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEmEJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionIbJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(44110, 63);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_S7_EJEEEvPKcPFT_DpT0_EDpT1_(44131, 64);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_S7_mEJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_mEJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_mS7_EJEEEvPKcPFT_DpT0_EDpT1_(44200, 65);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_mS7_EJEEEvPKcPFT_DpT0_EDpT1_(44216, 66);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_S7_EJEEEvPKcPFT_DpT0_EDpT1_(44232, 67);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_S7_EJEEEvPKcPFT_DpT0_EDpT1_(44254, 68);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_mS7_EJEEEvPKcPFT_DpT0_EDpT1_(44276, 69);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_S7_S7_EJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionIbJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_EJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_S7_EJEEEvPKcPFT_DpT0_EDpT1_(44327, 70);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_S7_EJEEEvPKcPFT_DpT0_EDpT1_(44344, 71);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(44358, 72);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(44378, 73);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(44389, 74);
 __ZN10emscripten8functionIjJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmmEJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionINSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEJRKS8_RKSA_EJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJRKNS1_6vectorIS7_NS5_IS7_EEEEEJEEEvPKcPFT_DpT0_EDpT1_(44454, 75);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJRKNS1_6vectorIS7_NS5_IS7_EEEEEJEEEvPKcPFT_DpT0_EDpT1_(44480, 76);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJRKS7_S9_EJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJRKS7_S9_mRKNS1_6vectorIS7_NS5_IS7_EEEEEJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionINSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEJS8_mSA_iS8_SA_EJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten15register_vectorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEENS_6class_INS1_6vectorIT_NS5_ISA_EEEENS_8internal11NoBaseClassEEEPKc();
 __ZN10emscripten12value_objectI4KeysEC2EPKc();
 __ZN10emscripten12value_objectI4KeysE5fieldIS1_NSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERS2_PKcMT_T0_(44587, 12);
 __ZN10emscripten12value_objectI4KeysE5fieldIS1_NSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERS2_PKcMT_T0_(44597, 0);
 __ZN10emscripten12value_objectI4KeysED2Ev();
 __ZN10emscripten12value_objectI18PreparedSignaturesEC2EPKc();
 __ZN10emscripten12value_objectI18PreparedSignaturesE5fieldIS1_NSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEERS2_PKcMT_T0_();
 __ZN10emscripten12value_objectI18PreparedSignaturesE5fieldIS1_NSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERS2_PKcMT_T0_();
 __ZN10emscripten12value_objectI18PreparedSignaturesED2Ev();
 return;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (($n_sroa_1_4_extract_trunc | 0) == 0) {
  $4 = ($rem | 0) != 0;
  if (($d_sroa_1_4_extract_trunc | 0) == 0) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 & -1;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do {
  if (($d_sroa_0_0_extract_trunc | 0) == 0) {
   if ($17) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
     HEAP32[$rem + 4 >> 2] = 0;
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   if (($n_sroa_0_0_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = 0;
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
   if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = 0 | $a$0 & -1;
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
    }
    $_0$1 = 0;
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
   $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0;
    $58 = 31 - $51 | 0;
    $sr_1_ph = $57;
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
    break;
   }
   if (($rem | 0) == 0) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = 0 | $a$0 & -1;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   if (!$17) {
    $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
    $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0;
     $126 = 31 - $119 | 0;
     $130 = $119 - 31 >> 31;
     $sr_1_ph = $125;
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
     $q_sroa_0_1_ph = 0;
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
     break;
    }
    if (($rem | 0) == 0) {
     $_0$1 = 0;
     $_0$0 = 0;
     return (setTempRet0($_0$1 | 0), $_0$0) | 0;
    }
    HEAP32[$rem >> 2] = 0 | $a$0 & -1;
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
   if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
    $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
    $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    $89 = 64 - $88 | 0;
    $91 = 32 - $88 | 0;
    $92 = $91 >> 31;
    $95 = $88 - 32 | 0;
    $105 = $95 >> 31;
    $sr_1_ph = $88;
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
    break;
   }
   if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
    HEAP32[$rem + 4 >> 2] = 0;
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$0 = 0 | $a$0 & -1;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
    $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
  }
 } while (0);
 if (($sr_1_ph | 0) == 0) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = getTempRet0() | 0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  while (1) {
   $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $149 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = getTempRet0() | 0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $152 = $151$0 & 1;
   $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_0_0_extract_trunc = $154$0;
   $r_sroa_1_4_extract_trunc = getTempRet0() | 0;
   $155 = $sr_1202 - 1 | 0;
   if (($155 | 0) == 0) {
    break;
   } else {
    $q_sroa_1_1198 = $147;
    $q_sroa_0_1199 = $149;
    $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
    $sr_1202 = $155;
    $carry_0203 = $152;
   }
  }
  $q_sroa_1_1_lcssa = $147;
  $q_sroa_0_1_lcssa = $149;
  $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
  $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $152;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
 if (($rem | 0) != 0) {
  HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
 }
 $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (setTempRet0($_0$1 | 0), $_0$0) | 0;
}

function _pop_arg($arg, $type, $ap) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0;
 var $arglist_next6 = 0, $arglist_next9 = 0, $cmp = 0, $conv16 = 0, $conv22$mask = 0, $conv28 = 0, $conv34$mask = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0;
 var $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = $type >>> 0 > 20;
 L1 : do {
  if (!$cmp) {
   do {
    switch ($type | 0) {
    case 9:
     {
      $arglist_current = HEAP32[$ap >> 2] | 0;
      $0 = $arglist_current;
      $1 = 0 + 4 | 0;
      $expanded25 = $1;
      $expanded = $expanded25 - 1 | 0;
      $2 = $0 + $expanded | 0;
      $3 = 0 + 4 | 0;
      $expanded29 = $3;
      $expanded28 = $expanded29 - 1 | 0;
      $expanded27 = $expanded28 ^ -1;
      $4 = $2 & $expanded27;
      $5 = $4;
      $6 = HEAP32[$5 >> 2] | 0;
      $arglist_next = $5 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next;
      HEAP32[$arg >> 2] = $6;
      break L1;
      break;
     }
    case 10:
     {
      $arglist_current2 = HEAP32[$ap >> 2] | 0;
      $7 = $arglist_current2;
      $8 = 0 + 4 | 0;
      $expanded32 = $8;
      $expanded31 = $expanded32 - 1 | 0;
      $9 = $7 + $expanded31 | 0;
      $10 = 0 + 4 | 0;
      $expanded36 = $10;
      $expanded35 = $expanded36 - 1 | 0;
      $expanded34 = $expanded35 ^ -1;
      $11 = $9 & $expanded34;
      $12 = $11;
      $13 = HEAP32[$12 >> 2] | 0;
      $arglist_next3 = $12 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next3;
      $14 = ($13 | 0) < 0;
      $15 = $14 << 31 >> 31;
      $16 = $arg;
      $17 = $16;
      HEAP32[$17 >> 2] = $13;
      $18 = $16 + 4 | 0;
      $19 = $18;
      HEAP32[$19 >> 2] = $15;
      break L1;
      break;
     }
    case 11:
     {
      $arglist_current5 = HEAP32[$ap >> 2] | 0;
      $20 = $arglist_current5;
      $21 = 0 + 4 | 0;
      $expanded39 = $21;
      $expanded38 = $expanded39 - 1 | 0;
      $22 = $20 + $expanded38 | 0;
      $23 = 0 + 4 | 0;
      $expanded43 = $23;
      $expanded42 = $expanded43 - 1 | 0;
      $expanded41 = $expanded42 ^ -1;
      $24 = $22 & $expanded41;
      $25 = $24;
      $26 = HEAP32[$25 >> 2] | 0;
      $arglist_next6 = $25 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next6;
      $27 = $arg;
      $28 = $27;
      HEAP32[$28 >> 2] = $26;
      $29 = $27 + 4 | 0;
      $30 = $29;
      HEAP32[$30 >> 2] = 0;
      break L1;
      break;
     }
    case 12:
     {
      $arglist_current8 = HEAP32[$ap >> 2] | 0;
      $31 = $arglist_current8;
      $32 = 0 + 8 | 0;
      $expanded46 = $32;
      $expanded45 = $expanded46 - 1 | 0;
      $33 = $31 + $expanded45 | 0;
      $34 = 0 + 8 | 0;
      $expanded50 = $34;
      $expanded49 = $expanded50 - 1 | 0;
      $expanded48 = $expanded49 ^ -1;
      $35 = $33 & $expanded48;
      $36 = $35;
      $37 = $36;
      $38 = $37;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = $37 + 4 | 0;
      $41 = $40;
      $42 = HEAP32[$41 >> 2] | 0;
      $arglist_next9 = $36 + 8 | 0;
      HEAP32[$ap >> 2] = $arglist_next9;
      $43 = $arg;
      $44 = $43;
      HEAP32[$44 >> 2] = $39;
      $45 = $43 + 4 | 0;
      $46 = $45;
      HEAP32[$46 >> 2] = $42;
      break L1;
      break;
     }
    case 13:
     {
      $arglist_current11 = HEAP32[$ap >> 2] | 0;
      $47 = $arglist_current11;
      $48 = 0 + 4 | 0;
      $expanded53 = $48;
      $expanded52 = $expanded53 - 1 | 0;
      $49 = $47 + $expanded52 | 0;
      $50 = 0 + 4 | 0;
      $expanded57 = $50;
      $expanded56 = $expanded57 - 1 | 0;
      $expanded55 = $expanded56 ^ -1;
      $51 = $49 & $expanded55;
      $52 = $51;
      $53 = HEAP32[$52 >> 2] | 0;
      $arglist_next12 = $52 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next12;
      $conv16 = $53 & 65535;
      $54 = $conv16 << 16 >> 16;
      $55 = ($54 | 0) < 0;
      $56 = $55 << 31 >> 31;
      $57 = $arg;
      $58 = $57;
      HEAP32[$58 >> 2] = $54;
      $59 = $57 + 4 | 0;
      $60 = $59;
      HEAP32[$60 >> 2] = $56;
      break L1;
      break;
     }
    case 14:
     {
      $arglist_current14 = HEAP32[$ap >> 2] | 0;
      $61 = $arglist_current14;
      $62 = 0 + 4 | 0;
      $expanded60 = $62;
      $expanded59 = $expanded60 - 1 | 0;
      $63 = $61 + $expanded59 | 0;
      $64 = 0 + 4 | 0;
      $expanded64 = $64;
      $expanded63 = $expanded64 - 1 | 0;
      $expanded62 = $expanded63 ^ -1;
      $65 = $63 & $expanded62;
      $66 = $65;
      $67 = HEAP32[$66 >> 2] | 0;
      $arglist_next15 = $66 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next15;
      $conv22$mask = $67 & 65535;
      $68 = $arg;
      $69 = $68;
      HEAP32[$69 >> 2] = $conv22$mask;
      $70 = $68 + 4 | 0;
      $71 = $70;
      HEAP32[$71 >> 2] = 0;
      break L1;
      break;
     }
    case 15:
     {
      $arglist_current17 = HEAP32[$ap >> 2] | 0;
      $72 = $arglist_current17;
      $73 = 0 + 4 | 0;
      $expanded67 = $73;
      $expanded66 = $expanded67 - 1 | 0;
      $74 = $72 + $expanded66 | 0;
      $75 = 0 + 4 | 0;
      $expanded71 = $75;
      $expanded70 = $expanded71 - 1 | 0;
      $expanded69 = $expanded70 ^ -1;
      $76 = $74 & $expanded69;
      $77 = $76;
      $78 = HEAP32[$77 >> 2] | 0;
      $arglist_next18 = $77 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next18;
      $conv28 = $78 & 255;
      $79 = $conv28 << 24 >> 24;
      $80 = ($79 | 0) < 0;
      $81 = $80 << 31 >> 31;
      $82 = $arg;
      $83 = $82;
      HEAP32[$83 >> 2] = $79;
      $84 = $82 + 4 | 0;
      $85 = $84;
      HEAP32[$85 >> 2] = $81;
      break L1;
      break;
     }
    case 16:
     {
      $arglist_current20 = HEAP32[$ap >> 2] | 0;
      $86 = $arglist_current20;
      $87 = 0 + 4 | 0;
      $expanded74 = $87;
      $expanded73 = $expanded74 - 1 | 0;
      $88 = $86 + $expanded73 | 0;
      $89 = 0 + 4 | 0;
      $expanded78 = $89;
      $expanded77 = $expanded78 - 1 | 0;
      $expanded76 = $expanded77 ^ -1;
      $90 = $88 & $expanded76;
      $91 = $90;
      $92 = HEAP32[$91 >> 2] | 0;
      $arglist_next21 = $91 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next21;
      $conv34$mask = $92 & 255;
      $93 = $arg;
      $94 = $93;
      HEAP32[$94 >> 2] = $conv34$mask;
      $95 = $93 + 4 | 0;
      $96 = $95;
      HEAP32[$96 >> 2] = 0;
      break L1;
      break;
     }
    case 17:
     {
      $arglist_current23 = HEAP32[$ap >> 2] | 0;
      $97 = $arglist_current23;
      $98 = 0 + 8 | 0;
      $expanded81 = $98;
      $expanded80 = $expanded81 - 1 | 0;
      $99 = $97 + $expanded80 | 0;
      $100 = 0 + 8 | 0;
      $expanded85 = $100;
      $expanded84 = $expanded85 - 1 | 0;
      $expanded83 = $expanded84 ^ -1;
      $101 = $99 & $expanded83;
      $102 = $101;
      $103 = +HEAPF64[$102 >> 3];
      $arglist_next24 = $102 + 8 | 0;
      HEAP32[$ap >> 2] = $arglist_next24;
      HEAPF64[$arg >> 3] = $103;
      break L1;
      break;
     }
    case 18:
     {
      _pop_arg_long_double($arg, $ap);
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}

function _fe_tobytes($s, $h) {
 $s = $s | 0;
 $h = $h | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add10 = 0, $add12 = 0, $add14 = 0, $add16 = 0, $add18 = 0, $add20 = 0, $add22 = 0, $add24 = 0, $add26 = 0, $add28 = 0, $add31 = 0, $add33 = 0, $add35 = 0, $add39 = 0, $add43 = 0, $add47 = 0, $add51 = 0, $add55 = 0, $add59 = 0, $add63 = 0;
 var $arrayidx1 = 0, $arrayidx102 = 0, $arrayidx105 = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx116 = 0, $arrayidx119 = 0, $arrayidx122 = 0, $arrayidx125 = 0, $arrayidx128 = 0, $arrayidx131 = 0, $arrayidx136 = 0, $arrayidx139 = 0, $arrayidx142 = 0, $arrayidx147 = 0, $arrayidx150 = 0, $arrayidx153 = 0, $arrayidx158 = 0, $arrayidx161 = 0, $arrayidx164 = 0;
 var $arrayidx169 = 0, $arrayidx172 = 0, $arrayidx175 = 0, $arrayidx178 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $arrayidx5 = 0, $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx73 = 0, $arrayidx76 = 0, $arrayidx8 = 0, $arrayidx80 = 0, $arrayidx83 = 0, $arrayidx86 = 0, $arrayidx9 = 0, $arrayidx91 = 0, $arrayidx94 = 0, $arrayidx97 = 0;
 var $conv = 0, $conv101 = 0, $conv104 = 0, $conv107 = 0, $conv112 = 0, $conv115 = 0, $conv118 = 0, $conv121 = 0, $conv124 = 0, $conv127 = 0, $conv130 = 0, $conv135 = 0, $conv138 = 0, $conv141 = 0, $conv146 = 0, $conv149 = 0, $conv152 = 0, $conv157 = 0, $conv160 = 0, $conv163 = 0;
 var $conv168 = 0, $conv171 = 0, $conv174 = 0, $conv177 = 0, $conv72 = 0, $conv75 = 0, $conv79 = 0, $conv82 = 0, $conv85 = 0, $conv90 = 0, $conv93 = 0, $conv96 = 0, $mul = 0, $mul30 = 0, $or = 0, $or100 = 0, $or111 = 0, $or134 = 0, $or145 = 0, $or156 = 0;
 var $or167 = 0, $or89 = 0, $shl110 = 0, $shl133 = 0, $shl144 = 0, $shl155 = 0, $shl166 = 0, $shl78 = 0, $shl88 = 0, $shl99 = 0, $shr = 0, $shr11 = 0, $shr13 = 0, $shr15 = 0, $shr17 = 0, $shr19 = 0, $shr21 = 0, $shr23 = 0, $shr25 = 0, $shr27 = 0;
 var $shr29 = 0, $shr32 = 0, $shr34 = 0, $shr38 = 0, $shr42 = 0, $shr46 = 0, $shr50 = 0, $shr54 = 0, $shr58 = 0, $shr62 = 0, $sub = 0, $sub37 = 0, $sub41 = 0, $sub45 = 0, $sub49 = 0, $sub53 = 0, $sub57 = 0, $sub61 = 0, $sub65 = 0, $sub68 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$h >> 2] | 0;
 $arrayidx1 = $h + 4 | 0;
 $1 = HEAP32[$arrayidx1 >> 2] | 0;
 $arrayidx2 = $h + 8 | 0;
 $2 = HEAP32[$arrayidx2 >> 2] | 0;
 $arrayidx3 = $h + 12 | 0;
 $3 = HEAP32[$arrayidx3 >> 2] | 0;
 $arrayidx4 = $h + 16 | 0;
 $4 = HEAP32[$arrayidx4 >> 2] | 0;
 $arrayidx5 = $h + 20 | 0;
 $5 = HEAP32[$arrayidx5 >> 2] | 0;
 $arrayidx6 = $h + 24 | 0;
 $6 = HEAP32[$arrayidx6 >> 2] | 0;
 $arrayidx7 = $h + 28 | 0;
 $7 = HEAP32[$arrayidx7 >> 2] | 0;
 $arrayidx8 = $h + 32 | 0;
 $8 = HEAP32[$arrayidx8 >> 2] | 0;
 $arrayidx9 = $h + 36 | 0;
 $9 = HEAP32[$arrayidx9 >> 2] | 0;
 $mul = $9 * 19 | 0;
 $add = $mul + 16777216 | 0;
 $shr = $add >> 25;
 $add10 = $shr + $0 | 0;
 $shr11 = $add10 >> 26;
 $add12 = $shr11 + $1 | 0;
 $shr13 = $add12 >> 25;
 $add14 = $shr13 + $2 | 0;
 $shr15 = $add14 >> 26;
 $add16 = $shr15 + $3 | 0;
 $shr17 = $add16 >> 25;
 $add18 = $shr17 + $4 | 0;
 $shr19 = $add18 >> 26;
 $add20 = $shr19 + $5 | 0;
 $shr21 = $add20 >> 25;
 $add22 = $shr21 + $6 | 0;
 $shr23 = $add22 >> 26;
 $add24 = $shr23 + $7 | 0;
 $shr25 = $add24 >> 25;
 $add26 = $shr25 + $8 | 0;
 $shr27 = $add26 >> 26;
 $add28 = $shr27 + $9 | 0;
 $shr29 = $add28 >> 25;
 $mul30 = $shr29 * 19 | 0;
 $add31 = $mul30 + $0 | 0;
 $shr32 = $add31 >> 26;
 $add33 = $shr32 + $1 | 0;
 $shr34 = $add33 >> 25;
 $add35 = $shr34 + $2 | 0;
 $sub37 = $add33 & 33554431;
 $shr38 = $add35 >> 26;
 $add39 = $shr38 + $3 | 0;
 $sub41 = $add35 & 67108863;
 $shr42 = $add39 >> 25;
 $add43 = $shr42 + $4 | 0;
 $sub45 = $add39 & 33554431;
 $shr46 = $add43 >> 26;
 $add47 = $shr46 + $5 | 0;
 $shr50 = $add47 >> 25;
 $add51 = $shr50 + $6 | 0;
 $shr54 = $add51 >> 26;
 $add55 = $shr54 + $7 | 0;
 $sub57 = $add51 & 67108863;
 $shr58 = $add55 >> 25;
 $add59 = $shr58 + $8 | 0;
 $sub61 = $add55 & 33554431;
 $shr62 = $add59 >> 26;
 $add63 = $shr62 + $9 | 0;
 $sub65 = $add59 & 67108863;
 $sub68 = $add63 & 33554431;
 $conv = $add31 & 255;
 HEAP8[$s >> 0] = $conv;
 $10 = $add31 >>> 8;
 $conv72 = $10 & 255;
 $arrayidx73 = $s + 1 | 0;
 HEAP8[$arrayidx73 >> 0] = $conv72;
 $11 = $add31 >>> 16;
 $conv75 = $11 & 255;
 $arrayidx76 = $s + 2 | 0;
 HEAP8[$arrayidx76 >> 0] = $conv75;
 $sub = $add31 >>> 24;
 $12 = $sub & 3;
 $shl78 = $sub37 << 2;
 $or = $shl78 | $12;
 $conv79 = $or & 255;
 $arrayidx80 = $s + 3 | 0;
 HEAP8[$arrayidx80 >> 0] = $conv79;
 $13 = $add33 >>> 6;
 $conv82 = $13 & 255;
 $arrayidx83 = $s + 4 | 0;
 HEAP8[$arrayidx83 >> 0] = $conv82;
 $14 = $add33 >>> 14;
 $conv85 = $14 & 255;
 $arrayidx86 = $s + 5 | 0;
 HEAP8[$arrayidx86 >> 0] = $conv85;
 $15 = $sub37 >>> 22;
 $shl88 = $sub41 << 3;
 $or89 = $shl88 | $15;
 $conv90 = $or89 & 255;
 $arrayidx91 = $s + 6 | 0;
 HEAP8[$arrayidx91 >> 0] = $conv90;
 $16 = $add35 >>> 5;
 $conv93 = $16 & 255;
 $arrayidx94 = $s + 7 | 0;
 HEAP8[$arrayidx94 >> 0] = $conv93;
 $17 = $add35 >>> 13;
 $conv96 = $17 & 255;
 $arrayidx97 = $s + 8 | 0;
 HEAP8[$arrayidx97 >> 0] = $conv96;
 $18 = $sub41 >>> 21;
 $shl99 = $sub45 << 5;
 $or100 = $shl99 | $18;
 $conv101 = $or100 & 255;
 $arrayidx102 = $s + 9 | 0;
 HEAP8[$arrayidx102 >> 0] = $conv101;
 $19 = $add39 >>> 3;
 $conv104 = $19 & 255;
 $arrayidx105 = $s + 10 | 0;
 HEAP8[$arrayidx105 >> 0] = $conv104;
 $20 = $add39 >>> 11;
 $conv107 = $20 & 255;
 $arrayidx108 = $s + 11 | 0;
 HEAP8[$arrayidx108 >> 0] = $conv107;
 $21 = $sub45 >>> 19;
 $shl110 = $add43 << 6;
 $or111 = $shl110 | $21;
 $conv112 = $or111 & 255;
 $arrayidx113 = $s + 12 | 0;
 HEAP8[$arrayidx113 >> 0] = $conv112;
 $22 = $add43 >>> 2;
 $conv115 = $22 & 255;
 $arrayidx116 = $s + 13 | 0;
 HEAP8[$arrayidx116 >> 0] = $conv115;
 $23 = $add43 >>> 10;
 $conv118 = $23 & 255;
 $arrayidx119 = $s + 14 | 0;
 HEAP8[$arrayidx119 >> 0] = $conv118;
 $sub49 = $add43 >>> 18;
 $conv121 = $sub49 & 255;
 $arrayidx122 = $s + 15 | 0;
 HEAP8[$arrayidx122 >> 0] = $conv121;
 $conv124 = $add47 & 255;
 $arrayidx125 = $s + 16 | 0;
 HEAP8[$arrayidx125 >> 0] = $conv124;
 $24 = $add47 >>> 8;
 $conv127 = $24 & 255;
 $arrayidx128 = $s + 17 | 0;
 HEAP8[$arrayidx128 >> 0] = $conv127;
 $25 = $add47 >>> 16;
 $conv130 = $25 & 255;
 $arrayidx131 = $s + 18 | 0;
 HEAP8[$arrayidx131 >> 0] = $conv130;
 $sub53 = $add47 >>> 24;
 $26 = $sub53 & 1;
 $shl133 = $sub57 << 1;
 $or134 = $shl133 | $26;
 $conv135 = $or134 & 255;
 $arrayidx136 = $s + 19 | 0;
 HEAP8[$arrayidx136 >> 0] = $conv135;
 $27 = $add51 >>> 7;
 $conv138 = $27 & 255;
 $arrayidx139 = $s + 20 | 0;
 HEAP8[$arrayidx139 >> 0] = $conv138;
 $28 = $add51 >>> 15;
 $conv141 = $28 & 255;
 $arrayidx142 = $s + 21 | 0;
 HEAP8[$arrayidx142 >> 0] = $conv141;
 $29 = $sub57 >>> 23;
 $shl144 = $sub61 << 3;
 $or145 = $shl144 | $29;
 $conv146 = $or145 & 255;
 $arrayidx147 = $s + 22 | 0;
 HEAP8[$arrayidx147 >> 0] = $conv146;
 $30 = $add55 >>> 5;
 $conv149 = $30 & 255;
 $arrayidx150 = $s + 23 | 0;
 HEAP8[$arrayidx150 >> 0] = $conv149;
 $31 = $add55 >>> 13;
 $conv152 = $31 & 255;
 $arrayidx153 = $s + 24 | 0;
 HEAP8[$arrayidx153 >> 0] = $conv152;
 $32 = $sub61 >>> 21;
 $shl155 = $sub65 << 4;
 $or156 = $shl155 | $32;
 $conv157 = $or156 & 255;
 $arrayidx158 = $s + 25 | 0;
 HEAP8[$arrayidx158 >> 0] = $conv157;
 $33 = $add59 >>> 4;
 $conv160 = $33 & 255;
 $arrayidx161 = $s + 26 | 0;
 HEAP8[$arrayidx161 >> 0] = $conv160;
 $34 = $add59 >>> 12;
 $conv163 = $34 & 255;
 $arrayidx164 = $s + 27 | 0;
 HEAP8[$arrayidx164 >> 0] = $conv163;
 $35 = $sub65 >>> 20;
 $shl166 = $sub68 << 6;
 $or167 = $shl166 | $35;
 $conv168 = $or167 & 255;
 $arrayidx169 = $s + 28 | 0;
 HEAP8[$arrayidx169 >> 0] = $conv168;
 $36 = $add63 >>> 2;
 $conv171 = $36 & 255;
 $arrayidx172 = $s + 29 | 0;
 HEAP8[$arrayidx172 >> 0] = $conv171;
 $37 = $add63 >>> 10;
 $conv174 = $37 & 255;
 $arrayidx175 = $s + 30 | 0;
 HEAP8[$arrayidx175 >> 0] = $conv174;
 $38 = $sub68 >>> 18;
 $conv177 = $38 & 255;
 $arrayidx178 = $s + 31 | 0;
 HEAP8[$arrayidx178 >> 0] = $conv177;
 return;
}

function _oaes_key_expand($ctx) {
 $ctx = $ctx | 0;
 var $$pre = 0, $$pre50 = 0, $$pre51 = 0, $$pre52 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_i$049 = 0, $_temp = 0, $add = 0, $add$ptr = 0, $add$ptr45$1 = 0, $add$ptr45$2 = 0, $add$ptr45$3 = 0, $add87$1 = 0;
 var $add87$2 = 0, $add87$3 = 0, $add97$1 = 0, $add97$2 = 0, $add97$3 = 0, $and6$i = 0, $arrayidx51 = 0, $arrayidx88 = 0, $arrayidx88$1 = 0, $arrayidx88$2 = 0, $arrayidx88$3 = 0, $arrayidx90$1 = 0, $arrayidx90$2 = 0, $arrayidx90$3 = 0, $arrayidx98 = 0, $arrayidx98$1 = 0, $arrayidx98$2 = 0, $arrayidx98$3 = 0, $call$i = 0, $cmp = 0;
 var $cmp1 = 0, $cmp18 = 0, $cmp31 = 0, $cmp3148 = 0, $cmp37 = 0, $cmp4$i = 0, $cmp57 = 0, $cmp62 = 0, $cmp7$i = 0, $data = 0, $div = 0, $div49 = 0, $exp_data = 0, $exp_data17 = 0, $exp_data33 = 0, $exp_data82 = 0, $exp_data82$1 = 0, $exp_data82$2 = 0, $exp_data82$3 = 0, $exp_data_len = 0;
 var $exp_data_len14 = 0, $head$i = 0, $inc103 = 0, $key_base = 0, $key_base27 = 0, $key_base36$phi$trans$insert = 0, $key_base48 = 0, $key_base7 = 0, $key_base84$1 = 0, $key_base84$2 = 0, $key_base84$3 = 0, $key_base84$phi$trans$insert = 0, $mul11 = 0, $mul30 = 0, $mul3047 = 0, $mul34 = 0, $mul86 = 0, $mul86$1 = 0, $mul86$2 = 0, $mul86$3 = 0;
 var $num_keys = 0, $num_keys10 = 0, $num_keys29 = 0, $num_keys2946 = 0, $or$cond = 0, $rem = 0, $retval$0 = 0, $sub = 0, $sub50 = 0, $sub85 = 0, $sub85$1 = 0, $sub85$2 = 0, $sub85$3 = 0, $xor42 = 0, $xor9241 = 0, $xor9241$1 = 0, $xor9241$2 = 0, $xor9241$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $_temp = sp;
 $cmp = ($ctx | 0) == (0 | 0);
 if ($cmp) {
  $retval$0 = 2;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $0 = HEAP32[$ctx >> 2] | 0;
 $cmp1 = ($0 | 0) == (0 | 0);
 if ($cmp1) {
  $retval$0 = 7;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $1 = HEAP32[$0 >> 2] | 0;
 $div = $1 >>> 2;
 $key_base = $0 + 20 | 0;
 HEAP32[$key_base >> 2] = $div;
 $2 = HEAP32[$ctx >> 2] | 0;
 $key_base7 = $2 + 20 | 0;
 $3 = HEAP32[$key_base7 >> 2] | 0;
 $add = $3 + 7 | 0;
 $num_keys = $2 + 16 | 0;
 HEAP32[$num_keys >> 2] = $add;
 $4 = HEAP32[$ctx >> 2] | 0;
 $num_keys10 = $4 + 16 | 0;
 $5 = HEAP32[$num_keys10 >> 2] | 0;
 $mul11 = $5 << 4;
 $exp_data_len = $4 + 8 | 0;
 HEAP32[$exp_data_len >> 2] = $mul11;
 $6 = HEAP32[$ctx >> 2] | 0;
 $exp_data_len14 = $6 + 8 | 0;
 $7 = HEAP32[$exp_data_len14 >> 2] | 0;
 $call$i = _malloc($7) | 0;
 $cmp4$i = ($call$i | 0) == (0 | 0);
 if (!$cmp4$i) {
  $head$i = $call$i + -4 | 0;
  $8 = HEAP32[$head$i >> 2] | 0;
  $and6$i = $8 & 3;
  $cmp7$i = ($and6$i | 0) == 0;
  if (!$cmp7$i) {
   _memset($call$i | 0, 0, $7 | 0) | 0;
  }
 }
 $9 = HEAP32[$ctx >> 2] | 0;
 $exp_data = $9 + 12 | 0;
 HEAP32[$exp_data >> 2] = $call$i;
 $10 = HEAP32[$ctx >> 2] | 0;
 $exp_data17 = $10 + 12 | 0;
 $11 = HEAP32[$exp_data17 >> 2] | 0;
 $cmp18 = ($11 | 0) == (0 | 0);
 if ($cmp18) {
  $retval$0 = 8;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $data = $10 + 4 | 0;
 $12 = HEAP32[$data >> 2] | 0;
 $13 = HEAP32[$10 >> 2] | 0;
 _memcpy($11 | 0, $12 | 0, $13 | 0) | 0;
 $14 = HEAP32[$ctx >> 2] | 0;
 $key_base27 = $14 + 20 | 0;
 $15 = HEAP32[$key_base27 >> 2] | 0;
 $num_keys2946 = $14 + 16 | 0;
 $16 = HEAP32[$num_keys2946 >> 2] | 0;
 $mul3047 = $16 << 2;
 $cmp3148 = $15 >>> 0 < $mul3047 >>> 0;
 if (!$cmp3148) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $add$ptr45$1 = $_temp + 1 | 0;
 $add$ptr45$2 = $_temp + 2 | 0;
 $add$ptr45$3 = $_temp + 3 | 0;
 $arrayidx90$1 = $_temp + 1 | 0;
 $arrayidx90$2 = $_temp + 2 | 0;
 $arrayidx90$3 = $_temp + 3 | 0;
 $17 = $14;
 $20 = $15;
 $_i$049 = $15;
 while (1) {
  $exp_data33 = $17 + 12 | 0;
  $18 = HEAP32[$exp_data33 >> 2] | 0;
  $sub = $_i$049 << 2;
  $mul34 = $sub + -4 | 0;
  $add$ptr = $18 + $mul34 | 0;
  $19 = HEAPU8[$add$ptr >> 0] | HEAPU8[$add$ptr + 1 >> 0] << 8 | HEAPU8[$add$ptr + 2 >> 0] << 16 | HEAPU8[$add$ptr + 3 >> 0] << 24;
  HEAP32[$_temp >> 2] = $19;
  $rem = ($_i$049 >>> 0) % ($20 >>> 0) & -1;
  $cmp37 = ($rem | 0) == 0;
  if ($cmp37) {
   _oaes_word_rot_left($_temp);
   _oaes_sub_byte($_temp);
   _oaes_sub_byte($add$ptr45$1);
   _oaes_sub_byte($add$ptr45$2);
   _oaes_sub_byte($add$ptr45$3);
   $21 = HEAP8[$_temp >> 0] | 0;
   $22 = HEAP32[$ctx >> 2] | 0;
   $key_base48 = $22 + 20 | 0;
   $23 = HEAP32[$key_base48 >> 2] | 0;
   $div49 = ($_i$049 >>> 0) / ($23 >>> 0) & -1;
   $sub50 = $div49 + -1 | 0;
   $arrayidx51 = 46430 + $sub50 | 0;
   $24 = HEAP8[$arrayidx51 >> 0] | 0;
   $xor42 = $24 ^ $21;
   HEAP8[$_temp >> 0] = $xor42;
   $26 = $22;
   $28 = $23;
   $30 = $xor42;
  } else {
   $25 = $19 & 255;
   $cmp57 = $20 >>> 0 > 6;
   $cmp62 = ($rem | 0) == 4;
   $or$cond = $cmp57 & $cmp62;
   if ($or$cond) {
    _oaes_sub_byte($_temp);
    _oaes_sub_byte($add$ptr45$1);
    _oaes_sub_byte($add$ptr45$2);
    _oaes_sub_byte($add$ptr45$3);
    $$pre50 = HEAP32[$ctx >> 2] | 0;
    $key_base84$phi$trans$insert = $$pre50 + 20 | 0;
    $$pre51 = HEAP32[$key_base84$phi$trans$insert >> 2] | 0;
    $$pre52 = HEAP8[$_temp >> 0] | 0;
    $26 = $$pre50;
    $28 = $$pre51;
    $30 = $$pre52;
   } else {
    $26 = $17;
    $28 = $20;
    $30 = $25;
   }
  }
  $exp_data82 = $26 + 12 | 0;
  $27 = HEAP32[$exp_data82 >> 2] | 0;
  $sub85 = $_i$049 - $28 | 0;
  $mul86 = $sub85 << 2;
  $arrayidx88 = $27 + $mul86 | 0;
  $29 = HEAP8[$arrayidx88 >> 0] | 0;
  $xor9241 = $30 ^ $29;
  $arrayidx98 = $27 + $sub | 0;
  HEAP8[$arrayidx98 >> 0] = $xor9241;
  $31 = HEAP32[$ctx >> 2] | 0;
  $exp_data82$1 = $31 + 12 | 0;
  $32 = HEAP32[$exp_data82$1 >> 2] | 0;
  $key_base84$1 = $31 + 20 | 0;
  $33 = HEAP32[$key_base84$1 >> 2] | 0;
  $sub85$1 = $_i$049 - $33 | 0;
  $mul86$1 = $sub85$1 << 2;
  $add87$1 = $mul86$1 | 1;
  $arrayidx88$1 = $32 + $add87$1 | 0;
  $34 = HEAP8[$arrayidx88$1 >> 0] | 0;
  $35 = HEAP8[$arrayidx90$1 >> 0] | 0;
  $xor9241$1 = $35 ^ $34;
  $add97$1 = $sub | 1;
  $arrayidx98$1 = $32 + $add97$1 | 0;
  HEAP8[$arrayidx98$1 >> 0] = $xor9241$1;
  $36 = HEAP32[$ctx >> 2] | 0;
  $exp_data82$2 = $36 + 12 | 0;
  $37 = HEAP32[$exp_data82$2 >> 2] | 0;
  $key_base84$2 = $36 + 20 | 0;
  $38 = HEAP32[$key_base84$2 >> 2] | 0;
  $sub85$2 = $_i$049 - $38 | 0;
  $mul86$2 = $sub85$2 << 2;
  $add87$2 = $mul86$2 | 2;
  $arrayidx88$2 = $37 + $add87$2 | 0;
  $39 = HEAP8[$arrayidx88$2 >> 0] | 0;
  $40 = HEAP8[$arrayidx90$2 >> 0] | 0;
  $xor9241$2 = $40 ^ $39;
  $add97$2 = $sub | 2;
  $arrayidx98$2 = $37 + $add97$2 | 0;
  HEAP8[$arrayidx98$2 >> 0] = $xor9241$2;
  $41 = HEAP32[$ctx >> 2] | 0;
  $exp_data82$3 = $41 + 12 | 0;
  $42 = HEAP32[$exp_data82$3 >> 2] | 0;
  $key_base84$3 = $41 + 20 | 0;
  $43 = HEAP32[$key_base84$3 >> 2] | 0;
  $sub85$3 = $_i$049 - $43 | 0;
  $mul86$3 = $sub85$3 << 2;
  $add87$3 = $mul86$3 | 3;
  $arrayidx88$3 = $42 + $add87$3 | 0;
  $44 = HEAP8[$arrayidx88$3 >> 0] | 0;
  $45 = HEAP8[$arrayidx90$3 >> 0] | 0;
  $xor9241$3 = $45 ^ $44;
  $add97$3 = $sub | 3;
  $arrayidx98$3 = $42 + $add97$3 | 0;
  HEAP8[$arrayidx98$3 >> 0] = $xor9241$3;
  $inc103 = $_i$049 + 1 | 0;
  $46 = HEAP32[$ctx >> 2] | 0;
  $num_keys29 = $46 + 16 | 0;
  $47 = HEAP32[$num_keys29 >> 2] | 0;
  $mul30 = $47 << 2;
  $cmp31 = $inc103 >>> 0 < $mul30 >>> 0;
  if (!$cmp31) {
   $retval$0 = 0;
   break;
  }
  $key_base36$phi$trans$insert = $46 + 20 | 0;
  $$pre = HEAP32[$key_base36$phi$trans$insert >> 2] | 0;
  $17 = $46;
  $20 = $$pre;
  $_i$049 = $inc103;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_SH_EElEERPNS_15__tree_end_nodeISJ_EESK_RKS6_($this, $__hint$0, $__parent, $__dummy, $__v) {
 $this = $this | 0;
 $__hint$0 = $__hint$0 | 0;
 $__parent = $__parent | 0;
 $__dummy = $__dummy | 0;
 $__v = $__v | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__parent_$i$i$i = 0, $__parent_$i$i$i$i$i$i = 0, $__prior$sroa$0$0 = 0, $__right_$i$i$i = 0, $__v$byval_copy = 0;
 var $__v$byval_copy1 = 0, $__v$byval_copy2 = 0, $__v$byval_copy3 = 0, $__value_$i$i$i$i = 0, $__x$addr$i$i$i$0 = 0, $__x$addr$i$i$i$i$i$0$in = 0, $__x$addr$i$i$i$i$i$i$0 = 0, $__xx$i$i$0$in = 0, $call19 = 0, $call27 = 0, $call33 = 0, $call48 = 0, $call62 = 0, $call7 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i$i$i = 0, $cmp$i$i$i$i$i$i = 0, $cmp$i$i$i164 = 0;
 var $cmp$i178 = 0, $cmp$i6$i$i$i$i$i = 0, $cmp$i7$i$i = 0, $cmp$i89 = 0, $retval$0 = 0, $retval$i$i$0 = 0, $retval$i$i$i$i$i$0 = 0, $tmpcast$byval_copy = 0, $tmpcast2$byval_copy = 0, $tmpcast3$byval_copy = 0, $tmpcast47$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256 | 0);
 $tmpcast47$byval_copy = sp + 224 | 0;
 $__v$byval_copy3 = sp + 192 | 0;
 $__v$byval_copy2 = sp + 160 | 0;
 $tmpcast3$byval_copy = sp + 128 | 0;
 $__v$byval_copy1 = sp + 96 | 0;
 $tmpcast2$byval_copy = sp + 64 | 0;
 $tmpcast$byval_copy = sp + 32 | 0;
 $__v$byval_copy = sp;
 $__value_$i$i$i$i = $this + 4 | 0;
 $cmp$i = ($__value_$i$i$i$i | 0) == ($__hint$0 | 0);
 $0 = $__hint$0;
 if (!$cmp$i) {
  $1 = $__hint$0 + 13 | 0;
  dest = $__v$byval_copy;
  src = $__v;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  dest = $tmpcast$byval_copy;
  src = $1;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $call7 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_9SecretKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($__v$byval_copy, $tmpcast$byval_copy) | 0;
  if (!$call7) {
   dest = $tmpcast3$byval_copy;
   src = $1;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $__v$byval_copy2;
   src = $__v;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $call33 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_9SecretKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($tmpcast3$byval_copy, $__v$byval_copy2) | 0;
   if (!$call33) {
    HEAP32[$__parent >> 2] = $0;
    HEAP32[$__dummy >> 2] = $0;
    $retval$0 = $__dummy;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $8 = $__hint$0 + 4 | 0;
   $9 = HEAP32[$8 >> 2] | 0;
   $cmp$i$i$i$i$i = ($9 | 0) == (0 | 0);
   if ($cmp$i$i$i$i$i) {
    $__x$addr$i$i$i$i$i$0$in = $__hint$0;
    while (1) {
     $__parent_$i$i$i$i$i$i = $__x$addr$i$i$i$i$i$0$in + 8 | 0;
     $11 = HEAP32[$__parent_$i$i$i$i$i$i >> 2] | 0;
     $12 = HEAP32[$11 >> 2] | 0;
     $cmp$i6$i$i$i$i$i = ($12 | 0) == ($__x$addr$i$i$i$i$i$0$in | 0);
     if ($cmp$i6$i$i$i$i$i) {
      $retval$i$i$i$i$i$0 = $11;
      break;
     } else {
      $__x$addr$i$i$i$i$i$0$in = $11;
     }
    }
   } else {
    $__x$addr$i$i$i$i$i$i$0 = $9;
    while (1) {
     $10 = HEAP32[$__x$addr$i$i$i$i$i$i$0 >> 2] | 0;
     $cmp$i$i$i$i$i$i = ($10 | 0) == (0 | 0);
     if ($cmp$i$i$i$i$i$i) {
      break;
     } else {
      $__x$addr$i$i$i$i$i$i$0 = $10;
     }
    }
    $retval$i$i$i$i$i$0 = $__x$addr$i$i$i$i$i$i$0;
   }
   $cmp$i89 = ($retval$i$i$i$i$i$0 | 0) == ($__value_$i$i$i$i | 0);
   if (!$cmp$i89) {
    $13 = $retval$i$i$i$i$i$0 + 13 | 0;
    dest = $__v$byval_copy3;
    src = $__v;
    stop = dest + 32 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    dest = $tmpcast47$byval_copy;
    src = $13;
    stop = dest + 32 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    $call48 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_9SecretKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($__v$byval_copy3, $tmpcast47$byval_copy) | 0;
    if (!$call48) {
     $call62 = __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISJ_EERKS6_($this, $__parent, $__v) | 0;
     $retval$0 = $call62;
     STACKTOP = sp;
     return $retval$0 | 0;
    }
   }
   if ($cmp$i$i$i$i$i) {
    HEAP32[$__parent >> 2] = $__hint$0;
    $retval$0 = $8;
    STACKTOP = sp;
    return $retval$0 | 0;
   } else {
    HEAP32[$__parent >> 2] = $retval$i$i$i$i$i$0;
    $retval$0 = $retval$i$i$i$i$i$0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
  }
 }
 $2 = HEAP32[$this >> 2] | 0;
 $cmp$i178 = ($2 | 0) == ($__hint$0 | 0);
 $$pre = HEAP32[$__hint$0 >> 2] | 0;
 if ($cmp$i178) {
  $__prior$sroa$0$0 = $__hint$0;
 } else {
  $cmp$i$i = ($$pre | 0) == (0 | 0);
  if ($cmp$i$i) {
   $__xx$i$i$0$in = $__hint$0;
   while (1) {
    $__parent_$i$i$i = $__xx$i$i$0$in + 8 | 0;
    $4 = HEAP32[$__parent_$i$i$i >> 2] | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $cmp$i7$i$i = ($5 | 0) == ($__xx$i$i$0$in | 0);
    if ($cmp$i7$i$i) {
     $__xx$i$i$0$in = $4;
    } else {
     break;
    }
   }
   $retval$i$i$0 = $4;
  } else {
   $__x$addr$i$i$i$0 = $$pre;
   while (1) {
    $__right_$i$i$i = $__x$addr$i$i$i$0 + 4 | 0;
    $3 = HEAP32[$__right_$i$i$i >> 2] | 0;
    $cmp$i$i$i164 = ($3 | 0) == (0 | 0);
    if ($cmp$i$i$i164) {
     $retval$i$i$0 = $__x$addr$i$i$i$0;
     break;
    } else {
     $__x$addr$i$i$i$0 = $3;
    }
   }
  }
  $6 = $retval$i$i$0 + 13 | 0;
  dest = $tmpcast2$byval_copy;
  src = $6;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  dest = $__v$byval_copy1;
  src = $__v;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $call19 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_9SecretKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($tmpcast2$byval_copy, $__v$byval_copy1) | 0;
  if ($call19) {
   $__prior$sroa$0$0 = $retval$i$i$0;
  } else {
   $call27 = __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISJ_EERKS6_($this, $__parent, $__v) | 0;
   $retval$0 = $call27;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 $cmp = ($$pre | 0) == (0 | 0);
 if ($cmp) {
  HEAP32[$__parent >> 2] = $__hint$0;
  $retval$0 = $__hint$0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else {
  HEAP32[$__parent >> 2] = $__prior$sroa$0$0;
  $7 = $__prior$sroa$0$0 + 4 | 0;
  $retval$0 = $7;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_SH_EElEERPNS_15__tree_end_nodeISJ_EESK_RKS6_($this, $__hint$0, $__parent, $__dummy, $__v) {
 $this = $this | 0;
 $__hint$0 = $__hint$0 | 0;
 $__parent = $__parent | 0;
 $__dummy = $__dummy | 0;
 $__v = $__v | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__parent_$i$i$i = 0, $__parent_$i$i$i$i$i$i = 0, $__prior$sroa$0$0 = 0, $__right_$i$i$i = 0, $__v$byval_copy = 0;
 var $__v$byval_copy1 = 0, $__v$byval_copy2 = 0, $__v$byval_copy3 = 0, $__value_$i$i$i$i = 0, $__x$addr$i$i$i$0 = 0, $__x$addr$i$i$i$i$i$0$in = 0, $__x$addr$i$i$i$i$i$i$0 = 0, $__xx$i$i$0$in = 0, $call19 = 0, $call27 = 0, $call33 = 0, $call48 = 0, $call62 = 0, $call7 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i$i$i = 0, $cmp$i$i$i$i$i$i = 0, $cmp$i$i$i164 = 0;
 var $cmp$i178 = 0, $cmp$i6$i$i$i$i$i = 0, $cmp$i7$i$i = 0, $cmp$i89 = 0, $retval$0 = 0, $retval$i$i$0 = 0, $retval$i$i$i$i$i$0 = 0, $tmpcast$byval_copy = 0, $tmpcast2$byval_copy = 0, $tmpcast3$byval_copy = 0, $tmpcast47$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256 | 0);
 $tmpcast47$byval_copy = sp + 224 | 0;
 $__v$byval_copy3 = sp + 192 | 0;
 $__v$byval_copy2 = sp + 160 | 0;
 $tmpcast3$byval_copy = sp + 128 | 0;
 $__v$byval_copy1 = sp + 96 | 0;
 $tmpcast2$byval_copy = sp + 64 | 0;
 $tmpcast$byval_copy = sp + 32 | 0;
 $__v$byval_copy = sp;
 $__value_$i$i$i$i = $this + 4 | 0;
 $cmp$i = ($__value_$i$i$i$i | 0) == ($__hint$0 | 0);
 $0 = $__hint$0;
 if (!$cmp$i) {
  $1 = $__hint$0 + 13 | 0;
  dest = $__v$byval_copy;
  src = $__v;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  dest = $tmpcast$byval_copy;
  src = $1;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $call7 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_9PublicKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($__v$byval_copy, $tmpcast$byval_copy) | 0;
  if (!$call7) {
   dest = $tmpcast3$byval_copy;
   src = $1;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $__v$byval_copy2;
   src = $__v;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $call33 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_9PublicKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($tmpcast3$byval_copy, $__v$byval_copy2) | 0;
   if (!$call33) {
    HEAP32[$__parent >> 2] = $0;
    HEAP32[$__dummy >> 2] = $0;
    $retval$0 = $__dummy;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $8 = $__hint$0 + 4 | 0;
   $9 = HEAP32[$8 >> 2] | 0;
   $cmp$i$i$i$i$i = ($9 | 0) == (0 | 0);
   if ($cmp$i$i$i$i$i) {
    $__x$addr$i$i$i$i$i$0$in = $__hint$0;
    while (1) {
     $__parent_$i$i$i$i$i$i = $__x$addr$i$i$i$i$i$0$in + 8 | 0;
     $11 = HEAP32[$__parent_$i$i$i$i$i$i >> 2] | 0;
     $12 = HEAP32[$11 >> 2] | 0;
     $cmp$i6$i$i$i$i$i = ($12 | 0) == ($__x$addr$i$i$i$i$i$0$in | 0);
     if ($cmp$i6$i$i$i$i$i) {
      $retval$i$i$i$i$i$0 = $11;
      break;
     } else {
      $__x$addr$i$i$i$i$i$0$in = $11;
     }
    }
   } else {
    $__x$addr$i$i$i$i$i$i$0 = $9;
    while (1) {
     $10 = HEAP32[$__x$addr$i$i$i$i$i$i$0 >> 2] | 0;
     $cmp$i$i$i$i$i$i = ($10 | 0) == (0 | 0);
     if ($cmp$i$i$i$i$i$i) {
      break;
     } else {
      $__x$addr$i$i$i$i$i$i$0 = $10;
     }
    }
    $retval$i$i$i$i$i$0 = $__x$addr$i$i$i$i$i$i$0;
   }
   $cmp$i89 = ($retval$i$i$i$i$i$0 | 0) == ($__value_$i$i$i$i | 0);
   if (!$cmp$i89) {
    $13 = $retval$i$i$i$i$i$0 + 13 | 0;
    dest = $__v$byval_copy3;
    src = $__v;
    stop = dest + 32 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    dest = $tmpcast47$byval_copy;
    src = $13;
    stop = dest + 32 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    $call48 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_9PublicKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($__v$byval_copy3, $tmpcast47$byval_copy) | 0;
    if (!$call48) {
     $call62 = __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISJ_EERKS6_($this, $__parent, $__v) | 0;
     $retval$0 = $call62;
     STACKTOP = sp;
     return $retval$0 | 0;
    }
   }
   if ($cmp$i$i$i$i$i) {
    HEAP32[$__parent >> 2] = $__hint$0;
    $retval$0 = $8;
    STACKTOP = sp;
    return $retval$0 | 0;
   } else {
    HEAP32[$__parent >> 2] = $retval$i$i$i$i$i$0;
    $retval$0 = $retval$i$i$i$i$i$0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
  }
 }
 $2 = HEAP32[$this >> 2] | 0;
 $cmp$i178 = ($2 | 0) == ($__hint$0 | 0);
 $$pre = HEAP32[$__hint$0 >> 2] | 0;
 if ($cmp$i178) {
  $__prior$sroa$0$0 = $__hint$0;
 } else {
  $cmp$i$i = ($$pre | 0) == (0 | 0);
  if ($cmp$i$i) {
   $__xx$i$i$0$in = $__hint$0;
   while (1) {
    $__parent_$i$i$i = $__xx$i$i$0$in + 8 | 0;
    $4 = HEAP32[$__parent_$i$i$i >> 2] | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $cmp$i7$i$i = ($5 | 0) == ($__xx$i$i$0$in | 0);
    if ($cmp$i7$i$i) {
     $__xx$i$i$0$in = $4;
    } else {
     break;
    }
   }
   $retval$i$i$0 = $4;
  } else {
   $__x$addr$i$i$i$0 = $$pre;
   while (1) {
    $__right_$i$i$i = $__x$addr$i$i$i$0 + 4 | 0;
    $3 = HEAP32[$__right_$i$i$i >> 2] | 0;
    $cmp$i$i$i164 = ($3 | 0) == (0 | 0);
    if ($cmp$i$i$i164) {
     $retval$i$i$0 = $__x$addr$i$i$i$0;
     break;
    } else {
     $__x$addr$i$i$i$0 = $3;
    }
   }
  }
  $6 = $retval$i$i$0 + 13 | 0;
  dest = $tmpcast2$byval_copy;
  src = $6;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  dest = $__v$byval_copy1;
  src = $__v;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $call19 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_9PublicKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($tmpcast2$byval_copy, $__v$byval_copy1) | 0;
  if ($call19) {
   $__prior$sroa$0$0 = $retval$i$i$0;
  } else {
   $call27 = __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISJ_EERKS6_($this, $__parent, $__v) | 0;
   $retval$0 = $call27;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 $cmp = ($$pre | 0) == (0 | 0);
 if ($cmp) {
  HEAP32[$__parent >> 2] = $__hint$0;
  $retval$0 = $__hint$0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else {
  HEAP32[$__parent >> 2] = $__prior$sroa$0$0;
  $7 = $__prior$sroa$0$0 + 4 | 0;
  $retval$0 = $7;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_SH_EElEERPNS_15__tree_end_nodeISJ_EESK_RKS6_($this, $__hint$0, $__parent, $__dummy, $__v) {
 $this = $this | 0;
 $__hint$0 = $__hint$0 | 0;
 $__parent = $__parent | 0;
 $__dummy = $__dummy | 0;
 $__v = $__v | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__parent_$i$i$i = 0, $__parent_$i$i$i$i$i$i = 0, $__prior$sroa$0$0 = 0, $__right_$i$i$i = 0, $__v$byval_copy = 0;
 var $__v$byval_copy1 = 0, $__v$byval_copy2 = 0, $__v$byval_copy3 = 0, $__value_$i$i$i$i = 0, $__x$addr$i$i$i$0 = 0, $__x$addr$i$i$i$i$i$0$in = 0, $__x$addr$i$i$i$i$i$i$0 = 0, $__xx$i$i$0$in = 0, $call19 = 0, $call27 = 0, $call33 = 0, $call48 = 0, $call62 = 0, $call7 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i$i$i = 0, $cmp$i$i$i$i$i$i = 0, $cmp$i$i$i164 = 0;
 var $cmp$i178 = 0, $cmp$i6$i$i$i$i$i = 0, $cmp$i7$i$i = 0, $cmp$i89 = 0, $retval$0 = 0, $retval$i$i$0 = 0, $retval$i$i$i$i$i$0 = 0, $tmpcast$byval_copy = 0, $tmpcast2$byval_copy = 0, $tmpcast3$byval_copy = 0, $tmpcast47$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256 | 0);
 $tmpcast47$byval_copy = sp + 224 | 0;
 $__v$byval_copy3 = sp + 192 | 0;
 $__v$byval_copy2 = sp + 160 | 0;
 $tmpcast3$byval_copy = sp + 128 | 0;
 $__v$byval_copy1 = sp + 96 | 0;
 $tmpcast2$byval_copy = sp + 64 | 0;
 $tmpcast$byval_copy = sp + 32 | 0;
 $__v$byval_copy = sp;
 $__value_$i$i$i$i = $this + 4 | 0;
 $cmp$i = ($__value_$i$i$i$i | 0) == ($__hint$0 | 0);
 $0 = $__hint$0;
 if (!$cmp$i) {
  $1 = $__hint$0 + 13 | 0;
  dest = $__v$byval_copy;
  src = $__v;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  dest = $tmpcast$byval_copy;
  src = $1;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $call7 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_8KeyImageEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($__v$byval_copy, $tmpcast$byval_copy) | 0;
  if (!$call7) {
   dest = $tmpcast3$byval_copy;
   src = $1;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $__v$byval_copy2;
   src = $__v;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $call33 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_8KeyImageEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($tmpcast3$byval_copy, $__v$byval_copy2) | 0;
   if (!$call33) {
    HEAP32[$__parent >> 2] = $0;
    HEAP32[$__dummy >> 2] = $0;
    $retval$0 = $__dummy;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $8 = $__hint$0 + 4 | 0;
   $9 = HEAP32[$8 >> 2] | 0;
   $cmp$i$i$i$i$i = ($9 | 0) == (0 | 0);
   if ($cmp$i$i$i$i$i) {
    $__x$addr$i$i$i$i$i$0$in = $__hint$0;
    while (1) {
     $__parent_$i$i$i$i$i$i = $__x$addr$i$i$i$i$i$0$in + 8 | 0;
     $11 = HEAP32[$__parent_$i$i$i$i$i$i >> 2] | 0;
     $12 = HEAP32[$11 >> 2] | 0;
     $cmp$i6$i$i$i$i$i = ($12 | 0) == ($__x$addr$i$i$i$i$i$0$in | 0);
     if ($cmp$i6$i$i$i$i$i) {
      $retval$i$i$i$i$i$0 = $11;
      break;
     } else {
      $__x$addr$i$i$i$i$i$0$in = $11;
     }
    }
   } else {
    $__x$addr$i$i$i$i$i$i$0 = $9;
    while (1) {
     $10 = HEAP32[$__x$addr$i$i$i$i$i$i$0 >> 2] | 0;
     $cmp$i$i$i$i$i$i = ($10 | 0) == (0 | 0);
     if ($cmp$i$i$i$i$i$i) {
      break;
     } else {
      $__x$addr$i$i$i$i$i$i$0 = $10;
     }
    }
    $retval$i$i$i$i$i$0 = $__x$addr$i$i$i$i$i$i$0;
   }
   $cmp$i89 = ($retval$i$i$i$i$i$0 | 0) == ($__value_$i$i$i$i | 0);
   if (!$cmp$i89) {
    $13 = $retval$i$i$i$i$i$0 + 13 | 0;
    dest = $__v$byval_copy3;
    src = $__v;
    stop = dest + 32 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    dest = $tmpcast47$byval_copy;
    src = $13;
    stop = dest + 32 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    $call48 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_8KeyImageEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($__v$byval_copy3, $tmpcast47$byval_copy) | 0;
    if (!$call48) {
     $call62 = __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISJ_EERKS6_($this, $__parent, $__v) | 0;
     $retval$0 = $call62;
     STACKTOP = sp;
     return $retval$0 | 0;
    }
   }
   if ($cmp$i$i$i$i$i) {
    HEAP32[$__parent >> 2] = $__hint$0;
    $retval$0 = $8;
    STACKTOP = sp;
    return $retval$0 | 0;
   } else {
    HEAP32[$__parent >> 2] = $retval$i$i$i$i$i$0;
    $retval$0 = $retval$i$i$i$i$i$0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
  }
 }
 $2 = HEAP32[$this >> 2] | 0;
 $cmp$i178 = ($2 | 0) == ($__hint$0 | 0);
 $$pre = HEAP32[$__hint$0 >> 2] | 0;
 if ($cmp$i178) {
  $__prior$sroa$0$0 = $__hint$0;
 } else {
  $cmp$i$i = ($$pre | 0) == (0 | 0);
  if ($cmp$i$i) {
   $__xx$i$i$0$in = $__hint$0;
   while (1) {
    $__parent_$i$i$i = $__xx$i$i$0$in + 8 | 0;
    $4 = HEAP32[$__parent_$i$i$i >> 2] | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $cmp$i7$i$i = ($5 | 0) == ($__xx$i$i$0$in | 0);
    if ($cmp$i7$i$i) {
     $__xx$i$i$0$in = $4;
    } else {
     break;
    }
   }
   $retval$i$i$0 = $4;
  } else {
   $__x$addr$i$i$i$0 = $$pre;
   while (1) {
    $__right_$i$i$i = $__x$addr$i$i$i$0 + 4 | 0;
    $3 = HEAP32[$__right_$i$i$i >> 2] | 0;
    $cmp$i$i$i164 = ($3 | 0) == (0 | 0);
    if ($cmp$i$i$i164) {
     $retval$i$i$0 = $__x$addr$i$i$i$0;
     break;
    } else {
     $__x$addr$i$i$i$0 = $3;
    }
   }
  }
  $6 = $retval$i$i$0 + 13 | 0;
  dest = $tmpcast2$byval_copy;
  src = $6;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  dest = $__v$byval_copy1;
  src = $__v;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $call19 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_8KeyImageEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($tmpcast2$byval_copy, $__v$byval_copy1) | 0;
  if ($call19) {
   $__prior$sroa$0$0 = $retval$i$i$0;
  } else {
   $call27 = __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISJ_EERKS6_($this, $__parent, $__v) | 0;
   $retval$0 = $call27;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 $cmp = ($$pre | 0) == (0 | 0);
 if ($cmp) {
  HEAP32[$__parent >> 2] = $__hint$0;
  $retval$0 = $__hint$0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else {
  HEAP32[$__parent >> 2] = $__prior$sroa$0$0;
  $7 = $__prior$sroa$0$0 + 4 | 0;
  $retval$0 = $7;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0 | 0;
}

function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $$pr = 0, $$pr36 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__flags = 0, $__flags13 = 0, $__pointee = 0, $__pointee25 = 0, $and = 0, $and14 = 0, $and20 = 0, $and21 = 0;
 var $call = 0, $call2 = 0, $call26 = 0, $call30 = 0, $call51 = 0, $call66 = 0, $cmp = 0, $cmp10 = 0, $cmp7 = 0, $cmp72 = 0, $cmp79 = 0, $cmp84 = 0, $cmp86 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $neg = 0, $neg19 = 0, $neg45 = 0, $neg60 = 0, $number_of_dst_type = 0;
 var $path_dst_ptr_to_static_ptr = 0, $phitmp = 0, $retval$0 = 0, $retval$6 = 0, $src2dst_offset = 0, $static_ptr = 0, $static_type = 0, $tobool = 0, $tobool22 = 0, $tobool42 = 0, $tobool47 = 0, $tobool57 = 0, $tobool62 = 0, $vfn = 0, $vtable = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $info = sp;
 $call = __ZL8is_equalPKSt9type_infoS1_b($thrown_type, 42776, 0) | 0;
 do {
  if ($call) {
   HEAP32[$adjustedPtr >> 2] = 0;
   $retval$6 = 1;
  } else {
   $call2 = __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type) | 0;
   if ($call2) {
    $0 = HEAP32[$adjustedPtr >> 2] | 0;
    $cmp = ($0 | 0) == (0 | 0);
    if ($cmp) {
     $retval$6 = 1;
     break;
    }
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$adjustedPtr >> 2] = $1;
    $retval$6 = 1;
    break;
   }
   $2 = ($thrown_type | 0) == (0 | 0);
   if ($2) {
    $retval$6 = 0;
   } else {
    $3 = ___dynamic_cast($thrown_type, 42704) | 0;
    $cmp7 = ($3 | 0) == (0 | 0);
    if ($cmp7) {
     $retval$6 = 0;
    } else {
     $4 = HEAP32[$adjustedPtr >> 2] | 0;
     $cmp10 = ($4 | 0) == (0 | 0);
     if (!$cmp10) {
      $5 = HEAP32[$4 >> 2] | 0;
      HEAP32[$adjustedPtr >> 2] = $5;
     }
     $__flags = $3 + 8 | 0;
     $6 = HEAP32[$__flags >> 2] | 0;
     $__flags13 = $this + 8 | 0;
     $7 = HEAP32[$__flags13 >> 2] | 0;
     $neg = $7 ^ 7;
     $and = $6 & 7;
     $and14 = $and & $neg;
     $tobool = ($and14 | 0) == 0;
     if ($tobool) {
      $neg19 = $6 & 96;
      $and20 = $neg19 ^ 96;
      $and21 = $and20 & $7;
      $tobool22 = ($and21 | 0) == 0;
      if ($tobool22) {
       $__pointee = $this + 12 | 0;
       $8 = HEAP32[$__pointee >> 2] | 0;
       $__pointee25 = $3 + 12 | 0;
       $9 = HEAP32[$__pointee25 >> 2] | 0;
       $call26 = __ZL8is_equalPKSt9type_infoS1_b($8, $9, 0) | 0;
       if ($call26) {
        $retval$6 = 1;
       } else {
        $call30 = __ZL8is_equalPKSt9type_infoS1_b($8, 42768, 0) | 0;
        if ($call30) {
         $10 = ($9 | 0) == (0 | 0);
         if ($10) {
          $retval$6 = 1;
          break;
         }
         $11 = ___dynamic_cast($9, 42720) | 0;
         $phitmp = ($11 | 0) == (0 | 0);
         $retval$6 = $phitmp;
         break;
        }
        $12 = ($8 | 0) == (0 | 0);
        if ($12) {
         $retval$6 = 0;
        } else {
         $13 = ___dynamic_cast($8, 42704) | 0;
         $tobool42 = ($13 | 0) == (0 | 0);
         if (!$tobool42) {
          $14 = HEAP32[$__flags13 >> 2] | 0;
          $neg45 = $14 & 1;
          $tobool47 = ($neg45 | 0) == 0;
          if ($tobool47) {
           $retval$6 = 0;
           break;
          }
          $15 = HEAP32[$__pointee25 >> 2] | 0;
          $call51 = __ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE($13, $15) | 0;
          $retval$6 = $call51;
          break;
         }
         $$pr = HEAP32[$__pointee >> 2] | 0;
         $16 = ($$pr | 0) == (0 | 0);
         if ($16) {
          $retval$6 = 0;
         } else {
          $17 = ___dynamic_cast($$pr, 42736) | 0;
          $tobool57 = ($17 | 0) == (0 | 0);
          if (!$tobool57) {
           $18 = HEAP32[$__flags13 >> 2] | 0;
           $neg60 = $18 & 1;
           $tobool62 = ($neg60 | 0) == 0;
           if ($tobool62) {
            $retval$6 = 0;
            break;
           }
           $19 = HEAP32[$__pointee25 >> 2] | 0;
           $call66 = __ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE($17, $19) | 0;
           $retval$6 = $call66;
           break;
          }
          $$pr36 = HEAP32[$__pointee >> 2] | 0;
          $20 = ($$pr36 | 0) == (0 | 0);
          if ($20) {
           $retval$6 = 0;
          } else {
           $21 = ___dynamic_cast($$pr36, 42584) | 0;
           $cmp72 = ($21 | 0) == (0 | 0);
           if ($cmp72) {
            $retval$6 = 0;
           } else {
            $22 = HEAP32[$__pointee25 >> 2] | 0;
            $23 = ($22 | 0) == (0 | 0);
            if ($23) {
             $retval$6 = 0;
            } else {
             $24 = ___dynamic_cast($22, 42584) | 0;
             $cmp79 = ($24 | 0) == (0 | 0);
             if ($cmp79) {
              $retval$6 = 0;
             } else {
              HEAP32[$info >> 2] = $24;
              $static_ptr = $info + 4 | 0;
              HEAP32[$static_ptr >> 2] = 0;
              $static_type = $info + 8 | 0;
              HEAP32[$static_type >> 2] = $21;
              $src2dst_offset = $info + 12 | 0;
              HEAP32[$src2dst_offset >> 2] = -1;
              $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
              $path_dst_ptr_to_static_ptr = $info + 24 | 0;
              $number_of_dst_type = $info + 48 | 0;
              dest = $dst_ptr_leading_to_static_ptr;
              stop = dest + 36 | 0;
              do {
               HEAP32[dest >> 2] = 0 | 0;
               dest = dest + 4 | 0;
              } while ((dest | 0) < (stop | 0));
              HEAP16[$dst_ptr_leading_to_static_ptr + 36 >> 1] = 0 | 0;
              HEAP8[$dst_ptr_leading_to_static_ptr + 38 >> 0] = 0 | 0;
              HEAP32[$number_of_dst_type >> 2] = 1;
              $vtable = HEAP32[$24 >> 2] | 0;
              $vfn = $vtable + 28 | 0;
              $25 = HEAP32[$vfn >> 2] | 0;
              $26 = HEAP32[$adjustedPtr >> 2] | 0;
              FUNCTION_TABLE_viiii[$25 & 255]($24, $info, $26, 1);
              $27 = HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
              $cmp84 = ($27 | 0) == 1;
              do {
               if ($cmp84) {
                $28 = HEAP32[$adjustedPtr >> 2] | 0;
                $cmp86 = ($28 | 0) == (0 | 0);
                if ($cmp86) {
                 $retval$0 = 1;
                 break;
                }
                $29 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
                HEAP32[$adjustedPtr >> 2] = $29;
                $retval$0 = 1;
               } else {
                $retval$0 = 0;
               }
              } while (0);
              $retval$6 = $retval$0;
             }
            }
           }
          }
         }
        }
       }
      } else {
       $retval$6 = 0;
      }
     } else {
      $retval$6 = 0;
     }
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$6 | 0;
}

function _Final($state, $hashval) {
 $state = $state | 0;
 $hashval = $hashval | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $add$ptr133 = 0, $add$ptr1385 = 0, $add$ptr1433 = 0, $add$ptr1471 = 0, $add$ptr6 = 0, $arraydecay = 0, $arraydecay83 = 0, $arrayidx10 = 0, $arrayidx100 = 0, $arrayidx106 = 0, $arrayidx112 = 0, $arrayidx118 = 0, $arrayidx124 = 0, $arrayidx130 = 0, $arrayidx16 = 0, $arrayidx22 = 0, $arrayidx28 = 0, $arrayidx34 = 0, $arrayidx40 = 0;
 var $arrayidx46 = 0, $arrayidx5 = 0, $arrayidx79 = 0, $arrayidx88 = 0, $arrayidx94 = 0, $cmp6511 = 0, $conv80 = 0, $conv81 = 0, $databitlen = 0, $datasize_in_buffer = 0, $i$110 = 0, $idxprom = 0, $or = 0, $sh_prom = 0, $shl = 0, $uglygep = 0, $uglygep15 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 $databitlen = $state + 8 | 0;
 $0 = $databitlen;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 & 511;
 $7 = ($6 | 0) == 0;
 $8 = 0 == 0;
 $9 = $7 & $8;
 if ($9) {
  $arraydecay = $state + 160 | 0;
  dest = $arraydecay;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = 0 | 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP8[$arraydecay >> 0] = -128;
  $10 = $2 & 255;
  $arrayidx5 = $state + 223 | 0;
  HEAP8[$arrayidx5 >> 0] = $10;
  $11 = _bitshift64Lshr($2 | 0, $5 | 0, 8) | 0;
  $12 = getTempRet0() | 0;
  $13 = $11 & 255;
  $arrayidx10 = $state + 222 | 0;
  HEAP8[$arrayidx10 >> 0] = $13;
  $14 = _bitshift64Lshr($2 | 0, $5 | 0, 16) | 0;
  $15 = getTempRet0() | 0;
  $16 = $14 & 255;
  $arrayidx16 = $state + 221 | 0;
  HEAP8[$arrayidx16 >> 0] = $16;
  $17 = _bitshift64Lshr($2 | 0, $5 | 0, 24) | 0;
  $18 = getTempRet0() | 0;
  $19 = $17 & 255;
  $arrayidx22 = $state + 220 | 0;
  HEAP8[$arrayidx22 >> 0] = $19;
  $20 = $5 & 255;
  $arrayidx28 = $state + 219 | 0;
  HEAP8[$arrayidx28 >> 0] = $20;
  $21 = _bitshift64Lshr($2 | 0, $5 | 0, 40) | 0;
  $22 = getTempRet0() | 0;
  $23 = $21 & 255;
  $arrayidx34 = $state + 218 | 0;
  HEAP8[$arrayidx34 >> 0] = $23;
  $24 = _bitshift64Lshr($2 | 0, $5 | 0, 48) | 0;
  $25 = getTempRet0() | 0;
  $26 = $24 & 255;
  $arrayidx40 = $state + 217 | 0;
  HEAP8[$arrayidx40 >> 0] = $26;
  $27 = _bitshift64Lshr($2 | 0, $5 | 0, 56) | 0;
  $28 = getTempRet0() | 0;
  $29 = $27 & 255;
  $arrayidx46 = $state + 216 | 0;
  HEAP8[$arrayidx46 >> 0] = $29;
  _F8($state);
 } else {
  $datasize_in_buffer = $state + 16 | 0;
  $30 = $datasize_in_buffer;
  $31 = $30;
  $32 = HEAP32[$31 >> 2] | 0;
  $33 = $30 + 4 | 0;
  $34 = $33;
  $35 = HEAP32[$34 >> 2] | 0;
  $36 = $32 & 7;
  $37 = ($36 | 0) == 0;
  $38 = 0 == 0;
  $39 = $37 & $38;
  $40 = _bitshift64Lshr($6 | 0, 0, 3) | 0;
  $41 = getTempRet0() | 0;
  if ($39) {
   $42 = $40 + 160 | 0;
   $uglygep = $state + $42 | 0;
   $43 = 64 - $40 | 0;
   _memset($uglygep | 0, 0, $43 | 0) | 0;
  } else {
   $i$110 = $40 + 1 | 0;
   $cmp6511 = $i$110 >>> 0 < 64;
   if ($cmp6511) {
    $44 = $40 + 161 | 0;
    $uglygep15 = $state + $44 | 0;
    $45 = $40 ^ 63;
    _memset($uglygep15 | 0, 0, $45 | 0) | 0;
   }
  }
  $46 = $2 & 7;
  $sh_prom = $46 ^ 7;
  $shl = 1 << $sh_prom;
  $47 = _bitshift64Lshr($2 | 0, $5 | 0, 3) | 0;
  $48 = getTempRet0() | 0;
  $idxprom = $47 & 63;
  $arrayidx79 = ($state + 160 | 0) + $idxprom | 0;
  $49 = HEAP8[$arrayidx79 >> 0] | 0;
  $conv80 = $49 & 255;
  $or = $shl | $conv80;
  $conv81 = $or & 255;
  HEAP8[$arrayidx79 >> 0] = $conv81;
  _F8($state);
  $arraydecay83 = $state + 160 | 0;
  dest = $arraydecay83;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = 0 | 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $50 = $databitlen;
  $51 = $50;
  $52 = HEAP32[$51 >> 2] | 0;
  $53 = $50 + 4 | 0;
  $54 = $53;
  $55 = HEAP32[$54 >> 2] | 0;
  $56 = $52 & 255;
  $arrayidx88 = $state + 223 | 0;
  HEAP8[$arrayidx88 >> 0] = $56;
  $57 = _bitshift64Lshr($52 | 0, $55 | 0, 8) | 0;
  $58 = getTempRet0() | 0;
  $59 = $57 & 255;
  $arrayidx94 = $state + 222 | 0;
  HEAP8[$arrayidx94 >> 0] = $59;
  $60 = _bitshift64Lshr($52 | 0, $55 | 0, 16) | 0;
  $61 = getTempRet0() | 0;
  $62 = $60 & 255;
  $arrayidx100 = $state + 221 | 0;
  HEAP8[$arrayidx100 >> 0] = $62;
  $63 = _bitshift64Lshr($52 | 0, $55 | 0, 24) | 0;
  $64 = getTempRet0() | 0;
  $65 = $63 & 255;
  $arrayidx106 = $state + 220 | 0;
  HEAP8[$arrayidx106 >> 0] = $65;
  $66 = $55 & 255;
  $arrayidx112 = $state + 219 | 0;
  HEAP8[$arrayidx112 >> 0] = $66;
  $67 = _bitshift64Lshr($52 | 0, $55 | 0, 40) | 0;
  $68 = getTempRet0() | 0;
  $69 = $67 & 255;
  $arrayidx118 = $state + 218 | 0;
  HEAP8[$arrayidx118 >> 0] = $69;
  $70 = _bitshift64Lshr($52 | 0, $55 | 0, 48) | 0;
  $71 = getTempRet0() | 0;
  $72 = $70 & 255;
  $arrayidx124 = $state + 217 | 0;
  HEAP8[$arrayidx124 >> 0] = $72;
  $73 = _bitshift64Lshr($52 | 0, $55 | 0, 56) | 0;
  $74 = getTempRet0() | 0;
  $75 = $73 & 255;
  $arrayidx130 = $state + 216 | 0;
  HEAP8[$arrayidx130 >> 0] = $75;
  _F8($state);
 }
 $76 = HEAP32[$state >> 2] | 0;
 $77 = $76 + -224 | 0;
 $78 = $77 >>> 5;
 $79 = $77 << 27;
 $80 = $78 | $79;
 switch ($80 | 0) {
 case 0:
  {
   $add$ptr6 = $state + 96 | 0;
   $add$ptr133 = $add$ptr6 + 36 | 0;
   dest = $hashval;
   src = $add$ptr133;
   stop = dest + 28 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   return;
   break;
  }
 case 1:
  {
   $add$ptr1385 = $state + 128 | 0;
   dest = $hashval;
   src = $add$ptr1385;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   return;
   break;
  }
 case 5:
  {
   $add$ptr1433 = $state + 112 | 0;
   dest = $hashval;
   src = $add$ptr1433;
   stop = dest + 48 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   return;
   break;
  }
 case 9:
  {
   $add$ptr1471 = $state + 96 | 0;
   dest = $hashval;
   src = $add$ptr1471;
   stop = dest + 64 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   return;
   break;
  }
 default:
  {
   return;
  }
 }
}

function _initial_kat($blockhash, $context, $type) {
 $blockhash = $blockhash | 0;
 $context = $context | 0;
 $type = $type | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ad = 0, $adlen = 0, $and = 0, $and28 = 0, $arrayidx = 0, $arrayidx19 = 0, $arrayidx38 = 0, $arrayidx52 = 0, $arrayidx64 = 0, $call2 = 0, $cmp = 0, $cmp1 = 0;
 var $cmp10 = 0, $cmp1049 = 0, $cmp16 = 0, $cmp1647 = 0, $cmp35 = 0, $cmp3545 = 0, $cmp49 = 0, $cmp4943 = 0, $conv = 0, $conv20 = 0, $conv39 = 0, $conv53 = 0, $conv65 = 0, $exitcond = 0, $flags = 0, $i$050 = 0, $i$148 = 0, $i$246 = 0, $i$344 = 0, $i$442 = 0;
 var $inc = 0, $inc23 = 0, $inc42 = 0, $inc56 = 0, $inc68 = 0, $lanes = 0, $m_cost = 0, $or$cond = 0, $outlen = 0, $pwd = 0, $pwdlen = 0, $salt = 0, $saltlen = 0, $secret = 0, $secretlen = 0, $t_cost = 0, $tobool = 0, $tobool29 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0;
 var $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
 $vararg_buffer34 = sp + 96 | 0;
 $vararg_buffer32 = sp + 88 | 0;
 $vararg_buffer29 = sp + 80 | 0;
 $vararg_buffer26 = sp + 72 | 0;
 $vararg_buffer23 = sp + 64 | 0;
 $vararg_buffer20 = sp + 56 | 0;
 $vararg_buffer17 = sp + 48 | 0;
 $vararg_buffer14 = sp + 40 | 0;
 $vararg_buffer11 = sp + 32 | 0;
 $vararg_buffer8 = sp + 24 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $cmp = ($blockhash | 0) != (0 | 0);
 $cmp1 = ($context | 0) != (0 | 0);
 $or$cond = $cmp & $cmp1;
 if (!$or$cond) {
  STACKTOP = sp;
  return;
 }
 _puts(48588);
 $call2 = _argon2_type2string($type) | 0;
 $version = $context + 56 | 0;
 $0 = HEAP32[$version >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = $call2;
 $vararg_ptr1 = $vararg_buffer + 4 | 0;
 HEAP32[$vararg_ptr1 >> 2] = $0;
 _printf(46465, $vararg_buffer);
 _puts(48588);
 $m_cost = $context + 44 | 0;
 $1 = HEAP32[$m_cost >> 2] | 0;
 $t_cost = $context + 40 | 0;
 $2 = HEAP32[$t_cost >> 2] | 0;
 $lanes = $context + 48 | 0;
 $3 = HEAP32[$lanes >> 2] | 0;
 $outlen = $context + 4 | 0;
 $4 = HEAP32[$outlen >> 2] | 0;
 HEAP32[$vararg_buffer2 >> 2] = $1;
 $vararg_ptr5 = $vararg_buffer2 + 4 | 0;
 HEAP32[$vararg_ptr5 >> 2] = $2;
 $vararg_ptr6 = $vararg_buffer2 + 8 | 0;
 HEAP32[$vararg_ptr6 >> 2] = $3;
 $vararg_ptr7 = $vararg_buffer2 + 12 | 0;
 HEAP32[$vararg_ptr7 >> 2] = $4;
 _printf(46487, $vararg_buffer2);
 $pwdlen = $context + 12 | 0;
 $5 = HEAP32[$pwdlen >> 2] | 0;
 HEAP32[$vararg_buffer8 >> 2] = $5;
 _printf(46564, $vararg_buffer8);
 $flags = $context + 68 | 0;
 $6 = HEAP32[$flags >> 2] | 0;
 $and = $6 & 1;
 $tobool = ($and | 0) == 0;
 if ($tobool) {
  $7 = HEAP32[$pwdlen >> 2] | 0;
  $cmp1049 = ($7 | 0) == 0;
  if (!$cmp1049) {
   $pwd = $context + 8 | 0;
   $i$050 = 0;
   while (1) {
    $8 = HEAP32[$pwd >> 2] | 0;
    $arrayidx = $8 + $i$050 | 0;
    $9 = HEAP8[$arrayidx >> 0] | 0;
    $conv = $9 & 255;
    HEAP32[$vararg_buffer11 >> 2] = $conv;
    _printf(46579, $vararg_buffer11);
    $inc = $i$050 + 1 | 0;
    $10 = HEAP32[$pwdlen >> 2] | 0;
    $cmp10 = $inc >>> 0 < $10 >>> 0;
    if ($cmp10) {
     $i$050 = $inc;
    } else {
     break;
    }
   }
  }
  _putchar();
 } else {
  _puts(48628);
 }
 $saltlen = $context + 20 | 0;
 $11 = HEAP32[$saltlen >> 2] | 0;
 HEAP32[$vararg_buffer14 >> 2] = $11;
 _printf(46586, $vararg_buffer14);
 $12 = HEAP32[$saltlen >> 2] | 0;
 $cmp1647 = ($12 | 0) == 0;
 if (!$cmp1647) {
  $salt = $context + 16 | 0;
  $i$148 = 0;
  while (1) {
   $13 = HEAP32[$salt >> 2] | 0;
   $arrayidx19 = $13 + $i$148 | 0;
   $14 = HEAP8[$arrayidx19 >> 0] | 0;
   $conv20 = $14 & 255;
   HEAP32[$vararg_buffer17 >> 2] = $conv20;
   _printf(46579, $vararg_buffer17);
   $inc23 = $i$148 + 1 | 0;
   $15 = HEAP32[$saltlen >> 2] | 0;
   $cmp16 = $inc23 >>> 0 < $15 >>> 0;
   if ($cmp16) {
    $i$148 = $inc23;
   } else {
    break;
   }
  }
 }
 _putchar();
 $secretlen = $context + 28 | 0;
 $16 = HEAP32[$secretlen >> 2] | 0;
 HEAP32[$vararg_buffer20 >> 2] = $16;
 _printf(46597, $vararg_buffer20);
 $17 = HEAP32[$flags >> 2] | 0;
 $and28 = $17 & 2;
 $tobool29 = ($and28 | 0) == 0;
 if ($tobool29) {
  $18 = HEAP32[$secretlen >> 2] | 0;
  $cmp3545 = ($18 | 0) == 0;
  if (!$cmp3545) {
   $secret = $context + 24 | 0;
   $i$246 = 0;
   while (1) {
    $19 = HEAP32[$secret >> 2] | 0;
    $arrayidx38 = $19 + $i$246 | 0;
    $20 = HEAP8[$arrayidx38 >> 0] | 0;
    $conv39 = $20 & 255;
    HEAP32[$vararg_buffer23 >> 2] = $conv39;
    _printf(46579, $vararg_buffer23);
    $inc42 = $i$246 + 1 | 0;
    $21 = HEAP32[$secretlen >> 2] | 0;
    $cmp35 = $inc42 >>> 0 < $21 >>> 0;
    if ($cmp35) {
     $i$246 = $inc42;
    } else {
     break;
    }
   }
  }
  _putchar();
 } else {
  _puts(48628);
 }
 $adlen = $context + 36 | 0;
 $22 = HEAP32[$adlen >> 2] | 0;
 HEAP32[$vararg_buffer26 >> 2] = $22;
 _printf(46610, $vararg_buffer26);
 $23 = HEAP32[$adlen >> 2] | 0;
 $cmp4943 = ($23 | 0) == 0;
 if (!$cmp4943) {
  $ad = $context + 32 | 0;
  $i$344 = 0;
  while (1) {
   $24 = HEAP32[$ad >> 2] | 0;
   $arrayidx52 = $24 + $i$344 | 0;
   $25 = HEAP8[$arrayidx52 >> 0] | 0;
   $conv53 = $25 & 255;
   HEAP32[$vararg_buffer29 >> 2] = $conv53;
   _printf(46579, $vararg_buffer29);
   $inc56 = $i$344 + 1 | 0;
   $26 = HEAP32[$adlen >> 2] | 0;
   $cmp49 = $inc56 >>> 0 < $26 >>> 0;
   if ($cmp49) {
    $i$344 = $inc56;
   } else {
    break;
   }
  }
 }
 _putchar();
 _printf(46632, $vararg_buffer32);
 $i$442 = 0;
 while (1) {
  $arrayidx64 = $blockhash + $i$442 | 0;
  $27 = HEAP8[$arrayidx64 >> 0] | 0;
  $conv65 = $27 & 255;
  HEAP32[$vararg_buffer34 >> 2] = $conv65;
  _printf(46579, $vararg_buffer34);
  $inc68 = $i$442 + 1 | 0;
  $exitcond = ($inc68 | 0) == 64;
  if ($exitcond) {
   break;
  } else {
   $i$442 = $inc68;
  }
 }
 _putchar();
 STACKTOP = sp;
 return;
}

function _Update($state, $data, $0, $1) {
 $state = $state | 0;
 $data = $data | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr = 0, $add$ptr38 = 0, $add$ptr56 = 0;
 var $add$ptr69 = 0, $arraydecay54 = 0, $arraydecay67 = 0, $conv = 0, $conv20 = 0, $conv42 = 0, $conv72 = 0, $conv81 = 0, $databitlen1 = 0, $datasize_in_buffer = 0, $index$1$lcssa$off0 = 0, $or$cond = 0, $or$cond2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $databitlen1 = $state + 8 | 0;
 $2 = $databitlen1;
 $3 = $2;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $2 + 4 | 0;
 $6 = $5;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = _i64Add($4 | 0, $7 | 0, $0 | 0, $1 | 0) | 0;
 $9 = getTempRet0() | 0;
 $10 = $databitlen1;
 $11 = $10;
 HEAP32[$11 >> 2] = $8;
 $12 = $10 + 4 | 0;
 $13 = $12;
 HEAP32[$13 >> 2] = $9;
 $datasize_in_buffer = $state + 16 | 0;
 $14 = $datasize_in_buffer;
 $15 = $14;
 $16 = HEAP32[$15 >> 2] | 0;
 $17 = $14 + 4 | 0;
 $18 = $17;
 $19 = HEAP32[$18 >> 2] | 0;
 $20 = ($16 | 0) != 0;
 $21 = ($19 | 0) != 0;
 $22 = $20 | $21;
 $23 = _i64Add($16 | 0, $19 | 0, $0 | 0, $1 | 0) | 0;
 $24 = getTempRet0() | 0;
 $25 = $24 >>> 0 < 0;
 $26 = $23 >>> 0 < 512;
 $27 = ($24 | 0) == 0;
 $28 = $27 & $26;
 $29 = $25 | $28;
 $or$cond = $22 & $29;
 if ($or$cond) {
  $30 = $0 & 7;
  $31 = ($30 | 0) == 0;
  $32 = 0 == 0;
  $33 = $31 & $32;
  $34 = _bitshift64Lshr($16 | 0, $19 | 0, 3) | 0;
  $35 = getTempRet0() | 0;
  $add$ptr = ($state + 160 | 0) + $34 | 0;
  $conv = 64 - $34 | 0;
  if ($33) {
   _memcpy($add$ptr | 0, $data | 0, $conv | 0) | 0;
  } else {
   $conv20 = $conv + 1 | 0;
   _memcpy($add$ptr | 0, $data | 0, $conv20 | 0) | 0;
  }
  $36 = $datasize_in_buffer;
  $37 = $36;
  $38 = HEAP32[$37 >> 2] | 0;
  $39 = $36 + 4 | 0;
  $40 = $39;
  $41 = HEAP32[$40 >> 2] | 0;
  $42 = _i64Add($38 | 0, $41 | 0, $0 | 0, $1 | 0) | 0;
  $43 = getTempRet0() | 0;
  $44 = $datasize_in_buffer;
  $45 = $44;
  HEAP32[$45 >> 2] = $42;
  $46 = $44 + 4 | 0;
  $47 = $46;
  HEAP32[$47 >> 2] = $43;
  $49 = $42;
  $51 = $43;
  $53 = 0;
  $54 = 0;
 } else {
  $49 = $16;
  $51 = $19;
  $53 = $0;
  $54 = $1;
 }
 $48 = ($49 | 0) != 0;
 $50 = ($51 | 0) != 0;
 $52 = $48 | $50;
 $55 = _i64Add($49 | 0, $51 | 0, $53 | 0, $54 | 0) | 0;
 $56 = getTempRet0() | 0;
 $57 = $56 >>> 0 > 0;
 $58 = $55 >>> 0 > 511;
 $59 = ($56 | 0) == 0;
 $60 = $59 & $58;
 $61 = $57 | $60;
 $or$cond2 = $52 & $61;
 if ($or$cond2) {
  $62 = _bitshift64Lshr($49 | 0, $51 | 0, 3) | 0;
  $63 = getTempRet0() | 0;
  $add$ptr38 = ($state + 160 | 0) + $62 | 0;
  $conv42 = 64 - $62 | 0;
  _memcpy($add$ptr38 | 0, $data | 0, $conv42 | 0) | 0;
  $64 = $datasize_in_buffer;
  $65 = $64;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $64 + 4 | 0;
  $68 = $67;
  $69 = HEAP32[$68 >> 2] | 0;
  $70 = _bitshift64Lshr($66 | 0, $69 | 0, 3) | 0;
  $71 = getTempRet0() | 0;
  $72 = _i64Subtract(64, 0, $70 | 0, $71 | 0) | 0;
  $73 = getTempRet0() | 0;
  $74 = _i64Add($53 | 0, $54 | 0, -512, -1) | 0;
  $75 = getTempRet0() | 0;
  $76 = _i64Add($74 | 0, $75 | 0, $66 | 0, $69 | 0) | 0;
  $77 = getTempRet0() | 0;
  _F8($state);
  $78 = $datasize_in_buffer;
  $79 = $78;
  HEAP32[$79 >> 2] = 0;
  $80 = $78 + 4 | 0;
  $81 = $80;
  HEAP32[$81 >> 2] = 0;
  $117 = $72;
  $118 = $73;
  $83 = $77;
  $85 = $76;
 } else {
  $117 = 0;
  $118 = 0;
  $83 = $54;
  $85 = $53;
 }
 $82 = $83 >>> 0 > 0;
 $84 = $85 >>> 0 > 511;
 $86 = ($83 | 0) == 0;
 $87 = $86 & $84;
 $88 = $82 | $87;
 if ($88) {
  $arraydecay54 = $state + 160 | 0;
  $89 = $117;
  $90 = $118;
  $93 = $85;
  $94 = $83;
  while (1) {
   $add$ptr56 = $data + $89 | 0;
   dest = $arraydecay54;
   src = $add$ptr56;
   stop = dest + 64 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   _F8($state);
   $91 = _i64Add($89 | 0, $90 | 0, 64, 0) | 0;
   $92 = getTempRet0() | 0;
   $95 = _i64Add($93 | 0, $94 | 0, -512, -1) | 0;
   $96 = getTempRet0() | 0;
   $97 = $96 >>> 0 > 0;
   $98 = $95 >>> 0 > 511;
   $99 = ($96 | 0) == 0;
   $100 = $99 & $98;
   $101 = $97 | $100;
   if ($101) {
    $89 = $91;
    $90 = $92;
    $93 = $95;
    $94 = $96;
   } else {
    break;
   }
  }
  $103 = $95;
  $105 = $96;
  $index$1$lcssa$off0 = $91;
 } else {
  $103 = $85;
  $105 = $83;
  $index$1$lcssa$off0 = $117;
 }
 $102 = ($103 | 0) == 0;
 $104 = ($105 | 0) == 0;
 $106 = $102 & $104;
 if ($106) {
  return;
 }
 $107 = $103 & 7;
 $108 = ($107 | 0) == 0;
 $109 = 0 == 0;
 $110 = $108 & $109;
 $arraydecay67 = $state + 160 | 0;
 $add$ptr69 = $data + $index$1$lcssa$off0 | 0;
 $111 = _bitshift64Lshr($103 | 0, $105 | 0, 3) | 0;
 $112 = getTempRet0() | 0;
 $conv72 = $111 & 63;
 if ($110) {
  _memcpy($arraydecay67 | 0, $add$ptr69 | 0, $conv72 | 0) | 0;
 } else {
  $conv81 = $conv72 + 1 | 0;
  _memcpy($arraydecay67 | 0, $add$ptr69 | 0, $conv81 | 0) | 0;
 }
 $113 = $datasize_in_buffer;
 $114 = $113;
 HEAP32[$114 >> 2] = $103;
 $115 = $113 + 4 | 0;
 $116 = $115;
 HEAP32[$116 >> 2] = $105;
 return;
}

function __ZN6Crypto10crypto_ops21prepareRingSignaturesENS_4HashENS_8KeyImageENSt3__26vectorINS_9PublicKeyENS3_9allocatorIS5_EEEEyNS_19EllipticCurveScalarERNS4_INS_9SignatureENS6_ISA_EEEE($prefixHash, $keyImage, $publicKeys, $0, $1, $k, $signatures) {
 $prefixHash = $prefixHash | 0;
 $keyImage = $keyImage | 0;
 $publicKeys = $publicKeys | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $k = $k | 0;
 $signatures = $signatures | 0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $__end_$i$i = 0, $ab = 0, $add$ptr = 0, $add$ptr21 = 0, $add$ptr27 = 0, $arrayidx$i107 = 0, $arrayidx$i117 = 0;
 var $arrayidx$i87 = 0, $call15 = 0, $call2 = 0, $call3 = 0, $call36 = 0, $cmp = 0, $cmp16 = 0, $cmp6 = 0, $cmp637 = 0, $h = 0, $i$038 = 0, $image_pre = 0, $image_unp = 0, $inc = 0, $retval$0 = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i51 = 0, $sub$ptr$div$i82 = 0, $sub$ptr$div$i82$lcssa = 0, $sub$ptr$sub$i = 0;
 var $sub$ptr$sub$i50 = 0, $sub$ptr$sub$i81 = 0, $sum = 0, $tmp2 = 0, $tmp3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1792 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1792 | 0);
 $image_unp = sp + 1560 | 0;
 $image_pre = sp;
 $sum = sp + 1752 | 0;
 $h = sp + 1720 | 0;
 $tmp2 = sp + 1440 | 0;
 $tmp3 = sp + 1280 | 0;
 $__end_$i$i = $signatures + 4 | 0;
 $2 = HEAP32[$signatures >> 2] | 0;
 HEAP32[$__end_$i$i >> 2] = $2;
 $__end_$i = $publicKeys + 4 | 0;
 $3 = HEAP32[$__end_$i >> 2] | 0;
 $4 = HEAP32[$publicKeys >> 2] | 0;
 $sub$ptr$sub$i = $3 - $4 | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE6resizeEm($signatures, $sub$ptr$div$i);
 __ZN6Crypto19EllipticCurveScalarC2Ev($sum);
 __ZN6Crypto19EllipticCurveScalarC2Ev($h);
 $5 = HEAP32[$__end_$i >> 2] | 0;
 $6 = HEAP32[$publicKeys >> 2] | 0;
 $sub$ptr$sub$i50 = $5 - $6 | 0;
 $sub$ptr$div$i51 = $sub$ptr$sub$i50 >> 5;
 $call2 = __ZN6CryptoL12rs_comm_sizeEm($sub$ptr$div$i51) | 0;
 $$alloca_mul = $call2;
 $7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul | 0) + 15 & -16 | 0);
 $call3 = _ge_frombytes_vartime($image_unp, $keyImage) | 0;
 $cmp = ($call3 | 0) == 0;
 if (!$cmp) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 _ge_dsm_precomp($image_pre, $image_unp);
 _sc_0($sum);
 dest = $7;
 src = $prefixHash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $8 = HEAP32[$__end_$i >> 2] | 0;
 $9 = HEAP32[$publicKeys >> 2] | 0;
 $cmp637 = ($8 | 0) == ($9 | 0);
 L4 : do {
  if ($cmp637) {
   $sub$ptr$div$i82$lcssa = 0;
  } else {
   $ab = $7 + 32 | 0;
   $i$038 = 0;
   while (1) {
    $10 = ($i$038 | 0) == ($0 | 0);
    $11 = 0 == ($1 | 0);
    $12 = $10 & $11;
    if ($12) {
     _ge_scalarmult_base($tmp3, $k);
     $13 = $ab + ($i$038 << 6) | 0;
     _ge_p3_tobytes($13, $tmp3);
     $14 = HEAP32[$publicKeys >> 2] | 0;
     $arrayidx$i107 = $14 + ($i$038 << 5) | 0;
     __ZN6CryptoL10hash_to_ecERKNS_9PublicKeyERNS_5ge_p3E($arrayidx$i107, $tmp3);
     _ge_scalarmult($tmp2, $k, $tmp3);
     $15 = ($ab + ($i$038 << 6) | 0) + 32 | 0;
     _ge_tobytes($15, $tmp2);
    } else {
     $16 = HEAP32[$signatures >> 2] | 0;
     $arrayidx$i117 = $16 + ($i$038 << 6) | 0;
     __ZN6CryptoL13random_scalarERNS_19EllipticCurveScalarE($arrayidx$i117);
     $17 = HEAP32[$signatures >> 2] | 0;
     $add$ptr = ($17 + ($i$038 << 6) | 0) + 32 | 0;
     __ZN6CryptoL13random_scalarERNS_19EllipticCurveScalarE($add$ptr);
     $18 = HEAP32[$publicKeys >> 2] | 0;
     $19 = $18 + ($i$038 << 5) | 0;
     $call15 = _ge_frombytes_vartime($tmp3, $19) | 0;
     $cmp16 = ($call15 | 0) == 0;
     if (!$cmp16) {
      $retval$0 = 0;
      break;
     }
     $20 = HEAP32[$signatures >> 2] | 0;
     $21 = $20 + ($i$038 << 6) | 0;
     $add$ptr21 = ($20 + ($i$038 << 6) | 0) + 32 | 0;
     _ge_double_scalarmult_base_vartime($tmp2, $21, $tmp3, $add$ptr21);
     $22 = $ab + ($i$038 << 6) | 0;
     _ge_tobytes($22, $tmp2);
     $23 = HEAP32[$publicKeys >> 2] | 0;
     $arrayidx$i87 = $23 + ($i$038 << 5) | 0;
     __ZN6CryptoL10hash_to_ecERKNS_9PublicKeyERNS_5ge_p3E($arrayidx$i87, $tmp3);
     $24 = HEAP32[$signatures >> 2] | 0;
     $25 = $24 + ($i$038 << 6) | 0;
     $add$ptr27 = ($24 + ($i$038 << 6) | 0) + 32 | 0;
     _ge_double_scalarmult_precomp_vartime($tmp2, $add$ptr27, $tmp3, $25, $image_pre);
     $26 = ($ab + ($i$038 << 6) | 0) + 32 | 0;
     _ge_tobytes($26, $tmp2);
     $27 = HEAP32[$signatures >> 2] | 0;
     $28 = $27 + ($i$038 << 6) | 0;
     _sc_add($sum, $sum, $28);
    }
    $inc = $i$038 + 1 | 0;
    $29 = HEAP32[$__end_$i >> 2] | 0;
    $30 = HEAP32[$publicKeys >> 2] | 0;
    $sub$ptr$sub$i81 = $29 - $30 | 0;
    $sub$ptr$div$i82 = $sub$ptr$sub$i81 >> 5;
    $cmp6 = $inc >>> 0 < $sub$ptr$div$i82 >>> 0;
    if ($cmp6) {
     $i$038 = $inc;
    } else {
     $sub$ptr$div$i82$lcssa = $sub$ptr$div$i82;
     break L4;
    }
   }
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 } while (0);
 $call36 = __ZN6CryptoL12rs_comm_sizeEm($sub$ptr$div$i82$lcssa) | 0;
 __ZN6CryptoL14hash_to_scalarEPKvmRNS_19EllipticCurveScalarE($7, $call36, $h);
 $31 = HEAP32[$signatures >> 2] | 0;
 $32 = $31 + ($0 << 6) | 0;
 _sc_sub($32, $h, $sum);
 $retval$0 = 1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _ge_scalarmult($r, $a, $A) {
 $r = $r | 0;
 $a = $a | 0;
 $A = $A | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $Ai = 0, $add = 0, $add1 = 0, $add10 = 0, $add14 = 0, $add15 = 0, $add4 = 0, $and = 0, $arraydecay62 = 0, $arraydecay64 = 0, $arraydecay67 = 0, $arraydecay69 = 0, $arraydecay70 = 0, $arraydecay72 = 0, $arrayidx = 0;
 var $arrayidx11 = 0, $arrayidx12 = 0, $arrayidx20 = 0, $arrayidx22 = 0, $arrayidx3 = 0, $arrayidx30 = 0, $arrayidx30$1 = 0, $arrayidx30$2 = 0, $arrayidx30$3 = 0, $arrayidx30$4 = 0, $arrayidx30$5 = 0, $arrayidx30$6 = 0, $arrayidx38$phi$trans$insert = 0, $call = 0, $call47 = 0, $call49 = 0, $call51 = 0, $call53 = 0, $call55 = 0, $call57 = 0;
 var $call59 = 0, $call61 = 0, $carry$044 = 0, $cmp35 = 0, $conv = 0, $conv13 = 0, $conv19 = 0, $conv2 = 0, $conv21 = 0, $conv39 = 0, $conv40 = 0, $conv45 = 0, $conv8 = 0, $cur = 0, $dec = 0, $e = 0, $exitcond = 0, $i$043 = 0, $i$241 = 0, $inc = 0;
 var $minuscur = 0, $mul = 0, $shl = 0, $shl17 = 0, $shl43 = 0, $shl6 = 0, $shr = 0, $shr5 = 0, $sub = 0, $sub18 = 0, $sub41 = 0, $sub44 = 0, $sub7 = 0, $t = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1984 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1984 | 0);
 $e = sp + 1280 | 0;
 $Ai = sp;
 $t = sp + 1824 | 0;
 $u = sp + 1664 | 0;
 $cur = sp + 1504 | 0;
 $minuscur = sp + 1344 | 0;
 $carry$044 = 0;
 $i$043 = 0;
 while (1) {
  $arrayidx = $a + $i$043 | 0;
  $0 = HEAP8[$arrayidx >> 0] | 0;
  $conv = $0 & 255;
  $add = $carry$044 + $conv | 0;
  $add1 = $add + 8 | 0;
  $shr = $add1 >> 4;
  $shl = $add1 & 240;
  $sub = $add - $shl | 0;
  $conv2 = $sub & 255;
  $mul = $i$043 << 1;
  $arrayidx3 = $e + $mul | 0;
  HEAP8[$arrayidx3 >> 0] = $conv2;
  $add4 = $shr + 8 | 0;
  $shr5 = $add4 >> 4;
  $shl6 = $add4 & 240;
  $sub7 = $shr - $shl6 | 0;
  $conv8 = $sub7 & 255;
  $add10 = $mul | 1;
  $arrayidx11 = $e + $add10 | 0;
  HEAP8[$arrayidx11 >> 0] = $conv8;
  $inc = $i$043 + 1 | 0;
  $exitcond = ($inc | 0) == 31;
  if ($exitcond) {
   break;
  } else {
   $carry$044 = $shr5;
   $i$043 = $inc;
  }
 }
 $arrayidx12 = $a + 31 | 0;
 $1 = HEAP8[$arrayidx12 >> 0] | 0;
 $conv13 = $1 & 255;
 $add14 = $shr5 + $conv13 | 0;
 $add15 = $add14 + 8 | 0;
 $2 = $add15 >>> 4;
 $shl17 = $add15 & 240;
 $sub18 = $add14 - $shl17 | 0;
 $conv19 = $sub18 & 255;
 $arrayidx20 = $e + 62 | 0;
 HEAP8[$arrayidx20 >> 0] = $conv19;
 $conv21 = $2 & 255;
 $arrayidx22 = $e + 63 | 0;
 HEAP8[$arrayidx22 >> 0] = $conv21;
 _ge_p3_to_cached($Ai, $A);
 _ge_add($t, $A, $Ai);
 _ge_p1p1_to_p3($u, $t);
 $arrayidx30 = $Ai + 160 | 0;
 _ge_p3_to_cached($arrayidx30, $u);
 _ge_add($t, $A, $arrayidx30);
 _ge_p1p1_to_p3($u, $t);
 $arrayidx30$1 = $Ai + 320 | 0;
 _ge_p3_to_cached($arrayidx30$1, $u);
 _ge_add($t, $A, $arrayidx30$1);
 _ge_p1p1_to_p3($u, $t);
 $arrayidx30$2 = $Ai + 480 | 0;
 _ge_p3_to_cached($arrayidx30$2, $u);
 _ge_add($t, $A, $arrayidx30$2);
 _ge_p1p1_to_p3($u, $t);
 $arrayidx30$3 = $Ai + 640 | 0;
 _ge_p3_to_cached($arrayidx30$3, $u);
 _ge_add($t, $A, $arrayidx30$3);
 _ge_p1p1_to_p3($u, $t);
 $arrayidx30$4 = $Ai + 800 | 0;
 _ge_p3_to_cached($arrayidx30$4, $u);
 _ge_add($t, $A, $arrayidx30$4);
 _ge_p1p1_to_p3($u, $t);
 $arrayidx30$5 = $Ai + 960 | 0;
 _ge_p3_to_cached($arrayidx30$5, $u);
 _ge_add($t, $A, $arrayidx30$5);
 _ge_p1p1_to_p3($u, $t);
 $arrayidx30$6 = $Ai + 1120 | 0;
 _ge_p3_to_cached($arrayidx30$6, $u);
 _ge_p2_0($r);
 $arraydecay62 = $cur + 40 | 0;
 $arraydecay64 = $minuscur + 40 | 0;
 $arraydecay67 = $minuscur + 80 | 0;
 $arraydecay69 = $cur + 80 | 0;
 $arraydecay70 = $minuscur + 120 | 0;
 $arraydecay72 = $cur + 120 | 0;
 $3 = $conv21;
 $i$241 = 63;
 while (1) {
  $call = _negative($3) | 0;
  $conv39 = $3 << 24 >> 24;
  $conv40 = $call & 255;
  $sub41 = 0 - $conv40 | 0;
  $and = $sub41 & $conv39;
  $shl43 = $and << 1;
  $sub44 = $conv39 - $shl43 | 0;
  $conv45 = $sub44 & 255;
  _ge_p2_dbl($t, $r);
  _ge_p1p1_to_p2($r, $t);
  _ge_p2_dbl($t, $r);
  _ge_p1p1_to_p2($r, $t);
  _ge_p2_dbl($t, $r);
  _ge_p1p1_to_p2($r, $t);
  _ge_p2_dbl($t, $r);
  _ge_p1p1_to_p3($u, $t);
  _ge_cached_0($cur);
  $call47 = _equal($conv45, 1) | 0;
  _ge_cached_cmov($cur, $Ai, $call47);
  $call49 = _equal($conv45, 2) | 0;
  _ge_cached_cmov($cur, $arrayidx30, $call49);
  $call51 = _equal($conv45, 3) | 0;
  _ge_cached_cmov($cur, $arrayidx30$1, $call51);
  $call53 = _equal($conv45, 4) | 0;
  _ge_cached_cmov($cur, $arrayidx30$2, $call53);
  $call55 = _equal($conv45, 5) | 0;
  _ge_cached_cmov($cur, $arrayidx30$3, $call55);
  $call57 = _equal($conv45, 6) | 0;
  _ge_cached_cmov($cur, $arrayidx30$4, $call57);
  $call59 = _equal($conv45, 7) | 0;
  _ge_cached_cmov($cur, $arrayidx30$5, $call59);
  $call61 = _equal($conv45, 8) | 0;
  _ge_cached_cmov($cur, $arrayidx30$6, $call61);
  _fe_copy($minuscur, $arraydecay62);
  _fe_copy($arraydecay64, $cur);
  _fe_copy($arraydecay67, $arraydecay69);
  _fe_neg($arraydecay70, $arraydecay72);
  _ge_cached_cmov($cur, $minuscur, $call);
  _ge_add($t, $u, $cur);
  _ge_p1p1_to_p2($r, $t);
  $dec = $i$241 + -1 | 0;
  $cmp35 = ($i$241 | 0) == 0;
  if ($cmp35) {
   break;
  }
  $arrayidx38$phi$trans$insert = $e + $dec | 0;
  $$pre = HEAP8[$arrayidx38$phi$trans$insert >> 0] | 0;
  $3 = $$pre;
  $i$241 = $dec;
 }
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_count = 0, $__flags = 0, $add$ptr = 0, $and = 0;
 var $and44 = 0, $arraydecay = 0, $call = 0, $cmp = 0, $cmp33 = 0, $cmp70 = 0, $found_any_static_type$0 = 0, $found_any_static_type$1$off0 = 0, $found_any_static_type$1$off0$in = 0, $found_any_static_type5 = 0, $found_our_static_ptr$0 = 0, $found_our_static_ptr$1$off0 = 0, $found_our_static_ptr$1$off0$in = 0, $found_our_static_ptr2 = 0, $frombool74 = 0, $frombool77 = 0, $incdec$ptr = 0, $incdec$ptr69 = 0, $or2438 = 0, $or37 = 0;
 var $or5850 = 0, $or6651 = 0, $p$0 = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0, $static_type = 0, $tobool28 = 0, $tobool31 = 0, $tobool36 = 0, $tobool41 = 0, $tobool45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = $info + 8 | 0;
 $0 = HEAP32[$static_type >> 2] | 0;
 $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, $use_strcmp) | 0;
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info, $dst_ptr, $current_ptr, $path_below);
 } else {
  $found_our_static_ptr2 = $info + 52 | 0;
  $1 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
  $found_any_static_type5 = $info + 53 | 0;
  $2 = HEAP8[$found_any_static_type5 >> 0] | 0;
  $arraydecay = $this + 16 | 0;
  $__base_count = $this + 12 | 0;
  $3 = HEAP32[$__base_count >> 2] | 0;
  $add$ptr = ($this + 16 | 0) + ($3 << 3) | 0;
  HEAP8[$found_our_static_ptr2 >> 0] = 0;
  HEAP8[$found_any_static_type5 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($arraydecay, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
  $4 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
  $or37 = $4 | $1;
  $5 = HEAP8[$found_any_static_type5 >> 0] | 0;
  $or2438 = $5 | $2;
  $cmp = ($3 | 0) > 1;
  L4 : do {
   if ($cmp) {
    $incdec$ptr = $this + 24 | 0;
    $path_dst_ptr_to_static_ptr = $info + 24 | 0;
    $__flags = $this + 8 | 0;
    $search_done = $info + 54 | 0;
    $12 = $5;
    $9 = $4;
    $found_any_static_type$0 = $or2438;
    $found_our_static_ptr$0 = $or37;
    $p$0 = $incdec$ptr;
    while (1) {
     $6 = HEAP8[$search_done >> 0] | 0;
     $tobool28 = $6 << 24 >> 24 == 0;
     $7 = $found_any_static_type$0 & 1;
     $8 = $found_our_static_ptr$0 & 1;
     if (!$tobool28) {
      $found_any_static_type$1$off0$in = $7;
      $found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
     $tobool31 = $9 << 24 >> 24 == 0;
     if ($tobool31) {
      $tobool41 = $12 << 24 >> 24 == 0;
      if (!$tobool41) {
       $13 = HEAP32[$__flags >> 2] | 0;
       $and44 = $13 & 1;
       $tobool45 = ($and44 | 0) == 0;
       if ($tobool45) {
        $found_any_static_type$1$off0$in = $7;
        $found_our_static_ptr$1$off0$in = $8;
        break L4;
       }
      }
     } else {
      $10 = HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
      $cmp33 = ($10 | 0) == 1;
      if ($cmp33) {
       $found_any_static_type$1$off0$in = $7;
       $found_our_static_ptr$1$off0$in = $8;
       break L4;
      }
      $11 = HEAP32[$__flags >> 2] | 0;
      $and = $11 & 2;
      $tobool36 = ($and | 0) == 0;
      if ($tobool36) {
       $found_any_static_type$1$off0$in = $7;
       $found_our_static_ptr$1$off0$in = $8;
       break L4;
      }
     }
     HEAP8[$found_our_static_ptr2 >> 0] = 0;
     HEAP8[$found_any_static_type5 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
     $14 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
     $or5850 = $14 | $8;
     $15 = HEAP8[$found_any_static_type5 >> 0] | 0;
     $or6651 = $15 | $7;
     $incdec$ptr69 = $p$0 + 8 | 0;
     $cmp70 = $incdec$ptr69 >>> 0 < $add$ptr >>> 0;
     if ($cmp70) {
      $12 = $15;
      $9 = $14;
      $found_any_static_type$0 = $or6651;
      $found_our_static_ptr$0 = $or5850;
      $p$0 = $incdec$ptr69;
     } else {
      $found_any_static_type$1$off0$in = $or6651;
      $found_our_static_ptr$1$off0$in = $or5850;
      break;
     }
    }
   } else {
    $found_any_static_type$1$off0$in = $or2438;
    $found_our_static_ptr$1$off0$in = $or37;
   }
  } while (0);
  $found_our_static_ptr$1$off0 = $found_our_static_ptr$1$off0$in << 24 >> 24 != 0;
  $found_any_static_type$1$off0 = $found_any_static_type$1$off0$in << 24 >> 24 != 0;
  $frombool74 = $found_our_static_ptr$1$off0 & 1;
  HEAP8[$found_our_static_ptr2 >> 0] = $frombool74;
  $frombool77 = $found_any_static_type$1$off0 & 1;
  HEAP8[$found_any_static_type5 >> 0] = $frombool77;
 }
 return;
}

function _OutputTransformation($ctx) {
 $ctx = $ctx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx24$1 = 0, $arrayidx24$10 = 0, $arrayidx24$11 = 0, $arrayidx24$12 = 0, $arrayidx24$13 = 0, $arrayidx24$14 = 0, $arrayidx24$15 = 0, $arrayidx24$2 = 0;
 var $arrayidx24$3 = 0, $arrayidx24$4 = 0, $arrayidx24$5 = 0, $arrayidx24$6 = 0, $arrayidx24$7 = 0, $arrayidx24$8 = 0, $arrayidx24$9 = 0, $arrayidx26$1 = 0, $arrayidx26$10 = 0, $arrayidx26$11 = 0, $arrayidx26$12 = 0, $arrayidx26$13 = 0, $arrayidx26$14 = 0, $arrayidx26$15 = 0, $arrayidx26$2 = 0, $arrayidx26$3 = 0, $arrayidx26$4 = 0, $arrayidx26$5 = 0, $arrayidx26$6 = 0, $arrayidx26$7 = 0;
 var $arrayidx26$8 = 0, $arrayidx26$9 = 0, $temp = 0, $xor = 0, $xor$1 = 0, $xor$10 = 0, $xor$11 = 0, $xor$12 = 0, $xor$13 = 0, $xor$14 = 0, $xor$15 = 0, $xor$2 = 0, $xor$3 = 0, $xor$4 = 0, $xor$5 = 0, $xor$6 = 0, $xor$7 = 0, $xor$8 = 0, $xor$9 = 0, $y = 0;
 var $z = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192 | 0);
 $temp = sp + 128 | 0;
 $y = sp + 64 | 0;
 $z = sp;
 dest = $temp;
 src = $ctx;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _RND512P($temp, $y, 0);
 _RND512P($y, $z, 1);
 _RND512P($z, $y, 2);
 _RND512P($y, $z, 3);
 _RND512P($z, $y, 4);
 _RND512P($y, $z, 5);
 _RND512P($z, $y, 6);
 _RND512P($y, $z, 7);
 _RND512P($z, $y, 8);
 _RND512P($y, $temp, 9);
 $0 = HEAP32[$temp >> 2] | 0;
 $1 = HEAP32[$ctx >> 2] | 0;
 $xor = $1 ^ $0;
 HEAP32[$ctx >> 2] = $xor;
 $arrayidx24$1 = $temp + 4 | 0;
 $2 = HEAP32[$arrayidx24$1 >> 2] | 0;
 $arrayidx26$1 = $ctx + 4 | 0;
 $3 = HEAP32[$arrayidx26$1 >> 2] | 0;
 $xor$1 = $3 ^ $2;
 HEAP32[$arrayidx26$1 >> 2] = $xor$1;
 $arrayidx24$2 = $temp + 8 | 0;
 $4 = HEAP32[$arrayidx24$2 >> 2] | 0;
 $arrayidx26$2 = $ctx + 8 | 0;
 $5 = HEAP32[$arrayidx26$2 >> 2] | 0;
 $xor$2 = $5 ^ $4;
 HEAP32[$arrayidx26$2 >> 2] = $xor$2;
 $arrayidx24$3 = $temp + 12 | 0;
 $6 = HEAP32[$arrayidx24$3 >> 2] | 0;
 $arrayidx26$3 = $ctx + 12 | 0;
 $7 = HEAP32[$arrayidx26$3 >> 2] | 0;
 $xor$3 = $7 ^ $6;
 HEAP32[$arrayidx26$3 >> 2] = $xor$3;
 $arrayidx24$4 = $temp + 16 | 0;
 $8 = HEAP32[$arrayidx24$4 >> 2] | 0;
 $arrayidx26$4 = $ctx + 16 | 0;
 $9 = HEAP32[$arrayidx26$4 >> 2] | 0;
 $xor$4 = $9 ^ $8;
 HEAP32[$arrayidx26$4 >> 2] = $xor$4;
 $arrayidx24$5 = $temp + 20 | 0;
 $10 = HEAP32[$arrayidx24$5 >> 2] | 0;
 $arrayidx26$5 = $ctx + 20 | 0;
 $11 = HEAP32[$arrayidx26$5 >> 2] | 0;
 $xor$5 = $11 ^ $10;
 HEAP32[$arrayidx26$5 >> 2] = $xor$5;
 $arrayidx24$6 = $temp + 24 | 0;
 $12 = HEAP32[$arrayidx24$6 >> 2] | 0;
 $arrayidx26$6 = $ctx + 24 | 0;
 $13 = HEAP32[$arrayidx26$6 >> 2] | 0;
 $xor$6 = $13 ^ $12;
 HEAP32[$arrayidx26$6 >> 2] = $xor$6;
 $arrayidx24$7 = $temp + 28 | 0;
 $14 = HEAP32[$arrayidx24$7 >> 2] | 0;
 $arrayidx26$7 = $ctx + 28 | 0;
 $15 = HEAP32[$arrayidx26$7 >> 2] | 0;
 $xor$7 = $15 ^ $14;
 HEAP32[$arrayidx26$7 >> 2] = $xor$7;
 $arrayidx24$8 = $temp + 32 | 0;
 $16 = HEAP32[$arrayidx24$8 >> 2] | 0;
 $arrayidx26$8 = $ctx + 32 | 0;
 $17 = HEAP32[$arrayidx26$8 >> 2] | 0;
 $xor$8 = $17 ^ $16;
 HEAP32[$arrayidx26$8 >> 2] = $xor$8;
 $arrayidx24$9 = $temp + 36 | 0;
 $18 = HEAP32[$arrayidx24$9 >> 2] | 0;
 $arrayidx26$9 = $ctx + 36 | 0;
 $19 = HEAP32[$arrayidx26$9 >> 2] | 0;
 $xor$9 = $19 ^ $18;
 HEAP32[$arrayidx26$9 >> 2] = $xor$9;
 $arrayidx24$10 = $temp + 40 | 0;
 $20 = HEAP32[$arrayidx24$10 >> 2] | 0;
 $arrayidx26$10 = $ctx + 40 | 0;
 $21 = HEAP32[$arrayidx26$10 >> 2] | 0;
 $xor$10 = $21 ^ $20;
 HEAP32[$arrayidx26$10 >> 2] = $xor$10;
 $arrayidx24$11 = $temp + 44 | 0;
 $22 = HEAP32[$arrayidx24$11 >> 2] | 0;
 $arrayidx26$11 = $ctx + 44 | 0;
 $23 = HEAP32[$arrayidx26$11 >> 2] | 0;
 $xor$11 = $23 ^ $22;
 HEAP32[$arrayidx26$11 >> 2] = $xor$11;
 $arrayidx24$12 = $temp + 48 | 0;
 $24 = HEAP32[$arrayidx24$12 >> 2] | 0;
 $arrayidx26$12 = $ctx + 48 | 0;
 $25 = HEAP32[$arrayidx26$12 >> 2] | 0;
 $xor$12 = $25 ^ $24;
 HEAP32[$arrayidx26$12 >> 2] = $xor$12;
 $arrayidx24$13 = $temp + 52 | 0;
 $26 = HEAP32[$arrayidx24$13 >> 2] | 0;
 $arrayidx26$13 = $ctx + 52 | 0;
 $27 = HEAP32[$arrayidx26$13 >> 2] | 0;
 $xor$13 = $27 ^ $26;
 HEAP32[$arrayidx26$13 >> 2] = $xor$13;
 $arrayidx24$14 = $temp + 56 | 0;
 $28 = HEAP32[$arrayidx24$14 >> 2] | 0;
 $arrayidx26$14 = $ctx + 56 | 0;
 $29 = HEAP32[$arrayidx26$14 >> 2] | 0;
 $xor$14 = $29 ^ $28;
 HEAP32[$arrayidx26$14 >> 2] = $xor$14;
 $arrayidx24$15 = $temp + 60 | 0;
 $30 = HEAP32[$arrayidx24$15 >> 2] | 0;
 $arrayidx26$15 = $ctx + 60 | 0;
 $31 = HEAP32[$arrayidx26$15 >> 2] | 0;
 $xor$15 = $31 ^ $30;
 HEAP32[$arrayidx26$15 >> 2] = $xor$15;
 STACKTOP = sp;
 return;
}

function _tree_branch($hashes, $count, $branch) {
 $hashes = $hashes | 0;
 $count = $count | 0;
 $branch = $branch | 0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$1 = 0, $add$2 = 0, $add$3 = 0, $add$4 = 0, $add32 = 0, $add64 = 0;
 var $arraydecay = 0, $arraydecay30 = 0, $arraydecay51 = 0, $arraydecay60 = 0, $arraydecay62 = 0, $call = 0, $cmp = 0, $cmp10 = 0, $cmp2 = 0, $cmp2$1 = 0, $cmp2$2 = 0, $cmp2$3 = 0, $cmp2$4 = 0, $cmp2648 = 0, $cmp34 = 0, $cmp39 = 0, $cmp3945 = 0, $cmp5642 = 0, $cnt$246 = 0, $dec = 0;
 var $depth$247 = 0, $exitcond = 0, $exitcond54 = 0, $i$150 = 0, $i$244 = 0, $inc = 0, $inc65 = 0, $j$049 = 0, $j$143 = 0, $mul = 0, $mul15 = 0, $mul18 = 0, $not$cmp2$4 = 0, $shl$1 = 0, $shl$2 = 0, $shl$3 = 0, $shl$4 = 0, $shr49 = 0, $spec$select = 0, $spec$select$1 = 0;
 var $spec$select$2 = 0, $spec$select$3 = 0, $spec$select$4 = 0, $spec$select41$1 = 0, $spec$select41$2 = 0, $spec$select41$3 = 0, $spec$select41$4 = 0, $sub = 0, $sub16 = 0, $sub17 = 0, $sub55 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $cmp = ($count | 0) == 0;
 if ($cmp) {
  ___assert_fail(46179 | 0, 46189 | 0, 87, 46274 | 0);
 }
 $cmp2 = $count >>> 0 < 65536;
 $spec$select = $cmp2 ? 1 : 65536;
 $add = $cmp2 ? 0 : 16;
 $shl$1 = $spec$select << 8;
 $cmp2$1 = $shl$1 >>> 0 > $count >>> 0;
 $spec$select$1 = $cmp2$1 ? $spec$select : $shl$1;
 $add$1 = $cmp2$1 ? 0 : 8;
 $spec$select41$1 = $add$1 | $add;
 $shl$2 = $spec$select$1 << 4;
 $cmp2$2 = $shl$2 >>> 0 > $count >>> 0;
 $spec$select$2 = $cmp2$2 ? $spec$select$1 : $shl$2;
 $add$2 = $cmp2$2 ? 0 : 4;
 $spec$select41$2 = $add$2 | $spec$select41$1;
 $shl$3 = $spec$select$2 << 2;
 $cmp2$3 = $shl$3 >>> 0 > $count >>> 0;
 $spec$select$3 = $cmp2$3 ? $spec$select$2 : $shl$3;
 $add$3 = $cmp2$3 ? 0 : 2;
 $spec$select41$3 = $add$3 | $spec$select41$2;
 $shl$4 = $spec$select$3 << 1;
 $cmp2$4 = $shl$4 >>> 0 > $count >>> 0;
 $spec$select$4 = $cmp2$4 ? $spec$select$3 : $shl$4;
 $not$cmp2$4 = $cmp2$4 ^ 1;
 $add$4 = $not$cmp2$4 & 1;
 $spec$select41$4 = $spec$select41$3 | $add$4;
 $0 = _bitshift64Shl(1, 0, $spec$select41$4 | 0) | 0;
 $1 = getTempRet0() | 0;
 $2 = ($0 | 0) == ($spec$select$4 | 0);
 $3 = ($1 | 0) == 0;
 $4 = $2 & $3;
 if (!$4) {
  ___assert_fail(46286 | 0, 46189 | 0, 96, 46274 | 0);
 }
 $call = _tree_depth($count) | 0;
 $cmp10 = ($spec$select41$4 | 0) == ($call | 0);
 if (!$cmp10) {
  ___assert_fail(46307 | 0, 46189 | 0, 97, 46274 | 0);
 }
 $sub = $spec$select$4 + -1 | 0;
 $mul = $sub << 5;
 $$alloca_mul = $mul;
 $5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul | 0) + 15 & -16 | 0);
 $6 = $hashes + 32 | 0;
 $mul15 = $spec$select$4 << 1;
 $sub16 = $mul15 - $count | 0;
 $sub17 = $sub16 + -1 | 0;
 $mul18 = $sub17 << 5;
 _memcpy($5 | 0, $6 | 0, $mul18 | 0) | 0;
 $cmp2648 = $sub17 >>> 0 < $sub >>> 0;
 if ($cmp2648) {
  $i$150 = $sub16;
  $j$049 = $sub17;
  while (1) {
   $arraydecay = $hashes + ($i$150 << 5) | 0;
   $arraydecay30 = $5 + ($j$049 << 5) | 0;
   _cn_fast_hash($arraydecay, 64, $arraydecay30);
   $add32 = $i$150 + 2 | 0;
   $inc = $j$049 + 1 | 0;
   $exitcond54 = ($inc | 0) == ($sub | 0);
   if ($exitcond54) {
    break;
   } else {
    $i$150 = $add32;
    $j$049 = $inc;
   }
  }
 } else {
  $cmp34 = ($sub16 | 0) == ($count | 0);
  if (!$cmp34) {
   ___assert_fail(46252 | 0, 46189 | 0, 104, 46274 | 0);
  }
 }
 $cmp3945 = ($spec$select41$4 | 0) == 0;
 if ($cmp3945) {
  STACKTOP = sp;
  return;
 }
 $cnt$246 = $spec$select$4;
 $depth$247 = $spec$select41$4;
 while (1) {
  $7 = _bitshift64Shl(1, 0, $depth$247 | 0) | 0;
  $8 = getTempRet0() | 0;
  $9 = ($7 | 0) == ($cnt$246 | 0);
  $10 = ($8 | 0) == 0;
  $11 = $9 & $10;
  if (!$11) {
   label = 15;
   break;
  }
  $shr49 = $cnt$246 >>> 1;
  $dec = $depth$247 + -1 | 0;
  $arraydecay51 = $branch + ($dec << 5) | 0;
  dest = $arraydecay51;
  src = $5;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $sub55 = $shr49 + -1 | 0;
  $cmp5642 = ($sub55 | 0) == 0;
  if (!$cmp5642) {
   $i$244 = 1;
   $j$143 = 0;
   while (1) {
    $arraydecay60 = $5 + ($i$244 << 5) | 0;
    $arraydecay62 = $5 + ($j$143 << 5) | 0;
    _cn_fast_hash($arraydecay60, 64, $arraydecay62);
    $add64 = $i$244 + 2 | 0;
    $inc65 = $j$143 + 1 | 0;
    $exitcond = ($inc65 | 0) == ($sub55 | 0);
    if ($exitcond) {
     break;
    } else {
     $i$244 = $add64;
     $j$143 = $inc65;
    }
   }
  }
  $cmp39 = ($dec | 0) == 0;
  if ($cmp39) {
   label = 20;
   break;
  } else {
   $cnt$246 = $shr49;
   $depth$247 = $dec;
  }
 }
 if ((label | 0) == 15) {
  ___assert_fail(46286 | 0, 46189 | 0, 107, 46274 | 0);
 } else if ((label | 0) == 20) {
  STACKTOP = sp;
  return;
 }
}

function __ZN4Core12Cryptography21prepareRingSignaturesENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEEyRSA_RS7_($prefixHash, $keyImage, $publicKeys, $0, $1, $signatures, $k) {
 $prefixHash = $prefixHash | 0;
 $keyImage = $keyImage | 0;
 $publicKeys = $publicKeys | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $signatures = $signatures | 0;
 $k = $k | 0;
 var $$pr = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cap_$i$i$i$i$i = 0, $__end_$i$i = 0, $__end_$i$i42 = 0, $__size_$i$i$i$i$i = 0, $__size_$i45$i$i$i$i = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i46 = 0, $agg$tmp5 = 0, $l_k = 0, $l_keyImage = 0, $l_keyImage$byval_copy = 0, $l_prefixHash = 0, $l_prefixHash$byval_copy = 0, $l_publicKeys = 0, $l_signatures = 0;
 var $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208 | 0);
 $l_keyImage$byval_copy = sp + 176 | 0;
 $l_prefixHash$byval_copy = sp + 144 | 0;
 $l_prefixHash = sp + 112 | 0;
 $l_keyImage = sp + 80 | 0;
 $l_publicKeys = sp + 36 | 0;
 $l_signatures = sp + 24 | 0;
 $l_k = sp + 48 | 0;
 $agg$tmp5 = sp + 12 | 0;
 $ref$tmp = sp;
 __ZN6Crypto4HashC2Ev($l_prefixHash);
 __ZN6Common10podFromHexIN6Crypto4HashEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($prefixHash, $l_prefixHash);
 __ZN6Crypto8KeyImageC2Ev($l_keyImage);
 __ZN6Common10podFromHexIN6Crypto8KeyImageEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($keyImage, $l_keyImage);
 HEAP32[$l_publicKeys >> 2] = 0;
 $__end_$i$i = $l_publicKeys + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $l_publicKeys + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 __ZN4Core13toTypedVectorIN6Crypto9PublicKeyEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($publicKeys, $l_publicKeys);
 HEAP32[$l_signatures >> 2] = 0;
 $__end_$i$i42 = $l_signatures + 4 | 0;
 HEAP32[$__end_$i$i42 >> 2] = 0;
 $__value_$i$i$i$i46 = $l_signatures + 8 | 0;
 HEAP32[$__value_$i$i$i$i46 >> 2] = 0;
 __ZN6Crypto19EllipticCurveScalarC2Ev($l_k);
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEEC2ERKS5_($agg$tmp5, $l_publicKeys);
 dest = $l_prefixHash$byval_copy;
 src = $l_prefixHash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $l_keyImage$byval_copy;
 src = $l_keyImage;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $2 = __ZN6Crypto10crypto_ops21prepareRingSignaturesENS_4HashENS_8KeyImageENSt3__26vectorINS_9PublicKeyENS3_9allocatorIS5_EEEEyRNS4_INS_9SignatureENS6_IS9_EEEERNS_19EllipticCurveScalarE($l_prefixHash$byval_copy, $l_keyImage$byval_copy, $agg$tmp5, $0, $1, $l_signatures, $l_k) | 0;
 __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($agg$tmp5);
 if (!$2) {
  __ZNSt3__213__vector_baseIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($l_signatures);
  __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($l_publicKeys);
  STACKTOP = sp;
  return;
 }
 __ZN4Core14toStringVectorIN6Crypto9SignatureEEEvRKNSt3__26vectorIT_NS3_9allocatorIS5_EEEERNS4_INS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEENS6_ISF_EEEE($l_signatures, $signatures);
 __ZN6Common8podToHexIN6Crypto19EllipticCurveScalarEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($ref$tmp, $l_k);
 $__size_$i$i$i$i$i = $k + 11 | 0;
 $3 = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
 $tobool$i$i$i$i$i = $3 << 24 >> 24 < 0;
 if ($tobool$i$i$i$i$i) {
  $4 = HEAP32[$k >> 2] | 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($4, 0);
  $__size_$i45$i$i$i$i = $k + 4 | 0;
  HEAP32[$__size_$i45$i$i$i$i >> 2] = 0;
  $$pr = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
  $tobool$i$i$i$i = $$pr << 24 >> 24 < 0;
  if ($tobool$i$i$i$i) {
   $5 = HEAP32[$k >> 2] | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($5);
   $__cap_$i$i$i$i$i = $k + 8 | 0;
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  __ZNSt3__211char_traitsIcE6assignERcRKc($k, 0);
  HEAP8[$__size_$i$i$i$i$i >> 0] = 0;
 };
 HEAP32[$k >> 2] = HEAP32[$ref$tmp >> 2] | 0;
 HEAP32[$k + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2] | 0;
 HEAP32[$k + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2] | 0;
 HEAP32[$ref$tmp >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__213__vector_baseIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($l_signatures);
 __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($l_publicKeys);
 STACKTOP = sp;
 return;
}

function __ZN6Crypto10crypto_ops18checkRingSignatureERKNS_4HashERKNS_8KeyImageENSt3__26vectorINS_9PublicKeyENS7_9allocatorIS9_EEEENS8_INS_9SignatureENSA_ISD_EEEE($prefix_hash, $image, $pubs, $signatures) {
 $prefix_hash = $prefix_hash | 0;
 $image = $image | 0;
 $pubs = $pubs | 0;
 $signatures = $signatures | 0;
 var $$alloca_mul = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__end_$i = 0, $ab = 0, $add$ptr = 0, $add$ptr26 = 0, $add$ptr29 = 0, $arrayidx$i82 = 0, $call1 = 0, $call12 = 0, $call15 = 0, $call2 = 0, $call20 = 0, $call36 = 0, $call37 = 0, $call4 = 0, $cmp = 0, $cmp10 = 0, $cmp1019 = 0, $cmp13 = 0;
 var $cmp16 = 0, $cmp21 = 0, $cmp38 = 0, $cmp5 = 0, $h = 0, $i$020 = 0, $image_pre = 0, $image_unp = 0, $inc = 0, $retval$0 = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i46 = 0, $sub$ptr$div$i46$lcssa = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i45 = 0, $sum = 0, $tmp2 = 0, $tmp3 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1792 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1792 | 0);
 $image_unp = sp + 1560 | 0;
 $image_pre = sp;
 $sum = sp + 1752 | 0;
 $h = sp + 1720 | 0;
 $tmp2 = sp + 1440 | 0;
 $tmp3 = sp + 1280 | 0;
 __ZN6Crypto19EllipticCurveScalarC2Ev($sum);
 __ZN6Crypto19EllipticCurveScalarC2Ev($h);
 $__end_$i = $pubs + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$pubs >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 $call1 = __ZN6CryptoL12rs_comm_sizeEm($sub$ptr$div$i) | 0;
 $$alloca_mul = $call1;
 $2 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul | 0) + 15 & -16 | 0);
 $call2 = _ge_frombytes_vartime($image_unp, $image) | 0;
 $cmp = ($call2 | 0) == 0;
 if (!$cmp) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 _ge_dsm_precomp($image_pre, $image_unp);
 $call4 = _ge_check_subgroup_precomp_vartime($image_pre) | 0;
 $cmp5 = ($call4 | 0) == 0;
 if (!$cmp5) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 _sc_0($sum);
 dest = $2;
 src = $prefix_hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $3 = HEAP32[$__end_$i >> 2] | 0;
 $4 = HEAP32[$pubs >> 2] | 0;
 $cmp1019 = ($3 | 0) == ($4 | 0);
 L7 : do {
  if ($cmp1019) {
   $sub$ptr$div$i46$lcssa = 0;
  } else {
   $ab = $2 + 32 | 0;
   $$in = $4;
   $i$020 = 0;
   while (1) {
    $5 = $$in;
    $6 = HEAP32[$signatures >> 2] | 0;
    $7 = $6 + ($i$020 << 6) | 0;
    $call12 = _sc_check($7) | 0;
    $cmp13 = ($call12 | 0) == 0;
    if (!$cmp13) {
     $retval$0 = 0;
     label = 10;
     break;
    }
    $add$ptr = ($6 + ($i$020 << 6) | 0) + 32 | 0;
    $call15 = _sc_check($add$ptr) | 0;
    $cmp16 = ($call15 | 0) == 0;
    if (!$cmp16) {
     $retval$0 = 0;
     label = 10;
     break;
    }
    $8 = $5 + ($i$020 << 5) | 0;
    $call20 = _ge_frombytes_vartime($tmp3, $8) | 0;
    $cmp21 = ($call20 | 0) == 0;
    if (!$cmp21) {
     $retval$0 = 0;
     label = 10;
     break;
    }
    $9 = HEAP32[$signatures >> 2] | 0;
    $10 = $9 + ($i$020 << 6) | 0;
    $add$ptr26 = ($9 + ($i$020 << 6) | 0) + 32 | 0;
    _ge_double_scalarmult_base_vartime($tmp2, $10, $tmp3, $add$ptr26);
    $11 = $ab + ($i$020 << 6) | 0;
    _ge_tobytes($11, $tmp2);
    $12 = HEAP32[$pubs >> 2] | 0;
    $arrayidx$i82 = $12 + ($i$020 << 5) | 0;
    __ZN6CryptoL10hash_to_ecERKNS_9PublicKeyERNS_5ge_p3E($arrayidx$i82, $tmp3);
    $13 = HEAP32[$signatures >> 2] | 0;
    $14 = $13 + ($i$020 << 6) | 0;
    $add$ptr29 = ($13 + ($i$020 << 6) | 0) + 32 | 0;
    _ge_double_scalarmult_precomp_vartime($tmp2, $add$ptr29, $tmp3, $14, $image_pre);
    $15 = ($ab + ($i$020 << 6) | 0) + 32 | 0;
    _ge_tobytes($15, $tmp2);
    $16 = HEAP32[$signatures >> 2] | 0;
    $17 = $16 + ($i$020 << 6) | 0;
    _sc_add($sum, $sum, $17);
    $inc = $i$020 + 1 | 0;
    $18 = HEAP32[$__end_$i >> 2] | 0;
    $19 = HEAP32[$pubs >> 2] | 0;
    $sub$ptr$sub$i45 = $18 - $19 | 0;
    $sub$ptr$div$i46 = $sub$ptr$sub$i45 >> 5;
    $cmp10 = $inc >>> 0 < $sub$ptr$div$i46 >>> 0;
    if ($cmp10) {
     $$in = $19;
     $i$020 = $inc;
    } else {
     $sub$ptr$div$i46$lcssa = $sub$ptr$div$i46;
     break L7;
    }
   }
   if ((label | 0) == 10) {
    STACKTOP = sp;
    return $retval$0 | 0;
   }
  }
 } while (0);
 $call36 = __ZN6CryptoL12rs_comm_sizeEm($sub$ptr$div$i46$lcssa) | 0;
 __ZN6CryptoL14hash_to_scalarEPKvmRNS_19EllipticCurveScalarE($2, $call36, $h);
 _sc_sub($h, $h, $sum);
 $call37 = _sc_isnonzero($h) | 0;
 $cmp38 = ($call37 | 0) == 0;
 $retval$0 = $cmp38;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _fill_memory_blocks_st($instance) {
 $instance = $instance | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cmp = 0, $cmp4 = 0, $cmp5 = 0, $cmp5$1 = 0, $cmp5$2 = 0, $cmp5$3 = 0, $cmp51 = 0, $cmp51$1 = 0, $cmp51$2 = 0, $cmp51$3 = 0, $inc = 0, $inc$1 = 0;
 var $inc$2 = 0, $inc$3 = 0, $inc11 = 0, $index = 0, $l$02 = 0, $l$02$1 = 0, $l$02$2 = 0, $l$02$3 = 0, $lane = 0, $lanes = 0, $passes = 0, $position = 0, $position$byval_copy = 0, $position$byval_copy1 = 0, $position$byval_copy2 = 0, $position$byval_copy3 = 0, $print_internals = 0, $r$05 = 0, $slice = 0, $tobool = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $position$byval_copy3 = sp + 64 | 0;
 $position$byval_copy2 = sp + 48 | 0;
 $position$byval_copy1 = sp + 32 | 0;
 $position$byval_copy = sp + 16 | 0;
 $position = sp;
 $passes = $instance + 8 | 0;
 $0 = HEAP32[$passes >> 2] | 0;
 $cmp4 = ($0 | 0) == 0;
 if ($cmp4) {
  STACKTOP = sp;
  return;
 }
 $lanes = $instance + 24 | 0;
 $lane = $position + 4 | 0;
 $slice = $position + 8 | 0;
 $index = $position + 12 | 0;
 $print_internals = $instance + 36 | 0;
 $r$05 = 0;
 while (1) {
  $1 = HEAP32[$lanes >> 2] | 0;
  $cmp51 = ($1 | 0) == 0;
  if (!$cmp51) {
   $l$02 = 0;
   while (1) {
    HEAP32[$position >> 2] = $r$05;
    HEAP32[$lane >> 2] = $l$02;
    HEAP8[$slice >> 0] = 0;
    HEAP32[$index >> 2] = 0;
    HEAP32[$position$byval_copy >> 2] = HEAP32[$position >> 2] | 0;
    HEAP32[$position$byval_copy + 4 >> 2] = HEAP32[$position + 4 >> 2] | 0;
    HEAP32[$position$byval_copy + 8 >> 2] = HEAP32[$position + 8 >> 2] | 0;
    HEAP32[$position$byval_copy + 12 >> 2] = HEAP32[$position + 12 >> 2] | 0;
    _fill_segment($instance, $position$byval_copy);
    $inc = $l$02 + 1 | 0;
    $2 = HEAP32[$lanes >> 2] | 0;
    $cmp5 = $inc >>> 0 < $2 >>> 0;
    if ($cmp5) {
     $l$02 = $inc;
    } else {
     break;
    }
   }
   $cmp51$1 = ($2 | 0) == 0;
   if (!$cmp51$1) {
    $l$02$1 = 0;
    while (1) {
     HEAP32[$position >> 2] = $r$05;
     HEAP32[$lane >> 2] = $l$02$1;
     HEAP8[$slice >> 0] = 1;
     HEAP32[$index >> 2] = 0;
     HEAP32[$position$byval_copy1 >> 2] = HEAP32[$position >> 2] | 0;
     HEAP32[$position$byval_copy1 + 4 >> 2] = HEAP32[$position + 4 >> 2] | 0;
     HEAP32[$position$byval_copy1 + 8 >> 2] = HEAP32[$position + 8 >> 2] | 0;
     HEAP32[$position$byval_copy1 + 12 >> 2] = HEAP32[$position + 12 >> 2] | 0;
     _fill_segment($instance, $position$byval_copy1);
     $inc$1 = $l$02$1 + 1 | 0;
     $4 = HEAP32[$lanes >> 2] | 0;
     $cmp5$1 = $inc$1 >>> 0 < $4 >>> 0;
     if ($cmp5$1) {
      $l$02$1 = $inc$1;
     } else {
      break;
     }
    }
    $cmp51$2 = ($4 | 0) == 0;
    if (!$cmp51$2) {
     $l$02$2 = 0;
     while (1) {
      HEAP32[$position >> 2] = $r$05;
      HEAP32[$lane >> 2] = $l$02$2;
      HEAP8[$slice >> 0] = 2;
      HEAP32[$index >> 2] = 0;
      HEAP32[$position$byval_copy2 >> 2] = HEAP32[$position >> 2] | 0;
      HEAP32[$position$byval_copy2 + 4 >> 2] = HEAP32[$position + 4 >> 2] | 0;
      HEAP32[$position$byval_copy2 + 8 >> 2] = HEAP32[$position + 8 >> 2] | 0;
      HEAP32[$position$byval_copy2 + 12 >> 2] = HEAP32[$position + 12 >> 2] | 0;
      _fill_segment($instance, $position$byval_copy2);
      $inc$2 = $l$02$2 + 1 | 0;
      $5 = HEAP32[$lanes >> 2] | 0;
      $cmp5$2 = $inc$2 >>> 0 < $5 >>> 0;
      if ($cmp5$2) {
       $l$02$2 = $inc$2;
      } else {
       break;
      }
     }
     $cmp51$3 = ($5 | 0) == 0;
     if (!$cmp51$3) {
      $l$02$3 = 0;
      while (1) {
       HEAP32[$position >> 2] = $r$05;
       HEAP32[$lane >> 2] = $l$02$3;
       HEAP8[$slice >> 0] = 3;
       HEAP32[$index >> 2] = 0;
       HEAP32[$position$byval_copy3 >> 2] = HEAP32[$position >> 2] | 0;
       HEAP32[$position$byval_copy3 + 4 >> 2] = HEAP32[$position + 4 >> 2] | 0;
       HEAP32[$position$byval_copy3 + 8 >> 2] = HEAP32[$position + 8 >> 2] | 0;
       HEAP32[$position$byval_copy3 + 12 >> 2] = HEAP32[$position + 12 >> 2] | 0;
       _fill_segment($instance, $position$byval_copy3);
       $inc$3 = $l$02$3 + 1 | 0;
       $6 = HEAP32[$lanes >> 2] | 0;
       $cmp5$3 = $inc$3 >>> 0 < $6 >>> 0;
       if ($cmp5$3) {
        $l$02$3 = $inc$3;
       } else {
        break;
       }
      }
     }
    }
   }
  }
  $7 = HEAP32[$print_internals >> 2] | 0;
  $tobool = ($7 | 0) == 0;
  if (!$tobool) {
   _internal_kat($instance, $r$05);
  }
  $inc11 = $r$05 + 1 | 0;
  $3 = HEAP32[$passes >> 2] | 0;
  $cmp = $inc11 >>> 0 < $3 >>> 0;
  if ($cmp) {
   $r$05 = $inc11;
  } else {
   break;
  }
 }
 STACKTOP = sp;
 return;
}

function _keccak($in, $inlen, $md, $mdlen) {
 $in = $in | 0;
 $inlen = $inlen | 0;
 $md = $md | 0;
 $mdlen = $mdlen | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr$us = 0;
 var $add$ptr14 = 0, $arrayidx$us = 0, $arrayidx12 = 0, $arrayidx17 = 0, $arrayidx24 = 0, $arrayidx25 = 0, $arrayidx5$us = 0, $cmp = 0, $cmp1 = 0, $cmp1$us = 0, $cmp127 = 0, $cmp2023 = 0, $cmp325 = 0, $cond = 0, $div = 0, $exitcond = 0, $exitcond32 = 0, $i$026$us = 0, $i$124 = 0, $in$addr$0$lcssa = 0;
 var $in$addr$029 = 0, $in$addr$029$us = 0, $inc$us = 0, $inc11 = 0, $inc28 = 0, $inlen$addr$0$lcssa = 0, $inlen$addr$028 = 0, $inlen$addr$028$us = 0, $mul = 0, $st = 0, $sub = 0, $sub15 = 0, $sub16 = 0, $sub8 = 0, $sub8$us = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352 | 0);
 $st = sp + 144 | 0;
 $temp = sp;
 $cmp = ($mdlen | 0) == 200;
 $mul = $mdlen << 1;
 $sub = 200 - $mul | 0;
 $cond = $cmp ? 136 : $sub;
 $div = ($cond | 0) / 8 & -1;
 _memset($st | 0, 0, 200) | 0;
 $cmp127 = ($cond | 0) > ($inlen | 0);
 L1 : do {
  if ($cmp127) {
   $in$addr$0$lcssa = $in;
   $inlen$addr$0$lcssa = $inlen;
  } else {
   $cmp325 = ($cond | 0) > 7;
   if (!$cmp325) {
    $in$addr$029 = $in;
    $inlen$addr$028 = $inlen;
    while (1) {
     _keccakf($st);
     $sub8 = $inlen$addr$028 - $cond | 0;
     $add$ptr = $in$addr$029 + $cond | 0;
     $cmp1 = ($sub8 | 0) < ($cond | 0);
     if ($cmp1) {
      $in$addr$0$lcssa = $add$ptr;
      $inlen$addr$0$lcssa = $sub8;
      break L1;
     } else {
      $in$addr$029 = $add$ptr;
      $inlen$addr$028 = $sub8;
     }
    }
   }
   $in$addr$029$us = $in;
   $inlen$addr$028$us = $inlen;
   while (1) {
    $i$026$us = 0;
    while (1) {
     $arrayidx$us = $in$addr$029$us + ($i$026$us << 3) | 0;
     $0 = $arrayidx$us;
     $1 = $0;
     $2 = HEAP32[$1 >> 2] | 0;
     $3 = $0 + 4 | 0;
     $4 = $3;
     $5 = HEAP32[$4 >> 2] | 0;
     $arrayidx5$us = $st + ($i$026$us << 3) | 0;
     $6 = $arrayidx5$us;
     $7 = $6;
     $8 = HEAP32[$7 >> 2] | 0;
     $9 = $6 + 4 | 0;
     $10 = $9;
     $11 = HEAP32[$10 >> 2] | 0;
     $12 = $8 ^ $2;
     $13 = $11 ^ $5;
     $14 = $arrayidx5$us;
     $15 = $14;
     HEAP32[$15 >> 2] = $12;
     $16 = $14 + 4 | 0;
     $17 = $16;
     HEAP32[$17 >> 2] = $13;
     $inc$us = $i$026$us + 1 | 0;
     $exitcond32 = ($inc$us | 0) == ($div | 0);
     if ($exitcond32) {
      break;
     } else {
      $i$026$us = $inc$us;
     }
    }
    _keccakf($st);
    $sub8$us = $inlen$addr$028$us - $cond | 0;
    $add$ptr$us = $in$addr$029$us + $cond | 0;
    $cmp1$us = ($sub8$us | 0) < ($cond | 0);
    if ($cmp1$us) {
     $in$addr$0$lcssa = $add$ptr$us;
     $inlen$addr$0$lcssa = $sub8$us;
     break;
    } else {
     $in$addr$029$us = $add$ptr$us;
     $inlen$addr$028$us = $sub8$us;
    }
   }
  }
 } while (0);
 _memcpy($temp | 0, $in$addr$0$lcssa | 0, $inlen$addr$0$lcssa | 0) | 0;
 $inc11 = $inlen$addr$0$lcssa + 1 | 0;
 $arrayidx12 = $temp + $inlen$addr$0$lcssa | 0;
 HEAP8[$arrayidx12 >> 0] = 1;
 $add$ptr14 = $temp + $inc11 | 0;
 $sub15 = $cond - $inc11 | 0;
 _memset($add$ptr14 | 0, 0, $sub15 | 0) | 0;
 $sub16 = $cond + -1 | 0;
 $arrayidx17 = $temp + $sub16 | 0;
 $18 = HEAP8[$arrayidx17 >> 0] | 0;
 $19 = $18 | -128;
 HEAP8[$arrayidx17 >> 0] = $19;
 $cmp2023 = ($cond | 0) > 7;
 if (!$cmp2023) {
  _keccakf($st);
  _memcpy($md | 0, $st | 0, $mdlen | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $i$124 = 0;
 while (1) {
  $arrayidx24 = $temp + ($i$124 << 3) | 0;
  $20 = $arrayidx24;
  $21 = $20;
  $22 = HEAP32[$21 >> 2] | 0;
  $23 = $20 + 4 | 0;
  $24 = $23;
  $25 = HEAP32[$24 >> 2] | 0;
  $arrayidx25 = $st + ($i$124 << 3) | 0;
  $26 = $arrayidx25;
  $27 = $26;
  $28 = HEAP32[$27 >> 2] | 0;
  $29 = $26 + 4 | 0;
  $30 = $29;
  $31 = HEAP32[$30 >> 2] | 0;
  $32 = $28 ^ $22;
  $33 = $31 ^ $25;
  $34 = $arrayidx25;
  $35 = $34;
  HEAP32[$35 >> 2] = $32;
  $36 = $34 + 4 | 0;
  $37 = $36;
  HEAP32[$37 >> 2] = $33;
  $inc28 = $i$124 + 1 | 0;
  $exitcond = ($inc28 | 0) == ($div | 0);
  if ($exitcond) {
   break;
  } else {
   $i$124 = $inc28;
  }
 }
 _keccakf($st);
 _memcpy($md | 0, $st | 0, $mdlen | 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6assignIPS6_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS6_NS_15iterator_traitsISC_E9referenceEEE5valueEvE4typeESC_SC_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__end_$i = 0, $__first$addr$i$i42$034 = 0, $__result$addr$i$i$0$lcssa = 0, $__result$addr$i$i$033 = 0, $__soon_to_be_end$i$i$031 = 0, $__value_$i$i$i$i$i = 0, $add$ptr$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i32 = 0;
 var $cmp$i$i69 = 0, $cmp$i$i6930 = 0, $cmp3$i = 0, $cmp4 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i71 = 0, $incdec$ptr1$i$i = 0, $mul$i = 0, $spec$select = 0, $spec$select29 = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$div$i$i19 = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i$i$i = 0, $sub$ptr$sub$i$i18 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$lhs$cast$i$i = $__last;
 $sub$ptr$rhs$cast$i$i = $__first;
 $sub$ptr$sub$i$i = $sub$ptr$lhs$cast$i$i - $sub$ptr$rhs$cast$i$i | 0;
 $sub$ptr$div$i$i = ($sub$ptr$sub$i$i | 0) / 12 & -1;
 $__value_$i$i$i$i$i = $this + 8 | 0;
 $0 = HEAP32[$__value_$i$i$i$i$i >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$sub$i$i18 = $0 - $1 | 0;
 $sub$ptr$div$i$i19 = ($sub$ptr$sub$i$i18 | 0) / 12 & -1;
 $cmp = $sub$ptr$div$i$i >>> 0 > $sub$ptr$div$i$i19 >>> 0;
 $2 = $1;
 if ($cmp) {
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE13__vdeallocateEv($this);
  $cmp$i = $sub$ptr$div$i$i >>> 0 > 357913941;
  if ($cmp$i) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
  }
  $5 = HEAP32[$__value_$i$i$i$i$i >> 2] | 0;
  $6 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = $5 - $6 | 0;
  $sub$ptr$div$i$i$i = ($sub$ptr$sub$i$i$i | 0) / 12 & -1;
  $cmp3$i = $sub$ptr$div$i$i$i >>> 0 < 178956970;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  $cmp$i$i$i$i = $mul$i >>> 0 < $sub$ptr$div$i$i >>> 0;
  $$sroa$speculated = $cmp$i$i$i$i ? $sub$ptr$div$i$i : $mul$i;
  $spec$select29 = $cmp3$i ? $$sroa$speculated : 357913941;
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE11__vallocateEm($this, $spec$select29);
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_m($this, $__first, $__last);
  return;
 }
 $__end_$i = $this + 4 | 0;
 $3 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$sub$i = $3 - $1 | 0;
 $sub$ptr$div$i = ($sub$ptr$sub$i | 0) / 12 & -1;
 $cmp4 = $sub$ptr$div$i$i >>> 0 > $sub$ptr$div$i >>> 0;
 $add$ptr$i$i = $__first + ($sub$ptr$div$i * 12 | 0) | 0;
 $spec$select = $cmp4 ? $add$ptr$i$i : $__last;
 $cmp$i$i32 = ($spec$select | 0) == ($__first | 0);
 if ($cmp$i$i32) {
  $__result$addr$i$i$0$lcssa = $2;
 } else {
  $__first$addr$i$i42$034 = $__first;
  $__result$addr$i$i$033 = $2;
  while (1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($__result$addr$i$i$033, $__first$addr$i$i42$034) | 0;
   $incdec$ptr$i$i = $__first$addr$i$i42$034 + 12 | 0;
   $incdec$ptr1$i$i = $__result$addr$i$i$033 + 12 | 0;
   $cmp$i$i = ($incdec$ptr$i$i | 0) == ($spec$select | 0);
   if ($cmp$i$i) {
    $__result$addr$i$i$0$lcssa = $incdec$ptr1$i$i;
    break;
   } else {
    $__first$addr$i$i42$034 = $incdec$ptr$i$i;
    $__result$addr$i$i$033 = $incdec$ptr1$i$i;
   }
  }
 }
 if ($cmp4) {
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_m($this, $spec$select, $__last);
  return;
 }
 $4 = HEAP32[$__end_$i >> 2] | 0;
 $cmp$i$i6930 = ($__result$addr$i$i$0$lcssa | 0) == ($4 | 0);
 if (!$cmp$i$i6930) {
  $__soon_to_be_end$i$i$031 = $4;
  while (1) {
   $incdec$ptr$i$i71 = $__soon_to_be_end$i$i$031 + -12 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($incdec$ptr$i$i71);
   $cmp$i$i69 = ($__result$addr$i$i$0$lcssa | 0) == ($incdec$ptr$i$i71 | 0);
   if ($cmp$i$i69) {
    break;
   } else {
    $__soon_to_be_end$i$i$031 = $incdec$ptr$i$i71;
   }
  }
 }
 HEAP32[$__end_$i >> 2] = $__result$addr$i$i$0$lcssa;
 return;
}

function __ZN4Core12Cryptography34generateDeterministicSubwalletKeysENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyRS7_S8_($basePrivateKey, $0, $1, $privateKey, $publicKey) {
 $basePrivateKey = $basePrivateKey | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $privateKey = $privateKey | 0;
 $publicKey = $publicKey | 0;
 var $$pr = 0, $$pr10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i180 = 0, $__size_$i$i$i$i$i = 0, $__size_$i$i$i$i$i104 = 0, $__size_$i45$i$i$i$i = 0, $__size_$i45$i$i$i$i121 = 0, $l_basePrivateKey = 0, $l_basePrivateKey$byval_copy = 0, $l_privateKey = 0, $l_publicKey = 0, $ref$tmp = 0;
 var $ref$tmp3 = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i$i$i107 = 0, $tobool$i$i$i$i149 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160 | 0);
 $l_basePrivateKey$byval_copy = sp + 120 | 0;
 $l_basePrivateKey = sp + 88 | 0;
 $l_privateKey = sp + 56 | 0;
 $l_publicKey = sp + 24 | 0;
 $ref$tmp = sp + 12 | 0;
 $ref$tmp3 = sp;
 __ZN6Crypto9SecretKeyC2Ev($l_basePrivateKey);
 __ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($basePrivateKey, $l_basePrivateKey);
 __ZN6Crypto9SecretKeyC2Ev($l_privateKey);
 __ZN6Crypto9PublicKeyC2Ev($l_publicKey);
 dest = $l_basePrivateKey$byval_copy;
 src = $l_basePrivateKey;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $2 = __ZN6Crypto37generate_deterministic_subwallet_keysENS_9SecretKeyEyRS0_RNS_9PublicKeyE($l_basePrivateKey$byval_copy, $0, $1, $l_privateKey, $l_publicKey) | 0;
 if (!$2) {
  STACKTOP = sp;
  return;
 }
 __ZN6Common8podToHexIN6Crypto9SecretKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($ref$tmp, $l_privateKey);
 $__size_$i$i$i$i$i = $privateKey + 11 | 0;
 $3 = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
 $tobool$i$i$i$i$i = $3 << 24 >> 24 < 0;
 if ($tobool$i$i$i$i$i) {
  $4 = HEAP32[$privateKey >> 2] | 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($4, 0);
  $__size_$i45$i$i$i$i = $privateKey + 4 | 0;
  HEAP32[$__size_$i45$i$i$i$i >> 2] = 0;
  $$pr = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
  $tobool$i$i$i$i = $$pr << 24 >> 24 < 0;
  if ($tobool$i$i$i$i) {
   $5 = HEAP32[$privateKey >> 2] | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($5);
   $__cap_$i$i$i$i$i = $privateKey + 8 | 0;
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  __ZNSt3__211char_traitsIcE6assignERcRKc($privateKey, 0);
  HEAP8[$__size_$i$i$i$i$i >> 0] = 0;
 };
 HEAP32[$privateKey >> 2] = HEAP32[$ref$tmp >> 2] | 0;
 HEAP32[$privateKey + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2] | 0;
 HEAP32[$privateKey + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2] | 0;
 HEAP32[$ref$tmp >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZN6Common8podToHexIN6Crypto9PublicKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($ref$tmp3, $l_publicKey);
 $__size_$i$i$i$i$i104 = $publicKey + 11 | 0;
 $6 = HEAP8[$__size_$i$i$i$i$i104 >> 0] | 0;
 $tobool$i$i$i$i$i107 = $6 << 24 >> 24 < 0;
 if ($tobool$i$i$i$i$i107) {
  $7 = HEAP32[$publicKey >> 2] | 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($7, 0);
  $__size_$i45$i$i$i$i121 = $publicKey + 4 | 0;
  HEAP32[$__size_$i45$i$i$i$i121 >> 2] = 0;
  $$pr10 = HEAP8[$__size_$i$i$i$i$i104 >> 0] | 0;
  $tobool$i$i$i$i149 = $$pr10 << 24 >> 24 < 0;
  if ($tobool$i$i$i$i149) {
   $8 = HEAP32[$publicKey >> 2] | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($8);
   $__cap_$i$i$i$i$i180 = $publicKey + 8 | 0;
   HEAP32[$__cap_$i$i$i$i$i180 >> 2] = 0;
  }
 } else {
  __ZNSt3__211char_traitsIcE6assignERcRKc($publicKey, 0);
  HEAP8[$__size_$i$i$i$i$i104 >> 0] = 0;
 };
 HEAP32[$publicKey >> 2] = HEAP32[$ref$tmp3 >> 2] | 0;
 HEAP32[$publicKey + 4 >> 2] = HEAP32[$ref$tmp3 + 4 >> 2] | 0;
 HEAP32[$publicKey + 8 >> 2] = HEAP32[$ref$tmp3 + 8 >> 2] | 0;
 HEAP32[$ref$tmp3 >> 2] = 0 | 0;
 HEAP32[$ref$tmp3 + 4 >> 2] = 0 | 0;
 HEAP32[$ref$tmp3 + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp3);
 STACKTOP = sp;
 return;
}

function _fe_isnonzero($f) {
 $f = $f | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx1 = 0, $arrayidx12 = 0, $arrayidx15 = 0, $arrayidx18 = 0, $arrayidx21 = 0, $arrayidx24 = 0, $arrayidx27 = 0;
 var $arrayidx3 = 0, $arrayidx30 = 0, $arrayidx33 = 0, $arrayidx36 = 0, $arrayidx39 = 0, $arrayidx42 = 0, $arrayidx45 = 0, $arrayidx48 = 0, $arrayidx51 = 0, $arrayidx54 = 0, $arrayidx57 = 0, $arrayidx6 = 0, $arrayidx60 = 0, $arrayidx63 = 0, $arrayidx66 = 0, $arrayidx69 = 0, $arrayidx72 = 0, $arrayidx75 = 0, $arrayidx78 = 0, $arrayidx81 = 0;
 var $arrayidx84 = 0, $arrayidx87 = 0, $arrayidx9 = 0, $arrayidx90 = 0, $or1 = 0, $or115 = 0, $or146 = 0, $or177 = 0, $or208 = 0, $or239 = 0, $or2610 = 0, $or2911 = 0, $or3212 = 0, $or3513 = 0, $or3814 = 0, $or4115 = 0, $or4416 = 0, $or4717 = 0, $or5018 = 0, $or52 = 0;
 var $or5319 = 0, $or5620 = 0, $or5921 = 0, $or6222 = 0, $or6523 = 0, $or6824 = 0, $or7125 = 0, $or7426 = 0, $or7727 = 0, $or8028 = 0, $or8329 = 0, $or84 = 0, $or8630 = 0, $or8931 = 0, $or92 = 0, $or9232 = 0, $s = 0, $shr = 0, $sub = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $s = sp;
 _fe_tobytes($s, $f);
 $0 = HEAP8[$s >> 0] | 0;
 $arrayidx1 = $s + 1 | 0;
 $1 = HEAP8[$arrayidx1 >> 0] | 0;
 $or1 = $1 | $0;
 $arrayidx3 = $s + 2 | 0;
 $2 = HEAP8[$arrayidx3 >> 0] | 0;
 $or52 = $or1 | $2;
 $arrayidx6 = $s + 3 | 0;
 $3 = HEAP8[$arrayidx6 >> 0] | 0;
 $or84 = $or52 | $3;
 $arrayidx9 = $s + 4 | 0;
 $4 = HEAP8[$arrayidx9 >> 0] | 0;
 $or115 = $or84 | $4;
 $arrayidx12 = $s + 5 | 0;
 $5 = HEAP8[$arrayidx12 >> 0] | 0;
 $or146 = $or115 | $5;
 $arrayidx15 = $s + 6 | 0;
 $6 = HEAP8[$arrayidx15 >> 0] | 0;
 $or177 = $or146 | $6;
 $arrayidx18 = $s + 7 | 0;
 $7 = HEAP8[$arrayidx18 >> 0] | 0;
 $or208 = $or177 | $7;
 $arrayidx21 = $s + 8 | 0;
 $8 = HEAP8[$arrayidx21 >> 0] | 0;
 $or239 = $or208 | $8;
 $arrayidx24 = $s + 9 | 0;
 $9 = HEAP8[$arrayidx24 >> 0] | 0;
 $or2610 = $or239 | $9;
 $arrayidx27 = $s + 10 | 0;
 $10 = HEAP8[$arrayidx27 >> 0] | 0;
 $or2911 = $or2610 | $10;
 $arrayidx30 = $s + 11 | 0;
 $11 = HEAP8[$arrayidx30 >> 0] | 0;
 $or3212 = $or2911 | $11;
 $arrayidx33 = $s + 12 | 0;
 $12 = HEAP8[$arrayidx33 >> 0] | 0;
 $or3513 = $or3212 | $12;
 $arrayidx36 = $s + 13 | 0;
 $13 = HEAP8[$arrayidx36 >> 0] | 0;
 $or3814 = $or3513 | $13;
 $arrayidx39 = $s + 14 | 0;
 $14 = HEAP8[$arrayidx39 >> 0] | 0;
 $or4115 = $or3814 | $14;
 $arrayidx42 = $s + 15 | 0;
 $15 = HEAP8[$arrayidx42 >> 0] | 0;
 $or4416 = $or4115 | $15;
 $arrayidx45 = $s + 16 | 0;
 $16 = HEAP8[$arrayidx45 >> 0] | 0;
 $or4717 = $or4416 | $16;
 $arrayidx48 = $s + 17 | 0;
 $17 = HEAP8[$arrayidx48 >> 0] | 0;
 $or5018 = $or4717 | $17;
 $arrayidx51 = $s + 18 | 0;
 $18 = HEAP8[$arrayidx51 >> 0] | 0;
 $or5319 = $or5018 | $18;
 $arrayidx54 = $s + 19 | 0;
 $19 = HEAP8[$arrayidx54 >> 0] | 0;
 $or5620 = $or5319 | $19;
 $arrayidx57 = $s + 20 | 0;
 $20 = HEAP8[$arrayidx57 >> 0] | 0;
 $or5921 = $or5620 | $20;
 $arrayidx60 = $s + 21 | 0;
 $21 = HEAP8[$arrayidx60 >> 0] | 0;
 $or6222 = $or5921 | $21;
 $arrayidx63 = $s + 22 | 0;
 $22 = HEAP8[$arrayidx63 >> 0] | 0;
 $or6523 = $or6222 | $22;
 $arrayidx66 = $s + 23 | 0;
 $23 = HEAP8[$arrayidx66 >> 0] | 0;
 $or6824 = $or6523 | $23;
 $arrayidx69 = $s + 24 | 0;
 $24 = HEAP8[$arrayidx69 >> 0] | 0;
 $or7125 = $or6824 | $24;
 $arrayidx72 = $s + 25 | 0;
 $25 = HEAP8[$arrayidx72 >> 0] | 0;
 $or7426 = $or7125 | $25;
 $arrayidx75 = $s + 26 | 0;
 $26 = HEAP8[$arrayidx75 >> 0] | 0;
 $or7727 = $or7426 | $26;
 $arrayidx78 = $s + 27 | 0;
 $27 = HEAP8[$arrayidx78 >> 0] | 0;
 $or8028 = $or7727 | $27;
 $arrayidx81 = $s + 28 | 0;
 $28 = HEAP8[$arrayidx81 >> 0] | 0;
 $or8329 = $or8028 | $28;
 $arrayidx84 = $s + 29 | 0;
 $29 = HEAP8[$arrayidx84 >> 0] | 0;
 $or8630 = $or8329 | $29;
 $arrayidx87 = $s + 30 | 0;
 $30 = HEAP8[$arrayidx87 >> 0] | 0;
 $or8931 = $or8630 | $30;
 $arrayidx90 = $s + 31 | 0;
 $31 = HEAP8[$arrayidx90 >> 0] | 0;
 $or9232 = $or8931 | $31;
 $or92 = $or9232 & 255;
 $sub = $or92 + -1 | 0;
 $shr = $sub >> 8;
 $add = $shr + 1 | 0;
 STACKTOP = sp;
 return $add | 0;
}

function _validate_inputs($context) {
 $context = $context | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ad = 0, $adlen = 0, $allocate_cbk = 0, $cmp = 0;
 var $cmp1 = 0, $cmp100 = 0, $cmp105 = 0, $cmp109 = 0, $cmp11 = 0, $cmp120 = 0, $cmp13 = 0, $cmp25 = 0, $cmp27 = 0, $cmp39 = 0, $cmp4 = 0, $cmp41 = 0, $cmp53 = 0, $cmp55 = 0, $cmp68 = 0, $cmp72 = 0, $cmp77 = 0, $cmp81 = 0, $cmp91 = 0, $cmp96 = 0;
 var $free_cbk119 = 0, $lanes = 0, $m_cost = 0, $mul = 0, $outlen = 0, $phitmp = 0, $pwd = 0, $pwdlen = 0, $retval$0 = 0, $salt = 0, $saltlen = 0, $secret = 0, $secretlen = 0, $spec$select = 0, $t_cost = 0, $threads = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($context | 0) == (0 | 0);
 do {
  if ($cmp) {
   $retval$0 = -25;
  } else {
   $0 = HEAP32[$context >> 2] | 0;
   $cmp1 = ($0 | 0) == (0 | 0);
   if ($cmp1) {
    $retval$0 = -1;
   } else {
    $outlen = $context + 4 | 0;
    $1 = HEAP32[$outlen >> 2] | 0;
    $cmp4 = $1 >>> 0 < 4;
    if ($cmp4) {
     $retval$0 = -2;
    } else {
     $pwd = $context + 8 | 0;
     $2 = HEAP32[$pwd >> 2] | 0;
     $cmp11 = ($2 | 0) == (0 | 0);
     if ($cmp11) {
      $pwdlen = $context + 12 | 0;
      $3 = HEAP32[$pwdlen >> 2] | 0;
      $cmp13 = ($3 | 0) == 0;
      if (!$cmp13) {
       $retval$0 = -18;
       break;
      }
     }
     $salt = $context + 16 | 0;
     $4 = HEAP32[$salt >> 2] | 0;
     $cmp25 = ($4 | 0) == (0 | 0);
     $saltlen = $context + 20 | 0;
     $5 = HEAP32[$saltlen >> 2] | 0;
     if ($cmp25) {
      $cmp27 = ($5 | 0) == 0;
      $spec$select = $cmp27 ? -6 : -19;
      return $spec$select | 0;
     }
     $phitmp = $5 >>> 0 < 8;
     if ($phitmp) {
      $retval$0 = -6;
     } else {
      $secret = $context + 24 | 0;
      $6 = HEAP32[$secret >> 2] | 0;
      $cmp39 = ($6 | 0) == (0 | 0);
      if ($cmp39) {
       $secretlen = $context + 28 | 0;
       $7 = HEAP32[$secretlen >> 2] | 0;
       $cmp41 = ($7 | 0) == 0;
       if (!$cmp41) {
        $retval$0 = -20;
        break;
       }
      }
      $ad = $context + 32 | 0;
      $8 = HEAP32[$ad >> 2] | 0;
      $cmp53 = ($8 | 0) == (0 | 0);
      if ($cmp53) {
       $adlen = $context + 36 | 0;
       $9 = HEAP32[$adlen >> 2] | 0;
       $cmp55 = ($9 | 0) == 0;
       if (!$cmp55) {
        $retval$0 = -21;
        break;
       }
      }
      $m_cost = $context + 44 | 0;
      $10 = HEAP32[$m_cost >> 2] | 0;
      $cmp68 = $10 >>> 0 < 8;
      if ($cmp68) {
       $retval$0 = -14;
      } else {
       $cmp72 = $10 >>> 0 > 2097152;
       if ($cmp72) {
        $retval$0 = -15;
       } else {
        $lanes = $context + 48 | 0;
        $11 = HEAP32[$lanes >> 2] | 0;
        $mul = $11 << 3;
        $cmp77 = $10 >>> 0 < $mul >>> 0;
        if ($cmp77) {
         $retval$0 = -14;
        } else {
         $t_cost = $context + 40 | 0;
         $12 = HEAP32[$t_cost >> 2] | 0;
         $cmp81 = ($12 | 0) == 0;
         if ($cmp81) {
          $retval$0 = -12;
         } else {
          $cmp91 = ($11 | 0) == 0;
          if ($cmp91) {
           $retval$0 = -16;
          } else {
           $cmp96 = $11 >>> 0 > 16777215;
           if ($cmp96) {
            $retval$0 = -17;
           } else {
            $threads = $context + 52 | 0;
            $13 = HEAP32[$threads >> 2] | 0;
            $cmp100 = ($13 | 0) == 0;
            if ($cmp100) {
             $retval$0 = -28;
            } else {
             $cmp105 = $13 >>> 0 > 16777215;
             if ($cmp105) {
              $retval$0 = -29;
             } else {
              $allocate_cbk = $context + 60 | 0;
              $14 = HEAP32[$allocate_cbk >> 2] | 0;
              $cmp109 = ($14 | 0) == (0 | 0);
              $free_cbk119 = $context + 64 | 0;
              $15 = HEAP32[$free_cbk119 >> 2] | 0;
              $cmp120 = ($15 | 0) == (0 | 0);
              if ($cmp109) {
               if (!$cmp120) {
                $retval$0 = -24;
                break;
               }
              } else {
               if ($cmp120) {
                $retval$0 = -23;
                break;
               }
              }
              $retval$0 = 0;
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function _tree_hash_from_branch($branch, $depth, $leaf, $path, $root_hash) {
 $branch = $branch | 0;
 $depth = $depth | 0;
 $leaf = $leaf | 0;
 $path = $path | 0;
 $root_hash = $root_hash | 0;
 var $0 = 0, $1 = 0, $and = 0, $and$peel = 0, $and2 = 0, $and2$peel = 0, $arraydecay13 = 0, $arraydecay20 = 0, $arraydecay20$peel = 0, $arraydecay20$us = 0, $arraydecay20$us$peel = 0, $arrayidx = 0, $arrayidx$peel = 0, $branch_path$0 = 0, $branch_path$0$peel = 0, $buffer = 0, $cmp = 0, $cmp1 = 0, $cmp1$peel = 0, $cmp1$us = 0;
 var $cmp1$us$peel = 0, $cmp3 = 0, $cmp3$peel = 0, $conv = 0, $conv$peel = 0, $dec = 0, $dec$us = 0, $dec$us$peel = 0, $depth$addr$011 = 0, $depth$addr$011$us = 0, $leaf_path$0 = 0, $leaf_path$0$peel = 0, $shl = 0, $shl$peel = 0, $shr = 0, $shr$peel = 0, $tobool = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $buffer = sp;
 $cmp = ($depth | 0) == 0;
 if ($cmp) {
  dest = $root_hash;
  src = $leaf;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  STACKTOP = sp;
  return;
 }
 $tobool = ($path | 0) == (0 | 0);
 $arraydecay13 = $buffer + 32 | 0;
 $dec$us$peel = $depth + -1 | 0;
 if ($tobool) {
  dest = $buffer;
  src = $leaf;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $arraydecay20$us$peel = $branch + ($dec$us$peel << 5) | 0;
  dest = $arraydecay13;
  src = $arraydecay20$us$peel;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $cmp1$us$peel = ($dec$us$peel | 0) == 0;
  if (!$cmp1$us$peel) {
   $depth$addr$011$us = $dec$us$peel;
   while (1) {
    $dec$us = $depth$addr$011$us + -1 | 0;
    _cn_fast_hash($buffer, 64, $buffer);
    $arraydecay20$us = $branch + ($dec$us << 5) | 0;
    dest = $arraydecay13;
    src = $arraydecay20$us;
    stop = dest + 32 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    $cmp1$us = ($dec$us | 0) == 0;
    if ($cmp1$us) {
     break;
    } else {
     $depth$addr$011$us = $dec$us;
    }
   }
  }
 } else {
  $shr$peel = $dec$us$peel >>> 3;
  $arrayidx$peel = $path + $shr$peel | 0;
  $0 = HEAP8[$arrayidx$peel >> 0] | 0;
  $conv$peel = $0 << 24 >> 24;
  $and$peel = $dec$us$peel & 7;
  $shl$peel = 1 << $and$peel;
  $and2$peel = $shl$peel & $conv$peel;
  $cmp3$peel = ($and2$peel | 0) == 0;
  $branch_path$0$peel = $cmp3$peel ? $arraydecay13 : $buffer;
  $leaf_path$0$peel = $cmp3$peel ? $buffer : $arraydecay13;
  dest = $leaf_path$0$peel;
  src = $leaf;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $arraydecay20$peel = $branch + ($dec$us$peel << 5) | 0;
  dest = $branch_path$0$peel;
  src = $arraydecay20$peel;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $cmp1$peel = ($dec$us$peel | 0) == 0;
  if (!$cmp1$peel) {
   $depth$addr$011 = $dec$us$peel;
   while (1) {
    $dec = $depth$addr$011 + -1 | 0;
    $shr = $dec >>> 3;
    $arrayidx = $path + $shr | 0;
    $1 = HEAP8[$arrayidx >> 0] | 0;
    $conv = $1 << 24 >> 24;
    $and = $dec & 7;
    $shl = 1 << $and;
    $and2 = $shl & $conv;
    $cmp3 = ($and2 | 0) == 0;
    $branch_path$0 = $cmp3 ? $arraydecay13 : $buffer;
    $leaf_path$0 = $cmp3 ? $buffer : $arraydecay13;
    _cn_fast_hash($buffer, 64, $leaf_path$0);
    $arraydecay20 = $branch + ($dec << 5) | 0;
    dest = $branch_path$0;
    src = $arraydecay20;
    stop = dest + 32 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    $cmp1 = ($dec | 0) == 0;
    if ($cmp1) {
     break;
    } else {
     $depth$addr$011 = $dec;
    }
   }
  }
 }
 _cn_fast_hash($buffer, 64, $root_hash);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography22generateRingSignaturesENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEES7_yRSA_($prefixHash, $keyImage, $publicKeys, $transactionSecretKey, $0, $1, $signatures) {
 $prefixHash = $prefixHash | 0;
 $keyImage = $keyImage | 0;
 $publicKeys = $publicKeys | 0;
 $transactionSecretKey = $transactionSecretKey | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $signatures = $signatures | 0;
 var $2 = 0, $__end_$i$i = 0, $__end_$i$i43 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i47 = 0, $agg$tmp6 = 0, $l_keyImage = 0, $l_keyImage$byval_copy = 0, $l_prefixHash = 0, $l_prefixHash$byval_copy = 0, $l_publicKeys = 0, $l_signatures = 0, $l_transactionSecretKey = 0, $l_transactionSecretKey$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240 | 0);
 $l_transactionSecretKey$byval_copy = sp + 200 | 0;
 $l_keyImage$byval_copy = sp + 168 | 0;
 $l_prefixHash$byval_copy = sp + 136 | 0;
 $l_prefixHash = sp + 104 | 0;
 $l_keyImage = sp + 72 | 0;
 $l_publicKeys = sp + 24 | 0;
 $l_transactionSecretKey = sp + 40 | 0;
 $l_signatures = sp + 12 | 0;
 $agg$tmp6 = sp;
 dest = $l_prefixHash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($l_prefixHash);
 __ZN6Common10podFromHexIN6Crypto4HashEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($prefixHash, $l_prefixHash);
 __ZN6Crypto8KeyImageC2Ev($l_keyImage);
 __ZN6Common10podFromHexIN6Crypto8KeyImageEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($keyImage, $l_keyImage);
 HEAP32[$l_publicKeys >> 2] = 0;
 $__end_$i$i = $l_publicKeys + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $l_publicKeys + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 __ZN4Core13toTypedVectorIN6Crypto9PublicKeyEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($publicKeys, $l_publicKeys);
 __ZN6Crypto9SecretKeyC2Ev($l_transactionSecretKey);
 __ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($transactionSecretKey, $l_transactionSecretKey);
 HEAP32[$l_signatures >> 2] = 0;
 $__end_$i$i43 = $l_signatures + 4 | 0;
 HEAP32[$__end_$i$i43 >> 2] = 0;
 $__value_$i$i$i$i47 = $l_signatures + 8 | 0;
 HEAP32[$__value_$i$i$i$i47 >> 2] = 0;
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEEC2ERKS5_($agg$tmp6, $l_publicKeys);
 dest = $l_prefixHash$byval_copy;
 src = $l_prefixHash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $l_keyImage$byval_copy;
 src = $l_keyImage;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $l_transactionSecretKey$byval_copy;
 src = $l_transactionSecretKey;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $2 = __ZN6Crypto10crypto_ops22generateRingSignaturesENS_4HashENS_8KeyImageENSt3__26vectorINS_9PublicKeyENS3_9allocatorIS5_EEEENS_9SecretKeyEyRNS4_INS_9SignatureENS6_ISA_EEEE($l_prefixHash$byval_copy, $l_keyImage$byval_copy, $agg$tmp6, $l_transactionSecretKey$byval_copy, $0, $1, $l_signatures) | 0;
 __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($agg$tmp6);
 if (!$2) {
  __ZNSt3__213__vector_baseIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($l_signatures);
  __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($l_publicKeys);
  STACKTOP = sp;
  return;
 }
 __ZN4Core14toStringVectorIN6Crypto9SignatureEEEvRKNSt3__26vectorIT_NS3_9allocatorIS5_EEEERNS4_INS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEENS6_ISF_EEEE($l_signatures, $signatures);
 __ZNSt3__213__vector_baseIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($l_signatures);
 __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($l_publicKeys);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_type = 0, $__base_type40 = 0, $add = 0, $call = 0, $call3 = 0, $cmp = 0;
 var $cmp11 = 0, $cmp33 = 0, $cmp34 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $static_type = 0, $tobool16 = 0, $tobool19 = 0, $vfn = 0;
 var $vfn42 = 0, $vtable = 0, $vtable41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = $info + 8 | 0;
 $0 = HEAP32[$static_type >> 2] | 0;
 $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, $use_strcmp) | 0;
 L1 : do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($info, $current_ptr, $path_below);
  } else {
   $1 = HEAP32[$info >> 2] | 0;
   $call3 = __ZL8is_equalPKSt9type_infoS1_b($this, $1, $use_strcmp) | 0;
   if (!$call3) {
    $__base_type40 = $this + 8 | 0;
    $12 = HEAP32[$__base_type40 >> 2] | 0;
    $vtable41 = HEAP32[$12 >> 2] | 0;
    $vfn42 = $vtable41 + 24 | 0;
    $13 = HEAP32[$vfn42 >> 2] | 0;
    FUNCTION_TABLE_viiiii[$13 & 127]($12, $info, $current_ptr, $path_below, $use_strcmp);
    break;
   }
   $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
   $2 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
   $cmp = ($2 | 0) == ($current_ptr | 0);
   if (!$cmp) {
    $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
    $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0;
    $cmp5 = ($3 | 0) == ($current_ptr | 0);
    if (!$cmp5) {
     $path_dynamic_ptr_to_dst_ptr10 = $info + 32 | 0;
     HEAP32[$path_dynamic_ptr_to_dst_ptr10 >> 2] = $path_below;
     $is_dst_type_derived_from_static_type = $info + 44 | 0;
     $4 = HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0;
     $cmp11 = ($4 | 0) == 4;
     do {
      if (!$cmp11) {
       $found_our_static_ptr = $info + 52 | 0;
       HEAP8[$found_our_static_ptr >> 0] = 0;
       $found_any_static_type = $info + 53 | 0;
       HEAP8[$found_any_static_type >> 0] = 0;
       $__base_type = $this + 8 | 0;
       $5 = HEAP32[$__base_type >> 2] | 0;
       $vtable = HEAP32[$5 >> 2] | 0;
       $vfn = $vtable + 20 | 0;
       $6 = HEAP32[$vfn >> 2] | 0;
       FUNCTION_TABLE_viiiiii[$6 & 127]($5, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
       $7 = HEAP8[$found_any_static_type >> 0] | 0;
       $tobool16 = $7 << 24 >> 24 == 0;
       if ($tobool16) {
        HEAP32[$is_dst_type_derived_from_static_type >> 2] = 4;
        break;
       } else {
        $8 = HEAP8[$found_our_static_ptr >> 0] | 0;
        $tobool19 = $8 << 24 >> 24 == 0;
        HEAP32[$is_dst_type_derived_from_static_type >> 2] = 3;
        if ($tobool19) {
         break;
        } else {
         break L1;
        }
       }
      }
     } while (0);
     HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
     $number_to_dst_ptr = $info + 40 | 0;
     $9 = HEAP32[$number_to_dst_ptr >> 2] | 0;
     $add = $9 + 1 | 0;
     HEAP32[$number_to_dst_ptr >> 2] = $add;
     $number_to_static_ptr = $info + 36 | 0;
     $10 = HEAP32[$number_to_static_ptr >> 2] | 0;
     $cmp33 = ($10 | 0) == 1;
     if (!$cmp33) {
      break;
     }
     $path_dst_ptr_to_static_ptr = $info + 24 | 0;
     $11 = HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
     $cmp34 = ($11 | 0) == 2;
     if (!$cmp34) {
      break;
     }
     $search_done = $info + 54 | 0;
     HEAP8[$search_done >> 0] = 1;
     break;
    }
   }
   $cmp7 = ($path_below | 0) == 1;
   if ($cmp7) {
    $path_dynamic_ptr_to_dst_ptr = $info + 32 | 0;
    HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] = 1;
   }
  }
 } while (0);
 return;
}

function _sc_isnonzero($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx1 = 0, $arrayidx12 = 0, $arrayidx15 = 0, $arrayidx18 = 0, $arrayidx21 = 0, $arrayidx24 = 0, $arrayidx27 = 0;
 var $arrayidx3 = 0, $arrayidx30 = 0, $arrayidx33 = 0, $arrayidx36 = 0, $arrayidx39 = 0, $arrayidx42 = 0, $arrayidx45 = 0, $arrayidx48 = 0, $arrayidx51 = 0, $arrayidx54 = 0, $arrayidx57 = 0, $arrayidx6 = 0, $arrayidx60 = 0, $arrayidx63 = 0, $arrayidx66 = 0, $arrayidx69 = 0, $arrayidx72 = 0, $arrayidx75 = 0, $arrayidx78 = 0, $arrayidx81 = 0;
 var $arrayidx84 = 0, $arrayidx87 = 0, $arrayidx9 = 0, $arrayidx90 = 0, $or1136 = 0, $or1437 = 0, $or1738 = 0, $or2039 = 0, $or2340 = 0, $or2641 = 0, $or2942 = 0, $or3243 = 0, $or33 = 0, $or3544 = 0, $or3845 = 0, $or4146 = 0, $or4447 = 0, $or4748 = 0, $or5049 = 0, $or534 = 0;
 var $or5350 = 0, $or5651 = 0, $or5952 = 0, $or6253 = 0, $or6554 = 0, $or6855 = 0, $or7156 = 0, $or7457 = 0, $or7758 = 0, $or8059 = 0, $or835 = 0, $or8360 = 0, $or8661 = 0, $or8962 = 0, $or92 = 0, $or9263 = 0, $shr = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$s >> 0] | 0;
 $arrayidx1 = $s + 1 | 0;
 $1 = HEAP8[$arrayidx1 >> 0] | 0;
 $or33 = $1 | $0;
 $arrayidx3 = $s + 2 | 0;
 $2 = HEAP8[$arrayidx3 >> 0] | 0;
 $or534 = $or33 | $2;
 $arrayidx6 = $s + 3 | 0;
 $3 = HEAP8[$arrayidx6 >> 0] | 0;
 $or835 = $or534 | $3;
 $arrayidx9 = $s + 4 | 0;
 $4 = HEAP8[$arrayidx9 >> 0] | 0;
 $or1136 = $or835 | $4;
 $arrayidx12 = $s + 5 | 0;
 $5 = HEAP8[$arrayidx12 >> 0] | 0;
 $or1437 = $or1136 | $5;
 $arrayidx15 = $s + 6 | 0;
 $6 = HEAP8[$arrayidx15 >> 0] | 0;
 $or1738 = $or1437 | $6;
 $arrayidx18 = $s + 7 | 0;
 $7 = HEAP8[$arrayidx18 >> 0] | 0;
 $or2039 = $or1738 | $7;
 $arrayidx21 = $s + 8 | 0;
 $8 = HEAP8[$arrayidx21 >> 0] | 0;
 $or2340 = $or2039 | $8;
 $arrayidx24 = $s + 9 | 0;
 $9 = HEAP8[$arrayidx24 >> 0] | 0;
 $or2641 = $or2340 | $9;
 $arrayidx27 = $s + 10 | 0;
 $10 = HEAP8[$arrayidx27 >> 0] | 0;
 $or2942 = $or2641 | $10;
 $arrayidx30 = $s + 11 | 0;
 $11 = HEAP8[$arrayidx30 >> 0] | 0;
 $or3243 = $or2942 | $11;
 $arrayidx33 = $s + 12 | 0;
 $12 = HEAP8[$arrayidx33 >> 0] | 0;
 $or3544 = $or3243 | $12;
 $arrayidx36 = $s + 13 | 0;
 $13 = HEAP8[$arrayidx36 >> 0] | 0;
 $or3845 = $or3544 | $13;
 $arrayidx39 = $s + 14 | 0;
 $14 = HEAP8[$arrayidx39 >> 0] | 0;
 $or4146 = $or3845 | $14;
 $arrayidx42 = $s + 15 | 0;
 $15 = HEAP8[$arrayidx42 >> 0] | 0;
 $or4447 = $or4146 | $15;
 $arrayidx45 = $s + 16 | 0;
 $16 = HEAP8[$arrayidx45 >> 0] | 0;
 $or4748 = $or4447 | $16;
 $arrayidx48 = $s + 17 | 0;
 $17 = HEAP8[$arrayidx48 >> 0] | 0;
 $or5049 = $or4748 | $17;
 $arrayidx51 = $s + 18 | 0;
 $18 = HEAP8[$arrayidx51 >> 0] | 0;
 $or5350 = $or5049 | $18;
 $arrayidx54 = $s + 19 | 0;
 $19 = HEAP8[$arrayidx54 >> 0] | 0;
 $or5651 = $or5350 | $19;
 $arrayidx57 = $s + 20 | 0;
 $20 = HEAP8[$arrayidx57 >> 0] | 0;
 $or5952 = $or5651 | $20;
 $arrayidx60 = $s + 21 | 0;
 $21 = HEAP8[$arrayidx60 >> 0] | 0;
 $or6253 = $or5952 | $21;
 $arrayidx63 = $s + 22 | 0;
 $22 = HEAP8[$arrayidx63 >> 0] | 0;
 $or6554 = $or6253 | $22;
 $arrayidx66 = $s + 23 | 0;
 $23 = HEAP8[$arrayidx66 >> 0] | 0;
 $or6855 = $or6554 | $23;
 $arrayidx69 = $s + 24 | 0;
 $24 = HEAP8[$arrayidx69 >> 0] | 0;
 $or7156 = $or6855 | $24;
 $arrayidx72 = $s + 25 | 0;
 $25 = HEAP8[$arrayidx72 >> 0] | 0;
 $or7457 = $or7156 | $25;
 $arrayidx75 = $s + 26 | 0;
 $26 = HEAP8[$arrayidx75 >> 0] | 0;
 $or7758 = $or7457 | $26;
 $arrayidx78 = $s + 27 | 0;
 $27 = HEAP8[$arrayidx78 >> 0] | 0;
 $or8059 = $or7758 | $27;
 $arrayidx81 = $s + 28 | 0;
 $28 = HEAP8[$arrayidx81 >> 0] | 0;
 $or8360 = $or8059 | $28;
 $arrayidx84 = $s + 29 | 0;
 $29 = HEAP8[$arrayidx84 >> 0] | 0;
 $or8661 = $or8360 | $29;
 $arrayidx87 = $s + 30 | 0;
 $30 = HEAP8[$arrayidx87 >> 0] | 0;
 $or8962 = $or8661 | $30;
 $arrayidx90 = $s + 31 | 0;
 $31 = HEAP8[$arrayidx90 >> 0] | 0;
 $or9263 = $or8962 | $31;
 $or92 = $or9263 & 255;
 $sub = $or92 + -1 | 0;
 $shr = $sub >> 8;
 $add = $shr + 1 | 0;
 return $add | 0;
}

function __ZN4Core12Cryptography22generateTransactionPowENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmm($serializedTransactionStr, $nonceOffset, $diff) {
 $serializedTransactionStr = $serializedTransactionStr | 0;
 $nonceOffset = $nonceOffset | 0;
 $diff = $diff | 0;
 var $$pre = 0, $$pre13 = 0, $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__begin$sroa$0$011 = 0, $__end_$i$i = 0, $__value_$i$i$i$i = 0, $call = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i10 = 0, $cmp12 = 0, $diff$addr = 0;
 var $i = 0, $inc = 0, $incdec$ptr$i = 0, $incdec$ptr$i289 = 0, $nonce = 0, $nonceOffset$addr = 0, $ref$tmp3 = 0, $ref$tmp3$idx1$val = 0, $ref$tmp3$idx1$val$pre = 0, $ref$tmp4 = 0, $ref$tmp6 = 0, $serializedTransaction = 0, $shouldStop = 0, $threadCount = 0, $threads = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $nonceOffset$addr = sp + 52 | 0;
 $diff$addr = sp + 48 | 0;
 $serializedTransaction = sp + 36 | 0;
 $threadCount = sp + 32 | 0;
 $shouldStop = sp + 56 | 0;
 $nonce = sp + 28 | 0;
 $threads = sp + 16 | 0;
 $i = sp + 12 | 0;
 $ref$tmp3 = sp + 8 | 0;
 $ref$tmp4 = sp + 4 | 0;
 $ref$tmp6 = sp;
 HEAP32[$nonceOffset$addr >> 2] = $nonceOffset;
 HEAP32[$diff$addr >> 2] = $diff;
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($serializedTransaction, $serializedTransactionStr);
 $call = __ZNSt3__26thread20hardware_concurrencyEv() | 0;
 $cmp$i$i$i = $call >>> 0 > 1;
 $$sroa$speculated = $cmp$i$i$i ? $call : 1;
 HEAP32[$threadCount >> 2] = $$sroa$speculated;
 HEAP8[$shouldStop >> 0] = 0;
 HEAP32[$threads >> 2] = 0;
 $__end_$i$i = $threads + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $threads + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 $cmp12 = ($$sroa$speculated | 0) > 0;
 if (!$cmp12) {
  $5 = HEAP32[$nonce >> 2] | 0;
  __ZNSt3__213__vector_baseINS_6threadENS_9allocatorIS1_EEED2Ev($threads);
  __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($serializedTransaction);
  STACKTOP = sp;
  return $5 | 0;
 }
 $4 = 0;
 while (1) {
  HEAP32[$ref$tmp4 >> 2] = $shouldStop;
  HEAP32[$ref$tmp6 >> 2] = $nonce;
  __ZNSt3__26threadC2IRFvNS_6vectorIhNS_9allocatorIhEEEEmijRNS_6atomicIbEERjjEJRS5_RKmRKiRiNS_17reference_wrapperIS7_EENSI_IjEESE_EvEEOT_DpOT0_($ref$tmp3, $serializedTransaction, $nonceOffset$addr, $threadCount, $i, $ref$tmp4, $ref$tmp6, $diff$addr);
  $0 = HEAP32[$__end_$i$i >> 2] | 0;
  $1 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
  $cmp$i = $0 >>> 0 < $1 >>> 0;
  if ($cmp$i) {
   $2 = HEAP32[$ref$tmp3 >> 2] | 0;
   HEAP32[$0 >> 2] = $2;
   HEAP32[$ref$tmp3 >> 2] = 0;
   $3 = HEAP32[$__end_$i$i >> 2] | 0;
   $incdec$ptr$i = $3 + 4 | 0;
   HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i;
   $ref$tmp3$idx1$val = 0;
  } else {
   __ZNSt3__26vectorINS_6threadENS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($threads, $ref$tmp3);
   $ref$tmp3$idx1$val$pre = HEAP32[$ref$tmp3 >> 2] | 0;
   $ref$tmp3$idx1$val = $ref$tmp3$idx1$val$pre;
  }
  __ZNSt3__26threadD2Ev($ref$tmp3$idx1$val);
  $inc = $4 + 1 | 0;
  HEAP32[$i >> 2] = $inc;
  $cmp = ($inc | 0) < ($$sroa$speculated | 0);
  if ($cmp) {
   $4 = $inc;
  } else {
   break;
  }
 }
 $$pre = HEAP32[$threads >> 2] | 0;
 $$pre13 = HEAP32[$__end_$i$i >> 2] | 0;
 $cmp$i$i10 = ($$pre | 0) == ($$pre13 | 0);
 if ($cmp$i$i10) {
  $5 = HEAP32[$nonce >> 2] | 0;
  __ZNSt3__213__vector_baseINS_6threadENS_9allocatorIS1_EEED2Ev($threads);
  __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($serializedTransaction);
  STACKTOP = sp;
  return $5 | 0;
 }
 $__begin$sroa$0$011 = $$pre;
 while (1) {
  __ZNSt3__26thread4joinEv($__begin$sroa$0$011);
  $incdec$ptr$i289 = $__begin$sroa$0$011 + 4 | 0;
  $cmp$i$i = ($incdec$ptr$i289 | 0) == ($$pre13 | 0);
  if ($cmp$i$i) {
   break;
  } else {
   $__begin$sroa$0$011 = $incdec$ptr$i289;
  }
 }
 $5 = HEAP32[$nonce >> 2] | 0;
 __ZNSt3__213__vector_baseINS_6threadENS_9allocatorIS1_EEED2Ev($threads);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($serializedTransaction);
 STACKTOP = sp;
 return $5 | 0;
}

function _aesb_single_round($in, $out, $expandedKey) {
 $in = $in | 0;
 $out = $out | 0;
 $expandedKey = $expandedKey | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr1 = 0, $add$ptr3 = 0, $add$ptr5 = 0, $add$ptr95 = 0, $add$ptr97 = 0, $add$ptr99 = 0, $and = 0, $and12 = 0, $and16 = 0, $and29 = 0, $and33 = 0, $and38 = 0, $and51 = 0, $and55 = 0, $and60 = 0, $and73 = 0;
 var $and77 = 0, $and82 = 0, $arrayidx13 = 0, $arrayidx17 = 0, $arrayidx22 = 0, $arrayidx26 = 0, $arrayidx30 = 0, $arrayidx34 = 0, $arrayidx39 = 0, $arrayidx44 = 0, $arrayidx48 = 0, $arrayidx52 = 0, $arrayidx56 = 0, $arrayidx61 = 0, $arrayidx66 = 0, $arrayidx70 = 0, $arrayidx74 = 0, $arrayidx78 = 0, $arrayidx83 = 0, $arrayidx88 = 0;
 var $arrayidx9 = 0, $shr11 = 0, $shr15 = 0, $shr20 = 0, $shr32 = 0, $shr37 = 0, $shr42 = 0, $shr54 = 0, $shr59 = 0, $shr64 = 0, $shr76 = 0, $shr81 = 0, $shr86 = 0, $xor = 0, $xor18 = 0, $xor23 = 0, $xor24 = 0, $xor35 = 0, $xor40 = 0, $xor45 = 0;
 var $xor46 = 0, $xor57 = 0, $xor62 = 0, $xor67 = 0, $xor68 = 0, $xor79 = 0, $xor84 = 0, $xor89 = 0, $xor90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$in >> 2] | 0;
 $add$ptr1 = $in + 4 | 0;
 $1 = HEAP32[$add$ptr1 >> 2] | 0;
 $add$ptr3 = $in + 8 | 0;
 $2 = HEAP32[$add$ptr3 >> 2] | 0;
 $add$ptr5 = $in + 12 | 0;
 $3 = HEAP32[$add$ptr5 >> 2] | 0;
 $4 = HEAP32[$expandedKey >> 2] | 0;
 $and = $0 & 255;
 $arrayidx9 = 33136 + ($and << 2) | 0;
 $5 = HEAP32[$arrayidx9 >> 2] | 0;
 $shr11 = $1 >>> 8;
 $and12 = $shr11 & 255;
 $arrayidx13 = 34160 + ($and12 << 2) | 0;
 $6 = HEAP32[$arrayidx13 >> 2] | 0;
 $shr15 = $2 >>> 16;
 $and16 = $shr15 & 255;
 $arrayidx17 = 35184 + ($and16 << 2) | 0;
 $7 = HEAP32[$arrayidx17 >> 2] | 0;
 $shr20 = $3 >>> 24;
 $arrayidx22 = 36208 + ($shr20 << 2) | 0;
 $8 = HEAP32[$arrayidx22 >> 2] | 0;
 $xor = $5 ^ $4;
 $xor18 = $xor ^ $6;
 $xor23 = $xor18 ^ $7;
 $xor24 = $xor23 ^ $8;
 $arrayidx26 = $expandedKey + 4 | 0;
 $9 = HEAP32[$arrayidx26 >> 2] | 0;
 $and29 = $1 & 255;
 $arrayidx30 = 33136 + ($and29 << 2) | 0;
 $10 = HEAP32[$arrayidx30 >> 2] | 0;
 $shr32 = $2 >>> 8;
 $and33 = $shr32 & 255;
 $arrayidx34 = 34160 + ($and33 << 2) | 0;
 $11 = HEAP32[$arrayidx34 >> 2] | 0;
 $shr37 = $3 >>> 16;
 $and38 = $shr37 & 255;
 $arrayidx39 = 35184 + ($and38 << 2) | 0;
 $12 = HEAP32[$arrayidx39 >> 2] | 0;
 $shr42 = $0 >>> 24;
 $arrayidx44 = 36208 + ($shr42 << 2) | 0;
 $13 = HEAP32[$arrayidx44 >> 2] | 0;
 $xor35 = $10 ^ $9;
 $xor40 = $xor35 ^ $11;
 $xor45 = $xor40 ^ $12;
 $xor46 = $xor45 ^ $13;
 $arrayidx48 = $expandedKey + 8 | 0;
 $14 = HEAP32[$arrayidx48 >> 2] | 0;
 $and51 = $2 & 255;
 $arrayidx52 = 33136 + ($and51 << 2) | 0;
 $15 = HEAP32[$arrayidx52 >> 2] | 0;
 $shr54 = $3 >>> 8;
 $and55 = $shr54 & 255;
 $arrayidx56 = 34160 + ($and55 << 2) | 0;
 $16 = HEAP32[$arrayidx56 >> 2] | 0;
 $shr59 = $0 >>> 16;
 $and60 = $shr59 & 255;
 $arrayidx61 = 35184 + ($and60 << 2) | 0;
 $17 = HEAP32[$arrayidx61 >> 2] | 0;
 $shr64 = $1 >>> 24;
 $arrayidx66 = 36208 + ($shr64 << 2) | 0;
 $18 = HEAP32[$arrayidx66 >> 2] | 0;
 $xor57 = $15 ^ $14;
 $xor62 = $xor57 ^ $16;
 $xor67 = $xor62 ^ $17;
 $xor68 = $xor67 ^ $18;
 $arrayidx70 = $expandedKey + 12 | 0;
 $19 = HEAP32[$arrayidx70 >> 2] | 0;
 $and73 = $3 & 255;
 $arrayidx74 = 33136 + ($and73 << 2) | 0;
 $20 = HEAP32[$arrayidx74 >> 2] | 0;
 $shr76 = $0 >>> 8;
 $and77 = $shr76 & 255;
 $arrayidx78 = 34160 + ($and77 << 2) | 0;
 $21 = HEAP32[$arrayidx78 >> 2] | 0;
 $shr81 = $1 >>> 16;
 $and82 = $shr81 & 255;
 $arrayidx83 = 35184 + ($and82 << 2) | 0;
 $22 = HEAP32[$arrayidx83 >> 2] | 0;
 $shr86 = $2 >>> 24;
 $arrayidx88 = 36208 + ($shr86 << 2) | 0;
 $23 = HEAP32[$arrayidx88 >> 2] | 0;
 $xor79 = $20 ^ $19;
 $xor84 = $xor79 ^ $21;
 $xor89 = $xor84 ^ $22;
 $xor90 = $xor89 ^ $23;
 HEAP32[$out >> 2] = $xor24;
 $add$ptr95 = $out + 4 | 0;
 HEAP32[$add$ptr95 >> 2] = $xor46;
 $add$ptr97 = $out + 8 | 0;
 HEAP32[$add$ptr97 >> 2] = $xor68;
 $add$ptr99 = $out + 12 | 0;
 HEAP32[$add$ptr99 >> 2] = $xor90;
 return;
}

function __ZN4Core12Cryptography35generateViewKeysFromPrivateSpendKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERS7_S8_($privateSpendKey, $privateViewKey, $publicViewKey) {
 $privateSpendKey = $privateSpendKey | 0;
 $privateViewKey = $privateViewKey | 0;
 $publicViewKey = $publicViewKey | 0;
 var $$pr = 0, $$pr10 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i179 = 0, $__size_$i$i$i$i$i = 0, $__size_$i$i$i$i$i103 = 0, $__size_$i45$i$i$i$i = 0, $__size_$i45$i$i$i$i120 = 0, $l_privateSpendKey = 0, $l_privateViewKey = 0, $l_publicViewKey = 0, $ref$tmp = 0, $ref$tmp2 = 0, $tobool$i$i$i$i = 0;
 var $tobool$i$i$i$i$i = 0, $tobool$i$i$i$i$i106 = 0, $tobool$i$i$i$i148 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $l_privateSpendKey = sp + 88 | 0;
 $l_privateViewKey = sp + 56 | 0;
 $l_publicViewKey = sp + 24 | 0;
 $ref$tmp = sp + 12 | 0;
 $ref$tmp2 = sp;
 __ZN6Crypto9SecretKeyC2Ev($l_privateSpendKey);
 __ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($privateSpendKey, $l_privateSpendKey);
 __ZN6Crypto9SecretKeyC2Ev($l_privateViewKey);
 __ZN6Crypto9PublicKeyC2Ev($l_publicViewKey);
 __ZN6Crypto10crypto_ops21generateViewFromSpendERKNS_9SecretKeyERS1_RNS_9PublicKeyE($l_privateSpendKey, $l_privateViewKey, $l_publicViewKey);
 __ZN6Common8podToHexIN6Crypto9SecretKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($ref$tmp, $l_privateViewKey);
 $__size_$i$i$i$i$i = $privateViewKey + 11 | 0;
 $0 = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
 $tobool$i$i$i$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i$i$i$i) {
  $1 = HEAP32[$privateViewKey >> 2] | 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($1, 0);
  $__size_$i45$i$i$i$i = $privateViewKey + 4 | 0;
  HEAP32[$__size_$i45$i$i$i$i >> 2] = 0;
  $$pr = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
  $tobool$i$i$i$i = $$pr << 24 >> 24 < 0;
  if ($tobool$i$i$i$i) {
   $2 = HEAP32[$privateViewKey >> 2] | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2);
   $__cap_$i$i$i$i$i = $privateViewKey + 8 | 0;
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  __ZNSt3__211char_traitsIcE6assignERcRKc($privateViewKey, 0);
  HEAP8[$__size_$i$i$i$i$i >> 0] = 0;
 };
 HEAP32[$privateViewKey >> 2] = HEAP32[$ref$tmp >> 2] | 0;
 HEAP32[$privateViewKey + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2] | 0;
 HEAP32[$privateViewKey + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2] | 0;
 HEAP32[$ref$tmp >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZN6Common8podToHexIN6Crypto9PublicKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($ref$tmp2, $l_publicViewKey);
 $__size_$i$i$i$i$i103 = $publicViewKey + 11 | 0;
 $3 = HEAP8[$__size_$i$i$i$i$i103 >> 0] | 0;
 $tobool$i$i$i$i$i106 = $3 << 24 >> 24 < 0;
 if ($tobool$i$i$i$i$i106) {
  $4 = HEAP32[$publicViewKey >> 2] | 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($4, 0);
  $__size_$i45$i$i$i$i120 = $publicViewKey + 4 | 0;
  HEAP32[$__size_$i45$i$i$i$i120 >> 2] = 0;
  $$pr10 = HEAP8[$__size_$i$i$i$i$i103 >> 0] | 0;
  $tobool$i$i$i$i148 = $$pr10 << 24 >> 24 < 0;
  if ($tobool$i$i$i$i148) {
   $5 = HEAP32[$publicViewKey >> 2] | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($5);
   $__cap_$i$i$i$i$i179 = $publicViewKey + 8 | 0;
   HEAP32[$__cap_$i$i$i$i$i179 >> 2] = 0;
  }
 } else {
  __ZNSt3__211char_traitsIcE6assignERcRKc($publicViewKey, 0);
  HEAP8[$__size_$i$i$i$i$i103 >> 0] = 0;
 };
 HEAP32[$publicViewKey >> 2] = HEAP32[$ref$tmp2 >> 2] | 0;
 HEAP32[$publicViewKey + 4 >> 2] = HEAP32[$ref$tmp2 + 4 >> 2] | 0;
 HEAP32[$publicViewKey + 8 >> 2] = HEAP32[$ref$tmp2 + 8 >> 2] | 0;
 HEAP32[$ref$tmp2 >> 2] = 0 | 0;
 HEAP32[$ref$tmp2 + 4 >> 2] = 0 | 0;
 HEAP32[$ref$tmp2 + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
 STACKTOP = sp;
 return;
}

function _xor_blocks($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx$1 = 0, $arrayidx$10 = 0, $arrayidx$11 = 0, $arrayidx$12 = 0, $arrayidx$13 = 0, $arrayidx$14 = 0, $arrayidx$15 = 0, $arrayidx$2 = 0;
 var $arrayidx$3 = 0, $arrayidx$4 = 0, $arrayidx$5 = 0, $arrayidx$6 = 0, $arrayidx$7 = 0, $arrayidx$8 = 0, $arrayidx$9 = 0, $arrayidx1$1 = 0, $arrayidx1$10 = 0, $arrayidx1$11 = 0, $arrayidx1$12 = 0, $arrayidx1$13 = 0, $arrayidx1$14 = 0, $arrayidx1$15 = 0, $arrayidx1$2 = 0, $arrayidx1$3 = 0, $arrayidx1$4 = 0, $arrayidx1$5 = 0, $arrayidx1$6 = 0, $arrayidx1$7 = 0;
 var $arrayidx1$8 = 0, $arrayidx1$9 = 0, $xor4 = 0, $xor4$1 = 0, $xor4$10 = 0, $xor4$11 = 0, $xor4$12 = 0, $xor4$13 = 0, $xor4$14 = 0, $xor4$15 = 0, $xor4$2 = 0, $xor4$3 = 0, $xor4$4 = 0, $xor4$5 = 0, $xor4$6 = 0, $xor4$7 = 0, $xor4$8 = 0, $xor4$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$b >> 0] | 0;
 $1 = HEAP8[$a >> 0] | 0;
 $xor4 = $1 ^ $0;
 HEAP8[$a >> 0] = $xor4;
 $arrayidx$1 = $b + 1 | 0;
 $2 = HEAP8[$arrayidx$1 >> 0] | 0;
 $arrayidx1$1 = $a + 1 | 0;
 $3 = HEAP8[$arrayidx1$1 >> 0] | 0;
 $xor4$1 = $3 ^ $2;
 HEAP8[$arrayidx1$1 >> 0] = $xor4$1;
 $arrayidx$2 = $b + 2 | 0;
 $4 = HEAP8[$arrayidx$2 >> 0] | 0;
 $arrayidx1$2 = $a + 2 | 0;
 $5 = HEAP8[$arrayidx1$2 >> 0] | 0;
 $xor4$2 = $5 ^ $4;
 HEAP8[$arrayidx1$2 >> 0] = $xor4$2;
 $arrayidx$3 = $b + 3 | 0;
 $6 = HEAP8[$arrayidx$3 >> 0] | 0;
 $arrayidx1$3 = $a + 3 | 0;
 $7 = HEAP8[$arrayidx1$3 >> 0] | 0;
 $xor4$3 = $7 ^ $6;
 HEAP8[$arrayidx1$3 >> 0] = $xor4$3;
 $arrayidx$4 = $b + 4 | 0;
 $8 = HEAP8[$arrayidx$4 >> 0] | 0;
 $arrayidx1$4 = $a + 4 | 0;
 $9 = HEAP8[$arrayidx1$4 >> 0] | 0;
 $xor4$4 = $9 ^ $8;
 HEAP8[$arrayidx1$4 >> 0] = $xor4$4;
 $arrayidx$5 = $b + 5 | 0;
 $10 = HEAP8[$arrayidx$5 >> 0] | 0;
 $arrayidx1$5 = $a + 5 | 0;
 $11 = HEAP8[$arrayidx1$5 >> 0] | 0;
 $xor4$5 = $11 ^ $10;
 HEAP8[$arrayidx1$5 >> 0] = $xor4$5;
 $arrayidx$6 = $b + 6 | 0;
 $12 = HEAP8[$arrayidx$6 >> 0] | 0;
 $arrayidx1$6 = $a + 6 | 0;
 $13 = HEAP8[$arrayidx1$6 >> 0] | 0;
 $xor4$6 = $13 ^ $12;
 HEAP8[$arrayidx1$6 >> 0] = $xor4$6;
 $arrayidx$7 = $b + 7 | 0;
 $14 = HEAP8[$arrayidx$7 >> 0] | 0;
 $arrayidx1$7 = $a + 7 | 0;
 $15 = HEAP8[$arrayidx1$7 >> 0] | 0;
 $xor4$7 = $15 ^ $14;
 HEAP8[$arrayidx1$7 >> 0] = $xor4$7;
 $arrayidx$8 = $b + 8 | 0;
 $16 = HEAP8[$arrayidx$8 >> 0] | 0;
 $arrayidx1$8 = $a + 8 | 0;
 $17 = HEAP8[$arrayidx1$8 >> 0] | 0;
 $xor4$8 = $17 ^ $16;
 HEAP8[$arrayidx1$8 >> 0] = $xor4$8;
 $arrayidx$9 = $b + 9 | 0;
 $18 = HEAP8[$arrayidx$9 >> 0] | 0;
 $arrayidx1$9 = $a + 9 | 0;
 $19 = HEAP8[$arrayidx1$9 >> 0] | 0;
 $xor4$9 = $19 ^ $18;
 HEAP8[$arrayidx1$9 >> 0] = $xor4$9;
 $arrayidx$10 = $b + 10 | 0;
 $20 = HEAP8[$arrayidx$10 >> 0] | 0;
 $arrayidx1$10 = $a + 10 | 0;
 $21 = HEAP8[$arrayidx1$10 >> 0] | 0;
 $xor4$10 = $21 ^ $20;
 HEAP8[$arrayidx1$10 >> 0] = $xor4$10;
 $arrayidx$11 = $b + 11 | 0;
 $22 = HEAP8[$arrayidx$11 >> 0] | 0;
 $arrayidx1$11 = $a + 11 | 0;
 $23 = HEAP8[$arrayidx1$11 >> 0] | 0;
 $xor4$11 = $23 ^ $22;
 HEAP8[$arrayidx1$11 >> 0] = $xor4$11;
 $arrayidx$12 = $b + 12 | 0;
 $24 = HEAP8[$arrayidx$12 >> 0] | 0;
 $arrayidx1$12 = $a + 12 | 0;
 $25 = HEAP8[$arrayidx1$12 >> 0] | 0;
 $xor4$12 = $25 ^ $24;
 HEAP8[$arrayidx1$12 >> 0] = $xor4$12;
 $arrayidx$13 = $b + 13 | 0;
 $26 = HEAP8[$arrayidx$13 >> 0] | 0;
 $arrayidx1$13 = $a + 13 | 0;
 $27 = HEAP8[$arrayidx1$13 >> 0] | 0;
 $xor4$13 = $27 ^ $26;
 HEAP8[$arrayidx1$13 >> 0] = $xor4$13;
 $arrayidx$14 = $b + 14 | 0;
 $28 = HEAP8[$arrayidx$14 >> 0] | 0;
 $arrayidx1$14 = $a + 14 | 0;
 $29 = HEAP8[$arrayidx1$14 >> 0] | 0;
 $xor4$14 = $29 ^ $28;
 HEAP8[$arrayidx1$14 >> 0] = $xor4$14;
 $arrayidx$15 = $b + 15 | 0;
 $30 = HEAP8[$arrayidx$15 >> 0] | 0;
 $arrayidx1$15 = $a + 15 | 0;
 $31 = HEAP8[$arrayidx1$15 >> 0] | 0;
 $xor4$15 = $31 ^ $30;
 HEAP8[$arrayidx1$15 >> 0] = $xor4$15;
 return;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr32 = 0, $buf8 = 0, $buf_size = 0, $call = 0;
 var $call40 = 0, $call7 = 0, $call741 = 0, $call746 = 0, $cmp = 0, $cmp12 = 0, $cmp17 = 0, $cmp24 = 0, $cmp42 = 0, $cnt$0 = 0, $dec = 0, $fd = 0, $incdec$ptr = 0, $iov$043 = 0, $iov$1 = 0, $iov_base2 = 0, $iov_len = 0, $iov_len19 = 0, $iov_len23 = 0, $iov_len3 = 0;
 var $iov_len36 = 0, $iovcnt$045 = 0, $iovcnt$1 = 0, $iovs = 0, $or = 0, $rem$044 = 0, $retval$0 = 0, $sub = 0, $sub$ptr$sub = 0, $sub21 = 0, $sub28 = 0, $sub37 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $wbase = 0, $wend = 0;
 var $wend14 = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $vararg_buffer3 = sp + 32 | 0;
 $vararg_buffer = sp + 16 | 0;
 $iovs = sp;
 $wbase = $f + 28 | 0;
 $0 = HEAP32[$wbase >> 2] | 0;
 HEAP32[$iovs >> 2] = $0;
 $iov_len = $iovs + 4 | 0;
 $wpos = $f + 20 | 0;
 $1 = HEAP32[$wpos >> 2] | 0;
 $sub$ptr$sub = $1 - $0 | 0;
 HEAP32[$iov_len >> 2] = $sub$ptr$sub;
 $iov_base2 = $iovs + 8 | 0;
 HEAP32[$iov_base2 >> 2] = $buf;
 $iov_len3 = $iovs + 12 | 0;
 HEAP32[$iov_len3 >> 2] = $len;
 $add = $sub$ptr$sub + $len | 0;
 $fd = $f + 60 | 0;
 $2 = HEAP32[$fd >> 2] | 0;
 $3 = $iovs;
 HEAP32[$vararg_buffer >> 2] = $2;
 $vararg_ptr1 = $vararg_buffer + 4 | 0;
 HEAP32[$vararg_ptr1 >> 2] = $3;
 $vararg_ptr2 = $vararg_buffer + 8 | 0;
 HEAP32[$vararg_ptr2 >> 2] = 2;
 $call40 = ___syscall146(146, $vararg_buffer | 0) | 0;
 $call741 = ___syscall_ret($call40) | 0;
 $cmp42 = ($add | 0) == ($call741 | 0);
 L1 : do {
  if ($cmp42) {
   label = 3;
  } else {
   $call746 = $call741;
   $iov$043 = $iovs;
   $iovcnt$045 = 2;
   $rem$044 = $add;
   while (1) {
    $cmp12 = ($call746 | 0) < 0;
    if ($cmp12) {
     break;
    }
    $sub21 = $rem$044 - $call746 | 0;
    $iov_len23 = $iov$043 + 4 | 0;
    $9 = HEAP32[$iov_len23 >> 2] | 0;
    $cmp24 = $call746 >>> 0 > $9 >>> 0;
    $incdec$ptr = $iov$043 + 8 | 0;
    $iov$1 = $cmp24 ? $incdec$ptr : $iov$043;
    $dec = $cmp24 << 31 >> 31;
    $iovcnt$1 = $iovcnt$045 + $dec | 0;
    $sub28 = $cmp24 ? $9 : 0;
    $cnt$0 = $call746 - $sub28 | 0;
    $10 = HEAP32[$iov$1 >> 2] | 0;
    $add$ptr32 = $10 + $cnt$0 | 0;
    HEAP32[$iov$1 >> 2] = $add$ptr32;
    $iov_len36 = $iov$1 + 4 | 0;
    $11 = HEAP32[$iov_len36 >> 2] | 0;
    $sub37 = $11 - $cnt$0 | 0;
    HEAP32[$iov_len36 >> 2] = $sub37;
    $12 = HEAP32[$fd >> 2] | 0;
    $13 = $iov$1;
    HEAP32[$vararg_buffer3 >> 2] = $12;
    $vararg_ptr6 = $vararg_buffer3 + 4 | 0;
    HEAP32[$vararg_ptr6 >> 2] = $13;
    $vararg_ptr7 = $vararg_buffer3 + 8 | 0;
    HEAP32[$vararg_ptr7 >> 2] = $iovcnt$1;
    $call = ___syscall146(146, $vararg_buffer3 | 0) | 0;
    $call7 = ___syscall_ret($call) | 0;
    $cmp = ($sub21 | 0) == ($call7 | 0);
    if ($cmp) {
     label = 3;
     break L1;
    } else {
     $call746 = $call7;
     $iov$043 = $iov$1;
     $iovcnt$045 = $iovcnt$1;
     $rem$044 = $sub21;
    }
   }
   $wend14 = $f + 16 | 0;
   HEAP32[$wend14 >> 2] = 0;
   HEAP32[$wbase >> 2] = 0;
   HEAP32[$wpos >> 2] = 0;
   $7 = HEAP32[$f >> 2] | 0;
   $or = $7 | 32;
   HEAP32[$f >> 2] = $or;
   $cmp17 = ($iovcnt$045 | 0) == 2;
   if ($cmp17) {
    $retval$0 = 0;
   } else {
    $iov_len19 = $iov$043 + 4 | 0;
    $8 = HEAP32[$iov_len19 >> 2] | 0;
    $sub = $len - $8 | 0;
    $retval$0 = $sub;
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $buf8 = $f + 44 | 0;
  $4 = HEAP32[$buf8 >> 2] | 0;
  $buf_size = $f + 48 | 0;
  $5 = HEAP32[$buf_size >> 2] | 0;
  $add$ptr = $4 + $5 | 0;
  $wend = $f + 16 | 0;
  HEAP32[$wend >> 2] = $add$ptr;
  $6 = $4;
  HEAP32[$wbase >> 2] = $6;
  HEAP32[$wpos >> 2] = $6;
  $retval$0 = $len;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function ___dynamic_cast($static_ptr, $dst_type) {
 $static_ptr = $static_ptr | 0;
 $dst_type = $dst_type | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx = 0, $arrayidx1 = 0, $call = 0;
 var $cmp = 0, $cmp14 = 0, $cmp16 = 0, $cmp19 = 0, $cmp25 = 0, $cmp27 = 0, $cmp30 = 0, $cmp33 = 0, $dst_ptr$0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $or$cond = 0, $or$cond15 = 0, $or$cond16 = 0, $or$cond17 = 0, $path_dst_ptr_to_static_ptr = 0;
 var $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr = 0, $spec$select = 0, $spec$select18 = 0, $src2dst_offset5 = 0, $static_ptr3 = 0, $static_type4 = 0, $vfn = 0, $vfn11 = 0, $vtable10 = 0, $vtable7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $info = sp;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $arrayidx = $0 + -8 | 0;
 $1 = HEAP32[$arrayidx >> 2] | 0;
 $add$ptr = $static_ptr + $1 | 0;
 $arrayidx1 = $0 + -4 | 0;
 $2 = HEAP32[$arrayidx1 >> 2] | 0;
 HEAP32[$info >> 2] = $dst_type;
 $static_ptr3 = $info + 4 | 0;
 HEAP32[$static_ptr3 >> 2] = $static_ptr;
 $static_type4 = $info + 8 | 0;
 HEAP32[$static_type4 >> 2] = 42600;
 $src2dst_offset5 = $info + 12 | 0;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
 $path_dst_ptr_to_static_ptr = $info + 24 | 0;
 $path_dynamic_ptr_to_static_ptr = $info + 28 | 0;
 $path_dynamic_ptr_to_dst_ptr = $info + 32 | 0;
 $number_to_dst_ptr = $info + 40 | 0;
 dest = $src2dst_offset5;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$src2dst_offset5 + 40 >> 1] = 0 | 0;
 HEAP8[$src2dst_offset5 + 42 >> 0] = 0 | 0;
 $call = __ZL8is_equalPKSt9type_infoS1_b($2, $dst_type, 0) | 0;
 L1 : do {
  if ($call) {
   $number_of_dst_type = $info + 48 | 0;
   HEAP32[$number_of_dst_type >> 2] = 1;
   $vtable7 = HEAP32[$2 >> 2] | 0;
   $vfn = $vtable7 + 20 | 0;
   $3 = HEAP32[$vfn >> 2] | 0;
   FUNCTION_TABLE_viiiiii[$3 & 127]($2, $info, $add$ptr, $add$ptr, 1, 0);
   $4 = HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
   $cmp = ($4 | 0) == 1;
   $spec$select = $cmp ? $add$ptr : 0;
   $dst_ptr$0 = $spec$select;
  } else {
   $number_to_static_ptr = $info + 36 | 0;
   $vtable10 = HEAP32[$2 >> 2] | 0;
   $vfn11 = $vtable10 + 24 | 0;
   $5 = HEAP32[$vfn11 >> 2] | 0;
   FUNCTION_TABLE_viiiii[$5 & 127]($2, $info, $add$ptr, 1, 0);
   $6 = HEAP32[$number_to_static_ptr >> 2] | 0;
   switch ($6 | 0) {
   case 0:
    {
     $7 = HEAP32[$number_to_dst_ptr >> 2] | 0;
     $cmp14 = ($7 | 0) == 1;
     $8 = HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0;
     $cmp16 = ($8 | 0) == 1;
     $or$cond = $cmp14 & $cmp16;
     $9 = HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0;
     $cmp19 = ($9 | 0) == 1;
     $or$cond15 = $or$cond & $cmp19;
     $10 = HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0;
     $spec$select18 = $or$cond15 ? $10 : 0;
     $dst_ptr$0 = $spec$select18;
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $dst_ptr$0 = 0;
     break L1;
    }
   }
   $11 = HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
   $cmp25 = ($11 | 0) == 1;
   if (!$cmp25) {
    $12 = HEAP32[$number_to_dst_ptr >> 2] | 0;
    $cmp27 = ($12 | 0) == 0;
    $13 = HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0;
    $cmp30 = ($13 | 0) == 1;
    $or$cond16 = $cmp27 & $cmp30;
    $14 = HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0;
    $cmp33 = ($14 | 0) == 1;
    $or$cond17 = $or$cond16 & $cmp33;
    if (!$or$cond17) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $15 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
   $dst_ptr$0 = $15;
  }
 } while (0);
 STACKTOP = sp;
 return $dst_ptr$0 | 0;
}

function __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root, $__x) {
 $__root = $__root | 0;
 $__x = $__x | 0;
 var $$pre = 0, $$pre52 = 0, $$pre54 = 0, $$pre56 = 0, $$pre57 = 0, $$pre59 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__is_black_ = 0, $__is_black_11 = 0, $__is_black_2 = 0, $__is_black_29$pre$phiZ2D = 0, $__is_black_32 = 0, $__is_black_40 = 0, $__is_black_40$sink = 0, $__is_black_49 = 0, $__is_black_60$pre$phiZ2D = 0, $__is_black_63 = 0, $__parent_$i = 0, $__parent_$i100$phi$trans$insert = 0, $__parent_$i69 = 0, $__parent_$i72$phi$trans$insert = 0, $__x$addr$046 = 0, $cmp = 0, $cmp$i = 0, $cmp$i113 = 0, $cmp$i85 = 0;
 var $cmp10 = 0, $cmp38 = 0, $cmp48 = 0, $frombool = 0, $frombool50 = 0, $tobool = 0, $tobool12 = 0, $tobool41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__x | 0) == ($__root | 0);
 $__is_black_ = $__x + 12 | 0;
 $frombool = $cmp & 1;
 HEAP8[$__is_black_ >> 0] = $frombool;
 if ($cmp) {
  return;
 }
 $__x$addr$046 = $__x;
 while (1) {
  $__parent_$i = $__x$addr$046 + 8 | 0;
  $0 = HEAP32[$__parent_$i >> 2] | 0;
  $__is_black_2 = $0 + 12 | 0;
  $1 = HEAP8[$__is_black_2 >> 0] | 0;
  $2 = $1 & 1;
  $tobool = $2 << 24 >> 24 == 0;
  if (!$tobool) {
   label = 16;
   break;
  }
  $__parent_$i69 = $0 + 8 | 0;
  $3 = HEAP32[$__parent_$i69 >> 2] | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $cmp$i = ($0 | 0) == ($4 | 0);
  if ($cmp$i) {
   $5 = $3 + 4 | 0;
   $6 = HEAP32[$5 >> 2] | 0;
   $cmp10 = ($6 | 0) == (0 | 0);
   if ($cmp10) {
    label = 7;
    break;
   }
   $__is_black_11 = $6 + 12 | 0;
   $7 = HEAP8[$__is_black_11 >> 0] | 0;
   $8 = $7 & 1;
   $tobool12 = $8 << 24 >> 24 == 0;
   if ($tobool12) {
    $__is_black_40$sink = $__is_black_11;
   } else {
    label = 7;
    break;
   }
  } else {
   $cmp38 = ($4 | 0) == (0 | 0);
   if ($cmp38) {
    label = 12;
    break;
   }
   $__is_black_40 = $4 + 12 | 0;
   $11 = HEAP8[$__is_black_40 >> 0] | 0;
   $12 = $11 & 1;
   $tobool41 = $12 << 24 >> 24 == 0;
   if ($tobool41) {
    $__is_black_40$sink = $__is_black_40;
   } else {
    label = 12;
    break;
   }
  }
  HEAP8[$__is_black_2 >> 0] = 1;
  $cmp48 = ($3 | 0) == ($__root | 0);
  $__is_black_49 = $3 + 12 | 0;
  $frombool50 = $cmp48 & 1;
  HEAP8[$__is_black_49 >> 0] = $frombool50;
  HEAP8[$__is_black_40$sink >> 0] = 1;
  if ($cmp48) {
   label = 16;
   break;
  } else {
   $__x$addr$046 = $3;
  }
 }
 if ((label | 0) == 7) {
  $9 = HEAP32[$0 >> 2] | 0;
  $cmp$i113 = ($__x$addr$046 | 0) == ($9 | 0);
  if ($cmp$i113) {
   $10 = $3;
   $__is_black_29$pre$phiZ2D = $__is_black_2;
  } else {
   __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($0);
   $$pre54 = HEAP32[$__parent_$i69 >> 2] | 0;
   $__parent_$i100$phi$trans$insert = $$pre54 + 8 | 0;
   $$pre56 = HEAP32[$__parent_$i100$phi$trans$insert >> 2] | 0;
   $$pre57 = $$pre54 + 12 | 0;
   $10 = $$pre56;
   $__is_black_29$pre$phiZ2D = $$pre57;
  }
  HEAP8[$__is_black_29$pre$phiZ2D >> 0] = 1;
  $__is_black_32 = $10 + 12 | 0;
  HEAP8[$__is_black_32 >> 0] = 0;
  __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($10);
  return;
 } else if ((label | 0) == 12) {
  $13 = HEAP32[$0 >> 2] | 0;
  $cmp$i85 = ($__x$addr$046 | 0) == ($13 | 0);
  if ($cmp$i85) {
   __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($0);
   $$pre = HEAP32[$__parent_$i69 >> 2] | 0;
   $__parent_$i72$phi$trans$insert = $$pre + 8 | 0;
   $$pre52 = HEAP32[$__parent_$i72$phi$trans$insert >> 2] | 0;
   $$pre59 = $$pre + 12 | 0;
   $14 = $$pre52;
   $__is_black_60$pre$phiZ2D = $$pre59;
  } else {
   $14 = $3;
   $__is_black_60$pre$phiZ2D = $__is_black_2;
  }
  HEAP8[$__is_black_60$pre$phiZ2D >> 0] = 1;
  $__is_black_63 = $14 + 12 | 0;
  HEAP8[$__is_black_63 >> 0] = 0;
  __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($14);
  return;
 } else if ((label | 0) == 16) {
  return;
 }
}

function __ZN4Core12Cryptography21tree_hash_from_branchENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEES8_S8_($agg$result, $branches, $leaf, $path) {
 $agg$result = $agg$result | 0;
 $branches = $branches | 0;
 $leaf = $leaf | 0;
 $path = $path | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__end_$i = 0, $__end_$i$i = 0, $__end_$i115 = 0, $__size_$i$i$i$i = 0, $__size_$i23$i$i$i = 0, $__value_$i$i$i$i = 0, $and$i$i$i$i = 0, $call$i$i = 0, $call2$i$i = 0, $cmp$i$i = 0, $cmp3$i$i = 0, $cond$i$i$i = 0;
 var $conv$i$i$i$i = 0, $l_branches = 0, $l_hash = 0, $l_leaf = 0, $l_path = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i120 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i119 = 0, $tobool$i$i$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
 $l_branches = sp;
 $l_leaf = sp + 80 | 0;
 $l_hash = sp + 48 | 0;
 $l_path = sp + 16 | 0;
 HEAP32[$l_branches >> 2] = 0;
 $__end_$i$i = $l_branches + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $l_branches + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 __ZN4Core13toTypedVectorIN6Crypto4HashEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($branches, $l_branches);
 dest = $l_leaf;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($l_leaf);
 __ZN6Common10podFromHexIN6Crypto4HashEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($leaf, $l_leaf);
 dest = $l_hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($l_hash);
 $call$i$i = __ZNSt3__211char_traitsIcE6lengthEPKc(46766) | 0;
 $__size_$i$i$i$i = $path + 11 | 0;
 $0 = HEAP8[$__size_$i$i$i$i >> 0] | 0;
 $conv$i$i$i$i = $0 & 255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i | 0) == 0;
 if ($tobool$i$i$i$i) {
  $cond$i$i$i = $conv$i$i$i$i;
 } else {
  $__size_$i23$i$i$i = $path + 4 | 0;
  $1 = HEAP32[$__size_$i23$i$i$i >> 2] | 0;
  $cond$i$i$i = $1;
 }
 $cmp$i$i = ($call$i$i | 0) == ($cond$i$i$i | 0);
 if ($cmp$i$i) {
  $call2$i$i = __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm($path, $call$i$i) | 0;
  $cmp3$i$i = ($call2$i$i | 0) == 0;
  if ($cmp3$i$i) {
   $5 = HEAP32[$l_branches >> 2] | 0;
   $__end_$i115 = $branches + 4 | 0;
   $6 = HEAP32[$__end_$i115 >> 2] | 0;
   $7 = HEAP32[$branches >> 2] | 0;
   $sub$ptr$sub$i119 = $6 - $7 | 0;
   $sub$ptr$div$i120 = ($sub$ptr$sub$i119 | 0) / 12 & -1;
   __ZN6Crypto21tree_hash_from_branchEPKNS_4HashEmRS1_PKvRS0_($5, $sub$ptr$div$i120, $l_leaf, 0, $l_hash);
   __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $l_hash);
   __ZNSt3__213__vector_baseIN6Crypto4HashENS_9allocatorIS2_EEED2Ev($l_branches);
   STACKTOP = sp;
   return;
  }
 }
 dest = $l_path;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($l_path);
 __ZN6Common10podFromHexIN6Crypto4HashEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($path, $l_path);
 $2 = HEAP32[$l_branches >> 2] | 0;
 $__end_$i = $branches + 4 | 0;
 $3 = HEAP32[$__end_$i >> 2] | 0;
 $4 = HEAP32[$branches >> 2] | 0;
 $sub$ptr$sub$i = $3 - $4 | 0;
 $sub$ptr$div$i = ($sub$ptr$sub$i | 0) / 12 & -1;
 __ZN6Crypto21tree_hash_from_branchEPKNS_4HashEmRS1_PKvRS0_($2, $sub$ptr$div$i, $l_leaf, $l_path, $l_hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $l_hash);
 __ZNSt3__213__vector_baseIN6Crypto4HashENS_9allocatorIS2_EEED2Ev($l_branches);
 STACKTOP = sp;
 return;
}

function _fe_divpowm1($r, $u, $v) {
 $r = $r | 0;
 $u = $u | 0;
 $v = $v | 0;
 var $exitcond = 0, $i$518 = 0, $inc91 = 0, $t0 = 0, $t1 = 0, $t2 = 0, $uv7 = 0, $v3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240 | 0);
 $v3 = sp + 192 | 0;
 $uv7 = sp + 144 | 0;
 $t0 = sp + 96 | 0;
 $t1 = sp + 48 | 0;
 $t2 = sp;
 _fe_sq($v3, $v);
 _fe_mul($v3, $v3, $v);
 _fe_sq($uv7, $v3);
 _fe_mul($uv7, $uv7, $v);
 _fe_mul($uv7, $uv7, $u);
 _fe_sq($t0, $uv7);
 _fe_sq($t1, $t0);
 _fe_sq($t1, $t1);
 _fe_mul($t1, $uv7, $t1);
 _fe_mul($t0, $t0, $t1);
 _fe_sq($t0, $t0);
 _fe_mul($t0, $t1, $t0);
 _fe_sq($t1, $t0);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_mul($t0, $t1, $t0);
 _fe_sq($t1, $t0);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_mul($t1, $t1, $t0);
 _fe_sq($t2, $t1);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_mul($t1, $t2, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_mul($t0, $t1, $t0);
 _fe_sq($t1, $t0);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_mul($t1, $t1, $t0);
 _fe_sq($t2, $t1);
 $i$518 = 0;
 while (1) {
  _fe_sq($t2, $t2);
  $inc91 = $i$518 + 1 | 0;
  $exitcond = ($inc91 | 0) == 99;
  if ($exitcond) {
   break;
  } else {
   $i$518 = $inc91;
  }
 }
 _fe_mul($t1, $t2, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_mul($t0, $t1, $t0);
 _fe_sq($t0, $t0);
 _fe_sq($t0, $t0);
 _fe_mul($t0, $t0, $uv7);
 _fe_mul($t0, $t0, $v3);
 _fe_mul($r, $t0, $u);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography21prepareRingSignaturesENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEEyS7_RSA_($prefixHash, $keyImage, $publicKeys, $0, $1, $k, $signatures) {
 $prefixHash = $prefixHash | 0;
 $keyImage = $keyImage | 0;
 $publicKeys = $publicKeys | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $k = $k | 0;
 $signatures = $signatures | 0;
 var $2 = 0, $__end_$i$i = 0, $__end_$i$i43 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i47 = 0, $agg$tmp7 = 0, $l_k = 0, $l_k$byval_copy = 0, $l_keyImage = 0, $l_keyImage$byval_copy = 0, $l_prefixHash = 0, $l_prefixHash$byval_copy = 0, $l_publicKeys = 0, $l_signatures = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240 | 0);
 $l_k$byval_copy = sp + 200 | 0;
 $l_keyImage$byval_copy = sp + 168 | 0;
 $l_prefixHash$byval_copy = sp + 136 | 0;
 $l_prefixHash = sp + 104 | 0;
 $l_keyImage = sp + 72 | 0;
 $l_publicKeys = sp + 24 | 0;
 $l_signatures = sp + 12 | 0;
 $l_k = sp + 40 | 0;
 $agg$tmp7 = sp;
 __ZN6Crypto4HashC2Ev($l_prefixHash);
 __ZN6Common10podFromHexIN6Crypto4HashEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($prefixHash, $l_prefixHash);
 __ZN6Crypto8KeyImageC2Ev($l_keyImage);
 __ZN6Common10podFromHexIN6Crypto8KeyImageEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($keyImage, $l_keyImage);
 HEAP32[$l_publicKeys >> 2] = 0;
 $__end_$i$i = $l_publicKeys + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $l_publicKeys + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 __ZN4Core13toTypedVectorIN6Crypto9PublicKeyEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($publicKeys, $l_publicKeys);
 HEAP32[$l_signatures >> 2] = 0;
 $__end_$i$i43 = $l_signatures + 4 | 0;
 HEAP32[$__end_$i$i43 >> 2] = 0;
 $__value_$i$i$i$i47 = $l_signatures + 8 | 0;
 HEAP32[$__value_$i$i$i$i47 >> 2] = 0;
 __ZN6Crypto19EllipticCurveScalarC2Ev($l_k);
 __ZN6Common10podFromHexIN6Crypto19EllipticCurveScalarEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($k, $l_k);
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEEC2ERKS5_($agg$tmp7, $l_publicKeys);
 dest = $l_prefixHash$byval_copy;
 src = $l_prefixHash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $l_keyImage$byval_copy;
 src = $l_keyImage;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $l_k$byval_copy;
 src = $l_k;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $2 = __ZN6Crypto10crypto_ops21prepareRingSignaturesENS_4HashENS_8KeyImageENSt3__26vectorINS_9PublicKeyENS3_9allocatorIS5_EEEEyNS_19EllipticCurveScalarERNS4_INS_9SignatureENS6_ISA_EEEE($l_prefixHash$byval_copy, $l_keyImage$byval_copy, $agg$tmp7, $0, $1, $l_k$byval_copy, $l_signatures) | 0;
 __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($agg$tmp7);
 if (!$2) {
  __ZNSt3__213__vector_baseIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($l_signatures);
  __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($l_publicKeys);
  STACKTOP = sp;
  return;
 }
 __ZN4Core14toStringVectorIN6Crypto9SignatureEEEvRKNSt3__26vectorIT_NS3_9allocatorIS5_EEEERNS4_INS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEENS6_ISF_EEEE($l_signatures, $signatures);
 __ZNSt3__213__vector_baseIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($l_signatures);
 __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($l_publicKeys);
 STACKTOP = sp;
 return;
}

function __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($text, $data, $0, $1, $size) {
 $text = $text | 0;
 $data = $data | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $size = $size | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__size_$i$i = 0, $__size_$i23$i = 0, $add$ptr$i = 0, $add$ptr$i202 = 0, $and = 0, $and$i$i = 0, $and$i$i134 = 0, $arrayidx = 0;
 var $call11 = 0, $call17 = 0, $cmp = 0, $cmp816 = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i$i201 = 0, $cond$i153 = 0, $conv$i$i = 0, $conv$i$i133 = 0, $conv15 = 0, $conv20 = 0, $conv22 = 0, $conv23 = 0, $conv9 = 0, $or = 0, $retval$0 = 0, $shl21 = 0, $shr = 0, $shr6 = 0;
 var $tobool$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i183 = 0, $tobool$i$i135 = 0, $value1 = 0, $value2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $value1 = sp + 1 | 0;
 $value2 = sp;
 $__size_$i$i = $text + 11 | 0;
 $2 = HEAP8[$__size_$i$i >> 0] | 0;
 $conv$i$i = $2 & 255;
 $and$i$i = $conv$i$i & 128;
 $tobool$i$i = ($and$i$i | 0) == 0;
 $__size_$i23$i = $text + 4 | 0;
 $3 = HEAP32[$__size_$i23$i >> 2] | 0;
 $cond$i = $tobool$i$i ? $conv$i$i : $3;
 $and = $cond$i & 1;
 $cmp = ($and | 0) == 0;
 if (!$cmp) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $shr = $cond$i >>> 1;
 $4 = 0 > $1 >>> 0;
 $5 = $shr >>> 0 > $0 >>> 0;
 $6 = 0 == ($1 | 0);
 $7 = $6 & $5;
 $8 = $4 | $7;
 if ($8) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $cmp816 = ($shr | 0) == 0;
 L7 : do {
  if ($cmp816) {
   $30 = 0;
   $33 = 0;
  } else {
   $10 = $2;
   $18 = 0;
   $9 = 0;
   while (1) {
    $conv9 = $9 << 1;
    $tobool$i$i$i$i183 = $10 << 24 >> 24 < 0;
    $11 = HEAP32[$text >> 2] | 0;
    $cond$i$i$i201 = $tobool$i$i$i$i183 ? $11 : $text;
    $add$ptr$i202 = $cond$i$i$i201 + $conv9 | 0;
    $12 = HEAP8[$add$ptr$i202 >> 0] | 0;
    $call11 = __ZN6Common7fromHexEcRh($12, $value1) | 0;
    if (!$call11) {
     $retval$0 = 0;
     label = 9;
     break;
    }
    $conv15 = $conv9 | 1;
    $13 = HEAP8[$__size_$i$i >> 0] | 0;
    $tobool$i$i$i$i = $13 << 24 >> 24 < 0;
    $14 = HEAP32[$text >> 2] | 0;
    $cond$i$i$i = $tobool$i$i$i$i ? $14 : $text;
    $add$ptr$i = $cond$i$i$i + $conv15 | 0;
    $15 = HEAP8[$add$ptr$i >> 0] | 0;
    $call17 = __ZN6Common7fromHexEcRh($15, $value2) | 0;
    if (!$call17) {
     $retval$0 = 0;
     label = 9;
     break;
    }
    $16 = HEAP8[$value1 >> 0] | 0;
    $conv20 = $16 & 255;
    $shl21 = $conv20 << 4;
    $17 = HEAP8[$value2 >> 0] | 0;
    $conv22 = $17 & 255;
    $or = $shl21 | $conv22;
    $conv23 = $or & 255;
    $arrayidx = $data + $9 | 0;
    HEAP8[$arrayidx >> 0] = $conv23;
    $19 = _i64Add($9 | 0, $18 | 0, 1, 0) | 0;
    $20 = getTempRet0() | 0;
    $21 = HEAP8[$__size_$i$i >> 0] | 0;
    $conv$i$i133 = $21 & 255;
    $and$i$i134 = $conv$i$i133 & 128;
    $tobool$i$i135 = ($and$i$i134 | 0) == 0;
    $22 = HEAP32[$__size_$i23$i >> 2] | 0;
    $cond$i153 = $tobool$i$i135 ? $conv$i$i133 : $22;
    $shr6 = $cond$i153 >>> 1;
    $23 = $20 >>> 0 < 0;
    $24 = $19 >>> 0 < $shr6 >>> 0;
    $25 = ($20 | 0) == 0;
    $26 = $25 & $24;
    $27 = $23 | $26;
    if ($27) {
     $10 = $21;
     $18 = $20;
     $9 = $19;
    } else {
     $30 = $shr6;
     $33 = 0;
     break L7;
    }
   }
   if ((label | 0) == 9) {
    STACKTOP = sp;
    return $retval$0 | 0;
   }
  }
 } while (0);
 $28 = $size;
 $29 = $28;
 HEAP32[$29 >> 2] = $30;
 $31 = $28 + 4 | 0;
 $32 = $31;
 HEAP32[$32 >> 2] = $33;
 $retval$0 = 1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _Skein_256_Final($ctx, $hashVal) {
 $ctx = $ctx | 0;
 $hashVal = $hashVal | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $X = 0, $add = 0, $add$ptr = 0, $arraydecay = 0, $arraydecay15 = 0, $arrayidx = 0, $arrayidx22 = 0, $arrayidx4 = 0, $bCnt = 0, $cmp = 0, $cmp161 = 0;
 var $cmp32 = 0, $exitcond = 0, $i$02 = 0, $inc = 0, $mul = 0, $mul3 = 0, $shr = 0, $spec$store$select = 0, $sub = 0, $sub31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $X = sp;
 $arrayidx = $ctx + 16 | 0;
 $0 = $arrayidx;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $5 | -2147483648;
 $7 = $arrayidx;
 $8 = $7;
 HEAP32[$8 >> 2] = $2;
 $9 = $7 + 4 | 0;
 $10 = $9;
 HEAP32[$10 >> 2] = $6;
 $bCnt = $ctx + 4 | 0;
 $11 = HEAP32[$bCnt >> 2] | 0;
 $cmp = $11 >>> 0 < 32;
 if ($cmp) {
  $sub = 32 - $11 | 0;
  $arrayidx4 = ($ctx + 56 | 0) + $11 | 0;
  _memset($arrayidx4 | 0, 0, $sub | 0) | 0;
  $$pre = HEAP32[$bCnt >> 2] | 0;
  $12 = $$pre;
 } else {
  $12 = $11;
 }
 $arraydecay = $ctx + 56 | 0;
 _Skein_256_Process_Block($ctx, $arraydecay, 1, $12);
 $13 = HEAP32[$ctx >> 2] | 0;
 $add = $13 + 7 | 0;
 $shr = $add >>> 3;
 HEAP32[$arraydecay >> 2] = 0 | 0;
 HEAP32[$arraydecay + 4 >> 2] = 0 | 0;
 HEAP32[$arraydecay + 8 >> 2] = 0 | 0;
 HEAP32[$arraydecay + 12 >> 2] = 0 | 0;
 HEAP32[$arraydecay + 16 >> 2] = 0 | 0;
 HEAP32[$arraydecay + 20 >> 2] = 0 | 0;
 HEAP32[$arraydecay + 24 >> 2] = 0 | 0;
 HEAP32[$arraydecay + 28 >> 2] = 0 | 0;
 $arraydecay15 = $ctx + 24 | 0;
 HEAP32[$X >> 2] = HEAP32[$arraydecay15 >> 2] | 0;
 HEAP32[$X + 4 >> 2] = HEAP32[$arraydecay15 + 4 >> 2] | 0;
 HEAP32[$X + 8 >> 2] = HEAP32[$arraydecay15 + 8 >> 2] | 0;
 HEAP32[$X + 12 >> 2] = HEAP32[$arraydecay15 + 12 >> 2] | 0;
 HEAP32[$X + 16 >> 2] = HEAP32[$arraydecay15 + 16 >> 2] | 0;
 HEAP32[$X + 20 >> 2] = HEAP32[$arraydecay15 + 20 >> 2] | 0;
 HEAP32[$X + 24 >> 2] = HEAP32[$arraydecay15 + 24 >> 2] | 0;
 HEAP32[$X + 28 >> 2] = HEAP32[$arraydecay15 + 28 >> 2] | 0;
 $cmp161 = ($shr | 0) == 0;
 if ($cmp161) {
  STACKTOP = sp;
  return;
 }
 $arrayidx22 = $ctx + 8 | 0;
 $14 = $shr + -1 | 0;
 $15 = $14 >>> 5;
 $i$02 = 0;
 $mul3 = 0;
 while (1) {
  $16 = $arraydecay;
  $17 = $16;
  HEAP32[$17 >> 2] = $i$02;
  $18 = $16 + 4 | 0;
  $19 = $18;
  HEAP32[$19 >> 2] = 0;
  $20 = $arrayidx22;
  $21 = $20;
  HEAP32[$21 >> 2] = 0;
  $22 = $20 + 4 | 0;
  $23 = $22;
  HEAP32[$23 >> 2] = 0;
  $24 = $arrayidx;
  $25 = $24;
  HEAP32[$25 >> 2] = 0;
  $26 = $24 + 4 | 0;
  $27 = $26;
  HEAP32[$27 >> 2] = -16777216;
  HEAP32[$bCnt >> 2] = 0;
  _Skein_256_Process_Block($ctx, $arraydecay, 1, 8);
  $sub31 = $shr - $mul3 | 0;
  $cmp32 = $sub31 >>> 0 < 32;
  $spec$store$select = $cmp32 ? $sub31 : 32;
  $add$ptr = $hashVal + $mul3 | 0;
  _memcpy($add$ptr | 0, $arraydecay15 | 0, $spec$store$select | 0) | 0;
  HEAP32[$arraydecay15 >> 2] = HEAP32[$X >> 2] | 0;
  HEAP32[$arraydecay15 + 4 >> 2] = HEAP32[$X + 4 >> 2] | 0;
  HEAP32[$arraydecay15 + 8 >> 2] = HEAP32[$X + 8 >> 2] | 0;
  HEAP32[$arraydecay15 + 12 >> 2] = HEAP32[$X + 12 >> 2] | 0;
  HEAP32[$arraydecay15 + 16 >> 2] = HEAP32[$X + 16 >> 2] | 0;
  HEAP32[$arraydecay15 + 20 >> 2] = HEAP32[$X + 20 >> 2] | 0;
  HEAP32[$arraydecay15 + 24 >> 2] = HEAP32[$X + 24 >> 2] | 0;
  HEAP32[$arraydecay15 + 28 >> 2] = HEAP32[$X + 28 >> 2] | 0;
  $inc = $i$02 + 1 | 0;
  $mul = $inc << 5;
  $exitcond = ($i$02 | 0) == ($15 | 0);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $inc;
   $mul3 = $mul;
  }
 }
 STACKTOP = sp;
 return;
}

function _sc_check($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr10 = 0;
 var $add$ptr12 = 0, $add$ptr2 = 0, $add$ptr4 = 0, $add$ptr6 = 0, $add$ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = _load_4($s) | 0;
 $1 = getTempRet0() | 0;
 $add$ptr = $s + 4 | 0;
 $2 = _load_4($add$ptr) | 0;
 $3 = getTempRet0() | 0;
 $add$ptr2 = $s + 8 | 0;
 $4 = _load_4($add$ptr2) | 0;
 $5 = getTempRet0() | 0;
 $add$ptr4 = $s + 12 | 0;
 $6 = _load_4($add$ptr4) | 0;
 $7 = getTempRet0() | 0;
 $add$ptr6 = $s + 16 | 0;
 $8 = _load_4($add$ptr6) | 0;
 $9 = getTempRet0() | 0;
 $add$ptr8 = $s + 20 | 0;
 $10 = _load_4($add$ptr8) | 0;
 $11 = getTempRet0() | 0;
 $add$ptr10 = $s + 24 | 0;
 $12 = _load_4($add$ptr10) | 0;
 $13 = getTempRet0() | 0;
 $add$ptr12 = $s + 28 | 0;
 $14 = _load_4($add$ptr12) | 0;
 $15 = getTempRet0() | 0;
 $16 = _i64Subtract(1559614444, 0, $0 | 0, $1 | 0) | 0;
 $17 = getTempRet0() | 0;
 $18 = _signum($16, $17) | 0;
 $19 = getTempRet0() | 0;
 $20 = _i64Subtract(1477600026, 0, $2 | 0, $3 | 0) | 0;
 $21 = getTempRet0() | 0;
 $22 = _signum($20, $21) | 0;
 $23 = getTempRet0() | 0;
 $24 = _bitshift64Shl($22 | 0, $23 | 0, 1) | 0;
 $25 = getTempRet0() | 0;
 $26 = _i64Add($24 | 0, $25 | 0, $18 | 0, $19 | 0) | 0;
 $27 = getTempRet0() | 0;
 $28 = _i64Subtract(-1560830762, 0, $4 | 0, $5 | 0) | 0;
 $29 = getTempRet0() | 0;
 $30 = _signum($28, $29) | 0;
 $31 = getTempRet0() | 0;
 $32 = _bitshift64Shl($30 | 0, $31 | 0, 2) | 0;
 $33 = getTempRet0() | 0;
 $34 = _i64Add($26 | 0, $27 | 0, $32 | 0, $33 | 0) | 0;
 $35 = getTempRet0() | 0;
 $36 = _i64Subtract(350157278, 0, $6 | 0, $7 | 0) | 0;
 $37 = getTempRet0() | 0;
 $38 = _signum($36, $37) | 0;
 $39 = getTempRet0() | 0;
 $40 = _bitshift64Shl($38 | 0, $39 | 0, 3) | 0;
 $41 = getTempRet0() | 0;
 $42 = _i64Add($34 | 0, $35 | 0, $40 | 0, $41 | 0) | 0;
 $43 = getTempRet0() | 0;
 $44 = _i64Subtract(0, 0, $8 | 0, $9 | 0) | 0;
 $45 = getTempRet0() | 0;
 $46 = _signum($44, $45) | 0;
 $47 = getTempRet0() | 0;
 $48 = _bitshift64Shl($46 | 0, $47 | 0, 4) | 0;
 $49 = getTempRet0() | 0;
 $50 = _i64Add($42 | 0, $43 | 0, $48 | 0, $49 | 0) | 0;
 $51 = getTempRet0() | 0;
 $52 = _i64Subtract(0, 0, $10 | 0, $11 | 0) | 0;
 $53 = getTempRet0() | 0;
 $54 = _signum($52, $53) | 0;
 $55 = getTempRet0() | 0;
 $56 = _bitshift64Shl($54 | 0, $55 | 0, 5) | 0;
 $57 = getTempRet0() | 0;
 $58 = _i64Add($50 | 0, $51 | 0, $56 | 0, $57 | 0) | 0;
 $59 = getTempRet0() | 0;
 $60 = _i64Subtract(0, 0, $12 | 0, $13 | 0) | 0;
 $61 = getTempRet0() | 0;
 $62 = _signum($60, $61) | 0;
 $63 = getTempRet0() | 0;
 $64 = _bitshift64Shl($62 | 0, $63 | 0, 6) | 0;
 $65 = getTempRet0() | 0;
 $66 = _i64Add($58 | 0, $59 | 0, $64 | 0, $65 | 0) | 0;
 $67 = getTempRet0() | 0;
 $68 = _i64Subtract(268435456, 0, $14 | 0, $15 | 0) | 0;
 $69 = getTempRet0() | 0;
 $70 = _signum($68, $69) | 0;
 $71 = getTempRet0() | 0;
 $72 = _bitshift64Shl($70 | 0, $71 | 0, 7) | 0;
 $73 = getTempRet0() | 0;
 $74 = _i64Add($66 | 0, $67 | 0, $72 | 0, $73 | 0) | 0;
 $75 = getTempRet0() | 0;
 $76 = _bitshift64Lshr($74 | 0, $75 | 0, 8) | 0;
 $77 = getTempRet0() | 0;
 return $76 | 0;
}

function _fe_invert($out, $z) {
 $out = $out | 0;
 $z = $z | 0;
 var $exitcond = 0, $i$519 = 0, $inc82 = 0, $t0 = 0, $t1 = 0, $t2 = 0, $t3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192 | 0);
 $t0 = sp + 144 | 0;
 $t1 = sp + 96 | 0;
 $t2 = sp + 48 | 0;
 $t3 = sp;
 _fe_sq($t0, $z);
 _fe_sq($t1, $t0);
 _fe_sq($t1, $t1);
 _fe_mul($t1, $z, $t1);
 _fe_mul($t0, $t0, $t1);
 _fe_sq($t2, $t0);
 _fe_mul($t1, $t1, $t2);
 _fe_sq($t2, $t1);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_mul($t1, $t2, $t1);
 _fe_sq($t2, $t1);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_mul($t2, $t2, $t1);
 _fe_sq($t3, $t2);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_sq($t3, $t3);
 _fe_mul($t2, $t3, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_mul($t1, $t2, $t1);
 _fe_sq($t2, $t1);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_mul($t2, $t2, $t1);
 _fe_sq($t3, $t2);
 $i$519 = 0;
 while (1) {
  _fe_sq($t3, $t3);
  $inc82 = $i$519 + 1 | 0;
  $exitcond = ($inc82 | 0) == 99;
  if ($exitcond) {
   break;
  } else {
   $i$519 = $inc82;
  }
 }
 _fe_mul($t2, $t3, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_sq($t2, $t2);
 _fe_mul($t1, $t2, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_sq($t1, $t1);
 _fe_mul($out, $t1, $t0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISJ_EERKS6_($this, $__parent, $__v) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__nd$0 = 0, $__nd$1$in = 0, $__nd_ptr$0 = 0, $__nd_ptr$1 = 0, $__v$byval_copy = 0, $__v$byval_copy1 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i$sink = 0, $call18 = 0, $call2 = 0, $call5 = 0, $cmp = 0, $cmp20 = 0, $cmp7 = 0, $retval$0 = 0;
 var $tmpcast$byval_copy = 0, $tmpcast5$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $__v$byval_copy1 = sp + 96 | 0;
 $tmpcast5$byval_copy = sp + 64 | 0;
 $tmpcast$byval_copy = sp + 32 | 0;
 $__v$byval_copy = sp;
 $__value_$i$i$i$i = $this + 4 | 0;
 $0 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if ($cmp) {
  $__value_$i$i$i$i$sink = $__value_$i$i$i$i;
  $retval$0 = $__value_$i$i$i$i;
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i$sink;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $call2 = __ZNKSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE10__root_ptrEv($this) | 0;
 $__nd$0 = $0;
 $__nd_ptr$0 = $call2;
 while (1) {
  $1 = $__nd$0 + 13 | 0;
  dest = $__v$byval_copy;
  src = $__v;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  dest = $tmpcast$byval_copy;
  src = $1;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $call5 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_9SecretKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($__v$byval_copy, $tmpcast$byval_copy) | 0;
  if ($call5) {
   $2 = HEAP32[$__nd$0 >> 2] | 0;
   $cmp7 = ($2 | 0) == (0 | 0);
   if ($cmp7) {
    label = 5;
    break;
   } else {
    $__nd$1$in = $2;
    $__nd_ptr$1 = $__nd$0;
   }
  } else {
   dest = $tmpcast5$byval_copy;
   src = $1;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $__v$byval_copy1;
   src = $__v;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $call18 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_9SecretKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($tmpcast5$byval_copy, $__v$byval_copy1) | 0;
   if (!$call18) {
    label = 9;
    break;
   }
   $3 = $__nd$0 + 4 | 0;
   $4 = HEAP32[$3 >> 2] | 0;
   $cmp20 = ($4 | 0) == (0 | 0);
   if ($cmp20) {
    label = 8;
    break;
   } else {
    $__nd$1$in = $4;
    $__nd_ptr$1 = $3;
   }
  }
  $__nd$0 = $__nd$1$in;
  $__nd_ptr$0 = $__nd_ptr$1;
 }
 if ((label | 0) == 5) {
  $__value_$i$i$i$i$sink = $__nd$0;
  $retval$0 = $__nd$0;
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i$sink;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else if ((label | 0) == 8) {
  $__value_$i$i$i$i$sink = $__nd$0;
  $retval$0 = $3;
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i$sink;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else if ((label | 0) == 9) {
  $__value_$i$i$i$i$sink = $__nd$0;
  $retval$0 = $__nd_ptr$0;
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i$sink;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISJ_EERKS6_($this, $__parent, $__v) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__nd$0 = 0, $__nd$1$in = 0, $__nd_ptr$0 = 0, $__nd_ptr$1 = 0, $__v$byval_copy = 0, $__v$byval_copy1 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i$sink = 0, $call18 = 0, $call2 = 0, $call5 = 0, $cmp = 0, $cmp20 = 0, $cmp7 = 0, $retval$0 = 0;
 var $tmpcast$byval_copy = 0, $tmpcast5$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $__v$byval_copy1 = sp + 96 | 0;
 $tmpcast5$byval_copy = sp + 64 | 0;
 $tmpcast$byval_copy = sp + 32 | 0;
 $__v$byval_copy = sp;
 $__value_$i$i$i$i = $this + 4 | 0;
 $0 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if ($cmp) {
  $__value_$i$i$i$i$sink = $__value_$i$i$i$i;
  $retval$0 = $__value_$i$i$i$i;
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i$sink;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $call2 = __ZNKSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE10__root_ptrEv($this) | 0;
 $__nd$0 = $0;
 $__nd_ptr$0 = $call2;
 while (1) {
  $1 = $__nd$0 + 13 | 0;
  dest = $__v$byval_copy;
  src = $__v;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  dest = $tmpcast$byval_copy;
  src = $1;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $call5 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_9PublicKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($__v$byval_copy, $tmpcast$byval_copy) | 0;
  if ($call5) {
   $2 = HEAP32[$__nd$0 >> 2] | 0;
   $cmp7 = ($2 | 0) == (0 | 0);
   if ($cmp7) {
    label = 5;
    break;
   } else {
    $__nd$1$in = $2;
    $__nd_ptr$1 = $__nd$0;
   }
  } else {
   dest = $tmpcast5$byval_copy;
   src = $1;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $__v$byval_copy1;
   src = $__v;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $call18 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_9PublicKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($tmpcast5$byval_copy, $__v$byval_copy1) | 0;
   if (!$call18) {
    label = 9;
    break;
   }
   $3 = $__nd$0 + 4 | 0;
   $4 = HEAP32[$3 >> 2] | 0;
   $cmp20 = ($4 | 0) == (0 | 0);
   if ($cmp20) {
    label = 8;
    break;
   } else {
    $__nd$1$in = $4;
    $__nd_ptr$1 = $3;
   }
  }
  $__nd$0 = $__nd$1$in;
  $__nd_ptr$0 = $__nd_ptr$1;
 }
 if ((label | 0) == 5) {
  $__value_$i$i$i$i$sink = $__nd$0;
  $retval$0 = $__nd$0;
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i$sink;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else if ((label | 0) == 8) {
  $__value_$i$i$i$i$sink = $__nd$0;
  $retval$0 = $3;
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i$sink;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else if ((label | 0) == 9) {
  $__value_$i$i$i$i$sink = $__nd$0;
  $retval$0 = $__nd_ptr$0;
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i$sink;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISJ_EERKS6_($this, $__parent, $__v) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__nd$0 = 0, $__nd$1$in = 0, $__nd_ptr$0 = 0, $__nd_ptr$1 = 0, $__v$byval_copy = 0, $__v$byval_copy1 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i$sink = 0, $call18 = 0, $call2 = 0, $call5 = 0, $cmp = 0, $cmp20 = 0, $cmp7 = 0, $retval$0 = 0;
 var $tmpcast$byval_copy = 0, $tmpcast5$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $__v$byval_copy1 = sp + 96 | 0;
 $tmpcast5$byval_copy = sp + 64 | 0;
 $tmpcast$byval_copy = sp + 32 | 0;
 $__v$byval_copy = sp;
 $__value_$i$i$i$i = $this + 4 | 0;
 $0 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if ($cmp) {
  $__value_$i$i$i$i$sink = $__value_$i$i$i$i;
  $retval$0 = $__value_$i$i$i$i;
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i$sink;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $call2 = __ZNKSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE10__root_ptrEv($this) | 0;
 $__nd$0 = $0;
 $__nd_ptr$0 = $call2;
 while (1) {
  $1 = $__nd$0 + 13 | 0;
  dest = $__v$byval_copy;
  src = $__v;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  dest = $tmpcast$byval_copy;
  src = $1;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $call5 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_8KeyImageEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($__v$byval_copy, $tmpcast$byval_copy) | 0;
  if ($call5) {
   $2 = HEAP32[$__nd$0 >> 2] | 0;
   $cmp7 = ($2 | 0) == (0 | 0);
   if ($cmp7) {
    label = 5;
    break;
   } else {
    $__nd$1$in = $2;
    $__nd_ptr$1 = $__nd$0;
   }
  } else {
   dest = $tmpcast5$byval_copy;
   src = $1;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $__v$byval_copy1;
   src = $__v;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $call18 = __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_8KeyImageEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($tmpcast5$byval_copy, $__v$byval_copy1) | 0;
   if (!$call18) {
    label = 9;
    break;
   }
   $3 = $__nd$0 + 4 | 0;
   $4 = HEAP32[$3 >> 2] | 0;
   $cmp20 = ($4 | 0) == (0 | 0);
   if ($cmp20) {
    label = 8;
    break;
   } else {
    $__nd$1$in = $4;
    $__nd_ptr$1 = $3;
   }
  }
  $__nd$0 = $__nd$1$in;
  $__nd_ptr$0 = $__nd_ptr$1;
 }
 if ((label | 0) == 5) {
  $__value_$i$i$i$i$sink = $__nd$0;
  $retval$0 = $__nd$0;
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i$sink;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else if ((label | 0) == 8) {
  $__value_$i$i$i$i$sink = $__nd$0;
  $retval$0 = $3;
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i$sink;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else if ((label | 0) == 9) {
  $__value_$i$i$i$i$sink = $__nd$0;
  $retval$0 = $__nd_ptr$0;
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i$sink;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0 | 0;
}

function _memchr($src, $n) {
 $src = $src | 0;
 $n = $n | 0;
 var $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $and15 = 0, $and16 = 0, $and39 = 0, $cmp = 0, $cmp11 = 0, $cmp1132 = 0, $cmp28 = 0, $cmp8 = 0, $dec = 0, $dec34 = 0, $incdec$ptr = 0;
 var $incdec$ptr21 = 0, $incdec$ptr33 = 0, $n$addr$0$lcssa = 0, $n$addr$043 = 0, $n$addr$1$lcssa = 0, $n$addr$1$lcssa55 = 0, $n$addr$133 = 0, $n$addr$227 = 0, $neg = 0, $or$cond = 0, $or$cond42 = 0, $s$0$lcssa = 0, $s$044 = 0, $s$128 = 0, $sub = 0, $sub22 = 0, $tobool = 0, $tobool17 = 0, $tobool2 = 0, $tobool2$lcssa = 0;
 var $tobool241 = 0, $tobool25 = 0, $tobool2526 = 0, $tobool36 = 0, $tobool40 = 0, $w$0$lcssa = 0, $w$034 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $src;
 $and39 = $0 & 3;
 $tobool40 = ($and39 | 0) != 0;
 $tobool241 = ($n | 0) != 0;
 $or$cond42 = $tobool241 & $tobool40;
 L1 : do {
  if ($or$cond42) {
   $n$addr$043 = $n;
   $s$044 = $src;
   while (1) {
    $1 = HEAP8[$s$044 >> 0] | 0;
    $cmp = $1 << 24 >> 24 == 0;
    if ($cmp) {
     $5 = $s$044;
     break L1;
    }
    $incdec$ptr = $s$044 + 1 | 0;
    $dec = $n$addr$043 + -1 | 0;
    $2 = $incdec$ptr;
    $and = $2 & 3;
    $tobool = ($and | 0) != 0;
    $tobool2 = ($dec | 0) != 0;
    $or$cond = $tobool2 & $tobool;
    if ($or$cond) {
     $n$addr$043 = $dec;
     $s$044 = $incdec$ptr;
    } else {
     $n$addr$0$lcssa = $dec;
     $s$0$lcssa = $incdec$ptr;
     $tobool2$lcssa = $tobool2;
     label = 5;
     break;
    }
   }
  } else {
   $n$addr$0$lcssa = $n;
   $s$0$lcssa = $src;
   $tobool2$lcssa = $tobool241;
   label = 5;
  }
 } while (0);
 L6 : do {
  if ((label | 0) == 5) {
   do {
    if ($tobool2$lcssa) {
     $$pre = HEAP8[$s$0$lcssa >> 0] | 0;
     $cmp8 = $$pre << 24 >> 24 == 0;
     if ($cmp8) {
      $tobool36 = ($n$addr$0$lcssa | 0) == 0;
      if ($tobool36) {
       break;
      } else {
       $5 = $s$0$lcssa;
       break L6;
      }
     }
     $cmp1132 = $n$addr$0$lcssa >>> 0 > 3;
     L13 : do {
      if ($cmp1132) {
       $n$addr$133 = $n$addr$0$lcssa;
       $w$034 = $s$0$lcssa;
       while (1) {
        $3 = HEAP32[$w$034 >> 2] | 0;
        $sub = $3 + -16843009 | 0;
        $neg = $3 & -2139062144;
        $and15 = $neg ^ -2139062144;
        $and16 = $and15 & $sub;
        $tobool17 = ($and16 | 0) == 0;
        if (!$tobool17) {
         $$in = $w$034;
         $n$addr$1$lcssa55 = $n$addr$133;
         break L13;
        }
        $incdec$ptr21 = $w$034 + 4 | 0;
        $sub22 = $n$addr$133 + -4 | 0;
        $cmp11 = $sub22 >>> 0 > 3;
        if ($cmp11) {
         $n$addr$133 = $sub22;
         $w$034 = $incdec$ptr21;
        } else {
         $n$addr$1$lcssa = $sub22;
         $w$0$lcssa = $incdec$ptr21;
         label = 11;
         break;
        }
       }
      } else {
       $n$addr$1$lcssa = $n$addr$0$lcssa;
       $w$0$lcssa = $s$0$lcssa;
       label = 11;
      }
     } while (0);
     if ((label | 0) == 11) {
      $tobool2526 = ($n$addr$1$lcssa | 0) == 0;
      if ($tobool2526) {
       break;
      } else {
       $$in = $w$0$lcssa;
       $n$addr$1$lcssa55 = $n$addr$1$lcssa;
      }
     }
     $n$addr$227 = $n$addr$1$lcssa55;
     $s$128 = $$in;
     while (1) {
      $4 = HEAP8[$s$128 >> 0] | 0;
      $cmp28 = $4 << 24 >> 24 == 0;
      if ($cmp28) {
       $5 = $s$128;
       break L6;
      }
      $incdec$ptr33 = $s$128 + 1 | 0;
      $dec34 = $n$addr$227 + -1 | 0;
      $tobool25 = ($dec34 | 0) == 0;
      if ($tobool25) {
       break;
      } else {
       $n$addr$227 = $dec34;
       $s$128 = $incdec$ptr33;
      }
     }
    }
   } while (0);
   $5 = 0;
  }
 } while (0);
 return $5 | 0;
}

function _initial_hash($blockhash, $context, $type) {
 $blockhash = $blockhash | 0;
 $context = $context | 0;
 $type = $type | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $BlakeHash = 0, $ad = 0, $adlen = 0, $and = 0, $and22 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp17 = 0, $cmp2 = 0, $cmp30 = 0, $flags = 0, $flags21 = 0, $lanes = 0, $m_cost = 0, $or$cond = 0, $outlen = 0;
 var $pwd = 0, $pwdlen = 0, $salt = 0, $saltlen = 0, $secret = 0, $secretlen = 0, $t_cost = 0, $tobool = 0, $tobool23 = 0, $value31 = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224 | 0);
 $BlakeHash = sp;
 $value31 = sp + 216 | 0;
 $cmp = ($context | 0) == (0 | 0);
 $cmp1 = ($blockhash | 0) == (0 | 0);
 $or$cond = $cmp1 | $cmp;
 if ($or$cond) {
  STACKTOP = sp;
  return;
 }
 _blake2b_init($BlakeHash, 64);
 $lanes = $context + 48 | 0;
 $0 = HEAP32[$lanes >> 2] | 0;
 _store32($value31, $0);
 _blake2b_update($BlakeHash, $value31, 4);
 $outlen = $context + 4 | 0;
 $1 = HEAP32[$outlen >> 2] | 0;
 _store32($value31, $1);
 _blake2b_update($BlakeHash, $value31, 4);
 $m_cost = $context + 44 | 0;
 $2 = HEAP32[$m_cost >> 2] | 0;
 _store32($value31, $2);
 _blake2b_update($BlakeHash, $value31, 4);
 $t_cost = $context + 40 | 0;
 $3 = HEAP32[$t_cost >> 2] | 0;
 _store32($value31, $3);
 _blake2b_update($BlakeHash, $value31, 4);
 $version = $context + 56 | 0;
 $4 = HEAP32[$version >> 2] | 0;
 _store32($value31, $4);
 _blake2b_update($BlakeHash, $value31, 4);
 _store32($value31, $type);
 _blake2b_update($BlakeHash, $value31, 4);
 $pwdlen = $context + 12 | 0;
 $5 = HEAP32[$pwdlen >> 2] | 0;
 _store32($value31, $5);
 _blake2b_update($BlakeHash, $value31, 4);
 $pwd = $context + 8 | 0;
 $6 = HEAP32[$pwd >> 2] | 0;
 $cmp2 = ($6 | 0) == (0 | 0);
 if (!$cmp2) {
  $7 = HEAP32[$pwdlen >> 2] | 0;
  _blake2b_update($BlakeHash, $6, $7);
  $flags = $context + 68 | 0;
  $8 = HEAP32[$flags >> 2] | 0;
  $and = $8 & 1;
  $tobool = ($and | 0) == 0;
  if (!$tobool) {
   $9 = HEAP32[$pwd >> 2] | 0;
   $10 = HEAP32[$pwdlen >> 2] | 0;
   _secure_wipe_memory($9, $10);
   HEAP32[$pwdlen >> 2] = 0;
  }
 }
 $saltlen = $context + 20 | 0;
 $11 = HEAP32[$saltlen >> 2] | 0;
 _store32($value31, $11);
 _blake2b_update($BlakeHash, $value31, 4);
 $salt = $context + 16 | 0;
 $12 = HEAP32[$salt >> 2] | 0;
 $cmp12 = ($12 | 0) == (0 | 0);
 if (!$cmp12) {
  $13 = HEAP32[$saltlen >> 2] | 0;
  _blake2b_update($BlakeHash, $12, $13);
 }
 $secretlen = $context + 28 | 0;
 $14 = HEAP32[$secretlen >> 2] | 0;
 _store32($value31, $14);
 _blake2b_update($BlakeHash, $value31, 4);
 $secret = $context + 24 | 0;
 $15 = HEAP32[$secret >> 2] | 0;
 $cmp17 = ($15 | 0) == (0 | 0);
 if (!$cmp17) {
  $16 = HEAP32[$secretlen >> 2] | 0;
  _blake2b_update($BlakeHash, $15, $16);
  $flags21 = $context + 68 | 0;
  $17 = HEAP32[$flags21 >> 2] | 0;
  $and22 = $17 & 2;
  $tobool23 = ($and22 | 0) == 0;
  if (!$tobool23) {
   $18 = HEAP32[$secret >> 2] | 0;
   $19 = HEAP32[$secretlen >> 2] | 0;
   _secure_wipe_memory($18, $19);
   HEAP32[$secretlen >> 2] = 0;
  }
 }
 $adlen = $context + 36 | 0;
 $20 = HEAP32[$adlen >> 2] | 0;
 _store32($value31, $20);
 _blake2b_update($BlakeHash, $value31, 4);
 $ad = $context + 32 | 0;
 $21 = HEAP32[$ad >> 2] | 0;
 $cmp30 = ($21 | 0) == (0 | 0);
 if (!$cmp30) {
  $22 = HEAP32[$adlen >> 2] | 0;
  _blake2b_update($BlakeHash, $21, $22);
 }
 _blake2b_final($BlakeHash, $blockhash, 64);
 STACKTOP = sp;
 return;
}

function _blake256_update($S, $data, $0, $1) {
 $S = $S | 0;
 $data = $data | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add$ptr = 0, $add$ptr12 = 0, $add$ptr30 = 0, $add$ptr37 = 0, $add20 = 0, $add42 = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx19 = 0, $arrayidx27 = 0, $arrayidx9 = 0, $buflen = 0, $cmp23 = 0, $cmp5 = 0, $data$addr$0 = 0, $data$addr$1$lcssa = 0, $data$addr$132 = 0, $inc = 0, $inc28 = 0;
 var $left$0 = 0, $shl = 0, $shl40 = 0, $shr = 0, $storemerge = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $buflen = $S + 56 | 0;
 $2 = HEAP32[$buflen >> 2] | 0;
 $shr = $2 >> 3;
 $sub = 64 - $shr | 0;
 $tobool = ($shr | 0) == 0;
 if ($tobool) {
  $18 = $1;
  $20 = $0;
  $data$addr$0 = $data;
  $left$0 = 0;
 } else {
  $3 = _bitshift64Lshr($0 | 0, $1 | 0, 3) | 0;
  $4 = getTempRet0() | 0;
  $5 = $3 & 63;
  $6 = 0 < 0;
  $7 = $5 >>> 0 < $sub >>> 0;
  $8 = 0 == 0;
  $9 = $8 & $7;
  $10 = $6 | $9;
  if ($10) {
   $18 = $1;
   $20 = $0;
   $data$addr$0 = $data;
   $left$0 = $shr;
  } else {
   $arraydecay = $S + 64 | 0;
   $add$ptr = ($S + 64 | 0) + $shr | 0;
   _memcpy($add$ptr | 0, $data | 0, $sub | 0) | 0;
   $arrayidx = $S + 48 | 0;
   $11 = HEAP32[$arrayidx >> 2] | 0;
   $add = $11 + 512 | 0;
   HEAP32[$arrayidx >> 2] = $add;
   $cmp5 = ($add | 0) == 0;
   if ($cmp5) {
    $arrayidx9 = $S + 52 | 0;
    $12 = HEAP32[$arrayidx9 >> 2] | 0;
    $inc = $12 + 1 | 0;
    HEAP32[$arrayidx9 >> 2] = $inc;
   }
   _blake256_compress($S, $arraydecay);
   $add$ptr12 = $data + $sub | 0;
   $shl = $sub << 3;
   $13 = ($shl | 0) < 0;
   $14 = $13 << 31 >> 31;
   $15 = _i64Subtract($0 | 0, $1 | 0, $shl | 0, $14 | 0) | 0;
   $16 = getTempRet0() | 0;
   $18 = $16;
   $20 = $15;
   $data$addr$0 = $add$ptr12;
   $left$0 = 0;
  }
 }
 $17 = $18 >>> 0 > 0;
 $19 = $20 >>> 0 > 511;
 $21 = ($18 | 0) == 0;
 $22 = $21 & $19;
 $23 = $17 | $22;
 if ($23) {
  $arrayidx19 = $S + 48 | 0;
  $arrayidx27 = $S + 52 | 0;
  $26 = $20;
  $27 = $18;
  $data$addr$132 = $data$addr$0;
  while (1) {
   $24 = HEAP32[$arrayidx19 >> 2] | 0;
   $add20 = $24 + 512 | 0;
   HEAP32[$arrayidx19 >> 2] = $add20;
   $cmp23 = ($add20 | 0) == 0;
   if ($cmp23) {
    $25 = HEAP32[$arrayidx27 >> 2] | 0;
    $inc28 = $25 + 1 | 0;
    HEAP32[$arrayidx27 >> 2] = $inc28;
   }
   _blake256_compress($S, $data$addr$132);
   $add$ptr30 = $data$addr$132 + 64 | 0;
   $28 = _i64Add($26 | 0, $27 | 0, -512, -1) | 0;
   $29 = getTempRet0() | 0;
   $30 = $29 >>> 0 > 0;
   $31 = $28 >>> 0 > 511;
   $32 = ($29 | 0) == 0;
   $33 = $32 & $31;
   $34 = $30 | $33;
   if ($34) {
    $26 = $28;
    $27 = $29;
    $data$addr$132 = $add$ptr30;
   } else {
    $36 = $28;
    $38 = $29;
    $data$addr$1$lcssa = $add$ptr30;
    break;
   }
  }
 } else {
  $36 = $20;
  $38 = $18;
  $data$addr$1$lcssa = $data$addr$0;
 }
 $35 = ($36 | 0) == 0;
 $37 = ($38 | 0) == 0;
 $39 = $35 & $37;
 if ($39) {
  $storemerge = 0;
  HEAP32[$buflen >> 2] = $storemerge;
  return;
 }
 $shl40 = $left$0 << 3;
 $40 = _bitshift64Lshr($36 | 0, $38 | 0, 3) | 0;
 $41 = getTempRet0() | 0;
 $add$ptr37 = ($S + 64 | 0) + $left$0 | 0;
 _memcpy($add$ptr37 | 0, $data$addr$1$lcssa | 0, $40 | 0) | 0;
 $add42 = $shl40 + $36 | 0;
 $storemerge = $add42;
 HEAP32[$buflen >> 2] = $storemerge;
 return;
}

function _Update_371($ctx, $input, $0, $1) {
 $ctx = $ctx | 0;
 $input = $input | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$pr = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx16 = 0, $arrayidx20 = 0, $arrayidx32 = 0, $arrayidx36 = 0;
 var $arrayidx41 = 0, $arrayidx45 = 0, $arrayidx9 = 0, $bits_in_last_byte = 0, $bits_in_last_byte40 = 0, $buf_ptr = 0, $cmp = 0, $cmp$lcssa = 0, $cmp28 = 0, $cmp2837 = 0, $cmp39 = 0, $cmp5 = 0, $cmp540 = 0, $conv2 = 0, $div26 = 0, $inc = 0, $inc19 = 0, $inc31 = 0, $inc35 = 0, $inc44 = 0;
 var $inc8 = 0, $index$0$lcssa = 0, $index$042 = 0, $index$1 = 0, $index$2$lcssa = 0, $index$238 = 0, $mul = 0, $or$cond = 0, $or$cond41 = 0, $sub = 0, $tobool = 0, $tobool14 = 0, $tobool38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 3) | 0;
 $3 = getTempRet0() | 0;
 $conv2 = $0 & 7;
 $buf_ptr = $ctx + 136 | 0;
 $4 = HEAP32[$buf_ptr >> 2] | 0;
 $tobool = ($4 | 0) == 0;
 do {
  if ($tobool) {
   $index$1 = 0;
  } else {
   $cmp39 = ($4 | 0) < 64;
   $cmp540 = ($2 | 0) > 0;
   $or$cond41 = $cmp39 & $cmp540;
   if ($or$cond41) {
    $6 = $4;
    $index$042 = 0;
    while (1) {
     $inc = $index$042 + 1 | 0;
     $arrayidx = $input + $index$042 | 0;
     $5 = HEAP8[$arrayidx >> 0] | 0;
     $inc8 = $6 + 1 | 0;
     HEAP32[$buf_ptr >> 2] = $inc8;
     $arrayidx9 = ($ctx + 72 | 0) + $6 | 0;
     HEAP8[$arrayidx9 >> 0] = $5;
     $$pr = HEAP32[$buf_ptr >> 2] | 0;
     $cmp = ($$pr | 0) < 64;
     $cmp5 = ($inc | 0) < ($2 | 0);
     $or$cond = $cmp & $cmp5;
     if ($or$cond) {
      $6 = $$pr;
      $index$042 = $inc;
     } else {
      $$lcssa = $$pr;
      $cmp$lcssa = $cmp;
      $index$0$lcssa = $inc;
      break;
     }
    }
   } else {
    $$lcssa = $4;
    $cmp$lcssa = $cmp39;
    $index$0$lcssa = 0;
   }
   if (!$cmp$lcssa) {
    HEAP32[$buf_ptr >> 2] = 0;
    $arraydecay = $ctx + 72 | 0;
    _Transform($ctx, $arraydecay, 64);
    $index$1 = $index$0$lcssa;
    break;
   }
   $tobool14 = ($conv2 | 0) == 0;
   if ($tobool14) {
    return;
   }
   $arrayidx20 = ($ctx + 72 | 0) + $$lcssa | 0;
   $inc19 = $$lcssa + 1 | 0;
   $arrayidx16 = $input + $index$0$lcssa | 0;
   $bits_in_last_byte = $ctx + 140 | 0;
   HEAP32[$bits_in_last_byte >> 2] = $conv2;
   $7 = HEAP8[$arrayidx16 >> 0] | 0;
   HEAP32[$buf_ptr >> 2] = $inc19;
   HEAP8[$arrayidx20 >> 0] = $7;
   return;
  }
 } while (0);
 $add$ptr = $input + $index$1 | 0;
 $sub = $2 - $index$1 | 0;
 _Transform($ctx, $add$ptr, $sub);
 $div26 = ($sub | 0) / 64 & -1;
 $mul = $div26 << 6;
 $add = $mul + $index$1 | 0;
 $cmp2837 = ($add | 0) < ($2 | 0);
 if ($cmp2837) {
  $index$238 = $add;
  while (1) {
   $inc31 = $index$238 + 1 | 0;
   $arrayidx32 = $input + $index$238 | 0;
   $8 = HEAP8[$arrayidx32 >> 0] | 0;
   $9 = HEAP32[$buf_ptr >> 2] | 0;
   $inc35 = $9 + 1 | 0;
   HEAP32[$buf_ptr >> 2] = $inc35;
   $arrayidx36 = ($ctx + 72 | 0) + $9 | 0;
   HEAP8[$arrayidx36 >> 0] = $8;
   $cmp28 = ($inc31 | 0) < ($2 | 0);
   if ($cmp28) {
    $index$238 = $inc31;
   } else {
    $index$2$lcssa = $2;
    break;
   }
  }
 } else {
  $index$2$lcssa = $add;
 }
 $tobool38 = ($conv2 | 0) == 0;
 if ($tobool38) {
  return;
 }
 $bits_in_last_byte40 = $ctx + 140 | 0;
 HEAP32[$bits_in_last_byte40 >> 2] = $conv2;
 $arrayidx41 = $input + $index$2$lcssa | 0;
 $10 = HEAP8[$arrayidx41 >> 0] | 0;
 $11 = HEAP32[$buf_ptr >> 2] | 0;
 $inc44 = $11 + 1 | 0;
 HEAP32[$buf_ptr >> 2] = $inc44;
 $arrayidx45 = ($ctx + 72 | 0) + $11 | 0;
 HEAP8[$arrayidx45 >> 0] = $10;
 return;
}

function _fe_cmov($f, $g, $b) {
 $f = $f | 0;
 $g = $g | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $and = 0, $and32 = 0, $and34 = 0, $and35 = 0, $and36 = 0, $and37 = 0, $and38 = 0, $and39 = 0, $and40 = 0, $and41 = 0, $and42 = 0, $and43 = 0, $arrayidx1 = 0, $arrayidx11 = 0, $arrayidx12 = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx15 = 0, $arrayidx16 = 0, $arrayidx17 = 0;
 var $arrayidx18 = 0, $arrayidx19 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $arrayidx5 = 0, $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $cmp = 0, $neg = 0, $neg31 = 0, $or = 0, $sub = 0, $sub29 = 0, $xor = 0, $xor20 = 0, $xor21 = 0, $xor22 = 0;
 var $xor23 = 0, $xor24 = 0, $xor25 = 0, $xor26 = 0, $xor27 = 0, $xor28 = 0, $xor44 = 0, $xor46 = 0, $xor48 = 0, $xor50 = 0, $xor52 = 0, $xor54 = 0, $xor56 = 0, $xor58 = 0, $xor60 = 0, $xor62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f >> 2] | 0;
 $arrayidx1 = $f + 4 | 0;
 $1 = HEAP32[$arrayidx1 >> 2] | 0;
 $arrayidx2 = $f + 8 | 0;
 $2 = HEAP32[$arrayidx2 >> 2] | 0;
 $arrayidx3 = $f + 12 | 0;
 $3 = HEAP32[$arrayidx3 >> 2] | 0;
 $arrayidx4 = $f + 16 | 0;
 $4 = HEAP32[$arrayidx4 >> 2] | 0;
 $arrayidx5 = $f + 20 | 0;
 $5 = HEAP32[$arrayidx5 >> 2] | 0;
 $arrayidx6 = $f + 24 | 0;
 $6 = HEAP32[$arrayidx6 >> 2] | 0;
 $arrayidx7 = $f + 28 | 0;
 $7 = HEAP32[$arrayidx7 >> 2] | 0;
 $arrayidx8 = $f + 32 | 0;
 $8 = HEAP32[$arrayidx8 >> 2] | 0;
 $arrayidx9 = $f + 36 | 0;
 $9 = HEAP32[$arrayidx9 >> 2] | 0;
 $sub = $b + -1 | 0;
 $neg = $b ^ -1;
 $and = $sub & $neg;
 $sub29 = $b + -2 | 0;
 $neg31 = 0 - $b | 0;
 $and32 = $sub29 & $neg31;
 $or = $and | $and32;
 $cmp = ($or | 0) == -1;
 if ($cmp) {
  $arrayidx19 = $g + 36 | 0;
  $10 = HEAP32[$arrayidx19 >> 2] | 0;
  $xor28 = $10 ^ $9;
  $arrayidx18 = $g + 32 | 0;
  $11 = HEAP32[$arrayidx18 >> 2] | 0;
  $xor27 = $11 ^ $8;
  $arrayidx17 = $g + 28 | 0;
  $12 = HEAP32[$arrayidx17 >> 2] | 0;
  $xor26 = $12 ^ $7;
  $arrayidx16 = $g + 24 | 0;
  $13 = HEAP32[$arrayidx16 >> 2] | 0;
  $xor25 = $13 ^ $6;
  $arrayidx15 = $g + 20 | 0;
  $14 = HEAP32[$arrayidx15 >> 2] | 0;
  $xor24 = $14 ^ $5;
  $arrayidx14 = $g + 16 | 0;
  $15 = HEAP32[$arrayidx14 >> 2] | 0;
  $xor23 = $15 ^ $4;
  $arrayidx13 = $g + 12 | 0;
  $16 = HEAP32[$arrayidx13 >> 2] | 0;
  $xor22 = $16 ^ $3;
  $arrayidx12 = $g + 8 | 0;
  $17 = HEAP32[$arrayidx12 >> 2] | 0;
  $xor21 = $17 ^ $2;
  $arrayidx11 = $g + 4 | 0;
  $18 = HEAP32[$arrayidx11 >> 2] | 0;
  $xor20 = $18 ^ $1;
  $19 = HEAP32[$g >> 2] | 0;
  $xor = $19 ^ $0;
  $and34 = $xor & $neg31;
  $and35 = $xor20 & $neg31;
  $and36 = $xor21 & $neg31;
  $and37 = $xor22 & $neg31;
  $and38 = $xor23 & $neg31;
  $and39 = $xor24 & $neg31;
  $and40 = $xor25 & $neg31;
  $and41 = $xor26 & $neg31;
  $and42 = $xor27 & $neg31;
  $and43 = $xor28 & $neg31;
  $xor44 = $and34 ^ $0;
  HEAP32[$f >> 2] = $xor44;
  $xor46 = $and35 ^ $1;
  HEAP32[$arrayidx1 >> 2] = $xor46;
  $xor48 = $and36 ^ $2;
  HEAP32[$arrayidx2 >> 2] = $xor48;
  $xor50 = $and37 ^ $3;
  HEAP32[$arrayidx3 >> 2] = $xor50;
  $xor52 = $and38 ^ $4;
  HEAP32[$arrayidx4 >> 2] = $xor52;
  $xor54 = $and39 ^ $5;
  HEAP32[$arrayidx5 >> 2] = $xor54;
  $xor56 = $and40 ^ $6;
  HEAP32[$arrayidx6 >> 2] = $xor56;
  $xor58 = $and41 ^ $7;
  HEAP32[$arrayidx7 >> 2] = $xor58;
  $xor60 = $and42 ^ $8;
  HEAP32[$arrayidx8 >> 2] = $xor60;
  $xor62 = $and43 ^ $9;
  HEAP32[$arrayidx9 >> 2] = $xor62;
  return;
 } else {
  ___assert_fail(45693 | 0, 45753 | 0, 194, 45807 | 0);
 }
}

function __ZN4Core12Cryptography12generateKeysERNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES8_($privateKey, $publicKey) {
 $privateKey = $privateKey | 0;
 $publicKey = $publicKey | 0;
 var $$pr = 0, $$pr10 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i178 = 0, $__size_$i$i$i$i$i = 0, $__size_$i$i$i$i$i102 = 0, $__size_$i45$i$i$i$i = 0, $__size_$i45$i$i$i$i119 = 0, $l_privateKey = 0, $l_publicKey = 0, $ref$tmp = 0, $ref$tmp1 = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i = 0;
 var $tobool$i$i$i$i$i105 = 0, $tobool$i$i$i$i147 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
 $l_privateKey = sp + 56 | 0;
 $l_publicKey = sp + 24 | 0;
 $ref$tmp = sp + 12 | 0;
 $ref$tmp1 = sp;
 __ZN6Crypto9SecretKeyC2Ev($l_privateKey);
 __ZN6Crypto9PublicKeyC2Ev($l_publicKey);
 __ZN6Crypto13generate_keysERNS_9PublicKeyERNS_9SecretKeyE($l_publicKey, $l_privateKey);
 __ZN6Common8podToHexIN6Crypto9SecretKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($ref$tmp, $l_privateKey);
 $__size_$i$i$i$i$i = $privateKey + 11 | 0;
 $0 = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
 $tobool$i$i$i$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i$i$i$i) {
  $1 = HEAP32[$privateKey >> 2] | 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($1, 0);
  $__size_$i45$i$i$i$i = $privateKey + 4 | 0;
  HEAP32[$__size_$i45$i$i$i$i >> 2] = 0;
  $$pr = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
  $tobool$i$i$i$i = $$pr << 24 >> 24 < 0;
  if ($tobool$i$i$i$i) {
   $2 = HEAP32[$privateKey >> 2] | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2);
   $__cap_$i$i$i$i$i = $privateKey + 8 | 0;
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  __ZNSt3__211char_traitsIcE6assignERcRKc($privateKey, 0);
  HEAP8[$__size_$i$i$i$i$i >> 0] = 0;
 };
 HEAP32[$privateKey >> 2] = HEAP32[$ref$tmp >> 2] | 0;
 HEAP32[$privateKey + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2] | 0;
 HEAP32[$privateKey + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2] | 0;
 HEAP32[$ref$tmp >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZN6Common8podToHexIN6Crypto9PublicKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($ref$tmp1, $l_publicKey);
 $__size_$i$i$i$i$i102 = $publicKey + 11 | 0;
 $3 = HEAP8[$__size_$i$i$i$i$i102 >> 0] | 0;
 $tobool$i$i$i$i$i105 = $3 << 24 >> 24 < 0;
 if ($tobool$i$i$i$i$i105) {
  $4 = HEAP32[$publicKey >> 2] | 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($4, 0);
  $__size_$i45$i$i$i$i119 = $publicKey + 4 | 0;
  HEAP32[$__size_$i45$i$i$i$i119 >> 2] = 0;
  $$pr10 = HEAP8[$__size_$i$i$i$i$i102 >> 0] | 0;
  $tobool$i$i$i$i147 = $$pr10 << 24 >> 24 < 0;
  if ($tobool$i$i$i$i147) {
   $5 = HEAP32[$publicKey >> 2] | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($5);
   $__cap_$i$i$i$i$i178 = $publicKey + 8 | 0;
   HEAP32[$__cap_$i$i$i$i$i178 >> 2] = 0;
  }
 } else {
  __ZNSt3__211char_traitsIcE6assignERcRKc($publicKey, 0);
  HEAP8[$__size_$i$i$i$i$i102 >> 0] = 0;
 };
 HEAP32[$publicKey >> 2] = HEAP32[$ref$tmp1 >> 2] | 0;
 HEAP32[$publicKey + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2] | 0;
 HEAP32[$publicKey + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2] | 0;
 HEAP32[$ref$tmp1 >> 2] = 0 | 0;
 HEAP32[$ref$tmp1 + 4 >> 2] = 0 | 0;
 HEAP32[$ref$tmp1 + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
 STACKTOP = sp;
 return;
}

function __ZN6Crypto8Multisig23restore_ring_signaturesERKNS_19EllipticCurveScalarERKNSt3__26vectorINS_9SecretKeyENS4_9allocatorIS6_EEEEyS3_RNS5_INS_9SignatureENS7_ISC_EEEE($derivationScalar, $partialSigningKeys, $0, $1, $k, $signatures) {
 $derivationScalar = $derivationScalar | 0;
 $partialSigningKeys = $partialSigningKeys | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $k = $k | 0;
 $signatures = $signatures | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__begin$sroa$0$012 = 0, $add$ptr = 0, $arrayidx$i = 0, $call = 0, $call1 = 0, $call11 = 0, $call3 = 0, $cmp$i$i = 0, $cmp$i$i11 = 0, $derivation = 0, $derivedSecretKey = 0, $incdec$ptr$i = 0, $key = 0, $keys = 0, $partialKey = 0, $partialSigningKeys$idx$val = 0;
 var $partialSigningKeys$idx1 = 0, $partialSigningKeys$idx1$val = 0, $retval$0 = 0, $retval$1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144 | 0);
 $derivation = sp + 112 | 0;
 $partialKey = sp + 80 | 0;
 $keys = sp;
 $key = sp + 48 | 0;
 $derivedSecretKey = sp + 16 | 0;
 $call = __ZN6Crypto8Multisig9is_scalarINS_19EllipticCurveScalarEEEbRKT_($k) | 0;
 if (!$call) {
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 $call1 = __ZN6Crypto8Multisig9is_scalarINS_19EllipticCurveScalarEEEbRKT_($derivationScalar) | 0;
 if (!$call1) {
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 __ZN6Crypto9SecretKeyC2EPKh($derivation, $derivationScalar);
 $2 = HEAP32[$signatures >> 2] | 0;
 $arrayidx$i = $2 + ($0 << 6) | 0;
 __ZN6Crypto8Multisig28generate_partial_signing_keyERKNS_9SignatureERKNS_9SecretKeyE($partialKey, $arrayidx$i, $derivation);
 $call3 = __ZN6Crypto8Multisig9is_scalarINS_9SecretKeyEEEbRKT_($partialKey) | 0;
 if (!$call3) {
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 $partialSigningKeys$idx$val = HEAP32[$partialSigningKeys >> 2] | 0;
 $partialSigningKeys$idx1 = $partialSigningKeys + 4 | 0;
 $partialSigningKeys$idx1$val = HEAP32[$partialSigningKeys$idx1 >> 2] | 0;
 __ZN6Crypto8Multisig17dedupeAndSortKeysINS_9SecretKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_($keys, $partialSigningKeys$idx$val, $partialSigningKeys$idx1$val);
 $3 = HEAP32[$partialSigningKeys >> 2] | 0;
 $4 = HEAP32[$partialSigningKeys$idx1 >> 2] | 0;
 $cmp$i$i11 = ($3 | 0) == ($4 | 0);
 L10 : do {
  if ($cmp$i$i11) {
   label = 8;
  } else {
   $__begin$sroa$0$012 = $3;
   while (1) {
    dest = $key;
    src = $__begin$sroa$0$012;
    stop = dest + 32 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    $call11 = __ZN6Crypto8Multisig9is_scalarINS_9SecretKeyEEEbRKT_($key) | 0;
    $incdec$ptr$i = $__begin$sroa$0$012 + 32 | 0;
    if (!$call11) {
     $retval$0 = 0;
     break L10;
    }
    $cmp$i$i = ($incdec$ptr$i | 0) == ($4 | 0);
    if ($cmp$i$i) {
     label = 8;
     break;
    } else {
     $__begin$sroa$0$012 = $incdec$ptr$i;
    }
   }
  }
 } while (0);
 if ((label | 0) == 8) {
  __ZN6Crypto8Multisig7addKeysINS_9SecretKeyEEET_RKS3_RKNSt3__26vectorIS3_NS6_9allocatorIS3_EEEE($derivedSecretKey, $partialKey, $keys);
  $5 = HEAP32[$signatures >> 2] | 0;
  $add$ptr = ($5 + ($0 << 6) | 0) + 32 | 0;
  _sc_sub($add$ptr, $k, $derivedSecretKey);
  $retval$0 = 1;
 }
 __ZNSt3__213__vector_baseIN6Crypto9SecretKeyENS_9allocatorIS2_EEED2Ev($keys);
 $retval$1 = $retval$0;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _blake2b_final($S, $out, $outlen) {
 $S = $S | 0;
 $out = $out | 0;
 $outlen = $outlen | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr$1 = 0, $add$ptr$2 = 0, $add$ptr$3 = 0, $add$ptr$4 = 0, $add$ptr$5 = 0, $add$ptr$6 = 0, $add$ptr$7 = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx6$1 = 0;
 var $arrayidx6$2 = 0, $arrayidx6$3 = 0, $arrayidx6$4 = 0, $arrayidx6$5 = 0, $arrayidx6$6 = 0, $arrayidx6$7 = 0, $buffer = 0, $buflen = 0, $sub = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $buffer = sp;
 dest = $buffer;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $buflen = $S + 208 | 0;
 $0 = HEAP32[$buflen >> 2] | 0;
 _blake2b_increment_counter($S, $0, 0);
 $1 = HEAP32[$buflen >> 2] | 0;
 $arrayidx = ($S + 80 | 0) + $1 | 0;
 $sub = 128 - $1 | 0;
 _memset($arrayidx | 0, 0, $sub | 0) | 0;
 $arraydecay = $S + 80 | 0;
 _blake2b_compress($S, $arraydecay, -1, -1);
 $2 = $S;
 $3 = $2;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $2 + 4 | 0;
 $6 = $5;
 $7 = HEAP32[$6 >> 2] | 0;
 _store64_491($buffer, $4, $7);
 $add$ptr$1 = $buffer + 8 | 0;
 $arrayidx6$1 = $S + 8 | 0;
 $8 = $arrayidx6$1;
 $9 = $8;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $8 + 4 | 0;
 $12 = $11;
 $13 = HEAP32[$12 >> 2] | 0;
 _store64_491($add$ptr$1, $10, $13);
 $add$ptr$2 = $buffer + 16 | 0;
 $arrayidx6$2 = $S + 16 | 0;
 $14 = $arrayidx6$2;
 $15 = $14;
 $16 = HEAP32[$15 >> 2] | 0;
 $17 = $14 + 4 | 0;
 $18 = $17;
 $19 = HEAP32[$18 >> 2] | 0;
 _store64_491($add$ptr$2, $16, $19);
 $add$ptr$3 = $buffer + 24 | 0;
 $arrayidx6$3 = $S + 24 | 0;
 $20 = $arrayidx6$3;
 $21 = $20;
 $22 = HEAP32[$21 >> 2] | 0;
 $23 = $20 + 4 | 0;
 $24 = $23;
 $25 = HEAP32[$24 >> 2] | 0;
 _store64_491($add$ptr$3, $22, $25);
 $add$ptr$4 = $buffer + 32 | 0;
 $arrayidx6$4 = $S + 32 | 0;
 $26 = $arrayidx6$4;
 $27 = $26;
 $28 = HEAP32[$27 >> 2] | 0;
 $29 = $26 + 4 | 0;
 $30 = $29;
 $31 = HEAP32[$30 >> 2] | 0;
 _store64_491($add$ptr$4, $28, $31);
 $add$ptr$5 = $buffer + 40 | 0;
 $arrayidx6$5 = $S + 40 | 0;
 $32 = $arrayidx6$5;
 $33 = $32;
 $34 = HEAP32[$33 >> 2] | 0;
 $35 = $32 + 4 | 0;
 $36 = $35;
 $37 = HEAP32[$36 >> 2] | 0;
 _store64_491($add$ptr$5, $34, $37);
 $add$ptr$6 = $buffer + 48 | 0;
 $arrayidx6$6 = $S + 48 | 0;
 $38 = $arrayidx6$6;
 $39 = $38;
 $40 = HEAP32[$39 >> 2] | 0;
 $41 = $38 + 4 | 0;
 $42 = $41;
 $43 = HEAP32[$42 >> 2] | 0;
 _store64_491($add$ptr$6, $40, $43);
 $add$ptr$7 = $buffer + 56 | 0;
 $arrayidx6$7 = $S + 56 | 0;
 $44 = $arrayidx6$7;
 $45 = $44;
 $46 = HEAP32[$45 >> 2] | 0;
 $47 = $44 + 4 | 0;
 $48 = $47;
 $49 = HEAP32[$48 >> 2] | 0;
 _store64_491($add$ptr$7, $46, $49);
 _memcpy($out | 0, $buffer | 0, $outlen | 0) | 0;
 _clear_internal_memory($buffer, 64);
 _clear_internal_memory($arraydecay, 128);
 _clear_internal_memory($S, 64);
 STACKTOP = sp;
 return;
}

function _index_alpha($instance, $position$0$0$val, $position$0$2$val, $position$0$3$val, $pseudo_rand, $same_lane) {
 $instance = $instance | 0;
 $position$0$0$val = $position$0$0$val | 0;
 $position$0$2$val = $position$0$2$val | 0;
 $position$0$3$val = $position$0$3$val | 0;
 $pseudo_rand = $pseudo_rand | 0;
 $same_lane = $same_lane | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add17 = 0, $add25 = 0, $add35 = 0, $add56 = 0;
 var $cmp = 0, $cmp1 = 0, $cmp15 = 0, $cmp32 = 0, $cmp52 = 0, $cond = 0, $cond34 = 0, $conv = 0, $conv51 = 0, $lane_length = 0, $lane_length63 = 0, $mul = 0, $mul58 = 0, $or$cond = 0, $reference_area_size$0 = 0, $segment_length = 0, $segment_length22 = 0, $segment_length57 = 0, $sub = 0, $sub23 = 0;
 var $sub26 = 0, $sub40 = 0, $sub8 = 0, $tobool = 0, $tobool20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($position$0$0$val | 0) == 0;
 do {
  if ($cmp) {
   $cmp1 = $position$0$2$val << 24 >> 24 == 0;
   if ($cmp1) {
    $sub = $position$0$3$val + -1 | 0;
    $reference_area_size$0 = $sub;
    break;
   }
   $conv = $position$0$2$val & 255;
   $tobool = ($same_lane | 0) == 0;
   $segment_length = $instance + 16 | 0;
   $0 = HEAP32[$segment_length >> 2] | 0;
   $mul = Math_imul($0, $conv) | 0;
   if ($tobool) {
    $cmp15 = ($position$0$3$val | 0) == 0;
    $cond = $cmp15 << 31 >> 31;
    $add17 = $mul + $cond | 0;
    $reference_area_size$0 = $add17;
    break;
   } else {
    $add = $position$0$3$val + -1 | 0;
    $sub8 = $add + $mul | 0;
    $reference_area_size$0 = $sub8;
    break;
   }
  } else {
   $tobool20 = ($same_lane | 0) == 0;
   $lane_length = $instance + 20 | 0;
   $1 = HEAP32[$lane_length >> 2] | 0;
   $segment_length22 = $instance + 16 | 0;
   $2 = HEAP32[$segment_length22 >> 2] | 0;
   $sub23 = $1 - $2 | 0;
   if ($tobool20) {
    $cmp32 = ($position$0$3$val | 0) == 0;
    $cond34 = $cmp32 << 31 >> 31;
    $add35 = $sub23 + $cond34 | 0;
    $reference_area_size$0 = $add35;
    break;
   } else {
    $add25 = $position$0$3$val + -1 | 0;
    $sub26 = $add25 + $sub23 | 0;
    $reference_area_size$0 = $sub26;
    break;
   }
  }
 } while (0);
 ___muldi3($pseudo_rand | 0, 0, $pseudo_rand | 0, 0) | 0;
 $3 = getTempRet0() | 0;
 $sub40 = $reference_area_size$0 + -1 | 0;
 ___muldi3($3 | 0, 0, $reference_area_size$0 | 0, 0) | 0;
 $4 = getTempRet0() | 0;
 $5 = _i64Subtract($sub40 | 0, 0, $4 | 0, 0) | 0;
 $6 = getTempRet0() | 0;
 $cmp52 = $position$0$2$val << 24 >> 24 == 3;
 $or$cond = $cmp | $cmp52;
 if ($or$cond) {
  $8 = 0;
  $9 = 0;
  $10 = _i64Add($5 | 0, $6 | 0, $8 | 0, $9 | 0) | 0;
  $11 = getTempRet0() | 0;
  $lane_length63 = $instance + 20 | 0;
  $12 = HEAP32[$lane_length63 >> 2] | 0;
  $13 = ___uremdi3($10 | 0, $11 | 0, $12 | 0, 0) | 0;
  $14 = getTempRet0() | 0;
  return $13 | 0;
 }
 $segment_length57 = $instance + 16 | 0;
 $conv51 = $position$0$2$val & 255;
 $add56 = $conv51 + 1 | 0;
 $7 = HEAP32[$segment_length57 >> 2] | 0;
 $mul58 = Math_imul($7, $add56) | 0;
 $8 = $mul58;
 $9 = 0;
 $10 = _i64Add($5 | 0, $6 | 0, $8 | 0, $9 | 0) | 0;
 $11 = getTempRet0() | 0;
 $lane_length63 = $instance + 20 | 0;
 $12 = HEAP32[$lane_length63 >> 2] | 0;
 $13 = ___uremdi3($10 | 0, $11 | 0, $12 | 0, 0) | 0;
 $14 = getTempRet0() | 0;
 return $13 | 0;
}

function _tree_hash($hashes, $count, $root_hash) {
 $hashes = $hashes | 0;
 $count = $count | 0;
 $root_hash = $root_hash | 0;
 var $$alloca_mul = 0, $0 = 0, $add = 0, $add35 = 0, $and = 0, $arraydecay = 0, $arraydecay18 = 0, $arraydecay31 = 0, $arraydecay33 = 0, $cmp1544 = 0, $cmp21 = 0, $cmp25 = 0, $cmp2542 = 0, $cmp2839 = 0, $cnt$143 = 0, $exitcond = 0, $exitcond49 = 0, $i$146 = 0, $i$241 = 0, $inc = 0;
 var $inc36 = 0, $j$045 = 0, $j$140 = 0, $mul = 0, $mul7 = 0, $mul9 = 0, $neg = 0, $or = 0, $or$1 = 0, $or$2 = 0, $or$3 = 0, $or$4 = 0, $shr = 0, $shr$1 = 0, $shr$2 = 0, $shr$3 = 0, $shr$4 = 0, $shr26 = 0, $shr6 = 0, $sub = 0;
 var $sub8 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 switch ($count | 0) {
 case 0:
  {
   ___assert_fail(46179 | 0, 46189 | 0, 27, 46242 | 0);
   break;
  }
 case 1:
  {
   dest = $root_hash;
   src = $hashes;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   STACKTOP = sp;
   return;
   break;
  }
 case 2:
  {
   _cn_fast_hash($hashes, 64, $root_hash);
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   $sub = $count + -1 | 0;
   $shr = $sub >>> 1;
   $or = $shr | $sub;
   $shr$1 = $or >>> 2;
   $or$1 = $shr$1 | $or;
   $shr$2 = $or$1 >>> 4;
   $or$2 = $shr$2 | $or$1;
   $shr$3 = $or$2 >>> 8;
   $or$3 = $shr$3 | $or$2;
   $shr$4 = $or$3 >>> 16;
   $or$4 = $shr$4 | $or$3;
   $shr6 = $or$4 >>> 1;
   $neg = $shr6 ^ -1;
   $and = $or$4 & $neg;
   $mul = $and << 5;
   $$alloca_mul = $mul;
   $0 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
   if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $$alloca_mul | 0) + 15 & -16 | 0);
   $mul7 = $and << 1;
   $sub8 = $mul7 - $count | 0;
   $mul9 = $sub8 << 5;
   _memcpy($0 | 0, $hashes | 0, $mul9 | 0) | 0;
   $cmp1544 = $sub8 >>> 0 < $and >>> 0;
   if ($cmp1544) {
    $i$146 = $sub8;
    $j$045 = $sub8;
    while (1) {
     $arraydecay = $hashes + ($i$146 << 5) | 0;
     $arraydecay18 = $0 + ($j$045 << 5) | 0;
     _cn_fast_hash($arraydecay, 64, $arraydecay18);
     $add = $i$146 + 2 | 0;
     $inc = $j$045 + 1 | 0;
     $exitcond49 = ($inc | 0) == ($and | 0);
     if ($exitcond49) {
      break;
     } else {
      $i$146 = $add;
      $j$045 = $inc;
     }
    }
   } else {
    $cmp21 = ($sub8 | 0) == ($count | 0);
    if (!$cmp21) {
     ___assert_fail(46252 | 0, 46189 | 0, 52, 46242 | 0);
    }
   }
   $cmp2542 = $and >>> 0 > 2;
   if ($cmp2542) {
    $cnt$143 = $and;
    while (1) {
     $shr26 = $cnt$143 >>> 1;
     $cmp2839 = ($shr26 | 0) == 0;
     if (!$cmp2839) {
      $i$241 = 0;
      $j$140 = 0;
      while (1) {
       $arraydecay31 = $0 + ($i$241 << 5) | 0;
       $arraydecay33 = $0 + ($j$140 << 5) | 0;
       _cn_fast_hash($arraydecay31, 64, $arraydecay33);
       $add35 = $i$241 + 2 | 0;
       $inc36 = $j$140 + 1 | 0;
       $exitcond = ($inc36 | 0) == ($shr26 | 0);
       if ($exitcond) {
        break;
       } else {
        $i$241 = $add35;
        $j$140 = $inc36;
       }
      }
     }
     $cmp25 = $cnt$143 >>> 0 > 5;
     if ($cmp25) {
      $cnt$143 = $shr26;
     } else {
      break;
     }
    }
   }
   _cn_fast_hash($0, 64, $root_hash);
   STACKTOP = sp;
   return;
  }
 }
}

function __ZN4Core10check_hashERKN6Crypto4HashEy($hash, $0, $1) {
 $hash = $hash | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx3 = 0, $cur = 0;
 var $high = 0, $lnot = 0, $low = 0, $retval$0 = 0, $top = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $low = sp + 24 | 0;
 $high = sp + 16 | 0;
 $top = sp + 8 | 0;
 $cur = sp;
 $arrayidx = $hash + 24 | 0;
 $2 = $arrayidx;
 $3 = $2;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $2 + 4 | 0;
 $6 = $5;
 $7 = HEAP32[$6 >> 2] | 0;
 __ZN4Core3mulEyyRyS0_($4, $7, $0, $1, $top, $high);
 $8 = $high;
 $9 = $8;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $8 + 4 | 0;
 $12 = $11;
 $13 = HEAP32[$12 >> 2] | 0;
 $14 = ($10 | 0) == 0;
 $15 = ($13 | 0) == 0;
 $16 = $14 & $15;
 if (!$16) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $17 = $hash;
 $18 = $17;
 $19 = HEAP32[$18 >> 2] | 0;
 $20 = $17 + 4 | 0;
 $21 = $20;
 $22 = HEAP32[$21 >> 2] | 0;
 __ZN4Core3mulEyyRyS0_($19, $22, $0, $1, $low, $cur);
 $arrayidx2 = $hash + 8 | 0;
 $23 = $arrayidx2;
 $24 = $23;
 $25 = HEAP32[$24 >> 2] | 0;
 $26 = $23 + 4 | 0;
 $27 = $26;
 $28 = HEAP32[$27 >> 2] | 0;
 __ZN4Core3mulEyyRyS0_($25, $28, $0, $1, $low, $high);
 $29 = $cur;
 $30 = $29;
 $31 = HEAP32[$30 >> 2] | 0;
 $32 = $29 + 4 | 0;
 $33 = $32;
 $34 = HEAP32[$33 >> 2] | 0;
 $35 = $low;
 $36 = $35;
 $37 = HEAP32[$36 >> 2] | 0;
 $38 = $35 + 4 | 0;
 $39 = $38;
 $40 = HEAP32[$39 >> 2] | 0;
 $41 = __ZN4Core4caddEyy($31, $34, $37, $40) | 0;
 $42 = $high;
 $43 = $42;
 $44 = HEAP32[$43 >> 2] | 0;
 $45 = $42 + 4 | 0;
 $46 = $45;
 $47 = HEAP32[$46 >> 2] | 0;
 $48 = $cur;
 $49 = $48;
 HEAP32[$49 >> 2] = $44;
 $50 = $48 + 4 | 0;
 $51 = $50;
 HEAP32[$51 >> 2] = $47;
 $arrayidx3 = $hash + 16 | 0;
 $52 = $arrayidx3;
 $53 = $52;
 $54 = HEAP32[$53 >> 2] | 0;
 $55 = $52 + 4 | 0;
 $56 = $55;
 $57 = HEAP32[$56 >> 2] | 0;
 __ZN4Core3mulEyyRyS0_($54, $57, $0, $1, $low, $high);
 $58 = $low;
 $59 = $58;
 $60 = HEAP32[$59 >> 2] | 0;
 $61 = $58 + 4 | 0;
 $62 = $61;
 $63 = HEAP32[$62 >> 2] | 0;
 $64 = __ZN4Core4cadcEyyb($44, $47, $60, $63, $41) | 0;
 $65 = $high;
 $66 = $65;
 $67 = HEAP32[$66 >> 2] | 0;
 $68 = $65 + 4 | 0;
 $69 = $68;
 $70 = HEAP32[$69 >> 2] | 0;
 $71 = $top;
 $72 = $71;
 $73 = HEAP32[$72 >> 2] | 0;
 $74 = $71 + 4 | 0;
 $75 = $74;
 $76 = HEAP32[$75 >> 2] | 0;
 $77 = __ZN4Core4cadcEyyb($67, $70, $73, $76, $64) | 0;
 $lnot = $77 ^ 1;
 $retval$0 = $lnot;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _oaes_set_option($ctx) {
 $ctx = $ctx | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $arrayidx$1 = 0, $arrayidx$10 = 0, $arrayidx$11 = 0, $arrayidx$12 = 0, $arrayidx$13 = 0, $arrayidx$14 = 0, $arrayidx$15 = 0, $arrayidx$2 = 0, $arrayidx$3 = 0, $arrayidx$4 = 0, $arrayidx$5 = 0, $arrayidx$6 = 0, $arrayidx$7 = 0, $arrayidx$8 = 0, $arrayidx$9 = 0, $call = 0, $call$1 = 0;
 var $call$10 = 0, $call$11 = 0, $call$12 = 0, $call$13 = 0, $call$14 = 0, $call$15 = 0, $call$2 = 0, $call$3 = 0, $call$4 = 0, $call$5 = 0, $call$6 = 0, $call$7 = 0, $call$8 = 0, $call$9 = 0, $cmp = 0, $conv13 = 0, $conv13$1 = 0, $conv13$10 = 0, $conv13$11 = 0, $conv13$12 = 0;
 var $conv13$13 = 0, $conv13$14 = 0, $conv13$15 = 0, $conv13$2 = 0, $conv13$3 = 0, $conv13$4 = 0, $conv13$5 = 0, $conv13$6 = 0, $conv13$7 = 0, $conv13$8 = 0, $conv13$9 = 0, $iv14 = 0, $options4 = 0, $or11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($ctx | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $options4 = $ctx + 4 | 0;
 $0 = HEAP16[$options4 >> 1] | 0;
 $1 = $0 & -2;
 HEAP16[$options4 >> 1] = $1;
 $iv14 = $ctx + 6 | 0;
 $call = _rand() | 0;
 $conv13 = $call & 255;
 HEAP8[$iv14 >> 0] = $conv13;
 $call$1 = _rand() | 0;
 $conv13$1 = $call$1 & 255;
 $arrayidx$1 = $ctx + 7 | 0;
 HEAP8[$arrayidx$1 >> 0] = $conv13$1;
 $call$2 = _rand() | 0;
 $conv13$2 = $call$2 & 255;
 $arrayidx$2 = $ctx + 8 | 0;
 HEAP8[$arrayidx$2 >> 0] = $conv13$2;
 $call$3 = _rand() | 0;
 $conv13$3 = $call$3 & 255;
 $arrayidx$3 = $ctx + 9 | 0;
 HEAP8[$arrayidx$3 >> 0] = $conv13$3;
 $call$4 = _rand() | 0;
 $conv13$4 = $call$4 & 255;
 $arrayidx$4 = $ctx + 10 | 0;
 HEAP8[$arrayidx$4 >> 0] = $conv13$4;
 $call$5 = _rand() | 0;
 $conv13$5 = $call$5 & 255;
 $arrayidx$5 = $ctx + 11 | 0;
 HEAP8[$arrayidx$5 >> 0] = $conv13$5;
 $call$6 = _rand() | 0;
 $conv13$6 = $call$6 & 255;
 $arrayidx$6 = $ctx + 12 | 0;
 HEAP8[$arrayidx$6 >> 0] = $conv13$6;
 $call$7 = _rand() | 0;
 $conv13$7 = $call$7 & 255;
 $arrayidx$7 = $ctx + 13 | 0;
 HEAP8[$arrayidx$7 >> 0] = $conv13$7;
 $call$8 = _rand() | 0;
 $conv13$8 = $call$8 & 255;
 $arrayidx$8 = $ctx + 14 | 0;
 HEAP8[$arrayidx$8 >> 0] = $conv13$8;
 $call$9 = _rand() | 0;
 $conv13$9 = $call$9 & 255;
 $arrayidx$9 = $ctx + 15 | 0;
 HEAP8[$arrayidx$9 >> 0] = $conv13$9;
 $call$10 = _rand() | 0;
 $conv13$10 = $call$10 & 255;
 $arrayidx$10 = $ctx + 16 | 0;
 HEAP8[$arrayidx$10 >> 0] = $conv13$10;
 $call$11 = _rand() | 0;
 $conv13$11 = $call$11 & 255;
 $arrayidx$11 = $ctx + 17 | 0;
 HEAP8[$arrayidx$11 >> 0] = $conv13$11;
 $call$12 = _rand() | 0;
 $conv13$12 = $call$12 & 255;
 $arrayidx$12 = $ctx + 18 | 0;
 HEAP8[$arrayidx$12 >> 0] = $conv13$12;
 $call$13 = _rand() | 0;
 $conv13$13 = $call$13 & 255;
 $arrayidx$13 = $ctx + 19 | 0;
 HEAP8[$arrayidx$13 >> 0] = $conv13$13;
 $call$14 = _rand() | 0;
 $conv13$14 = $call$14 & 255;
 $arrayidx$14 = $ctx + 20 | 0;
 HEAP8[$arrayidx$14 >> 0] = $conv13$14;
 $call$15 = _rand() | 0;
 $conv13$15 = $call$15 & 255;
 $arrayidx$15 = $ctx + 21 | 0;
 HEAP8[$arrayidx$15 >> 0] = $conv13$15;
 $$pre = HEAP16[$options4 >> 1] | 0;
 $or11 = $$pre | 2;
 HEAP16[$options4 >> 1] = $or11;
 return;
}

function _Skein1024_Final($ctx, $hashVal) {
 $ctx = $ctx | 0;
 $hashVal = $hashVal | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $X = 0, $add = 0, $add$ptr = 0, $arraydecay = 0, $arraydecay15 = 0, $arrayidx = 0, $arrayidx22 = 0, $arrayidx4 = 0, $bCnt = 0, $cmp = 0, $cmp161 = 0;
 var $cmp32 = 0, $exitcond = 0, $i$02 = 0, $inc = 0, $mul = 0, $mul3 = 0, $shr = 0, $spec$store$select = 0, $sub = 0, $sub31 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $X = sp;
 $arrayidx = $ctx + 16 | 0;
 $0 = $arrayidx;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $5 | -2147483648;
 $7 = $arrayidx;
 $8 = $7;
 HEAP32[$8 >> 2] = $2;
 $9 = $7 + 4 | 0;
 $10 = $9;
 HEAP32[$10 >> 2] = $6;
 $bCnt = $ctx + 4 | 0;
 $11 = HEAP32[$bCnt >> 2] | 0;
 $cmp = $11 >>> 0 < 128;
 if ($cmp) {
  $sub = 128 - $11 | 0;
  $arrayidx4 = ($ctx + 152 | 0) + $11 | 0;
  _memset($arrayidx4 | 0, 0, $sub | 0) | 0;
  $$pre = HEAP32[$bCnt >> 2] | 0;
  $12 = $$pre;
 } else {
  $12 = $11;
 }
 $arraydecay = $ctx + 152 | 0;
 _Skein1024_Process_Block($ctx, $arraydecay, 1, $12);
 $13 = HEAP32[$ctx >> 2] | 0;
 $add = $13 + 7 | 0;
 $shr = $add >>> 3;
 dest = $arraydecay;
 stop = dest + 128 | 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $arraydecay15 = $ctx + 24 | 0;
 dest = $X;
 src = $arraydecay15;
 stop = dest + 128 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $cmp161 = ($shr | 0) == 0;
 if ($cmp161) {
  STACKTOP = sp;
  return;
 }
 $arrayidx22 = $ctx + 8 | 0;
 $14 = $shr + -1 | 0;
 $15 = $14 >>> 7;
 $i$02 = 0;
 $mul3 = 0;
 while (1) {
  $16 = $arraydecay;
  $17 = $16;
  HEAP32[$17 >> 2] = $i$02;
  $18 = $16 + 4 | 0;
  $19 = $18;
  HEAP32[$19 >> 2] = 0;
  $20 = $arrayidx22;
  $21 = $20;
  HEAP32[$21 >> 2] = 0;
  $22 = $20 + 4 | 0;
  $23 = $22;
  HEAP32[$23 >> 2] = 0;
  $24 = $arrayidx;
  $25 = $24;
  HEAP32[$25 >> 2] = 0;
  $26 = $24 + 4 | 0;
  $27 = $26;
  HEAP32[$27 >> 2] = -16777216;
  HEAP32[$bCnt >> 2] = 0;
  _Skein1024_Process_Block($ctx, $arraydecay, 1, 8);
  $sub31 = $shr - $mul3 | 0;
  $cmp32 = $sub31 >>> 0 < 128;
  $spec$store$select = $cmp32 ? $sub31 : 128;
  $add$ptr = $hashVal + $mul3 | 0;
  _memcpy($add$ptr | 0, $arraydecay15 | 0, $spec$store$select | 0) | 0;
  dest = $arraydecay15;
  src = $X;
  stop = dest + 128 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $inc = $i$02 + 1 | 0;
  $mul = $inc << 7;
  $exitcond = ($i$02 | 0) == ($15 | 0);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $inc;
   $mul3 = $mul;
  }
 }
 STACKTOP = sp;
 return;
}

function _Skein_512_Final($ctx, $hashVal) {
 $ctx = $ctx | 0;
 $hashVal = $hashVal | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $X = 0, $add = 0, $add$ptr = 0, $arraydecay = 0, $arraydecay15 = 0, $arrayidx = 0, $arrayidx22 = 0, $arrayidx4 = 0, $bCnt = 0, $cmp = 0, $cmp161 = 0;
 var $cmp32 = 0, $exitcond = 0, $i$02 = 0, $inc = 0, $mul = 0, $mul3 = 0, $shr = 0, $spec$store$select = 0, $sub = 0, $sub31 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $X = sp;
 $arrayidx = $ctx + 16 | 0;
 $0 = $arrayidx;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $5 | -2147483648;
 $7 = $arrayidx;
 $8 = $7;
 HEAP32[$8 >> 2] = $2;
 $9 = $7 + 4 | 0;
 $10 = $9;
 HEAP32[$10 >> 2] = $6;
 $bCnt = $ctx + 4 | 0;
 $11 = HEAP32[$bCnt >> 2] | 0;
 $cmp = $11 >>> 0 < 64;
 if ($cmp) {
  $sub = 64 - $11 | 0;
  $arrayidx4 = ($ctx + 88 | 0) + $11 | 0;
  _memset($arrayidx4 | 0, 0, $sub | 0) | 0;
  $$pre = HEAP32[$bCnt >> 2] | 0;
  $12 = $$pre;
 } else {
  $12 = $11;
 }
 $arraydecay = $ctx + 88 | 0;
 _Skein_512_Process_Block($ctx, $arraydecay, 1, $12);
 $13 = HEAP32[$ctx >> 2] | 0;
 $add = $13 + 7 | 0;
 $shr = $add >>> 3;
 dest = $arraydecay;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $arraydecay15 = $ctx + 24 | 0;
 dest = $X;
 src = $arraydecay15;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $cmp161 = ($shr | 0) == 0;
 if ($cmp161) {
  STACKTOP = sp;
  return;
 }
 $arrayidx22 = $ctx + 8 | 0;
 $14 = $shr + -1 | 0;
 $15 = $14 >>> 6;
 $i$02 = 0;
 $mul3 = 0;
 while (1) {
  $16 = $arraydecay;
  $17 = $16;
  HEAP32[$17 >> 2] = $i$02;
  $18 = $16 + 4 | 0;
  $19 = $18;
  HEAP32[$19 >> 2] = 0;
  $20 = $arrayidx22;
  $21 = $20;
  HEAP32[$21 >> 2] = 0;
  $22 = $20 + 4 | 0;
  $23 = $22;
  HEAP32[$23 >> 2] = 0;
  $24 = $arrayidx;
  $25 = $24;
  HEAP32[$25 >> 2] = 0;
  $26 = $24 + 4 | 0;
  $27 = $26;
  HEAP32[$27 >> 2] = -16777216;
  HEAP32[$bCnt >> 2] = 0;
  _Skein_512_Process_Block($ctx, $arraydecay, 1, 8);
  $sub31 = $shr - $mul3 | 0;
  $cmp32 = $sub31 >>> 0 < 64;
  $spec$store$select = $cmp32 ? $sub31 : 64;
  $add$ptr = $hashVal + $mul3 | 0;
  _memcpy($add$ptr | 0, $arraydecay15 | 0, $spec$store$select | 0) | 0;
  dest = $arraydecay15;
  src = $X;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $inc = $i$02 + 1 | 0;
  $mul = $inc << 6;
  $exitcond = ($i$02 | 0) == ($15 | 0);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $inc;
   $mul3 = $mul;
  }
 }
 STACKTOP = sp;
 return;
}

function __Z21prepareRingSignaturesNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_NS_6vectorIS5_NS3_IS5_EEEEi($agg$result, $prefixHash, $keyImage, $publicKeys, $realOutputIndex) {
 $agg$result = $agg$result | 0;
 $prefixHash = $prefixHash | 0;
 $keyImage = $keyImage | 0;
 $publicKeys = $publicKeys | 0;
 $realOutputIndex = $realOutputIndex | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_$i$i = 0, $__value_$i$i$i$i = 0, $agg$tmp = 0, $agg$tmp1 = 0, $agg$tmp4 = 0, $cmp$i = 0, $k = 0, $key = 0, $signatures = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $signatures = sp + 48 | 0;
 $k = sp + 36 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp1 = sp + 12 | 0;
 $agg$tmp4 = sp;
 HEAP32[$signatures >> 2] = 0;
 $__end_$i$i = $signatures + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $signatures + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 HEAP32[$k >> 2] = 0 | 0;
 HEAP32[$k + 4 >> 2] = 0 | 0;
 HEAP32[$k + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $prefixHash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1, $keyImage);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp4, $publicKeys);
 $0 = ($realOutputIndex | 0) < 0;
 $1 = $0 << 31 >> 31;
 __ZN4Core12Cryptography21prepareRingSignaturesENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEEyRSA_RS7_($agg$tmp, $agg$tmp1, $agg$tmp4, $realOutputIndex, $1, $signatures, $k);
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($agg$tmp4);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 __ZN18PreparedSignaturesC2Ev($agg$result);
 $cmp$i = ($agg$result | 0) == ($signatures | 0);
 if ($cmp$i) {
  $key = $agg$result + 12 | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($key, $k) | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($k);
  __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($signatures);
  STACKTOP = sp;
  return;
 }
 $2 = HEAP32[$signatures >> 2] | 0;
 $3 = HEAP32[$__end_$i$i >> 2] | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6assignIPS6_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS6_NS_15iterator_traitsISC_E9referenceEEE5valueEvE4typeESC_SC_($agg$result, $2, $3);
 $key = $agg$result + 12 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($key, $k) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($k);
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($signatures);
 STACKTOP = sp;
 return;
}

function __Z22prepareRingSignaturesKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_NS_6vectorIS5_NS3_IS5_EEEEiS5_($agg$result, $prefixHash, $keyImage, $publicKeys, $realOutputIndex, $k) {
 $agg$result = $agg$result | 0;
 $prefixHash = $prefixHash | 0;
 $keyImage = $keyImage | 0;
 $publicKeys = $publicKeys | 0;
 $realOutputIndex = $realOutputIndex | 0;
 $k = $k | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_$i$i = 0, $__value_$i$i$i$i = 0, $agg$tmp = 0, $agg$tmp1 = 0, $agg$tmp4 = 0, $agg$tmp7 = 0, $cmp$i = 0, $key = 0, $signatures = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $signatures = sp + 48 | 0;
 $agg$tmp = sp + 36 | 0;
 $agg$tmp1 = sp + 24 | 0;
 $agg$tmp4 = sp + 12 | 0;
 $agg$tmp7 = sp;
 HEAP32[$signatures >> 2] = 0;
 $__end_$i$i = $signatures + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $signatures + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $prefixHash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1, $keyImage);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp4, $publicKeys);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp7, $k);
 $0 = ($realOutputIndex | 0) < 0;
 $1 = $0 << 31 >> 31;
 __ZN4Core12Cryptography21prepareRingSignaturesENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEEyS7_RSA_($agg$tmp, $agg$tmp1, $agg$tmp4, $realOutputIndex, $1, $agg$tmp7, $signatures);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp7);
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($agg$tmp4);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 __ZN18PreparedSignaturesC2Ev($agg$result);
 $cmp$i = ($agg$result | 0) == ($signatures | 0);
 if ($cmp$i) {
  $key = $agg$result + 12 | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($key, $k) | 0;
  __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($signatures);
  STACKTOP = sp;
  return;
 }
 $2 = HEAP32[$signatures >> 2] | 0;
 $3 = HEAP32[$__end_$i$i >> 2] | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6assignIPS6_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS6_NS_15iterator_traitsISC_E9referenceEEE5valueEvE4typeESC_SC_($agg$result, $2, $3);
 $key = $agg$result + 12 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($key, $k) | 0;
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($signatures);
 STACKTOP = sp;
 return;
}

function _wcrtomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $and = 0, $and32 = 0, $and36 = 0, $and49 = 0, $and54 = 0, $and58 = 0, $cmp = 0, $cmp14 = 0, $cmp21 = 0, $cmp24 = 0, $cmp41 = 0;
 var $cmp7 = 0, $conv = 0, $conv12 = 0, $conv17 = 0, $conv19 = 0, $conv29 = 0, $conv34 = 0, $conv38 = 0, $conv46 = 0, $conv51 = 0, $conv56 = 0, $conv60 = 0, $incdec$ptr = 0, $incdec$ptr30 = 0, $incdec$ptr35 = 0, $incdec$ptr47 = 0, $incdec$ptr52 = 0, $incdec$ptr57 = 0, $or = 0, $or$cond = 0;
 var $or18 = 0, $or28 = 0, $or33 = 0, $or37 = 0, $or45 = 0, $or50 = 0, $or55 = 0, $or59 = 0, $retval$0 = 0, $sub40 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s | 0) == (0 | 0);
 do {
  if ($tobool) {
   $retval$0 = 1;
  } else {
   $cmp = $wc >>> 0 < 128;
   if ($cmp) {
    $conv = $wc & 255;
    HEAP8[$s >> 0] = $conv;
    $retval$0 = 1;
    break;
   }
   $0 = HEAP32[576528 >> 2] | 0;
   $tobool2 = ($0 | 0) == (0 | 0);
   if ($tobool2) {
    $1 = $wc & -128;
    $cmp7 = ($1 | 0) == 57216;
    if ($cmp7) {
     $conv12 = $wc & 255;
     HEAP8[$s >> 0] = $conv12;
     $retval$0 = 1;
     break;
    } else {
     HEAP32[144138] = 84;
     $retval$0 = -1;
     break;
    }
   }
   $cmp14 = $wc >>> 0 < 2048;
   if ($cmp14) {
    $2 = $wc >>> 6;
    $or = $2 | 192;
    $conv17 = $or & 255;
    $incdec$ptr = $s + 1 | 0;
    HEAP8[$s >> 0] = $conv17;
    $and = $wc & 63;
    $or18 = $and | 128;
    $conv19 = $or18 & 255;
    HEAP8[$incdec$ptr >> 0] = $conv19;
    $retval$0 = 2;
    break;
   }
   $cmp21 = $wc >>> 0 < 55296;
   $3 = $wc & -8192;
   $cmp24 = ($3 | 0) == 57344;
   $or$cond = $cmp21 | $cmp24;
   if ($or$cond) {
    $4 = $wc >>> 12;
    $or28 = $4 | 224;
    $conv29 = $or28 & 255;
    $incdec$ptr30 = $s + 1 | 0;
    HEAP8[$s >> 0] = $conv29;
    $5 = $wc >>> 6;
    $and32 = $5 & 63;
    $or33 = $and32 | 128;
    $conv34 = $or33 & 255;
    $incdec$ptr35 = $s + 2 | 0;
    HEAP8[$incdec$ptr30 >> 0] = $conv34;
    $and36 = $wc & 63;
    $or37 = $and36 | 128;
    $conv38 = $or37 & 255;
    HEAP8[$incdec$ptr35 >> 0] = $conv38;
    $retval$0 = 3;
    break;
   }
   $sub40 = $wc + -65536 | 0;
   $cmp41 = $sub40 >>> 0 < 1048576;
   if ($cmp41) {
    $6 = $wc >>> 18;
    $or45 = $6 | 240;
    $conv46 = $or45 & 255;
    $incdec$ptr47 = $s + 1 | 0;
    HEAP8[$s >> 0] = $conv46;
    $7 = $wc >>> 12;
    $and49 = $7 & 63;
    $or50 = $and49 | 128;
    $conv51 = $or50 & 255;
    $incdec$ptr52 = $s + 2 | 0;
    HEAP8[$incdec$ptr47 >> 0] = $conv51;
    $8 = $wc >>> 6;
    $and54 = $8 & 63;
    $or55 = $and54 | 128;
    $conv56 = $or55 & 255;
    $incdec$ptr57 = $s + 3 | 0;
    HEAP8[$incdec$ptr52 >> 0] = $conv56;
    $and58 = $wc & 63;
    $or59 = $and58 | 128;
    $conv60 = $or59 & 255;
    HEAP8[$incdec$ptr57 >> 0] = $conv60;
    $retval$0 = 4;
    break;
   } else {
    HEAP32[144138] = 84;
    $retval$0 = -1;
    break;
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZN6Crypto10crypto_ops36generate_deterministic_subwallet_keyERKNS_9SecretKeyEyRS1_($baseSpend, $0, $1, $subSpend) {
 $baseSpend = $baseSpend | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $subSpend = $subSpend | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__end_$i = 0, $__end_$i420 = 0, $add$ptr$i$i459 = 0, $cmp$i$i445 = 0, $h = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i443 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i444 = 0, $subwalletSalt = 0, $tmpKey = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $subwalletSalt = sp + 12 | 0;
 $tmpKey = sp;
 $h = sp + 24 | 0;
 __ZNSt3__26vectorIhNS_9allocatorIhEEEC2Em($subwalletSalt, 8);
 $2 = HEAP32[$subwalletSalt >> 2] | 0;
 $3 = $2;
 $4 = $3;
 HEAP8[$4 >> 0] = $0 & 255;
 HEAP8[$4 + 1 >> 0] = $0 >> 8 & 255;
 HEAP8[$4 + 2 >> 0] = $0 >> 16 & 255;
 HEAP8[$4 + 3 >> 0] = $0 >> 24;
 $5 = $3 + 4 | 0;
 $6 = $5;
 HEAP8[$6 >> 0] = $1 & 255;
 HEAP8[$6 + 1 >> 0] = $1 >> 8 & 255;
 HEAP8[$6 + 2 >> 0] = $1 >> 16 & 255;
 HEAP8[$6 + 3 >> 0] = $1 >> 24;
 __ZNSt3__26vectorIhNS_9allocatorIhEEEC2Em($tmpKey, 40);
 $7 = HEAP32[$tmpKey >> 2] | 0;
 _memmove($7 | 0, $baseSpend | 0, 32) | 0;
 $8 = ($0 | 0) == 0;
 $9 = ($1 | 0) == 0;
 $10 = $8 & $9;
 if ($10) {
  _memmove($subSpend | 0, $7 | 0, 32) | 0;
  _sc_reduce32($subSpend);
  __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($tmpKey);
  __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($subwalletSalt);
  STACKTOP = sp;
  return;
 }
 $__end_$i420 = $subwalletSalt + 4 | 0;
 $__end_$i = $tmpKey + 4 | 0;
 $11 = HEAP32[$__end_$i420 >> 2] | 0;
 $sub$ptr$rhs$cast$i$i443 = $2;
 $sub$ptr$sub$i$i444 = $11 - $sub$ptr$rhs$cast$i$i443 | 0;
 $cmp$i$i445 = ($sub$ptr$sub$i$i444 | 0) == 0;
 $12 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $7;
 $sub$ptr$sub$i = $12 - $sub$ptr$rhs$cast$i | 0;
 $13 = 0;
 $14 = 0;
 while (1) {
  if (!$cmp$i$i445) {
   $add$ptr$i$i459 = $7 + 32 | 0;
   _memmove($add$ptr$i$i459 | 0, $2 | 0, $sub$ptr$sub$i$i444 | 0) | 0;
  }
  __ZN6Crypto4HashC2Ev($h);
  __ZN6Crypto12cn_fast_hashEPKvmRNS_4HashE($7, $sub$ptr$sub$i, $h);
  dest = $7;
  src = $h;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $15 = _i64Add($13 | 0, $14 | 0, 1, 0) | 0;
  $16 = getTempRet0() | 0;
  $17 = $16 >>> 0 < $1 >>> 0;
  $18 = $15 >>> 0 < $0 >>> 0;
  $19 = ($16 | 0) == ($1 | 0);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if ($21) {
   $13 = $15;
   $14 = $16;
  } else {
   break;
  }
 }
 _memmove($subSpend | 0, $7 | 0, 32) | 0;
 _sc_reduce32($subSpend);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($tmpKey);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($subwalletSalt);
 STACKTOP = sp;
 return;
}

function __ZN4Core14toStringVectorIN6Crypto9SecretKeyEEEvRKNSt3__26vectorIT_NS3_9allocatorIS5_EEEERNS4_INS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEENS6_ISF_EEEE($typedVector, $result) {
 $typedVector = $typedVector | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__begin$sroa$0$013 = 0, $__end_$i$i = 0, $__end_$i40 = 0, $__soon_to_be_end$i$i$i$015 = 0, $__value_$i$i$i$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i14 = 0, $cmp$i$i12 = 0, $element = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i$i = 0;
 var $incdec$ptr$i31 = 0, $ref$tmp = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $element = sp + 16 | 0;
 $ref$tmp = sp;
 $__end_$i$i = $result + 4 | 0;
 $0 = HEAP32[$__end_$i$i >> 2] | 0;
 $1 = HEAP32[$result >> 2] | 0;
 $cmp$i$i$i14 = ($1 | 0) == ($0 | 0);
 if (!$cmp$i$i$i14) {
  $__soon_to_be_end$i$i$i$015 = $0;
  while (1) {
   $incdec$ptr$i$i$i = $__soon_to_be_end$i$i$i$015 + -12 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($incdec$ptr$i$i$i);
   $cmp$i$i$i = ($1 | 0) == ($incdec$ptr$i$i$i | 0);
   if ($cmp$i$i$i) {
    break;
   } else {
    $__soon_to_be_end$i$i$i$015 = $incdec$ptr$i$i$i;
   }
  }
 }
 HEAP32[$__end_$i$i >> 2] = $1;
 $__value_$i$i$i$i$i$i$i = $result + 8 | 0;
 $2 = HEAP32[$typedVector >> 2] | 0;
 $__end_$i40 = $typedVector + 4 | 0;
 $3 = HEAP32[$__end_$i40 >> 2] | 0;
 $cmp$i$i12 = ($2 | 0) == ($3 | 0);
 if ($cmp$i$i12) {
  STACKTOP = sp;
  return;
 }
 $__begin$sroa$0$013 = $2;
 while (1) {
  dest = $element;
  src = $__begin$sroa$0$013;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  __ZN6Common8podToHexIN6Crypto9SecretKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($ref$tmp, $element);
  $4 = HEAP32[$__end_$i$i >> 2] | 0;
  $5 = HEAP32[$__value_$i$i$i$i$i$i$i >> 2] | 0;
  $cmp$i = $4 >>> 0 < $5 >>> 0;
  if ($cmp$i) {
   HEAP32[$4 >> 2] = HEAP32[$ref$tmp >> 2] | 0;
   HEAP32[$4 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2] | 0;
   HEAP32[$4 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2] | 0;
   HEAP32[$ref$tmp >> 2] = 0 | 0;
   HEAP32[$ref$tmp + 4 >> 2] = 0 | 0;
   HEAP32[$ref$tmp + 8 >> 2] = 0 | 0;
   $6 = HEAP32[$__end_$i$i >> 2] | 0;
   $incdec$ptr$i31 = $6 + 12 | 0;
   HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i31;
  } else {
   __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($result, $ref$tmp);
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  $incdec$ptr$i = $__begin$sroa$0$013 + 32 | 0;
  $cmp$i$i = ($incdec$ptr$i | 0) == ($3 | 0);
  if ($cmp$i$i) {
   break;
  } else {
   $__begin$sroa$0$013 = $incdec$ptr$i;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN4Core14toStringVectorIN6Crypto4HashEEEvRKNSt3__26vectorIT_NS3_9allocatorIS5_EEEERNS4_INS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEENS6_ISF_EEEE($typedVector, $result) {
 $typedVector = $typedVector | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__begin$sroa$0$013 = 0, $__end_$i$i = 0, $__end_$i40 = 0, $__soon_to_be_end$i$i$i$015 = 0, $__value_$i$i$i$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i14 = 0, $cmp$i$i12 = 0, $element = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i$i = 0;
 var $incdec$ptr$i31 = 0, $ref$tmp = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $element = sp + 16 | 0;
 $ref$tmp = sp;
 $__end_$i$i = $result + 4 | 0;
 $0 = HEAP32[$__end_$i$i >> 2] | 0;
 $1 = HEAP32[$result >> 2] | 0;
 $cmp$i$i$i14 = ($1 | 0) == ($0 | 0);
 if (!$cmp$i$i$i14) {
  $__soon_to_be_end$i$i$i$015 = $0;
  while (1) {
   $incdec$ptr$i$i$i = $__soon_to_be_end$i$i$i$015 + -12 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($incdec$ptr$i$i$i);
   $cmp$i$i$i = ($1 | 0) == ($incdec$ptr$i$i$i | 0);
   if ($cmp$i$i$i) {
    break;
   } else {
    $__soon_to_be_end$i$i$i$015 = $incdec$ptr$i$i$i;
   }
  }
 }
 HEAP32[$__end_$i$i >> 2] = $1;
 $__value_$i$i$i$i$i$i$i = $result + 8 | 0;
 $2 = HEAP32[$typedVector >> 2] | 0;
 $__end_$i40 = $typedVector + 4 | 0;
 $3 = HEAP32[$__end_$i40 >> 2] | 0;
 $cmp$i$i12 = ($2 | 0) == ($3 | 0);
 if ($cmp$i$i12) {
  STACKTOP = sp;
  return;
 }
 $__begin$sroa$0$013 = $2;
 while (1) {
  dest = $element;
  src = $__begin$sroa$0$013;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($ref$tmp, $element);
  $4 = HEAP32[$__end_$i$i >> 2] | 0;
  $5 = HEAP32[$__value_$i$i$i$i$i$i$i >> 2] | 0;
  $cmp$i = $4 >>> 0 < $5 >>> 0;
  if ($cmp$i) {
   HEAP32[$4 >> 2] = HEAP32[$ref$tmp >> 2] | 0;
   HEAP32[$4 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2] | 0;
   HEAP32[$4 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2] | 0;
   HEAP32[$ref$tmp >> 2] = 0 | 0;
   HEAP32[$ref$tmp + 4 >> 2] = 0 | 0;
   HEAP32[$ref$tmp + 8 >> 2] = 0 | 0;
   $6 = HEAP32[$__end_$i$i >> 2] | 0;
   $incdec$ptr$i31 = $6 + 12 | 0;
   HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i31;
  } else {
   __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($result, $ref$tmp);
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  $incdec$ptr$i = $__begin$sroa$0$013 + 32 | 0;
  $cmp$i$i = ($incdec$ptr$i | 0) == ($3 | 0);
  if ($cmp$i$i) {
   break;
  } else {
   $__begin$sroa$0$013 = $incdec$ptr$i;
  }
 }
 STACKTOP = sp;
 return;
}

function _Update_364($state, $data, $databitlen) {
 $state = $state | 0;
 $data = $data | 0;
 $databitlen = $databitlen | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and17 = 0, $arrayidx = 0, $arrayidx49 = 0, $b = 0, $cmp = 0;
 var $conv14 = 0, $conv19 = 0, $ctx1024 = 0, $ctx102441 = 0, $or = 0, $retval$0 = 0, $shl = 0, $shr = 0, $shr11 = 0, $shr2 = 0, $shr21 = 0, $shr5 = 0, $shr9 = 0, $sub = 0, $sub16 = 0, $trunc = 0, $trunc$clear = 0, $trunc27 = 0, $trunc27$clear = 0, $u = 0;
 var $u24 = 0, $u32 = 0, $u4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $b = sp;
 $and = $databitlen & 7;
 $cmp = ($and | 0) == 0;
 if (!$cmp) {
  $shr11 = $databitlen >>> 3;
  $sub = $and ^ 7;
  $shl = 1 << $sub;
  $arrayidx = $data + $shr11 | 0;
  $1 = HEAP8[$arrayidx >> 0] | 0;
  $conv14 = $1 & 255;
  $sub16 = 0 - $shl | 0;
  $and17 = $conv14 & $sub16;
  $or = $and17 | $shl;
  $conv19 = $or & 255;
  HEAP8[$b >> 0] = $conv19;
  $2 = HEAP32[$state >> 2] | 0;
  $shr21 = $2 >>> 8;
  $trunc = $shr21 & 255;
  $trunc$clear = $trunc & 3;
  switch ($trunc$clear << 24 >> 24) {
  case 2:
   {
    $u24 = $state + 8 | 0;
    _Skein_512_Update($u24, $data, $shr11);
    _Skein_512_Update($u24, $b, 1);
    break;
   }
  case 1:
   {
    $u32 = $state + 8 | 0;
    _Skein_256_Update($u32, $data, $shr11);
    _Skein_256_Update($u32, $b, 1);
    break;
   }
  case 0:
   {
    $ctx102441 = $state + 8 | 0;
    _Skein1024_Update($ctx102441, $data, $shr11);
    _Skein1024_Update($ctx102441, $b, 1);
    break;
   }
  default:
   {
    $retval$0 = 1;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
  }
  $arrayidx49 = $state + 24 | 0;
  $3 = $arrayidx49;
  $4 = $3;
  $5 = HEAP32[$4 >> 2] | 0;
  $6 = $3 + 4 | 0;
  $7 = $6;
  $8 = HEAP32[$7 >> 2] | 0;
  $9 = $8 | 8388608;
  $10 = $arrayidx49;
  $11 = $10;
  HEAP32[$11 >> 2] = $5;
  $12 = $10 + 4 | 0;
  $13 = $12;
  HEAP32[$13 >> 2] = $9;
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $0 = HEAP32[$state >> 2] | 0;
 $shr = $0 >>> 8;
 $trunc27 = $shr & 255;
 $trunc27$clear = $trunc27 & 3;
 switch ($trunc27$clear << 24 >> 24) {
 case 2:
  {
   $u = $state + 8 | 0;
   $shr2 = $databitlen >>> 3;
   _Skein_512_Update($u, $data, $shr2);
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
   break;
  }
 case 1:
  {
   $u4 = $state + 8 | 0;
   $shr5 = $databitlen >>> 3;
   _Skein_256_Update($u4, $data, $shr5);
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
   break;
  }
 case 0:
  {
   $ctx1024 = $state + 8 | 0;
   $shr9 = $databitlen >>> 3;
   _Skein1024_Update($ctx1024, $data, $shr9);
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
   break;
  }
 default:
  {
   $retval$0 = 1;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 return 0 | 0;
}

function __ZN4Core12Cryptography21restoreRingSignaturesERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmRKNS1_6vectorIS7_NS5_IS7_EEEEyS9_RSC_($derivation, $output_index, $partialSigningKeys, $0, $1, $k, $signatures) {
 $derivation = $derivation | 0;
 $output_index = $output_index | 0;
 $partialSigningKeys = $partialSigningKeys | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $k = $k | 0;
 $signatures = $signatures | 0;
 var $2 = 0, $__end_$i$i = 0, $__end_$i$i37 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i41 = 0, $l_derivation = 0, $l_k = 0, $l_partialSigningKeys = 0, $l_signatures = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
 $l_derivation = sp + 56 | 0;
 $l_partialSigningKeys = sp + 12 | 0;
 $l_k = sp + 24 | 0;
 $l_signatures = sp;
 __ZN6Crypto13KeyDerivationC2Ev($l_derivation);
 __ZN6Common10podFromHexIN6Crypto13KeyDerivationEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($derivation, $l_derivation);
 HEAP32[$l_partialSigningKeys >> 2] = 0;
 $__end_$i$i = $l_partialSigningKeys + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $l_partialSigningKeys + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 __ZN4Core13toTypedVectorIN6Crypto9SecretKeyEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($partialSigningKeys, $l_partialSigningKeys);
 __ZN6Crypto19EllipticCurveScalarC2Ev($l_k);
 __ZN6Common10podFromHexIN6Crypto19EllipticCurveScalarEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($k, $l_k);
 HEAP32[$l_signatures >> 2] = 0;
 $__end_$i$i37 = $l_signatures + 4 | 0;
 HEAP32[$__end_$i$i37 >> 2] = 0;
 $__value_$i$i$i$i41 = $l_signatures + 8 | 0;
 HEAP32[$__value_$i$i$i$i41 >> 2] = 0;
 __ZN4Core13toTypedVectorIN6Crypto9SignatureEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($signatures, $l_signatures);
 $2 = __ZN6Crypto8Multisig23restore_ring_signaturesERKNS_13KeyDerivationEmRKNSt3__26vectorINS_9SecretKeyENS4_9allocatorIS6_EEEEyRKNS_19EllipticCurveScalarERNS5_INS_9SignatureENS7_ISF_EEEE($l_derivation, $output_index, $l_partialSigningKeys, $0, $1, $l_k, $l_signatures) | 0;
 if (!$2) {
  __ZNSt3__213__vector_baseIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($l_signatures);
  __ZNSt3__213__vector_baseIN6Crypto9SecretKeyENS_9allocatorIS2_EEED2Ev($l_partialSigningKeys);
  STACKTOP = sp;
  return;
 }
 __ZN4Core14toStringVectorIN6Crypto9SignatureEEEvRKNSt3__26vectorIT_NS3_9allocatorIS5_EEEERNS4_INS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEENS6_ISF_EEEE($l_signatures, $signatures);
 __ZNSt3__213__vector_baseIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($l_signatures);
 __ZNSt3__213__vector_baseIN6Crypto9SecretKeyENS_9allocatorIS2_EEED2Ev($l_partialSigningKeys);
 STACKTOP = sp;
 return;
}

function _fe_sub($h, $f, $g) {
 $h = $h | 0;
 $f = $f | 0;
 $g = $g | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $arrayidx1 = 0, $arrayidx11 = 0, $arrayidx12 = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx15 = 0, $arrayidx16 = 0, $arrayidx17 = 0, $arrayidx18 = 0, $arrayidx19 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx30 = 0, $arrayidx31 = 0, $arrayidx32 = 0, $arrayidx33 = 0, $arrayidx34 = 0, $arrayidx35 = 0, $arrayidx36 = 0, $arrayidx37 = 0;
 var $arrayidx38 = 0, $arrayidx4 = 0, $arrayidx5 = 0, $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $sub = 0, $sub20 = 0, $sub21 = 0, $sub22 = 0, $sub23 = 0, $sub24 = 0, $sub25 = 0, $sub26 = 0, $sub27 = 0, $sub28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f >> 2] | 0;
 $arrayidx1 = $f + 4 | 0;
 $1 = HEAP32[$arrayidx1 >> 2] | 0;
 $arrayidx2 = $f + 8 | 0;
 $2 = HEAP32[$arrayidx2 >> 2] | 0;
 $arrayidx3 = $f + 12 | 0;
 $3 = HEAP32[$arrayidx3 >> 2] | 0;
 $arrayidx4 = $f + 16 | 0;
 $4 = HEAP32[$arrayidx4 >> 2] | 0;
 $arrayidx5 = $f + 20 | 0;
 $5 = HEAP32[$arrayidx5 >> 2] | 0;
 $arrayidx6 = $f + 24 | 0;
 $6 = HEAP32[$arrayidx6 >> 2] | 0;
 $arrayidx7 = $f + 28 | 0;
 $7 = HEAP32[$arrayidx7 >> 2] | 0;
 $arrayidx8 = $f + 32 | 0;
 $8 = HEAP32[$arrayidx8 >> 2] | 0;
 $arrayidx9 = $f + 36 | 0;
 $9 = HEAP32[$arrayidx9 >> 2] | 0;
 $10 = HEAP32[$g >> 2] | 0;
 $arrayidx11 = $g + 4 | 0;
 $11 = HEAP32[$arrayidx11 >> 2] | 0;
 $arrayidx12 = $g + 8 | 0;
 $12 = HEAP32[$arrayidx12 >> 2] | 0;
 $arrayidx13 = $g + 12 | 0;
 $13 = HEAP32[$arrayidx13 >> 2] | 0;
 $arrayidx14 = $g + 16 | 0;
 $14 = HEAP32[$arrayidx14 >> 2] | 0;
 $arrayidx15 = $g + 20 | 0;
 $15 = HEAP32[$arrayidx15 >> 2] | 0;
 $arrayidx16 = $g + 24 | 0;
 $16 = HEAP32[$arrayidx16 >> 2] | 0;
 $arrayidx17 = $g + 28 | 0;
 $17 = HEAP32[$arrayidx17 >> 2] | 0;
 $arrayidx18 = $g + 32 | 0;
 $18 = HEAP32[$arrayidx18 >> 2] | 0;
 $arrayidx19 = $g + 36 | 0;
 $19 = HEAP32[$arrayidx19 >> 2] | 0;
 $sub = $0 - $10 | 0;
 $sub20 = $1 - $11 | 0;
 $sub21 = $2 - $12 | 0;
 $sub22 = $3 - $13 | 0;
 $sub23 = $4 - $14 | 0;
 $sub24 = $5 - $15 | 0;
 $sub25 = $6 - $16 | 0;
 $sub26 = $7 - $17 | 0;
 $sub27 = $8 - $18 | 0;
 $sub28 = $9 - $19 | 0;
 HEAP32[$h >> 2] = $sub;
 $arrayidx30 = $h + 4 | 0;
 HEAP32[$arrayidx30 >> 2] = $sub20;
 $arrayidx31 = $h + 8 | 0;
 HEAP32[$arrayidx31 >> 2] = $sub21;
 $arrayidx32 = $h + 12 | 0;
 HEAP32[$arrayidx32 >> 2] = $sub22;
 $arrayidx33 = $h + 16 | 0;
 HEAP32[$arrayidx33 >> 2] = $sub23;
 $arrayidx34 = $h + 20 | 0;
 HEAP32[$arrayidx34 >> 2] = $sub24;
 $arrayidx35 = $h + 24 | 0;
 HEAP32[$arrayidx35 >> 2] = $sub25;
 $arrayidx36 = $h + 28 | 0;
 HEAP32[$arrayidx36 >> 2] = $sub26;
 $arrayidx37 = $h + 32 | 0;
 HEAP32[$arrayidx37 >> 2] = $sub27;
 $arrayidx38 = $h + 36 | 0;
 HEAP32[$arrayidx38 >> 2] = $sub28;
 return;
}

function _fe_add($h, $f, $g) {
 $h = $h | 0;
 $f = $f | 0;
 $g = $g | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add20 = 0, $add21 = 0, $add22 = 0, $add23 = 0, $add24 = 0, $add25 = 0, $add26 = 0, $add27 = 0, $add28 = 0, $arrayidx1 = 0, $arrayidx11 = 0, $arrayidx12 = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx15 = 0, $arrayidx16 = 0, $arrayidx17 = 0, $arrayidx18 = 0, $arrayidx19 = 0;
 var $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx30 = 0, $arrayidx31 = 0, $arrayidx32 = 0, $arrayidx33 = 0, $arrayidx34 = 0, $arrayidx35 = 0, $arrayidx36 = 0, $arrayidx37 = 0, $arrayidx38 = 0, $arrayidx4 = 0, $arrayidx5 = 0, $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f >> 2] | 0;
 $arrayidx1 = $f + 4 | 0;
 $1 = HEAP32[$arrayidx1 >> 2] | 0;
 $arrayidx2 = $f + 8 | 0;
 $2 = HEAP32[$arrayidx2 >> 2] | 0;
 $arrayidx3 = $f + 12 | 0;
 $3 = HEAP32[$arrayidx3 >> 2] | 0;
 $arrayidx4 = $f + 16 | 0;
 $4 = HEAP32[$arrayidx4 >> 2] | 0;
 $arrayidx5 = $f + 20 | 0;
 $5 = HEAP32[$arrayidx5 >> 2] | 0;
 $arrayidx6 = $f + 24 | 0;
 $6 = HEAP32[$arrayidx6 >> 2] | 0;
 $arrayidx7 = $f + 28 | 0;
 $7 = HEAP32[$arrayidx7 >> 2] | 0;
 $arrayidx8 = $f + 32 | 0;
 $8 = HEAP32[$arrayidx8 >> 2] | 0;
 $arrayidx9 = $f + 36 | 0;
 $9 = HEAP32[$arrayidx9 >> 2] | 0;
 $10 = HEAP32[$g >> 2] | 0;
 $arrayidx11 = $g + 4 | 0;
 $11 = HEAP32[$arrayidx11 >> 2] | 0;
 $arrayidx12 = $g + 8 | 0;
 $12 = HEAP32[$arrayidx12 >> 2] | 0;
 $arrayidx13 = $g + 12 | 0;
 $13 = HEAP32[$arrayidx13 >> 2] | 0;
 $arrayidx14 = $g + 16 | 0;
 $14 = HEAP32[$arrayidx14 >> 2] | 0;
 $arrayidx15 = $g + 20 | 0;
 $15 = HEAP32[$arrayidx15 >> 2] | 0;
 $arrayidx16 = $g + 24 | 0;
 $16 = HEAP32[$arrayidx16 >> 2] | 0;
 $arrayidx17 = $g + 28 | 0;
 $17 = HEAP32[$arrayidx17 >> 2] | 0;
 $arrayidx18 = $g + 32 | 0;
 $18 = HEAP32[$arrayidx18 >> 2] | 0;
 $arrayidx19 = $g + 36 | 0;
 $19 = HEAP32[$arrayidx19 >> 2] | 0;
 $add = $10 + $0 | 0;
 $add20 = $11 + $1 | 0;
 $add21 = $12 + $2 | 0;
 $add22 = $13 + $3 | 0;
 $add23 = $14 + $4 | 0;
 $add24 = $15 + $5 | 0;
 $add25 = $16 + $6 | 0;
 $add26 = $17 + $7 | 0;
 $add27 = $18 + $8 | 0;
 $add28 = $19 + $9 | 0;
 HEAP32[$h >> 2] = $add;
 $arrayidx30 = $h + 4 | 0;
 HEAP32[$arrayidx30 >> 2] = $add20;
 $arrayidx31 = $h + 8 | 0;
 HEAP32[$arrayidx31 >> 2] = $add21;
 $arrayidx32 = $h + 12 | 0;
 HEAP32[$arrayidx32 >> 2] = $add22;
 $arrayidx33 = $h + 16 | 0;
 HEAP32[$arrayidx33 >> 2] = $add23;
 $arrayidx34 = $h + 20 | 0;
 HEAP32[$arrayidx34 >> 2] = $add24;
 $arrayidx35 = $h + 24 | 0;
 HEAP32[$arrayidx35 >> 2] = $add25;
 $arrayidx36 = $h + 28 | 0;
 HEAP32[$arrayidx36 >> 2] = $add26;
 $arrayidx37 = $h + 32 | 0;
 HEAP32[$arrayidx37 >> 2] = $add27;
 $arrayidx38 = $h + 36 | 0;
 HEAP32[$arrayidx38 >> 2] = $add28;
 return;
}

function __ZN4Core14toStringVectorIN6Crypto9SignatureEEEvRKNSt3__26vectorIT_NS3_9allocatorIS5_EEEERNS4_INS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEENS6_ISF_EEEE($typedVector, $result) {
 $typedVector = $typedVector | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__begin$sroa$0$014 = 0, $__end_$i$i = 0, $__end_$i40 = 0, $__soon_to_be_end$i$i$i$016 = 0, $__value_$i$i$i$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i15 = 0, $cmp$i$i13 = 0, $element11 = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i$i = 0;
 var $incdec$ptr$i31 = 0, $ref$tmp = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $element11 = sp + 16 | 0;
 $ref$tmp = sp;
 $__end_$i$i = $result + 4 | 0;
 $0 = HEAP32[$__end_$i$i >> 2] | 0;
 $1 = HEAP32[$result >> 2] | 0;
 $cmp$i$i$i15 = ($1 | 0) == ($0 | 0);
 if (!$cmp$i$i$i15) {
  $__soon_to_be_end$i$i$i$016 = $0;
  while (1) {
   $incdec$ptr$i$i$i = $__soon_to_be_end$i$i$i$016 + -12 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($incdec$ptr$i$i$i);
   $cmp$i$i$i = ($1 | 0) == ($incdec$ptr$i$i$i | 0);
   if ($cmp$i$i$i) {
    break;
   } else {
    $__soon_to_be_end$i$i$i$016 = $incdec$ptr$i$i$i;
   }
  }
 }
 HEAP32[$__end_$i$i >> 2] = $1;
 $__value_$i$i$i$i$i$i$i = $result + 8 | 0;
 $2 = HEAP32[$typedVector >> 2] | 0;
 $__end_$i40 = $typedVector + 4 | 0;
 $3 = HEAP32[$__end_$i40 >> 2] | 0;
 $cmp$i$i13 = ($2 | 0) == ($3 | 0);
 if ($cmp$i$i13) {
  STACKTOP = sp;
  return;
 }
 $__begin$sroa$0$014 = $2;
 while (1) {
  dest = $element11;
  src = $__begin$sroa$0$014;
  stop = dest + 64 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  __ZN6Common5toHexEPKvy($ref$tmp, $element11, 64, 0);
  $4 = HEAP32[$__end_$i$i >> 2] | 0;
  $5 = HEAP32[$__value_$i$i$i$i$i$i$i >> 2] | 0;
  $cmp$i = $4 >>> 0 < $5 >>> 0;
  if ($cmp$i) {
   HEAP32[$4 >> 2] = HEAP32[$ref$tmp >> 2] | 0;
   HEAP32[$4 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2] | 0;
   HEAP32[$4 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2] | 0;
   HEAP32[$ref$tmp >> 2] = 0 | 0;
   HEAP32[$ref$tmp + 4 >> 2] = 0 | 0;
   HEAP32[$ref$tmp + 8 >> 2] = 0 | 0;
   $6 = HEAP32[$__end_$i$i >> 2] | 0;
   $incdec$ptr$i31 = $6 + 12 | 0;
   HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i31;
  } else {
   __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($result, $ref$tmp);
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  $incdec$ptr$i = $__begin$sroa$0$014 + 64 | 0;
  $cmp$i$i = ($incdec$ptr$i | 0) == ($3 | 0);
  if ($cmp$i$i) {
   break;
  } else {
   $__begin$sroa$0$014 = $incdec$ptr$i;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography18checkRingSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEESA_($prefixHash, $keyImage, $publicKeys, $signatures) {
 $prefixHash = $prefixHash | 0;
 $keyImage = $keyImage | 0;
 $publicKeys = $publicKeys | 0;
 $signatures = $signatures | 0;
 var $__end_$i$i = 0, $__end_$i$i40 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i44 = 0, $agg$tmp = 0, $agg$tmp5 = 0, $call10 = 0, $l_keyImage = 0, $l_prefixHash = 0, $l_publicKeys = 0, $l_signatures = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
 $l_prefixHash = sp + 80 | 0;
 $l_keyImage = sp + 48 | 0;
 $l_publicKeys = sp + 36 | 0;
 $l_signatures = sp + 24 | 0;
 $agg$tmp = sp + 12 | 0;
 $agg$tmp5 = sp;
 dest = $l_prefixHash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($l_prefixHash);
 __ZN6Common10podFromHexIN6Crypto4HashEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($prefixHash, $l_prefixHash);
 __ZN6Crypto8KeyImageC2Ev($l_keyImage);
 __ZN6Common10podFromHexIN6Crypto8KeyImageEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($keyImage, $l_keyImage);
 HEAP32[$l_publicKeys >> 2] = 0;
 $__end_$i$i = $l_publicKeys + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $l_publicKeys + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 __ZN4Core13toTypedVectorIN6Crypto9PublicKeyEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($publicKeys, $l_publicKeys);
 HEAP32[$l_signatures >> 2] = 0;
 $__end_$i$i40 = $l_signatures + 4 | 0;
 HEAP32[$__end_$i$i40 >> 2] = 0;
 $__value_$i$i$i$i44 = $l_signatures + 8 | 0;
 HEAP32[$__value_$i$i$i$i44 >> 2] = 0;
 __ZN4Core13toTypedVectorIN6Crypto9SignatureEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($signatures, $l_signatures);
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEEC2ERKS5_($agg$tmp, $l_publicKeys);
 __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEEC2ERKS5_($agg$tmp5, $l_signatures);
 $call10 = __ZN6Crypto10crypto_ops18checkRingSignatureERKNS_4HashERKNS_8KeyImageENSt3__26vectorINS_9PublicKeyENS7_9allocatorIS9_EEEENS8_INS_9SignatureENSA_ISD_EEEE($l_prefixHash, $l_keyImage, $agg$tmp, $agg$tmp5) | 0;
 __ZNSt3__213__vector_baseIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($agg$tmp5);
 __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($agg$tmp);
 __ZNSt3__213__vector_baseIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($l_signatures);
 __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($l_publicKeys);
 STACKTOP = sp;
 return $call10 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $__cap_$i = 0, $__size_$i = 0, $__size_$i$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr33 = 0, $add$ptr34 = 0, $add$ptr36 = 0, $add$ptr37 = 0, $add48 = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0;
 var $cmp17 = 0, $cmp23 = 0, $cmp30 = 0, $cmp41 = 0, $cmp5 = 0, $cond$i = 0, $cond40 = 0, $mul = 0, $or$i = 0, $phitmp = 0, $sub2 = 0, $sub28 = 0, $sub29 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub2 = -18 - $__old_cap | 0;
 $cmp = $sub2 >>> 0 < $__delta_cap >>> 0;
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $1 = HEAP32[$this >> 2] | 0;
  $cond$i = $1;
 } else {
  $cond$i = $this;
 }
 $cmp5 = $__old_cap >>> 0 < 2147483623;
 if ($cmp5) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = $add >>> 0 < $mul >>> 0;
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = $$sroa$speculated >>> 0 < 11;
  $add$i$i = $$sroa$speculated + 16 | 0;
  $and$i$i = $add$i$i & -16;
  $phitmp = $cmp$i ? 11 : $and$i$i;
  $cond40 = $phitmp;
 } else {
  $cond40 = -17;
 }
 $call$i$i$i = __Znwm($cond40) | 0;
 $cmp17 = ($__n_copy | 0) == 0;
 if (!$cmp17) {
  __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i, $cond$i, $__n_copy) | 0;
 }
 $cmp23 = ($__n_add | 0) == 0;
 if (!$cmp23) {
  $add$ptr = $call$i$i$i + $__n_copy | 0;
  __ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr, $__p_new_stuff, $__n_add) | 0;
 }
 $sub28 = $__old_sz - $__n_del | 0;
 $sub29 = $sub28 - $__n_copy | 0;
 $cmp30 = ($sub29 | 0) == 0;
 if (!$cmp30) {
  $add$ptr33 = $call$i$i$i + $__n_copy | 0;
  $add$ptr34 = $add$ptr33 + $__n_add | 0;
  $add$ptr36 = $cond$i + $__n_copy | 0;
  $add$ptr37 = $add$ptr36 + $__n_del | 0;
  __ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr34, $add$ptr37, $sub29) | 0;
 }
 $cmp41 = ($__old_cap | 0) == 10;
 if (!$cmp41) {
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i);
 }
 HEAP32[$this >> 2] = $call$i$i$i;
 $or$i = $cond40 | -2147483648;
 $__cap_$i = $this + 8 | 0;
 HEAP32[$__cap_$i >> 2] = $or$i;
 $add48 = $sub28 + $__n_add | 0;
 $__size_$i = $this + 4 | 0;
 HEAP32[$__size_$i >> 2] = $add48;
 $arrayidx = $call$i$i$i + $add48 | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx, 0);
 return;
}

function ___vfprintf_internal($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $and11 = 0, $and36 = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call = 0, $call21 = 0, $call2133 = 0, $cmp = 0, $cmp7 = 0;
 var $internal_buf = 0, $lock = 0, $mode = 0, $nl_arg = 0, $nl_type = 0, $or = 0, $ret$1 = 0, $retval$0 = 0, $spec$select = 0, $spec$select32 = 0, $tobool = 0, $tobool22 = 0, $tobool26 = 0, $tobool37 = 0, $vacopy_currentptr = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224 | 0);
 $ap2 = sp + 208 | 0;
 $nl_type = sp + 160 | 0;
 $nl_arg = sp + 80 | 0;
 $internal_buf = sp;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $vacopy_currentptr = HEAP32[$ap >> 2] | 0;
 HEAP32[$ap2 >> 2] = $vacopy_currentptr;
 $call = _printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0;
 $cmp = ($call | 0) < 0;
 if ($cmp) {
  $retval$0 = -1;
 } else {
  $lock = $f + 76 | 0;
  $0 = HEAP32[$lock >> 2] | 0;
  $1 = HEAP32[$f >> 2] | 0;
  $and = $1 & 32;
  $mode = $f + 74 | 0;
  $2 = HEAP8[$mode >> 0] | 0;
  $cmp7 = $2 << 24 >> 24 < 1;
  if ($cmp7) {
   $and11 = $1 & -33;
   HEAP32[$f >> 2] = $and11;
  }
  $buf_size = $f + 48 | 0;
  $3 = HEAP32[$buf_size >> 2] | 0;
  $tobool = ($3 | 0) == 0;
  if ($tobool) {
   $buf = $f + 44 | 0;
   $4 = HEAP32[$buf >> 2] | 0;
   HEAP32[$buf >> 2] = $internal_buf;
   $wbase = $f + 28 | 0;
   HEAP32[$wbase >> 2] = $internal_buf;
   $wpos = $f + 20 | 0;
   HEAP32[$wpos >> 2] = $internal_buf;
   HEAP32[$buf_size >> 2] = 80;
   $add$ptr = $internal_buf + 80 | 0;
   $wend = $f + 16 | 0;
   HEAP32[$wend >> 2] = $add$ptr;
   $call21 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
   $tobool22 = ($4 | 0) == (0 | 0);
   if ($tobool22) {
    $ret$1 = $call21;
   } else {
    $write = $f + 36 | 0;
    $5 = HEAP32[$write >> 2] | 0;
    FUNCTION_TABLE_iiii[$5 & 255]($f, 0, 0) | 0;
    $6 = HEAP32[$wpos >> 2] | 0;
    $tobool26 = ($6 | 0) == (0 | 0);
    $spec$select = $tobool26 ? -1 : $call21;
    HEAP32[$buf >> 2] = $4;
    HEAP32[$buf_size >> 2] = 0;
    HEAP32[$wend >> 2] = 0;
    HEAP32[$wbase >> 2] = 0;
    HEAP32[$wpos >> 2] = 0;
    $ret$1 = $spec$select;
   }
  } else {
   $call2133 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
   $ret$1 = $call2133;
  }
  $7 = HEAP32[$f >> 2] | 0;
  $and36 = $7 & 32;
  $tobool37 = ($and36 | 0) == 0;
  $spec$select32 = $tobool37 ? $ret$1 : -1;
  $or = $7 | $and;
  HEAP32[$f >> 2] = $or;
  $retval$0 = $spec$select32;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _argon2_ctx_mem($context) {
 $context = $context | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $and = 0, $and$lobit = 0, $call = 0, $call31 = 0, $call36 = 0, $cmp = 0, $cmp25 = 0, $cmp32 = 0, $cmp37 = 0, $flags = 0, $instance = 0;
 var $keep_memory = 0, $lane_length = 0, $lanes = 0, $lanes18 = 0, $m_cost = 0, $memory_blocks = 0, $memory_blocks15 = 0, $mul = 0, $passes = 0, $print_internals = 0, $retval$0 = 0, $segment_length = 0, $segment_length16 = 0, $t_cost = 0, $threads = 0, $threads19 = 0, $type20 = 0, $version = 0, $version13 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $memory_blocks = sp + 52 | 0;
 $segment_length = sp + 48 | 0;
 $instance = sp;
 $call = _validate_inputs($context) | 0;
 $cmp = ($call | 0) == 0;
 if (!$cmp) {
  $retval$0 = $call;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $m_cost = $context + 44 | 0;
 $0 = HEAP32[$m_cost >> 2] | 0;
 $lanes = $context + 48 | 0;
 $1 = HEAP32[$lanes >> 2] | 0;
 _argon2_compute_memory_blocks($memory_blocks, $segment_length, $0, $1);
 $$pre = HEAP32[$memory_blocks >> 2] | 0;
 $version = $context + 56 | 0;
 $2 = HEAP32[$version >> 2] | 0;
 $version13 = $instance + 4 | 0;
 HEAP32[$version13 >> 2] = $2;
 HEAP32[$instance >> 2] = 0;
 $t_cost = $context + 40 | 0;
 $3 = HEAP32[$t_cost >> 2] | 0;
 $passes = $instance + 8 | 0;
 HEAP32[$passes >> 2] = $3;
 $memory_blocks15 = $instance + 12 | 0;
 HEAP32[$memory_blocks15 >> 2] = $$pre;
 $4 = HEAP32[$segment_length >> 2] | 0;
 $segment_length16 = $instance + 16 | 0;
 HEAP32[$segment_length16 >> 2] = $4;
 $mul = $4 << 2;
 $lane_length = $instance + 20 | 0;
 HEAP32[$lane_length >> 2] = $mul;
 $5 = HEAP32[$lanes >> 2] | 0;
 $lanes18 = $instance + 24 | 0;
 HEAP32[$lanes18 >> 2] = $5;
 $threads = $context + 52 | 0;
 $6 = HEAP32[$threads >> 2] | 0;
 $threads19 = $instance + 28 | 0;
 HEAP32[$threads19 >> 2] = $6;
 $type20 = $instance + 32 | 0;
 HEAP32[$type20 >> 2] = 2;
 $flags = $context + 68 | 0;
 $7 = HEAP32[$flags >> 2] | 0;
 $and = $7 >>> 3;
 $and$lobit = $and & 1;
 $print_internals = $instance + 36 | 0;
 HEAP32[$print_internals >> 2] = $and$lobit;
 $keep_memory = $instance + 40 | 0;
 HEAP32[$keep_memory >> 2] = 0;
 $cmp25 = $6 >>> 0 > $5 >>> 0;
 if ($cmp25) {
  HEAP32[$threads19 >> 2] = $5;
 }
 $call31 = _initialize($instance, $context) | 0;
 $cmp32 = ($call31 | 0) == 0;
 if (!$cmp32) {
  $retval$0 = $call31;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $call36 = _fill_memory_blocks($instance) | 0;
 $cmp37 = ($call36 | 0) == 0;
 if (!$cmp37) {
  $retval$0 = $call36;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 _finalize($context, $instance);
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($agg$result, $text) {
 $agg$result = $agg$result | 0;
 $text = $text | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__end_$i = 0, $__size_$i$i = 0, $__size_$i23$i = 0, $add$ptr$i = 0, $add$ptr$i204 = 0, $and = 0, $and$i$i = 0, $arrayidx$i = 0, $call15 = 0, $call8 = 0, $cmp = 0, $cmp311 = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i$i203 = 0, $conv$i$i = 0, $conv12 = 0, $conv16 = 0, $conv17 = 0;
 var $conv4 = 0, $conv9 = 0, $exception = 0, $or = 0, $shl10 = 0, $shr = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i185 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i$i = $text + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $conv$i$i = $0 & 255;
 $and$i$i = $conv$i$i & 128;
 $tobool$i$i = ($and$i$i | 0) == 0;
 $__size_$i23$i = $text + 4 | 0;
 $1 = HEAP32[$__size_$i23$i >> 2] | 0;
 $cond$i = $tobool$i$i ? $conv$i$i : $1;
 $and = $cond$i & 1;
 $cmp = ($and | 0) == 0;
 if (!$cmp) {
  $exception = ___cxa_allocate_exception(8) | 0;
  __ZNSt13runtime_errorC2EPKc($exception, 46150);
  ___cxa_throw($exception | 0, 42656 | 0, 26 | 0);
 }
 $shr = $cond$i >>> 1;
 __ZNSt3__26vectorIhNS_9allocatorIhEEEC2Em($agg$result, $shr);
 $__end_$i = $agg$result + 4 | 0;
 $2 = HEAP32[$__end_$i >> 2] | 0;
 $3 = HEAP32[$agg$result >> 2] | 0;
 $cmp311 = ($2 | 0) == ($3 | 0);
 $4 = $3;
 if ($cmp311) {
  return;
 }
 $12 = 0;
 $5 = 0;
 while (1) {
  $conv4 = $5 << 1;
  $6 = HEAP8[$__size_$i$i >> 0] | 0;
  $tobool$i$i$i$i = $6 << 24 >> 24 < 0;
  $7 = HEAP32[$text >> 2] | 0;
  $cond$i$i$i = $tobool$i$i$i$i ? $7 : $text;
  $add$ptr$i = $cond$i$i$i + $conv4 | 0;
  $8 = HEAP8[$add$ptr$i >> 0] | 0;
  $call8 = __ZN6Common7fromHexEc($8) | 0;
  $conv12 = $conv4 | 1;
  $9 = HEAP8[$__size_$i$i >> 0] | 0;
  $tobool$i$i$i$i185 = $9 << 24 >> 24 < 0;
  $10 = HEAP32[$text >> 2] | 0;
  $cond$i$i$i203 = $tobool$i$i$i$i185 ? $10 : $text;
  $add$ptr$i204 = $cond$i$i$i203 + $conv12 | 0;
  $11 = HEAP8[$add$ptr$i204 >> 0] | 0;
  $call15 = __ZN6Common7fromHexEc($11) | 0;
  $conv9 = $call8 & 255;
  $shl10 = $conv9 << 4;
  $conv16 = $call15 & 255;
  $or = $shl10 | $conv16;
  $conv17 = $or & 255;
  $arrayidx$i = $4 + $5 | 0;
  HEAP8[$arrayidx$i >> 0] = $conv17;
  $13 = _i64Add($5 | 0, $12 | 0, 1, 0) | 0;
  $14 = getTempRet0() | 0;
  $15 = HEAP32[$__end_$i >> 2] | 0;
  $sub$ptr$sub$i = $15 - $3 | 0;
  $16 = $14 >>> 0 < 0;
  $17 = $13 >>> 0 < $sub$ptr$sub$i >>> 0;
  $18 = ($14 | 0) == 0;
  $19 = $18 & $17;
  $20 = $16 | $19;
  if ($20) {
   $12 = $14;
   $5 = $13;
  } else {
   break;
  }
 }
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info, $dst_ptr, $current_ptr, $path_below) {
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $cmp = 0, $cmp10 = 0, $cmp13 = 0, $cmp18 = 0, $cmp2 = 0, $cmp21 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $number_of_dst_type = 0;
 var $number_of_dst_type17 = 0, $number_to_static_ptr = 0, $number_to_static_ptr26 = 0, $or$cond = 0, $or$cond19 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr12 = 0, $search_done = 0, $search_done23 = 0, $search_done27 = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $found_any_static_type = $info + 53 | 0;
 HEAP8[$found_any_static_type >> 0] = 1;
 $static_ptr = $info + 4 | 0;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $cmp = ($0 | 0) == ($current_ptr | 0);
 do {
  if ($cmp) {
   $found_our_static_ptr = $info + 52 | 0;
   HEAP8[$found_our_static_ptr >> 0] = 1;
   $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
   $1 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
   $cmp2 = ($1 | 0) == (0 | 0);
   if ($cmp2) {
    HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $dst_ptr;
    $path_dst_ptr_to_static_ptr = $info + 24 | 0;
    HEAP32[$path_dst_ptr_to_static_ptr >> 2] = $path_below;
    $number_to_static_ptr = $info + 36 | 0;
    HEAP32[$number_to_static_ptr >> 2] = 1;
    $number_of_dst_type = $info + 48 | 0;
    $2 = HEAP32[$number_of_dst_type >> 2] | 0;
    $cmp5 = ($2 | 0) == 1;
    $cmp7 = ($path_below | 0) == 1;
    $or$cond = $cmp7 & $cmp5;
    if (!$or$cond) {
     break;
    }
    $search_done = $info + 54 | 0;
    HEAP8[$search_done >> 0] = 1;
    break;
   }
   $cmp10 = ($1 | 0) == ($dst_ptr | 0);
   if (!$cmp10) {
    $number_to_static_ptr26 = $info + 36 | 0;
    $6 = HEAP32[$number_to_static_ptr26 >> 2] | 0;
    $add = $6 + 1 | 0;
    HEAP32[$number_to_static_ptr26 >> 2] = $add;
    $search_done27 = $info + 54 | 0;
    HEAP8[$search_done27 >> 0] = 1;
    break;
   }
   $path_dst_ptr_to_static_ptr12 = $info + 24 | 0;
   $3 = HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] | 0;
   $cmp13 = ($3 | 0) == 2;
   if ($cmp13) {
    HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] = $path_below;
    $5 = $path_below;
   } else {
    $5 = $3;
   }
   $number_of_dst_type17 = $info + 48 | 0;
   $4 = HEAP32[$number_of_dst_type17 >> 2] | 0;
   $cmp18 = ($4 | 0) == 1;
   $cmp21 = ($5 | 0) == 1;
   $or$cond19 = $cmp21 & $cmp18;
   if ($or$cond19) {
    $search_done23 = $info + 54 | 0;
    HEAP8[$search_done23 >> 0] = 1;
   }
  }
 } while (0);
 return;
}

function _ge_double_scalarmult_precomp_vartime($r, $a, $A, $b, $Bi) {
 $r = $r | 0;
 $a = $a | 0;
 $A = $A | 0;
 $b = $b | 0;
 $Bi = $Bi | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Ai = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx17 = 0, $arrayidx26 = 0, $arrayidx29 = 0, $arrayidx3 = 0, $arrayidx37 = 0, $arrayidx48 = 0, $aslide = 0;
 var $bslide = 0, $cmp = 0, $cmp12 = 0, $cmp20 = 0, $cmp31 = 0, $cmp41 = 0, $cmp7 = 0, $cmp717 = 0, $dec = 0, $dec52 = 0, $div25 = 0, $div47 = 0, $i$019 = 0, $i$118 = 0, $t = 0, $tobool = 0, $tobool5 = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2112 | 0);
 $aslide = sp + 1536 | 0;
 $bslide = sp + 1280 | 0;
 $Ai = sp;
 $t = sp + 1952 | 0;
 $u = sp + 1792 | 0;
 _slide($aslide, $a);
 _slide($bslide, $b);
 _ge_dsm_precomp($Ai, $A);
 _ge_p2_0($r);
 $i$019 = 255;
 while (1) {
  $arrayidx = $aslide + $i$019 | 0;
  $0 = HEAP8[$arrayidx >> 0] | 0;
  $tobool = $0 << 24 >> 24 == 0;
  if (!$tobool) {
   break;
  }
  $arrayidx3 = $bslide + $i$019 | 0;
  $1 = HEAP8[$arrayidx3 >> 0] | 0;
  $tobool5 = $1 << 24 >> 24 == 0;
  if (!$tobool5) {
   break;
  }
  $dec = $i$019 + -1 | 0;
  $cmp = ($i$019 | 0) == 0;
  if ($cmp) {
   label = 16;
   break;
  } else {
   $i$019 = $dec;
  }
 }
 if ((label | 0) == 16) {
  STACKTOP = sp;
  return;
 }
 $cmp717 = ($i$019 | 0) > -1;
 if (!$cmp717) {
  STACKTOP = sp;
  return;
 }
 $i$118 = $i$019;
 while (1) {
  _ge_p2_dbl($t, $r);
  $arrayidx10 = $aslide + $i$118 | 0;
  $2 = HEAP8[$arrayidx10 >> 0] | 0;
  $cmp12 = $2 << 24 >> 24 > 0;
  if ($cmp12) {
   _ge_p1p1_to_p3($u, $t);
   $3 = ($2 & 255) >>> 1;
   $4 = $3 & 255;
   $arrayidx17 = $Ai + ($4 * 160 | 0) | 0;
   _ge_add($t, $u, $arrayidx17);
  } else {
   $cmp20 = $2 << 24 >> 24 < 0;
   if ($cmp20) {
    _ge_p1p1_to_p3($u, $t);
    $5 = ($2 << 24 >> 24) / -2 & -1;
    $div25 = $5 << 24 >> 24;
    $arrayidx26 = $Ai + ($div25 * 160 | 0) | 0;
    _ge_sub($t, $u, $arrayidx26);
   }
  }
  $arrayidx29 = $bslide + $i$118 | 0;
  $6 = HEAP8[$arrayidx29 >> 0] | 0;
  $cmp31 = $6 << 24 >> 24 > 0;
  if ($cmp31) {
   _ge_p1p1_to_p3($u, $t);
   $7 = ($6 & 255) >>> 1;
   $8 = $7 & 255;
   $arrayidx37 = $Bi + ($8 * 160 | 0) | 0;
   _ge_add($t, $u, $arrayidx37);
  } else {
   $cmp41 = $6 << 24 >> 24 < 0;
   if ($cmp41) {
    _ge_p1p1_to_p3($u, $t);
    $9 = ($6 << 24 >> 24) / -2 & -1;
    $div47 = $9 << 24 >> 24;
    $arrayidx48 = $Bi + ($div47 * 160 | 0) | 0;
    _ge_sub($t, $u, $arrayidx48);
   }
  }
  _ge_p1p1_to_p2($r, $t);
  $dec52 = $i$118 + -1 | 0;
  $cmp7 = ($i$118 | 0) > 0;
  if ($cmp7) {
   $i$118 = $dec52;
  } else {
   break;
  }
 }
 STACKTOP = sp;
 return;
}

function _ge_double_scalarmult_base_vartime($r, $a, $A, $b) {
 $r = $r | 0;
 $a = $a | 0;
 $A = $A | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Ai = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx17 = 0, $arrayidx26 = 0, $arrayidx29 = 0, $arrayidx3 = 0, $arrayidx37 = 0, $arrayidx48 = 0, $aslide = 0;
 var $bslide = 0, $cmp = 0, $cmp12 = 0, $cmp20 = 0, $cmp31 = 0, $cmp41 = 0, $cmp7 = 0, $cmp716 = 0, $dec = 0, $dec52 = 0, $div25 = 0, $div47 = 0, $i$018 = 0, $i$117 = 0, $t = 0, $tobool = 0, $tobool5 = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2112 | 0);
 $aslide = sp + 1536 | 0;
 $bslide = sp + 1280 | 0;
 $Ai = sp;
 $t = sp + 1952 | 0;
 $u = sp + 1792 | 0;
 _slide($aslide, $a);
 _slide($bslide, $b);
 _ge_dsm_precomp($Ai, $A);
 _ge_p2_0($r);
 $i$018 = 255;
 while (1) {
  $arrayidx = $aslide + $i$018 | 0;
  $0 = HEAP8[$arrayidx >> 0] | 0;
  $tobool = $0 << 24 >> 24 == 0;
  if (!$tobool) {
   break;
  }
  $arrayidx3 = $bslide + $i$018 | 0;
  $1 = HEAP8[$arrayidx3 >> 0] | 0;
  $tobool5 = $1 << 24 >> 24 == 0;
  if (!$tobool5) {
   break;
  }
  $dec = $i$018 + -1 | 0;
  $cmp = ($i$018 | 0) == 0;
  if ($cmp) {
   label = 16;
   break;
  } else {
   $i$018 = $dec;
  }
 }
 if ((label | 0) == 16) {
  STACKTOP = sp;
  return;
 }
 $cmp716 = ($i$018 | 0) > -1;
 if (!$cmp716) {
  STACKTOP = sp;
  return;
 }
 $i$117 = $i$018;
 while (1) {
  _ge_p2_dbl($t, $r);
  $arrayidx10 = $aslide + $i$117 | 0;
  $2 = HEAP8[$arrayidx10 >> 0] | 0;
  $cmp12 = $2 << 24 >> 24 > 0;
  if ($cmp12) {
   _ge_p1p1_to_p3($u, $t);
   $3 = ($2 & 255) >>> 1;
   $4 = $3 & 255;
   $arrayidx17 = $Ai + ($4 * 160 | 0) | 0;
   _ge_add($t, $u, $arrayidx17);
  } else {
   $cmp20 = $2 << 24 >> 24 < 0;
   if ($cmp20) {
    _ge_p1p1_to_p3($u, $t);
    $5 = ($2 << 24 >> 24) / -2 & -1;
    $div25 = $5 << 24 >> 24;
    $arrayidx26 = $Ai + ($div25 * 160 | 0) | 0;
    _ge_sub($t, $u, $arrayidx26);
   }
  }
  $arrayidx29 = $bslide + $i$117 | 0;
  $6 = HEAP8[$arrayidx29 >> 0] | 0;
  $cmp31 = $6 << 24 >> 24 > 0;
  if ($cmp31) {
   _ge_p1p1_to_p3($u, $t);
   $7 = ($6 & 255) >>> 1;
   $8 = $7 & 255;
   $arrayidx37 = 31232 + ($8 * 120 | 0) | 0;
   _ge_madd($t, $u, $arrayidx37);
  } else {
   $cmp41 = $6 << 24 >> 24 < 0;
   if ($cmp41) {
    _ge_p1p1_to_p3($u, $t);
    $9 = ($6 << 24 >> 24) / -2 & -1;
    $div47 = $9 << 24 >> 24;
    $arrayidx48 = 31232 + ($div47 * 120 | 0) | 0;
    _ge_msub($t, $u, $arrayidx48);
   }
  }
  _ge_p1p1_to_p2($r, $t);
  $dec52 = $i$117 + -1 | 0;
  $cmp7 = ($i$117 | 0) > 0;
  if ($cmp7) {
   $i$117 = $dec52;
  } else {
   break;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal7InvokerINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJS9_mSB_iS9_SB_EE6invokeEPFSB_S9_mSB_iS9_SB_EPNS0_11BindingTypeIS9_vEUt_EmPSB_iSI_SJ_($fn, $args, $args1, $args3, $args5, $args7, $args9) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 $args9 = $args9 | 0;
 var $agg$tmp = 0, $agg$tmp11 = 0, $agg$tmp18 = 0, $agg$tmp20 = 0, $call = 0, $call13 = 0, $call17 = 0, $call23 = 0, $call29 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $ref$tmp = sp + 48 | 0;
 $agg$tmp = sp + 36 | 0;
 $agg$tmp11 = sp + 24 | 0;
 $agg$tmp18 = sp + 12 | 0;
 $agg$tmp20 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 $call = __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($args1) | 0;
 $call13 = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($args3) | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp11, $call13);
 $call17 = __ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($args5) | 0;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp18, $args7);
 $call23 = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($args9) | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp20, $call23);
 FUNCTION_TABLE_viiiiiii[$fn & 255]($ref$tmp, $agg$tmp, $call, $agg$tmp11, $call17, $agg$tmp18, $agg$tmp20);
 $call29 = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE10toWireTypeEOSB_($ref$tmp) | 0;
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ref$tmp);
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($agg$tmp20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp18);
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($agg$tmp11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call29 | 0;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$pre = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr27 = 0, $arrayidx = 0, $call = 0, $call16 = 0, $call4 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp17 = 0, $cmp6 = 0, $i$033 = 0, $i$1 = 0, $l$addr$0 = 0, $l$addr$1 = 0, $lbf = 0, $or$cond = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, $tobool932 = 0, $wend = 0, $wpos = 0;
 var $write = 0, $write15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = $f + 16 | 0;
 $0 = HEAP32[$wend >> 2] | 0;
 $tobool = ($0 | 0) == (0 | 0);
 if ($tobool) {
  $call = ___towrite($f) | 0;
  $tobool1 = ($call | 0) == 0;
  if ($tobool1) {
   $$pre = HEAP32[$wend >> 2] | 0;
   $3 = $$pre;
   label = 5;
  } else {
   $retval$1 = 0;
  }
 } else {
  $1 = $0;
  $3 = $1;
  label = 5;
 }
 L5 : do {
  if ((label | 0) == 5) {
   $wpos = $f + 20 | 0;
   $2 = HEAP32[$wpos >> 2] | 0;
   $sub$ptr$sub = $3 - $2 | 0;
   $cmp = $sub$ptr$sub >>> 0 < $l >>> 0;
   $4 = $2;
   if ($cmp) {
    $write = $f + 36 | 0;
    $5 = HEAP32[$write >> 2] | 0;
    $call4 = FUNCTION_TABLE_iiii[$5 & 255]($f, $s, $l) | 0;
    $retval$1 = $call4;
    break;
   }
   $lbf = $f + 75 | 0;
   $6 = HEAP8[$lbf >> 0] | 0;
   $cmp6 = $6 << 24 >> 24 < 0;
   $tobool932 = ($l | 0) == 0;
   $or$cond = $tobool932 | $cmp6;
   L10 : do {
    if ($or$cond) {
     $9 = $4;
     $i$1 = 0;
     $l$addr$1 = $l;
     $s$addr$1 = $s;
    } else {
     $i$033 = $l;
     while (1) {
      $sub = $i$033 + -1 | 0;
      $arrayidx = $s + $sub | 0;
      $7 = HEAP8[$arrayidx >> 0] | 0;
      $cmp11 = $7 << 24 >> 24 == 10;
      if ($cmp11) {
       break;
      }
      $tobool9 = ($sub | 0) == 0;
      if ($tobool9) {
       $9 = $4;
       $i$1 = 0;
       $l$addr$1 = $l;
       $s$addr$1 = $s;
       break L10;
      } else {
       $i$033 = $sub;
      }
     }
     $write15 = $f + 36 | 0;
     $8 = HEAP32[$write15 >> 2] | 0;
     $call16 = FUNCTION_TABLE_iiii[$8 & 255]($f, $s, $i$033) | 0;
     $cmp17 = $call16 >>> 0 < $i$033 >>> 0;
     if ($cmp17) {
      $retval$1 = $call16;
      break L5;
     }
     $add$ptr = $s + $i$033 | 0;
     $l$addr$0 = $l - $i$033 | 0;
     $$pre35 = HEAP32[$wpos >> 2] | 0;
     $9 = $$pre35;
     $i$1 = $i$033;
     $l$addr$1 = $l$addr$0;
     $s$addr$1 = $add$ptr;
    }
   } while (0);
   _memcpy($9 | 0, $s$addr$1 | 0, $l$addr$1 | 0) | 0;
   $10 = HEAP32[$wpos >> 2] | 0;
   $add$ptr27 = $10 + $l$addr$1 | 0;
   HEAP32[$wpos >> 2] = $add$ptr27;
   $add = $i$1 + $l$addr$1 | 0;
   $retval$1 = $add;
  }
 } while (0);
 return $retval$1 | 0;
}

function _blake2b_long($out, $outlen, $in, $inlen) {
 $out = $out | 0;
 $outlen = $outlen | 0;
 $in = $in | 0;
 $inlen = $inlen | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $blake_state = 0, $cmp = 0, $cmp5 = 0, $cmp518 = 0, $out_buffer = 0, $outlen_bytes = 0, $pout$0 = 0, $pout$0$lcssa = 0, $pout$017 = 0, $pout$020 = 0, $scevgep = 0, $toproduce$0 = 0, $toproduce$0$lcssa = 0, $toproduce$016 = 0, $toproduce$019 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288 | 0);
 $blake_state = sp + 64 | 0;
 $outlen_bytes = sp + 280 | 0;
 $out_buffer = sp;
 HEAP32[$outlen_bytes >> 2] = 0;
 _store32_494($outlen_bytes, $outlen);
 $cmp = $outlen >>> 0 < 65;
 if ($cmp) {
  _blake2b_init($blake_state, $outlen);
  _blake2b_update($blake_state, $outlen_bytes, 4);
  _blake2b_update($blake_state, $in, $inlen);
  _blake2b_final($blake_state, $out, $outlen);
  STACKTOP = sp;
  return;
 }
 _blake2b_init($blake_state, 64);
 _blake2b_update($blake_state, $outlen_bytes, 4);
 _blake2b_update($blake_state, $in, $inlen);
 _blake2b_final($blake_state, $out_buffer, 64);
 dest = $out;
 src = $out_buffer;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $toproduce$016 = $outlen + -32 | 0;
 $pout$017 = $out + 32 | 0;
 $cmp518 = $toproduce$016 >>> 0 > 64;
 if ($cmp518) {
  $0 = $outlen + -97 | 0;
  $1 = $0 & -32;
  $pout$020 = $pout$017;
  $toproduce$019 = $toproduce$016;
  while (1) {
   _blake2b_init($blake_state, 64);
   _blake2b_update($blake_state, $out_buffer, 64);
   _blake2b_final($blake_state, $out_buffer, 64);
   dest = $pout$020;
   src = $out_buffer;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $toproduce$0 = $toproduce$019 + -32 | 0;
   $pout$0 = $pout$020 + 32 | 0;
   $cmp5 = $toproduce$0 >>> 0 > 64;
   if ($cmp5) {
    $pout$020 = $pout$0;
    $toproduce$019 = $toproduce$0;
   } else {
    break;
   }
  }
  $2 = $1 + 64 | 0;
  $3 = $outlen + -64 | 0;
  $4 = $3 - $1 | 0;
  $scevgep = $out + $2 | 0;
  $pout$0$lcssa = $scevgep;
  $toproduce$0$lcssa = $4;
 } else {
  $pout$0$lcssa = $pout$017;
  $toproduce$0$lcssa = $toproduce$016;
 }
 _blake2b_init($blake_state, $toproduce$0$lcssa);
 _blake2b_update($blake_state, $out_buffer, 64);
 _blake2b_final($blake_state, $out_buffer, $toproduce$0$lcssa);
 _memcpy($pout$0$lcssa | 0, $out_buffer | 0, $toproduce$0$lcssa | 0) | 0;
 _clear_internal_memory($out_buffer, 64);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography27generateKeyDerivationScalarENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_y($agg$result, $publicKey, $secretKey, $0, $1) {
 $agg$result = $agg$result | 0;
 $publicKey = $publicKey | 0;
 $secretKey = $secretKey | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i$i$i$i$i = 0, $__size_$i45$i$i$i$i = 0, $agg$tmp = 0, $agg$tmp1 = 0, $agg$tmp6 = 0, $call = 0, $ref$tmp = 0, $tobool$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $agg$tmp = sp + 36 | 0;
 $agg$tmp1 = sp + 24 | 0;
 $ref$tmp = sp + 12 | 0;
 $agg$tmp6 = sp;
 HEAP32[$agg$result >> 2] = 0 | 0;
 HEAP32[$agg$result + 4 >> 2] = 0 | 0;
 HEAP32[$agg$result + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $publicKey);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1, $secretKey);
 $call = __ZN4Core12Cryptography21generateKeyDerivationENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_RS7_($agg$tmp, $agg$tmp1, $agg$result) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 if (!$call) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp6, $agg$result);
 __ZN4Core12Cryptography18derivationToScalarENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy($ref$tmp, $agg$tmp6, $0, $1);
 $__size_$i$i$i$i$i = $agg$result + 11 | 0;
 $2 = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
 $tobool$i$i$i$i$i = $2 << 24 >> 24 < 0;
 if ($tobool$i$i$i$i$i) {
  $3 = HEAP32[$agg$result >> 2] | 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($3, 0);
  $__size_$i45$i$i$i$i = $agg$result + 4 | 0;
  HEAP32[$__size_$i45$i$i$i$i >> 2] = 0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($3);
  $__cap_$i$i$i$i$i = $agg$result + 8 | 0;
  HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
 } else {
  __ZNSt3__211char_traitsIcE6assignERcRKc($agg$result, 0);
  HEAP8[$__size_$i$i$i$i$i >> 0] = 0;
 };
 HEAP32[$agg$result >> 2] = HEAP32[$ref$tmp >> 2] | 0;
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2] | 0;
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2] | 0;
 HEAP32[$ref$tmp >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp6);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography15derivePublicKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RS7_($derivationScalar, $publicKey, $derivedKey) {
 $derivationScalar = $derivationScalar | 0;
 $publicKey = $publicKey | 0;
 $derivedKey = $derivedKey | 0;
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i$i$i$i$i = 0, $__size_$i45$i$i$i$i = 0, $call2 = 0, $l_derivationScalar = 0, $l_derivedKey = 0, $l_publicKey = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
 $l_derivationScalar = sp + 80 | 0;
 $l_publicKey = sp + 48 | 0;
 $l_derivedKey = sp + 16 | 0;
 $ref$tmp = sp;
 __ZN6Crypto19EllipticCurveScalarC2Ev($l_derivationScalar);
 __ZN6Common10podFromHexIN6Crypto19EllipticCurveScalarEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($derivationScalar, $l_derivationScalar);
 __ZN6Crypto9PublicKeyC2Ev($l_publicKey);
 __ZN6Common10podFromHexIN6Crypto9PublicKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($publicKey, $l_publicKey);
 __ZN6Crypto9PublicKeyC2Ev($l_derivedKey);
 $call2 = __ZN6Crypto17derive_public_keyERKNS_19EllipticCurveScalarERKNS_9PublicKeyERS3_($l_derivationScalar, $l_publicKey, $l_derivedKey) | 0;
 if (!$call2) {
  STACKTOP = sp;
  return;
 }
 __ZN6Common8podToHexIN6Crypto9PublicKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($ref$tmp, $l_derivedKey);
 $__size_$i$i$i$i$i = $derivedKey + 11 | 0;
 $0 = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
 $tobool$i$i$i$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i$i$i$i) {
  $1 = HEAP32[$derivedKey >> 2] | 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($1, 0);
  $__size_$i45$i$i$i$i = $derivedKey + 4 | 0;
  HEAP32[$__size_$i45$i$i$i$i >> 2] = 0;
  $$pr = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
  $tobool$i$i$i$i = $$pr << 24 >> 24 < 0;
  if ($tobool$i$i$i$i) {
   $2 = HEAP32[$derivedKey >> 2] | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2);
   $__cap_$i$i$i$i$i = $derivedKey + 8 | 0;
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  __ZNSt3__211char_traitsIcE6assignERcRKc($derivedKey, 0);
  HEAP8[$__size_$i$i$i$i$i >> 0] = 0;
 };
 HEAP32[$derivedKey >> 2] = HEAP32[$ref$tmp >> 2] | 0;
 HEAP32[$derivedKey + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2] | 0;
 HEAP32[$derivedKey + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2] | 0;
 HEAP32[$ref$tmp >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp12 = 0, $cmp13 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0;
 var $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = $info + 8 | 0;
 $0 = HEAP32[$static_type >> 2] | 0;
 $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, $use_strcmp) | 0;
 do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($info, $current_ptr, $path_below);
  } else {
   $1 = HEAP32[$info >> 2] | 0;
   $call3 = __ZL8is_equalPKSt9type_infoS1_b($this, $1, $use_strcmp) | 0;
   if ($call3) {
    $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
    $2 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
    $cmp = ($2 | 0) == ($current_ptr | 0);
    if (!$cmp) {
     $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
     $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0;
     $cmp5 = ($3 | 0) == ($current_ptr | 0);
     if (!$cmp5) {
      $path_dynamic_ptr_to_dst_ptr10 = $info + 32 | 0;
      HEAP32[$path_dynamic_ptr_to_dst_ptr10 >> 2] = $path_below;
      HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
      $number_to_dst_ptr = $info + 40 | 0;
      $4 = HEAP32[$number_to_dst_ptr >> 2] | 0;
      $add = $4 + 1 | 0;
      HEAP32[$number_to_dst_ptr >> 2] = $add;
      $number_to_static_ptr = $info + 36 | 0;
      $5 = HEAP32[$number_to_static_ptr >> 2] | 0;
      $cmp12 = ($5 | 0) == 1;
      if ($cmp12) {
       $path_dst_ptr_to_static_ptr = $info + 24 | 0;
       $6 = HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
       $cmp13 = ($6 | 0) == 2;
       if ($cmp13) {
        $search_done = $info + 54 | 0;
        HEAP8[$search_done >> 0] = 1;
       }
      }
      $is_dst_type_derived_from_static_type = $info + 44 | 0;
      HEAP32[$is_dst_type_derived_from_static_type >> 2] = 4;
      break;
     }
    }
    $cmp7 = ($path_below | 0) == 1;
    if ($cmp7) {
     $path_dynamic_ptr_to_dst_ptr = $info + 32 | 0;
     HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] = 1;
    }
   }
  }
 } while (0);
 return;
}

function __ZN4Core12Cryptography21generateKeyDerivationENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_RS7_($publicKey, $privateKey, $derivation) {
 $publicKey = $publicKey | 0;
 $privateKey = $privateKey | 0;
 $derivation = $derivation | 0;
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i$i$i$i$i = 0, $__size_$i45$i$i$i$i = 0, $call2 = 0, $l_derivation = 0, $l_privateKey = 0, $l_publicKey = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
 $l_publicKey = sp + 80 | 0;
 $l_privateKey = sp + 48 | 0;
 $l_derivation = sp + 16 | 0;
 $ref$tmp = sp;
 __ZN6Crypto9PublicKeyC2Ev($l_publicKey);
 __ZN6Common10podFromHexIN6Crypto9PublicKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($publicKey, $l_publicKey);
 __ZN6Crypto9SecretKeyC2Ev($l_privateKey);
 __ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($privateKey, $l_privateKey);
 __ZN6Crypto13KeyDerivationC2Ev($l_derivation);
 $call2 = __ZN6Crypto23generate_key_derivationERKNS_9PublicKeyERKNS_9SecretKeyERNS_13KeyDerivationE($l_publicKey, $l_privateKey, $l_derivation) | 0;
 if (!$call2) {
  STACKTOP = sp;
  return $call2 | 0;
 }
 __ZN6Common8podToHexIN6Crypto13KeyDerivationEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($ref$tmp, $l_derivation);
 $__size_$i$i$i$i$i = $derivation + 11 | 0;
 $0 = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
 $tobool$i$i$i$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i$i$i$i) {
  $1 = HEAP32[$derivation >> 2] | 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($1, 0);
  $__size_$i45$i$i$i$i = $derivation + 4 | 0;
  HEAP32[$__size_$i45$i$i$i$i >> 2] = 0;
  $$pr = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
  $tobool$i$i$i$i = $$pr << 24 >> 24 < 0;
  if ($tobool$i$i$i$i) {
   $2 = HEAP32[$derivation >> 2] | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2);
   $__cap_$i$i$i$i$i = $derivation + 8 | 0;
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  __ZNSt3__211char_traitsIcE6assignERcRKc($derivation, 0);
  HEAP8[$__size_$i$i$i$i$i >> 0] = 0;
 };
 HEAP32[$derivation >> 2] = HEAP32[$ref$tmp >> 2] | 0;
 HEAP32[$derivation + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2] | 0;
 HEAP32[$derivation + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2] | 0;
 HEAP32[$ref$tmp >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 STACKTOP = sp;
 return $call2 | 0;
}

function __ZN4Core12Cryptography15derivePublicKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS9_RS7_($derivation, $0, $1, $publicKey, $derivedKey) {
 $derivation = $derivation | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $publicKey = $publicKey | 0;
 $derivedKey = $derivedKey | 0;
 var $$pr = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i$i$i$i$i = 0, $__size_$i45$i$i$i$i = 0, $call2 = 0, $l_derivation = 0, $l_derivedKey = 0, $l_publicKey = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
 $l_derivation = sp + 80 | 0;
 $l_publicKey = sp + 48 | 0;
 $l_derivedKey = sp + 16 | 0;
 $ref$tmp = sp;
 __ZN6Crypto13KeyDerivationC2Ev($l_derivation);
 __ZN6Common10podFromHexIN6Crypto13KeyDerivationEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($derivation, $l_derivation);
 __ZN6Crypto9PublicKeyC2Ev($l_publicKey);
 __ZN6Common10podFromHexIN6Crypto9PublicKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($publicKey, $l_publicKey);
 __ZN6Crypto9PublicKeyC2Ev($l_derivedKey);
 $call2 = __ZN6Crypto17derive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS3_($l_derivation, $0, $l_publicKey, $l_derivedKey) | 0;
 if (!$call2) {
  STACKTOP = sp;
  return;
 }
 __ZN6Common8podToHexIN6Crypto9PublicKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($ref$tmp, $l_derivedKey);
 $__size_$i$i$i$i$i = $derivedKey + 11 | 0;
 $2 = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
 $tobool$i$i$i$i$i = $2 << 24 >> 24 < 0;
 if ($tobool$i$i$i$i$i) {
  $3 = HEAP32[$derivedKey >> 2] | 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($3, 0);
  $__size_$i45$i$i$i$i = $derivedKey + 4 | 0;
  HEAP32[$__size_$i45$i$i$i$i >> 2] = 0;
  $$pr = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
  $tobool$i$i$i$i = $$pr << 24 >> 24 < 0;
  if ($tobool$i$i$i$i) {
   $4 = HEAP32[$derivedKey >> 2] | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4);
   $__cap_$i$i$i$i$i = $derivedKey + 8 | 0;
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  __ZNSt3__211char_traitsIcE6assignERcRKc($derivedKey, 0);
  HEAP8[$__size_$i$i$i$i$i >> 0] = 0;
 };
 HEAP32[$derivedKey >> 2] = HEAP32[$ref$tmp >> 2] | 0;
 HEAP32[$derivedKey + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2] | 0;
 HEAP32[$derivedKey + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2] | 0;
 HEAP32[$ref$tmp >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZN6Crypto10crypto_ops22generateRingSignaturesENS_4HashENS_8KeyImageENSt3__26vectorINS_9PublicKeyENS3_9allocatorIS5_EEEENS_9SecretKeyEyRNS4_INS_9SignatureENS6_ISA_EEEE($prefixHash, $keyImage, $publicKeys, $transactionSecretKey, $0, $1, $signatures) {
 $prefixHash = $prefixHash | 0;
 $keyImage = $keyImage | 0;
 $publicKeys = $publicKeys | 0;
 $transactionSecretKey = $transactionSecretKey | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $signatures = $signatures | 0;
 var $2 = 0, $3 = 0, $agg$tmp2 = 0, $k = 0, $keyImage$byval_copy = 0, $prefixHash$byval_copy = 0, $retval$0 = 0, $signatures$idx$val = 0, $signatures$idx1 = 0, $signatures$idx1$val = 0, $transactionSecretKey$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144 | 0);
 $transactionSecretKey$byval_copy = sp + 112 | 0;
 $keyImage$byval_copy = sp + 80 | 0;
 $prefixHash$byval_copy = sp + 48 | 0;
 $k = sp + 16 | 0;
 $agg$tmp2 = sp;
 __ZN6Crypto19EllipticCurveScalarC2Ev($k);
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEEC2ERKS5_($agg$tmp2, $publicKeys);
 dest = $prefixHash$byval_copy;
 src = $prefixHash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $keyImage$byval_copy;
 src = $keyImage;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $2 = __ZN6Crypto10crypto_ops21prepareRingSignaturesENS_4HashENS_8KeyImageENSt3__26vectorINS_9PublicKeyENS3_9allocatorIS5_EEEEyRNS4_INS_9SignatureENS6_IS9_EEEERNS_19EllipticCurveScalarE($prefixHash$byval_copy, $keyImage$byval_copy, $agg$tmp2, $0, $1, $signatures, $k) | 0;
 __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($agg$tmp2);
 if (!$2) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $signatures$idx$val = HEAP32[$signatures >> 2] | 0;
 $signatures$idx1 = $signatures + 4 | 0;
 $signatures$idx1$val = HEAP32[$signatures$idx1 >> 2] | 0;
 dest = $transactionSecretKey$byval_copy;
 src = $transactionSecretKey;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $3 = __ZN6Crypto10crypto_ops22completeRingSignaturesENS_9SecretKeyEyRKNS_19EllipticCurveScalarERNSt3__26vectorINS_9SignatureENS5_9allocatorIS7_EEEE($transactionSecretKey$byval_copy, $0, $1, $k, $signatures$idx$val, $signatures$idx1$val) | 0;
 $retval$0 = $3;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN4Core12Cryptography17underivePublicKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS7_RS7_($derivation, $0, $1, $derivedKey, $publicKey) {
 $derivation = $derivation | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $derivedKey = $derivedKey | 0;
 $publicKey = $publicKey | 0;
 var $$pr = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i$i$i$i$i = 0, $__size_$i45$i$i$i$i = 0, $call2 = 0, $l_derivation = 0, $l_derivedKey = 0, $l_publicKey = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
 $l_derivation = sp + 80 | 0;
 $l_derivedKey = sp + 48 | 0;
 $l_publicKey = sp + 16 | 0;
 $ref$tmp = sp;
 __ZN6Crypto13KeyDerivationC2Ev($l_derivation);
 __ZN6Common10podFromHexIN6Crypto13KeyDerivationEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($derivation, $l_derivation);
 __ZN6Crypto9PublicKeyC2Ev($l_derivedKey);
 __ZN6Common10podFromHexIN6Crypto9PublicKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($derivedKey, $l_derivedKey);
 __ZN6Crypto9PublicKeyC2Ev($l_publicKey);
 $call2 = __ZN6Crypto19underive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS3_($l_derivation, $0, $l_derivedKey, $l_publicKey) | 0;
 if (!$call2) {
  STACKTOP = sp;
  return;
 }
 __ZN6Common8podToHexIN6Crypto9PublicKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($ref$tmp, $l_publicKey);
 $__size_$i$i$i$i$i = $publicKey + 11 | 0;
 $2 = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
 $tobool$i$i$i$i$i = $2 << 24 >> 24 < 0;
 if ($tobool$i$i$i$i$i) {
  $3 = HEAP32[$publicKey >> 2] | 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($3, 0);
  $__size_$i45$i$i$i$i = $publicKey + 4 | 0;
  HEAP32[$__size_$i45$i$i$i$i >> 2] = 0;
  $$pr = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
  $tobool$i$i$i$i = $$pr << 24 >> 24 < 0;
  if ($tobool$i$i$i$i) {
   $4 = HEAP32[$publicKey >> 2] | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4);
   $__cap_$i$i$i$i$i = $publicKey + 8 | 0;
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  __ZNSt3__211char_traitsIcE6assignERcRKc($publicKey, 0);
  HEAP8[$__size_$i$i$i$i$i >> 0] = 0;
 };
 HEAP32[$publicKey >> 2] = HEAP32[$ref$tmp >> 2] | 0;
 HEAP32[$publicKey + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2] | 0;
 HEAP32[$publicKey + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2] | 0;
 HEAP32[$ref$tmp >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8__appendEmRKS6_($this, $__n, $__x) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__x = $__x | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_ = 0, $__end_cap_$i = 0, $__n$addr$i$0 = 0, $__v = 0, $add = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp$i33 = 0, $cmp3$i = 0, $dec$i = 0, $incdec$ptr$i = 0, $mul$i = 0;
 var $spec$select = 0, $sub$ptr$div = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $__v = sp;
 $__end_cap_$i = $this + 8 | 0;
 $0 = HEAP32[$__end_cap_$i >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 $sub$ptr$sub = $0 - $1 | 0;
 $sub$ptr$div = ($sub$ptr$sub | 0) / 12 & -1;
 $cmp = $sub$ptr$div >>> 0 < $__n >>> 0;
 if (!$cmp) {
  $2 = $1;
  $3 = $2;
  $__n$addr$i$0 = $__n;
  while (1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3, $__x);
   $4 = HEAP32[$__end_ >> 2] | 0;
   $incdec$ptr$i = $4 + 12 | 0;
   HEAP32[$__end_ >> 2] = $incdec$ptr$i;
   $dec$i = $__n$addr$i$0 + -1 | 0;
   $cmp$i = ($dec$i | 0) == 0;
   if ($cmp$i) {
    break;
   } else {
    $3 = $incdec$ptr$i;
    $__n$addr$i$0 = $dec$i;
   }
  }
  STACKTOP = sp;
  return;
 }
 $5 = HEAP32[$this >> 2] | 0;
 $sub$ptr$sub$i = $1 - $5 | 0;
 $sub$ptr$div$i = ($sub$ptr$sub$i | 0) / 12 & -1;
 $add = $sub$ptr$div$i + $__n | 0;
 $cmp$i33 = $add >>> 0 > 357913941;
 if ($cmp$i33) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 }
 $sub$ptr$sub$i$i$i = $0 - $5 | 0;
 $sub$ptr$div$i$i$i = ($sub$ptr$sub$i$i$i | 0) / 12 & -1;
 $cmp3$i = $sub$ptr$div$i$i$i >>> 0 < 178956970;
 $mul$i = $sub$ptr$div$i$i$i << 1;
 $cmp$i$i$i$i = $mul$i >>> 0 < $add >>> 0;
 $$sroa$speculated = $cmp$i$i$i$i ? $add : $mul$i;
 $spec$select = $cmp3$i ? $$sroa$speculated : 357913941;
 __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_($__v, $spec$select, $sub$ptr$div$i, $__end_cap_$i);
 __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEE18__construct_at_endEmRKS6_($__v, $__n, $__x);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this, $__v);
 __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography22completeRingSignaturesENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyRKS7_RNS1_6vectorIS7_NS5_IS7_EEEE($transactionSecretKey, $0, $1, $k, $signatures) {
 $transactionSecretKey = $transactionSecretKey | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $k = $k | 0;
 $signatures = $signatures | 0;
 var $2 = 0, $__end_$i$i = 0, $__value_$i$i$i$i = 0, $l_k = 0, $l_signatures = 0, $l_signatures$idx$val = 0, $l_signatures$idx1$val = 0, $l_transactionSecretKey = 0, $l_transactionSecretKey$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
 $l_transactionSecretKey$byval_copy = sp + 80 | 0;
 $l_transactionSecretKey = sp + 48 | 0;
 $l_k = sp + 16 | 0;
 $l_signatures = sp;
 __ZN6Crypto9SecretKeyC2Ev($l_transactionSecretKey);
 __ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($transactionSecretKey, $l_transactionSecretKey);
 __ZN6Crypto19EllipticCurveScalarC2Ev($l_k);
 __ZN6Common10podFromHexIN6Crypto19EllipticCurveScalarEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($k, $l_k);
 HEAP32[$l_signatures >> 2] = 0;
 $__end_$i$i = $l_signatures + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $l_signatures + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 __ZN4Core13toTypedVectorIN6Crypto9SignatureEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($signatures, $l_signatures);
 $l_signatures$idx$val = HEAP32[$l_signatures >> 2] | 0;
 $l_signatures$idx1$val = HEAP32[$__end_$i$i >> 2] | 0;
 dest = $l_transactionSecretKey$byval_copy;
 src = $l_transactionSecretKey;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $2 = __ZN6Crypto10crypto_ops22completeRingSignaturesENS_9SecretKeyEyRKNS_19EllipticCurveScalarERNSt3__26vectorINS_9SignatureENS5_9allocatorIS7_EEEE($l_transactionSecretKey$byval_copy, $0, $1, $l_k, $l_signatures$idx$val, $l_signatures$idx1$val) | 0;
 if (!$2) {
  __ZNSt3__213__vector_baseIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($l_signatures);
  STACKTOP = sp;
  return;
 }
 __ZN4Core14toStringVectorIN6Crypto9SignatureEEEvRKNSt3__26vectorIT_NS3_9allocatorIS5_EEEERNS4_INS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEENS6_ISF_EEEE($l_signatures, $signatures);
 __ZNSt3__213__vector_baseIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($l_signatures);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre = 0, $$pre$phi31Z2D = 0, $$pre$phiZ2D = 0, $$pre26 = 0, $$pre28 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin_2 = 0;
 var $__end1$addr$i$019 = 0, $__end_$i$i = 0, $__end_6 = 0, $__r_$i$i$i$i$i = 0, $__value_$i$i$i = 0, $__value_$i$i$i$i$i35$i = 0, $cmp$i = 0, $cmp$i18 = 0, $incdec$ptr$i = 0, $incdec$ptr2$i = 0, $indvar = 0, $indvar$next = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $__value_$i$i$i$i$i35$i = $this + 8 | 0;
 $__end_$i$i = $this + 4 | 0;
 $1 = HEAP32[$__end_$i$i >> 2] | 0;
 $__begin_2 = $__v + 4 | 0;
 $cmp$i18 = ($1 | 0) == ($0 | 0);
 if ($cmp$i18) {
  $2 = $0;
  $$pre28 = HEAP32[$__begin_2 >> 2] | 0;
  $$pre$phi31Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $7 = $$pre28;
  $8 = $2;
 } else {
  $$pre = HEAP32[$__begin_2 >> 2] | 0;
  $4 = $$pre;
  $__end1$addr$i$019 = $1;
  $indvar = 0;
  while (1) {
   $3 = $indvar ^ -1;
   $scevgep = $1 + ($3 * 12 | 0) | 0;
   $incdec$ptr$i = $__end1$addr$i$019 + -12 | 0;
   $__r_$i$i$i$i$i = $4 + -12 | 0;
   HEAP32[$__r_$i$i$i$i$i >> 2] = HEAP32[$incdec$ptr$i >> 2] | 0;
   HEAP32[$__r_$i$i$i$i$i + 4 >> 2] = HEAP32[$incdec$ptr$i + 4 >> 2] | 0;
   HEAP32[$__r_$i$i$i$i$i + 8 >> 2] = HEAP32[$incdec$ptr$i + 8 >> 2] | 0;
   HEAP32[$scevgep >> 2] = 0 | 0;
   HEAP32[$scevgep + 4 >> 2] = 0 | 0;
   HEAP32[$scevgep + 8 >> 2] = 0 | 0;
   $5 = HEAP32[$__begin_2 >> 2] | 0;
   $incdec$ptr2$i = $5 + -12 | 0;
   HEAP32[$__begin_2 >> 2] = $incdec$ptr2$i;
   $cmp$i = ($incdec$ptr$i | 0) == ($0 | 0);
   $indvar$next = $indvar + 1 | 0;
   if ($cmp$i) {
    break;
   } else {
    $4 = $incdec$ptr2$i;
    $__end1$addr$i$019 = $incdec$ptr$i;
    $indvar = $indvar$next;
   }
  }
  $6 = $incdec$ptr2$i;
  $$pre26 = HEAP32[$this >> 2] | 0;
  $$pre$phi31Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $7 = $6;
  $8 = $$pre26;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $7;
 HEAP32[$$pre$phi31Z2D >> 2] = $8;
 $__end_6 = $__v + 8 | 0;
 $9 = HEAP32[$__end_$i$i >> 2] | 0;
 $10 = HEAP32[$__end_6 >> 2] | 0;
 HEAP32[$__end_$i$i >> 2] = $10;
 HEAP32[$__end_6 >> 2] = $9;
 $__value_$i$i$i = $__v + 12 | 0;
 $11 = HEAP32[$__value_$i$i$i$i$i35$i >> 2] | 0;
 $12 = HEAP32[$__value_$i$i$i >> 2] | 0;
 HEAP32[$__value_$i$i$i$i$i35$i >> 2] = $12;
 HEAP32[$__value_$i$i$i >> 2] = $11;
 $13 = HEAP32[$$pre$phi31Z2D >> 2] | 0;
 HEAP32[$__v >> 2] = $13;
 return;
}

function __ZNSt3__26threadC2IRFvNS_6vectorIhNS_9allocatorIhEEEEmijRNS_6atomicIbEERjjEJRS5_RKmRKiRiNS_17reference_wrapperIS7_EENSI_IjEESE_EvEEOT_DpOT0_($this, $__args, $__args1, $__args3, $__args5, $__args7, $__args9, $__args11) {
 $this = $this | 0;
 $__args = $__args | 0;
 $__args1 = $__args1 | 0;
 $__args3 = $__args3 | 0;
 $__args5 = $__args5 | 0;
 $__args7 = $__args7 | 0;
 $__args9 = $__args9 | 0;
 $__args11 = $__args11 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__end_$i$i$i$i = 0, $__end_$i$i$i$i$i = 0, $__end_cap_$i38$i$i$i$i = 0, $__value_$i$i$i32$i$i$i$i = 0, $call = 0;
 var $call$i192 = 0, $call16 = 0, $cmp = 0, $ref$tmp22 = 0, $retval$i$sroa$0$0$copyload19 = 0, $retval$i314$sroa$0$0$copyload18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $ref$tmp22 = sp;
 $call = __Znwm(4) | 0;
 __ZNSt3__215__thread_structC2Ev($call);
 $call16 = __Znwm(44) | 0;
 __ZNSt3__26vectorIhNS_9allocatorIhEEEC2ERKS3_($ref$tmp22, $__args);
 $0 = HEAP32[$__args1 >> 2] | 0;
 $1 = HEAP32[$__args3 >> 2] | 0;
 $2 = HEAP32[$__args5 >> 2] | 0;
 $retval$i314$sroa$0$0$copyload18 = HEAP32[$__args7 >> 2] | 0;
 $retval$i$sroa$0$0$copyload19 = HEAP32[$__args9 >> 2] | 0;
 $3 = HEAP32[$__args11 >> 2] | 0;
 HEAP32[$call16 >> 2] = $call;
 $4 = $call16 + 4 | 0;
 HEAP32[$4 >> 2] = 150;
 $5 = $call16 + 8 | 0;
 $__end_$i$i$i$i$i = $call16 + 12 | 0;
 $__end_cap_$i38$i$i$i$i = $call16 + 16 | 0;
 $6 = HEAP32[$ref$tmp22 >> 2] | 0;
 HEAP32[$5 >> 2] = $6;
 $__end_$i$i$i$i = $ref$tmp22 + 4 | 0;
 $7 = HEAP32[$__end_$i$i$i$i >> 2] | 0;
 HEAP32[$__end_$i$i$i$i$i >> 2] = $7;
 $__value_$i$i$i32$i$i$i$i = $ref$tmp22 + 8 | 0;
 $8 = HEAP32[$__value_$i$i$i32$i$i$i$i >> 2] | 0;
 HEAP32[$__end_cap_$i38$i$i$i$i >> 2] = $8;
 HEAP32[$__value_$i$i$i32$i$i$i$i >> 2] = 0;
 HEAP32[$__end_$i$i$i$i >> 2] = 0;
 HEAP32[$ref$tmp22 >> 2] = 0;
 $9 = $call16 + 20 | 0;
 HEAP32[$9 >> 2] = $0;
 $10 = $call16 + 24 | 0;
 HEAP32[$10 >> 2] = $1;
 $11 = $call16 + 28 | 0;
 HEAP32[$11 >> 2] = $2;
 $12 = $call16 + 32 | 0;
 HEAP32[$12 >> 2] = $retval$i314$sroa$0$0$copyload18;
 $13 = $call16 + 36 | 0;
 HEAP32[$13 >> 2] = $retval$i$sroa$0$0$copyload19;
 $14 = $call16 + 40 | 0;
 HEAP32[$14 >> 2] = $3;
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($ref$tmp22);
 $call$i192 = _pthread_create($this | 0, 0 | 0, 151 | 0, $call16 | 0) | 0;
 $cmp = ($call$i192 | 0) == 0;
 if ($cmp) {
  STACKTOP = sp;
  return;
 } else {
  __ZNSt3__220__throw_system_errorEiPKc();
 }
}

function __Z22completeRingSignaturesNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiS5_NS_6vectorIS5_NS3_IS5_EEEE($agg$result, $transactionSecretKey, $realOutputIndex, $k, $signatures) {
 $agg$result = $agg$result | 0;
 $transactionSecretKey = $transactionSecretKey | 0;
 $realOutputIndex = $realOutputIndex | 0;
 $k = $k | 0;
 $signatures = $signatures | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__begin$sroa$0$06 = 0, $__end_$i = 0, $__end_$i$i = 0, $__value_$i$i$i$i = 0, $agg$tmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i5 = 0, $incdec$ptr$i = 0, $incdec$ptr$i135 = 0, $sig = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $sig = sp + 12 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$result >> 2] = 0;
 $__end_$i$i = $agg$result + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $agg$result + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 $0 = HEAP32[$signatures >> 2] | 0;
 $__end_$i = $signatures + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $cmp$i$i5 = ($0 | 0) == ($1 | 0);
 if (!$cmp$i$i5) {
  $__begin$sroa$0$06 = $0;
  while (1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($sig, $__begin$sroa$0$06);
   $2 = HEAP32[$__end_$i$i >> 2] | 0;
   $3 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
   $cmp$i = ($2 | 0) == ($3 | 0);
   if ($cmp$i) {
    __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($agg$result, $sig);
   } else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($2, $sig);
    $4 = HEAP32[$__end_$i$i >> 2] | 0;
    $incdec$ptr$i135 = $4 + 12 | 0;
    HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i135;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($sig);
   $incdec$ptr$i = $__begin$sroa$0$06 + 12 | 0;
   $cmp$i$i = ($incdec$ptr$i | 0) == ($1 | 0);
   if ($cmp$i$i) {
    break;
   } else {
    $__begin$sroa$0$06 = $incdec$ptr$i;
   }
  }
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $transactionSecretKey);
 $5 = ($realOutputIndex | 0) < 0;
 $6 = $5 << 31 >> 31;
 __ZN4Core12Cryptography22completeRingSignaturesENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyRKS7_RNS1_6vectorIS7_NS5_IS7_EEEE($agg$tmp, $realOutputIndex, $6, $k, $agg$result);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEEC2INS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEEET_NS_9enable_ifIXaasr21__is_forward_iteratorISD_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISD_E9referenceEEE5valueESD_E4typeE($this, $__first$0, $__last$0) {
 $this = $this | 0;
 $__first$0 = $__first$0 | 0;
 $__last$0 = $__last$0 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__end_$i = 0, $__parent_$i$i$i$i$i = 0, $__r$i$i$015 = 0, $__value_$i$i$i = 0, $__x$addr$i$i$i$i$i$0 = 0, $__x$addr$i$i2$i$i$0$in = 0, $agg$tmp3$i$sroa$0$014 = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i$i = 0, $cmp$i$i$i$i13 = 0, $cmp$i$i3$i$i = 0, $cmp$i6$i$i$i$i = 0, $inc$i$i = 0, $retval$i$i$i$i$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0;
 $__end_$i = $this + 4 | 0;
 HEAP32[$__end_$i >> 2] = 0;
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = 0;
 $cmp$i$i$i$i13 = ($__first$0 | 0) == ($__last$0 | 0);
 if ($cmp$i$i$i$i13) {
  return;
 }
 $__r$i$i$015 = 0;
 $agg$tmp3$i$sroa$0$014 = $__first$0;
 while (1) {
  $inc$i$i = $__r$i$i$015 + 1 | 0;
  $0 = $agg$tmp3$i$sroa$0$014 + 4 | 0;
  $1 = HEAP32[$0 >> 2] | 0;
  $cmp$i$i3$i$i = ($1 | 0) == (0 | 0);
  if ($cmp$i$i3$i$i) {
   $__x$addr$i$i2$i$i$0$in = $agg$tmp3$i$sroa$0$014;
   while (1) {
    $__parent_$i$i$i$i$i = $__x$addr$i$i2$i$i$0$in + 8 | 0;
    $3 = HEAP32[$__parent_$i$i$i$i$i >> 2] | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $cmp$i6$i$i$i$i = ($4 | 0) == ($__x$addr$i$i2$i$i$0$in | 0);
    if ($cmp$i6$i$i$i$i) {
     $retval$i$i$i$i$0 = $3;
     break;
    } else {
     $__x$addr$i$i2$i$i$0$in = $3;
    }
   }
  } else {
   $__x$addr$i$i$i$i$i$0 = $1;
   while (1) {
    $2 = HEAP32[$__x$addr$i$i$i$i$i$0 >> 2] | 0;
    $cmp$i$i$i$i$i = ($2 | 0) == (0 | 0);
    if ($cmp$i$i$i$i$i) {
     break;
    } else {
     $__x$addr$i$i$i$i$i$0 = $2;
    }
   }
   $retval$i$i$i$i$0 = $__x$addr$i$i$i$i$i$0;
  }
  $cmp$i$i$i$i = ($retval$i$i$i$i$0 | 0) == ($__last$0 | 0);
  if ($cmp$i$i$i$i) {
   break;
  } else {
   $__r$i$i$015 = $inc$i$i;
   $agg$tmp3$i$sroa$0$014 = $retval$i$i$i$i$0;
  }
 }
 __ZNSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEE11__vallocateEm($this, $inc$i$i);
 __ZNSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEE18__construct_at_endINS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESE_SE_m($this, $__first$0, $__last$0);
 return;
}

function __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEEC2INS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEEET_NS_9enable_ifIXaasr21__is_forward_iteratorISD_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISD_E9referenceEEE5valueESD_E4typeE($this, $__first$0, $__last$0) {
 $this = $this | 0;
 $__first$0 = $__first$0 | 0;
 $__last$0 = $__last$0 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__end_$i = 0, $__parent_$i$i$i$i$i = 0, $__r$i$i$015 = 0, $__value_$i$i$i = 0, $__x$addr$i$i$i$i$i$0 = 0, $__x$addr$i$i2$i$i$0$in = 0, $agg$tmp3$i$sroa$0$014 = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i$i = 0, $cmp$i$i$i$i13 = 0, $cmp$i$i3$i$i = 0, $cmp$i6$i$i$i$i = 0, $inc$i$i = 0, $retval$i$i$i$i$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0;
 $__end_$i = $this + 4 | 0;
 HEAP32[$__end_$i >> 2] = 0;
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = 0;
 $cmp$i$i$i$i13 = ($__first$0 | 0) == ($__last$0 | 0);
 if ($cmp$i$i$i$i13) {
  return;
 }
 $__r$i$i$015 = 0;
 $agg$tmp3$i$sroa$0$014 = $__first$0;
 while (1) {
  $inc$i$i = $__r$i$i$015 + 1 | 0;
  $0 = $agg$tmp3$i$sroa$0$014 + 4 | 0;
  $1 = HEAP32[$0 >> 2] | 0;
  $cmp$i$i3$i$i = ($1 | 0) == (0 | 0);
  if ($cmp$i$i3$i$i) {
   $__x$addr$i$i2$i$i$0$in = $agg$tmp3$i$sroa$0$014;
   while (1) {
    $__parent_$i$i$i$i$i = $__x$addr$i$i2$i$i$0$in + 8 | 0;
    $3 = HEAP32[$__parent_$i$i$i$i$i >> 2] | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $cmp$i6$i$i$i$i = ($4 | 0) == ($__x$addr$i$i2$i$i$0$in | 0);
    if ($cmp$i6$i$i$i$i) {
     $retval$i$i$i$i$0 = $3;
     break;
    } else {
     $__x$addr$i$i2$i$i$0$in = $3;
    }
   }
  } else {
   $__x$addr$i$i$i$i$i$0 = $1;
   while (1) {
    $2 = HEAP32[$__x$addr$i$i$i$i$i$0 >> 2] | 0;
    $cmp$i$i$i$i$i = ($2 | 0) == (0 | 0);
    if ($cmp$i$i$i$i$i) {
     break;
    } else {
     $__x$addr$i$i$i$i$i$0 = $2;
    }
   }
   $retval$i$i$i$i$0 = $__x$addr$i$i$i$i$i$0;
  }
  $cmp$i$i$i$i = ($retval$i$i$i$i$0 | 0) == ($__last$0 | 0);
  if ($cmp$i$i$i$i) {
   break;
  } else {
   $__r$i$i$015 = $inc$i$i;
   $agg$tmp3$i$sroa$0$014 = $retval$i$i$i$i$0;
  }
 }
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE11__vallocateEm($this, $inc$i$i);
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE18__construct_at_endINS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESE_SE_m($this, $__first$0, $__last$0);
 return;
}

function __ZNSt3__26vectorIN6Crypto8KeyImageENS_9allocatorIS2_EEEC2INS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEEET_NS_9enable_ifIXaasr21__is_forward_iteratorISD_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISD_E9referenceEEE5valueESD_E4typeE($this, $__first$0, $__last$0) {
 $this = $this | 0;
 $__first$0 = $__first$0 | 0;
 $__last$0 = $__last$0 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__end_$i = 0, $__parent_$i$i$i$i$i = 0, $__r$i$i$015 = 0, $__value_$i$i$i = 0, $__x$addr$i$i$i$i$i$0 = 0, $__x$addr$i$i2$i$i$0$in = 0, $agg$tmp3$i$sroa$0$014 = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i$i = 0, $cmp$i$i$i$i13 = 0, $cmp$i$i3$i$i = 0, $cmp$i6$i$i$i$i = 0, $inc$i$i = 0, $retval$i$i$i$i$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0;
 $__end_$i = $this + 4 | 0;
 HEAP32[$__end_$i >> 2] = 0;
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = 0;
 $cmp$i$i$i$i13 = ($__first$0 | 0) == ($__last$0 | 0);
 if ($cmp$i$i$i$i13) {
  return;
 }
 $__r$i$i$015 = 0;
 $agg$tmp3$i$sroa$0$014 = $__first$0;
 while (1) {
  $inc$i$i = $__r$i$i$015 + 1 | 0;
  $0 = $agg$tmp3$i$sroa$0$014 + 4 | 0;
  $1 = HEAP32[$0 >> 2] | 0;
  $cmp$i$i3$i$i = ($1 | 0) == (0 | 0);
  if ($cmp$i$i3$i$i) {
   $__x$addr$i$i2$i$i$0$in = $agg$tmp3$i$sroa$0$014;
   while (1) {
    $__parent_$i$i$i$i$i = $__x$addr$i$i2$i$i$0$in + 8 | 0;
    $3 = HEAP32[$__parent_$i$i$i$i$i >> 2] | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $cmp$i6$i$i$i$i = ($4 | 0) == ($__x$addr$i$i2$i$i$0$in | 0);
    if ($cmp$i6$i$i$i$i) {
     $retval$i$i$i$i$0 = $3;
     break;
    } else {
     $__x$addr$i$i2$i$i$0$in = $3;
    }
   }
  } else {
   $__x$addr$i$i$i$i$i$0 = $1;
   while (1) {
    $2 = HEAP32[$__x$addr$i$i$i$i$i$0 >> 2] | 0;
    $cmp$i$i$i$i$i = ($2 | 0) == (0 | 0);
    if ($cmp$i$i$i$i$i) {
     break;
    } else {
     $__x$addr$i$i$i$i$i$0 = $2;
    }
   }
   $retval$i$i$i$i$0 = $__x$addr$i$i$i$i$i$0;
  }
  $cmp$i$i$i$i = ($retval$i$i$i$i$0 | 0) == ($__last$0 | 0);
  if ($cmp$i$i$i$i) {
   break;
  } else {
   $__r$i$i$015 = $inc$i$i;
   $agg$tmp3$i$sroa$0$014 = $retval$i$i$i$i$0;
  }
 }
 __ZNSt3__26vectorIN6Crypto8KeyImageENS_9allocatorIS2_EEE11__vallocateEm($this, $inc$i$i);
 __ZNSt3__26vectorIN6Crypto8KeyImageENS_9allocatorIS2_EEE18__construct_at_endINS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESE_SE_m($this, $__first$0, $__last$0);
 return;
}

function _benchmark_impl($impl) {
 $impl = $impl | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call3 = 0, $exitcond = 0, $fill_segment = 0, $i$04 = 0, $inc = 0, $index = 0, $instance = 0, $lane = 0, $lane_length = 0, $lanes = 0, $memory_blocks = 0, $passes = 0, $pos = 0, $pos$byval_copy = 0, $pos$byval_copy1 = 0;
 var $segment_length = 0, $slice = 0, $sub = 0, $threads = 0, $type = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
 $pos$byval_copy1 = sp + 80 | 0;
 $pos$byval_copy = sp + 64 | 0;
 $instance = sp + 16 | 0;
 $pos = sp;
 _memset(48640 | 0, 0, 524288) | 0;
 $version = $instance + 4 | 0;
 HEAP32[$version >> 2] = 19;
 HEAP32[$instance >> 2] = 48640;
 $passes = $instance + 8 | 0;
 HEAP32[$passes >> 2] = 1;
 $memory_blocks = $instance + 12 | 0;
 HEAP32[$memory_blocks >> 2] = 512;
 $segment_length = $instance + 16 | 0;
 HEAP32[$segment_length >> 2] = 128;
 $lane_length = $instance + 20 | 0;
 HEAP32[$lane_length >> 2] = 512;
 $lanes = $instance + 24 | 0;
 HEAP32[$lanes >> 2] = 1;
 $threads = $instance + 28 | 0;
 HEAP32[$threads >> 2] = 1;
 $type = $instance + 32 | 0;
 HEAP32[$type >> 2] = 1;
 $lane = $pos + 4 | 0;
 HEAP32[$lane >> 2] = 0;
 HEAP32[$pos >> 2] = 0;
 $slice = $pos + 8 | 0;
 HEAP8[$slice >> 0] = 0;
 $index = $pos + 12 | 0;
 HEAP32[$index >> 2] = 0;
 $fill_segment = $impl + 8 | 0;
 $0 = HEAP32[$fill_segment >> 2] | 0;
 HEAP32[$pos$byval_copy >> 2] = HEAP32[$pos >> 2] | 0;
 HEAP32[$pos$byval_copy + 4 >> 2] = HEAP32[$pos + 4 >> 2] | 0;
 HEAP32[$pos$byval_copy + 8 >> 2] = HEAP32[$pos + 8 >> 2] | 0;
 HEAP32[$pos$byval_copy + 12 >> 2] = HEAP32[$pos + 12 >> 2] | 0;
 FUNCTION_TABLE_vii[$0 & 255]($instance, $pos$byval_copy);
 $call = _clock() | 0;
 $i$04 = 0;
 while (1) {
  $1 = HEAP32[$fill_segment >> 2] | 0;
  HEAP32[$pos$byval_copy1 >> 2] = HEAP32[$pos >> 2] | 0;
  HEAP32[$pos$byval_copy1 + 4 >> 2] = HEAP32[$pos + 4 >> 2] | 0;
  HEAP32[$pos$byval_copy1 + 8 >> 2] = HEAP32[$pos + 8 >> 2] | 0;
  HEAP32[$pos$byval_copy1 + 12 >> 2] = HEAP32[$pos + 12 >> 2] | 0;
  FUNCTION_TABLE_vii[$1 & 255]($instance, $pos$byval_copy1);
  $inc = $i$04 + 1 | 0;
  $exitcond = ($inc | 0) == 512;
  if ($exitcond) {
   break;
  } else {
   $i$04 = $inc;
  }
 }
 $call3 = _clock() | 0;
 $sub = $call3 - $call | 0;
 $2 = ($sub | 0) < 0;
 $3 = $2 << 31 >> 31;
 setTempRet0($3 | 0);
 STACKTOP = sp;
 return $sub | 0;
}

function __Z21restoreRingSignaturesNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmNS_6vectorIS5_NS3_IS5_EEEEiS5_S8_($agg$result, $derivation, $output_index, $partialSigningKeys, $realOutput, $k, $signatures) {
 $agg$result = $agg$result | 0;
 $derivation = $derivation | 0;
 $output_index = $output_index | 0;
 $partialSigningKeys = $partialSigningKeys | 0;
 $realOutput = $realOutput | 0;
 $k = $k | 0;
 $signatures = $signatures | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__begin$sroa$0$06 = 0, $__end_$i = 0, $__end_$i$i = 0, $__value_$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i5 = 0, $incdec$ptr$i = 0, $incdec$ptr$i133 = 0, $sig = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $sig = sp;
 HEAP32[$agg$result >> 2] = 0;
 $__end_$i$i = $agg$result + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $agg$result + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 $0 = HEAP32[$signatures >> 2] | 0;
 $__end_$i = $signatures + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $cmp$i$i5 = ($0 | 0) == ($1 | 0);
 if (!$cmp$i$i5) {
  $__begin$sroa$0$06 = $0;
  while (1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($sig, $__begin$sroa$0$06);
   $2 = HEAP32[$__end_$i$i >> 2] | 0;
   $3 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
   $cmp$i = ($2 | 0) == ($3 | 0);
   if ($cmp$i) {
    __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($agg$result, $sig);
   } else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($2, $sig);
    $4 = HEAP32[$__end_$i$i >> 2] | 0;
    $incdec$ptr$i133 = $4 + 12 | 0;
    HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i133;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($sig);
   $incdec$ptr$i = $__begin$sroa$0$06 + 12 | 0;
   $cmp$i$i = ($incdec$ptr$i | 0) == ($1 | 0);
   if ($cmp$i$i) {
    break;
   } else {
    $__begin$sroa$0$06 = $incdec$ptr$i;
   }
  }
 }
 $5 = ($realOutput | 0) < 0;
 $6 = $5 << 31 >> 31;
 __ZN4Core12Cryptography21restoreRingSignaturesERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmRKNS1_6vectorIS7_NS5_IS7_EEEEyS9_RSC_($derivation, $output_index, $partialSigningKeys, $realOutput, $6, $k, $agg$result);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE($this, $thrown_type) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__flags = 0, $__flags2 = 0, $__pointee = 0, $__pointee5 = 0, $and = 0, $call = 0;
 var $call30 = 0, $cmp = 0, $neg = 0, $neg9 = 0, $or$cond = 0, $retval$2 = 0, $this$tr1 = 0, $thrown_type$tr2 = 0, $tobool = 0, $tobool11 = 0, $tobool18 = 0, $tobool27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($thrown_type | 0) == (0 | 0);
 L1 : do {
  if ($0) {
   $retval$2 = 0;
  } else {
   $this$tr1 = $this;
   $thrown_type$tr2 = $thrown_type;
   while (1) {
    $1 = ___dynamic_cast($thrown_type$tr2, 42704) | 0;
    $cmp = ($1 | 0) == (0 | 0);
    if ($cmp) {
     $retval$2 = 0;
     break L1;
    }
    $__flags = $1 + 8 | 0;
    $2 = HEAP32[$__flags >> 2] | 0;
    $__flags2 = $this$tr1 + 8 | 0;
    $3 = HEAP32[$__flags2 >> 2] | 0;
    $neg = $3 ^ -1;
    $and = $2 & $neg;
    $tobool = ($and | 0) == 0;
    if (!$tobool) {
     $retval$2 = 0;
     break L1;
    }
    $__pointee = $this$tr1 + 12 | 0;
    $4 = HEAP32[$__pointee >> 2] | 0;
    $__pointee5 = $1 + 12 | 0;
    $5 = HEAP32[$__pointee5 >> 2] | 0;
    $call = __ZL8is_equalPKSt9type_infoS1_b($4, $5, 0) | 0;
    if ($call) {
     $retval$2 = 1;
     break L1;
    }
    $neg9 = $3 & 1;
    $tobool11 = ($neg9 | 0) == 0;
    $6 = ($4 | 0) == (0 | 0);
    $or$cond = $tobool11 | $6;
    if ($or$cond) {
     $retval$2 = 0;
     break L1;
    }
    $7 = ___dynamic_cast($4, 42704) | 0;
    $tobool18 = ($7 | 0) == (0 | 0);
    if ($tobool18) {
     break;
    }
    $8 = HEAP32[$__pointee5 >> 2] | 0;
    $9 = ($8 | 0) == (0 | 0);
    if ($9) {
     $retval$2 = 0;
     break L1;
    } else {
     $this$tr1 = $7;
     $thrown_type$tr2 = $8;
    }
   }
   $$pr = HEAP32[$__pointee >> 2] | 0;
   $10 = ($$pr | 0) == (0 | 0);
   if ($10) {
    $retval$2 = 0;
   } else {
    $11 = ___dynamic_cast($$pr, 42736) | 0;
    $tobool27 = ($11 | 0) == (0 | 0);
    if ($tobool27) {
     $retval$2 = 0;
    } else {
     $12 = HEAP32[$__pointee5 >> 2] | 0;
     $call30 = __ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE($11, $12) | 0;
     $retval$2 = $call30;
    }
   }
  }
 } while (0);
 return $retval$2 | 0;
}

function __ZNSt3__214__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEEPFvNS_6vectorIhNS_9allocatorIhEEEEmijRNS_6atomicIbEERjjESA_miiNS_17reference_wrapperISC_EENSH_IjEEmEEEEEPvSL_($__vp) {
 $__vp = $__vp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__end_$i$i$i = 0, $__end_$i$i$i$i = 0, $__end_cap_$i$i$i$i = 0, $__value_$i$i$i39$i$i$i = 0, $add$ptr$i$i = 0, $add$ptr$i22$i = 0, $add$ptr$i30$i = 0, $add$ptr$i37$i = 0, $add$ptr$i44$i = 0;
 var $add$ptr$i51$i = 0, $add$ptr$i58$i = 0, $add$ptr$i65$i = 0, $agg$tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $agg$tmp$i$i = sp;
 __ZNSt3__219__thread_local_dataEv();
 $0 = HEAP32[$__vp >> 2] | 0;
 HEAP32[$__vp >> 2] = 0;
 __ZNSt3__221__thread_specific_ptrINS_15__thread_structEE11set_pointerEPS1_($0);
 $add$ptr$i$i = $__vp + 4 | 0;
 $add$ptr$i22$i = $__vp + 8 | 0;
 $add$ptr$i65$i = $__vp + 20 | 0;
 $add$ptr$i58$i = $__vp + 24 | 0;
 $add$ptr$i51$i = $__vp + 28 | 0;
 $add$ptr$i44$i = $__vp + 32 | 0;
 $add$ptr$i37$i = $__vp + 36 | 0;
 $add$ptr$i30$i = $__vp + 40 | 0;
 $1 = HEAP32[$add$ptr$i$i >> 2] | 0;
 $__end_cap_$i$i$i$i = $__vp + 16 | 0;
 $__end_$i$i$i$i = $agg$tmp$i$i + 4 | 0;
 $__value_$i$i$i39$i$i$i = $agg$tmp$i$i + 8 | 0;
 $2 = HEAP32[$add$ptr$i22$i >> 2] | 0;
 HEAP32[$agg$tmp$i$i >> 2] = $2;
 $__end_$i$i$i = $__vp + 12 | 0;
 $3 = HEAP32[$__end_$i$i$i >> 2] | 0;
 HEAP32[$__end_$i$i$i$i >> 2] = $3;
 $4 = HEAP32[$__end_cap_$i$i$i$i >> 2] | 0;
 HEAP32[$__value_$i$i$i39$i$i$i >> 2] = $4;
 HEAP32[$__end_cap_$i$i$i$i >> 2] = 0;
 HEAP32[$__end_$i$i$i >> 2] = 0;
 HEAP32[$add$ptr$i22$i >> 2] = 0;
 $5 = HEAP32[$add$ptr$i65$i >> 2] | 0;
 $6 = HEAP32[$add$ptr$i58$i >> 2] | 0;
 $7 = HEAP32[$add$ptr$i51$i >> 2] | 0;
 $8 = HEAP32[$add$ptr$i44$i >> 2] | 0;
 $9 = HEAP32[$add$ptr$i37$i >> 2] | 0;
 $10 = HEAP32[$add$ptr$i30$i >> 2] | 0;
 FUNCTION_TABLE_viiiiiii[$1 & 255]($agg$tmp$i$i, $5, $6, $7, $8, $9, $10);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($agg$tmp$i$i);
 __ZNSt3__25tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS2_EEEEPFvNS_6vectorIhNS_9allocatorIhEEEEmijRNS_6atomicIbEERjjES9_miiNS_17reference_wrapperISB_EENSG_IjEEmEED2Ev($__vp);
 __ZdlPv($__vp);
 STACKTOP = sp;
 return 0 | 0;
}

function __ZN10emscripten8internal7InvokerINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJS9_S9_SB_S9_iEE6invokeEPFSB_S9_S9_SB_S9_iEPNS0_11BindingTypeIS9_vEUt_ESI_PSB_SI_i($fn, $args, $args1, $args3, $args5, $args7) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 var $agg$tmp = 0, $agg$tmp10 = 0, $agg$tmp14 = 0, $agg$tmp9 = 0, $call = 0, $call19 = 0, $call23 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $ref$tmp = sp + 48 | 0;
 $agg$tmp = sp + 36 | 0;
 $agg$tmp9 = sp + 24 | 0;
 $agg$tmp10 = sp + 12 | 0;
 $agg$tmp14 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp9, $args1);
 $call = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($args3) | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp10, $call);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp14, $args5);
 $call19 = __ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($args7) | 0;
 FUNCTION_TABLE_viiiiii[$fn & 127]($ref$tmp, $agg$tmp, $agg$tmp9, $agg$tmp10, $agg$tmp14, $call19);
 $call23 = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE10toWireTypeEOSB_($ref$tmp) | 0;
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp14);
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($agg$tmp10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call23 | 0;
}

function _Skein1024_Update($ctx, $msg, $msgByteCnt) {
 $ctx = $ctx | 0;
 $msg = $msg | 0;
 $msgByteCnt = $msgByteCnt | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $add$ptr = 0, $add$ptr23 = 0, $add13 = 0, $add34 = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx31 = 0, $bCnt = 0, $cmp = 0, $cmp18 = 0, $div = 0, $msg$addr$0 = 0, $msg$addr$1 = 0, $msg$addr$2 = 0, $msgByteCnt$addr$0 = 0;
 var $msgByteCnt$addr$1 = 0, $msgByteCnt$addr$2 = 0, $mul = 0, $sub = 0, $sub10 = 0, $sub20 = 0, $sub21 = 0, $tobool = 0, $tobool26 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $bCnt = $ctx + 4 | 0;
 $0 = HEAP32[$bCnt >> 2] | 0;
 $add = $0 + $msgByteCnt | 0;
 $cmp = $add >>> 0 > 128;
 if ($cmp) {
  $tobool = ($0 | 0) == 0;
  if ($tobool) {
   $msg$addr$1 = $msg;
   $msgByteCnt$addr$1 = $msgByteCnt;
  } else {
   $sub = 128 - $0 | 0;
   $tobool6 = ($sub | 0) == 0;
   if ($tobool6) {
    $msg$addr$0 = $msg;
    $msgByteCnt$addr$0 = $msgByteCnt;
   } else {
    $add$ptr = $msg + $sub | 0;
    $sub10 = $msgByteCnt - $sub | 0;
    $arrayidx = ($ctx + 152 | 0) + $0 | 0;
    _memcpy($arrayidx | 0, $msg | 0, $sub | 0) | 0;
    $1 = HEAP32[$bCnt >> 2] | 0;
    $add13 = $1 + $sub | 0;
    HEAP32[$bCnt >> 2] = $add13;
    $msg$addr$0 = $add$ptr;
    $msgByteCnt$addr$0 = $sub10;
   }
   $arraydecay = $ctx + 152 | 0;
   _Skein1024_Process_Block($ctx, $arraydecay, 1, 128);
   HEAP32[$bCnt >> 2] = 0;
   $msg$addr$1 = $msg$addr$0;
   $msgByteCnt$addr$1 = $msgByteCnt$addr$0;
  }
  $cmp18 = $msgByteCnt$addr$1 >>> 0 > 128;
  $sub20 = $msgByteCnt$addr$1 + -1 | 0;
  $mul = $sub20 & -128;
  if ($cmp18) {
   $add$ptr23 = $msg$addr$1 + $mul | 0;
   $sub21 = $msgByteCnt$addr$1 - $mul | 0;
   $div = $sub20 >>> 7;
   _Skein1024_Process_Block($ctx, $msg$addr$1, $div, 128);
   $msg$addr$2 = $add$ptr23;
   $msgByteCnt$addr$2 = $sub21;
  } else {
   $msg$addr$2 = $msg$addr$1;
   $msgByteCnt$addr$2 = $msgByteCnt$addr$1;
  }
 } else {
  $msg$addr$2 = $msg;
  $msgByteCnt$addr$2 = $msgByteCnt;
 }
 $tobool26 = ($msgByteCnt$addr$2 | 0) == 0;
 if ($tobool26) {
  return;
 }
 $2 = HEAP32[$bCnt >> 2] | 0;
 $arrayidx31 = ($ctx + 152 | 0) + $2 | 0;
 _memcpy($arrayidx31 | 0, $msg$addr$2 | 0, $msgByteCnt$addr$2 | 0) | 0;
 $3 = HEAP32[$bCnt >> 2] | 0;
 $add34 = $3 + $msgByteCnt$addr$2 | 0;
 HEAP32[$bCnt >> 2] = $add34;
 return;
}

function _Skein_512_Update($ctx, $msg, $msgByteCnt) {
 $ctx = $ctx | 0;
 $msg = $msg | 0;
 $msgByteCnt = $msgByteCnt | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $add$ptr = 0, $add$ptr23 = 0, $add13 = 0, $add34 = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx31 = 0, $bCnt = 0, $cmp = 0, $cmp18 = 0, $div = 0, $msg$addr$0 = 0, $msg$addr$1 = 0, $msg$addr$2 = 0, $msgByteCnt$addr$0 = 0;
 var $msgByteCnt$addr$1 = 0, $msgByteCnt$addr$2 = 0, $mul = 0, $sub = 0, $sub10 = 0, $sub20 = 0, $sub21 = 0, $tobool = 0, $tobool26 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $bCnt = $ctx + 4 | 0;
 $0 = HEAP32[$bCnt >> 2] | 0;
 $add = $0 + $msgByteCnt | 0;
 $cmp = $add >>> 0 > 64;
 if ($cmp) {
  $tobool = ($0 | 0) == 0;
  if ($tobool) {
   $msg$addr$1 = $msg;
   $msgByteCnt$addr$1 = $msgByteCnt;
  } else {
   $sub = 64 - $0 | 0;
   $tobool6 = ($sub | 0) == 0;
   if ($tobool6) {
    $msg$addr$0 = $msg;
    $msgByteCnt$addr$0 = $msgByteCnt;
   } else {
    $add$ptr = $msg + $sub | 0;
    $sub10 = $msgByteCnt - $sub | 0;
    $arrayidx = ($ctx + 88 | 0) + $0 | 0;
    _memcpy($arrayidx | 0, $msg | 0, $sub | 0) | 0;
    $1 = HEAP32[$bCnt >> 2] | 0;
    $add13 = $1 + $sub | 0;
    HEAP32[$bCnt >> 2] = $add13;
    $msg$addr$0 = $add$ptr;
    $msgByteCnt$addr$0 = $sub10;
   }
   $arraydecay = $ctx + 88 | 0;
   _Skein_512_Process_Block($ctx, $arraydecay, 1, 64);
   HEAP32[$bCnt >> 2] = 0;
   $msg$addr$1 = $msg$addr$0;
   $msgByteCnt$addr$1 = $msgByteCnt$addr$0;
  }
  $cmp18 = $msgByteCnt$addr$1 >>> 0 > 64;
  $sub20 = $msgByteCnt$addr$1 + -1 | 0;
  $mul = $sub20 & -64;
  if ($cmp18) {
   $add$ptr23 = $msg$addr$1 + $mul | 0;
   $sub21 = $msgByteCnt$addr$1 - $mul | 0;
   $div = $sub20 >>> 6;
   _Skein_512_Process_Block($ctx, $msg$addr$1, $div, 64);
   $msg$addr$2 = $add$ptr23;
   $msgByteCnt$addr$2 = $sub21;
  } else {
   $msg$addr$2 = $msg$addr$1;
   $msgByteCnt$addr$2 = $msgByteCnt$addr$1;
  }
 } else {
  $msg$addr$2 = $msg;
  $msgByteCnt$addr$2 = $msgByteCnt;
 }
 $tobool26 = ($msgByteCnt$addr$2 | 0) == 0;
 if ($tobool26) {
  return;
 }
 $2 = HEAP32[$bCnt >> 2] | 0;
 $arrayidx31 = ($ctx + 88 | 0) + $2 | 0;
 _memcpy($arrayidx31 | 0, $msg$addr$2 | 0, $msgByteCnt$addr$2 | 0) | 0;
 $3 = HEAP32[$bCnt >> 2] | 0;
 $add34 = $3 + $msgByteCnt$addr$2 | 0;
 HEAP32[$bCnt >> 2] = $add34;
 return;
}

function _Skein_256_Update($ctx, $msg, $msgByteCnt) {
 $ctx = $ctx | 0;
 $msg = $msg | 0;
 $msgByteCnt = $msgByteCnt | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $add$ptr = 0, $add$ptr23 = 0, $add13 = 0, $add34 = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx31 = 0, $bCnt = 0, $cmp = 0, $cmp18 = 0, $div = 0, $msg$addr$0 = 0, $msg$addr$1 = 0, $msg$addr$2 = 0, $msgByteCnt$addr$0 = 0;
 var $msgByteCnt$addr$1 = 0, $msgByteCnt$addr$2 = 0, $mul = 0, $sub = 0, $sub10 = 0, $sub20 = 0, $sub21 = 0, $tobool = 0, $tobool26 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $bCnt = $ctx + 4 | 0;
 $0 = HEAP32[$bCnt >> 2] | 0;
 $add = $0 + $msgByteCnt | 0;
 $cmp = $add >>> 0 > 32;
 if ($cmp) {
  $tobool = ($0 | 0) == 0;
  if ($tobool) {
   $msg$addr$1 = $msg;
   $msgByteCnt$addr$1 = $msgByteCnt;
  } else {
   $sub = 32 - $0 | 0;
   $tobool6 = ($sub | 0) == 0;
   if ($tobool6) {
    $msg$addr$0 = $msg;
    $msgByteCnt$addr$0 = $msgByteCnt;
   } else {
    $add$ptr = $msg + $sub | 0;
    $sub10 = $msgByteCnt - $sub | 0;
    $arrayidx = ($ctx + 56 | 0) + $0 | 0;
    _memcpy($arrayidx | 0, $msg | 0, $sub | 0) | 0;
    $1 = HEAP32[$bCnt >> 2] | 0;
    $add13 = $1 + $sub | 0;
    HEAP32[$bCnt >> 2] = $add13;
    $msg$addr$0 = $add$ptr;
    $msgByteCnt$addr$0 = $sub10;
   }
   $arraydecay = $ctx + 56 | 0;
   _Skein_256_Process_Block($ctx, $arraydecay, 1, 32);
   HEAP32[$bCnt >> 2] = 0;
   $msg$addr$1 = $msg$addr$0;
   $msgByteCnt$addr$1 = $msgByteCnt$addr$0;
  }
  $cmp18 = $msgByteCnt$addr$1 >>> 0 > 32;
  $sub20 = $msgByteCnt$addr$1 + -1 | 0;
  $mul = $sub20 & -32;
  if ($cmp18) {
   $add$ptr23 = $msg$addr$1 + $mul | 0;
   $sub21 = $msgByteCnt$addr$1 - $mul | 0;
   $div = $sub20 >>> 5;
   _Skein_256_Process_Block($ctx, $msg$addr$1, $div, 32);
   $msg$addr$2 = $add$ptr23;
   $msgByteCnt$addr$2 = $sub21;
  } else {
   $msg$addr$2 = $msg$addr$1;
   $msgByteCnt$addr$2 = $msgByteCnt$addr$1;
  }
 } else {
  $msg$addr$2 = $msg;
  $msgByteCnt$addr$2 = $msgByteCnt;
 }
 $tobool26 = ($msgByteCnt$addr$2 | 0) == 0;
 if ($tobool26) {
  return;
 }
 $2 = HEAP32[$bCnt >> 2] | 0;
 $arrayidx31 = ($ctx + 56 | 0) + $2 | 0;
 _memcpy($arrayidx31 | 0, $msg$addr$2 | 0, $msgByteCnt$addr$2 | 0) | 0;
 $3 = HEAP32[$bCnt >> 2] | 0;
 $add34 = $3 + $msgByteCnt$addr$2 | 0;
 HEAP32[$bCnt >> 2] = $add34;
 return;
}

function __ZN4Core12Cryptography20secretKeyToPublicKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERS7_($privateKey, $publicKey) {
 $privateKey = $privateKey | 0;
 $publicKey = $publicKey | 0;
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i$i$i$i$i = 0, $__size_$i45$i$i$i$i = 0, $call1 = 0, $l_privateKey = 0, $l_publicKey = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $l_privateKey = sp + 48 | 0;
 $l_publicKey = sp + 16 | 0;
 $ref$tmp = sp;
 __ZN6Crypto9SecretKeyC2Ev($l_privateKey);
 __ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($privateKey, $l_privateKey);
 __ZN6Crypto9PublicKeyC2Ev($l_publicKey);
 $call1 = __ZN6Crypto24secret_key_to_public_keyERKNS_9SecretKeyERNS_9PublicKeyE($l_privateKey, $l_publicKey) | 0;
 if (!$call1) {
  STACKTOP = sp;
  return;
 }
 __ZN6Common8podToHexIN6Crypto9PublicKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($ref$tmp, $l_publicKey);
 $__size_$i$i$i$i$i = $publicKey + 11 | 0;
 $0 = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
 $tobool$i$i$i$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i$i$i$i) {
  $1 = HEAP32[$publicKey >> 2] | 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($1, 0);
  $__size_$i45$i$i$i$i = $publicKey + 4 | 0;
  HEAP32[$__size_$i45$i$i$i$i >> 2] = 0;
  $$pr = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
  $tobool$i$i$i$i = $$pr << 24 >> 24 < 0;
  if ($tobool$i$i$i$i) {
   $2 = HEAP32[$publicKey >> 2] | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2);
   $__cap_$i$i$i$i$i = $publicKey + 8 | 0;
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  __ZNSt3__211char_traitsIcE6assignERcRKc($publicKey, 0);
  HEAP8[$__size_$i$i$i$i$i >> 0] = 0;
 };
 HEAP32[$publicKey >> 2] = HEAP32[$ref$tmp >> 2] | 0;
 HEAP32[$publicKey + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2] | 0;
 HEAP32[$publicKey + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2] | 0;
 HEAP32[$ref$tmp >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZN6Crypto8Multisig31calculate_multisig_private_keysERKNS_9SecretKeyERKNSt3__26vectorINS_9PublicKeyENS4_9allocatorIS6_EEEE($agg$result, $ourPrivateSpendKey, $publicKeys$0$0$0$val, $publicKeys$0$0$1$val) {
 $agg$result = $agg$result | 0;
 $ourPrivateSpendKey = $ourPrivateSpendKey | 0;
 $publicKeys$0$0$0$val = $publicKeys$0$0$0$val | 0;
 $publicKeys$0$0$1$val = $publicKeys$0$0$1$val | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__begin$sroa$0$06 = 0, $__end_$i$i = 0, $__value_$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i5 = 0, $incdec$ptr$i = 0, $incdec$ptr$i130 = 0, $key = 0, $ref$tmp = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $key = sp + 32 | 0;
 $ref$tmp = sp;
 HEAP32[$agg$result >> 2] = 0;
 $__end_$i$i = $agg$result + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $agg$result + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 $cmp$i$i5 = ($publicKeys$0$0$0$val | 0) == ($publicKeys$0$0$1$val | 0);
 if ($cmp$i$i5) {
  STACKTOP = sp;
  return;
 }
 $__begin$sroa$0$06 = $publicKeys$0$0$0$val;
 while (1) {
  dest = $key;
  src = $__begin$sroa$0$06;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  __ZN6Crypto8Multisig30calculate_multisig_private_keyERKNS_9PublicKeyERKNS_9SecretKeyE($ref$tmp, $key, $ourPrivateSpendKey);
  $0 = HEAP32[$__end_$i$i >> 2] | 0;
  $1 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
  $cmp$i = $0 >>> 0 < $1 >>> 0;
  if ($cmp$i) {
   dest = $0;
   src = $ref$tmp;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $2 = HEAP32[$__end_$i$i >> 2] | 0;
   $incdec$ptr$i130 = $2 + 32 | 0;
   HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i130;
  } else {
   __ZNSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($agg$result, $ref$tmp);
  }
  $incdec$ptr$i = $__begin$sroa$0$06 + 32 | 0;
  $cmp$i$i = ($incdec$ptr$i | 0) == ($publicKeys$0$0$1$val | 0);
  if ($cmp$i$i) {
   break;
  } else {
   $__begin$sroa$0$06 = $incdec$ptr$i;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__224uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEiRT_RKNS1_10param_typeE() {
 var $0 = 0, $__e = 0, $add = 0, $add19 = 0, $and = 0, $call = 0, $call16 = 0, $call2 = 0, $call6 = 0, $cmp = 0, $cmp13 = 0, $cmp17 = 0, $cmp4 = 0, $retval$0 = 0, $shr = 0, $spec$select = 0, $sub = 0, $sub10 = 0, $sub12 = 0, $sub9 = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $tmp = sp + 36 | 0;
 $__e = sp;
 $call = __ZNKSt3__224uniform_int_distributionIiE10param_type1bEv() | 0;
 $call2 = __ZNKSt3__224uniform_int_distributionIiE10param_type1aEv() | 0;
 $sub = $call - $call2 | 0;
 $add = $sub + 1 | 0;
 $cmp = ($sub | 0) == 0;
 if ($cmp) {
  $retval$0 = $call2;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $cmp4 = ($add | 0) == 0;
 if ($cmp4) {
  __ZNSt3__225__independent_bits_engineINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEjEC2ERS2_m($tmp, 32);
  $call6 = __ZNSt3__225__independent_bits_engineINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEjEclEv($tmp) | 0;
  $retval$0 = $call6;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $0 = Math_clz32($add | 0) | 0;
 $sub9 = 32 - $0 | 0;
 $sub12 = 33 - $sub9 | 0;
 $shr = -1 >>> $sub12;
 $and = $shr & $add;
 $cmp13 = ($and | 0) == 0;
 $sub10 = $cmp13 << 31 >> 31;
 $spec$select = $sub9 + $sub10 | 0;
 __ZNSt3__225__independent_bits_engineINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEjEC2ERS2_m($__e, $spec$select);
 while (1) {
  $call16 = __ZNSt3__225__independent_bits_engineINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEjEclEv($__e) | 0;
  $cmp17 = $call16 >>> 0 < $add >>> 0;
  if ($cmp17) {
   break;
  }
 }
 $add19 = $call2 + $call16 | 0;
 $retval$0 = $add19;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN10emscripten8internal7InvokerI18PreparedSignaturesJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_NS3_6vectorIS9_NS7_IS9_EEEEiS9_EE6invokeEPFS2_S9_S9_SC_iS9_EPNS0_11BindingTypeIS9_vEUt_ESJ_PSC_iSJ_($fn, $args, $args1, $args3, $args5, $args7) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 var $agg$tmp = 0, $agg$tmp10 = 0, $agg$tmp17 = 0, $agg$tmp9 = 0, $call = 0, $call16 = 0, $call23 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $ref$tmp = sp + 48 | 0;
 $agg$tmp = sp + 36 | 0;
 $agg$tmp9 = sp + 24 | 0;
 $agg$tmp10 = sp + 12 | 0;
 $agg$tmp17 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp9, $args1);
 $call = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($args3) | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp10, $call);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp17, $args7);
 $call16 = __ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($args5) | 0;
 FUNCTION_TABLE_viiiiii[$fn & 127]($ref$tmp, $agg$tmp, $agg$tmp9, $agg$tmp10, $call16, $agg$tmp17);
 $call23 = __ZN10emscripten8internal18GenericBindingTypeI18PreparedSignaturesE10toWireTypeEOS2_($ref$tmp) | 0;
 __ZN18PreparedSignaturesD2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp17);
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($agg$tmp10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call23 | 0;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $cmp = 0, $cmp6 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$0 = 0, $retval$2 = 0, $src2dst_offset = 0, $static_ptr = 0, $static_type = 0, $vfn = 0, $vtable = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $info = sp;
 $call = __ZL8is_equalPKSt9type_infoS1_b($this, $thrown_type, 0) | 0;
 if ($call) {
  $retval$2 = 1;
 } else {
  $0 = ($thrown_type | 0) == (0 | 0);
  if ($0) {
   $retval$2 = 0;
  } else {
   $1 = ___dynamic_cast($thrown_type, 42584) | 0;
   $cmp = ($1 | 0) == (0 | 0);
   if ($cmp) {
    $retval$2 = 0;
   } else {
    HEAP32[$info >> 2] = $1;
    $static_ptr = $info + 4 | 0;
    HEAP32[$static_ptr >> 2] = 0;
    $static_type = $info + 8 | 0;
    HEAP32[$static_type >> 2] = $this;
    $src2dst_offset = $info + 12 | 0;
    HEAP32[$src2dst_offset >> 2] = -1;
    $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
    $path_dst_ptr_to_static_ptr = $info + 24 | 0;
    $number_of_dst_type = $info + 48 | 0;
    dest = $dst_ptr_leading_to_static_ptr;
    stop = dest + 36 | 0;
    do {
     HEAP32[dest >> 2] = 0 | 0;
     dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP16[$dst_ptr_leading_to_static_ptr + 36 >> 1] = 0 | 0;
    HEAP8[$dst_ptr_leading_to_static_ptr + 38 >> 0] = 0 | 0;
    HEAP32[$number_of_dst_type >> 2] = 1;
    $vtable = HEAP32[$1 >> 2] | 0;
    $vfn = $vtable + 28 | 0;
    $2 = HEAP32[$vfn >> 2] | 0;
    $3 = HEAP32[$adjustedPtr >> 2] | 0;
    FUNCTION_TABLE_viiii[$2 & 255]($1, $info, $3, 1);
    $4 = HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
    $cmp6 = ($4 | 0) == 1;
    if ($cmp6) {
     $5 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
     HEAP32[$adjustedPtr >> 2] = $5;
     $retval$0 = 1;
    } else {
     $retval$0 = 0;
    }
    $retval$2 = $retval$0;
   }
  }
 }
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZN4Core12Cryptography28calculateMultisigPrivateKeysERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_6vectorIS7_NS5_IS7_EEEE($agg$result, $ourPrivateSpendKey, $publicKeys) {
 $agg$result = $agg$result | 0;
 $ourPrivateSpendKey = $ourPrivateSpendKey | 0;
 $publicKeys = $publicKeys | 0;
 var $__end_$i$i = 0, $__end_$i$i31 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i35 = 0, $l_multisigKeys = 0, $l_ourPrivateSpendKey = 0, $l_publicKeys = 0, $l_publicKeys$idx$val = 0, $l_publicKeys$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $l_ourPrivateSpendKey = sp + 24 | 0;
 $l_publicKeys = sp + 12 | 0;
 $l_multisigKeys = sp;
 __ZN6Crypto9SecretKeyC2Ev($l_ourPrivateSpendKey);
 __ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($ourPrivateSpendKey, $l_ourPrivateSpendKey);
 HEAP32[$l_publicKeys >> 2] = 0;
 $__end_$i$i = $l_publicKeys + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $l_publicKeys + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 __ZN4Core13toTypedVectorIN6Crypto9PublicKeyEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($publicKeys, $l_publicKeys);
 $l_publicKeys$idx$val = HEAP32[$l_publicKeys >> 2] | 0;
 $l_publicKeys$idx1$val = HEAP32[$__end_$i$i >> 2] | 0;
 __ZN6Crypto8Multisig31calculate_multisig_private_keysERKNS_9SecretKeyERKNSt3__26vectorINS_9PublicKeyENS4_9allocatorIS6_EEEE($l_multisigKeys, $l_ourPrivateSpendKey, $l_publicKeys$idx$val, $l_publicKeys$idx1$val);
 HEAP32[$agg$result >> 2] = 0;
 $__end_$i$i31 = $agg$result + 4 | 0;
 HEAP32[$__end_$i$i31 >> 2] = 0;
 $__value_$i$i$i$i35 = $agg$result + 8 | 0;
 HEAP32[$__value_$i$i$i$i35 >> 2] = 0;
 __ZN4Core14toStringVectorIN6Crypto9SecretKeyEEEvRKNSt3__26vectorIT_NS3_9allocatorIS5_EEEERNS4_INS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEENS6_ISF_EEEE($l_multisigKeys, $agg$result);
 __ZNSt3__213__vector_baseIN6Crypto9SecretKeyENS_9allocatorIS2_EEED2Ev($l_multisigKeys);
 __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($l_publicKeys);
 STACKTOP = sp;
 return;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 var aligned_dest_end = 0;
 var block_aligned_dest_end = 0;
 var dest_end = 0;
 if ((num | 0) >= 8192) {
  _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
  return dest | 0;
 }
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if ((num | 0) == 0) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2] | 0;
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2] | 0;
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2] | 0;
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2] | 0;
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2] | 0;
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2] | 0;
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2] | 0;
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2] | 0;
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2] | 0;
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2] | 0;
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2] | 0;
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2] | 0;
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2] | 0;
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2] | 0;
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2] | 0;
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function __ZN6Crypto8Multisig7addKeysINS_9SecretKeyEEET_RKNSt3__26vectorIS3_NS4_9allocatorIS3_EEEE($agg$result, $keys) {
 $agg$result = $agg$result | 0;
 $keys = $keys | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_$i = 0, $call9 = 0, $cmp8 = 0, $cmp89 = 0, $i$010 = 0, $inc = 0, $result = 0, $sub$ptr$div$i28 = 0, $sub$ptr$div$i288 = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i27 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $result = sp;
 $__end_$i = $keys + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$keys >> 2] | 0;
 $sub$ptr$rhs$cast$i = $1;
 $sub$ptr$sub$i = $0 - $sub$ptr$rhs$cast$i | 0;
 switch ($sub$ptr$sub$i | 0) {
 case 0:
  {
   __ZN6Crypto9SecretKeyC2Ev($agg$result);
   STACKTOP = sp;
   return;
   break;
  }
 case 32:
  {
   dest = $agg$result;
   src = $1;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   dest = $result;
   src = $1;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $sub$ptr$div$i288 = $sub$ptr$sub$i >> 5;
   $cmp89 = $sub$ptr$div$i288 >>> 0 > 1;
   if ($cmp89) {
    $i$010 = 1;
    while (1) {
     $call9 = __ZNKSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEE2atEm($keys, $i$010) | 0;
     __ZN6Crypto8Multisig7addKeysINS_9SecretKeyEEEvRKT_S5_RS3_($result, $call9, $result);
     $inc = $i$010 + 1 | 0;
     $2 = HEAP32[$__end_$i >> 2] | 0;
     $3 = HEAP32[$keys >> 2] | 0;
     $sub$ptr$sub$i27 = $2 - $3 | 0;
     $sub$ptr$div$i28 = $sub$ptr$sub$i27 >> 5;
     $cmp8 = $inc >>> 0 < $sub$ptr$div$i28 >>> 0;
     if ($cmp8) {
      $i$010 = $inc;
     } else {
      break;
     }
    }
   }
   dest = $agg$result;
   src = $result;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   STACKTOP = sp;
   return;
  }
 }
}

function __ZN6Crypto8Multisig7addKeysINS_9PublicKeyEEET_RKNSt3__26vectorIS3_NS4_9allocatorIS3_EEEE($agg$result, $keys) {
 $agg$result = $agg$result | 0;
 $keys = $keys | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_$i = 0, $call9 = 0, $cmp8 = 0, $cmp89 = 0, $i$010 = 0, $inc = 0, $result = 0, $sub$ptr$div$i28 = 0, $sub$ptr$div$i288 = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i27 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $result = sp;
 $__end_$i = $keys + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$keys >> 2] | 0;
 $sub$ptr$rhs$cast$i = $1;
 $sub$ptr$sub$i = $0 - $sub$ptr$rhs$cast$i | 0;
 switch ($sub$ptr$sub$i | 0) {
 case 0:
  {
   __ZN6Crypto9PublicKeyC2Ev($agg$result);
   STACKTOP = sp;
   return;
   break;
  }
 case 32:
  {
   dest = $agg$result;
   src = $1;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   dest = $result;
   src = $1;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $sub$ptr$div$i288 = $sub$ptr$sub$i >> 5;
   $cmp89 = $sub$ptr$div$i288 >>> 0 > 1;
   if ($cmp89) {
    $i$010 = 1;
    while (1) {
     $call9 = __ZNKSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE2atEm($keys, $i$010) | 0;
     __ZN6Crypto8Multisig7addKeysINS_9PublicKeyEEEvRKT_S5_RS3_($result, $call9, $result);
     $inc = $i$010 + 1 | 0;
     $2 = HEAP32[$__end_$i >> 2] | 0;
     $3 = HEAP32[$keys >> 2] | 0;
     $sub$ptr$sub$i27 = $2 - $3 | 0;
     $sub$ptr$div$i28 = $sub$ptr$sub$i27 >> 5;
     $cmp8 = $inc >>> 0 < $sub$ptr$div$i28 >>> 0;
     if ($cmp8) {
      $i$010 = $inc;
     } else {
      break;
     }
    }
   }
   dest = $agg$result;
   src = $result;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   STACKTOP = sp;
   return;
  }
 }
}

function __ZN6Crypto8Multisig7addKeysINS_8KeyImageEEET_RKNSt3__26vectorIS3_NS4_9allocatorIS3_EEEE($agg$result, $keys) {
 $agg$result = $agg$result | 0;
 $keys = $keys | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_$i = 0, $call9 = 0, $cmp8 = 0, $cmp89 = 0, $i$010 = 0, $inc = 0, $result = 0, $sub$ptr$div$i28 = 0, $sub$ptr$div$i288 = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i27 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $result = sp;
 $__end_$i = $keys + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$keys >> 2] | 0;
 $sub$ptr$rhs$cast$i = $1;
 $sub$ptr$sub$i = $0 - $sub$ptr$rhs$cast$i | 0;
 switch ($sub$ptr$sub$i | 0) {
 case 0:
  {
   __ZN6Crypto8KeyImageC2Ev($agg$result);
   STACKTOP = sp;
   return;
   break;
  }
 case 32:
  {
   dest = $agg$result;
   src = $1;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   dest = $result;
   src = $1;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $sub$ptr$div$i288 = $sub$ptr$sub$i >> 5;
   $cmp89 = $sub$ptr$div$i288 >>> 0 > 1;
   if ($cmp89) {
    $i$010 = 1;
    while (1) {
     $call9 = __ZNKSt3__26vectorIN6Crypto8KeyImageENS_9allocatorIS2_EEE2atEm($keys, $i$010) | 0;
     __ZN6Crypto8Multisig7addKeysINS_8KeyImageEEEvRKT_S5_RS3_($result, $call9, $result);
     $inc = $i$010 + 1 | 0;
     $2 = HEAP32[$__end_$i >> 2] | 0;
     $3 = HEAP32[$keys >> 2] | 0;
     $sub$ptr$sub$i27 = $2 - $3 | 0;
     $sub$ptr$div$i28 = $sub$ptr$sub$i27 >> 5;
     $cmp8 = $inc >>> 0 < $sub$ptr$div$i28 >>> 0;
     if ($cmp8) {
      $i$010 = $inc;
     } else {
      break;
     }
    }
   }
   dest = $agg$result;
   src = $result;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   STACKTOP = sp;
   return;
  }
 }
}

function _select_552($t, $pos, $b) {
 $t = $t | 0;
 $pos = $pos | 0;
 $b = $b | 0;
 var $and = 0, $arraydecay28 = 0, $arraydecay30 = 0, $arraydecay33 = 0, $arraydecay35 = 0, $arrayidx11 = 0, $arrayidx14 = 0, $arrayidx17 = 0, $arrayidx20 = 0, $arrayidx23 = 0, $arrayidx26 = 0, $arrayidx5 = 0, $arrayidx8 = 0, $call = 0, $call12 = 0, $call15 = 0, $call18 = 0, $call21 = 0, $call24 = 0, $call27 = 0;
 var $call6 = 0, $call9 = 0, $conv = 0, $conv1 = 0, $conv4 = 0, $minust = 0, $shl = 0, $sub = 0, $sub3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $minust = sp;
 $call = _negative($b) | 0;
 $conv = $b << 24 >> 24;
 $conv1 = $call & 255;
 $sub = 0 - $conv1 | 0;
 $and = $sub & $conv;
 $shl = $and << 1;
 $sub3 = $conv - $shl | 0;
 $conv4 = $sub3 & 255;
 _ge_precomp_0($t);
 $arrayidx5 = 512 + ($pos * 960 | 0) | 0;
 $call6 = _equal($conv4, 1) | 0;
 _ge_precomp_cmov($t, $arrayidx5, $call6);
 $arrayidx8 = (512 + ($pos * 960 | 0) | 0) + 120 | 0;
 $call9 = _equal($conv4, 2) | 0;
 _ge_precomp_cmov($t, $arrayidx8, $call9);
 $arrayidx11 = (512 + ($pos * 960 | 0) | 0) + 240 | 0;
 $call12 = _equal($conv4, 3) | 0;
 _ge_precomp_cmov($t, $arrayidx11, $call12);
 $arrayidx14 = (512 + ($pos * 960 | 0) | 0) + 360 | 0;
 $call15 = _equal($conv4, 4) | 0;
 _ge_precomp_cmov($t, $arrayidx14, $call15);
 $arrayidx17 = (512 + ($pos * 960 | 0) | 0) + 480 | 0;
 $call18 = _equal($conv4, 5) | 0;
 _ge_precomp_cmov($t, $arrayidx17, $call18);
 $arrayidx20 = (512 + ($pos * 960 | 0) | 0) + 600 | 0;
 $call21 = _equal($conv4, 6) | 0;
 _ge_precomp_cmov($t, $arrayidx20, $call21);
 $arrayidx23 = (512 + ($pos * 960 | 0) | 0) + 720 | 0;
 $call24 = _equal($conv4, 7) | 0;
 _ge_precomp_cmov($t, $arrayidx23, $call24);
 $arrayidx26 = (512 + ($pos * 960 | 0) | 0) + 840 | 0;
 $call27 = _equal($conv4, 8) | 0;
 _ge_precomp_cmov($t, $arrayidx26, $call27);
 $arraydecay28 = $t + 40 | 0;
 _fe_copy($minust, $arraydecay28);
 $arraydecay30 = $minust + 40 | 0;
 _fe_copy($arraydecay30, $t);
 $arraydecay33 = $minust + 80 | 0;
 $arraydecay35 = $t + 80 | 0;
 _fe_neg($arraydecay33, $arraydecay35);
 _ge_precomp_cmov($t, $minust, $call);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEE18__construct_at_endINS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESE_SE_m($this, $__first$0, $__last$0) {
 $this = $this | 0;
 $__first$0 = $__first$0 | 0;
 $__last$0 = $__last$0 | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__end_ = 0, $__parent_$i$i$i$i = 0, $__x$addr$i$i$i$i$0 = 0, $__x$addr$i$i4$i$0$in = 0, $agg$tmp5$sroa$0$014 = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i13 = 0, $cmp$i$i5$i = 0, $cmp$i6$i$i$i = 0, $incdec$ptr$i = 0;
 var $retval$i$i$i$0 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $__end_ = $this + 4 | 0;
 $cmp$i$i$i13 = ($__first$0 | 0) == ($__last$0 | 0);
 if ($cmp$i$i$i13) {
  return;
 }
 $$pre = HEAP32[$__end_ >> 2] | 0;
 $1 = $$pre;
 $agg$tmp5$sroa$0$014 = $__first$0;
 while (1) {
  $0 = $agg$tmp5$sroa$0$014 + 13 | 0;
  dest = $1;
  src = $0;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $2 = $agg$tmp5$sroa$0$014 + 4 | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  $cmp$i$i5$i = ($3 | 0) == (0 | 0);
  if ($cmp$i$i5$i) {
   $__x$addr$i$i4$i$0$in = $agg$tmp5$sroa$0$014;
   while (1) {
    $__parent_$i$i$i$i = $__x$addr$i$i4$i$0$in + 8 | 0;
    $5 = HEAP32[$__parent_$i$i$i$i >> 2] | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $cmp$i6$i$i$i = ($6 | 0) == ($__x$addr$i$i4$i$0$in | 0);
    if ($cmp$i6$i$i$i) {
     $retval$i$i$i$0 = $5;
     break;
    } else {
     $__x$addr$i$i4$i$0$in = $5;
    }
   }
  } else {
   $__x$addr$i$i$i$i$0 = $3;
   while (1) {
    $4 = HEAP32[$__x$addr$i$i$i$i$0 >> 2] | 0;
    $cmp$i$i$i$i = ($4 | 0) == (0 | 0);
    if ($cmp$i$i$i$i) {
     break;
    } else {
     $__x$addr$i$i$i$i$0 = $4;
    }
   }
   $retval$i$i$i$0 = $__x$addr$i$i$i$i$0;
  }
  $7 = HEAP32[$__end_ >> 2] | 0;
  $incdec$ptr$i = $7 + 32 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr$i;
  $cmp$i$i$i = ($retval$i$i$i$0 | 0) == ($__last$0 | 0);
  if ($cmp$i$i$i) {
   break;
  } else {
   $1 = $incdec$ptr$i;
   $agg$tmp5$sroa$0$014 = $retval$i$i$i$0;
  }
 }
 return;
}

function __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE18__construct_at_endINS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESE_SE_m($this, $__first$0, $__last$0) {
 $this = $this | 0;
 $__first$0 = $__first$0 | 0;
 $__last$0 = $__last$0 | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__end_ = 0, $__parent_$i$i$i$i = 0, $__x$addr$i$i$i$i$0 = 0, $__x$addr$i$i4$i$0$in = 0, $agg$tmp5$sroa$0$014 = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i13 = 0, $cmp$i$i5$i = 0, $cmp$i6$i$i$i = 0, $incdec$ptr$i = 0;
 var $retval$i$i$i$0 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $__end_ = $this + 4 | 0;
 $cmp$i$i$i13 = ($__first$0 | 0) == ($__last$0 | 0);
 if ($cmp$i$i$i13) {
  return;
 }
 $$pre = HEAP32[$__end_ >> 2] | 0;
 $1 = $$pre;
 $agg$tmp5$sroa$0$014 = $__first$0;
 while (1) {
  $0 = $agg$tmp5$sroa$0$014 + 13 | 0;
  dest = $1;
  src = $0;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $2 = $agg$tmp5$sroa$0$014 + 4 | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  $cmp$i$i5$i = ($3 | 0) == (0 | 0);
  if ($cmp$i$i5$i) {
   $__x$addr$i$i4$i$0$in = $agg$tmp5$sroa$0$014;
   while (1) {
    $__parent_$i$i$i$i = $__x$addr$i$i4$i$0$in + 8 | 0;
    $5 = HEAP32[$__parent_$i$i$i$i >> 2] | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $cmp$i6$i$i$i = ($6 | 0) == ($__x$addr$i$i4$i$0$in | 0);
    if ($cmp$i6$i$i$i) {
     $retval$i$i$i$0 = $5;
     break;
    } else {
     $__x$addr$i$i4$i$0$in = $5;
    }
   }
  } else {
   $__x$addr$i$i$i$i$0 = $3;
   while (1) {
    $4 = HEAP32[$__x$addr$i$i$i$i$0 >> 2] | 0;
    $cmp$i$i$i$i = ($4 | 0) == (0 | 0);
    if ($cmp$i$i$i$i) {
     break;
    } else {
     $__x$addr$i$i$i$i$0 = $4;
    }
   }
   $retval$i$i$i$0 = $__x$addr$i$i$i$i$0;
  }
  $7 = HEAP32[$__end_ >> 2] | 0;
  $incdec$ptr$i = $7 + 32 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr$i;
  $cmp$i$i$i = ($retval$i$i$i$0 | 0) == ($__last$0 | 0);
  if ($cmp$i$i$i) {
   break;
  } else {
   $1 = $incdec$ptr$i;
   $agg$tmp5$sroa$0$014 = $retval$i$i$i$0;
  }
 }
 return;
}

function __ZNSt3__26vectorIN6Crypto8KeyImageENS_9allocatorIS2_EEE18__construct_at_endINS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESE_SE_m($this, $__first$0, $__last$0) {
 $this = $this | 0;
 $__first$0 = $__first$0 | 0;
 $__last$0 = $__last$0 | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__end_ = 0, $__parent_$i$i$i$i = 0, $__x$addr$i$i$i$i$0 = 0, $__x$addr$i$i4$i$0$in = 0, $agg$tmp5$sroa$0$014 = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i13 = 0, $cmp$i$i5$i = 0, $cmp$i6$i$i$i = 0, $incdec$ptr$i = 0;
 var $retval$i$i$i$0 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $__end_ = $this + 4 | 0;
 $cmp$i$i$i13 = ($__first$0 | 0) == ($__last$0 | 0);
 if ($cmp$i$i$i13) {
  return;
 }
 $$pre = HEAP32[$__end_ >> 2] | 0;
 $1 = $$pre;
 $agg$tmp5$sroa$0$014 = $__first$0;
 while (1) {
  $0 = $agg$tmp5$sroa$0$014 + 13 | 0;
  dest = $1;
  src = $0;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $2 = $agg$tmp5$sroa$0$014 + 4 | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  $cmp$i$i5$i = ($3 | 0) == (0 | 0);
  if ($cmp$i$i5$i) {
   $__x$addr$i$i4$i$0$in = $agg$tmp5$sroa$0$014;
   while (1) {
    $__parent_$i$i$i$i = $__x$addr$i$i4$i$0$in + 8 | 0;
    $5 = HEAP32[$__parent_$i$i$i$i >> 2] | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $cmp$i6$i$i$i = ($6 | 0) == ($__x$addr$i$i4$i$0$in | 0);
    if ($cmp$i6$i$i$i) {
     $retval$i$i$i$0 = $5;
     break;
    } else {
     $__x$addr$i$i4$i$0$in = $5;
    }
   }
  } else {
   $__x$addr$i$i$i$i$0 = $3;
   while (1) {
    $4 = HEAP32[$__x$addr$i$i$i$i$0 >> 2] | 0;
    $cmp$i$i$i$i = ($4 | 0) == (0 | 0);
    if ($cmp$i$i$i$i) {
     break;
    } else {
     $__x$addr$i$i$i$i$0 = $4;
    }
   }
   $retval$i$i$i$0 = $__x$addr$i$i$i$i$0;
  }
  $7 = HEAP32[$__end_ >> 2] | 0;
  $incdec$ptr$i = $7 + 32 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr$i;
  $cmp$i$i$i = ($retval$i$i$i$0 | 0) == ($__last$0 | 0);
  if ($cmp$i$i$i) {
   break;
  } else {
   $1 = $incdec$ptr$i;
   $agg$tmp5$sroa$0$014 = $retval$i$i$i$0;
  }
 }
 return;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_ = 0, $__end_$i = 0, $__end_cap_$i = 0, $__v = 0, $add = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp3$i = 0, $incdec$ptr = 0, $mul$i = 0, $spec$select = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $__v = sp;
 $__end_cap_$i = $this + 8 | 0;
 $__end_$i = $this + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $sub$ptr$div$i = ($sub$ptr$sub$i | 0) / 12 & -1;
 $add = $sub$ptr$div$i + 1 | 0;
 $cmp$i = $add >>> 0 > 357913941;
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 } else {
  $2 = HEAP32[$__end_cap_$i >> 2] | 0;
  $sub$ptr$sub$i$i$i = $2 - $1 | 0;
  $sub$ptr$div$i$i$i = ($sub$ptr$sub$i$i$i | 0) / 12 & -1;
  $cmp3$i = $sub$ptr$div$i$i$i >>> 0 < 178956970;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  $cmp$i$i$i$i = $mul$i >>> 0 < $add >>> 0;
  $$sroa$speculated = $cmp$i$i$i$i ? $add : $mul$i;
  $spec$select = $cmp3$i ? $$sroa$speculated : 357913941;
  __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_($__v, $spec$select, $sub$ptr$div$i, $__end_cap_$i);
  $__end_ = $__v + 8 | 0;
  $3 = HEAP32[$__end_ >> 2] | 0;
  HEAP32[$3 >> 2] = HEAP32[$__x >> 2] | 0;
  HEAP32[$3 + 4 >> 2] = HEAP32[$__x + 4 >> 2] | 0;
  HEAP32[$3 + 8 >> 2] = HEAP32[$__x + 8 >> 2] | 0;
  HEAP32[$__x >> 2] = 0 | 0;
  HEAP32[$__x + 4 >> 2] = 0 | 0;
  HEAP32[$__x + 8 >> 2] = 0 | 0;
  $incdec$ptr = $3 + 12 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr;
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this, $__v);
  __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function _mul128($0, $1, $2, $3, $product_hi) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $product_hi = $product_hi | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = _hi_dword($0, $1) | 0;
 $5 = getTempRet0() | 0;
 $6 = _lo_dword($0, $1) | 0;
 $7 = getTempRet0() | 0;
 $8 = _hi_dword($2, $3) | 0;
 $9 = getTempRet0() | 0;
 $10 = _lo_dword($2, $3) | 0;
 $11 = getTempRet0() | 0;
 $12 = ___muldi3($8 | 0, $9 | 0, $4 | 0, $5 | 0) | 0;
 $13 = getTempRet0() | 0;
 $14 = ___muldi3($10 | 0, $11 | 0, $4 | 0, $5 | 0) | 0;
 $15 = getTempRet0() | 0;
 $16 = ___muldi3($8 | 0, $9 | 0, $6 | 0, $7 | 0) | 0;
 $17 = getTempRet0() | 0;
 $18 = ___muldi3($10 | 0, $11 | 0, $6 | 0, $7 | 0) | 0;
 $19 = getTempRet0() | 0;
 $20 = _i64Add($14 | 0, $15 | 0, $16 | 0, $17 | 0) | 0;
 $21 = getTempRet0() | 0;
 $22 = $21 >>> 0 < $15 >>> 0;
 $23 = $20 >>> 0 < $14 >>> 0;
 $24 = ($21 | 0) == ($15 | 0);
 $25 = $24 & $23;
 $26 = $22 | $25;
 $27 = $26 & 1;
 $28 = _i64Add(0, $20 | 0, $18 | 0, $19 | 0) | 0;
 $29 = getTempRet0() | 0;
 $30 = $29 >>> 0 < $19 >>> 0;
 $31 = $28 >>> 0 < $18 >>> 0;
 $32 = ($29 | 0) == ($19 | 0);
 $33 = $32 & $31;
 $34 = $30 | $33;
 $35 = $34 & 1;
 $36 = _i64Add($21 | 0, 0, $12 | 0, $13 | 0) | 0;
 $37 = getTempRet0() | 0;
 $38 = _i64Add($36 | 0, $37 | 0, 0, $27 | 0) | 0;
 $39 = getTempRet0() | 0;
 $40 = _i64Add($38 | 0, $39 | 0, $35 | 0, 0) | 0;
 $41 = getTempRet0() | 0;
 $42 = $product_hi;
 $43 = $42;
 HEAP32[$43 >> 2] = $40;
 $44 = $42 + 4 | 0;
 $45 = $44;
 HEAP32[$45 >> 2] = $41;
 $46 = $13 >>> 0 > $41 >>> 0;
 $47 = $12 >>> 0 > $40 >>> 0;
 $48 = ($13 | 0) == ($41 | 0);
 $49 = $48 & $47;
 $50 = $46 | $49;
 if ($50) {
  ___assert_fail(46042 | 0, 46060 | 0, 85, 46116 | 0);
 } else {
  setTempRet0($29 | 0);
  return $28 | 0;
 }
 return 0 | 0;
}

function _argon2_hash($pwd, $pwdlen, $salt, $hash) {
 $pwd = $pwd | 0;
 $pwdlen = $pwdlen | 0;
 $salt = $salt | 0;
 $hash = $hash | 0;
 var $allocate_cbk = 0, $call = 0, $call20 = 0, $cmp21 = 0, $context = 0, $flags = 0, $free_cbk = 0, $lanes = 0, $m_cost18 = 0, $outlen = 0, $pwd13 = 0, $pwdlen14 = 0, $salt15 = 0, $saltlen16 = 0, $secret = 0, $t_cost17 = 0, $threads = 0, $tobool = 0, $tobool24 = 0, $version19 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $context = sp;
 $call = _malloc(32) | 0;
 $tobool = ($call | 0) == (0 | 0);
 if ($tobool) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$context >> 2] = $call;
 $outlen = $context + 4 | 0;
 HEAP32[$outlen >> 2] = 32;
 $pwd13 = $context + 8 | 0;
 HEAP32[$pwd13 >> 2] = $pwd;
 $pwdlen14 = $context + 12 | 0;
 HEAP32[$pwdlen14 >> 2] = $pwdlen;
 $salt15 = $context + 16 | 0;
 HEAP32[$salt15 >> 2] = $salt;
 $saltlen16 = $context + 20 | 0;
 HEAP32[$saltlen16 >> 2] = 16;
 $secret = $context + 24 | 0;
 $t_cost17 = $context + 40 | 0;
 HEAP32[$secret >> 2] = 0 | 0;
 HEAP32[$secret + 4 >> 2] = 0 | 0;
 HEAP32[$secret + 8 >> 2] = 0 | 0;
 HEAP32[$secret + 12 >> 2] = 0 | 0;
 HEAP32[$t_cost17 >> 2] = 4;
 $m_cost18 = $context + 44 | 0;
 HEAP32[$m_cost18 >> 2] = 256;
 $lanes = $context + 48 | 0;
 HEAP32[$lanes >> 2] = 1;
 $threads = $context + 52 | 0;
 HEAP32[$threads >> 2] = 1;
 $allocate_cbk = $context + 60 | 0;
 HEAP32[$allocate_cbk >> 2] = 0;
 $free_cbk = $context + 64 | 0;
 HEAP32[$free_cbk >> 2] = 0;
 $flags = $context + 68 | 0;
 HEAP32[$flags >> 2] = 0;
 $version19 = $context + 56 | 0;
 HEAP32[$version19 >> 2] = 19;
 $call20 = _argon2_ctx($context) | 0;
 $cmp21 = ($call20 | 0) == 0;
 if (!$cmp21) {
  _clear_internal_memory($call, 32);
  _free($call);
  STACKTOP = sp;
  return;
 }
 $tobool24 = ($hash | 0) == (0 | 0);
 if (!$tobool24) {
  dest = $hash;
  src = $call;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
 }
 _clear_internal_memory($call, 32);
 _free($call);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS_6threadENS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre = 0, $$pre$phi26Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin_2 = 0;
 var $__end1$addr$i$016 = 0, $__end_$i$i = 0, $__end_6 = 0, $__t_$i$i$i$i$i = 0, $__value_$i$i$i = 0, $__value_$i$i$i$i$i35$i = 0, $cmp$i = 0, $cmp$i15 = 0, $incdec$ptr$i = 0, $incdec$ptr2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $__value_$i$i$i$i$i35$i = $this + 8 | 0;
 $__end_$i$i = $this + 4 | 0;
 $1 = HEAP32[$__end_$i$i >> 2] | 0;
 $__begin_2 = $__v + 4 | 0;
 $cmp$i15 = ($1 | 0) == ($0 | 0);
 if ($cmp$i15) {
  $2 = $0;
  $$pre23 = HEAP32[$__begin_2 >> 2] | 0;
  $$pre$phi26Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $7 = $$pre23;
  $8 = $2;
 } else {
  $$pre = HEAP32[$__begin_2 >> 2] | 0;
  $3 = $$pre;
  $__end1$addr$i$016 = $1;
  while (1) {
   $incdec$ptr$i = $__end1$addr$i$016 + -4 | 0;
   $__t_$i$i$i$i$i = $3 + -4 | 0;
   $4 = HEAP32[$incdec$ptr$i >> 2] | 0;
   HEAP32[$__t_$i$i$i$i$i >> 2] = $4;
   HEAP32[$incdec$ptr$i >> 2] = 0;
   $5 = HEAP32[$__begin_2 >> 2] | 0;
   $incdec$ptr2$i = $5 + -4 | 0;
   HEAP32[$__begin_2 >> 2] = $incdec$ptr2$i;
   $cmp$i = ($incdec$ptr$i | 0) == ($0 | 0);
   if ($cmp$i) {
    break;
   } else {
    $3 = $incdec$ptr2$i;
    $__end1$addr$i$016 = $incdec$ptr$i;
   }
  }
  $6 = $incdec$ptr2$i;
  $$pre21 = HEAP32[$this >> 2] | 0;
  $$pre$phi26Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $7 = $6;
  $8 = $$pre21;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $7;
 HEAP32[$$pre$phi26Z2D >> 2] = $8;
 $__end_6 = $__v + 8 | 0;
 $9 = HEAP32[$__end_$i$i >> 2] | 0;
 $10 = HEAP32[$__end_6 >> 2] | 0;
 HEAP32[$__end_$i$i >> 2] = $10;
 HEAP32[$__end_6 >> 2] = $9;
 $__value_$i$i$i = $__v + 12 | 0;
 $11 = HEAP32[$__value_$i$i$i$i$i35$i >> 2] | 0;
 $12 = HEAP32[$__value_$i$i$i >> 2] | 0;
 HEAP32[$__value_$i$i$i$i$i35$i >> 2] = $12;
 HEAP32[$__value_$i$i$i >> 2] = $11;
 $13 = HEAP32[$$pre$phi26Z2D >> 2] | 0;
 HEAP32[$__v >> 2] = $13;
 return;
}

function __ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_NS2_6vectorIS8_NS6_IS8_EEEESB_EE6invokeEPFbS8_S8_SB_SB_EPNS0_11BindingTypeIS8_vEUt_ESI_PSB_SJ_($fn, $args, $args1, $args3, $args5) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 var $agg$tmp = 0, $agg$tmp12 = 0, $agg$tmp7 = 0, $agg$tmp8 = 0, $call = 0, $call15 = 0, $call19 = 0, $call21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $agg$tmp = sp + 36 | 0;
 $agg$tmp7 = sp + 24 | 0;
 $agg$tmp8 = sp + 12 | 0;
 $agg$tmp12 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp7, $args1);
 $call = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($args3) | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp8, $call);
 $call15 = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($args5) | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp12, $call15);
 $call19 = FUNCTION_TABLE_iiiii[$fn & 255]($agg$tmp, $agg$tmp7, $agg$tmp8, $agg$tmp12) | 0;
 $call21 = __ZN10emscripten8internal11BindingTypeIbvE10toWireTypeEb($call19) | 0;
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($agg$tmp12);
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($agg$tmp8);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp7);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call21 | 0;
}

function __ZN4Core12Cryptography11tree_branchENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE($agg$result, $hashes) {
 $agg$result = $agg$result | 0;
 $hashes = $hashes | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__end_$i$i = 0, $__end_$i$i348 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i352 = 0, $call2 = 0, $l_branches = 0, $l_hashes = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i181 = 0, $sub$ptr$rhs$cast$i179 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i180 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $l_hashes = sp + 12 | 0;
 $l_branches = sp;
 HEAP32[$l_hashes >> 2] = 0;
 $__end_$i$i = $l_hashes + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $l_hashes + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 __ZN4Core13toTypedVectorIN6Crypto4HashEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($hashes, $l_hashes);
 $0 = HEAP32[$__end_$i$i >> 2] | 0;
 $1 = HEAP32[$l_hashes >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 $call2 = __ZN4Core12Cryptography10tree_depthEj($sub$ptr$div$i) | 0;
 __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEEC2Em($l_branches, $call2);
 $2 = HEAP32[$l_hashes >> 2] | 0;
 $3 = HEAP32[$__end_$i$i >> 2] | 0;
 $sub$ptr$rhs$cast$i179 = $2;
 $sub$ptr$sub$i180 = $3 - $sub$ptr$rhs$cast$i179 | 0;
 $sub$ptr$div$i181 = $sub$ptr$sub$i180 >> 5;
 $4 = HEAP32[$l_branches >> 2] | 0;
 __ZN6Crypto11tree_branchEPKNS_4HashEmPS0_($2, $sub$ptr$div$i181, $4);
 HEAP32[$agg$result >> 2] = 0;
 $__end_$i$i348 = $agg$result + 4 | 0;
 HEAP32[$__end_$i$i348 >> 2] = 0;
 $__value_$i$i$i$i352 = $agg$result + 8 | 0;
 HEAP32[$__value_$i$i$i$i352 >> 2] = 0;
 __ZN4Core14toStringVectorIN6Crypto4HashEEEvRKNSt3__26vectorIT_NS3_9allocatorIS5_EEEERNS4_INS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEENS6_ISF_EEEE($l_branches, $agg$result);
 __ZNSt3__213__vector_baseIN6Crypto4HashENS_9allocatorIS2_EEED2Ev($l_branches);
 __ZNSt3__213__vector_baseIN6Crypto4HashENS_9allocatorIS2_EEED2Ev($l_hashes);
 STACKTOP = sp;
 return;
}

function __ZN4Core13toTypedVectorIN6Crypto4HashEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($stringVector, $result) {
 $stringVector = $stringVector | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__begin$sroa$0$09 = 0, $__end_$i$i = 0, $__end_$i35 = 0, $__value_$i$i$i$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i8 = 0, $incdec$ptr$i = 0, $incdec$ptr$i19 = 0, $value = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $value = sp;
 $__end_$i$i = $result + 4 | 0;
 $0 = HEAP32[$result >> 2] | 0;
 HEAP32[$__end_$i$i >> 2] = $0;
 $__value_$i$i$i$i$i$i$i = $result + 8 | 0;
 $1 = HEAP32[$stringVector >> 2] | 0;
 $__end_$i35 = $stringVector + 4 | 0;
 $2 = HEAP32[$__end_$i35 >> 2] | 0;
 $cmp$i$i8 = ($1 | 0) == ($2 | 0);
 if ($cmp$i$i8) {
  STACKTOP = sp;
  return;
 }
 $__begin$sroa$0$09 = $1;
 while (1) {
  dest = $value;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = 0 | 0;
   dest = dest + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  __ZN6Crypto4HashC2Ev($value);
  __ZN6Common10podFromHexIN6Crypto4HashEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($__begin$sroa$0$09, $value);
  $3 = HEAP32[$__end_$i$i >> 2] | 0;
  $4 = HEAP32[$__value_$i$i$i$i$i$i$i >> 2] | 0;
  $cmp$i = ($3 | 0) == ($4 | 0);
  if ($cmp$i) {
   __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($result, $value);
  } else {
   dest = $3;
   src = $value;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $5 = HEAP32[$__end_$i$i >> 2] | 0;
   $incdec$ptr$i19 = $5 + 32 | 0;
   HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i19;
  }
  $incdec$ptr$i = $__begin$sroa$0$09 + 12 | 0;
  $cmp$i$i = ($incdec$ptr$i | 0) == ($2 | 0);
  if ($cmp$i$i) {
   break;
  } else {
   $__begin$sroa$0$09 = $incdec$ptr$i;
  }
 }
 STACKTOP = sp;
 return;
}

function _finalize($context, $instance) {
 $context = $context | 0;
 $instance = $instance | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr2 = 0, $add$ptr7 = 0, $blockhash = 0, $blockhash_bytes = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0;
 var $cmp316 = 0, $inc = 0, $l$017 = 0, $lane_length = 0, $lanes = 0, $mul = 0, $or$cond = 0, $outlen = 0, $print_internals = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2048 | 0);
 $blockhash = sp + 1024 | 0;
 $blockhash_bytes = sp;
 $cmp = ($context | 0) != (0 | 0);
 $cmp1 = ($instance | 0) != (0 | 0);
 $or$cond = $cmp & $cmp1;
 if (!$or$cond) {
  STACKTOP = sp;
  return;
 }
 $0 = HEAP32[$instance >> 2] | 0;
 $lane_length = $instance + 20 | 0;
 $1 = HEAP32[$lane_length >> 2] | 0;
 $add$ptr = $0 + ($1 << 10) | 0;
 $add$ptr2 = $add$ptr + -1024 | 0;
 _copy_block($blockhash, $add$ptr2);
 $lanes = $instance + 24 | 0;
 $2 = HEAP32[$lanes >> 2] | 0;
 $cmp316 = $2 >>> 0 > 1;
 if ($cmp316) {
  $l$017 = 1;
  while (1) {
   $3 = HEAP32[$lane_length >> 2] | 0;
   $mul = Math_imul($3, $l$017) | 0;
   $sub = $3 + -1 | 0;
   $add = $sub + $mul | 0;
   $4 = HEAP32[$instance >> 2] | 0;
   $add$ptr7 = $4 + ($add << 10) | 0;
   _xor_block($blockhash, $add$ptr7);
   $inc = $l$017 + 1 | 0;
   $5 = HEAP32[$lanes >> 2] | 0;
   $cmp3 = $inc >>> 0 < $5 >>> 0;
   if ($cmp3) {
    $l$017 = $inc;
   } else {
    break;
   }
  }
 }
 _store_block($blockhash_bytes, $blockhash);
 $6 = HEAP32[$context >> 2] | 0;
 $outlen = $context + 4 | 0;
 $7 = HEAP32[$outlen >> 2] | 0;
 _blake2b_long($6, $7, $blockhash_bytes, 1024);
 _clear_internal_memory($blockhash, 1024);
 _clear_internal_memory($blockhash_bytes, 1024);
 $print_internals = $instance + 36 | 0;
 $8 = HEAP32[$print_internals >> 2] | 0;
 $tobool = ($8 | 0) == 0;
 if (!$tobool) {
  $9 = HEAP32[$context >> 2] | 0;
  $10 = HEAP32[$outlen >> 2] | 0;
  _print_tag($9, $10);
 }
 _free_memory($context, $instance);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography15restoreKeyImageERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_mRKNS1_6vectorIS7_NS5_IS7_EEEE($agg$result, $publicEphemeral, $derivation, $output_index, $partialKeyImages) {
 $agg$result = $agg$result | 0;
 $publicEphemeral = $publicEphemeral | 0;
 $derivation = $derivation | 0;
 $output_index = $output_index | 0;
 $partialKeyImages = $partialKeyImages | 0;
 var $__end_$i$i = 0, $__value_$i$i$i$i = 0, $l_derivation = 0, $l_keyImage = 0, $l_partialKeyImages = 0, $l_publicEphemeral = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
 $l_publicEphemeral = sp + 80 | 0;
 $l_derivation = sp + 48 | 0;
 $l_partialKeyImages = sp;
 $l_keyImage = sp + 16 | 0;
 __ZN6Crypto9PublicKeyC2Ev($l_publicEphemeral);
 __ZN6Common10podFromHexIN6Crypto9PublicKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($publicEphemeral, $l_publicEphemeral);
 __ZN6Crypto13KeyDerivationC2Ev($l_derivation);
 __ZN6Common10podFromHexIN6Crypto13KeyDerivationEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($derivation, $l_derivation);
 HEAP32[$l_partialKeyImages >> 2] = 0;
 $__end_$i$i = $l_partialKeyImages + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $l_partialKeyImages + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 __ZN4Core13toTypedVectorIN6Crypto8KeyImageEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($partialKeyImages, $l_partialKeyImages);
 __ZN6Crypto8Multisig17restore_key_imageERKNS_9PublicKeyERKNS_13KeyDerivationEmRKNSt3__26vectorINS_8KeyImageENS7_9allocatorIS9_EEEE($l_keyImage, $l_publicEphemeral, $l_derivation, $output_index, $l_partialKeyImages);
 __ZN6Common8podToHexIN6Crypto8KeyImageEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $l_keyImage);
 __ZNSt3__213__vector_baseIN6Crypto8KeyImageENS_9allocatorIS2_EEED2Ev($l_partialKeyImages);
 STACKTOP = sp;
 return;
}

function __ZN4Core28generateTransactionPowWorkerENSt3__26vectorIhNS0_9allocatorIhEEEEmijRNS0_6atomicIbEERjj($serializedTransaction, $nonceOffset, $threadCount, $nonce, $shouldStop, $resultNonce, $diff) {
 $serializedTransaction = $serializedTransaction | 0;
 $nonceOffset = $nonceOffset | 0;
 $threadCount = $threadCount | 0;
 $nonce = $nonce | 0;
 $shouldStop = $shouldStop | 0;
 $resultNonce = $resultNonce | 0;
 $diff = $diff | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__end_$i = 0, $add = 0, $arrayidx$i = 0, $hash = 0, $nonce$addr$09 = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $tobool$i$i18 = 0, $tobool$i$i188 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $hash = sp;
 $0 = HEAP32[$serializedTransaction >> 2] | 0;
 $1 = HEAP8[$shouldStop >> 0] | 0;
 $2 = $1 & 1;
 $tobool$i$i188 = $2 << 24 >> 24 == 0;
 if (!$tobool$i$i188) {
  STACKTOP = sp;
  return;
 }
 $arrayidx$i = $0 + $nonceOffset | 0;
 $__end_$i = $serializedTransaction + 4 | 0;
 $nonce$addr$09 = $nonce;
 while (1) {
  HEAP8[$arrayidx$i >> 0] = $nonce$addr$09 & 255;
  HEAP8[$arrayidx$i + 1 >> 0] = $nonce$addr$09 >> 8 & 255;
  HEAP8[$arrayidx$i + 2 >> 0] = $nonce$addr$09 >> 16 & 255;
  HEAP8[$arrayidx$i + 3 >> 0] = $nonce$addr$09 >> 24;
  __ZN6Crypto4HashC2Ev($hash);
  $3 = HEAP32[$serializedTransaction >> 2] | 0;
  $4 = HEAP32[$__end_$i >> 2] | 0;
  $sub$ptr$rhs$cast$i = $3;
  $sub$ptr$sub$i = $4 - $sub$ptr$rhs$cast$i | 0;
  __ZN6Crypto6cn_upxEPKvmRNS_4HashE($3, $sub$ptr$sub$i, $hash);
  $5 = __ZN4Core10check_hashERKN6Crypto4HashEy($hash, $diff, 0) | 0;
  if ($5) {
   break;
  }
  $add = $nonce$addr$09 + $threadCount | 0;
  $6 = HEAP8[$shouldStop >> 0] | 0;
  $7 = $6 & 1;
  $tobool$i$i18 = $7 << 24 >> 24 == 0;
  if ($tobool$i$i18) {
   $nonce$addr$09 = $add;
  } else {
   label = 6;
   break;
  }
 }
 if ((label | 0) == 6) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$resultNonce >> 2] = $nonce$addr$09;
 HEAP8[$shouldStop >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __Z22generateRingSignaturesNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_NS_6vectorIS5_NS3_IS5_EEEES5_i($agg$result, $prefixHash, $keyImage, $publicKeys, $transactionSecretKey, $realOutputIndex) {
 $agg$result = $agg$result | 0;
 $prefixHash = $prefixHash | 0;
 $keyImage = $keyImage | 0;
 $publicKeys = $publicKeys | 0;
 $transactionSecretKey = $transactionSecretKey | 0;
 $realOutputIndex = $realOutputIndex | 0;
 var $0 = 0, $1 = 0, $__end_$i$i = 0, $__value_$i$i$i$i = 0, $agg$tmp = 0, $agg$tmp1 = 0, $agg$tmp4 = 0, $agg$tmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $agg$tmp = sp + 36 | 0;
 $agg$tmp1 = sp + 24 | 0;
 $agg$tmp4 = sp + 12 | 0;
 $agg$tmp7 = sp;
 HEAP32[$agg$result >> 2] = 0;
 $__end_$i$i = $agg$result + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $agg$result + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $prefixHash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1, $keyImage);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp4, $publicKeys);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp7, $transactionSecretKey);
 $0 = ($realOutputIndex | 0) < 0;
 $1 = $0 << 31 >> 31;
 __ZN4Core12Cryptography22generateRingSignaturesENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEES7_yRSA_($agg$tmp, $agg$tmp1, $agg$tmp4, $agg$tmp7, $realOutputIndex, $1, $agg$result);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp7);
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($agg$tmp4);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return;
}

function _xor64($left, $right) {
 $left = $left | 0;
 $right = $right | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx$1 = 0, $arrayidx$2 = 0, $arrayidx$3 = 0, $arrayidx$4 = 0;
 var $arrayidx$5 = 0, $arrayidx$6 = 0, $arrayidx$7 = 0, $arrayidx1$1 = 0, $arrayidx1$2 = 0, $arrayidx1$3 = 0, $arrayidx1$4 = 0, $arrayidx1$5 = 0, $arrayidx1$6 = 0, $arrayidx1$7 = 0, $xor4 = 0, $xor4$1 = 0, $xor4$2 = 0, $xor4$3 = 0, $xor4$4 = 0, $xor4$5 = 0, $xor4$6 = 0, $xor4$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$right >> 0] | 0;
 $1 = HEAP8[$left >> 0] | 0;
 $xor4 = $1 ^ $0;
 HEAP8[$left >> 0] = $xor4;
 $arrayidx$1 = $right + 1 | 0;
 $2 = HEAP8[$arrayidx$1 >> 0] | 0;
 $arrayidx1$1 = $left + 1 | 0;
 $3 = HEAP8[$arrayidx1$1 >> 0] | 0;
 $xor4$1 = $3 ^ $2;
 HEAP8[$arrayidx1$1 >> 0] = $xor4$1;
 $arrayidx$2 = $right + 2 | 0;
 $4 = HEAP8[$arrayidx$2 >> 0] | 0;
 $arrayidx1$2 = $left + 2 | 0;
 $5 = HEAP8[$arrayidx1$2 >> 0] | 0;
 $xor4$2 = $5 ^ $4;
 HEAP8[$arrayidx1$2 >> 0] = $xor4$2;
 $arrayidx$3 = $right + 3 | 0;
 $6 = HEAP8[$arrayidx$3 >> 0] | 0;
 $arrayidx1$3 = $left + 3 | 0;
 $7 = HEAP8[$arrayidx1$3 >> 0] | 0;
 $xor4$3 = $7 ^ $6;
 HEAP8[$arrayidx1$3 >> 0] = $xor4$3;
 $arrayidx$4 = $right + 4 | 0;
 $8 = HEAP8[$arrayidx$4 >> 0] | 0;
 $arrayidx1$4 = $left + 4 | 0;
 $9 = HEAP8[$arrayidx1$4 >> 0] | 0;
 $xor4$4 = $9 ^ $8;
 HEAP8[$arrayidx1$4 >> 0] = $xor4$4;
 $arrayidx$5 = $right + 5 | 0;
 $10 = HEAP8[$arrayidx$5 >> 0] | 0;
 $arrayidx1$5 = $left + 5 | 0;
 $11 = HEAP8[$arrayidx1$5 >> 0] | 0;
 $xor4$5 = $11 ^ $10;
 HEAP8[$arrayidx1$5 >> 0] = $xor4$5;
 $arrayidx$6 = $right + 6 | 0;
 $12 = HEAP8[$arrayidx$6 >> 0] | 0;
 $arrayidx1$6 = $left + 6 | 0;
 $13 = HEAP8[$arrayidx1$6 >> 0] | 0;
 $xor4$6 = $13 ^ $12;
 HEAP8[$arrayidx1$6 >> 0] = $xor4$6;
 $arrayidx$7 = $right + 7 | 0;
 $14 = HEAP8[$arrayidx$7 >> 0] | 0;
 $arrayidx1$7 = $left + 7 | 0;
 $15 = HEAP8[$arrayidx1$7 >> 0] | 0;
 $xor4$7 = $15 ^ $14;
 HEAP8[$arrayidx1$7 >> 0] = $xor4$7;
 return;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_ = 0, $__end_$i = 0, $__end_cap_$i = 0, $__v = 0, $add = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp3$i = 0, $incdec$ptr = 0, $mul$i = 0, $spec$select = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $__v = sp;
 $__end_cap_$i = $this + 8 | 0;
 $__end_$i = $this + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $sub$ptr$div$i = ($sub$ptr$sub$i | 0) / 12 & -1;
 $add = $sub$ptr$div$i + 1 | 0;
 $cmp$i = $add >>> 0 > 357913941;
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 } else {
  $2 = HEAP32[$__end_cap_$i >> 2] | 0;
  $sub$ptr$sub$i$i$i = $2 - $1 | 0;
  $sub$ptr$div$i$i$i = ($sub$ptr$sub$i$i$i | 0) / 12 & -1;
  $cmp3$i = $sub$ptr$div$i$i$i >>> 0 < 178956970;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  $cmp$i$i$i$i = $mul$i >>> 0 < $add >>> 0;
  $$sroa$speculated = $cmp$i$i$i$i ? $add : $mul$i;
  $spec$select = $cmp3$i ? $$sroa$speculated : 357913941;
  __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_($__v, $spec$select, $sub$ptr$div$i, $__end_cap_$i);
  $__end_ = $__v + 8 | 0;
  $3 = HEAP32[$__end_ >> 2] | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3, $__x);
  $incdec$ptr = $3 + 12 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr;
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this, $__v);
  __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function _select_impl() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $best_impl$039 = 0, $best_impl$1 = 0, $call9 = 0;
 var $check = 0, $cmp37 = 0, $cmp43 = 0, $cmp7 = 0, $count = 0, $exitcond = 0, $i$040 = 0, $impls = 0, $inc = 0, $spec$select33 = 0, $tobool10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $impls = sp;
 _argon2_get_impl_list($impls);
 $count = $impls + 4 | 0;
 $0 = HEAP32[$count >> 2] | 0;
 $cmp37 = ($0 | 0) == 0;
 if ($cmp37) {
  STACKTOP = sp;
  return;
 }
 $1 = HEAP32[$impls >> 2] | 0;
 $6 = 0;
 $8 = -1;
 $best_impl$039 = 0;
 $i$040 = 0;
 while (1) {
  $arrayidx = $1 + ($i$040 * 12 | 0) | 0;
  $check = ($1 + ($i$040 * 12 | 0) | 0) + 4 | 0;
  $2 = HEAP32[$check >> 2] | 0;
  $cmp7 = ($2 | 0) == (0 | 0);
  if ($cmp7) {
   label = 5;
  } else {
   $call9 = FUNCTION_TABLE_i[$2 & 255]() | 0;
   $tobool10 = ($call9 | 0) == 0;
   if ($tobool10) {
    $14 = $8;
    $15 = $6;
    $best_impl$1 = $best_impl$039;
   } else {
    label = 5;
   }
  }
  if ((label | 0) == 5) {
   label = 0;
   $3 = _benchmark_impl($arrayidx) | 0;
   $4 = getTempRet0() | 0;
   $5 = $4 >>> 0 < $6 >>> 0;
   $7 = $3 >>> 0 < $8 >>> 0;
   $9 = ($4 | 0) == ($6 | 0);
   $10 = $9 & $7;
   $11 = $5 | $10;
   $12 = $11 ? $3 : $8;
   $13 = $11 ? $4 : $6;
   $spec$select33 = $11 ? $arrayidx : $best_impl$039;
   $14 = $12;
   $15 = $13;
   $best_impl$1 = $spec$select33;
  }
  $inc = $i$040 + 1 | 0;
  $exitcond = ($inc | 0) == ($0 | 0);
  if ($exitcond) {
   break;
  } else {
   $6 = $15;
   $8 = $14;
   $best_impl$039 = $best_impl$1;
   $i$040 = $inc;
  }
 }
 $cmp43 = ($best_impl$1 | 0) == (0 | 0);
 if ($cmp43) {
  STACKTOP = sp;
  return;
 };
 HEAP32[43068 >> 2] = HEAP32[$best_impl$1 >> 2] | 0;
 HEAP32[43068 + 4 >> 2] = HEAP32[$best_impl$1 + 4 >> 2] | 0;
 HEAP32[43068 + 8 >> 2] = HEAP32[$best_impl$1 + 8 >> 2] | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_ = 0, $__end_$i = 0, $__end_cap_$i = 0, $__v = 0, $add = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp3$i = 0, $incdec$ptr = 0, $mul$i = 0, $spec$select = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $__v = sp;
 $__end_cap_$i = $this + 8 | 0;
 $__end_$i = $this + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 $add = $sub$ptr$div$i + 1 | 0;
 $cmp$i = $add >>> 0 > 134217727;
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 } else {
  $2 = HEAP32[$__end_cap_$i >> 2] | 0;
  $sub$ptr$sub$i$i$i = $2 - $1 | 0;
  $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 5;
  $cmp3$i = $sub$ptr$div$i$i$i >>> 0 < 67108863;
  $mul$i = $sub$ptr$sub$i$i$i >> 4;
  $cmp$i$i$i$i = $mul$i >>> 0 < $add >>> 0;
  $$sroa$speculated = $cmp$i$i$i$i ? $add : $mul$i;
  $spec$select = $cmp3$i ? $$sroa$speculated : 134217727;
  __ZNSt3__214__split_bufferIN6Crypto9SecretKeyERNS_9allocatorIS2_EEEC2EmmS5_($__v, $spec$select, $sub$ptr$div$i, $__end_cap_$i);
  $__end_ = $__v + 8 | 0;
  $3 = HEAP32[$__end_ >> 2] | 0;
  dest = $3;
  src = $__x;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $incdec$ptr = $3 + 32 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr;
  __ZNSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN6Crypto9SecretKeyERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_ = 0, $__end_$i = 0, $__end_cap_$i = 0, $__v = 0, $add = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp3$i = 0, $incdec$ptr = 0, $mul$i = 0, $spec$select = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $__v = sp;
 $__end_cap_$i = $this + 8 | 0;
 $__end_$i = $this + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 $add = $sub$ptr$div$i + 1 | 0;
 $cmp$i = $add >>> 0 > 134217727;
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 } else {
  $2 = HEAP32[$__end_cap_$i >> 2] | 0;
  $sub$ptr$sub$i$i$i = $2 - $1 | 0;
  $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 5;
  $cmp3$i = $sub$ptr$div$i$i$i >>> 0 < 67108863;
  $mul$i = $sub$ptr$sub$i$i$i >> 4;
  $cmp$i$i$i$i = $mul$i >>> 0 < $add >>> 0;
  $$sroa$speculated = $cmp$i$i$i$i ? $add : $mul$i;
  $spec$select = $cmp3$i ? $$sroa$speculated : 134217727;
  __ZNSt3__214__split_bufferIN6Crypto9PublicKeyERNS_9allocatorIS2_EEEC2EmmS5_($__v, $spec$select, $sub$ptr$div$i, $__end_cap_$i);
  $__end_ = $__v + 8 | 0;
  $3 = HEAP32[$__end_ >> 2] | 0;
  dest = $3;
  src = $__x;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $incdec$ptr = $3 + 32 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr;
  __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN6Crypto9PublicKeyERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_ = 0, $__end_$i = 0, $__end_cap_$i = 0, $__v = 0, $add = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp3$i = 0, $incdec$ptr = 0, $mul$i = 0, $spec$select = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $__v = sp;
 $__end_cap_$i = $this + 8 | 0;
 $__end_$i = $this + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 6;
 $add = $sub$ptr$div$i + 1 | 0;
 $cmp$i = $add >>> 0 > 67108863;
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 } else {
  $2 = HEAP32[$__end_cap_$i >> 2] | 0;
  $sub$ptr$sub$i$i$i = $2 - $1 | 0;
  $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 6;
  $cmp3$i = $sub$ptr$div$i$i$i >>> 0 < 33554431;
  $mul$i = $sub$ptr$sub$i$i$i >> 5;
  $cmp$i$i$i$i = $mul$i >>> 0 < $add >>> 0;
  $$sroa$speculated = $cmp$i$i$i$i ? $add : $mul$i;
  $spec$select = $cmp3$i ? $$sroa$speculated : 67108863;
  __ZNSt3__214__split_bufferIN6Crypto9SignatureERNS_9allocatorIS2_EEEC2EmmS5_($__v, $spec$select, $sub$ptr$div$i, $__end_cap_$i);
  $__end_ = $__v + 8 | 0;
  $3 = HEAP32[$__end_ >> 2] | 0;
  dest = $3;
  src = $__x;
  stop = dest + 64 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $incdec$ptr = $3 + 64 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr;
  __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN6Crypto9SignatureERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_ = 0, $__end_$i = 0, $__end_cap_$i = 0, $__v = 0, $add = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp3$i = 0, $incdec$ptr = 0, $mul$i = 0, $spec$select = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $__v = sp;
 $__end_cap_$i = $this + 8 | 0;
 $__end_$i = $this + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 $add = $sub$ptr$div$i + 1 | 0;
 $cmp$i = $add >>> 0 > 134217727;
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 } else {
  $2 = HEAP32[$__end_cap_$i >> 2] | 0;
  $sub$ptr$sub$i$i$i = $2 - $1 | 0;
  $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 5;
  $cmp3$i = $sub$ptr$div$i$i$i >>> 0 < 67108863;
  $mul$i = $sub$ptr$sub$i$i$i >> 4;
  $cmp$i$i$i$i = $mul$i >>> 0 < $add >>> 0;
  $$sroa$speculated = $cmp$i$i$i$i ? $add : $mul$i;
  $spec$select = $cmp3$i ? $$sroa$speculated : 134217727;
  __ZNSt3__214__split_bufferIN6Crypto9SecretKeyERNS_9allocatorIS2_EEEC2EmmS5_($__v, $spec$select, $sub$ptr$div$i, $__end_cap_$i);
  $__end_ = $__v + 8 | 0;
  $3 = HEAP32[$__end_ >> 2] | 0;
  dest = $3;
  src = $__x;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $incdec$ptr = $3 + 32 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr;
  __ZNSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN6Crypto9SecretKeyERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZN10emscripten8internal7InvokerINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJS9_iS9_SB_EE6invokeEPFSB_S9_iS9_SB_EPNS0_11BindingTypeIS9_vEUt_EiSI_PSB_($fn, $args, $args1, $args3, $args5) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 var $agg$tmp = 0, $agg$tmp7 = 0, $agg$tmp9 = 0, $call = 0, $call12 = 0, $call18 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $ref$tmp = sp + 36 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp7 = sp + 12 | 0;
 $agg$tmp9 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 $call = __ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($args1) | 0;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp7, $args3);
 $call12 = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($args5) | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp9, $call12);
 FUNCTION_TABLE_viiiii[$fn & 127]($ref$tmp, $agg$tmp, $call, $agg$tmp7, $agg$tmp9);
 $call18 = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE10toWireTypeEOSB_($ref$tmp) | 0;
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ref$tmp);
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($agg$tmp9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp7);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call18 | 0;
}

function __ZNSt3__26vectorIN6Crypto8KeyImageENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_ = 0, $__end_$i = 0, $__end_cap_$i = 0, $__v = 0, $add = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp3$i = 0, $incdec$ptr = 0, $mul$i = 0, $spec$select = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $__v = sp;
 $__end_cap_$i = $this + 8 | 0;
 $__end_$i = $this + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 $add = $sub$ptr$div$i + 1 | 0;
 $cmp$i = $add >>> 0 > 134217727;
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 } else {
  $2 = HEAP32[$__end_cap_$i >> 2] | 0;
  $sub$ptr$sub$i$i$i = $2 - $1 | 0;
  $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 5;
  $cmp3$i = $sub$ptr$div$i$i$i >>> 0 < 67108863;
  $mul$i = $sub$ptr$sub$i$i$i >> 4;
  $cmp$i$i$i$i = $mul$i >>> 0 < $add >>> 0;
  $$sroa$speculated = $cmp$i$i$i$i ? $add : $mul$i;
  $spec$select = $cmp3$i ? $$sroa$speculated : 134217727;
  __ZNSt3__214__split_bufferIN6Crypto8KeyImageERNS_9allocatorIS2_EEEC2EmmS5_($__v, $spec$select, $sub$ptr$div$i, $__end_cap_$i);
  $__end_ = $__v + 8 | 0;
  $3 = HEAP32[$__end_ >> 2] | 0;
  dest = $3;
  src = $__x;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $incdec$ptr = $3 + 32 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr;
  __ZNSt3__26vectorIN6Crypto8KeyImageENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN6Crypto8KeyImageERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZN6Crypto10crypto_ops15check_signatureERKNS_4HashERKNS_9PublicKeyERKNS_9SignatureE($prefix_hash, $pub, $sig) {
 $prefix_hash = $prefix_hash | 0;
 $pub = $pub | 0;
 $sig = $sig | 0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $buf = 0, $c = 0, $call = 0, $call1 = 0, $call2 = 0, $call4 = 0, $call9 = 0, $cmp = 0, $cmp10 = 0, $cmp3 = 0, $cmp5 = 0, $retval$0 = 0, $tmp2 = 0, $tmp3 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(416 | 0);
 $tmp2 = sp + 160 | 0;
 $tmp3 = sp;
 $c = sp + 376 | 0;
 $buf = sp + 280 | 0;
 __ZN6Crypto19EllipticCurveScalarC2Ev($c);
 __ZN6Crypto6s_commC2Ev($buf);
 $call = __ZN6Crypto10crypto_ops9check_keyERKNS_9PublicKeyE($pub) | 0;
 if (!$call) {
  ___assert_fail(45643 | 0, 45326 | 0, 393, 45658 | 0);
 }
 dest = $buf;
 src = $prefix_hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $buf + 32 | 0;
 dest = $0;
 src = $pub;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $call1 = _ge_frombytes_vartime($tmp3, $pub) | 0;
 $cmp = ($call1 | 0) == 0;
 if (!$cmp) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $call2 = _sc_check($sig) | 0;
 $cmp3 = ($call2 | 0) == 0;
 if (!$cmp3) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $add$ptr = $sig + 32 | 0;
 $call4 = _sc_check($add$ptr) | 0;
 $cmp5 = ($call4 | 0) == 0;
 if (!$cmp5) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 _ge_double_scalarmult_base_vartime($tmp2, $sig, $tmp3, $add$ptr);
 $1 = $buf + 64 | 0;
 _ge_tobytes($1, $tmp2);
 __ZN6CryptoL14hash_to_scalarEPKvmRNS_19EllipticCurveScalarE($buf, 96, $c);
 _sc_sub($c, $c, $sig);
 $call9 = _sc_isnonzero($c) | 0;
 $cmp10 = ($call9 | 0) == 0;
 $retval$0 = $cmp10;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_ = 0, $__end_$i = 0, $__end_cap_$i = 0, $__v = 0, $add = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp3$i = 0, $incdec$ptr = 0, $mul$i = 0, $spec$select = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $__v = sp;
 $__end_cap_$i = $this + 8 | 0;
 $__end_$i = $this + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 $add = $sub$ptr$div$i + 1 | 0;
 $cmp$i = $add >>> 0 > 134217727;
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 } else {
  $2 = HEAP32[$__end_cap_$i >> 2] | 0;
  $sub$ptr$sub$i$i$i = $2 - $1 | 0;
  $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 5;
  $cmp3$i = $sub$ptr$div$i$i$i >>> 0 < 67108863;
  $mul$i = $sub$ptr$sub$i$i$i >> 4;
  $cmp$i$i$i$i = $mul$i >>> 0 < $add >>> 0;
  $$sroa$speculated = $cmp$i$i$i$i ? $add : $mul$i;
  $spec$select = $cmp3$i ? $$sroa$speculated : 134217727;
  __ZNSt3__214__split_bufferIN6Crypto4HashERNS_9allocatorIS2_EEEC2EmmS5_($__v, $spec$select, $sub$ptr$div$i, $__end_cap_$i);
  $__end_ = $__v + 8 | 0;
  $3 = HEAP32[$__end_ >> 2] | 0;
  dest = $3;
  src = $__x;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $incdec$ptr = $3 + 32 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr;
  __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN6Crypto4HashERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i3$i = 0, $add = 0, $add$ptr = 0, $add7 = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i24 = 0, $cond$i30 = 0, $cond$i35 = 0, $conv$i$i = 0, $conv$i$i34 = 0;
 var $phitmp$i = 0, $sub = 0, $sub8 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $__cap_$i$i = $this + 8 | 0;
  $1 = HEAP32[$__cap_$i$i >> 2] | 0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = $and$i$i + -1 | 0;
  $__size_$i3$i = $this + 4 | 0;
  $2 = HEAP32[$__size_$i3$i >> 2] | 0;
  $cond$i24 = $2;
  $cond$i35 = $phitmp$i;
 } else {
  $conv$i$i = $0 & 255;
  $cond$i24 = $conv$i$i;
  $cond$i35 = 10;
 }
 $sub = $cond$i35 - $cond$i24 | 0;
 $cmp = $sub >>> 0 < $__n >>> 0;
 if ($cmp) {
  $add7 = $cond$i24 + $__n | 0;
  $sub8 = $add7 - $cond$i35 | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this, $cond$i35, $sub8, $cond$i24, $cond$i24, 0, $__n, $__s);
 } else {
  $tobool = ($__n | 0) == 0;
  if (!$tobool) {
   if ($tobool$i$i) {
    $3 = HEAP32[$this >> 2] | 0;
    $cond$i30 = $3;
   } else {
    $cond$i30 = $this;
   }
   $add$ptr = $cond$i30 + $cond$i24 | 0;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr, $__s, $__n) | 0;
   $add = $cond$i24 + $__n | 0;
   $4 = HEAP8[$__size_$i$i >> 0] | 0;
   $tobool$i$i33 = $4 << 24 >> 24 < 0;
   if ($tobool$i$i33) {
    $__size_$i2$i = $this + 4 | 0;
    HEAP32[$__size_$i2$i >> 2] = $add;
   } else {
    $conv$i$i34 = $add & 255;
    HEAP8[$__size_$i$i >> 0] = $conv$i$i34;
   }
   $arrayidx = $cond$i30 + $add | 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx, 0);
  }
 }
 return $this | 0;
}

function __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE8__appendEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $__end_ = 0, $__end_cap_$i = 0, $__v = 0, $add = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp3$i = 0, $mul$i = 0, $spec$select = 0, $sub$ptr$div = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $__v = sp;
 $__end_cap_$i = $this + 8 | 0;
 $0 = HEAP32[$__end_cap_$i >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 $sub$ptr$sub = $0 - $1 | 0;
 $sub$ptr$div = $sub$ptr$sub >> 6;
 $cmp = $sub$ptr$div >>> 0 < $__n >>> 0;
 if (!$cmp) {
  __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE18__construct_at_endEm($this, $__n);
  STACKTOP = sp;
  return;
 }
 $2 = HEAP32[$this >> 2] | 0;
 $sub$ptr$sub$i = $1 - $2 | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 6;
 $add = $sub$ptr$div$i + $__n | 0;
 $cmp$i = $add >>> 0 > 67108863;
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 }
 $sub$ptr$sub$i$i$i = $0 - $2 | 0;
 $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 6;
 $cmp3$i = $sub$ptr$div$i$i$i >>> 0 < 33554431;
 $mul$i = $sub$ptr$sub$i$i$i >> 5;
 $cmp$i$i$i$i = $mul$i >>> 0 < $add >>> 0;
 $$sroa$speculated = $cmp$i$i$i$i ? $add : $mul$i;
 $spec$select = $cmp3$i ? $$sroa$speculated : 67108863;
 __ZNSt3__214__split_bufferIN6Crypto9SignatureERNS_9allocatorIS2_EEEC2EmmS5_($__v, $spec$select, $sub$ptr$div$i, $__end_cap_$i);
 __ZNSt3__214__split_bufferIN6Crypto9SignatureERNS_9allocatorIS2_EEE18__construct_at_endEm($__v, $__n);
 __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
 __ZNSt3__214__split_bufferIN6Crypto9SignatureERNS_9allocatorIS2_EEED2Ev($__v);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $__old_cap, $__old_sz, $__n_copy) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $__cap_$i = 0, $__size_$i$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr29 = 0, $and$i$i = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp16 = 0, $cmp24 = 0, $cmp34 = 0, $cmp4 = 0, $cond$i = 0, $cond30 = 0;
 var $mul = 0, $or$i = 0, $phitmp = 0, $sub23 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__old_cap | 0) == -17;
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $1 = HEAP32[$this >> 2] | 0;
  $cond$i = $1;
 } else {
  $cond$i = $this;
 }
 $cmp4 = $__old_cap >>> 0 < 2147483623;
 if ($cmp4) {
  $add = $__old_cap + 1 | 0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = $add >>> 0 < $mul >>> 0;
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = $$sroa$speculated >>> 0 < 11;
  $add$i$i = $$sroa$speculated + 16 | 0;
  $and$i$i = $add$i$i & -16;
  $phitmp = $cmp$i ? 11 : $and$i$i;
  $cond30 = $phitmp;
 } else {
  $cond30 = -17;
 }
 $call$i$i$i = __Znwm($cond30) | 0;
 $cmp16 = ($__n_copy | 0) == 0;
 if (!$cmp16) {
  __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i, $cond$i, $__n_copy) | 0;
 }
 $sub23 = $__old_sz - $__n_copy | 0;
 $cmp24 = ($sub23 | 0) == 0;
 if (!$cmp24) {
  $add$ptr = $call$i$i$i + $__n_copy | 0;
  $add$ptr29 = $cond$i + $__n_copy | 0;
  __ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr, $add$ptr29, $sub23) | 0;
 }
 $cmp34 = ($__old_cap | 0) == 10;
 if (!$cmp34) {
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i);
 }
 HEAP32[$this >> 2] = $call$i$i$i;
 $or$i = $cond30 | -2147483648;
 $__cap_$i = $this + 8 | 0;
 HEAP32[$__cap_$i >> 2] = $or$i;
 return;
}

function __ZN4Core13toTypedVectorIN6Crypto9SignatureEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($stringVector, $result) {
 $stringVector = $stringVector | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__begin$sroa$0$09 = 0, $__end_$i$i = 0, $__end_$i35 = 0, $__value_$i$i$i$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i8 = 0, $incdec$ptr$i = 0, $incdec$ptr$i19 = 0, $value = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $value = sp;
 $__end_$i$i = $result + 4 | 0;
 $0 = HEAP32[$result >> 2] | 0;
 HEAP32[$__end_$i$i >> 2] = $0;
 $__value_$i$i$i$i$i$i$i = $result + 8 | 0;
 $1 = HEAP32[$stringVector >> 2] | 0;
 $__end_$i35 = $stringVector + 4 | 0;
 $2 = HEAP32[$__end_$i35 >> 2] | 0;
 $cmp$i$i8 = ($1 | 0) == ($2 | 0);
 if ($cmp$i$i8) {
  STACKTOP = sp;
  return;
 }
 $__begin$sroa$0$09 = $1;
 while (1) {
  __ZN6Crypto9SignatureC2Ev($value);
  __ZN6Common10podFromHexIN6Crypto9SignatureEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($__begin$sroa$0$09, $value);
  $3 = HEAP32[$__end_$i$i >> 2] | 0;
  $4 = HEAP32[$__value_$i$i$i$i$i$i$i >> 2] | 0;
  $cmp$i = ($3 | 0) == ($4 | 0);
  if ($cmp$i) {
   __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($result, $value);
  } else {
   dest = $3;
   src = $value;
   stop = dest + 64 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $5 = HEAP32[$__end_$i$i >> 2] | 0;
   $incdec$ptr$i19 = $5 + 64 | 0;
   HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i19;
  }
  $incdec$ptr$i = $__begin$sroa$0$09 + 12 | 0;
  $cmp$i$i = ($incdec$ptr$i | 0) == ($2 | 0);
  if ($cmp$i$i) {
   break;
  } else {
   $__begin$sroa$0$09 = $incdec$ptr$i;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN4Core13toTypedVectorIN6Crypto9SecretKeyEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($stringVector, $result) {
 $stringVector = $stringVector | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__begin$sroa$0$09 = 0, $__end_$i$i = 0, $__end_$i35 = 0, $__value_$i$i$i$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i8 = 0, $incdec$ptr$i = 0, $incdec$ptr$i19 = 0, $value = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $value = sp;
 $__end_$i$i = $result + 4 | 0;
 $0 = HEAP32[$result >> 2] | 0;
 HEAP32[$__end_$i$i >> 2] = $0;
 $__value_$i$i$i$i$i$i$i = $result + 8 | 0;
 $1 = HEAP32[$stringVector >> 2] | 0;
 $__end_$i35 = $stringVector + 4 | 0;
 $2 = HEAP32[$__end_$i35 >> 2] | 0;
 $cmp$i$i8 = ($1 | 0) == ($2 | 0);
 if ($cmp$i$i8) {
  STACKTOP = sp;
  return;
 }
 $__begin$sroa$0$09 = $1;
 while (1) {
  __ZN6Crypto9SecretKeyC2Ev($value);
  __ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($__begin$sroa$0$09, $value);
  $3 = HEAP32[$__end_$i$i >> 2] | 0;
  $4 = HEAP32[$__value_$i$i$i$i$i$i$i >> 2] | 0;
  $cmp$i = ($3 | 0) == ($4 | 0);
  if ($cmp$i) {
   __ZNSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($result, $value);
  } else {
   dest = $3;
   src = $value;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $5 = HEAP32[$__end_$i$i >> 2] | 0;
   $incdec$ptr$i19 = $5 + 32 | 0;
   HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i19;
  }
  $incdec$ptr$i = $__begin$sroa$0$09 + 12 | 0;
  $cmp$i$i = ($incdec$ptr$i | 0) == ($2 | 0);
  if ($cmp$i$i) {
   break;
  } else {
   $__begin$sroa$0$09 = $incdec$ptr$i;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN4Core13toTypedVectorIN6Crypto9PublicKeyEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($stringVector, $result) {
 $stringVector = $stringVector | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__begin$sroa$0$09 = 0, $__end_$i$i = 0, $__end_$i35 = 0, $__value_$i$i$i$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i8 = 0, $incdec$ptr$i = 0, $incdec$ptr$i19 = 0, $value = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $value = sp;
 $__end_$i$i = $result + 4 | 0;
 $0 = HEAP32[$result >> 2] | 0;
 HEAP32[$__end_$i$i >> 2] = $0;
 $__value_$i$i$i$i$i$i$i = $result + 8 | 0;
 $1 = HEAP32[$stringVector >> 2] | 0;
 $__end_$i35 = $stringVector + 4 | 0;
 $2 = HEAP32[$__end_$i35 >> 2] | 0;
 $cmp$i$i8 = ($1 | 0) == ($2 | 0);
 if ($cmp$i$i8) {
  STACKTOP = sp;
  return;
 }
 $__begin$sroa$0$09 = $1;
 while (1) {
  __ZN6Crypto9PublicKeyC2Ev($value);
  __ZN6Common10podFromHexIN6Crypto9PublicKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($__begin$sroa$0$09, $value);
  $3 = HEAP32[$__end_$i$i >> 2] | 0;
  $4 = HEAP32[$__value_$i$i$i$i$i$i$i >> 2] | 0;
  $cmp$i = ($3 | 0) == ($4 | 0);
  if ($cmp$i) {
   __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($result, $value);
  } else {
   dest = $3;
   src = $value;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $5 = HEAP32[$__end_$i$i >> 2] | 0;
   $incdec$ptr$i19 = $5 + 32 | 0;
   HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i19;
  }
  $incdec$ptr$i = $__begin$sroa$0$09 + 12 | 0;
  $cmp$i$i = ($incdec$ptr$i | 0) == ($2 | 0);
  if ($cmp$i$i) {
   break;
  } else {
   $__begin$sroa$0$09 = $incdec$ptr$i;
  }
 }
 STACKTOP = sp;
 return;
}

function _fe_neg($h, $f) {
 $h = $h | 0;
 $f = $f | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx20 = 0, $arrayidx21 = 0, $arrayidx22 = 0, $arrayidx23 = 0, $arrayidx24 = 0, $arrayidx25 = 0, $arrayidx26 = 0, $arrayidx27 = 0;
 var $arrayidx28 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $arrayidx5 = 0, $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $sub = 0, $sub10 = 0, $sub11 = 0, $sub12 = 0, $sub13 = 0, $sub14 = 0, $sub15 = 0, $sub16 = 0, $sub17 = 0, $sub18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f >> 2] | 0;
 $arrayidx1 = $f + 4 | 0;
 $1 = HEAP32[$arrayidx1 >> 2] | 0;
 $arrayidx2 = $f + 8 | 0;
 $2 = HEAP32[$arrayidx2 >> 2] | 0;
 $arrayidx3 = $f + 12 | 0;
 $3 = HEAP32[$arrayidx3 >> 2] | 0;
 $arrayidx4 = $f + 16 | 0;
 $4 = HEAP32[$arrayidx4 >> 2] | 0;
 $arrayidx5 = $f + 20 | 0;
 $5 = HEAP32[$arrayidx5 >> 2] | 0;
 $arrayidx6 = $f + 24 | 0;
 $6 = HEAP32[$arrayidx6 >> 2] | 0;
 $arrayidx7 = $f + 28 | 0;
 $7 = HEAP32[$arrayidx7 >> 2] | 0;
 $arrayidx8 = $f + 32 | 0;
 $8 = HEAP32[$arrayidx8 >> 2] | 0;
 $arrayidx9 = $f + 36 | 0;
 $9 = HEAP32[$arrayidx9 >> 2] | 0;
 $sub = 0 - $0 | 0;
 $sub10 = 0 - $1 | 0;
 $sub11 = 0 - $2 | 0;
 $sub12 = 0 - $3 | 0;
 $sub13 = 0 - $4 | 0;
 $sub14 = 0 - $5 | 0;
 $sub15 = 0 - $6 | 0;
 $sub16 = 0 - $7 | 0;
 $sub17 = 0 - $8 | 0;
 $sub18 = 0 - $9 | 0;
 HEAP32[$h >> 2] = $sub;
 $arrayidx20 = $h + 4 | 0;
 HEAP32[$arrayidx20 >> 2] = $sub10;
 $arrayidx21 = $h + 8 | 0;
 HEAP32[$arrayidx21 >> 2] = $sub11;
 $arrayidx22 = $h + 12 | 0;
 HEAP32[$arrayidx22 >> 2] = $sub12;
 $arrayidx23 = $h + 16 | 0;
 HEAP32[$arrayidx23 >> 2] = $sub13;
 $arrayidx24 = $h + 20 | 0;
 HEAP32[$arrayidx24 >> 2] = $sub14;
 $arrayidx25 = $h + 24 | 0;
 HEAP32[$arrayidx25 >> 2] = $sub15;
 $arrayidx26 = $h + 28 | 0;
 HEAP32[$arrayidx26 >> 2] = $sub16;
 $arrayidx27 = $h + 32 | 0;
 HEAP32[$arrayidx27 >> 2] = $sub17;
 $arrayidx28 = $h + 36 | 0;
 HEAP32[$arrayidx28 >> 2] = $sub18;
 return;
}

function __ZN6Crypto8Multisig17dedupeAndSortKeysINS_9SecretKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_($agg$result, $keys$0$0$0$val, $keys$0$0$1$val) {
 $agg$result = $agg$result | 0;
 $keys$0$0$0$val = $keys$0$0$0$val | 0;
 $keys$0$0$1$val = $keys$0$0$1$val | 0;
 var $0 = 0, $__value_$i$i$i$i$i$i$i$i = 0, $agg$tmp4$i$sroa$0$08 = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i7 = 0, $incdec$ptr$i$i$i = 0, $seen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $seen = sp;
 __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEEC2ERKSC_($seen);
 $__value_$i$i$i$i$i$i$i$i = $seen + 4 | 0;
 $cmp$i$i$i$i7 = ($keys$0$0$0$val | 0) == ($keys$0$0$1$val | 0);
 if (!$cmp$i$i$i$i7) {
  $agg$tmp4$i$sroa$0$08 = $keys$0$0$0$val;
  while (1) {
   __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE30__emplace_hint_unique_key_argsIS2_JRKS2_EEENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEENS_21__tree_const_iteratorIS2_SM_lEERKS6_DpOT0_($seen, $__value_$i$i$i$i$i$i$i$i, $agg$tmp4$i$sroa$0$08, $agg$tmp4$i$sroa$0$08);
   $incdec$ptr$i$i$i = $agg$tmp4$i$sroa$0$08 + 32 | 0;
   $cmp$i$i$i$i = ($incdec$ptr$i$i$i | 0) == ($keys$0$0$1$val | 0);
   if ($cmp$i$i$i$i) {
    break;
   } else {
    $agg$tmp4$i$sroa$0$08 = $incdec$ptr$i$i$i;
   }
  }
 }
 $0 = HEAP32[$seen >> 2] | 0;
 __ZNSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEEC2INS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEEET_NS_9enable_ifIXaasr21__is_forward_iteratorISD_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISD_E9referenceEEE5valueESD_E4typeE($agg$result, $0, $__value_$i$i$i$i$i$i$i$i);
 __ZNSt3__23setIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEED2Ev($seen);
 STACKTOP = sp;
 return;
}
function __ZN6Crypto8Multisig17dedupeAndSortKeysINS_9PublicKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_($agg$result, $keys$0$0$0$val, $keys$0$0$1$val) {
 $agg$result = $agg$result | 0;
 $keys$0$0$0$val = $keys$0$0$0$val | 0;
 $keys$0$0$1$val = $keys$0$0$1$val | 0;
 var $0 = 0, $__value_$i$i$i$i$i$i$i$i = 0, $agg$tmp4$i$sroa$0$08 = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i7 = 0, $incdec$ptr$i$i$i = 0, $seen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $seen = sp;
 __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEEC2ERKSC_($seen);
 $__value_$i$i$i$i$i$i$i$i = $seen + 4 | 0;
 $cmp$i$i$i$i7 = ($keys$0$0$0$val | 0) == ($keys$0$0$1$val | 0);
 if (!$cmp$i$i$i$i7) {
  $agg$tmp4$i$sroa$0$08 = $keys$0$0$0$val;
  while (1) {
   __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE30__emplace_hint_unique_key_argsIS2_JRKS2_EEENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEENS_21__tree_const_iteratorIS2_SM_lEERKS6_DpOT0_($seen, $__value_$i$i$i$i$i$i$i$i, $agg$tmp4$i$sroa$0$08, $agg$tmp4$i$sroa$0$08);
   $incdec$ptr$i$i$i = $agg$tmp4$i$sroa$0$08 + 32 | 0;
   $cmp$i$i$i$i = ($incdec$ptr$i$i$i | 0) == ($keys$0$0$1$val | 0);
   if ($cmp$i$i$i$i) {
    break;
   } else {
    $agg$tmp4$i$sroa$0$08 = $incdec$ptr$i$i$i;
   }
  }
 }
 $0 = HEAP32[$seen >> 2] | 0;
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEEC2INS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEEET_NS_9enable_ifIXaasr21__is_forward_iteratorISD_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISD_E9referenceEEE5valueESD_E4typeE($agg$result, $0, $__value_$i$i$i$i$i$i$i$i);
 __ZNSt3__23setIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEED2Ev($seen);
 STACKTOP = sp;
 return;
}

function __ZN4Core13toTypedVectorIN6Crypto8KeyImageEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($stringVector, $result) {
 $stringVector = $stringVector | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__begin$sroa$0$09 = 0, $__end_$i$i = 0, $__end_$i35 = 0, $__value_$i$i$i$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i8 = 0, $incdec$ptr$i = 0, $incdec$ptr$i19 = 0, $value = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $value = sp;
 $__end_$i$i = $result + 4 | 0;
 $0 = HEAP32[$result >> 2] | 0;
 HEAP32[$__end_$i$i >> 2] = $0;
 $__value_$i$i$i$i$i$i$i = $result + 8 | 0;
 $1 = HEAP32[$stringVector >> 2] | 0;
 $__end_$i35 = $stringVector + 4 | 0;
 $2 = HEAP32[$__end_$i35 >> 2] | 0;
 $cmp$i$i8 = ($1 | 0) == ($2 | 0);
 if ($cmp$i$i8) {
  STACKTOP = sp;
  return;
 }
 $__begin$sroa$0$09 = $1;
 while (1) {
  __ZN6Crypto8KeyImageC2Ev($value);
  __ZN6Common10podFromHexIN6Crypto8KeyImageEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($__begin$sroa$0$09, $value);
  $3 = HEAP32[$__end_$i$i >> 2] | 0;
  $4 = HEAP32[$__value_$i$i$i$i$i$i$i >> 2] | 0;
  $cmp$i = ($3 | 0) == ($4 | 0);
  if ($cmp$i) {
   __ZNSt3__26vectorIN6Crypto8KeyImageENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($result, $value);
  } else {
   dest = $3;
   src = $value;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $5 = HEAP32[$__end_$i$i >> 2] | 0;
   $incdec$ptr$i19 = $5 + 32 | 0;
   HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i19;
  }
  $incdec$ptr$i = $__begin$sroa$0$09 + 12 | 0;
  $cmp$i$i = ($incdec$ptr$i | 0) == ($2 | 0);
  if ($cmp$i$i) {
   break;
  } else {
   $__begin$sroa$0$09 = $incdec$ptr$i;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN6Crypto8Multisig17dedupeAndSortKeysINS_8KeyImageEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_($agg$result, $keys$0$0$0$val, $keys$0$0$1$val) {
 $agg$result = $agg$result | 0;
 $keys$0$0$0$val = $keys$0$0$0$val | 0;
 $keys$0$0$1$val = $keys$0$0$1$val | 0;
 var $0 = 0, $__value_$i$i$i$i$i$i$i$i = 0, $agg$tmp4$i$sroa$0$08 = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i7 = 0, $incdec$ptr$i$i$i = 0, $seen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $seen = sp;
 __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEEC2ERKSC_($seen);
 $__value_$i$i$i$i$i$i$i$i = $seen + 4 | 0;
 $cmp$i$i$i$i7 = ($keys$0$0$0$val | 0) == ($keys$0$0$1$val | 0);
 if (!$cmp$i$i$i$i7) {
  $agg$tmp4$i$sroa$0$08 = $keys$0$0$0$val;
  while (1) {
   __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE30__emplace_hint_unique_key_argsIS2_JRKS2_EEENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEENS_21__tree_const_iteratorIS2_SM_lEERKS6_DpOT0_($seen, $__value_$i$i$i$i$i$i$i$i, $agg$tmp4$i$sroa$0$08, $agg$tmp4$i$sroa$0$08);
   $incdec$ptr$i$i$i = $agg$tmp4$i$sroa$0$08 + 32 | 0;
   $cmp$i$i$i$i = ($incdec$ptr$i$i$i | 0) == ($keys$0$0$1$val | 0);
   if ($cmp$i$i$i$i) {
    break;
   } else {
    $agg$tmp4$i$sroa$0$08 = $incdec$ptr$i$i$i;
   }
  }
 }
 $0 = HEAP32[$seen >> 2] | 0;
 __ZNSt3__26vectorIN6Crypto8KeyImageENS_9allocatorIS2_EEEC2INS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEEET_NS_9enable_ifIXaasr21__is_forward_iteratorISD_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISD_E9referenceEEE5valueESD_E4typeE($agg$result, $0, $__value_$i$i$i$i$i$i$i$i);
 __ZNSt3__23setIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEED2Ev($seen);
 STACKTOP = sp;
 return;
}

function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add5 = 0, $conv = 0, $conv6 = 0, $div9 = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $tobool8 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 >>> 0 > 0;
 $3 = $0 >>> 0 > 4294967295;
 $4 = ($1 | 0) == 0;
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $7 = $0;
  $8 = $1;
  $s$addr$013 = $s;
  while (1) {
   $9 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $10 = getTempRet0() | 0;
   $11 = ___muldi3($9 | 0, $10 | 0, -10, -1) | 0;
   $12 = getTempRet0() | 0;
   $13 = _i64Add($11 | 0, $12 | 0, $7 | 0, $8 | 0) | 0;
   $14 = getTempRet0() | 0;
   $15 = $13 & 255;
   $conv = $15 | 48;
   $incdec$ptr = $s$addr$013 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = $conv;
   $16 = $8 >>> 0 > 9;
   $17 = $7 >>> 0 > 4294967295;
   $18 = ($8 | 0) == 9;
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $7 = $9;
    $8 = $10;
    $s$addr$013 = $incdec$ptr;
   } else {
    break;
   }
  }
  $s$addr$0$lcssa = $incdec$ptr;
  $x$addr$0$lcssa$off0 = $9;
 } else {
  $s$addr$0$lcssa = $s;
  $x$addr$0$lcssa$off0 = $0;
 }
 $tobool8 = ($x$addr$0$lcssa$off0 | 0) == 0;
 if ($tobool8) {
  $s$addr$1$lcssa = $s$addr$0$lcssa;
 } else {
  $s$addr$19 = $s$addr$0$lcssa;
  $y$010 = $x$addr$0$lcssa$off0;
  while (1) {
   $div9 = ($y$010 >>> 0) / 10 & -1;
   $21 = Math_imul($div9, -10) | 0;
   $22 = $21 + $y$010 | 0;
   $add5 = $22 | 48;
   $conv6 = $add5 & 255;
   $incdec$ptr7 = $s$addr$19 + -1 | 0;
   HEAP8[$incdec$ptr7 >> 0] = $conv6;
   $23 = $y$010 >>> 0 < 10;
   if ($23) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else {
    $s$addr$19 = $incdec$ptr7;
    $y$010 = $div9;
   }
  }
 }
 return $s$addr$1$lcssa | 0;
}

function __ZNSt3__219__thread_struct_impD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $__end_$i11 = 0, $__shared_owners_$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i3 = 0, $cmp$i$i6 = 0, $cmp$i$i61 = 0, $i$sroa$0$04 = 0, $i9$sroa$0$02 = 0;
 var $incdec$ptr$i = 0, $incdec$ptr$i8 = 0, $notify_ = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $notify_ = $this + 12 | 0;
 $0 = HEAP32[$notify_ >> 2] | 0;
 $__end_$i = $this + 16 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $cmp$i$i3 = ($0 | 0) == ($1 | 0);
 if (!$cmp$i$i3) {
  $i$sroa$0$04 = $0;
  while (1) {
   $4 = HEAP32[$i$sroa$0$04 >> 2] | 0;
   __ZNSt3__218condition_variable10notify_allEv($4);
   $incdec$ptr$i8 = $i$sroa$0$04 + 8 | 0;
   $cmp$i$i = ($incdec$ptr$i8 | 0) == ($1 | 0);
   if ($cmp$i$i) {
    break;
   } else {
    $i$sroa$0$04 = $incdec$ptr$i8;
   }
  }
 }
 $2 = HEAP32[$this >> 2] | 0;
 $__end_$i11 = $this + 4 | 0;
 $3 = HEAP32[$__end_$i11 >> 2] | 0;
 $cmp$i$i61 = ($2 | 0) == ($3 | 0);
 if (!$cmp$i$i61) {
  $i9$sroa$0$02 = $2;
  while (1) {
   $5 = HEAP32[$i9$sroa$0$02 >> 2] | 0;
   __ZNSt3__217__assoc_sub_state12__make_readyEv($5);
   $6 = HEAP32[$i9$sroa$0$02 >> 2] | 0;
   $__shared_owners_$i = $6 + 4 | 0;
   $7 = HEAP32[$__shared_owners_$i >> 2] | 0;
   $8 = $7 + -1 | 0;
   HEAP32[$__shared_owners_$i >> 2] = $8;
   $cmp$i = ($7 | 0) == 0;
   if ($cmp$i) {
    $vtable$i = HEAP32[$6 >> 2] | 0;
    $vfn$i = $vtable$i + 8 | 0;
    $9 = HEAP32[$vfn$i >> 2] | 0;
    FUNCTION_TABLE_vi[$9 & 255]($6);
   }
   $incdec$ptr$i = $i9$sroa$0$02 + 4 | 0;
   $cmp$i$i6 = ($incdec$ptr$i | 0) == ($3 | 0);
   if ($cmp$i$i6) {
    break;
   } else {
    $i9$sroa$0$02 = $incdec$ptr$i;
   }
  }
 }
 __ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEED2Ev($notify_);
 __ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEED2Ev($this);
 return;
}

function __ZN4Core6mul128EyyPy($0, $1, $2, $3, $product_hi) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $product_hi = $product_hi | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = __ZN4Core8hi_dwordEy($0, $1) | 0;
 $5 = getTempRet0() | 0;
 $6 = __ZN4Core8lo_dwordEy($0, $1) | 0;
 $7 = getTempRet0() | 0;
 $8 = __ZN4Core8hi_dwordEy($2, $3) | 0;
 $9 = getTempRet0() | 0;
 $10 = __ZN4Core8lo_dwordEy($2, $3) | 0;
 $11 = getTempRet0() | 0;
 $12 = ___muldi3($8 | 0, $9 | 0, $4 | 0, $5 | 0) | 0;
 $13 = getTempRet0() | 0;
 $14 = ___muldi3($10 | 0, $11 | 0, $4 | 0, $5 | 0) | 0;
 $15 = getTempRet0() | 0;
 $16 = ___muldi3($8 | 0, $9 | 0, $6 | 0, $7 | 0) | 0;
 $17 = getTempRet0() | 0;
 $18 = ___muldi3($10 | 0, $11 | 0, $6 | 0, $7 | 0) | 0;
 $19 = getTempRet0() | 0;
 $20 = _i64Add($14 | 0, $15 | 0, $16 | 0, $17 | 0) | 0;
 $21 = getTempRet0() | 0;
 $22 = $21 >>> 0 < $15 >>> 0;
 $23 = $20 >>> 0 < $14 >>> 0;
 $24 = ($21 | 0) == ($15 | 0);
 $25 = $24 & $23;
 $26 = $22 | $25;
 $27 = $26 & 1;
 $28 = _i64Add(0, $20 | 0, $18 | 0, $19 | 0) | 0;
 $29 = getTempRet0() | 0;
 $30 = $29 >>> 0 < $19 >>> 0;
 $31 = $28 >>> 0 < $18 >>> 0;
 $32 = ($29 | 0) == ($19 | 0);
 $33 = $32 & $31;
 $34 = $30 | $33;
 $35 = $34 & 1;
 $36 = _i64Add($21 | 0, 0, $12 | 0, $13 | 0) | 0;
 $37 = getTempRet0() | 0;
 $38 = _i64Add($36 | 0, $37 | 0, 0, $27 | 0) | 0;
 $39 = getTempRet0() | 0;
 $40 = _i64Add($38 | 0, $39 | 0, $35 | 0, 0) | 0;
 $41 = getTempRet0() | 0;
 $42 = $product_hi;
 $43 = $42;
 HEAP32[$43 >> 2] = $40;
 $44 = $42 + 4 | 0;
 $45 = $44;
 HEAP32[$45 >> 2] = $41;
 setTempRet0($29 | 0);
 return $28 | 0;
}

function ___embind_register_native_and_builtin_types() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_void(42768 | 0, 48152 | 0);
 __embind_register_bool(42784 | 0, 48157 | 0, 1, 1, 0);
 __ZN12_GLOBAL__N_116register_integerIcEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIaEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIhEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIsEEvPKc();
 __ZN12_GLOBAL__N_116register_integerItEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIiEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIjEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIlEEvPKc();
 __ZN12_GLOBAL__N_116register_integerImEEvPKc();
 __ZN12_GLOBAL__N_114register_floatIfEEvPKc();
 __ZN12_GLOBAL__N_114register_floatIdEEvPKc();
 __embind_register_std_string(42008 | 0, 48256 | 0);
 __embind_register_std_string(42552 | 0, 46768 | 0);
 __embind_register_std_wstring(42528 | 0, 4, 46801 | 0);
 __embind_register_emval(42136 | 0, 46814 | 0);
 __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(46860);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(46897);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(46936);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(46967);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(47007);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(47036);
 __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(47143);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(47175);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(47208);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(47241);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(47275);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(47308);
 __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc();
 return;
}

function _strlen($s) {
 $s = $s | 0;
 var $$pn = 0, $$pn24 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $and3 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $incdec$ptr7 = 0, $neg = 0, $rem = 0, $rem13 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0;
 var $s$addr$1$lcssa = 0, $sub = 0, $sub$ptr$lhs$cast15 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool1021 = 0, $tobool14 = 0, $tobool4 = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $rem13 = $0 & 3;
 $tobool14 = ($rem13 | 0) == 0;
 L1 : do {
  if ($tobool14) {
   $s$addr$0$lcssa = $s;
   label = 5;
  } else {
   $5 = $0;
   $s$addr$015 = $s;
   while (1) {
    $1 = HEAP8[$s$addr$015 >> 0] | 0;
    $tobool1 = $1 << 24 >> 24 == 0;
    if ($tobool1) {
     $$pn = $5;
     break L1;
    }
    $incdec$ptr = $s$addr$015 + 1 | 0;
    $2 = $incdec$ptr;
    $rem = $2 & 3;
    $tobool = ($rem | 0) == 0;
    if ($tobool) {
     $s$addr$0$lcssa = $incdec$ptr;
     label = 5;
     break;
    } else {
     $5 = $2;
     $s$addr$015 = $incdec$ptr;
    }
   }
  }
 } while (0);
 if ((label | 0) == 5) {
  $w$0 = $s$addr$0$lcssa;
  while (1) {
   $3 = HEAP32[$w$0 >> 2] | 0;
   $sub = $3 + -16843009 | 0;
   $neg = $3 & -2139062144;
   $and = $neg ^ -2139062144;
   $and3 = $and & $sub;
   $tobool4 = ($and3 | 0) == 0;
   $incdec$ptr7 = $w$0 + 4 | 0;
   if ($tobool4) {
    $w$0 = $incdec$ptr7;
   } else {
    break;
   }
  }
  $4 = $3 & 255;
  $tobool1021 = $4 << 24 >> 24 == 0;
  if ($tobool1021) {
   $s$addr$1$lcssa = $w$0;
  } else {
   $$pn24 = $w$0;
   while (1) {
    $incdec$ptr1323 = $$pn24 + 1 | 0;
    $$pre = HEAP8[$incdec$ptr1323 >> 0] | 0;
    $tobool10 = $$pre << 24 >> 24 == 0;
    if ($tobool10) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else {
     $$pn24 = $incdec$ptr1323;
    }
   }
  }
  $sub$ptr$lhs$cast15 = $s$addr$1$lcssa;
  $$pn = $sub$ptr$lhs$cast15;
 }
 $retval$0 = $$pn - $0 | 0;
 return $retval$0 | 0;
}

function __ZN6Crypto10crypto_ops21prepareRingSignaturesENS_4HashENS_8KeyImageENSt3__26vectorINS_9PublicKeyENS3_9allocatorIS5_EEEEyRNS4_INS_9SignatureENS6_IS9_EEEERNS_19EllipticCurveScalarE($prefixHash, $keyImage, $publicKeys, $0, $1, $signatures, $k) {
 $prefixHash = $prefixHash | 0;
 $keyImage = $keyImage | 0;
 $publicKeys = $publicKeys | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $signatures = $signatures | 0;
 $k = $k | 0;
 var $2 = 0, $agg$tmp2 = 0, $k$byval_copy = 0, $keyImage$byval_copy = 0, $prefixHash$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
 $k$byval_copy = sp + 80 | 0;
 $keyImage$byval_copy = sp + 48 | 0;
 $prefixHash$byval_copy = sp + 16 | 0;
 $agg$tmp2 = sp;
 __ZN6CryptoL13random_scalarERNS_19EllipticCurveScalarE($k);
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEEC2ERKS5_($agg$tmp2, $publicKeys);
 dest = $prefixHash$byval_copy;
 src = $prefixHash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $keyImage$byval_copy;
 src = $keyImage;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $k$byval_copy;
 src = $k;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $2 = __ZN6Crypto10crypto_ops21prepareRingSignaturesENS_4HashENS_8KeyImageENSt3__26vectorINS_9PublicKeyENS3_9allocatorIS5_EEEEyNS_19EllipticCurveScalarERNS4_INS_9SignatureENS6_ISA_EEEE($prefixHash$byval_copy, $keyImage$byval_copy, $agg$tmp2, $0, $1, $k$byval_copy, $signatures) | 0;
 __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($agg$tmp2);
 STACKTOP = sp;
 return $2 | 0;
}

function _blake2b_update($S, $in, $inlen) {
 $S = $S | 0;
 $in = $in | 0;
 $inlen = $inlen | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $add$ptr = 0, $add$ptr7 = 0, $add12 = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx10 = 0, $buflen = 0, $cmp = 0, $cmp5 = 0;
 var $cmp524 = 0, $inlen$addr$026 = 0, $inlen$addr$1 = 0, $pin$025 = 0, $pin$1 = 0, $scevgep = 0, $sub = 0, $sub4 = 0, $sub6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $buflen = $S + 208 | 0;
 $0 = HEAP32[$buflen >> 2] | 0;
 $add = $0 + $inlen | 0;
 $cmp = $add >>> 0 > 128;
 if ($cmp) {
  $sub = 128 - $0 | 0;
  $arrayidx = ($S + 80 | 0) + $0 | 0;
  _memcpy($arrayidx | 0, $in | 0, $sub | 0) | 0;
  _blake2b_increment_counter($S, 128, 0);
  $arraydecay = $S + 80 | 0;
  _blake2b_compress($S, $arraydecay, 0, 0);
  HEAP32[$buflen >> 2] = 0;
  $sub4 = $inlen - $sub | 0;
  $add$ptr = $in + $sub | 0;
  $cmp524 = $sub4 >>> 0 > 128;
  if ($cmp524) {
   $1 = $add + -257 | 0;
   $2 = $1 & -128;
   $3 = $2 + 256 | 0;
   $inlen$addr$026 = $sub4;
   $pin$025 = $add$ptr;
   while (1) {
    _blake2b_increment_counter($S, 128, 0);
    _blake2b_compress($S, $pin$025, 0, 0);
    $sub6 = $inlen$addr$026 + -128 | 0;
    $add$ptr7 = $pin$025 + 128 | 0;
    $cmp5 = $sub6 >>> 0 > 128;
    if ($cmp5) {
     $inlen$addr$026 = $sub6;
     $pin$025 = $add$ptr7;
    } else {
     break;
    }
   }
   $4 = $3 - $0 | 0;
   $5 = $add + -256 | 0;
   $6 = $5 - $2 | 0;
   $scevgep = $in + $4 | 0;
   $$pre = HEAP32[$buflen >> 2] | 0;
   $7 = $$pre;
   $inlen$addr$1 = $6;
   $pin$1 = $scevgep;
  } else {
   $7 = 0;
   $inlen$addr$1 = $sub4;
   $pin$1 = $add$ptr;
  }
 } else {
  $7 = $0;
  $inlen$addr$1 = $inlen;
  $pin$1 = $in;
 }
 $arrayidx10 = ($S + 80 | 0) + $7 | 0;
 _memcpy($arrayidx10 | 0, $pin$1 | 0, $inlen$addr$1 | 0) | 0;
 $8 = HEAP32[$buflen >> 2] | 0;
 $add12 = $8 + $inlen$addr$1 | 0;
 HEAP32[$buflen >> 2] = $add12;
 return;
}

function __ZN10emscripten8internal12MemberAccessI18PreparedSignaturesNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7setWireIS2_EEvRKMS2_S9_RT_PNS0_11BindingTypeIS9_vEUt_E($field, $ptr, $value) {
 $field = $field | 0;
 $ptr = $ptr | 0;
 $value = $value | 0;
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i45$i$i$i$i = 0, $memptr$offset = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $ref$tmp = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($ref$tmp, $value);
 $0 = HEAP32[$field >> 2] | 0;
 $memptr$offset = $ptr + $0 | 0;
 $1 = $memptr$offset + 11 | 0;
 $2 = HEAP8[$1 >> 0] | 0;
 $tobool$i$i$i$i$i = $2 << 24 >> 24 < 0;
 if ($tobool$i$i$i$i$i) {
  $3 = HEAP32[$memptr$offset >> 2] | 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($3, 0);
  $__size_$i45$i$i$i$i = $memptr$offset + 4 | 0;
  HEAP32[$__size_$i45$i$i$i$i >> 2] = 0;
  $$pr = HEAP8[$1 >> 0] | 0;
  $tobool$i$i$i$i = $$pr << 24 >> 24 < 0;
  if ($tobool$i$i$i$i) {
   $4 = HEAP32[$memptr$offset >> 2] | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4);
   $__cap_$i$i$i$i$i = $memptr$offset + 8 | 0;
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  __ZNSt3__211char_traitsIcE6assignERcRKc($memptr$offset, 0);
  HEAP8[$1 >> 0] = 0;
 };
 HEAP32[$memptr$offset >> 2] = HEAP32[$ref$tmp >> 2] | 0;
 HEAP32[$memptr$offset + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2] | 0;
 HEAP32[$memptr$offset + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2] | 0;
 HEAP32[$ref$tmp >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 STACKTOP = sp;
 return;
}

function _internal_kat($instance, $pass) {
 $instance = $instance | 0;
 $pass = $pass | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx7 = 0, $cmp = 0, $cmp1 = 0, $cmp110 = 0, $cmp3 = 0, $cmp5 = 0;
 var $cond = 0, $i$011 = 0, $inc = 0, $inc10 = 0, $j$09 = 0, $memory_blocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $cmp = ($instance | 0) == (0 | 0);
 if ($cmp) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$vararg_buffer >> 2] = $pass;
 _printf(46659, $vararg_buffer);
 $memory_blocks = $instance + 12 | 0;
 $0 = HEAP32[$memory_blocks >> 2] | 0;
 $cmp110 = ($0 | 0) == 0;
 if ($cmp110) {
  STACKTOP = sp;
  return;
 }
 $1 = $0;
 $i$011 = 0;
 while (1) {
  $cmp3 = $1 >>> 0 > 128;
  $cond = $cmp3 ? 1 : 128;
  $j$09 = 0;
  while (1) {
   $2 = HEAP32[$instance >> 2] | 0;
   $arrayidx7 = ($2 + ($i$011 << 10) | 0) + ($j$09 << 3) | 0;
   $3 = $arrayidx7;
   $4 = $3;
   $5 = HEAP32[$4 >> 2] | 0;
   $6 = $3 + 4 | 0;
   $7 = $6;
   $8 = HEAP32[$7 >> 2] | 0;
   HEAP32[$vararg_buffer1 >> 2] = $i$011;
   $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
   HEAP32[$vararg_ptr4 >> 2] = $j$09;
   $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
   $9 = $vararg_ptr5;
   $10 = $9;
   HEAP32[$10 >> 2] = $5;
   $11 = $9 + 4 | 0;
   $12 = $11;
   HEAP32[$12 >> 2] = $8;
   _printf(46677, $vararg_buffer1);
   $inc = $j$09 + 1 | 0;
   $cmp5 = $inc >>> 0 < $cond >>> 0;
   if ($cmp5) {
    $j$09 = $inc;
   } else {
    break;
   }
  }
  $inc10 = $i$011 + 1 | 0;
  $13 = HEAP32[$memory_blocks >> 2] | 0;
  $cmp1 = $inc10 >>> 0 < $13 >>> 0;
  if ($cmp1) {
   $1 = $13;
   $i$011 = $inc10;
  } else {
   break;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal7InvokerI18PreparedSignaturesJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_NS3_6vectorIS9_NS7_IS9_EEEEiEE6invokeEPFS2_S9_S9_SC_iEPNS0_11BindingTypeIS9_vEUt_ESJ_PSC_i($fn, $args, $args1, $args3, $args5) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 var $agg$tmp = 0, $agg$tmp7 = 0, $agg$tmp8 = 0, $call = 0, $call14 = 0, $call18 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $ref$tmp = sp + 40 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp7 = sp + 12 | 0;
 $agg$tmp8 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp7, $args1);
 $call = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($args3) | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp8, $call);
 $call14 = __ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($args5) | 0;
 FUNCTION_TABLE_viiiii[$fn & 127]($ref$tmp, $agg$tmp, $agg$tmp7, $agg$tmp8, $call14);
 $call18 = __ZN10emscripten8internal18GenericBindingTypeI18PreparedSignaturesE10toWireTypeEOS2_($ref$tmp) | 0;
 __ZN18PreparedSignaturesD2Ev($ref$tmp);
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($agg$tmp8);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp7);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call18 | 0;
}

function __ZN10emscripten8internal12MemberAccessI4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7setWireIS2_EEvRKMS2_S9_RT_PNS0_11BindingTypeIS9_vEUt_E($field, $ptr, $value) {
 $field = $field | 0;
 $ptr = $ptr | 0;
 $value = $value | 0;
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i45$i$i$i$i = 0, $memptr$offset = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $ref$tmp = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($ref$tmp, $value);
 $0 = HEAP32[$field >> 2] | 0;
 $memptr$offset = $ptr + $0 | 0;
 $1 = $memptr$offset + 11 | 0;
 $2 = HEAP8[$1 >> 0] | 0;
 $tobool$i$i$i$i$i = $2 << 24 >> 24 < 0;
 if ($tobool$i$i$i$i$i) {
  $3 = HEAP32[$memptr$offset >> 2] | 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($3, 0);
  $__size_$i45$i$i$i$i = $memptr$offset + 4 | 0;
  HEAP32[$__size_$i45$i$i$i$i >> 2] = 0;
  $$pr = HEAP8[$1 >> 0] | 0;
  $tobool$i$i$i$i = $$pr << 24 >> 24 < 0;
  if ($tobool$i$i$i$i) {
   $4 = HEAP32[$memptr$offset >> 2] | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4);
   $__cap_$i$i$i$i$i = $memptr$offset + 8 | 0;
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  __ZNSt3__211char_traitsIcE6assignERcRKc($memptr$offset, 0);
  HEAP8[$1 >> 0] = 0;
 };
 HEAP32[$memptr$offset >> 2] = HEAP32[$ref$tmp >> 2] | 0;
 HEAP32[$memptr$offset + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2] | 0;
 HEAP32[$memptr$offset + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2] | 0;
 HEAP32[$ref$tmp >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZN6Crypto8Multisig7addKeysINS_9SecretKeyEEET_RKS3_RKNSt3__26vectorIS3_NS6_9allocatorIS3_EEEE($agg$result, $key, $keys) {
 $agg$result = $agg$result | 0;
 $key = $key | 0;
 $keys = $keys | 0;
 var $$pn = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__end_$i = 0, $__result$addr$i$i$011 = 0, $add = 0, $agg$tmp11$i$sroa$0$010 = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i9 = 0, $incdec$ptr$i$i$i = 0, $result = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $result = sp;
 $__end_$i = $keys + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$keys >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 $add = $sub$ptr$div$i + 1 | 0;
 __ZNSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEEC2EmRKS2_($result, $add, $key);
 $2 = HEAP32[$keys >> 2] | 0;
 $3 = HEAP32[$__end_$i >> 2] | 0;
 $cmp$i$i$i$i9 = ($2 | 0) == ($3 | 0);
 if (!$cmp$i$i$i$i9) {
  $4 = HEAP32[$result >> 2] | 0;
  $$pn = $4;
  $agg$tmp11$i$sroa$0$010 = $2;
  while (1) {
   $__result$addr$i$i$011 = $$pn + 32 | 0;
   dest = $__result$addr$i$i$011;
   src = $agg$tmp11$i$sroa$0$010;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $incdec$ptr$i$i$i = $agg$tmp11$i$sroa$0$010 + 32 | 0;
   $cmp$i$i$i$i = ($incdec$ptr$i$i$i | 0) == ($3 | 0);
   if ($cmp$i$i$i$i) {
    break;
   } else {
    $$pn = $__result$addr$i$i$011;
    $agg$tmp11$i$sroa$0$010 = $incdec$ptr$i$i$i;
   }
  }
 }
 __ZN6Crypto8Multisig7addKeysINS_9SecretKeyEEET_RKNSt3__26vectorIS3_NS4_9allocatorIS3_EEEE($agg$result, $result);
 __ZNSt3__213__vector_baseIN6Crypto9SecretKeyENS_9allocatorIS2_EEED2Ev($result);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS_6threadENS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__end_ = 0, $__end_$i = 0, $__end_cap_$i = 0, $__v = 0, $add = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp3$i = 0, $incdec$ptr = 0, $mul$i = 0, $spec$select = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0;
 var $sub$ptr$sub$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $__v = sp;
 $__end_cap_$i = $this + 8 | 0;
 $__end_$i = $this + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
 $add = $sub$ptr$div$i + 1 | 0;
 $cmp$i = $add >>> 0 > 1073741823;
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 } else {
  $2 = HEAP32[$__end_cap_$i >> 2] | 0;
  $sub$ptr$sub$i$i$i = $2 - $1 | 0;
  $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 2;
  $cmp3$i = $sub$ptr$div$i$i$i >>> 0 < 536870911;
  $mul$i = $sub$ptr$sub$i$i$i >> 1;
  $cmp$i$i$i$i = $mul$i >>> 0 < $add >>> 0;
  $$sroa$speculated = $cmp$i$i$i$i ? $add : $mul$i;
  $spec$select = $cmp3$i ? $$sroa$speculated : 1073741823;
  __ZNSt3__214__split_bufferINS_6threadERNS_9allocatorIS1_EEEC2EmmS4_($__v, $spec$select, $sub$ptr$div$i, $__end_cap_$i);
  $__end_ = $__v + 8 | 0;
  $3 = HEAP32[$__end_ >> 2] | 0;
  $4 = HEAP32[$__x >> 2] | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$__x >> 2] = 0;
  $incdec$ptr = $3 + 4 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr;
  __ZNSt3__26vectorINS_6threadENS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v);
  __ZNSt3__214__split_bufferINS_6threadERNS_9allocatorIS1_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZN6Crypto8Multisig7addKeysINS_8KeyImageEEET_RKS3_RKNSt3__26vectorIS3_NS6_9allocatorIS3_EEEE($agg$result, $key, $keys) {
 $agg$result = $agg$result | 0;
 $key = $key | 0;
 $keys = $keys | 0;
 var $$pn = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__end_$i = 0, $__result$addr$i$i$011 = 0, $add = 0, $agg$tmp11$i$sroa$0$010 = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i9 = 0, $incdec$ptr$i$i$i = 0, $result = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $result = sp;
 $__end_$i = $keys + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$keys >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 $add = $sub$ptr$div$i + 1 | 0;
 __ZNSt3__26vectorIN6Crypto8KeyImageENS_9allocatorIS2_EEEC2EmRKS2_($result, $add, $key);
 $2 = HEAP32[$keys >> 2] | 0;
 $3 = HEAP32[$__end_$i >> 2] | 0;
 $cmp$i$i$i$i9 = ($2 | 0) == ($3 | 0);
 if (!$cmp$i$i$i$i9) {
  $4 = HEAP32[$result >> 2] | 0;
  $$pn = $4;
  $agg$tmp11$i$sroa$0$010 = $2;
  while (1) {
   $__result$addr$i$i$011 = $$pn + 32 | 0;
   dest = $__result$addr$i$i$011;
   src = $agg$tmp11$i$sroa$0$010;
   stop = dest + 32 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $incdec$ptr$i$i$i = $agg$tmp11$i$sroa$0$010 + 32 | 0;
   $cmp$i$i$i$i = ($incdec$ptr$i$i$i | 0) == ($3 | 0);
   if ($cmp$i$i$i$i) {
    break;
   } else {
    $$pn = $__result$addr$i$i$011;
    $agg$tmp11$i$sroa$0$010 = $incdec$ptr$i$i$i;
   }
  }
 }
 __ZN6Crypto8Multisig7addKeysINS_8KeyImageEEET_RKNSt3__26vectorIS3_NS4_9allocatorIS3_EEEE($agg$result, $result);
 __ZNSt3__213__vector_baseIN6Crypto8KeyImageENS_9allocatorIS2_EEED2Ev($result);
 STACKTOP = sp;
 return;
}

function _oaes_key_import_data($ctx, $data) {
 $ctx = $ctx | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and6$i = 0, $and6$i4 = 0, $call$i = 0, $call$i1 = 0, $call28 = 0, $cmp = 0, $cmp1 = 0, $cmp20 = 0, $cmp4$i = 0, $cmp4$i2 = 0, $cmp7$i = 0, $cmp7$i5 = 0, $data17 = 0, $data19 = 0;
 var $head$i = 0, $head$i3 = 0, $or$cond = 0, $tobool = 0, $tobool29 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $cmp = ($ctx | 0) == (0 | 0);
 $cmp1 = ($data | 0) == (0 | 0);
 $or$cond = $cmp | $cmp1;
 if ($or$cond) {
  return;
 }
 $0 = HEAP32[$ctx >> 2] | 0;
 $tobool = ($0 | 0) == (0 | 0);
 if (!$tobool) {
  _oaes_key_destroy($ctx);
 }
 $call$i = _malloc(24) | 0;
 $cmp4$i = ($call$i | 0) == (0 | 0);
 if ($cmp4$i) {
  HEAP32[$ctx >> 2] = 0;
  return;
 }
 $head$i = $call$i + -4 | 0;
 $1 = HEAP32[$head$i >> 2] | 0;
 $and6$i = $1 & 3;
 $cmp7$i = ($and6$i | 0) == 0;
 if (!$cmp7$i) {
  _memset($call$i | 0, 0, 24) | 0;
 }
 HEAP32[$ctx >> 2] = $call$i;
 HEAP32[$call$i >> 2] = 32;
 $call$i1 = _malloc(32) | 0;
 $cmp4$i2 = ($call$i1 | 0) == (0 | 0);
 if (!$cmp4$i2) {
  $head$i3 = $call$i1 + -4 | 0;
  $2 = HEAP32[$head$i3 >> 2] | 0;
  $and6$i4 = $2 & 3;
  $cmp7$i5 = ($and6$i4 | 0) == 0;
  if (!$cmp7$i5) {
   _memset($call$i1 | 0, 0, 32) | 0;
  }
 }
 $3 = HEAP32[$ctx >> 2] | 0;
 $data17 = $3 + 4 | 0;
 HEAP32[$data17 >> 2] = $call$i1;
 $4 = HEAP32[$ctx >> 2] | 0;
 $data19 = $4 + 4 | 0;
 $5 = HEAP32[$data19 >> 2] | 0;
 $cmp20 = ($5 | 0) == (0 | 0);
 if ($cmp20) {
  _oaes_key_destroy($ctx);
  return;
 }
 dest = $5;
 src = $data;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $call28 = _oaes_key_expand($ctx) | 0;
 $tobool29 = ($call28 | 0) == 0;
 if ($tobool29) {
  return;
 }
 _oaes_key_destroy($ctx);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i3$i = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i = 0, $cond$i19 = 0, $cond$i25 = 0, $conv$i$i = 0, $conv$i$i29 = 0, $phitmp$i = 0, $sub = 0, $tobool$i$i = 0;
 var $tobool$i$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $__cap_$i$i = $this + 8 | 0;
  $1 = HEAP32[$__cap_$i$i >> 2] | 0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = $and$i$i + -1 | 0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 $cmp = $cond$i >>> 0 < $__n >>> 0;
 do {
  if ($cmp) {
   if ($tobool$i$i) {
    $__size_$i3$i = $this + 4 | 0;
    $4 = HEAP32[$__size_$i3$i >> 2] | 0;
    $cond$i25 = $4;
   } else {
    $conv$i$i = $0 & 255;
    $cond$i25 = $conv$i$i;
   }
   $sub = $__n - $cond$i | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this, $cond$i, $sub, $cond$i25, 0, $cond$i25, $__n, $__s);
  } else {
   if ($tobool$i$i) {
    $2 = HEAP32[$this >> 2] | 0;
    $cond$i19 = $2;
   } else {
    $cond$i19 = $this;
   }
   __ZNSt3__211char_traitsIcE4moveEPcPKcm($cond$i19, $__s, $__n) | 0;
   $arrayidx = $cond$i19 + $__n | 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx, 0);
   $3 = HEAP8[$__size_$i$i >> 0] | 0;
   $tobool$i$i28 = $3 << 24 >> 24 < 0;
   if ($tobool$i$i28) {
    $__size_$i2$i = $this + 4 | 0;
    HEAP32[$__size_$i2$i >> 2] = $__n;
    break;
   } else {
    $conv$i$i29 = $__n & 255;
    HEAP8[$__size_$i$i >> 0] = $conv$i$i29;
    break;
   }
  }
 } while (0);
 return $this | 0;
}

function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJNS2_6vectorIS8_NS6_IS8_EEEES8_S8_EE6invokeEPFS8_SB_S8_S8_EPSB_PNS0_11BindingTypeIS8_vEUt_ESJ_($fn, $args, $args1, $args3) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $agg$tmp = 0, $agg$tmp5 = 0, $agg$tmp6 = 0, $call = 0, $call13 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $ref$tmp = sp + 36 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp5 = sp + 12 | 0;
 $agg$tmp6 = sp;
 $call = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($args) | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp, $call);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp5, $args1);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp6, $args3);
 FUNCTION_TABLE_viiii[$fn & 255]($ref$tmp, $agg$tmp, $agg$tmp5, $agg$tmp6);
 $call13 = __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE10toWireTypeERKS8_($ref$tmp) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp6);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp5);
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call13 | 0;
}

function _oaes_get_seed() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add11 = 0, $add14 = 0, $add16 = 0, $add3 = 0, $add4 = 0, $add5 = 0, $add6 = 0, $add7 = 0, $add8 = 0;
 var $and6$i = 0, $call$i = 0, $call1 = 0, $call15 = 0, $cmp4$i = 0, $cmp7$i = 0, $conv = 0, $conv10 = 0, $head$i = 0, $millitm = 0, $timer = 0, $tm_hour = 0, $tm_mday = 0, $tm_min = 0, $tm_mon = 0, $tm_year = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $timer = sp;
 _ftime($timer | 0) | 0;
 $call1 = _gmtime($timer | 0) | 0;
 $millitm = $timer + 4 | 0;
 $0 = HEAP16[$millitm >> 1] | 0;
 $conv = $0 & 65535;
 $call$i = _malloc($conv) | 0;
 $cmp4$i = ($call$i | 0) == (0 | 0);
 if (!$cmp4$i) {
  $head$i = $call$i + -4 | 0;
  $1 = HEAP32[$head$i >> 2] | 0;
  $and6$i = $1 & 3;
  $cmp7$i = ($and6$i | 0) == 0;
  if (!$cmp7$i) {
   _memset($call$i | 0, 0, $conv | 0) | 0;
  }
 }
 $tm_year = $call1 + 20 | 0;
 $2 = HEAP32[$tm_year >> 2] | 0;
 $tm_mon = $call1 + 16 | 0;
 $3 = HEAP32[$tm_mon >> 2] | 0;
 $tm_mday = $call1 + 12 | 0;
 $4 = HEAP32[$tm_mday >> 2] | 0;
 $tm_hour = $call1 + 8 | 0;
 $5 = HEAP32[$tm_hour >> 2] | 0;
 $tm_min = $call1 + 4 | 0;
 $6 = HEAP32[$tm_min >> 2] | 0;
 $7 = HEAP32[$call1 >> 2] | 0;
 $8 = HEAP16[$millitm >> 1] | 0;
 $conv10 = $8 & 65535;
 $add$ptr = $call$i + $conv10 | 0;
 $9 = $add$ptr;
 $call15 = _getpid() | 0;
 $add3 = $2 + 1901 | 0;
 $add4 = $add3 + $3 | 0;
 $add5 = $add4 + $4 | 0;
 $add6 = $add5 + $5 | 0;
 $add7 = $add6 + $6 | 0;
 $add8 = $add7 + $7 | 0;
 $add11 = $add8 + $conv10 | 0;
 $add14 = $add11 + $call15 | 0;
 $add16 = $add14 + $9 | 0;
 if ($cmp4$i) {
  STACKTOP = sp;
  return $add16 | 0;
 }
 _free($call$i);
 STACKTOP = sp;
 return $add16 | 0;
}

function __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin_2 = 0, $__end_$i$i = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i$i$i35$i = 0, $add$ptr$i80 = 0, $cmp$i = 0;
 var $idx$neg$i = 0, $sub$ptr$div$i$i = 0, $sub$ptr$rhs$cast$i$i38$i = 0, $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $__value_$i$i$i$i$i35$i = $this + 8 | 0;
 $sub$ptr$rhs$cast$i$i38$i = $0;
 $__end_$i$i = $this + 4 | 0;
 $1 = HEAP32[$__end_$i$i >> 2] | 0;
 $sub$ptr$sub$i$i = $1 - $sub$ptr$rhs$cast$i$i38$i | 0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 6;
 $__begin_2 = $__v + 4 | 0;
 $2 = HEAP32[$__begin_2 >> 2] | 0;
 $idx$neg$i = 0 - $sub$ptr$div$i$i | 0;
 $add$ptr$i80 = $2 + ($idx$neg$i << 6) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i80;
 $cmp$i = ($sub$ptr$sub$i$i | 0) > 0;
 if ($cmp$i) {
  _memcpy($add$ptr$i80 | 0, $0 | 0, $sub$ptr$sub$i$i | 0) | 0;
  $$pre = HEAP32[$__begin_2 >> 2] | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = $$pre;
 } else {
  $3 = $add$ptr$i80;
  $$pre$phiZ2D = $__begin_2;
  $5 = $3;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_$i$i >> 2] | 0;
 $7 = HEAP32[$__end_6 >> 2] | 0;
 HEAP32[$__end_$i$i >> 2] = $7;
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i$i$i35$i >> 2] | 0;
 $9 = HEAP32[$__value_$i$i$i >> 2] | 0;
 HEAP32[$__value_$i$i$i$i$i35$i >> 2] = $9;
 HEAP32[$__value_$i$i$i >> 2] = $8;
 $10 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 HEAP32[$__v >> 2] = $10;
 return;
}

function __ZNSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin_2 = 0, $__end_$i$i = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i$i$i35$i = 0, $add$ptr$i80 = 0, $cmp$i = 0;
 var $idx$neg$i = 0, $sub$ptr$div$i$i = 0, $sub$ptr$rhs$cast$i$i38$i = 0, $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $__value_$i$i$i$i$i35$i = $this + 8 | 0;
 $sub$ptr$rhs$cast$i$i38$i = $0;
 $__end_$i$i = $this + 4 | 0;
 $1 = HEAP32[$__end_$i$i >> 2] | 0;
 $sub$ptr$sub$i$i = $1 - $sub$ptr$rhs$cast$i$i38$i | 0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 5;
 $__begin_2 = $__v + 4 | 0;
 $2 = HEAP32[$__begin_2 >> 2] | 0;
 $idx$neg$i = 0 - $sub$ptr$div$i$i | 0;
 $add$ptr$i80 = $2 + ($idx$neg$i << 5) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i80;
 $cmp$i = ($sub$ptr$sub$i$i | 0) > 0;
 if ($cmp$i) {
  _memcpy($add$ptr$i80 | 0, $0 | 0, $sub$ptr$sub$i$i | 0) | 0;
  $$pre = HEAP32[$__begin_2 >> 2] | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = $$pre;
 } else {
  $3 = $add$ptr$i80;
  $$pre$phiZ2D = $__begin_2;
  $5 = $3;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_$i$i >> 2] | 0;
 $7 = HEAP32[$__end_6 >> 2] | 0;
 HEAP32[$__end_$i$i >> 2] = $7;
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i$i$i35$i >> 2] | 0;
 $9 = HEAP32[$__value_$i$i$i >> 2] | 0;
 HEAP32[$__value_$i$i$i$i$i35$i >> 2] = $9;
 HEAP32[$__value_$i$i$i >> 2] = $8;
 $10 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 HEAP32[$__v >> 2] = $10;
 return;
}

function __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin_2 = 0, $__end_$i$i = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i$i$i35$i = 0, $add$ptr$i80 = 0, $cmp$i = 0;
 var $idx$neg$i = 0, $sub$ptr$div$i$i = 0, $sub$ptr$rhs$cast$i$i38$i = 0, $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $__value_$i$i$i$i$i35$i = $this + 8 | 0;
 $sub$ptr$rhs$cast$i$i38$i = $0;
 $__end_$i$i = $this + 4 | 0;
 $1 = HEAP32[$__end_$i$i >> 2] | 0;
 $sub$ptr$sub$i$i = $1 - $sub$ptr$rhs$cast$i$i38$i | 0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 5;
 $__begin_2 = $__v + 4 | 0;
 $2 = HEAP32[$__begin_2 >> 2] | 0;
 $idx$neg$i = 0 - $sub$ptr$div$i$i | 0;
 $add$ptr$i80 = $2 + ($idx$neg$i << 5) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i80;
 $cmp$i = ($sub$ptr$sub$i$i | 0) > 0;
 if ($cmp$i) {
  _memcpy($add$ptr$i80 | 0, $0 | 0, $sub$ptr$sub$i$i | 0) | 0;
  $$pre = HEAP32[$__begin_2 >> 2] | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = $$pre;
 } else {
  $3 = $add$ptr$i80;
  $$pre$phiZ2D = $__begin_2;
  $5 = $3;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_$i$i >> 2] | 0;
 $7 = HEAP32[$__end_6 >> 2] | 0;
 HEAP32[$__end_$i$i >> 2] = $7;
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i$i$i35$i >> 2] | 0;
 $9 = HEAP32[$__value_$i$i$i >> 2] | 0;
 HEAP32[$__value_$i$i$i$i$i35$i >> 2] = $9;
 HEAP32[$__value_$i$i$i >> 2] = $8;
 $10 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 HEAP32[$__v >> 2] = $10;
 return;
}

function __ZNSt3__26vectorIN6Crypto8KeyImageENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin_2 = 0, $__end_$i$i = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i$i$i35$i = 0, $add$ptr$i80 = 0, $cmp$i = 0;
 var $idx$neg$i = 0, $sub$ptr$div$i$i = 0, $sub$ptr$rhs$cast$i$i38$i = 0, $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $__value_$i$i$i$i$i35$i = $this + 8 | 0;
 $sub$ptr$rhs$cast$i$i38$i = $0;
 $__end_$i$i = $this + 4 | 0;
 $1 = HEAP32[$__end_$i$i >> 2] | 0;
 $sub$ptr$sub$i$i = $1 - $sub$ptr$rhs$cast$i$i38$i | 0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 5;
 $__begin_2 = $__v + 4 | 0;
 $2 = HEAP32[$__begin_2 >> 2] | 0;
 $idx$neg$i = 0 - $sub$ptr$div$i$i | 0;
 $add$ptr$i80 = $2 + ($idx$neg$i << 5) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i80;
 $cmp$i = ($sub$ptr$sub$i$i | 0) > 0;
 if ($cmp$i) {
  _memcpy($add$ptr$i80 | 0, $0 | 0, $sub$ptr$sub$i$i | 0) | 0;
  $$pre = HEAP32[$__begin_2 >> 2] | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = $$pre;
 } else {
  $3 = $add$ptr$i80;
  $$pre$phiZ2D = $__begin_2;
  $5 = $3;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_$i$i >> 2] | 0;
 $7 = HEAP32[$__end_6 >> 2] | 0;
 HEAP32[$__end_$i$i >> 2] = $7;
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i$i$i35$i >> 2] | 0;
 $9 = HEAP32[$__value_$i$i$i >> 2] | 0;
 HEAP32[$__value_$i$i$i$i$i35$i >> 2] = $9;
 HEAP32[$__value_$i$i$i >> 2] = $8;
 $10 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 HEAP32[$__v >> 2] = $10;
 return;
}

function __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin_2 = 0, $__end_$i$i = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i$i$i35$i = 0, $add$ptr$i80 = 0, $cmp$i = 0;
 var $idx$neg$i = 0, $sub$ptr$div$i$i = 0, $sub$ptr$rhs$cast$i$i38$i = 0, $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $__value_$i$i$i$i$i35$i = $this + 8 | 0;
 $sub$ptr$rhs$cast$i$i38$i = $0;
 $__end_$i$i = $this + 4 | 0;
 $1 = HEAP32[$__end_$i$i >> 2] | 0;
 $sub$ptr$sub$i$i = $1 - $sub$ptr$rhs$cast$i$i38$i | 0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 5;
 $__begin_2 = $__v + 4 | 0;
 $2 = HEAP32[$__begin_2 >> 2] | 0;
 $idx$neg$i = 0 - $sub$ptr$div$i$i | 0;
 $add$ptr$i80 = $2 + ($idx$neg$i << 5) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i80;
 $cmp$i = ($sub$ptr$sub$i$i | 0) > 0;
 if ($cmp$i) {
  _memcpy($add$ptr$i80 | 0, $0 | 0, $sub$ptr$sub$i$i | 0) | 0;
  $$pre = HEAP32[$__begin_2 >> 2] | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = $$pre;
 } else {
  $3 = $add$ptr$i80;
  $$pre$phiZ2D = $__begin_2;
  $5 = $3;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_$i$i >> 2] | 0;
 $7 = HEAP32[$__end_6 >> 2] | 0;
 HEAP32[$__end_$i$i >> 2] = $7;
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i$i$i35$i >> 2] | 0;
 $9 = HEAP32[$__value_$i$i$i >> 2] | 0;
 HEAP32[$__value_$i$i$i$i$i35$i >> 2] = $9;
 HEAP32[$__value_$i$i$i >> 2] = $8;
 $10 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 HEAP32[$__v >> 2] = $10;
 return;
}

function _fill_first_blocks($blockhash, $instance) {
 $blockhash = $blockhash | 0;
 $instance = $instance | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$ptr = 0, $add$ptr2 = 0, $add9 = 0, $arraydecay12$pre$phiZ2D = 0, $arrayidx = 0, $arrayidx10 = 0, $blockhash_bytes = 0, $cmp = 0, $cmp13 = 0, $inc = 0, $l$014 = 0, $lane_length = 0, $lanes = 0, $mul = 0;
 var $mul8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1024 | 0);
 $blockhash_bytes = sp;
 $lanes = $instance + 24 | 0;
 $0 = HEAP32[$lanes >> 2] | 0;
 $cmp13 = ($0 | 0) == 0;
 if ($cmp13) {
  $arraydecay12$pre$phiZ2D = $blockhash_bytes;
  _clear_internal_memory($arraydecay12$pre$phiZ2D, 1024);
  STACKTOP = sp;
  return;
 }
 $add$ptr = $blockhash + 64 | 0;
 $add$ptr2 = $blockhash + 68 | 0;
 $lane_length = $instance + 20 | 0;
 $l$014 = 0;
 while (1) {
  _store32($add$ptr, 0);
  _store32($add$ptr2, $l$014);
  _blake2b_long($blockhash_bytes, 1024, $blockhash, 72);
  $1 = HEAP32[$instance >> 2] | 0;
  $2 = HEAP32[$lane_length >> 2] | 0;
  $mul = Math_imul($2, $l$014) | 0;
  $arrayidx = $1 + ($mul << 10) | 0;
  _load_block($arrayidx, $blockhash_bytes);
  _store32($add$ptr, 1);
  _blake2b_long($blockhash_bytes, 1024, $blockhash, 72);
  $3 = HEAP32[$instance >> 2] | 0;
  $4 = HEAP32[$lane_length >> 2] | 0;
  $mul8 = Math_imul($4, $l$014) | 0;
  $add9 = $mul8 + 1 | 0;
  $arrayidx10 = $3 + ($add9 << 10) | 0;
  _load_block($arrayidx10, $blockhash_bytes);
  $inc = $l$014 + 1 | 0;
  $5 = HEAP32[$lanes >> 2] | 0;
  $cmp = $inc >>> 0 < $5 >>> 0;
  if ($cmp) {
   $l$014 = $inc;
  } else {
   $arraydecay12$pre$phiZ2D = $blockhash_bytes;
   break;
  }
 }
 _clear_internal_memory($arraydecay12$pre$phiZ2D, 1024);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap$0 = 0, $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i15 = 0, $__size_$i21 = 0, $__sz$0 = 0, $add = 0, $add16 = 0, $and$i = 0, $call12$pn = 0, $cmp = 0, $conv$i = 0, $conv$i16 = 0, $incdec$ptr = 0;
 var $sub = 0, $tobool$i = 0, $tobool$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i >> 0] | 0;
 $tobool$i = $0 << 24 >> 24 < 0;
 if ($tobool$i) {
  $__cap_$i = $this + 8 | 0;
  $1 = HEAP32[$__cap_$i >> 2] | 0;
  $and$i = $1 & 2147483647;
  $sub = $and$i + -1 | 0;
  $__size_$i21 = $this + 4 | 0;
  $2 = HEAP32[$__size_$i21 >> 2] | 0;
  $__cap$0 = $sub;
  $__sz$0 = $2;
 } else {
  $conv$i = $0 & 255;
  $__cap$0 = 10;
  $__sz$0 = $conv$i;
 }
 $cmp = ($__sz$0 | 0) == ($__cap$0 | 0);
 if ($cmp) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $__cap$0, $__cap$0, $__cap$0);
  $3 = HEAP8[$__size_$i >> 0] | 0;
  $tobool$i20 = $3 << 24 >> 24 < 0;
  if ($tobool$i20) {
   label = 8;
  } else {
   label = 7;
  }
 } else {
  if ($tobool$i) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label | 0) == 7) {
  $add = $__sz$0 + 1 | 0;
  $conv$i16 = $add & 255;
  HEAP8[$__size_$i >> 0] = $conv$i16;
  $call12$pn = $this;
 } else if ((label | 0) == 8) {
  $4 = HEAP32[$this >> 2] | 0;
  $add16 = $__sz$0 + 1 | 0;
  $__size_$i15 = $this + 4 | 0;
  HEAP32[$__size_$i15 >> 2] = $add16;
  $call12$pn = $4;
 }
 $__p$0 = $call12$pn + $__sz$0 | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0, $__c);
 $incdec$ptr = $__p$0 + 1 | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($incdec$ptr, 0);
 return;
}

function __ZN6Crypto10crypto_ops18generate_signatureERKNS_4HashERKNS_9PublicKeyERKNS_9SecretKeyERNS_9SignatureE($prefix_hash, $pub, $sec, $sig) {
 $prefix_hash = $prefix_hash | 0;
 $pub = $pub | 0;
 $sec = $sec | 0;
 $sig = $sig | 0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $buf = 0, $call = 0, $call1 = 0, $cmp = 0, $k = 0, $t = 0, $t2 = 0, $tmp3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(480 | 0);
 $tmp3 = sp + 160 | 0;
 $k = sp + 448 | 0;
 $buf = sp + 352 | 0;
 $t = sp;
 $t2 = sp + 320 | 0;
 __ZN6Crypto19EllipticCurveScalarC2Ev($k);
 __ZN6Crypto6s_commC2Ev($buf);
 __ZN6Crypto9PublicKeyC2Ev($t2);
 $call = _sc_check($sec) | 0;
 $cmp = ($call | 0) == 0;
 if (!$cmp) {
  ___assert_fail(45553 | 0, 45326 | 0, 368, 45614 | 0);
 }
 _ge_scalarmult_base($t, $sec);
 _ge_p3_tobytes($t2, $t);
 $call1 = __ZNK6Crypto9PublicKeyeqERKS0_($pub, $t2) | 0;
 if ($call1) {
  dest = $buf;
  src = $prefix_hash;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $0 = $buf + 32 | 0;
  dest = $0;
  src = $pub;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  __ZN6CryptoL13random_scalarERNS_19EllipticCurveScalarE($k);
  _ge_scalarmult_base($tmp3, $k);
  $1 = $buf + 64 | 0;
  _ge_p3_tobytes($1, $tmp3);
  __ZN6CryptoL14hash_to_scalarEPKvmRNS_19EllipticCurveScalarE($buf, 96, $sig);
  $add$ptr = $sig + 32 | 0;
  _sc_mulsub($add$ptr, $sig, $sec, $k);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(45633 | 0, 45326 | 0, 371, 45614 | 0);
 }
}

function __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE30__emplace_hint_unique_key_argsIS2_JRKS2_EEENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEENS_21__tree_const_iteratorIS2_SM_lEERKS6_DpOT0_($this, $__p$0, $__k, $__args) {
 $this = $this | 0;
 $__p$0 = $__p$0 | 0;
 $__k = $__k | 0;
 $__args = $__args | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__dummy = 0, $__h = 0, $__parent = 0, $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $__parent = sp + 16 | 0;
 $__dummy = sp + 12 | 0;
 $__h = sp;
 $call = __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_SH_EElEERPNS_15__tree_end_nodeISJ_EESK_RKS6_($this, $__p$0, $__parent, $__dummy, $__k) | 0;
 $0 = HEAP32[$call >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if (!$cmp) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISL_EEEEEEDpOT_($__h, $this, $__args);
 $1 = HEAP32[$__parent >> 2] | 0;
 $2 = HEAP32[$__h >> 2] | 0;
 __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSJ_SJ_($this, $1, $call, $2);
 HEAP32[$__h >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE30__emplace_hint_unique_key_argsIS2_JRKS2_EEENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEENS_21__tree_const_iteratorIS2_SM_lEERKS6_DpOT0_($this, $__p$0, $__k, $__args) {
 $this = $this | 0;
 $__p$0 = $__p$0 | 0;
 $__k = $__k | 0;
 $__args = $__args | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__dummy = 0, $__h = 0, $__parent = 0, $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $__parent = sp + 16 | 0;
 $__dummy = sp + 12 | 0;
 $__h = sp;
 $call = __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_SH_EElEERPNS_15__tree_end_nodeISJ_EESK_RKS6_($this, $__p$0, $__parent, $__dummy, $__k) | 0;
 $0 = HEAP32[$call >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if (!$cmp) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISL_EEEEEEDpOT_($__h, $this, $__args);
 $1 = HEAP32[$__parent >> 2] | 0;
 $2 = HEAP32[$__h >> 2] | 0;
 __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSJ_SJ_($this, $1, $call, $2);
 HEAP32[$__h >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE30__emplace_hint_unique_key_argsIS2_JRKS2_EEENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEENS_21__tree_const_iteratorIS2_SM_lEERKS6_DpOT0_($this, $__p$0, $__k, $__args) {
 $this = $this | 0;
 $__p$0 = $__p$0 | 0;
 $__k = $__k | 0;
 $__args = $__args | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__dummy = 0, $__h = 0, $__parent = 0, $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $__parent = sp + 16 | 0;
 $__dummy = sp + 12 | 0;
 $__h = sp;
 $call = __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_SH_EElEERPNS_15__tree_end_nodeISJ_EESK_RKS6_($this, $__p$0, $__parent, $__dummy, $__k) | 0;
 $0 = HEAP32[$call >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if (!$cmp) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISL_EEEEEEDpOT_($__h, $this, $__args);
 $1 = HEAP32[$__parent >> 2] | 0;
 $2 = HEAP32[$__h >> 2] | 0;
 __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSJ_SJ_($this, $1, $call, $2);
 HEAP32[$__h >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvmRKS9_EvPSB_JmSD_EE6invokeERKSF_SG_mPNS0_11BindingTypeIS9_vEUt_E($method, $wireThis, $args, $args1) {
 $method = $method | 0;
 $wireThis = $wireThis | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call3 = 0, $memptr$adj$shifted = 0, $memptr$isvirtual = 0, $memptr$nonvirtualfn = 0, $memptr$virtualfn = 0, $ref$tmp = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $ref$tmp = sp;
 $call = __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEvE12fromWireTypeESC_($wireThis) | 0;
 $$unpack = HEAP32[$method >> 2] | 0;
 $$elt1 = $method + 4 | 0;
 $$unpack2 = HEAP32[$$elt1 >> 2] | 0;
 $memptr$adj$shifted = $$unpack2 >> 1;
 $0 = $wireThis + $memptr$adj$shifted | 0;
 $1 = $$unpack2 & 1;
 $memptr$isvirtual = ($1 | 0) == 0;
 if ($memptr$isvirtual) {
  $memptr$nonvirtualfn = $$unpack;
  $3 = $memptr$nonvirtualfn;
 } else {
  $vtable = HEAP32[$0 >> 2] | 0;
  $2 = $vtable + $$unpack | 0;
  $memptr$virtualfn = HEAP32[$2 >> 2] | 0;
  $3 = $memptr$virtualfn;
 }
 $call3 = __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($args) | 0;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($ref$tmp, $args1);
 FUNCTION_TABLE_viii[$3 & 255]($0, $call3, $ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_count = 0, $add$ptr = 0, $arraydecay = 0, $call = 0, $cmp = 0, $cmp7 = 0, $incdec$ptr = 0, $incdec$ptr6 = 0, $p$0 = 0, $search_done = 0, $static_type = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = $info + 8 | 0;
 $0 = HEAP32[$static_type >> 2] | 0;
 $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, 0) | 0;
 L1 : do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info, $adjustedPtr, $path_below);
  } else {
   $arraydecay = $this + 16 | 0;
   $__base_count = $this + 12 | 0;
   $1 = HEAP32[$__base_count >> 2] | 0;
   $add$ptr = ($this + 16 | 0) + ($1 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($arraydecay, $info, $adjustedPtr, $path_below);
   $cmp = ($1 | 0) > 1;
   if ($cmp) {
    $incdec$ptr = $this + 24 | 0;
    $search_done = $info + 54 | 0;
    $p$0 = $incdec$ptr;
    while (1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0, $info, $adjustedPtr, $path_below);
     $2 = HEAP8[$search_done >> 0] | 0;
     $tobool = $2 << 24 >> 24 == 0;
     if (!$tobool) {
      break L1;
     }
     $incdec$ptr6 = $p$0 + 8 | 0;
     $cmp7 = $incdec$ptr6 >>> 0 < $add$ptr >>> 0;
     if ($cmp7) {
      $p$0 = $incdec$ptr6;
     } else {
      break;
     }
    }
   }
  }
 } while (0);
 return;
}

function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJRKS8_SA_mRKNS2_6vectorIS8_NS6_IS8_EEEEEE6invokeEPFS8_SA_SA_mSF_EPNS0_11BindingTypeIS8_vEUt_ESM_mPSD_($fn, $args, $args1, $args3, $args5) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 var $call = 0, $call12 = 0, $call16 = 0, $ref$tmp = 0, $ref$tmp7 = 0, $ref$tmp8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $ref$tmp = sp + 24 | 0;
 $ref$tmp7 = sp + 12 | 0;
 $ref$tmp8 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($ref$tmp7, $args);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($ref$tmp8, $args1);
 $call = __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($args3) | 0;
 $call12 = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($args5) | 0;
 FUNCTION_TABLE_viiiii[$fn & 127]($ref$tmp, $ref$tmp7, $ref$tmp8, $call, $call12);
 $call16 = __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE10toWireTypeERKS8_($ref$tmp) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp8);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp7);
 STACKTOP = sp;
 return $call16 | 0;
}

function __ZN4Core12Cryptography17generateSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_($agg$result, $prefixHash, $publicKey, $privateKey) {
 $agg$result = $agg$result | 0;
 $prefixHash = $prefixHash | 0;
 $publicKey = $publicKey | 0;
 $privateKey = $privateKey | 0;
 var $l_prefixHash = 0, $l_privateKey = 0, $l_publicKey = 0, $l_signature = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160 | 0);
 $l_prefixHash = sp + 128 | 0;
 $l_publicKey = sp + 96 | 0;
 $l_privateKey = sp + 64 | 0;
 $l_signature = sp;
 dest = $l_prefixHash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($l_prefixHash);
 __ZN6Common10podFromHexIN6Crypto4HashEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($prefixHash, $l_prefixHash);
 __ZN6Crypto9PublicKeyC2Ev($l_publicKey);
 __ZN6Common10podFromHexIN6Crypto9PublicKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($publicKey, $l_publicKey);
 __ZN6Crypto9SecretKeyC2Ev($l_privateKey);
 __ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($privateKey, $l_privateKey);
 __ZN6Crypto9SignatureC2Ev($l_signature);
 __ZN6Crypto18generate_signatureERKNS_4HashERKNS_9PublicKeyERKNS_9SecretKeyERNS_9SignatureE($l_prefixHash, $l_publicKey, $l_privateKey, $l_signature);
 __ZN6Common8podToHexIN6Crypto9SignatureEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $l_signature);
 STACKTOP = sp;
 return;
}

function __ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEclEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__i_ = 0, $add = 0, $add7 = 0, $and = 0, $and11 = 0, $and26 = 0, $and29 = 0, $and5 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx18 = 0, $arrayidx4 = 0, $mul = 0;
 var $or = 0, $rem = 0, $rem8 = 0, $shl$i = 0, $shl$i37 = 0, $shr$i = 0, $shr$i34 = 0, $shr$i39 = 0, $xor = 0, $xor12 = 0, $xor23 = 0, $xor27 = 0, $xor30 = 0, $xor32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i_ = $this + 2496 | 0;
 $0 = HEAP32[$__i_ >> 2] | 0;
 $add = $0 + 1 | 0;
 $rem = ($add >>> 0) % 624 & -1;
 $arrayidx = $this + ($0 << 2) | 0;
 $1 = HEAP32[$arrayidx >> 2] | 0;
 $and = $1 & -2147483648;
 $arrayidx4 = $this + ($rem << 2) | 0;
 $2 = HEAP32[$arrayidx4 >> 2] | 0;
 $and5 = $2 & 2147483646;
 $or = $and5 | $and;
 $add7 = $0 + 397 | 0;
 $rem8 = ($add7 >>> 0) % 624 & -1;
 $arrayidx10 = $this + ($rem8 << 2) | 0;
 $3 = HEAP32[$arrayidx10 >> 2] | 0;
 $shr$i = $or >>> 1;
 $and11 = $2 & 1;
 $4 = 0 - $and11 | 0;
 $mul = $4 & -1727483681;
 $xor = $mul ^ $3;
 $xor12 = $xor ^ $shr$i;
 HEAP32[$arrayidx >> 2] = $xor12;
 $5 = HEAP32[$__i_ >> 2] | 0;
 $arrayidx18 = $this + ($5 << 2) | 0;
 $6 = HEAP32[$arrayidx18 >> 2] | 0;
 $shr$i39 = $6 >>> 11;
 $xor23 = $shr$i39 ^ $6;
 HEAP32[$__i_ >> 2] = $rem;
 $shl$i37 = $xor23 << 7;
 $and26 = $shl$i37 & -1658038656;
 $xor27 = $and26 ^ $xor23;
 $shl$i = $xor27 << 15;
 $and29 = $shl$i & -272236544;
 $xor30 = $and29 ^ $xor27;
 $shr$i34 = $xor30 >>> 18;
 $xor32 = $shr$i34 ^ $xor30;
 return $xor32 | 0;
}

function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE10toWireTypeERKS8_($v) {
 $v = $v | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__size_$i$i$i = 0, $__size_$i23$i$i = 0, $add = 0, $and$i$i$i = 0, $and$i$i$i27 = 0, $and$i$i$i99 = 0, $call1 = 0, $cond$i$i = 0, $cond$i$i118 = 0, $cond$i$i46 = 0, $cond$i$i77 = 0, $conv$i$i$i = 0, $conv$i$i$i26 = 0;
 var $conv$i$i$i98 = 0, $data = 0, $tobool$i$i$i = 0, $tobool$i$i$i100 = 0, $tobool$i$i$i28 = 0, $tobool$i$i$i67 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i$i$i = $v + 11 | 0;
 $0 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $conv$i$i$i = $0 & 255;
 $and$i$i$i = $conv$i$i$i & 128;
 $tobool$i$i$i = ($and$i$i$i | 0) == 0;
 $__size_$i23$i$i = $v + 4 | 0;
 $1 = HEAP32[$__size_$i23$i$i >> 2] | 0;
 $cond$i$i = $tobool$i$i$i ? $conv$i$i$i : $1;
 $add = $cond$i$i + 4 | 0;
 $call1 = _malloc($add) | 0;
 $2 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $conv$i$i$i98 = $2 & 255;
 $and$i$i$i99 = $conv$i$i$i98 & 128;
 $tobool$i$i$i100 = ($and$i$i$i99 | 0) == 0;
 $3 = HEAP32[$__size_$i23$i$i >> 2] | 0;
 $cond$i$i118 = $tobool$i$i$i100 ? $conv$i$i$i98 : $3;
 HEAP32[$call1 >> 2] = $cond$i$i118;
 $data = $call1 + 4 | 0;
 $4 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $tobool$i$i$i67 = $4 << 24 >> 24 < 0;
 $5 = HEAP32[$v >> 2] | 0;
 $cond$i$i77 = $tobool$i$i$i67 ? $5 : $v;
 $conv$i$i$i26 = $4 & 255;
 $and$i$i$i27 = $conv$i$i$i26 & 128;
 $tobool$i$i$i28 = ($and$i$i$i27 | 0) == 0;
 $6 = HEAP32[$__size_$i23$i$i >> 2] | 0;
 $cond$i$i46 = $tobool$i$i$i28 ? $conv$i$i$i26 : $6;
 _memcpy($data | 0, $cond$i$i77 | 0, $cond$i$i46 | 0) | 0;
 return $call1 | 0;
}

function _fe_copy($h, $f) {
 $h = $h | 0;
 $f = $f | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $arrayidx11 = 0, $arrayidx12 = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx15 = 0, $arrayidx16 = 0, $arrayidx17 = 0, $arrayidx18 = 0, $arrayidx19 = 0;
 var $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $arrayidx5 = 0, $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f >> 2] | 0;
 $arrayidx1 = $f + 4 | 0;
 $1 = HEAP32[$arrayidx1 >> 2] | 0;
 $arrayidx2 = $f + 8 | 0;
 $2 = HEAP32[$arrayidx2 >> 2] | 0;
 $arrayidx3 = $f + 12 | 0;
 $3 = HEAP32[$arrayidx3 >> 2] | 0;
 $arrayidx4 = $f + 16 | 0;
 $4 = HEAP32[$arrayidx4 >> 2] | 0;
 $arrayidx5 = $f + 20 | 0;
 $5 = HEAP32[$arrayidx5 >> 2] | 0;
 $arrayidx6 = $f + 24 | 0;
 $6 = HEAP32[$arrayidx6 >> 2] | 0;
 $arrayidx7 = $f + 28 | 0;
 $7 = HEAP32[$arrayidx7 >> 2] | 0;
 $arrayidx8 = $f + 32 | 0;
 $8 = HEAP32[$arrayidx8 >> 2] | 0;
 $arrayidx9 = $f + 36 | 0;
 $9 = HEAP32[$arrayidx9 >> 2] | 0;
 HEAP32[$h >> 2] = $0;
 $arrayidx11 = $h + 4 | 0;
 HEAP32[$arrayidx11 >> 2] = $1;
 $arrayidx12 = $h + 8 | 0;
 HEAP32[$arrayidx12 >> 2] = $2;
 $arrayidx13 = $h + 12 | 0;
 HEAP32[$arrayidx13 >> 2] = $3;
 $arrayidx14 = $h + 16 | 0;
 HEAP32[$arrayidx14 >> 2] = $4;
 $arrayidx15 = $h + 20 | 0;
 HEAP32[$arrayidx15 >> 2] = $5;
 $arrayidx16 = $h + 24 | 0;
 HEAP32[$arrayidx16 >> 2] = $6;
 $arrayidx17 = $h + 28 | 0;
 HEAP32[$arrayidx17 >> 2] = $7;
 $arrayidx18 = $h + 32 | 0;
 HEAP32[$arrayidx18 >> 2] = $8;
 $arrayidx19 = $h + 36 | 0;
 HEAP32[$arrayidx19 >> 2] = $9;
 return;
}

function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_S8_EE6invokeEPFS8_S8_S8_S8_EPNS0_11BindingTypeIS8_vEUt_ESF_SF_($fn, $args, $args1, $args3) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $agg$tmp = 0, $agg$tmp5 = 0, $agg$tmp6 = 0, $call = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $ref$tmp = sp + 36 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp5 = sp + 12 | 0;
 $agg$tmp6 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp5, $args1);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp6, $args3);
 FUNCTION_TABLE_viiii[$fn & 255]($ref$tmp, $agg$tmp, $agg$tmp5, $agg$tmp6);
 $call = __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE10toWireTypeERKS8_($ref$tmp) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp6);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp5);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info, $adjustedPtr, $path_below) {
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $cmp = 0, $cmp4 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr = 0, $number_to_static_ptr11 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr12 = 0, $path_dst_ptr_to_static_ptr6 = 0, $search_done = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $0 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 do {
  if ($cmp) {
   HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $adjustedPtr;
   $path_dst_ptr_to_static_ptr = $info + 24 | 0;
   HEAP32[$path_dst_ptr_to_static_ptr >> 2] = $path_below;
   $number_to_static_ptr = $info + 36 | 0;
   HEAP32[$number_to_static_ptr >> 2] = 1;
  } else {
   $cmp4 = ($0 | 0) == ($adjustedPtr | 0);
   if (!$cmp4) {
    $number_to_static_ptr11 = $info + 36 | 0;
    $2 = HEAP32[$number_to_static_ptr11 >> 2] | 0;
    $add = $2 + 1 | 0;
    HEAP32[$number_to_static_ptr11 >> 2] = $add;
    $path_dst_ptr_to_static_ptr12 = $info + 24 | 0;
    HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] = 2;
    $search_done = $info + 54 | 0;
    HEAP8[$search_done >> 0] = 1;
    break;
   }
   $path_dst_ptr_to_static_ptr6 = $info + 24 | 0;
   $1 = HEAP32[$path_dst_ptr_to_static_ptr6 >> 2] | 0;
   $cmp7 = ($1 | 0) == 2;
   if ($cmp7) {
    HEAP32[$path_dst_ptr_to_static_ptr6 >> 2] = $path_below;
   }
  }
 } while (0);
 return;
}

function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EvPSB_JSD_EE6invokeERKSF_SG_PNS0_11BindingTypeIS9_vEUt_E($method, $wireThis, $args) {
 $method = $method | 0;
 $wireThis = $wireThis | 0;
 $args = $args | 0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $memptr$adj$shifted = 0, $memptr$isvirtual = 0, $memptr$nonvirtualfn = 0, $memptr$virtualfn = 0, $ref$tmp = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $ref$tmp = sp;
 $call = __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEvE12fromWireTypeESC_($wireThis) | 0;
 $$unpack = HEAP32[$method >> 2] | 0;
 $$elt1 = $method + 4 | 0;
 $$unpack2 = HEAP32[$$elt1 >> 2] | 0;
 $memptr$adj$shifted = $$unpack2 >> 1;
 $0 = $wireThis + $memptr$adj$shifted | 0;
 $1 = $$unpack2 & 1;
 $memptr$isvirtual = ($1 | 0) == 0;
 if ($memptr$isvirtual) {
  $memptr$nonvirtualfn = $$unpack;
  $3 = $memptr$nonvirtualfn;
 } else {
  $vtable = HEAP32[$0 >> 2] | 0;
  $2 = $vtable + $$unpack | 0;
  $memptr$virtualfn = HEAP32[$2 >> 2] | 0;
  $3 = $memptr$virtualfn;
 }
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($ref$tmp, $args);
 FUNCTION_TABLE_vii[$3 & 255]($0, $ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography9tree_hashENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE($agg$result, $hashes) {
 $agg$result = $agg$result | 0;
 $hashes = $hashes | 0;
 var $0 = 0, $1 = 0, $__end_$i$i = 0, $__value_$i$i$i$i = 0, $sub$ptr$div$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $treeHash = 0, $treeHashes = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $treeHashes = sp;
 $treeHash = sp + 16 | 0;
 HEAP32[$treeHashes >> 2] = 0;
 $__end_$i$i = $treeHashes + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $treeHashes + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 __ZN4Core13toTypedVectorIN6Crypto4HashEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($hashes, $treeHashes);
 dest = $treeHash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($treeHash);
 $0 = HEAP32[$treeHashes >> 2] | 0;
 $1 = HEAP32[$__end_$i$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 __ZN6Crypto9tree_hashEPKNS_4HashEmRS0_($0, $sub$ptr$div$i, $treeHash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $treeHash);
 __ZNSt3__213__vector_baseIN6Crypto4HashENS_9allocatorIS2_EEED2Ev($treeHashes);
 STACKTOP = sp;
 return;
}

function __Z35generateViewKeysFromPrivateSpendKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $secretKey) {
 $agg$result = $agg$result | 0;
 $secretKey = $secretKey | 0;
 var $agg$tmp = 0, $secretKey5 = 0, $viewPublicKey = 0, $viewSecretKey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $viewSecretKey = sp + 24 | 0;
 $viewPublicKey = sp + 12 | 0;
 $agg$tmp = sp;
 HEAP32[$viewSecretKey >> 2] = 0 | 0;
 HEAP32[$viewSecretKey + 4 >> 2] = 0 | 0;
 HEAP32[$viewSecretKey + 8 >> 2] = 0 | 0;
 HEAP32[$viewPublicKey >> 2] = 0 | 0;
 HEAP32[$viewPublicKey + 4 >> 2] = 0 | 0;
 HEAP32[$viewPublicKey + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $secretKey);
 __ZN4Core12Cryptography35generateViewKeysFromPrivateSpendKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERS7_S8_($agg$tmp, $viewSecretKey, $viewPublicKey);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 __ZN4KeysC2Ev($agg$result);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($agg$result, $viewPublicKey) | 0;
 $secretKey5 = $agg$result + 12 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($secretKey5, $viewSecretKey) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($viewPublicKey);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($viewSecretKey);
 STACKTOP = sp;
 return;
}

function __ZN6Crypto8Multisig17restore_key_imageERKNS_9PublicKeyERKNS_19EllipticCurveScalarERKNSt3__26vectorINS_8KeyImageENS7_9allocatorIS9_EEEE($agg$result, $publicEphemeral, $derivationScalar, $partialKeyImages) {
 $agg$result = $agg$result | 0;
 $publicEphemeral = $publicEphemeral | 0;
 $derivationScalar = $derivationScalar | 0;
 $partialKeyImages = $partialKeyImages | 0;
 var $baseKeyImage = 0, $derivation = 0, $keys = 0, $partialKeyImages$idx$val = 0, $partialKeyImages$idx1 = 0, $partialKeyImages$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $derivation = sp + 48 | 0;
 $baseKeyImage = sp + 16 | 0;
 $keys = sp;
 __ZN6Crypto9SecretKeyC2EPKh($derivation, $derivationScalar);
 __ZN6Crypto8KeyImageC2Ev($baseKeyImage);
 __ZN6Crypto18generate_key_imageERKNS_9PublicKeyERKNS_9SecretKeyERNS_8KeyImageE($publicEphemeral, $derivation, $baseKeyImage);
 $partialKeyImages$idx$val = HEAP32[$partialKeyImages >> 2] | 0;
 $partialKeyImages$idx1 = $partialKeyImages + 4 | 0;
 $partialKeyImages$idx1$val = HEAP32[$partialKeyImages$idx1 >> 2] | 0;
 __ZN6Crypto8Multisig17dedupeAndSortKeysINS_8KeyImageEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_($keys, $partialKeyImages$idx$val, $partialKeyImages$idx1$val);
 __ZN6Crypto8Multisig7addKeysINS_8KeyImageEEET_RKS3_RKNSt3__26vectorIS3_NS6_9allocatorIS3_EEEE($agg$result, $baseKeyImage, $keys);
 __ZNSt3__213__vector_baseIN6Crypto8KeyImageENS_9allocatorIS2_EEED2Ev($keys);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6resizeEmRKS6_($this, $__sz, $__x) {
 $this = $this | 0;
 $__sz = $__sz | 0;
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $__soon_to_be_end$i$i$010 = 0, $add$ptr = 0, $cmp = 0, $cmp$i$i = 0, $cmp$i$i9 = 0, $cmp2 = 0, $incdec$ptr$i$i = 0, $sub = 0, $sub$ptr$div$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_$i = $this + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$lhs$cast$i = $0;
 $sub$ptr$rhs$cast$i = $1;
 $sub$ptr$sub$i = $sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i | 0;
 $sub$ptr$div$i = ($sub$ptr$sub$i | 0) / 12 & -1;
 $cmp = $sub$ptr$div$i >>> 0 < $__sz >>> 0;
 if ($cmp) {
  $sub = $__sz - $sub$ptr$div$i | 0;
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8__appendEmRKS6_($this, $sub, $__x);
  return;
 }
 $cmp2 = $sub$ptr$div$i >>> 0 > $__sz >>> 0;
 if (!$cmp2) {
  return;
 }
 $add$ptr = $1 + ($__sz * 12 | 0) | 0;
 $cmp$i$i9 = ($add$ptr | 0) == ($0 | 0);
 if (!$cmp$i$i9) {
  $__soon_to_be_end$i$i$010 = $0;
  while (1) {
   $incdec$ptr$i$i = $__soon_to_be_end$i$i$010 + -12 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($incdec$ptr$i$i);
   $cmp$i$i = ($add$ptr | 0) == ($incdec$ptr$i$i | 0);
   if ($cmp$i$i) {
    break;
   } else {
    $__soon_to_be_end$i$i$010 = $incdec$ptr$i$i;
   }
  }
 }
 HEAP32[$__end_$i >> 2] = $add$ptr;
 return;
}

function __ZNSt3__225__independent_bits_engineINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEjEC2ERS2_m($this, $__w) {
 $this = $this | 0;
 $__w = $__w | 0;
 var $0 = 0, $1 = 0, $__mask0_ = 0, $__mask1_ = 0, $__n0_ = 0, $__n_ = 0, $__w0_ = 0, $__w_ = 0, $__y0_ = 0, $__y1_ = 0, $add = 0, $cmp = 0, $cmp43 = 0, $cmp48 = 0, $cond = 0, $cond56 = 0, $conv = 0, $div = 0, $div6 = 0, $rem = 0;
 var $shr46 = 0, $shr53 = 0, $sub29 = 0, $sub45 = 0, $sub52 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 573984;
 $__w_ = $this + 4 | 0;
 HEAP32[$__w_ >> 2] = $__w;
 $div = $__w >>> 5;
 $rem = $__w & 31;
 $cmp = ($rem | 0) != 0;
 $conv = $cmp & 1;
 $add = $div + $conv | 0;
 $__n_ = $this + 12 | 0;
 HEAP32[$__n_ >> 2] = $add;
 $div6 = ($__w >>> 0) / ($add >>> 0) & -1;
 $__w0_ = $this + 8 | 0;
 HEAP32[$__w0_ >> 2] = $div6;
 $__y0_ = $this + 20 | 0;
 HEAP32[$__y0_ >> 2] = 0;
 $0 = Math_imul($div6, $add) | 0;
 $1 = $0 - $__w | 0;
 $sub29 = $add + $1 | 0;
 $__n0_ = $this + 16 | 0;
 HEAP32[$__n0_ >> 2] = $sub29;
 $__y1_ = $this + 24 | 0;
 HEAP32[$__y1_ >> 2] = 0;
 $cmp43 = $add >>> 0 > $__w >>> 0;
 $sub45 = 32 - $div6 | 0;
 $shr46 = -1 >>> $sub45;
 $cond = $cmp43 ? 0 : $shr46;
 $__mask0_ = $this + 28 | 0;
 HEAP32[$__mask0_ >> 2] = $cond;
 $cmp48 = $div6 >>> 0 < 31;
 $sub52 = 31 - $div6 | 0;
 $shr53 = -1 >>> $sub52;
 $cond56 = $cmp48 ? $shr53 : -1;
 $__mask1_ = $this + 32 | 0;
 HEAP32[$__mask1_ >> 2] = $cond56;
 return;
}

function ___overflow($f) {
 $f = $f | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c = 0, $call = 0, $call13 = 0, $cmp = 0, $cmp14 = 0, $cmp7 = 0, $conv18 = 0, $incdec$ptr = 0, $lbf = 0, $retval$0 = 0, $tobool = 0, $tobool1 = 0, $wend = 0;
 var $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $c = sp;
 HEAP8[$c >> 0] = 10;
 $wend = $f + 16 | 0;
 $0 = HEAP32[$wend >> 2] | 0;
 $tobool = ($0 | 0) == (0 | 0);
 if ($tobool) {
  $call = ___towrite($f) | 0;
  $tobool1 = ($call | 0) == 0;
  if ($tobool1) {
   $$pre = HEAP32[$wend >> 2] | 0;
   $2 = $$pre;
   label = 4;
  } else {
   $retval$0 = -1;
  }
 } else {
  $2 = $0;
  label = 4;
 }
 do {
  if ((label | 0) == 4) {
   $wpos = $f + 20 | 0;
   $1 = HEAP32[$wpos >> 2] | 0;
   $cmp = $1 >>> 0 < $2 >>> 0;
   if ($cmp) {
    $lbf = $f + 75 | 0;
    $3 = HEAP8[$lbf >> 0] | 0;
    $cmp7 = $3 << 24 >> 24 == 10;
    if (!$cmp7) {
     $incdec$ptr = $1 + 1 | 0;
     HEAP32[$wpos >> 2] = $incdec$ptr;
     HEAP8[$1 >> 0] = 10;
     $retval$0 = 10;
     break;
    }
   }
   $write = $f + 36 | 0;
   $4 = HEAP32[$write >> 2] | 0;
   $call13 = FUNCTION_TABLE_iiii[$4 & 255]($f, $c, 1) | 0;
   $cmp14 = ($call13 | 0) == 1;
   if ($cmp14) {
    $5 = HEAP8[$c >> 0] | 0;
    $conv18 = $5 & 255;
    $retval$0 = $conv18;
   } else {
    $retval$0 = -1;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN4Core12Cryptography26cn_soft_shell_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy($agg$result, $input, $0, $1) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $2 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $3 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $2;
 $sub$ptr$sub$i = $3 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto26cn_soft_shell_slow_hash_v2EPKvmRNS_4HashEj($2, $sub$ptr$sub$i, $hash, $0);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography26cn_soft_shell_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy($agg$result, $input, $0, $1) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $2 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $3 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $2;
 $sub$ptr$sub$i = $3 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto26cn_soft_shell_slow_hash_v1EPKvmRNS_4HashEj($2, $sub$ptr$sub$i, $hash, $0);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography26cn_soft_shell_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy($agg$result, $input, $0, $1) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $2 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $3 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $2;
 $sub$ptr$sub$i = $3 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto26cn_soft_shell_slow_hash_v0EPKvmRNS_4HashEj($2, $sub$ptr$sub$i, $hash, $0);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN6Crypto10crypto_ops20derivation_to_scalarERKNS_13KeyDerivationEmRNS_19EllipticCurveScalarE($derivation, $output_index, $res) {
 $derivation = $derivation | 0;
 $output_index = $output_index | 0;
 $res = $res | 0;
 var $0 = 0, $add$ptr = 0, $arraydecay = 0, $buf = 0, $cmp = 0, $end = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $buf = sp + 4 | 0;
 $end = sp;
 __ZZN6Crypto10crypto_ops20derivation_to_scalarERKNS_13KeyDerivationEmRNS_19EllipticCurveScalarEEN3__0C2Ev($buf);
 $arraydecay = $buf + 32 | 0;
 HEAP32[$end >> 2] = $arraydecay;
 dest = $buf;
 src = $derivation;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN5Tools12write_varintIRPcmEENSt3__29enable_ifIXaasr3std11is_integralIT0_EE5valuesr3std11is_unsignedIS5_EE5valueEvE4typeEOT_S5_($end, $output_index);
 $0 = HEAP32[$end >> 2] | 0;
 $add$ptr = $buf + 37 | 0;
 $cmp = $0 >>> 0 > $add$ptr >>> 0;
 if ($cmp) {
  ___assert_fail(45402 | 0, 45326 | 0, 142, 45452 | 0);
 } else {
  $sub$ptr$lhs$cast = $0;
  $sub$ptr$rhs$cast = $buf;
  $sub$ptr$sub = $sub$ptr$lhs$cast - $sub$ptr$rhs$cast | 0;
  __ZN6CryptoL14hash_to_scalarEPKvmRNS_19EllipticCurveScalarE($buf, $sub$ptr$sub, $res);
  STACKTOP = sp;
  return;
 }
}

function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp4 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $seek = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0;
 var $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wpos = $f + 20 | 0;
 $0 = HEAP32[$wpos >> 2] | 0;
 $wbase = $f + 28 | 0;
 $1 = HEAP32[$wbase >> 2] | 0;
 $cmp = $0 >>> 0 > $1 >>> 0;
 if ($cmp) {
  $write = $f + 36 | 0;
  $2 = HEAP32[$write >> 2] | 0;
  FUNCTION_TABLE_iiii[$2 & 255]($f, 0, 0) | 0;
  $3 = HEAP32[$wpos >> 2] | 0;
  $tobool = ($3 | 0) == (0 | 0);
  if ($tobool) {
   $retval$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label | 0) == 3) {
  $rpos = $f + 4 | 0;
  $4 = HEAP32[$rpos >> 2] | 0;
  $rend = $f + 8 | 0;
  $5 = HEAP32[$rend >> 2] | 0;
  $cmp4 = $4 >>> 0 < $5 >>> 0;
  if ($cmp4) {
   $seek = $f + 40 | 0;
   $sub$ptr$lhs$cast = $4;
   $sub$ptr$rhs$cast = $5;
   $sub$ptr$sub = $sub$ptr$lhs$cast - $sub$ptr$rhs$cast | 0;
   $6 = ($sub$ptr$sub | 0) < 0;
   $7 = $6 << 31 >> 31;
   $8 = HEAP32[$seek >> 2] | 0;
   FUNCTION_TABLE_iiiii[$8 & 255]($f, $sub$ptr$sub, $7, 1) | 0;
   $9 = getTempRet0() | 0;
  }
  $wend = $f + 16 | 0;
  HEAP32[$wend >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  HEAP32[$rend >> 2] = 0;
  HEAP32[$rpos >> 2] = 0;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_EE6invokeEPFbS8_S8_S8_EPNS0_11BindingTypeIS8_vEUt_ESF_SF_($fn, $args, $args1, $args3) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $agg$tmp = 0, $agg$tmp5 = 0, $agg$tmp6 = 0, $call = 0, $call12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $agg$tmp = sp + 24 | 0;
 $agg$tmp5 = sp + 12 | 0;
 $agg$tmp6 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp5, $args1);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp6, $args3);
 $call = FUNCTION_TABLE_iiii[$fn & 255]($agg$tmp, $agg$tmp5, $agg$tmp6) | 0;
 $call12 = __ZN10emscripten8internal11BindingTypeIbvE10toWireTypeEb($call) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp6);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp5);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call12 | 0;
}

function __ZN4Core12Cryptography27cn_turtle_lite_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto27cn_turtle_lite_slow_hash_v2EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography27cn_turtle_lite_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto27cn_turtle_lite_slow_hash_v1EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography27cn_turtle_lite_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto27cn_turtle_lite_slow_hash_v0EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography25cn_dark_lite_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto25cn_dark_lite_slow_hash_v2EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography25cn_dark_lite_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto25cn_dark_lite_slow_hash_v1EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography25cn_dark_lite_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto25cn_dark_lite_slow_hash_v0EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_mS8_EE6invokeEPFS8_S8_mS8_EPNS0_11BindingTypeIS8_vEUt_EmSF_($fn, $args, $args1, $args3) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $agg$tmp = 0, $agg$tmp5 = 0, $call = 0, $call11 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $ref$tmp = sp + 24 | 0;
 $agg$tmp = sp + 12 | 0;
 $agg$tmp5 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp5, $args3);
 $call = __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($args1) | 0;
 FUNCTION_TABLE_viiii[$fn & 255]($ref$tmp, $agg$tmp, $call, $agg$tmp5);
 $call11 = __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE10toWireTypeERKS8_($ref$tmp) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp5);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_mEE6invokeEPFS8_S8_S8_mEPNS0_11BindingTypeIS8_vEUt_ESF_m($fn, $args, $args1, $args3) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $agg$tmp = 0, $agg$tmp5 = 0, $call = 0, $call11 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $ref$tmp = sp + 24 | 0;
 $agg$tmp = sp + 12 | 0;
 $agg$tmp5 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp5, $args1);
 $call = __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($args3) | 0;
 FUNCTION_TABLE_viiii[$fn & 255]($ref$tmp, $agg$tmp, $agg$tmp5, $call);
 $call11 = __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE10toWireTypeERKS8_($ref$tmp) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp5);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZN10emscripten15register_vectorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEENS_6class_INS1_6vectorIT_NS5_ISA_EEEENS_8internal11NoBaseClassEEEPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_class(42064 | 0, 42104 | 0, 42120 | 0, 0 | 0, 44997 | 0, 126 | 0, 45214 | 0, 0 | 0, 45214 | 0, 0 | 0, 44569 | 0, 45216 | 0, 127 | 0);
 __ZN10emscripten8internal24RegisterClassConstructorIPFPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEvEE6invokeISB_JEEEvSE_();
 __ZN10emscripten8internal19RegisterClassMethodIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EE6invokeISB_JEEEvPKcSF_(128, 0);
 __ZN10emscripten8internal19RegisterClassMethodIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvmRKS9_EE6invokeISB_JEEEvPKcSF_(129, 0);
 __ZN10emscripten8internal19RegisterClassMethodIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFmvEE6invokeISB_JEEEvPKcSD_(130, 0);
 __ZN10emscripten8internal19RegisterClassMethodIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEmEE6invokeISC_JEEEvPKcSG_();
 __ZN10emscripten8internal19RegisterClassMethodIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEmRKS9_EE6invokeISB_JEEEvPKcSG_();
 return;
}

function _swap_blocks($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $arrayidx2 = 0, $arrayidx7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $arrayidx2 = $a + 8 | 0;
 $6 = $arrayidx2;
 $7 = $6;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $6 + 4 | 0;
 $10 = $9;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $b;
 $13 = $12;
 $14 = HEAP32[$13 >> 2] | 0;
 $15 = $12 + 4 | 0;
 $16 = $15;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = $a;
 $19 = $18;
 HEAP32[$19 >> 2] = $14;
 $20 = $18 + 4 | 0;
 $21 = $20;
 HEAP32[$21 >> 2] = $17;
 $arrayidx7 = $b + 8 | 0;
 $22 = $arrayidx7;
 $23 = $22;
 $24 = HEAP32[$23 >> 2] | 0;
 $25 = $22 + 4 | 0;
 $26 = $25;
 $27 = HEAP32[$26 >> 2] | 0;
 $28 = $arrayidx2;
 $29 = $28;
 HEAP32[$29 >> 2] = $24;
 $30 = $28 + 4 | 0;
 $31 = $30;
 HEAP32[$31 >> 2] = $27;
 $32 = $b;
 $33 = $32;
 HEAP32[$33 >> 2] = $2;
 $34 = $32 + 4 | 0;
 $35 = $34;
 HEAP32[$35 >> 2] = $5;
 $36 = $arrayidx7;
 $37 = $36;
 HEAP32[$37 >> 2] = $8;
 $38 = $36 + 4 | 0;
 $39 = $38;
 HEAP32[$39 >> 2] = $11;
 return;
}

function __ZN4Core12Cryptography22cn_turtle_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto22cn_turtle_slow_hash_v2EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography22cn_turtle_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto22cn_turtle_slow_hash_v1EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography22cn_turtle_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto22cn_turtle_slow_hash_v0EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE($this, $thrown_type) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__context = 0, $__context8 = 0, $__flags = 0, $__flags2 = 0, $__pointee = 0, $__pointee5 = 0, $and = 0, $call = 0, $call9 = 0, $cmp = 0, $neg = 0, $retval$0 = 0;
 var $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($thrown_type | 0) == (0 | 0);
 if ($0) {
  $retval$0 = 0;
 } else {
  $1 = ___dynamic_cast($thrown_type, 42736) | 0;
  $cmp = ($1 | 0) == (0 | 0);
  if ($cmp) {
   $retval$0 = 0;
  } else {
   $__flags = $this + 8 | 0;
   $2 = HEAP32[$__flags >> 2] | 0;
   $neg = $2 ^ -1;
   $__flags2 = $1 + 8 | 0;
   $3 = HEAP32[$__flags2 >> 2] | 0;
   $and = $3 & $neg;
   $tobool = ($and | 0) == 0;
   if ($tobool) {
    $__pointee = $this + 12 | 0;
    $4 = HEAP32[$__pointee >> 2] | 0;
    $__pointee5 = $1 + 12 | 0;
    $5 = HEAP32[$__pointee5 >> 2] | 0;
    $call = __ZL8is_equalPKSt9type_infoS1_b($4, $5, 0) | 0;
    if ($call) {
     $__context = $this + 16 | 0;
     $6 = HEAP32[$__context >> 2] | 0;
     $__context8 = $1 + 16 | 0;
     $7 = HEAP32[$__context8 >> 2] | 0;
     $call9 = __ZL8is_equalPKSt9type_infoS1_b($6, $7, 0) | 0;
     $retval$0 = $call9;
    } else {
     $retval$0 = 0;
    }
   } else {
    $retval$0 = 0;
   }
  }
 }
 return $retval$0 | 0;
}

function __ZN4Core12Cryptography20cn_lite_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto20cn_lite_slow_hash_v2EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography20cn_lite_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto20cn_lite_slow_hash_v1EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography20cn_lite_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto20cn_lite_slow_hash_v0EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography20cn_dark_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto20cn_dark_slow_hash_v2EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography20cn_dark_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto20cn_dark_slow_hash_v1EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography20cn_dark_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto20cn_dark_slow_hash_v0EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __Z34generateDeterministicSubwalletKeysNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm($agg$result, $basePrivateKey, $walletIndex) {
 $agg$result = $agg$result | 0;
 $basePrivateKey = $basePrivateKey | 0;
 $walletIndex = $walletIndex | 0;
 var $agg$tmp = 0, $newPrivateKey = 0, $newPublicKey = 0, $secretKey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $newPrivateKey = sp + 24 | 0;
 $newPublicKey = sp + 12 | 0;
 $agg$tmp = sp;
 HEAP32[$newPrivateKey >> 2] = 0 | 0;
 HEAP32[$newPrivateKey + 4 >> 2] = 0 | 0;
 HEAP32[$newPrivateKey + 8 >> 2] = 0 | 0;
 HEAP32[$newPublicKey >> 2] = 0 | 0;
 HEAP32[$newPublicKey + 4 >> 2] = 0 | 0;
 HEAP32[$newPublicKey + 8 >> 2] = 0 | 0;
 __ZN4KeysC2Ev($agg$result);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $basePrivateKey);
 $secretKey = $agg$result + 12 | 0;
 __ZN4Core12Cryptography34generateDeterministicSubwalletKeysENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyRS7_S8_($agg$tmp, $walletIndex, 0, $secretKey, $agg$result);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($newPublicKey);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($newPrivateKey);
 STACKTOP = sp;
 return;
}

function ___stdio_seek($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $cmp = 0, $fd = 0, $ret = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $vararg_buffer = sp + 8 | 0;
 $ret = sp;
 $fd = $f + 60 | 0;
 $2 = HEAP32[$fd >> 2] | 0;
 $3 = $ret;
 HEAP32[$vararg_buffer >> 2] = $2;
 $vararg_ptr1 = $vararg_buffer + 4 | 0;
 HEAP32[$vararg_ptr1 >> 2] = $1;
 $vararg_ptr2 = $vararg_buffer + 8 | 0;
 HEAP32[$vararg_ptr2 >> 2] = $0;
 $vararg_ptr3 = $vararg_buffer + 12 | 0;
 HEAP32[$vararg_ptr3 >> 2] = $3;
 $vararg_ptr4 = $vararg_buffer + 16 | 0;
 HEAP32[$vararg_ptr4 >> 2] = $whence;
 $call = ___syscall140(140, $vararg_buffer | 0) | 0;
 $call2 = ___syscall_ret($call) | 0;
 $cmp = ($call2 | 0) < 0;
 if ($cmp) {
  $10 = $ret;
  $11 = $10;
  HEAP32[$11 >> 2] = -1;
  $12 = $10 + 4 | 0;
  $13 = $12;
  HEAP32[$13 >> 2] = -1;
  $14 = -1;
  $15 = -1;
 } else {
  $4 = $ret;
  $5 = $4;
  $6 = HEAP32[$5 >> 2] | 0;
  $7 = $4 + 4 | 0;
  $8 = $7;
  $9 = HEAP32[$8 >> 2] | 0;
  $14 = $9;
  $15 = $6;
 }
 setTempRet0($14 | 0);
 STACKTOP = sp;
 return $15 | 0;
}

function __ZN4Core12Cryptography16chukwa_slow_hashENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto16chukwa_slow_hashEPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography15cn_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto15cn_slow_hash_v2EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography15cn_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto15cn_slow_hash_v1EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography15cn_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto15cn_slow_hash_v0EPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography14checkSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_($prefixHash, $publicKey, $signature) {
 $prefixHash = $prefixHash | 0;
 $publicKey = $publicKey | 0;
 $signature = $signature | 0;
 var $call3 = 0, $l_prefixHash = 0, $l_publicKey = 0, $l_signature = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $l_prefixHash = sp + 96 | 0;
 $l_publicKey = sp + 64 | 0;
 $l_signature = sp;
 dest = $l_prefixHash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($l_prefixHash);
 __ZN6Common10podFromHexIN6Crypto4HashEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($prefixHash, $l_prefixHash);
 __ZN6Crypto9PublicKeyC2Ev($l_publicKey);
 __ZN6Common10podFromHexIN6Crypto9PublicKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($publicKey, $l_publicKey);
 __ZN6Crypto9SignatureC2Ev($l_signature);
 __ZN6Common10podFromHexIN6Crypto9SignatureEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($signature, $l_signature);
 $call3 = __ZN6Crypto15check_signatureERKNS_4HashERKNS_9PublicKeyERKNS_9SignatureE($l_prefixHash, $l_publicKey, $l_signature) | 0;
 STACKTOP = sp;
 return $call3 | 0;
}

function __ZN4Core12Cryptography12cn_fast_hashENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto12cn_fast_hashEPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography6cn_upxENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $data = 0, $hash = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $hash = sp + 24 | 0;
 $data = sp + 12 | 0;
 $agg$tmp = sp;
 dest = $hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($hash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $input);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $0 = HEAP32[$data >> 2] | 0;
 $__end_$i = $data + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto6cn_upxEPKvmRNS_4HashE($0, $sub$ptr$sub$i, $hash);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $hash);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 STACKTOP = sp;
 return;
}

function _tree_depth($count) {
 $count = $count | 0;
 var $add = 0, $add$1 = 0, $add$2 = 0, $add$3 = 0, $add$4 = 0, $cmp = 0, $cmp2 = 0, $cmp2$1 = 0, $cmp2$2 = 0, $cmp2$3 = 0, $cmp2$4 = 0, $shr = 0, $shr$1 = 0, $shr$2 = 0, $shr$3 = 0, $spec$select = 0, $spec$select$1 = 0, $spec$select$2 = 0, $spec$select$3 = 0, $spec$select8$1 = 0;
 var $spec$select8$2 = 0, $spec$select8$3 = 0, $spec$select8$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($count | 0) == 0;
 if ($cmp) {
  ___assert_fail(46179 | 0, 46189 | 0, 69, 46263 | 0);
 } else {
  $shr = $count >>> 16;
  $cmp2 = ($shr | 0) == 0;
  $spec$select = $cmp2 ? $count : $shr;
  $add = $cmp2 ? 0 : 16;
  $shr$1 = $spec$select >>> 8;
  $cmp2$1 = ($shr$1 | 0) == 0;
  $spec$select$1 = $cmp2$1 ? $spec$select : $shr$1;
  $add$1 = $cmp2$1 ? 0 : 8;
  $spec$select8$1 = $add$1 | $add;
  $shr$2 = $spec$select$1 >>> 4;
  $cmp2$2 = ($shr$2 | 0) == 0;
  $spec$select$2 = $cmp2$2 ? $spec$select$1 : $shr$2;
  $add$2 = $cmp2$2 ? 0 : 4;
  $spec$select8$2 = $add$2 | $spec$select8$1;
  $shr$3 = $spec$select$2 >>> 2;
  $cmp2$3 = ($shr$3 | 0) == 0;
  $spec$select$3 = $cmp2$3 ? $spec$select$2 : $shr$3;
  $add$3 = $cmp2$3 ? 0 : 2;
  $spec$select8$3 = $add$3 | $spec$select8$2;
  $cmp2$4 = $spec$select$3 >>> 0 > 1;
  $add$4 = $cmp2$4 & 1;
  $spec$select8$4 = $spec$select8$3 | $add$4;
  return $spec$select8$4 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__begin_ = 0, $__end_ = 0, $__value_$i$i = 0, $__value_$i8$i = 0, $add$ptr = 0, $add$ptr5 = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cond = 0, $exception$i$i$i = 0, $mul$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__value_$i8$i = $this + 12 | 0;
 HEAP32[$__value_$i8$i >> 2] = 0;
 $__value_$i$i = $this + 16 | 0;
 HEAP32[$__value_$i$i >> 2] = $__a;
 $cmp = ($__cap | 0) == 0;
 do {
  if ($cmp) {
   $cond = 0;
  } else {
   $cmp$i$i = $__cap >>> 0 > 357913941;
   if ($cmp$i$i) {
    $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
    __ZNSt11logic_errorC2EPKc($exception$i$i$i);
    HEAP32[$exception$i$i$i >> 2] = 43212;
    ___cxa_throw($exception$i$i$i | 0, 42672 | 0, 23 | 0);
   } else {
    $mul$i$i = $__cap * 12 | 0;
    $call$i$i$i = __Znwm($mul$i$i) | 0;
    $cond = $call$i$i$i;
    break;
   }
  }
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start * 12 | 0) | 0;
 $__end_ = $this + 8 | 0;
 HEAP32[$__end_ >> 2] = $add$ptr;
 $__begin_ = $this + 4 | 0;
 HEAP32[$__begin_ >> 2] = $add$ptr;
 $add$ptr5 = $cond + ($__cap * 12 | 0) | 0;
 HEAP32[$__value_$i8$i >> 2] = $add$ptr5;
 return;
}

function _initialize($instance, $context) {
 $instance = $instance | 0;
 $context = $context | 0;
 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $blockhash = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $context_ptr = 0, $or$cond = 0, $print_internals = 0, $retval$0 = 0, $tobool = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $blockhash = sp;
 $cmp = ($instance | 0) == (0 | 0);
 $cmp1 = ($context | 0) == (0 | 0);
 $or$cond = $cmp | $cmp1;
 if ($or$cond) {
  $retval$0 = -25;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $context_ptr = $instance + 44 | 0;
 HEAP32[$context_ptr >> 2] = $context;
 $call = _allocate_memory($context, $instance) | 0;
 $cmp2 = ($call | 0) == 0;
 if (!$cmp2) {
  $retval$0 = $call;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $type = $instance + 32 | 0;
 $0 = HEAP32[$type >> 2] | 0;
 _initial_hash($blockhash, $context, $0);
 $add$ptr = $blockhash + 64 | 0;
 _clear_internal_memory($add$ptr, 8);
 $print_internals = $instance + 36 | 0;
 $1 = HEAP32[$print_internals >> 2] | 0;
 $tobool = ($1 | 0) == 0;
 if (!$tobool) {
  $2 = HEAP32[$type >> 2] | 0;
  _initial_kat($blockhash, $context, $2);
 }
 _fill_first_blocks($blockhash, $instance);
 _clear_internal_memory($blockhash, 72);
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm($this, $__n2) {
 $this = $this | 0;
 $__n2 = $__n2 | 0;
 var $$sroa$speculated15 = 0, $0 = 0, $1 = 0, $2 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $call6 = 0, $cmp$i$i$i7 = 0, $cmp2 = 0, $cmp7 = 0, $cmp9 = 0, $cond$i = 0, $cond$i$i = 0, $conv$i$i = 0, $spec$select = 0, $spec$select23 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $__size_$i3$i = $this + 4 | 0;
  $1 = HEAP32[$__size_$i3$i >> 2] | 0;
  $cond$i = $1;
 } else {
  $conv$i$i = $0 & 255;
  $cond$i = $conv$i$i;
 }
 $cmp2 = ($__n2 | 0) == -1;
 if ($cmp2) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv();
 }
 if ($tobool$i$i) {
  $2 = HEAP32[$this >> 2] | 0;
  $cond$i$i = $2;
 } else {
  $cond$i$i = $this;
 }
 $cmp$i$i$i7 = $cond$i >>> 0 > $__n2 >>> 0;
 $$sroa$speculated15 = $cmp$i$i$i7 ? $__n2 : $cond$i;
 $call6 = __ZNSt3__211char_traitsIcE7compareEPKcS3_m($cond$i$i, $$sroa$speculated15) | 0;
 $cmp7 = ($call6 | 0) == 0;
 if ($cmp7) {
  $cmp9 = $cond$i >>> 0 < $__n2 >>> 0;
  $spec$select = $cmp$i$i$i7 & 1;
  $spec$select23 = $cmp9 ? -1 : $spec$select;
  return $spec$select23 | 0;
 } else {
  return $call6 | 0;
 }
 return 0 | 0;
}

function _sum_half_blocks($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $arrayidx3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $arrayidx1 = $a + 8 | 0;
 $6 = $arrayidx1;
 $7 = $6;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $6 + 4 | 0;
 $10 = $9;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $b;
 $13 = $12;
 $14 = HEAP32[$13 >> 2] | 0;
 $15 = $12 + 4 | 0;
 $16 = $15;
 $17 = HEAP32[$16 >> 2] | 0;
 $arrayidx3 = $b + 8 | 0;
 $18 = $arrayidx3;
 $19 = $18;
 $20 = HEAP32[$19 >> 2] | 0;
 $21 = $18 + 4 | 0;
 $22 = $21;
 $23 = HEAP32[$22 >> 2] | 0;
 $24 = _i64Add($14 | 0, $17 | 0, $2 | 0, $5 | 0) | 0;
 $25 = getTempRet0() | 0;
 $26 = _i64Add($20 | 0, $23 | 0, $8 | 0, $11 | 0) | 0;
 $27 = getTempRet0() | 0;
 $28 = $a;
 $29 = $28;
 HEAP32[$29 >> 2] = $24;
 $30 = $28 + 4 | 0;
 $31 = $30;
 HEAP32[$31 >> 2] = $25;
 $32 = $arrayidx1;
 $33 = $32;
 HEAP32[$33 >> 2] = $26;
 $34 = $32 + 4 | 0;
 $35 = $34;
 HEAP32[$35 >> 2] = $27;
 return;
}

function __ZN6Crypto10crypto_ops22completeRingSignaturesENS_9SecretKeyEyRKNS_19EllipticCurveScalarERNSt3__26vectorINS_9SignatureENS5_9allocatorIS7_EEEE($transactionSecretKey, $0, $1, $k, $signatures$0$0$0$val, $signatures$0$0$1$val) {
 $transactionSecretKey = $transactionSecretKey | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $k = $k | 0;
 $signatures$0$0$0$val = $signatures$0$0$0$val | 0;
 $signatures$0$0$1$val = $signatures$0$0$1$val | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $cmp$i = 0, $retval$0 = 0, $sub$ptr$div$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp$i = ($signatures$0$0$0$val | 0) == ($signatures$0$0$1$val | 0);
 if ($cmp$i) {
  $retval$0 = 0;
  return $retval$0 | 0;
 }
 $sub$ptr$lhs$cast$i = $signatures$0$0$1$val;
 $sub$ptr$rhs$cast$i = $signatures$0$0$0$val;
 $sub$ptr$sub$i = $sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 6;
 $2 = 0 > $1 >>> 0;
 $3 = $sub$ptr$div$i >>> 0 > $0 >>> 0;
 $4 = 0 == ($1 | 0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if (!$6) {
  $retval$0 = 0;
  return $retval$0 | 0;
 }
 $7 = $signatures$0$0$0$val + ($0 << 6) | 0;
 $add$ptr = ($signatures$0$0$0$val + ($0 << 6) | 0) + 32 | 0;
 _sc_mulsub($add$ptr, $7, $transactionSecretKey, $k);
 $retval$0 = 1;
 return $retval$0 | 0;
}

function _oaes_key_destroy($key) {
 $key = $key | 0;
 var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $data = 0, $data3 = 0, $exp_data = 0, $exp_data8 = 0, $exp_data_len = 0, $key_base = 0;
 var $num_keys = 0, $tobool = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$key >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $data = $0 + 4 | 0;
 $1 = HEAP32[$data >> 2] | 0;
 $tobool = ($1 | 0) == (0 | 0);
 if ($tobool) {
  $3 = $0;
 } else {
  _free($1);
  $2 = HEAP32[$key >> 2] | 0;
  $data3 = $2 + 4 | 0;
  HEAP32[$data3 >> 2] = 0;
  $$pre = HEAP32[$key >> 2] | 0;
  $3 = $$pre;
 }
 $exp_data = $3 + 12 | 0;
 $4 = HEAP32[$exp_data >> 2] | 0;
 $tobool5 = ($4 | 0) == (0 | 0);
 if ($tobool5) {
  $6 = $3;
 } else {
  _free($4);
  $5 = HEAP32[$key >> 2] | 0;
  $exp_data8 = $5 + 12 | 0;
  HEAP32[$exp_data8 >> 2] = 0;
  $$pre1 = HEAP32[$key >> 2] | 0;
  $6 = $$pre1;
 }
 HEAP32[$6 >> 2] = 0;
 $7 = HEAP32[$key >> 2] | 0;
 $exp_data_len = $7 + 8 | 0;
 HEAP32[$exp_data_len >> 2] = 0;
 $8 = HEAP32[$key >> 2] | 0;
 $num_keys = $8 + 16 | 0;
 HEAP32[$num_keys >> 2] = 0;
 $9 = HEAP32[$key >> 2] | 0;
 $key_base = $9 + 20 | 0;
 HEAP32[$key_base >> 2] = 0;
 $10 = HEAP32[$key >> 2] | 0;
 _free($10);
 HEAP32[$key >> 2] = 0;
 return;
}

function __ZN4Core12Cryptography12hashToScalarENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $hash) {
 $agg$result = $agg$result | 0;
 $hash = $hash | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $agg$tmp = 0, $l_hash = 0, $l_scalar = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $l_hash = sp + 12 | 0;
 $agg$tmp = sp;
 $l_scalar = sp + 24 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $hash);
 __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($l_hash, $agg$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 __ZN6Crypto19EllipticCurveScalarC2Ev($l_scalar);
 $0 = HEAP32[$l_hash >> 2] | 0;
 $__end_$i = $l_hash + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = $1 - $sub$ptr$rhs$cast$i | 0;
 __ZN6Crypto12hashToScalarEPKvmRNS_19EllipticCurveScalarE($0, $sub$ptr$sub$i, $l_scalar);
 __ZN6Common8podToHexIN6Crypto19EllipticCurveScalarEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $l_scalar);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($l_hash);
 STACKTOP = sp;
 return;
}

function __ZN6Crypto8Multisig30calculate_multisig_private_keyERKNS_9PublicKeyERKNS_9SecretKeyERS4_($pub, $sec, $multisig) {
 $pub = $pub | 0;
 $sec = $sec | 0;
 $multisig = $multisig | 0;
 var $call = 0, $call1 = 0, $cmp = 0, $point = 0, $point2 = 0, $point3 = 0, $ref$tmp = 0, $scalar = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512 | 0);
 $scalar = sp + 472 | 0;
 $point = sp + 280 | 0;
 $point2 = sp + 160 | 0;
 $point3 = sp;
 $ref$tmp = sp + 440 | 0;
 $call = __ZN6Crypto8Multisig9is_scalarINS_9SecretKeyEEEbRKT_($sec) | 0;
 if (!$call) {
  STACKTOP = sp;
  return;
 }
 __ZN6Crypto19EllipticCurveScalarC2Ev($scalar);
 $call1 = _ge_frombytes_vartime($point, $pub) | 0;
 $cmp = ($call1 | 0) == 0;
 if (!$cmp) {
  STACKTOP = sp;
  return;
 }
 _ge_scalarmult($point2, $sec, $point);
 _ge_mul8($point3, $point2);
 _ge_p1p1_to_p2($point2, $point3);
 _ge_tobytes($scalar, $point2);
 __ZN6Crypto12hashToScalarEPKvmRNS_19EllipticCurveScalarE($scalar, 32, $scalar);
 __ZN6Crypto9SecretKeyC2EPKh($ref$tmp, $scalar);
 dest = $multisig;
 src = $ref$tmp;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _ge_dsm_precomp($r, $s) {
 $r = $r | 0;
 $s = $s | 0;
 var $arrayidx10 = 0, $arrayidx12 = 0, $arrayidx14 = 0, $arrayidx2 = 0, $arrayidx4 = 0, $arrayidx6 = 0, $arrayidx8 = 0, $s2 = 0, $t = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(480 | 0);
 $t = sp + 320 | 0;
 $s2 = sp + 160 | 0;
 $u = sp;
 _ge_p3_to_cached($r, $s);
 _ge_p3_dbl($t, $s);
 _ge_p1p1_to_p3($s2, $t);
 _ge_add($t, $s2, $r);
 _ge_p1p1_to_p3($u, $t);
 $arrayidx2 = $r + 160 | 0;
 _ge_p3_to_cached($arrayidx2, $u);
 _ge_add($t, $s2, $arrayidx2);
 _ge_p1p1_to_p3($u, $t);
 $arrayidx4 = $r + 320 | 0;
 _ge_p3_to_cached($arrayidx4, $u);
 _ge_add($t, $s2, $arrayidx4);
 _ge_p1p1_to_p3($u, $t);
 $arrayidx6 = $r + 480 | 0;
 _ge_p3_to_cached($arrayidx6, $u);
 _ge_add($t, $s2, $arrayidx6);
 _ge_p1p1_to_p3($u, $t);
 $arrayidx8 = $r + 640 | 0;
 _ge_p3_to_cached($arrayidx8, $u);
 _ge_add($t, $s2, $arrayidx8);
 _ge_p1p1_to_p3($u, $t);
 $arrayidx10 = $r + 800 | 0;
 _ge_p3_to_cached($arrayidx10, $u);
 _ge_add($t, $s2, $arrayidx10);
 _ge_p1p1_to_p3($u, $t);
 $arrayidx12 = $r + 960 | 0;
 _ge_p3_to_cached($arrayidx12, $u);
 _ge_add($t, $s2, $arrayidx12);
 _ge_p1p1_to_p3($u, $t);
 $arrayidx14 = $r + 1120 | 0;
 _ge_p3_to_cached($arrayidx14, $u);
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferIN6Crypto9SecretKeyERNS_9allocatorIS2_EEEC2EmmS5_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__begin_ = 0, $__end_ = 0, $__value_$i$i = 0, $__value_$i8$i = 0, $add$ptr = 0, $add$ptr5 = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cond = 0, $exception$i$i$i = 0, $mul$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__value_$i8$i = $this + 12 | 0;
 HEAP32[$__value_$i8$i >> 2] = 0;
 $__value_$i$i = $this + 16 | 0;
 HEAP32[$__value_$i$i >> 2] = $__a;
 $cmp = ($__cap | 0) == 0;
 do {
  if ($cmp) {
   $cond = 0;
  } else {
   $cmp$i$i = $__cap >>> 0 > 134217727;
   if ($cmp$i$i) {
    $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
    __ZNSt11logic_errorC2EPKc($exception$i$i$i);
    HEAP32[$exception$i$i$i >> 2] = 43212;
    ___cxa_throw($exception$i$i$i | 0, 42672 | 0, 23 | 0);
   } else {
    $mul$i$i = $__cap << 5;
    $call$i$i$i = __Znwm($mul$i$i) | 0;
    $cond = $call$i$i$i;
    break;
   }
  }
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 5) | 0;
 $__end_ = $this + 8 | 0;
 HEAP32[$__end_ >> 2] = $add$ptr;
 $__begin_ = $this + 4 | 0;
 HEAP32[$__begin_ >> 2] = $add$ptr;
 $add$ptr5 = $cond + ($__cap << 5) | 0;
 HEAP32[$__value_$i8$i >> 2] = $add$ptr5;
 return;
}

function __ZNSt3__214__split_bufferIN6Crypto9PublicKeyERNS_9allocatorIS2_EEEC2EmmS5_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__begin_ = 0, $__end_ = 0, $__value_$i$i = 0, $__value_$i8$i = 0, $add$ptr = 0, $add$ptr5 = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cond = 0, $exception$i$i$i = 0, $mul$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__value_$i8$i = $this + 12 | 0;
 HEAP32[$__value_$i8$i >> 2] = 0;
 $__value_$i$i = $this + 16 | 0;
 HEAP32[$__value_$i$i >> 2] = $__a;
 $cmp = ($__cap | 0) == 0;
 do {
  if ($cmp) {
   $cond = 0;
  } else {
   $cmp$i$i = $__cap >>> 0 > 134217727;
   if ($cmp$i$i) {
    $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
    __ZNSt11logic_errorC2EPKc($exception$i$i$i);
    HEAP32[$exception$i$i$i >> 2] = 43212;
    ___cxa_throw($exception$i$i$i | 0, 42672 | 0, 23 | 0);
   } else {
    $mul$i$i = $__cap << 5;
    $call$i$i$i = __Znwm($mul$i$i) | 0;
    $cond = $call$i$i$i;
    break;
   }
  }
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 5) | 0;
 $__end_ = $this + 8 | 0;
 HEAP32[$__end_ >> 2] = $add$ptr;
 $__begin_ = $this + 4 | 0;
 HEAP32[$__begin_ >> 2] = $add$ptr;
 $add$ptr5 = $cond + ($__cap << 5) | 0;
 HEAP32[$__value_$i8$i >> 2] = $add$ptr5;
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__offset_flags7$phi$trans$insert = 0, $add$ptr = 0, $add$ptr6 = 0, $and = 0, $and8 = 0, $cmp = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool9 = 0, $vfn = 0, $vtable5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($adjustedPtr | 0) == (0 | 0);
 $__offset_flags7$phi$trans$insert = $this + 4 | 0;
 $$pre = HEAP32[$__offset_flags7$phi$trans$insert >> 2] | 0;
 if ($cmp) {
  $offset_to_base$0 = 0;
 } else {
  $shr = $$pre >> 8;
  $and = $$pre & 1;
  $tobool = ($and | 0) == 0;
  if ($tobool) {
   $offset_to_base$0 = $shr;
  } else {
   $0 = HEAP32[$adjustedPtr >> 2] | 0;
   $add$ptr = $0 + $shr | 0;
   $1 = HEAP32[$add$ptr >> 2] | 0;
   $offset_to_base$0 = $1;
  }
 }
 $2 = HEAP32[$this >> 2] | 0;
 $vtable5 = HEAP32[$2 >> 2] | 0;
 $vfn = $vtable5 + 28 | 0;
 $3 = HEAP32[$vfn >> 2] | 0;
 $add$ptr6 = $adjustedPtr + $offset_to_base$0 | 0;
 $and8 = $$pre & 2;
 $tobool9 = ($and8 | 0) == 0;
 $cond = $tobool9 ? 2 : $path_below;
 FUNCTION_TABLE_viiii[$3 & 255]($2, $info, $add$ptr6, $cond);
 return;
}

function __ZNSt3__214__split_bufferIN6Crypto9SignatureERNS_9allocatorIS2_EEEC2EmmS5_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__begin_ = 0, $__end_ = 0, $__value_$i$i = 0, $__value_$i8$i = 0, $add$ptr = 0, $add$ptr5 = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cond = 0, $exception$i$i$i = 0, $mul$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__value_$i8$i = $this + 12 | 0;
 HEAP32[$__value_$i8$i >> 2] = 0;
 $__value_$i$i = $this + 16 | 0;
 HEAP32[$__value_$i$i >> 2] = $__a;
 $cmp = ($__cap | 0) == 0;
 do {
  if ($cmp) {
   $cond = 0;
  } else {
   $cmp$i$i = $__cap >>> 0 > 67108863;
   if ($cmp$i$i) {
    $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
    __ZNSt11logic_errorC2EPKc($exception$i$i$i);
    HEAP32[$exception$i$i$i >> 2] = 43212;
    ___cxa_throw($exception$i$i$i | 0, 42672 | 0, 23 | 0);
   } else {
    $mul$i$i = $__cap << 6;
    $call$i$i$i = __Znwm($mul$i$i) | 0;
    $cond = $call$i$i$i;
    break;
   }
  }
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 6) | 0;
 $__end_ = $this + 8 | 0;
 HEAP32[$__end_ >> 2] = $add$ptr;
 $__begin_ = $this + 4 | 0;
 HEAP32[$__begin_ >> 2] = $add$ptr;
 $add$ptr5 = $cond + ($__cap << 6) | 0;
 HEAP32[$__value_$i8$i >> 2] = $add$ptr5;
 return;
}

function __ZNSt3__214__split_bufferIN6Crypto8KeyImageERNS_9allocatorIS2_EEEC2EmmS5_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__begin_ = 0, $__end_ = 0, $__value_$i$i = 0, $__value_$i8$i = 0, $add$ptr = 0, $add$ptr5 = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cond = 0, $exception$i$i$i = 0, $mul$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__value_$i8$i = $this + 12 | 0;
 HEAP32[$__value_$i8$i >> 2] = 0;
 $__value_$i$i = $this + 16 | 0;
 HEAP32[$__value_$i$i >> 2] = $__a;
 $cmp = ($__cap | 0) == 0;
 do {
  if ($cmp) {
   $cond = 0;
  } else {
   $cmp$i$i = $__cap >>> 0 > 134217727;
   if ($cmp$i$i) {
    $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
    __ZNSt11logic_errorC2EPKc($exception$i$i$i);
    HEAP32[$exception$i$i$i >> 2] = 43212;
    ___cxa_throw($exception$i$i$i | 0, 42672 | 0, 23 | 0);
   } else {
    $mul$i$i = $__cap << 5;
    $call$i$i$i = __Znwm($mul$i$i) | 0;
    $cond = $call$i$i$i;
    break;
   }
  }
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 5) | 0;
 $__end_ = $this + 8 | 0;
 HEAP32[$__end_ >> 2] = $add$ptr;
 $__begin_ = $this + 4 | 0;
 HEAP32[$__begin_ >> 2] = $add$ptr;
 $add$ptr5 = $cond + ($__cap << 5) | 0;
 HEAP32[$__value_$i8$i >> 2] = $add$ptr5;
 return;
}

function __ZNSt3__214__split_bufferIN6Crypto4HashERNS_9allocatorIS2_EEEC2EmmS5_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__begin_ = 0, $__end_ = 0, $__value_$i$i = 0, $__value_$i8$i = 0, $add$ptr = 0, $add$ptr5 = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cond = 0, $exception$i$i$i = 0, $mul$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__value_$i8$i = $this + 12 | 0;
 HEAP32[$__value_$i8$i >> 2] = 0;
 $__value_$i$i = $this + 16 | 0;
 HEAP32[$__value_$i$i >> 2] = $__a;
 $cmp = ($__cap | 0) == 0;
 do {
  if ($cmp) {
   $cond = 0;
  } else {
   $cmp$i$i = $__cap >>> 0 > 134217727;
   if ($cmp$i$i) {
    $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
    __ZNSt11logic_errorC2EPKc($exception$i$i$i);
    HEAP32[$exception$i$i$i >> 2] = 43212;
    ___cxa_throw($exception$i$i$i | 0, 42672 | 0, 23 | 0);
   } else {
    $mul$i$i = $__cap << 5;
    $call$i$i$i = __Znwm($mul$i$i) | 0;
    $cond = $call$i$i$i;
    break;
   }
  }
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 5) | 0;
 $__end_ = $this + 8 | 0;
 HEAP32[$__end_ >> 2] = $add$ptr;
 $__begin_ = $this + 4 | 0;
 HEAP32[$__begin_ >> 2] = $add$ptr;
 $add$ptr5 = $cond + ($__cap << 5) | 0;
 HEAP32[$__value_$i8$i >> 2] = $add$ptr5;
 return;
}

function __ZN4Core12Cryptography15deriveSecretKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_($agg$result, $derivationScalar, $privateKey) {
 $agg$result = $agg$result | 0;
 $derivationScalar = $derivationScalar | 0;
 $privateKey = $privateKey | 0;
 var $l_derivationScalar = 0, $l_derivedKey = 0, $l_privateKey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
 $l_derivationScalar = sp + 64 | 0;
 $l_privateKey = sp + 32 | 0;
 $l_derivedKey = sp;
 __ZN6Crypto19EllipticCurveScalarC2Ev($l_derivationScalar);
 __ZN6Common10podFromHexIN6Crypto19EllipticCurveScalarEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($derivationScalar, $l_derivationScalar);
 __ZN6Crypto9SecretKeyC2Ev($l_privateKey);
 __ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($privateKey, $l_privateKey);
 __ZN6Crypto9SecretKeyC2Ev($l_derivedKey);
 __ZN6Crypto17derive_secret_keyERKNS_19EllipticCurveScalarERKNS_9SecretKeyERS3_($l_derivationScalar, $l_privateKey, $l_derivedKey);
 __ZN6Common8podToHexIN6Crypto9SecretKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $l_derivedKey);
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferINS_6threadERNS_9allocatorIS1_EEEC2EmmS4_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__begin_ = 0, $__end_ = 0, $__value_$i$i = 0, $__value_$i8$i = 0, $add$ptr = 0, $add$ptr5 = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cond = 0, $exception$i$i$i = 0, $mul$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__value_$i8$i = $this + 12 | 0;
 HEAP32[$__value_$i8$i >> 2] = 0;
 $__value_$i$i = $this + 16 | 0;
 HEAP32[$__value_$i$i >> 2] = $__a;
 $cmp = ($__cap | 0) == 0;
 do {
  if ($cmp) {
   $cond = 0;
  } else {
   $cmp$i$i = $__cap >>> 0 > 1073741823;
   if ($cmp$i$i) {
    $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
    __ZNSt11logic_errorC2EPKc($exception$i$i$i);
    HEAP32[$exception$i$i$i >> 2] = 43212;
    ___cxa_throw($exception$i$i$i | 0, 42672 | 0, 23 | 0);
   } else {
    $mul$i$i = $__cap << 2;
    $call$i$i$i = __Znwm($mul$i$i) | 0;
    $cond = $call$i$i$i;
    break;
   }
  }
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 2) | 0;
 $__end_ = $this + 8 | 0;
 HEAP32[$__end_ >> 2] = $add$ptr;
 $__begin_ = $this + 4 | 0;
 HEAP32[$__begin_ >> 2] = $add$ptr;
 $add$ptr5 = $cond + ($__cap << 2) | 0;
 HEAP32[$__value_$i8$i >> 2] = $add$ptr5;
 return;
}

function __ZN10emscripten8internal7InvokerINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJRKS9_RKSB_EE6invokeEPFSB_SD_SF_EPNS0_11BindingTypeIS9_vEUt_EPSB_($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0, $call7 = 0, $ref$tmp = 0, $ref$tmp3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $ref$tmp = sp + 12 | 0;
 $ref$tmp3 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($ref$tmp3, $args);
 $call = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($args1) | 0;
 FUNCTION_TABLE_viii[$fn & 255]($ref$tmp, $ref$tmp3, $call);
 $call7 = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE10toWireTypeEOSB_($ref$tmp) | 0;
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp3);
 STACKTOP = sp;
 return $call7 | 0;
}

function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJRKS8_SA_EE6invokeEPFS8_SA_SA_EPNS0_11BindingTypeIS8_vEUt_ESH_($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0, $ref$tmp = 0, $ref$tmp3 = 0, $ref$tmp4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $ref$tmp = sp + 24 | 0;
 $ref$tmp3 = sp + 12 | 0;
 $ref$tmp4 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($ref$tmp3, $args);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($ref$tmp4, $args1);
 FUNCTION_TABLE_viii[$fn & 255]($ref$tmp, $ref$tmp3, $ref$tmp4);
 $call = __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE10toWireTypeERKS8_($ref$tmp) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp3);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFmvEmPKSB_JEE6invokeERKSD_SF_($method, $wireThis) {
 $method = $method | 0;
 $wireThis = $wireThis | 0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $call2 = 0, $memptr$adj$shifted = 0, $memptr$isvirtual = 0, $memptr$nonvirtualfn = 0, $memptr$virtualfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEvE12fromWireTypeESD_($wireThis) | 0;
 $$unpack = HEAP32[$method >> 2] | 0;
 $$elt1 = $method + 4 | 0;
 $$unpack2 = HEAP32[$$elt1 >> 2] | 0;
 $memptr$adj$shifted = $$unpack2 >> 1;
 $0 = $wireThis + $memptr$adj$shifted | 0;
 $1 = $$unpack2 & 1;
 $memptr$isvirtual = ($1 | 0) == 0;
 if ($memptr$isvirtual) {
  $memptr$nonvirtualfn = $$unpack;
  $3 = $memptr$nonvirtualfn;
 } else {
  $vtable = HEAP32[$0 >> 2] | 0;
  $2 = $vtable + $$unpack | 0;
  $memptr$virtualfn = HEAP32[$2 >> 2] | 0;
  $3 = $memptr$virtualfn;
 }
 $call1 = FUNCTION_TABLE_ii[$3 & 255]($0) | 0;
 $call2 = __ZN10emscripten8internal11BindingTypeImvE10toWireTypeERKm($call1) | 0;
 return $call2 | 0;
}

function __ZN6Common5toHexEPKvy($agg$result, $data, $0, $1) {
 $agg$result = $agg$result | 0;
 $data = $data | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx5 = 0, $conv = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = 0 | 0;
 HEAP32[$agg$result + 4 >> 2] = 0 | 0;
 HEAP32[$agg$result + 8 >> 2] = 0 | 0;
 $2 = 0;
 $9 = 0;
 while (1) {
  $arrayidx = $data + $2 | 0;
  $3 = HEAP8[$arrayidx >> 0] | 0;
  $conv = $3 & 255;
  $4 = $conv >>> 4;
  $arrayidx1 = 41968 + $4 | 0;
  $5 = HEAP8[$arrayidx1 >> 0] | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result, $5);
  $6 = HEAP8[$arrayidx >> 0] | 0;
  $7 = $6 & 15;
  $and = $7 & 255;
  $arrayidx5 = 41968 + $and | 0;
  $8 = HEAP8[$arrayidx5 >> 0] | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result, $8);
  $10 = _i64Add($2 | 0, $9 | 0, 1, 0) | 0;
  $11 = getTempRet0() | 0;
  $12 = $11 >>> 0 < $1 >>> 0;
  $13 = $10 >>> 0 < $0 >>> 0;
  $14 = ($11 | 0) == ($1 | 0);
  $15 = $14 & $13;
  $16 = $12 | $15;
  if ($16) {
   $2 = $10;
   $9 = $11;
  } else {
   break;
  }
 }
 return;
}

function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_EE6invokeEPFS8_S8_S8_EPNS0_11BindingTypeIS8_vEUt_ESF_($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $agg$tmp = 0, $agg$tmp3 = 0, $call = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $ref$tmp = sp + 24 | 0;
 $agg$tmp = sp + 12 | 0;
 $agg$tmp3 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp3, $args1);
 FUNCTION_TABLE_viii[$fn & 255]($ref$tmp, $agg$tmp, $agg$tmp3);
 $call = __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE10toWireTypeERKS8_($ref$tmp) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp3);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call | 0;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $call = 0.0, $conv = 0, $mul = 0.0, $retval$0 = 0.0, $storemerge = 0, $sub = 0, $sub8 = 0, $tobool1 = 0, $trunc$clear = 0, $x$addr$0 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $3 = getTempRet0() | 0;
 $4 = $2 & 65535;
 $trunc$clear = $4 & 2047;
 switch ($trunc$clear << 16 >> 16) {
 case 0:
  {
   $tobool1 = $x != 0.0;
   if ($tobool1) {
    $mul = $x * 18446744073709551616.0;
    $call = +_frexp($mul, $e);
    $5 = HEAP32[$e >> 2] | 0;
    $sub = $5 + -64 | 0;
    $storemerge = $sub;
    $x$addr$0 = $call;
   } else {
    $storemerge = 0;
    $x$addr$0 = $x;
   }
   HEAP32[$e >> 2] = $storemerge;
   $retval$0 = $x$addr$0;
   break;
  }
 case 2047:
  {
   $retval$0 = $x;
   break;
  }
 default:
  {
   $conv = $2 & 2047;
   $sub8 = $conv + -1022 | 0;
   HEAP32[$e >> 2] = $sub8;
   $6 = $1 & -2146435073;
   $7 = $6 | 1071644672;
   HEAP32[tempDoublePtr >> 2] = $0;
   HEAP32[tempDoublePtr + 4 >> 2] = $7;
   $8 = +HEAPF64[tempDoublePtr >> 3];
   $retval$0 = $8;
  }
 }
 return +$retval$0;
}

function __ZN4Core12Cryptography15deriveSecretKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS9_($agg$result, $derivation, $0, $1, $privateKey) {
 $agg$result = $agg$result | 0;
 $derivation = $derivation | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $privateKey = $privateKey | 0;
 var $l_derivation = 0, $l_derivedKey = 0, $l_privateKey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
 $l_derivation = sp + 64 | 0;
 $l_privateKey = sp + 32 | 0;
 $l_derivedKey = sp;
 __ZN6Crypto13KeyDerivationC2Ev($l_derivation);
 __ZN6Common10podFromHexIN6Crypto13KeyDerivationEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($derivation, $l_derivation);
 __ZN6Crypto9SecretKeyC2Ev($l_privateKey);
 __ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($privateKey, $l_privateKey);
 __ZN6Crypto9SecretKeyC2Ev($l_derivedKey);
 __ZN6Crypto17derive_secret_keyERKNS_13KeyDerivationEmRKNS_9SecretKeyERS3_($l_derivation, $0, $l_privateKey, $l_derivedKey);
 __ZN6Common8podToHexIN6Crypto9SecretKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $l_derivedKey);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography25calculateSharedPrivateKeyERKNSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE($agg$result, $secretKeys) {
 $agg$result = $agg$result | 0;
 $secretKeys = $secretKeys | 0;
 var $__end_$i$i = 0, $__value_$i$i$i$i = 0, $l_secretKeys = 0, $sharedPrivateKey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $l_secretKeys = sp;
 $sharedPrivateKey = sp + 16 | 0;
 HEAP32[$l_secretKeys >> 2] = 0;
 $__end_$i$i = $l_secretKeys + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $l_secretKeys + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 __ZN4Core13toTypedVectorIN6Crypto9SecretKeyEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($secretKeys, $l_secretKeys);
 __ZN6Crypto8Multisig28calculate_shared_private_keyERKNSt3__26vectorINS_9SecretKeyENS1_9allocatorIS3_EEEE($sharedPrivateKey, $l_secretKeys);
 __ZN6Common8podToHexIN6Crypto9SecretKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $sharedPrivateKey);
 __ZNSt3__213__vector_baseIN6Crypto9SecretKeyENS_9allocatorIS2_EEED2Ev($l_secretKeys);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography24calculateSharedPublicKeyERKNSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE($agg$result, $publicKeys) {
 $agg$result = $agg$result | 0;
 $publicKeys = $publicKeys | 0;
 var $__end_$i$i = 0, $__value_$i$i$i$i = 0, $l_publicKeys = 0, $sharedPublicKey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $l_publicKeys = sp;
 $sharedPublicKey = sp + 16 | 0;
 HEAP32[$l_publicKeys >> 2] = 0;
 $__end_$i$i = $l_publicKeys + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $l_publicKeys + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 __ZN4Core13toTypedVectorIN6Crypto9PublicKeyEEEvRKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEERNS4_IT_NS8_ISF_EEEE($publicKeys, $l_publicKeys);
 __ZN6Crypto8Multisig27calculate_shared_public_keyERKNSt3__26vectorINS_9PublicKeyENS1_9allocatorIS3_EEEE($sharedPublicKey, $l_publicKeys);
 __ZN6Common8podToHexIN6Crypto9PublicKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $sharedPublicKey);
 __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($l_publicKeys);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEmRKS9_EbSC_JmSE_EE6invokeEPSG_PSB_mPNS0_11BindingTypeIS9_vEUt_E($function, $wireThis, $args, $args1) {
 $function = $function | 0;
 $wireThis = $wireThis | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $call = 0, $call3 = 0, $call4 = 0, $call6 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $ref$tmp = sp;
 $0 = HEAP32[$function >> 2] | 0;
 $call = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($wireThis) | 0;
 $call3 = __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($args) | 0;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($ref$tmp, $args1);
 $call4 = FUNCTION_TABLE_iiii[$0 & 255]($call, $call3, $ref$tmp) | 0;
 $call6 = __ZN10emscripten8internal11BindingTypeIbvE10toWireTypeEb($call4) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 STACKTOP = sp;
 return $call6 | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while ((ptr & 3) != 0) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  block_aligned_end = aligned_end - 64 | 0;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSJ_SJ_($this, $__parent, $__child, $__new_node) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__child = $__child | 0;
 $__new_node = $__new_node | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__left_7 = 0, $__parent_ = 0, $__right_ = 0, $__value_$i$i$i = 0, $cmp = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__new_node >> 2] = 0;
 $__right_ = $__new_node + 4 | 0;
 HEAP32[$__right_ >> 2] = 0;
 $__parent_ = $__new_node + 8 | 0;
 HEAP32[$__parent_ >> 2] = $__parent;
 HEAP32[$__child >> 2] = $__new_node;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $cmp = ($1 | 0) == (0 | 0);
 if ($cmp) {
  $3 = $__new_node;
 } else {
  HEAP32[$this >> 2] = $1;
  $$pre = HEAP32[$__child >> 2] | 0;
  $3 = $$pre;
 }
 $__left_7 = $this + 4 | 0;
 $2 = HEAP32[$__left_7 >> 2] | 0;
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($2, $3);
 $__value_$i$i$i = $this + 8 | 0;
 $4 = HEAP32[$__value_$i$i$i >> 2] | 0;
 $inc = $4 + 1 | 0;
 HEAP32[$__value_$i$i$i >> 2] = $inc;
 return;
}

function __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSJ_SJ_($this, $__parent, $__child, $__new_node) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__child = $__child | 0;
 $__new_node = $__new_node | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__left_7 = 0, $__parent_ = 0, $__right_ = 0, $__value_$i$i$i = 0, $cmp = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__new_node >> 2] = 0;
 $__right_ = $__new_node + 4 | 0;
 HEAP32[$__right_ >> 2] = 0;
 $__parent_ = $__new_node + 8 | 0;
 HEAP32[$__parent_ >> 2] = $__parent;
 HEAP32[$__child >> 2] = $__new_node;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $cmp = ($1 | 0) == (0 | 0);
 if ($cmp) {
  $3 = $__new_node;
 } else {
  HEAP32[$this >> 2] = $1;
  $$pre = HEAP32[$__child >> 2] | 0;
  $3 = $$pre;
 }
 $__left_7 = $this + 4 | 0;
 $2 = HEAP32[$__left_7 >> 2] | 0;
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($2, $3);
 $__value_$i$i$i = $this + 8 | 0;
 $4 = HEAP32[$__value_$i$i$i >> 2] | 0;
 $inc = $4 + 1 | 0;
 HEAP32[$__value_$i$i$i >> 2] = $inc;
 return;
}

function __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSJ_SJ_($this, $__parent, $__child, $__new_node) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__child = $__child | 0;
 $__new_node = $__new_node | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__left_7 = 0, $__parent_ = 0, $__right_ = 0, $__value_$i$i$i = 0, $cmp = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__new_node >> 2] = 0;
 $__right_ = $__new_node + 4 | 0;
 HEAP32[$__right_ >> 2] = 0;
 $__parent_ = $__new_node + 8 | 0;
 HEAP32[$__parent_ >> 2] = $__parent;
 HEAP32[$__child >> 2] = $__new_node;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $cmp = ($1 | 0) == (0 | 0);
 if ($cmp) {
  $3 = $__new_node;
 } else {
  HEAP32[$this >> 2] = $1;
  $$pre = HEAP32[$__child >> 2] | 0;
  $3 = $$pre;
 }
 $__left_7 = $this + 4 | 0;
 $2 = HEAP32[$__left_7 >> 2] | 0;
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($2, $3);
 $__value_$i$i$i = $this + 8 | 0;
 $4 = HEAP32[$__value_$i$i$i >> 2] | 0;
 $inc = $4 + 1 | 0;
 HEAP32[$__value_$i$i$i >> 2] = $inc;
 return;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE13__vdeallocateEv($this) {
 $this = $this | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $__end_$i$i = 0, $__soon_to_be_end$i$i$i$04 = 0, $__value_$i$i$i$i$i$i$i = 0, $cmp = 0, $cmp$i$i$i = 0, $cmp$i$i$i3 = 0, $incdec$ptr$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $__end_$i$i = $this + 4 | 0;
 $1 = HEAP32[$__end_$i$i >> 2] | 0;
 $cmp$i$i$i3 = ($0 | 0) == ($1 | 0);
 if ($cmp$i$i$i3) {
  $2 = $0;
 } else {
  $__soon_to_be_end$i$i$i$04 = $1;
  while (1) {
   $incdec$ptr$i$i$i = $__soon_to_be_end$i$i$i$04 + -12 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($incdec$ptr$i$i$i);
   $cmp$i$i$i = ($0 | 0) == ($incdec$ptr$i$i$i | 0);
   if ($cmp$i$i$i) {
    break;
   } else {
    $__soon_to_be_end$i$i$i$04 = $incdec$ptr$i$i$i;
   }
  }
  $$pre = HEAP32[$this >> 2] | 0;
  $2 = $$pre;
 }
 HEAP32[$__end_$i$i >> 2] = $0;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2);
 $__value_$i$i$i$i$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i$i$i$i$i >> 2] = 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 HEAP32[$this >> 2] = 0;
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = $this + 4 | 0;
 $0 = HEAP32[$__offset_flags >> 2] | 0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and | 0) == 0;
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$current_ptr >> 2] | 0;
  $add$ptr = $1 + $shr | 0;
  $2 = HEAP32[$add$ptr >> 2] | 0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this >> 2] | 0;
 $vtable3 = HEAP32[$3 >> 2] | 0;
 $vfn = $vtable3 + 20 | 0;
 $4 = HEAP32[$vfn >> 2] | 0;
 $add$ptr4 = $current_ptr + $offset_to_base$0 | 0;
 $and6 = $0 & 2;
 $tobool7 = ($and6 | 0) == 0;
 $cond = $tobool7 ? 2 : $path_below;
 FUNCTION_TABLE_viiiiii[$4 & 127]($3, $info, $dst_ptr, $add$ptr4, $cond, $use_strcmp);
 return;
}

function __ZN6Crypto10crypto_ops19underive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS4_($derivation, $output_index, $derived_key, $base) {
 $derivation = $derivation | 0;
 $output_index = $output_index | 0;
 $derived_key = $derived_key | 0;
 $base = $base | 0;
 var $call = 0, $cmp = 0, $point1 = 0, $point2 = 0, $point3 = 0, $point4 = 0, $point5 = 0, $retval$0 = 0, $scalar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 800 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(800 | 0);
 $scalar = sp + 760 | 0;
 $point1 = sp + 600 | 0;
 $point2 = sp + 440 | 0;
 $point3 = sp + 280 | 0;
 $point4 = sp + 120 | 0;
 $point5 = sp;
 __ZN6Crypto19EllipticCurveScalarC2Ev($scalar);
 $call = _ge_frombytes_vartime($point1, $derived_key) | 0;
 $cmp = ($call | 0) == 0;
 if (!$cmp) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 __ZN6Crypto10crypto_ops20derivation_to_scalarERKNS_13KeyDerivationEmRNS_19EllipticCurveScalarE($derivation, $output_index, $scalar);
 _ge_scalarmult_base($point2, $scalar);
 _ge_p3_to_cached($point3, $point2);
 _ge_sub($point4, $point1, $point3);
 _ge_p1p1_to_p2($point5, $point4);
 _ge_tobytes($base, $point5);
 $retval$0 = 1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _blake2b_increment_counter($S, $0, $1) {
 $S = $S | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arrayidx = $S + 64 | 0;
 $2 = $arrayidx;
 $3 = $2;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $2 + 4 | 0;
 $6 = $5;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = _i64Add($4 | 0, $7 | 0, $0 | 0, $1 | 0) | 0;
 $9 = getTempRet0() | 0;
 $10 = $arrayidx;
 $11 = $10;
 HEAP32[$11 >> 2] = $8;
 $12 = $10 + 4 | 0;
 $13 = $12;
 HEAP32[$13 >> 2] = $9;
 $14 = $9 >>> 0 < $1 >>> 0;
 $15 = $8 >>> 0 < $0 >>> 0;
 $16 = ($9 | 0) == ($1 | 0);
 $17 = $16 & $15;
 $18 = $14 | $17;
 $19 = $18 & 1;
 $arrayidx5 = $S + 72 | 0;
 $20 = $arrayidx5;
 $21 = $20;
 $22 = HEAP32[$21 >> 2] | 0;
 $23 = $20 + 4 | 0;
 $24 = $23;
 $25 = HEAP32[$24 >> 2] | 0;
 $26 = _i64Add($22 | 0, $25 | 0, $19 | 0, 0) | 0;
 $27 = getTempRet0() | 0;
 $28 = $arrayidx5;
 $29 = $28;
 HEAP32[$29 >> 2] = $26;
 $30 = $28 + 4 | 0;
 $31 = $30;
 HEAP32[$31 >> 2] = $27;
 return;
}

function __ZN4Core12Cryptography25generatePartialSigningKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_($agg$result, $signature, $privateSpendKey) {
 $agg$result = $agg$result | 0;
 $signature = $signature | 0;
 $privateSpendKey = $privateSpendKey | 0;
 var $l_key = 0, $l_privateSpendKey = 0, $l_signature = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $l_signature = sp + 64 | 0;
 $l_privateSpendKey = sp + 32 | 0;
 $l_key = sp;
 __ZN6Crypto9SignatureC2Ev($l_signature);
 __ZN6Common10podFromHexIN6Crypto9SignatureEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($signature, $l_signature);
 __ZN6Crypto9SecretKeyC2Ev($l_privateSpendKey);
 __ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($privateSpendKey, $l_privateSpendKey);
 __ZN6Crypto8Multisig28generate_partial_signing_keyERKNS_9SignatureERKNS_9SecretKeyE($l_key, $l_signature, $l_privateSpendKey);
 __ZN6Common8podToHexIN6Crypto9SecretKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $l_key);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography16generateKeyImageENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_($agg$result, $publicKey, $privateKey) {
 $agg$result = $agg$result | 0;
 $publicKey = $publicKey | 0;
 $privateKey = $privateKey | 0;
 var $l_keyImage = 0, $l_privateKey = 0, $l_publicKey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
 $l_publicKey = sp + 64 | 0;
 $l_privateKey = sp + 32 | 0;
 $l_keyImage = sp;
 __ZN6Crypto9PublicKeyC2Ev($l_publicKey);
 __ZN6Common10podFromHexIN6Crypto9PublicKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($publicKey, $l_publicKey);
 __ZN6Crypto9SecretKeyC2Ev($l_privateKey);
 __ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($privateKey, $l_privateKey);
 __ZN6Crypto8KeyImageC2Ev($l_keyImage);
 __ZN6Crypto18generate_key_imageERKNS_9PublicKeyERKNS_9SecretKeyERNS_8KeyImageE($l_publicKey, $l_privateKey, $l_keyImage);
 __ZN6Common8podToHexIN6Crypto8KeyImageEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $l_keyImage);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal7InvokerINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJSB_EE6invokeEPFSB_SB_EPSB_($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $call = 0, $call3 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $ref$tmp = sp + 12 | 0;
 $agg$tmp = sp;
 $call = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($args) | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp, $call);
 FUNCTION_TABLE_vii[$fn & 255]($ref$tmp, $agg$tmp);
 $call3 = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE10toWireTypeEOSB_($ref$tmp) | 0;
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ref$tmp);
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call3 | 0;
}

function __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($agg$result, $__rhs) {
 $agg$result = $agg$result | 0;
 $__rhs = $__rhs | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add = 0, $call = 0, $cond$i = 0, $cond$i$i = 0, $conv$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = 0 | 0;
 HEAP32[$agg$result + 4 >> 2] = 0 | 0;
 HEAP32[$agg$result + 8 >> 2] = 0 | 0;
 $call = __ZNSt3__211char_traitsIcE6lengthEPKc(47940) | 0;
 $__size_$i$i = $__rhs + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 $__size_$i3$i = $__rhs + 4 | 0;
 $1 = HEAP32[$__size_$i3$i >> 2] | 0;
 $conv$i$i = $0 & 255;
 $cond$i = $tobool$i$i ? $1 : $conv$i$i;
 $add = $cond$i + $call | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm($agg$result, $call, $add);
 $2 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i$i = $2 << 24 >> 24 < 0;
 $3 = HEAP32[$__rhs >> 2] | 0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__rhs;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($agg$result, $cond$i$i, $cond$i) | 0;
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = $this + 4 | 0;
 $0 = HEAP32[$__offset_flags >> 2] | 0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and | 0) == 0;
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$current_ptr >> 2] | 0;
  $add$ptr = $1 + $shr | 0;
  $2 = HEAP32[$add$ptr >> 2] | 0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this >> 2] | 0;
 $vtable3 = HEAP32[$3 >> 2] | 0;
 $vfn = $vtable3 + 24 | 0;
 $4 = HEAP32[$vfn >> 2] | 0;
 $add$ptr4 = $current_ptr + $offset_to_base$0 | 0;
 $and6 = $0 & 2;
 $tobool7 = ($and6 | 0) == 0;
 $cond = $tobool7 ? 2 : $path_below;
 FUNCTION_TABLE_viiiii[$4 & 127]($3, $info, $add$ptr4, $cond, $use_strcmp);
 return;
}

function __ZNSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEEC2EmRKS2_($this, $__n, $__x) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__x = $__x | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $__end_$i = 0, $__n$addr$i$0 = 0, $__value_$i$i$i = 0, $cmp = 0, $cmp$i = 0, $dec$i = 0, $incdec$ptr$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0;
 $__end_$i = $this + 4 | 0;
 HEAP32[$__end_$i >> 2] = 0;
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = 0;
 $cmp = ($__n | 0) == 0;
 if ($cmp) {
  return;
 }
 __ZNSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEE11__vallocateEm($this, $__n);
 $$pre = HEAP32[$__end_$i >> 2] | 0;
 $0 = $$pre;
 $__n$addr$i$0 = $__n;
 while (1) {
  dest = $0;
  src = $__x;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $1 = HEAP32[$__end_$i >> 2] | 0;
  $incdec$ptr$i = $1 + 32 | 0;
  HEAP32[$__end_$i >> 2] = $incdec$ptr$i;
  $dec$i = $__n$addr$i$0 + -1 | 0;
  $cmp$i = ($dec$i | 0) == 0;
  if ($cmp$i) {
   break;
  } else {
   $0 = $incdec$ptr$i;
   $__n$addr$i$0 = $dec$i;
  }
 }
 return;
}

function __ZNSt3__26vectorIN6Crypto8KeyImageENS_9allocatorIS2_EEEC2EmRKS2_($this, $__n, $__x) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__x = $__x | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $__end_$i = 0, $__n$addr$i$0 = 0, $__value_$i$i$i = 0, $cmp = 0, $cmp$i = 0, $dec$i = 0, $incdec$ptr$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0;
 $__end_$i = $this + 4 | 0;
 HEAP32[$__end_$i >> 2] = 0;
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = 0;
 $cmp = ($__n | 0) == 0;
 if ($cmp) {
  return;
 }
 __ZNSt3__26vectorIN6Crypto8KeyImageENS_9allocatorIS2_EEE11__vallocateEm($this, $__n);
 $$pre = HEAP32[$__end_$i >> 2] | 0;
 $0 = $$pre;
 $__n$addr$i$0 = $__n;
 while (1) {
  dest = $0;
  src = $__x;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $1 = HEAP32[$__end_$i >> 2] | 0;
  $incdec$ptr$i = $1 + 32 | 0;
  HEAP32[$__end_$i >> 2] = $incdec$ptr$i;
  $dec$i = $__n$addr$i$0 + -1 | 0;
  $cmp$i = ($dec$i | 0) == 0;
  if ($cmp$i) {
   break;
  } else {
   $0 = $incdec$ptr$i;
   $__n$addr$i$0 = $dec$i;
  }
 }
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm($this, $__sz, $__reserve) {
 $this = $this | 0;
 $__sz = $__sz | 0;
 $__reserve = $__reserve | 0;
 var $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i11 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp2 = 0, $conv$i = 0, $or$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = $__reserve >>> 0 > 4294967279;
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 $cmp2 = $__reserve >>> 0 < 11;
 if ($cmp2) {
  $conv$i = $__sz & 255;
  $__size_$i = $this + 11 | 0;
  HEAP8[$__size_$i >> 0] = $conv$i;
  $__p$0 = $this;
 } else {
  $add$i$i = $__reserve + 16 | 0;
  $and$i$i = $add$i$i & -16;
  $call$i$i$i = __Znwm($and$i$i) | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  $or$i = $and$i$i | -2147483648;
  $__cap_$i = $this + 8 | 0;
  HEAP32[$__cap_$i >> 2] = $or$i;
  $__size_$i11 = $this + 4 | 0;
  HEAP32[$__size_$i11 >> 2] = $__sz;
  $__p$0 = $call$i$i$i;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcm($__p$0, 47940, $__sz) | 0;
 $arrayidx = $__p$0 + $__sz | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx, 0);
 return;
}

function __ZNSt3__213random_deviceclEv() {
 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $call = 0, $cmp = 0, $cmp6 = 0, $n$0$ph4 = 0, $p$0$ph3 = 0, $r = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $r = sp;
 $n$0$ph4 = 4;
 $p$0$ph3 = $r;
 L1 : while (1) {
  L3 : while (1) {
   $0 = HEAP32[144121] | 0;
   $call = _read($0, $p$0$ph3, $n$0$ph4) | 0;
   switch ($call | 0) {
   case 0:
    {
     label = 4;
     break L1;
     break;
    }
   case -1:
    {
     break;
    }
   default:
    {
     break L3;
    }
   }
   $1 = HEAP32[144138] | 0;
   $cmp6 = ($1 | 0) == 4;
   if (!$cmp6) {
    label = 6;
    break L1;
   }
  }
  $sub = $n$0$ph4 - $call | 0;
  $add$ptr = $p$0$ph3 + $call | 0;
  $cmp = ($sub | 0) == 0;
  if ($cmp) {
   label = 8;
   break;
  } else {
   $n$0$ph4 = $sub;
   $p$0$ph3 = $add$ptr;
  }
 }
 if ((label | 0) == 4) {
  __ZNSt3__220__throw_system_errorEiPKc();
 } else if ((label | 0) == 6) {
  __ZNSt3__220__throw_system_errorEiPKc();
 } else if ((label | 0) == 8) {
  $2 = HEAP32[$r >> 2] | 0;
  STACKTOP = sp;
  return $2 | 0;
 }
 return 0 | 0;
}

function _ge_sub($r, $p, $q) {
 $r = $r | 0;
 $p = $p | 0;
 $q = $q | 0;
 var $arraydecay1 = 0, $arraydecay10 = 0, $arraydecay13 = 0, $arraydecay19 = 0, $arraydecay20 = 0, $arraydecay22 = 0, $arraydecay26 = 0, $arraydecay28 = 0, $arraydecay5 = 0, $t0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $t0 = sp;
 $arraydecay1 = $p + 40 | 0;
 _fe_add($r, $arraydecay1, $p);
 $arraydecay5 = $r + 40 | 0;
 _fe_sub($arraydecay5, $arraydecay1, $p);
 $arraydecay10 = $r + 80 | 0;
 $arraydecay13 = $q + 40 | 0;
 _fe_mul($arraydecay10, $r, $arraydecay13);
 _fe_mul($arraydecay5, $arraydecay5, $q);
 $arraydecay19 = $r + 120 | 0;
 $arraydecay20 = $q + 120 | 0;
 $arraydecay22 = $p + 120 | 0;
 _fe_mul($arraydecay19, $arraydecay20, $arraydecay22);
 $arraydecay26 = $p + 80 | 0;
 $arraydecay28 = $q + 80 | 0;
 _fe_mul($r, $arraydecay26, $arraydecay28);
 _fe_add($t0, $r, $r);
 _fe_sub($r, $arraydecay10, $arraydecay5);
 _fe_add($arraydecay5, $arraydecay10, $arraydecay5);
 _fe_sub($arraydecay10, $t0, $arraydecay19);
 _fe_add($arraydecay19, $t0, $arraydecay19);
 STACKTOP = sp;
 return;
}

function _ge_add($r, $p, $q) {
 $r = $r | 0;
 $p = $p | 0;
 $q = $q | 0;
 var $arraydecay1 = 0, $arraydecay10 = 0, $arraydecay18 = 0, $arraydecay19 = 0, $arraydecay20 = 0, $arraydecay22 = 0, $arraydecay26 = 0, $arraydecay28 = 0, $arraydecay5 = 0, $t0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $t0 = sp;
 $arraydecay1 = $p + 40 | 0;
 _fe_add($r, $arraydecay1, $p);
 $arraydecay5 = $r + 40 | 0;
 _fe_sub($arraydecay5, $arraydecay1, $p);
 $arraydecay10 = $r + 80 | 0;
 _fe_mul($arraydecay10, $r, $q);
 $arraydecay18 = $q + 40 | 0;
 _fe_mul($arraydecay5, $arraydecay5, $arraydecay18);
 $arraydecay19 = $r + 120 | 0;
 $arraydecay20 = $q + 120 | 0;
 $arraydecay22 = $p + 120 | 0;
 _fe_mul($arraydecay19, $arraydecay20, $arraydecay22);
 $arraydecay26 = $p + 80 | 0;
 $arraydecay28 = $q + 80 | 0;
 _fe_mul($r, $arraydecay26, $arraydecay28);
 _fe_add($t0, $r, $r);
 _fe_sub($r, $arraydecay10, $arraydecay5);
 _fe_add($arraydecay5, $arraydecay10, $arraydecay5);
 _fe_add($arraydecay10, $t0, $arraydecay19);
 _fe_sub($arraydecay19, $t0, $arraydecay19);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJNS2_6vectorIS8_NS6_IS8_EEEEEE6invokeEPFS8_SB_EPSB_($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $call = 0, $call3 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $ref$tmp = sp + 12 | 0;
 $agg$tmp = sp;
 $call = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($args) | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp, $call);
 FUNCTION_TABLE_vii[$fn & 255]($ref$tmp, $agg$tmp);
 $call3 = __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE10toWireTypeERKS8_($ref$tmp) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call3 | 0;
}

function _mul($a, $b, $res) {
 $a = $a | 0;
 $b = $b | 0;
 $res = $res | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx3 = 0, $hi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $hi = sp;
 $0 = $a;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $b;
 $7 = $6;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $6 + 4 | 0;
 $10 = $9;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = _mul128($2, $5, $8, $11, $hi) | 0;
 $13 = getTempRet0() | 0;
 $14 = $hi;
 $15 = $14;
 $16 = HEAP32[$15 >> 2] | 0;
 $17 = $14 + 4 | 0;
 $18 = $17;
 $19 = HEAP32[$18 >> 2] | 0;
 $20 = $res;
 $21 = $20;
 HEAP32[$21 >> 2] = $16;
 $22 = $20 + 4 | 0;
 $23 = $22;
 HEAP32[$23 >> 2] = $19;
 $arrayidx3 = $res + 8 | 0;
 $24 = $arrayidx3;
 $25 = $24;
 HEAP32[$25 >> 2] = $12;
 $26 = $24 + 4 | 0;
 $27 = $26;
 HEAP32[$27 >> 2] = $13;
 STACKTOP = sp;
 return;
}

function __Z17underivePublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmS5_($agg$result, $derivation, $outputIndex, $derivedKey) {
 $agg$result = $agg$result | 0;
 $derivation = $derivation | 0;
 $outputIndex = $outputIndex | 0;
 $derivedKey = $derivedKey | 0;
 var $agg$tmp = 0, $agg$tmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $agg$tmp = sp + 12 | 0;
 $agg$tmp1 = sp;
 HEAP32[$agg$result >> 2] = 0 | 0;
 HEAP32[$agg$result + 4 >> 2] = 0 | 0;
 HEAP32[$agg$result + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $derivation);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1, $derivedKey);
 __ZN4Core12Cryptography17underivePublicKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS7_RS7_($agg$tmp, $outputIndex, 0, $agg$tmp1, $agg$result);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return;
}

function _fputc($f) {
 $f = $f | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cmp = 0, $cmp20 = 0, $cmp3 = 0, $cmp5 = 0, $incdec$ptr = 0, $incdec$ptr25 = 0, $lbf = 0, $lock = 0, $wend = 0, $wend19 = 0, $wpos = 0, $wpos18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = $f + 76 | 0;
 $0 = HEAP32[$lock >> 2] | 0;
 $cmp = ($0 | 0) < 0;
 $lbf = $f + 75 | 0;
 $1 = HEAP8[$lbf >> 0] | 0;
 $cmp3 = $1 << 24 >> 24 == 10;
 do {
  if ($cmp) {
   if (!$cmp3) {
    $wpos = $f + 20 | 0;
    $2 = HEAP32[$wpos >> 2] | 0;
    $wend = $f + 16 | 0;
    $3 = HEAP32[$wend >> 2] | 0;
    $cmp5 = $2 >>> 0 < $3 >>> 0;
    if ($cmp5) {
     $incdec$ptr = $2 + 1 | 0;
     HEAP32[$wpos >> 2] = $incdec$ptr;
     HEAP8[$2 >> 0] = 10;
     break;
    }
   }
   ___overflow($f) | 0;
  } else {
   if (!$cmp3) {
    $wpos18 = $f + 20 | 0;
    $4 = HEAP32[$wpos18 >> 2] | 0;
    $wend19 = $f + 16 | 0;
    $5 = HEAP32[$wend19 >> 2] | 0;
    $cmp20 = $4 >>> 0 < $5 >>> 0;
    if ($cmp20) {
     $incdec$ptr25 = $4 + 1 | 0;
     HEAP32[$wpos18 >> 2] = $incdec$ptr25;
     HEAP8[$4 >> 0] = 10;
     break;
    }
   }
   ___overflow($f) | 0;
  }
 } while (0);
 return;
}

function _allocate_memory($context, $instance) {
 $context = $context | 0;
 $instance = $instance | 0;
 var $$ = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $allocate_cbk = 0, $call8 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp2 = 0, $div = 0, $memory_blocks = 0, $mul = 0, $or$cond = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $memory_blocks = $instance + 12 | 0;
 $0 = HEAP32[$memory_blocks >> 2] | 0;
 $mul = $0 << 10;
 $1 = HEAP32[$instance >> 2] | 0;
 $cmp = ($1 | 0) == (0 | 0);
 if (!$cmp) {
  $retval$0 = 0;
  return $retval$0 | 0;
 }
 $cmp1 = ($0 | 0) == 0;
 $div = $0 & 4194303;
 $cmp2 = ($div | 0) == ($0 | 0);
 $or$cond = $cmp1 | $cmp2;
 if (!$or$cond) {
  $retval$0 = -22;
  return $retval$0 | 0;
 }
 $allocate_cbk = $context + 60 | 0;
 $2 = HEAP32[$allocate_cbk >> 2] | 0;
 $tobool = ($2 | 0) == (0 | 0);
 if ($tobool) {
  $call8 = _malloc($mul) | 0;
  HEAP32[$instance >> 2] = $call8;
  $3 = $call8;
 } else {
  FUNCTION_TABLE_iii[$2 & 255]($instance, $mul) | 0;
  $$pre = HEAP32[$instance >> 2] | 0;
  $3 = $$pre;
 }
 $cmp12 = ($3 | 0) == (0 | 0);
 $$ = $cmp12 ? -22 : 0;
 $retval$0 = $$;
 return $retval$0 | 0;
}

function __ZN18PreparedSignaturesC2EOS_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $__end_$i = 0, $__end_$i$i = 0, $__r_$i = 0, $__r_2$i = 0, $__value_$i$i$i32$i = 0, $__value_$i$i$i39$i = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0;
 $__end_$i$i = $this + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i39$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i39$i >> 2] = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$this >> 2] = $1;
 $__end_$i = $0 + 4 | 0;
 $2 = HEAP32[$__end_$i >> 2] | 0;
 HEAP32[$__end_$i$i >> 2] = $2;
 $__value_$i$i$i32$i = $0 + 8 | 0;
 $3 = HEAP32[$__value_$i$i$i32$i >> 2] | 0;
 HEAP32[$__value_$i$i$i39$i >> 2] = $3;
 HEAP32[$__value_$i$i$i32$i >> 2] = 0;
 HEAP32[$__end_$i >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 $__r_$i = $this + 12 | 0;
 $__r_2$i = $0 + 12 | 0;
 HEAP32[$__r_$i >> 2] = HEAP32[$__r_2$i >> 2] | 0;
 HEAP32[$__r_$i + 4 >> 2] = HEAP32[$__r_2$i + 4 >> 2] | 0;
 HEAP32[$__r_$i + 8 >> 2] = HEAP32[$__r_2$i + 8 >> 2] | 0;
 $scevgep = $0 + 12 | 0;
 HEAP32[$scevgep >> 2] = 0 | 0;
 HEAP32[$scevgep + 4 >> 2] = 0 | 0;
 HEAP32[$scevgep + 8 >> 2] = 0 | 0;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i12 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp2 = 0, $conv$i = 0, $or$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = $__sz >>> 0 > 4294967279;
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 $cmp2 = $__sz >>> 0 < 11;
 if ($cmp2) {
  $conv$i = $__sz & 255;
  $__size_$i = $this + 11 | 0;
  HEAP8[$__size_$i >> 0] = $conv$i;
  $__p$0 = $this;
 } else {
  $add$i$i = $__sz + 16 | 0;
  $and$i$i = $add$i$i & -16;
  $call$i$i$i = __Znwm($and$i$i) | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  $or$i = $and$i$i | -2147483648;
  $__cap_$i = $this + 8 | 0;
  HEAP32[$__cap_$i >> 2] = $or$i;
  $__size_$i12 = $this + 4 | 0;
  HEAP32[$__size_$i12 >> 2] = $__sz;
  $__p$0 = $call$i$i$i;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcm($__p$0, $__s, $__sz) | 0;
 $arrayidx = $__p$0 + $__sz | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx, 0);
 return;
}

function __ZN4Core12Cryptography13scalarmultKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_($agg$result, $keyImageA, $keyImageB) {
 $agg$result = $agg$result | 0;
 $keyImageA = $keyImageA | 0;
 $keyImageB = $keyImageB | 0;
 var $l_keyImage = 0, $l_keyImageA = 0, $l_keyImageB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
 $l_keyImageA = sp + 64 | 0;
 $l_keyImageB = sp + 32 | 0;
 $l_keyImage = sp;
 __ZN6Crypto8KeyImageC2Ev($l_keyImageA);
 __ZN6Common10podFromHexIN6Crypto8KeyImageEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($keyImageA, $l_keyImageA);
 __ZN6Crypto8KeyImageC2Ev($l_keyImageB);
 __ZN6Common10podFromHexIN6Crypto8KeyImageEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($keyImageB, $l_keyImageB);
 __ZN6Crypto13scalarmultKeyERKNS_8KeyImageES2_($l_keyImage, $l_keyImageA, $l_keyImageB);
 __ZN6Common8podToHexIN6Crypto8KeyImageEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $l_keyImage);
 STACKTOP = sp;
 return;
}

function __Z12generateKeysv($agg$result) {
 $agg$result = $agg$result | 0;
 var $publicKey = 0, $secretKey = 0, $secretKey4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $secretKey = sp + 12 | 0;
 $publicKey = sp;
 HEAP32[$secretKey >> 2] = 0 | 0;
 HEAP32[$secretKey + 4 >> 2] = 0 | 0;
 HEAP32[$secretKey + 8 >> 2] = 0 | 0;
 HEAP32[$publicKey >> 2] = 0 | 0;
 HEAP32[$publicKey + 4 >> 2] = 0 | 0;
 HEAP32[$publicKey + 8 >> 2] = 0 | 0;
 __ZN4Core12Cryptography12generateKeysERNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES8_($secretKey, $publicKey);
 __ZN4KeysC2Ev($agg$result);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($agg$result, $publicKey) | 0;
 $secretKey4 = $agg$result + 12 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($secretKey4, $secretKey) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($publicKey);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($secretKey);
 STACKTOP = sp;
 return;
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp7 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $l$addr$010 = 0, $or$cond = 0, $or$cond9 = 0, $r$addr$011 = 0, $sub = 0, $tobool = 0, $tobool8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 $cmp7 = $0 << 24 >> 24 != $1 << 24 >> 24;
 $tobool8 = $0 << 24 >> 24 == 0;
 $or$cond9 = $tobool8 | $cmp7;
 if ($or$cond9) {
  $$lcssa = $1;
  $$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;
  $r$addr$011 = $r;
  while (1) {
   $incdec$ptr = $l$addr$010 + 1 | 0;
   $incdec$ptr4 = $r$addr$011 + 1 | 0;
   $2 = HEAP8[$incdec$ptr >> 0] | 0;
   $3 = HEAP8[$incdec$ptr4 >> 0] | 0;
   $cmp = $2 << 24 >> 24 != $3 << 24 >> 24;
   $tobool = $2 << 24 >> 24 == 0;
   $or$cond = $tobool | $cmp;
   if ($or$cond) {
    $$lcssa = $3;
    $$lcssa6 = $2;
    break;
   } else {
    $l$addr$010 = $incdec$ptr;
    $r$addr$011 = $incdec$ptr4;
   }
  }
 }
 $conv5 = $$lcssa6 & 255;
 $conv6 = $$lcssa & 255;
 $sub = $conv5 - $conv6 | 0;
 return $sub | 0;
}

function __ZN6Crypto8Multisig28calculate_shared_private_keyERKNSt3__26vectorINS_9SecretKeyENS1_9allocatorIS3_EEEERS3_($secretKeys$0$0$0$val, $secretKeys$0$0$1$val, $sharedSecretKey) {
 $secretKeys$0$0$0$val = $secretKeys$0$0$0$val | 0;
 $secretKeys$0$0$1$val = $secretKeys$0$0$1$val | 0;
 $sharedSecretKey = $sharedSecretKey | 0;
 var $keys = 0, $ref$tmp = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $keys = sp;
 $ref$tmp = sp + 16 | 0;
 __ZN6Crypto8Multisig17dedupeAndSortKeysINS_9SecretKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_($keys, $secretKeys$0$0$0$val, $secretKeys$0$0$1$val);
 __ZN6Crypto8Multisig7addKeysINS_9SecretKeyEEET_RKNSt3__26vectorIS3_NS4_9allocatorIS3_EEEE($ref$tmp, $keys);
 dest = $sharedSecretKey;
 src = $ref$tmp;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__213__vector_baseIN6Crypto9SecretKeyENS_9allocatorIS2_EEED2Ev($keys);
 STACKTOP = sp;
 return;
}

function __ZN6Crypto8Multisig27calculate_shared_public_keyERKNSt3__26vectorINS_9PublicKeyENS1_9allocatorIS3_EEEERS3_($publicKeys$0$0$0$val, $publicKeys$0$0$1$val, $sharedPublicKey) {
 $publicKeys$0$0$0$val = $publicKeys$0$0$0$val | 0;
 $publicKeys$0$0$1$val = $publicKeys$0$0$1$val | 0;
 $sharedPublicKey = $sharedPublicKey | 0;
 var $keys = 0, $ref$tmp = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $keys = sp;
 $ref$tmp = sp + 16 | 0;
 __ZN6Crypto8Multisig17dedupeAndSortKeysINS_9PublicKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_($keys, $publicKeys$0$0$0$val, $publicKeys$0$0$1$val);
 __ZN6Crypto8Multisig7addKeysINS_9PublicKeyEEET_RKNSt3__26vectorIS3_NS4_9allocatorIS3_EEEE($ref$tmp, $keys);
 dest = $sharedPublicKey;
 src = $ref$tmp;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($keys);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__end_$i = 0, $__end_$i16 = 0, $__value_$i$i$i = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0;
 $__end_$i = $this + 4 | 0;
 HEAP32[$__end_$i >> 2] = 0;
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = 0;
 $__end_$i16 = $__x + 4 | 0;
 $0 = HEAP32[$__end_$i16 >> 2] | 0;
 $1 = HEAP32[$__x >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $2 = ($sub$ptr$sub$i | 0) == 0;
 if ($2) {
  return;
 }
 $sub$ptr$div$i = ($sub$ptr$sub$i | 0) / 12 & -1;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE11__vallocateEm($this, $sub$ptr$div$i);
 $3 = HEAP32[$__x >> 2] | 0;
 $4 = HEAP32[$__end_$i16 >> 2] | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_m($this, $3, $4);
 return;
}

function _pad_524($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $0 = 0, $1 = 0, $and = 0, $cmp = 0, $cmp3 = 0, $cmp38 = 0, $cond = 0, $conv = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $or$cond = 0, $pad = 0, $sub = 0, $sub6 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256 | 0);
 $pad = sp;
 $and = $fl & 73728;
 $tobool = ($and | 0) == 0;
 $cmp = ($w | 0) > ($l | 0);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $sub = $w - $l | 0;
  $conv = $c << 24 >> 24;
  $0 = $sub >>> 0 < 256;
  $cond = $0 ? $sub : 256;
  _memset($pad | 0, $conv | 0, $cond | 0) | 0;
  $cmp38 = $sub >>> 0 > 255;
  if ($cmp38) {
   $l$addr$09 = $sub;
   while (1) {
    _out($f, $pad, 256);
    $sub6 = $l$addr$09 + -256 | 0;
    $cmp3 = $sub6 >>> 0 > 255;
    if ($cmp3) {
     $l$addr$09 = $sub6;
    } else {
     break;
    }
   }
   $1 = $sub & 255;
   $l$addr$0$lcssa = $1;
  } else {
   $l$addr$0$lcssa = $sub;
  }
  _out($f, $pad, $l$addr$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function __ZN6Crypto8Multisig23restore_ring_signaturesERKNS_13KeyDerivationEmRKNSt3__26vectorINS_9SecretKeyENS4_9allocatorIS6_EEEEyRKNS_19EllipticCurveScalarERNS5_INS_9SignatureENS7_ISF_EEEE($derivation, $output_index, $partialSigningKeys, $0, $1, $k, $signatures) {
 $derivation = $derivation | 0;
 $output_index = $output_index | 0;
 $partialSigningKeys = $partialSigningKeys | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $k = $k | 0;
 $signatures = $signatures | 0;
 var $2 = 0, $derivationScalar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $derivationScalar = sp;
 __ZN6Crypto19EllipticCurveScalarC2Ev($derivationScalar);
 __ZN6Crypto20derivation_to_scalarERKNS_13KeyDerivationEmRNS_19EllipticCurveScalarE($derivation, $output_index, $derivationScalar);
 $2 = __ZN6Crypto8Multisig23restore_ring_signaturesERKNS_19EllipticCurveScalarERKNSt3__26vectorINS_9SecretKeyENS4_9allocatorIS6_EEEEyS3_RNS5_INS_9SignatureENS7_ISC_EEEE($derivationScalar, $partialSigningKeys, $0, $1, $k, $signatures) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_mEE6invokeEPFS8_S8_mEPNS0_11BindingTypeIS8_vEUt_Em($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $agg$tmp = 0, $call = 0, $call6 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $ref$tmp = sp + 12 | 0;
 $agg$tmp = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 $call = __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($args1) | 0;
 FUNCTION_TABLE_viii[$fn & 255]($ref$tmp, $agg$tmp, $call);
 $call6 = __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE10toWireTypeERKS8_($ref$tmp) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call6 | 0;
}

function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_iEE6invokeEPFS8_S8_iEPNS0_11BindingTypeIS8_vEUt_Ei($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $agg$tmp = 0, $call = 0, $call6 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $ref$tmp = sp + 12 | 0;
 $agg$tmp = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 $call = __ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($args1) | 0;
 FUNCTION_TABLE_viii[$fn & 255]($ref$tmp, $agg$tmp, $call);
 $call6 = __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE10toWireTypeERKS8_($ref$tmp) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call6 | 0;
}

function ___towrite($f) {
 $f = $f | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = $f + 74 | 0;
 $0 = HEAP8[$mode >> 0] | 0;
 $conv = $0 << 24 >> 24;
 $sub = $conv + 255 | 0;
 $or = $sub | $conv;
 $conv3 = $or & 255;
 HEAP8[$mode >> 0] = $conv3;
 $1 = HEAP32[$f >> 2] | 0;
 $and = $1 & 8;
 $tobool = ($and | 0) == 0;
 if ($tobool) {
  $rend = $f + 8 | 0;
  HEAP32[$rend >> 2] = 0;
  $rpos = $f + 4 | 0;
  HEAP32[$rpos >> 2] = 0;
  $buf = $f + 44 | 0;
  $2 = HEAP32[$buf >> 2] | 0;
  $wbase = $f + 28 | 0;
  HEAP32[$wbase >> 2] = $2;
  $wpos = $f + 20 | 0;
  HEAP32[$wpos >> 2] = $2;
  $3 = $2;
  $buf_size = $f + 48 | 0;
  $4 = HEAP32[$buf_size >> 2] | 0;
  $add$ptr = $3 + $4 | 0;
  $wend = $f + 16 | 0;
  HEAP32[$wend >> 2] = $add$ptr;
  $retval$0 = 0;
 } else {
  $or5 = $1 | 32;
  HEAP32[$f >> 2] = $or5;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__flags = 0, $__flags5 = 0, $and = 0, $and6 = 0, $call = 0, $retval$1 = 0, $tobool = 0, $tobool3 = 0, $tobool7 = 0, $use_strcmp$1$off0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__flags = $this + 8 | 0;
 $0 = HEAP32[$__flags >> 2] | 0;
 $and = $0 & 24;
 $tobool = ($and | 0) == 0;
 if ($tobool) {
  $1 = ($thrown_type | 0) == (0 | 0);
  if ($1) {
   $retval$1 = 0;
  } else {
   $2 = ___dynamic_cast($thrown_type, 42688) | 0;
   $tobool3 = ($2 | 0) == (0 | 0);
   if ($tobool3) {
    $retval$1 = 0;
   } else {
    $__flags5 = $2 + 8 | 0;
    $3 = HEAP32[$__flags5 >> 2] | 0;
    $and6 = $3 & 24;
    $tobool7 = ($and6 | 0) != 0;
    $use_strcmp$1$off0 = $tobool7;
    label = 5;
   }
  }
 } else {
  $use_strcmp$1$off0 = 1;
  label = 5;
 }
 if ((label | 0) == 5) {
  $call = __ZL8is_equalPKSt9type_infoS1_b($this, $thrown_type, $use_strcmp$1$off0) | 0;
  $retval$1 = $call;
 }
 return $retval$1 | 0;
}

function __Z21generateKeyDerivationNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_($agg$result, $publicKey, $secretKey) {
 $agg$result = $agg$result | 0;
 $publicKey = $publicKey | 0;
 $secretKey = $secretKey | 0;
 var $agg$tmp = 0, $agg$tmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $agg$tmp = sp + 12 | 0;
 $agg$tmp1 = sp;
 HEAP32[$agg$result >> 2] = 0 | 0;
 HEAP32[$agg$result + 4 >> 2] = 0 | 0;
 HEAP32[$agg$result + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $publicKey);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1, $secretKey);
 __ZN4Core12Cryptography21generateKeyDerivationENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_RS7_($agg$tmp, $agg$tmp1, $agg$result) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEmES2_SE_JmEE6invokeEPSG_PSC_m($function, $wireThis, $args) {
 $function = $function | 0;
 $wireThis = $wireThis | 0;
 $args = $args | 0;
 var $0 = 0, $call = 0, $call1 = 0, $call2 = 0, $ref$tmp = 0, $ref$tmp$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $ref$tmp = sp;
 $0 = HEAP32[$function >> 2] | 0;
 $call = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($wireThis) | 0;
 $call1 = __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($args) | 0;
 FUNCTION_TABLE_viii[$0 & 255]($ref$tmp, $call, $call1);
 $call2 = __ZN10emscripten8internal11BindingTypeINS_3valEvE10toWireTypeERKS2_($ref$tmp) | 0;
 $ref$tmp$idx$val = HEAP32[$ref$tmp >> 2] | 0;
 __ZN10emscripten3valD2Ev($ref$tmp$idx$val);
 STACKTOP = sp;
 return $call2 | 0;
}

function _ge_msub($r, $p, $q) {
 $r = $r | 0;
 $p = $p | 0;
 $q = $q | 0;
 var $arraydecay1 = 0, $arraydecay10 = 0, $arraydecay13 = 0, $arraydecay19 = 0, $arraydecay20 = 0, $arraydecay22 = 0, $arraydecay25 = 0, $arraydecay5 = 0, $t0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $t0 = sp;
 $arraydecay1 = $p + 40 | 0;
 _fe_add($r, $arraydecay1, $p);
 $arraydecay5 = $r + 40 | 0;
 _fe_sub($arraydecay5, $arraydecay1, $p);
 $arraydecay10 = $r + 80 | 0;
 $arraydecay13 = $q + 40 | 0;
 _fe_mul($arraydecay10, $r, $arraydecay13);
 _fe_mul($arraydecay5, $arraydecay5, $q);
 $arraydecay19 = $r + 120 | 0;
 $arraydecay20 = $q + 80 | 0;
 $arraydecay22 = $p + 120 | 0;
 _fe_mul($arraydecay19, $arraydecay20, $arraydecay22);
 $arraydecay25 = $p + 80 | 0;
 _fe_add($t0, $arraydecay25, $arraydecay25);
 _fe_sub($r, $arraydecay10, $arraydecay5);
 _fe_add($arraydecay5, $arraydecay10, $arraydecay5);
 _fe_sub($arraydecay10, $t0, $arraydecay19);
 _fe_add($arraydecay19, $t0, $arraydecay19);
 STACKTOP = sp;
 return;
}

function _ge_madd($r, $p, $q) {
 $r = $r | 0;
 $p = $p | 0;
 $q = $q | 0;
 var $arraydecay1 = 0, $arraydecay10 = 0, $arraydecay18 = 0, $arraydecay19 = 0, $arraydecay20 = 0, $arraydecay22 = 0, $arraydecay25 = 0, $arraydecay5 = 0, $t0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $t0 = sp;
 $arraydecay1 = $p + 40 | 0;
 _fe_add($r, $arraydecay1, $p);
 $arraydecay5 = $r + 40 | 0;
 _fe_sub($arraydecay5, $arraydecay1, $p);
 $arraydecay10 = $r + 80 | 0;
 _fe_mul($arraydecay10, $r, $q);
 $arraydecay18 = $q + 40 | 0;
 _fe_mul($arraydecay5, $arraydecay5, $arraydecay18);
 $arraydecay19 = $r + 120 | 0;
 $arraydecay20 = $q + 80 | 0;
 $arraydecay22 = $p + 120 | 0;
 _fe_mul($arraydecay19, $arraydecay20, $arraydecay22);
 $arraydecay25 = $p + 80 | 0;
 _fe_add($t0, $arraydecay25, $arraydecay25);
 _fe_sub($r, $arraydecay10, $arraydecay5);
 _fe_add($arraydecay5, $arraydecay10, $arraydecay5);
 _fe_add($arraydecay10, $t0, $arraydecay19);
 _fe_sub($arraydecay19, $t0, $arraydecay19);
 STACKTOP = sp;
 return;
}
function ___stdout_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $call = 0, $call3 = 0, $fd = 0, $lbf = 0, $tobool = 0, $tobool2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $write = 0, $wsz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $vararg_buffer = sp;
 $wsz = sp + 16 | 0;
 $write = $f + 36 | 0;
 HEAP32[$write >> 2] = 10;
 $0 = HEAP32[$f >> 2] | 0;
 $and = $0 & 64;
 $tobool = ($and | 0) == 0;
 if ($tobool) {
  $fd = $f + 60 | 0;
  $1 = HEAP32[$fd >> 2] | 0;
  $2 = $wsz;
  HEAP32[$vararg_buffer >> 2] = $1;
  $vararg_ptr1 = $vararg_buffer + 4 | 0;
  HEAP32[$vararg_ptr1 >> 2] = 21523;
  $vararg_ptr2 = $vararg_buffer + 8 | 0;
  HEAP32[$vararg_ptr2 >> 2] = $2;
  $call = ___syscall54(54, $vararg_buffer | 0) | 0;
  $tobool2 = ($call | 0) == 0;
  if (!$tobool2) {
   $lbf = $f + 75 | 0;
   HEAP8[$lbf >> 0] = -1;
  }
 }
 $call3 = ___stdio_write($f, $buf, $len) | 0;
 STACKTOP = sp;
 return $call3 | 0;
}

function __ZN10emscripten8internal12MemberAccessI18PreparedSignaturesNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE7setWireIS2_EEvRKMS2_SC_RT_PSC_($field, $ptr, $value) {
 $field = $field | 0;
 $ptr = $ptr | 0;
 $value = $value | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i = 0, $call = 0, $cmp$i = 0, $memptr$offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($value) | 0;
 $0 = HEAP32[$field >> 2] | 0;
 $memptr$offset = $ptr + $0 | 0;
 $cmp$i = ($call | 0) == ($memptr$offset | 0);
 if ($cmp$i) {
  return;
 }
 $1 = HEAP32[$value >> 2] | 0;
 $__end_$i = $value + 4 | 0;
 $2 = HEAP32[$__end_$i >> 2] | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6assignIPS6_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS6_NS_15iterator_traitsISC_E9referenceEEE5valueEvE4typeESC_SC_($memptr$offset, $1, $2);
 return;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_m($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $__begin1$addr$i$05 = 0, $__end_ = 0, $cmp$i = 0, $cmp$i4 = 0, $incdec$ptr$i = 0, $incdec$ptr1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = $this + 4 | 0;
 $cmp$i4 = ($__first | 0) == ($__last | 0);
 if ($cmp$i4) {
  return;
 }
 $$pre = HEAP32[$__end_ >> 2] | 0;
 $0 = $$pre;
 $__begin1$addr$i$05 = $__first;
 while (1) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0, $__begin1$addr$i$05);
  $incdec$ptr$i = $__begin1$addr$i$05 + 12 | 0;
  $1 = HEAP32[$__end_ >> 2] | 0;
  $incdec$ptr1$i = $1 + 12 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr1$i;
  $cmp$i = ($incdec$ptr$i | 0) == ($__last | 0);
  if ($cmp$i) {
   break;
  } else {
   $0 = $incdec$ptr1$i;
   $__begin1$addr$i$05 = $incdec$ptr$i;
  }
 }
 return;
}

function __ZN10emscripten8internal7InvokerIjJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEmmEE6invokeEPFjS8_mmEPNS0_11BindingTypeIS8_vEUt_Emm($fn, $args, $args1, $args3) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $agg$tmp = 0, $call = 0, $call10 = 0, $call6 = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $agg$tmp = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 $call = __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($args1) | 0;
 $call6 = __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($args3) | 0;
 $call8 = FUNCTION_TABLE_iiii[$fn & 255]($agg$tmp, $call, $call6) | 0;
 $call10 = __ZN10emscripten8internal11BindingTypeIjvE10toWireTypeERKj($call8) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call10 | 0;
}

function _blake256_init($S) {
 $S = $S | 0;
 var $arrayidx10 = 0, $arrayidx12 = 0, $arrayidx14 = 0, $arrayidx2 = 0, $arrayidx24 = 0, $arrayidx4 = 0, $arrayidx6 = 0, $arrayidx8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$S >> 2] = 1779033703;
 $arrayidx2 = $S + 4 | 0;
 HEAP32[$arrayidx2 >> 2] = -1150833019;
 $arrayidx4 = $S + 8 | 0;
 HEAP32[$arrayidx4 >> 2] = 1013904242;
 $arrayidx6 = $S + 12 | 0;
 HEAP32[$arrayidx6 >> 2] = -1521486534;
 $arrayidx8 = $S + 16 | 0;
 HEAP32[$arrayidx8 >> 2] = 1359893119;
 $arrayidx10 = $S + 20 | 0;
 HEAP32[$arrayidx10 >> 2] = -1694144372;
 $arrayidx12 = $S + 24 | 0;
 HEAP32[$arrayidx12 >> 2] = 528734635;
 $arrayidx14 = $S + 28 | 0;
 HEAP32[$arrayidx14 >> 2] = 1541459225;
 $arrayidx24 = $S + 32 | 0;
 HEAP32[$arrayidx24 >> 2] = 0 | 0;
 HEAP32[$arrayidx24 + 4 >> 2] = 0 | 0;
 HEAP32[$arrayidx24 + 8 >> 2] = 0 | 0;
 HEAP32[$arrayidx24 + 12 >> 2] = 0 | 0;
 HEAP32[$arrayidx24 + 16 >> 2] = 0 | 0;
 HEAP32[$arrayidx24 + 20 >> 2] = 0 | 0;
 HEAP32[$arrayidx24 + 24 >> 2] = 0 | 0;
 HEAP32[$arrayidx24 + 28 >> 2] = 0 | 0;
 return;
}

function _fmt_x($0, $1, $s, $lower) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 $lower = $lower | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $conv1 = 0, $conv4 = 0, $idxprom = 0, $incdec$ptr = 0, $or = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($0 | 0) == 0;
 $3 = ($1 | 0) == 0;
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $5 = $0;
  $7 = $1;
  $s$addr$06 = $s;
  while (1) {
   $idxprom = $5 & 15;
   $arrayidx = 41952 + $idxprom | 0;
   $6 = HEAP8[$arrayidx >> 0] | 0;
   $conv4 = $6 & 255;
   $or = $conv4 | $lower;
   $conv1 = $or & 255;
   $incdec$ptr = $s$addr$06 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = $conv1;
   $8 = _bitshift64Lshr($5 | 0, $7 | 0, 4) | 0;
   $9 = getTempRet0() | 0;
   $10 = ($8 | 0) == 0;
   $11 = ($9 | 0) == 0;
   $12 = $10 & $11;
   if ($12) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $5 = $8;
    $7 = $9;
    $s$addr$06 = $incdec$ptr;
   }
  }
 }
 return $s$addr$0$lcssa | 0;
}

function __ZNSt3__213__vector_baseINS_6threadENS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $__end_$i$i = 0, $__soon_to_be_end$i$i$04 = 0, $cmp = 0, $cmp$i$i = 0, $cmp$i$i3 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $__end_$i$i = $this + 4 | 0;
 $1 = HEAP32[$__end_$i$i >> 2] | 0;
 $cmp$i$i3 = ($0 | 0) == ($1 | 0);
 if ($cmp$i$i3) {
  $2 = $0;
 } else {
  $__soon_to_be_end$i$i$04 = $1;
  while (1) {
   $incdec$ptr$i$i = $__soon_to_be_end$i$i$04 + -4 | 0;
   $incdec$ptr$i$i$idx$val = HEAP32[$incdec$ptr$i$i >> 2] | 0;
   __ZNSt3__26threadD2Ev($incdec$ptr$i$i$idx$val);
   $cmp$i$i = ($0 | 0) == ($incdec$ptr$i$i | 0);
   if ($cmp$i$i) {
    break;
   } else {
    $__soon_to_be_end$i$i$04 = $incdec$ptr$i$i;
   }
  }
  $$pre = HEAP32[$this >> 2] | 0;
  $2 = $$pre;
 }
 HEAP32[$__end_$i$i >> 2] = $0;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2);
 return;
}

function __ZNSt3__214__split_bufferINS_6threadERNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__begin_$i = 0, $__end_$i$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i1 = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i$idx$val = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__begin_$i = $this + 4 | 0;
 $0 = HEAP32[$__begin_$i >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 $cmp$i$i$i1 = ($0 | 0) == ($1 | 0);
 if (!$cmp$i$i$i1) {
  $2 = $1;
  while (1) {
   $incdec$ptr$i$i$i = $2 + -4 | 0;
   HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
   $incdec$ptr$i$i$i$idx$val = HEAP32[$incdec$ptr$i$i$i >> 2] | 0;
   __ZNSt3__26threadD2Ev($incdec$ptr$i$i$i$idx$val);
   $3 = HEAP32[$__end_$i$i$i >> 2] | 0;
   $cmp$i$i$i = ($0 | 0) == ($3 | 0);
   if ($cmp$i$i$i) {
    break;
   } else {
    $2 = $3;
   }
  }
 }
 $4 = HEAP32[$this >> 2] | 0;
 $tobool = ($4 | 0) == (0 | 0);
 if ($tobool) {
  return;
 }
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4);
 return;
}

function __Z27generateKeyDerivationScalarNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_m($agg$result, $publicKey, $secretKey, $outputIndex) {
 $agg$result = $agg$result | 0;
 $publicKey = $publicKey | 0;
 $secretKey = $secretKey | 0;
 $outputIndex = $outputIndex | 0;
 var $agg$tmp = 0, $agg$tmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $agg$tmp = sp + 12 | 0;
 $agg$tmp1 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $publicKey);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1, $secretKey);
 __ZN4Core12Cryptography27generateKeyDerivationScalarENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_y($agg$result, $agg$tmp, $agg$tmp1, $outputIndex, 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($this) {
 $this = $this | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $__end_$i$i = 0, $__soon_to_be_end$i$i$04 = 0, $cmp = 0, $cmp$i$i = 0, $cmp$i$i3 = 0, $incdec$ptr$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $__end_$i$i = $this + 4 | 0;
 $1 = HEAP32[$__end_$i$i >> 2] | 0;
 $cmp$i$i3 = ($0 | 0) == ($1 | 0);
 if ($cmp$i$i3) {
  $2 = $0;
 } else {
  $__soon_to_be_end$i$i$04 = $1;
  while (1) {
   $incdec$ptr$i$i = $__soon_to_be_end$i$i$04 + -12 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($incdec$ptr$i$i);
   $cmp$i$i = ($0 | 0) == ($incdec$ptr$i$i | 0);
   if ($cmp$i$i) {
    break;
   } else {
    $__soon_to_be_end$i$i$04 = $incdec$ptr$i$i;
   }
  }
  $$pre = HEAP32[$this >> 2] | 0;
  $2 = $$pre;
 }
 HEAP32[$__end_$i$i >> 2] = $0;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2);
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $call = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = $info + 8 | 0;
 $0 = HEAP32[$static_type >> 2] | 0;
 $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, $use_strcmp) | 0;
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info, $dst_ptr, $current_ptr, $path_below);
 } else {
  $__base_type = $this + 8 | 0;
  $1 = HEAP32[$__base_type >> 2] | 0;
  $vtable = HEAP32[$1 >> 2] | 0;
  $vfn = $vtable + 20 | 0;
  $2 = HEAP32[$vfn >> 2] | 0;
  FUNCTION_TABLE_viiiiii[$2 & 127]($1, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
 }
 return;
}

function __ZN4Core12Cryptography18derivationToScalarENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy($agg$result, $derivation, $0, $1) {
 $agg$result = $agg$result | 0;
 $derivation = $derivation | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $derivationScalar = 0, $l_derivation = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $l_derivation = sp + 32 | 0;
 $derivationScalar = sp;
 __ZN6Crypto13KeyDerivationC2Ev($l_derivation);
 __ZN6Common10podFromHexIN6Crypto13KeyDerivationEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($derivation, $l_derivation);
 __ZN6Crypto19EllipticCurveScalarC2Ev($derivationScalar);
 __ZN6Crypto20derivation_to_scalarERKNS_13KeyDerivationEmRNS_19EllipticCurveScalarE($l_derivation, $0, $derivationScalar);
 __ZN6Common8podToHexIN6Crypto19EllipticCurveScalarEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $derivationScalar);
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__begin_$i = 0, $__end_$i$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i1 = 0, $incdec$ptr$i$i$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__begin_$i = $this + 4 | 0;
 $0 = HEAP32[$__begin_$i >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 $cmp$i$i$i1 = ($0 | 0) == ($1 | 0);
 if (!$cmp$i$i$i1) {
  $2 = $1;
  while (1) {
   $incdec$ptr$i$i$i = $2 + -12 | 0;
   HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($incdec$ptr$i$i$i);
   $3 = HEAP32[$__end_$i$i$i >> 2] | 0;
   $cmp$i$i$i = ($0 | 0) == ($3 | 0);
   if ($cmp$i$i$i) {
    break;
   } else {
    $2 = $3;
   }
  }
 }
 $4 = HEAP32[$this >> 2] | 0;
 $tobool = ($4 | 0) == (0 | 0);
 if ($tobool) {
  return;
 }
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4);
 return;
}

function __ZN4Core12Cryptography19hashToEllipticCurveENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $hash) {
 $agg$result = $agg$result | 0;
 $hash = $hash | 0;
 var $l_ellipticCurve = 0, $l_hash = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $l_hash = sp + 32 | 0;
 $l_ellipticCurve = sp;
 dest = $l_hash;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN6Crypto4HashC2Ev($l_hash);
 __ZN6Common10podFromHexIN6Crypto4HashEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($hash, $l_hash);
 __ZN6Crypto9PublicKeyC2Ev($l_ellipticCurve);
 __ZN6Crypto15hash_data_to_ecEPKhmRNS_9PublicKeyE($l_hash, $l_ellipticCurve);
 __ZN6Common8podToHexIN6Crypto9PublicKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $l_ellipticCurve);
 STACKTOP = sp;
 return;
}

function _Transform($ctx, $input, $msglen) {
 $ctx = $ctx | 0;
 $input = $input | 0;
 $msglen = $msglen | 0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $block_counter1 = 0, $block_counter2 = 0, $cmp = 0, $cmp2 = 0, $cmp6 = 0, $inc = 0, $inc3 = 0, $input$addr$07 = 0, $msglen$addr$08 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp6 = ($msglen | 0) > 63;
 if (!$cmp6) {
  return;
 }
 $block_counter1 = $ctx + 64 | 0;
 $block_counter2 = $ctx + 68 | 0;
 $input$addr$07 = $input;
 $msglen$addr$08 = $msglen;
 while (1) {
  _F512($ctx, $input$addr$07);
  $0 = HEAP32[$block_counter1 >> 2] | 0;
  $inc = $0 + 1 | 0;
  HEAP32[$block_counter1 >> 2] = $inc;
  $cmp2 = ($inc | 0) == 0;
  if ($cmp2) {
   $1 = HEAP32[$block_counter2 >> 2] | 0;
   $inc3 = $1 + 1 | 0;
   HEAP32[$block_counter2 >> 2] = $inc3;
  }
  $sub = $msglen$addr$08 + -64 | 0;
  $add$ptr = $input$addr$07 + 64 | 0;
  $cmp = ($msglen$addr$08 | 0) > 127;
  if ($cmp) {
   $input$addr$07 = $add$ptr;
   $msglen$addr$08 = $sub;
  } else {
   break;
  }
 }
 return;
}

function __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEEC2ERKS5_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_$i = 0, $__end_$i16 = 0, $__value_$i$i$i = 0, $cmp = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0;
 $__end_$i = $this + 4 | 0;
 HEAP32[$__end_$i >> 2] = 0;
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = 0;
 $__end_$i16 = $__x + 4 | 0;
 $0 = HEAP32[$__end_$i16 >> 2] | 0;
 $1 = HEAP32[$__x >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $cmp = ($sub$ptr$sub$i | 0) == 0;
 if ($cmp) {
  return;
 }
 $sub$ptr$div$i = $sub$ptr$sub$i >> 6;
 __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE11__vallocateEm($this, $sub$ptr$div$i);
 $2 = HEAP32[$__x >> 2] | 0;
 $3 = HEAP32[$__end_$i16 >> 2] | 0;
 __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m($this, $2, $3);
 return;
}

function __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEEC2ERKS5_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_$i = 0, $__end_$i16 = 0, $__value_$i$i$i = 0, $cmp = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0;
 $__end_$i = $this + 4 | 0;
 HEAP32[$__end_$i >> 2] = 0;
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = 0;
 $__end_$i16 = $__x + 4 | 0;
 $0 = HEAP32[$__end_$i16 >> 2] | 0;
 $1 = HEAP32[$__x >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $cmp = ($sub$ptr$sub$i | 0) == 0;
 if ($cmp) {
  return;
 }
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE11__vallocateEm($this, $sub$ptr$div$i);
 $2 = HEAP32[$__x >> 2] | 0;
 $3 = HEAP32[$__end_$i16 >> 2] | 0;
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m($this, $2, $3);
 return;
}

function _memcmp($vl, $vr, $n) {
 $vl = $vl | 0;
 $vr = $vr | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $cmp = 0, $cond = 0, $conv5 = 0, $conv6 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr3 = 0, $l$012 = 0, $n$addr$011 = 0, $r$013 = 0, $sub = 0, $tobool = 0, $tobool10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool10 = ($n | 0) == 0;
 L1 : do {
  if ($tobool10) {
   $cond = 0;
  } else {
   $l$012 = $vl;
   $n$addr$011 = $n;
   $r$013 = $vr;
   while (1) {
    $0 = HEAP8[$l$012 >> 0] | 0;
    $1 = HEAP8[$r$013 >> 0] | 0;
    $cmp = $0 << 24 >> 24 == $1 << 24 >> 24;
    if (!$cmp) {
     break;
    }
    $dec = $n$addr$011 + -1 | 0;
    $incdec$ptr = $l$012 + 1 | 0;
    $incdec$ptr3 = $r$013 + 1 | 0;
    $tobool = ($dec | 0) == 0;
    if ($tobool) {
     $cond = 0;
     break L1;
    } else {
     $l$012 = $incdec$ptr;
     $n$addr$011 = $dec;
     $r$013 = $incdec$ptr3;
    }
   }
   $conv5 = $0 & 255;
   $conv6 = $1 & 255;
   $sub = $conv5 - $conv6 | 0;
   $cond = $sub;
  }
 } while (0);
 return $cond | 0;
}

function __ZN6Crypto8Multisig17restore_key_imageERKNS_9PublicKeyERKNS_13KeyDerivationEmRKNSt3__26vectorINS_8KeyImageENS7_9allocatorIS9_EEEE($agg$result, $publicEphemeral, $derivation, $output_index, $partialKeyImages) {
 $agg$result = $agg$result | 0;
 $publicEphemeral = $publicEphemeral | 0;
 $derivation = $derivation | 0;
 $output_index = $output_index | 0;
 $partialKeyImages = $partialKeyImages | 0;
 var $derivationScalar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $derivationScalar = sp;
 __ZN6Crypto19EllipticCurveScalarC2Ev($derivationScalar);
 __ZN6Crypto20derivation_to_scalarERKNS_13KeyDerivationEmRNS_19EllipticCurveScalarE($derivation, $output_index, $derivationScalar);
 __ZN6Crypto8Multisig17restore_key_imageERKNS_9PublicKeyERKNS_19EllipticCurveScalarERKNSt3__26vectorINS_8KeyImageENS7_9allocatorIS9_EEEE($agg$result, $publicEphemeral, $derivationScalar, $partialKeyImages);
 STACKTOP = sp;
 return;
}

function __ZN4Core12Cryptography41generatePrivateViewKeyFromPrivateSpendKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $privateSpendKey) {
 $agg$result = $agg$result | 0;
 $privateSpendKey = $privateSpendKey | 0;
 var $l_privateSpendKey = 0, $privateViewKey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $l_privateSpendKey = sp + 32 | 0;
 $privateViewKey = sp;
 __ZN6Crypto9SecretKeyC2Ev($l_privateSpendKey);
 __ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($privateSpendKey, $l_privateSpendKey);
 __ZN6Crypto9SecretKeyC2Ev($privateViewKey);
 __ZN6Crypto10crypto_ops21generateViewFromSpendERKNS_9SecretKeyERS1_($l_privateSpendKey, $privateViewKey);
 __ZN6Common8podToHexIN6Crypto9SecretKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $privateViewKey);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal7InvokerI4KeysJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEmEE6invokeEPFS2_S9_mEPNS0_11BindingTypeIS9_vEUt_Em($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $agg$tmp = 0, $call = 0, $call6 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $ref$tmp = sp + 16 | 0;
 $agg$tmp = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 $call = __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($args1) | 0;
 FUNCTION_TABLE_viii[$fn & 255]($ref$tmp, $agg$tmp, $call);
 $call6 = __ZN10emscripten8internal18GenericBindingTypeI4KeysE10toWireTypeEOS2_($ref$tmp) | 0;
 __ZN4KeysD2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call6 | 0;
}

function __ZN6Crypto10crypto_ops17derive_public_keyERKNS_19EllipticCurveScalarERKNS_9PublicKeyERS4_($derivationScalar, $base, $derived_key) {
 $derivationScalar = $derivationScalar | 0;
 $base = $base | 0;
 $derived_key = $derived_key | 0;
 var $call = 0, $cmp = 0, $point1 = 0, $point2 = 0, $point3 = 0, $point4 = 0, $point5 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(768 | 0);
 $point1 = sp + 600 | 0;
 $point2 = sp + 440 | 0;
 $point3 = sp + 280 | 0;
 $point4 = sp + 120 | 0;
 $point5 = sp;
 $call = _ge_frombytes_vartime($point1, $base) | 0;
 $cmp = ($call | 0) == 0;
 if (!$cmp) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 _ge_scalarmult_base($point2, $derivationScalar);
 _ge_p3_to_cached($point3, $point2);
 _ge_add($point4, $point1, $point3);
 _ge_p1p1_to_p2($point5, $point4);
 _ge_tobytes($derived_key, $point5);
 $retval$0 = 1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISL_EEEEEEDpOT_($agg$result, $this, $__args) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__args = $__args | 0;
 var $0 = 0, $1 = 0, $__pair1_$i = 0, $call$i$i$i = 0, $ref$tmp$sroa$2$0$$sroa_idx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $__pair1_$i = $this + 4 | 0;
 $call$i$i$i = __Znwm(48) | 0;
 HEAP32[$agg$result >> 2] = $call$i$i$i;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = $__pair1_$i;
 $ref$tmp$sroa$2$0$$sroa_idx = $agg$result + 8 | 0;
 $1 = $call$i$i$i + 13 | 0;
 dest = $1;
 src = $__args;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$ref$tmp$sroa$2$0$$sroa_idx >> 0] = 1;
 return;
}

function __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISL_EEEEEEDpOT_($agg$result, $this, $__args) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__args = $__args | 0;
 var $0 = 0, $1 = 0, $__pair1_$i = 0, $call$i$i$i = 0, $ref$tmp$sroa$2$0$$sroa_idx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $__pair1_$i = $this + 4 | 0;
 $call$i$i$i = __Znwm(48) | 0;
 HEAP32[$agg$result >> 2] = $call$i$i$i;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = $__pair1_$i;
 $ref$tmp$sroa$2$0$$sroa_idx = $agg$result + 8 | 0;
 $1 = $call$i$i$i + 13 | 0;
 dest = $1;
 src = $__args;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$ref$tmp$sroa$2$0$$sroa_idx >> 0] = 1;
 return;
}

function __ZN6Crypto10crypto_ops23generate_key_derivationERKNS_9PublicKeyERKNS_9SecretKeyERNS_13KeyDerivationE($key1, $key2, $derivation) {
 $key1 = $key1 | 0;
 $key2 = $key2 | 0;
 $derivation = $derivation | 0;
 var $call = 0, $call1 = 0, $cmp = 0, $cmp2 = 0, $point = 0, $point2 = 0, $point3 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(448 | 0);
 $point = sp + 280 | 0;
 $point2 = sp + 160 | 0;
 $point3 = sp;
 $call = _sc_check($key2) | 0;
 $cmp = ($call | 0) == 0;
 if (!$cmp) {
  ___assert_fail(45264 | 0, 45326 | 0, 119, 45378 | 0);
 }
 $call1 = _ge_frombytes_vartime($point, $key1) | 0;
 $cmp2 = ($call1 | 0) == 0;
 if (!$cmp2) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 _ge_scalarmult($point2, $key2, $point);
 _ge_mul8($point3, $point2);
 _ge_p1p1_to_p2($point2, $point3);
 _ge_tobytes($derivation, $point2);
 $retval$0 = 1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISL_EEEEEEDpOT_($agg$result, $this, $__args) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__args = $__args | 0;
 var $0 = 0, $1 = 0, $__pair1_$i = 0, $call$i$i$i = 0, $ref$tmp$sroa$2$0$$sroa_idx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $__pair1_$i = $this + 4 | 0;
 $call$i$i$i = __Znwm(48) | 0;
 HEAP32[$agg$result >> 2] = $call$i$i$i;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = $__pair1_$i;
 $ref$tmp$sroa$2$0$$sroa_idx = $agg$result + 8 | 0;
 $1 = $call$i$i$i + 13 | 0;
 dest = $1;
 src = $__args;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$ref$tmp$sroa$2$0$$sroa_idx >> 0] = 1;
 return;
}

function __ZN5Tools12write_varintIRPcmEENSt3__29enable_ifIXaasr3std11is_integralIT0_EE5valuesr3std11is_unsignedIS5_EE5valueEvE4typeEOT_S5_($dest, $i) {
 $dest = $dest | 0;
 $i = $i | 0;
 var $0 = 0, $1 = 0, $cmp = 0, $cmp4 = 0, $conv = 0, $conv2 = 0, $i$addr$0$lcssa = 0, $i$addr$05 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $or = 0, $shr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp4 = $i >>> 0 > 127;
 if ($cmp4) {
  $i$addr$05 = $i;
  while (1) {
   $or = $i$addr$05 | 128;
   $conv2 = $or & 255;
   $0 = HEAP32[$dest >> 2] | 0;
   $incdec$ptr = $0 + 1 | 0;
   HEAP32[$dest >> 2] = $incdec$ptr;
   HEAP8[$0 >> 0] = $conv2;
   $shr = $i$addr$05 >>> 7;
   $cmp = $i$addr$05 >>> 0 > 16383;
   if ($cmp) {
    $i$addr$05 = $shr;
   } else {
    $i$addr$0$lcssa = $shr;
    break;
   }
  }
 } else {
  $i$addr$0$lcssa = $i;
 }
 $conv = $i$addr$0$lcssa & 255;
 $1 = HEAP32[$dest >> 2] | 0;
 $incdec$ptr4 = $1 + 1 | 0;
 HEAP32[$dest >> 2] = $incdec$ptr4;
 HEAP8[$1 >> 0] = $conv;
 return;
}

function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_EE6invokeEPFS8_S8_EPNS0_11BindingTypeIS8_vEUt_E($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $call = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $ref$tmp = sp + 12 | 0;
 $agg$tmp = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 FUNCTION_TABLE_vii[$fn & 255]($ref$tmp, $agg$tmp);
 $call = __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE10toWireTypeERKS8_($ref$tmp) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call | 0;
}

function _getint($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add = 0, $call = 0, $call5 = 0, $conv = 0, $conv1 = 0, $conv4 = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0, $mul = 0, $sub = 0, $tobool = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s >> 2] | 0;
 $1 = HEAP8[$0 >> 0] | 0;
 $conv4 = $1 << 24 >> 24;
 $call5 = _isdigit($conv4) | 0;
 $tobool6 = ($call5 | 0) == 0;
 if ($tobool6) {
  $i$0$lcssa = 0;
 } else {
  $2 = $1;
  $3 = $0;
  $i$07 = 0;
  while (1) {
   $mul = $i$07 * 10 | 0;
   $conv1 = $2 << 24 >> 24;
   $sub = $mul + -48 | 0;
   $add = $sub + $conv1 | 0;
   $incdec$ptr = $3 + 1 | 0;
   HEAP32[$s >> 2] = $incdec$ptr;
   $4 = HEAP8[$incdec$ptr >> 0] | 0;
   $conv = $4 << 24 >> 24;
   $call = _isdigit($conv) | 0;
   $tobool = ($call | 0) == 0;
   if ($tobool) {
    $i$0$lcssa = $add;
    break;
   } else {
    $2 = $4;
    $3 = $incdec$ptr;
    $i$07 = $add;
   }
  }
 }
 return $i$0$lcssa | 0;
}

function _xor_block($dst, $src) {
 $dst = $dst | 0;
 $src = $src | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx2 = 0;
 var $exitcond = 0, $i$04 = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$04 = 0;
 while (1) {
  $arrayidx = $src + ($i$04 << 3) | 0;
  $0 = $arrayidx;
  $1 = $0;
  $2 = HEAP32[$1 >> 2] | 0;
  $3 = $0 + 4 | 0;
  $4 = $3;
  $5 = HEAP32[$4 >> 2] | 0;
  $arrayidx2 = $dst + ($i$04 << 3) | 0;
  $6 = $arrayidx2;
  $7 = $6;
  $8 = HEAP32[$7 >> 2] | 0;
  $9 = $6 + 4 | 0;
  $10 = $9;
  $11 = HEAP32[$10 >> 2] | 0;
  $12 = $8 ^ $2;
  $13 = $11 ^ $5;
  $14 = $arrayidx2;
  $15 = $14;
  HEAP32[$15 >> 2] = $12;
  $16 = $14 + 4 | 0;
  $17 = $16;
  HEAP32[$17 >> 2] = $13;
  $inc = $i$04 + 1 | 0;
  $exitcond = ($inc | 0) == 128;
  if ($exitcond) {
   break;
  } else {
   $i$04 = $inc;
  }
 }
 return;
}

function __ZN6Crypto37generate_deterministic_subwallet_keysENS_9SecretKeyEyRS0_RNS_9PublicKeyE($basePrivate, $0, $1, $subwalletPrivate, $subwalletPublic) {
 $basePrivate = $basePrivate | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $subwalletPrivate = $subwalletPrivate | 0;
 $subwalletPublic = $subwalletPublic | 0;
 var $2 = 0, $basePrivate$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $basePrivate$byval_copy = sp;
 dest = $basePrivate$byval_copy;
 src = $basePrivate;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $2 = __ZN6Crypto10crypto_ops37generate_deterministic_subwallet_keysENS_9SecretKeyEyRS1_RNS_9PublicKeyE($basePrivate$byval_copy, $0, $1, $subwalletPrivate, $subwalletPublic) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN10emscripten12value_objectI18PreparedSignaturesE5fieldIS1_NSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEERS2_PKcMT_T0_() {
 var $call4 = 0, $call7 = 0, $field$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $field$addr = sp;
 HEAP32[$field$addr >> 2] = 0;
 $call4 = __ZN10emscripten8internal10getContextIM18PreparedSignaturesNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEPT_RKSE_($field$addr) | 0;
 $call7 = __ZN10emscripten8internal10getContextIM18PreparedSignaturesNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEPT_RKSE_($field$addr) | 0;
 __embind_register_value_object_field(42088 | 0, 44607 | 0, 42064 | 0, 44723 | 0, 137 | 0, $call4 | 0, 42064 | 0, 45219 | 0, 138 | 0, $call7 | 0);
 STACKTOP = sp;
 return;
}

function _print_tag($out, $outlen) {
 $out = $out | 0;
 $outlen = $outlen | 0;
 var $0 = 0, $arrayidx = 0, $cmp = 0, $cmp14 = 0, $conv = 0, $exitcond = 0, $i$05 = 0, $inc = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $cmp = ($out | 0) == (0 | 0);
 if ($cmp) {
  STACKTOP = sp;
  return;
 }
 _printf(46653, $vararg_buffer);
 $cmp14 = ($outlen | 0) == 0;
 if (!$cmp14) {
  $i$05 = 0;
  while (1) {
   $arrayidx = $out + $i$05 | 0;
   $0 = HEAP8[$arrayidx >> 0] | 0;
   $conv = $0 & 255;
   HEAP32[$vararg_buffer1 >> 2] = $conv;
   _printf(46579, $vararg_buffer1);
   $inc = $i$05 + 1 | 0;
   $exitcond = ($inc | 0) == ($outlen | 0);
   if ($exitcond) {
    break;
   } else {
    $i$05 = $inc;
   }
  }
 }
 _putchar();
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal19RegisterClassMethodIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvmRKS9_EE6invokeISB_JEEEvPKcSF_($$01, $$12) {
 $$01 = $$01 | 0;
 $$12 = $$12 | 0;
 var $call4 = 0, $memberFunction$addr = 0, $memberFunction$fca$1$gep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $memberFunction$addr = sp;
 HEAP32[$memberFunction$addr >> 2] = $$01;
 $memberFunction$fca$1$gep = $memberFunction$addr + 4 | 0;
 HEAP32[$memberFunction$fca$1$gep >> 2] = $$12;
 $call4 = __ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvmRKS9_EEEPT_RKSG_($memberFunction$addr) | 0;
 __embind_register_class_function(42064 | 0, 45019 | 0, 4, 336 | 0, 45224 | 0, 144 | 0, $call4 | 0, 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal19RegisterClassMethodIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EE6invokeISB_JEEEvPKcSF_($$01, $$12) {
 $$01 = $$01 | 0;
 $$12 = $$12 | 0;
 var $call4 = 0, $memberFunction$addr = 0, $memberFunction$fca$1$gep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $memberFunction$addr = sp;
 HEAP32[$memberFunction$addr >> 2] = $$01;
 $memberFunction$fca$1$gep = $memberFunction$addr + 4 | 0;
 HEAP32[$memberFunction$fca$1$gep >> 2] = $$12;
 $call4 = __ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EEEPT_RKSG_($memberFunction$addr) | 0;
 __embind_register_class_function(42064 | 0, 45009 | 0, 3, 43032 | 0, 45219 | 0, 143 | 0, $call4 | 0, 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getERKSB_m($agg$result, $v, $index) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 $index = $index | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $arrayidx$i = 0, $cmp = 0, $sub$ptr$div$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_$i = $v + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$v >> 2] | 0;
 $sub$ptr$rhs$cast$i = $1;
 $sub$ptr$sub$i = $0 - $sub$ptr$rhs$cast$i | 0;
 $sub$ptr$div$i = ($sub$ptr$sub$i | 0) / 12 & -1;
 $cmp = $sub$ptr$div$i >>> 0 > $index >>> 0;
 if ($cmp) {
  $arrayidx$i = $1 + ($index * 12 | 0) | 0;
  __ZN10emscripten3valC2IRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEOT_($agg$result, $arrayidx$i);
  return;
 } else {
  __ZN10emscripten3val9undefinedEv($agg$result);
  return;
 }
}

function __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $1 = 0, $__end_ = 0, $add$ptr$i = 0, $cmp$i = 0, $sub$ptr$div$i5 = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = $this + 4 | 0;
 $sub$ptr$lhs$cast$i = $__last;
 $sub$ptr$rhs$cast$i = $__first;
 $sub$ptr$sub$i = $sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i | 0;
 $cmp$i = ($sub$ptr$sub$i | 0) > 0;
 if (!$cmp$i) {
  return;
 }
 $sub$ptr$div$i5 = $sub$ptr$sub$i >>> 6;
 $0 = HEAP32[$__end_ >> 2] | 0;
 _memcpy($0 | 0, $__first | 0, $sub$ptr$sub$i | 0) | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 $add$ptr$i = $1 + ($sub$ptr$div$i5 << 6) | 0;
 HEAP32[$__end_ >> 2] = $add$ptr$i;
 return;
}

function __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $1 = 0, $__end_ = 0, $add$ptr$i = 0, $cmp$i = 0, $sub$ptr$div$i5 = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = $this + 4 | 0;
 $sub$ptr$lhs$cast$i = $__last;
 $sub$ptr$rhs$cast$i = $__first;
 $sub$ptr$sub$i = $sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i | 0;
 $cmp$i = ($sub$ptr$sub$i | 0) > 0;
 if (!$cmp$i) {
  return;
 }
 $sub$ptr$div$i5 = $sub$ptr$sub$i >>> 5;
 $0 = HEAP32[$__end_ >> 2] | 0;
 _memcpy($0 | 0, $__first | 0, $sub$ptr$sub$i | 0) | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 $add$ptr$i = $1 + ($sub$ptr$div$i5 << 5) | 0;
 HEAP32[$__end_ >> 2] = $add$ptr$i;
 return;
}

function __ZN10emscripten8internal19RegisterClassMethodIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFmvEE6invokeISB_JEEEvPKcSD_($$01, $$12) {
 $$01 = $$01 | 0;
 $$12 = $$12 | 0;
 var $call4 = 0, $memberFunction$addr = 0, $memberFunction$fca$1$gep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $memberFunction$addr = sp;
 HEAP32[$memberFunction$addr >> 2] = $$01;
 $memberFunction$fca$1$gep = $memberFunction$addr + 4 | 0;
 HEAP32[$memberFunction$fca$1$gep >> 2] = $$12;
 $call4 = __ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFmvEEEPT_RKSE_($memberFunction$addr) | 0;
 __embind_register_class_function(42064 | 0, 45026 | 0, 2, 43044 | 0, 44723 | 0, 145 | 0, $call4 | 0, 0);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $call = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = $info + 8 | 0;
 $0 = HEAP32[$static_type >> 2] | 0;
 $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, 0) | 0;
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info, $adjustedPtr, $path_below);
 } else {
  $__base_type = $this + 8 | 0;
  $1 = HEAP32[$__base_type >> 2] | 0;
  $vtable = HEAP32[$1 >> 2] | 0;
  $vfn = $vtable + 28 | 0;
  $2 = HEAP32[$vfn >> 2] | 0;
  FUNCTION_TABLE_viiii[$2 & 255]($1, $info, $adjustedPtr, $path_below);
 }
 return;
}

function __ZN10emscripten12value_objectI4KeysE5fieldIS1_NSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERS2_PKcMT_T0_($fieldName, $field) {
 $fieldName = $fieldName | 0;
 $field = $field | 0;
 var $call4 = 0, $call7 = 0, $field$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $field$addr = sp;
 HEAP32[$field$addr >> 2] = $field;
 $call4 = __ZN10emscripten8internal10getContextIM4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEPT_RKSB_($field$addr) | 0;
 $call7 = __ZN10emscripten8internal10getContextIM4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEPT_RKSB_($field$addr) | 0;
 __embind_register_value_object_field(42096 | 0, $fieldName | 0, 42008 | 0, 44723 | 0, 133 | 0, $call4 | 0, 42008 | 0, 45219 | 0, 134 | 0, $call7 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEEC2ERKS3_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_$i = 0, $__end_$i16 = 0, $__value_$i$i$i = 0, $cmp = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0;
 $__end_$i = $this + 4 | 0;
 HEAP32[$__end_$i >> 2] = 0;
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = 0;
 $__end_$i16 = $__x + 4 | 0;
 $0 = HEAP32[$__end_$i16 >> 2] | 0;
 $1 = HEAP32[$__x >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $cmp = ($sub$ptr$sub$i | 0) == 0;
 if ($cmp) {
  return;
 }
 __ZNSt3__26vectorIhNS_9allocatorIhEEE11__vallocateEm($this, $sub$ptr$sub$i);
 $2 = HEAP32[$__x >> 2] | 0;
 $3 = HEAP32[$__end_$i16 >> 2] | 0;
 __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m($this, $2, $3);
 return;
}

function __ZNSt3__213random_deviceC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($__token) {
 $__token = $__token | 0;
 var $0 = 0, $1 = 0, $__size_$i$i$i$i = 0, $call2 = 0, $cmp = 0, $cond$i$i$i = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $ref$tmp = sp;
 $__size_$i$i$i$i = $__token + 11 | 0;
 $0 = HEAP8[$__size_$i$i$i$i >> 0] | 0;
 $tobool$i$i$i$i = $0 << 24 >> 24 < 0;
 $1 = HEAP32[$__token >> 2] | 0;
 $cond$i$i$i = $tobool$i$i$i$i ? $1 : $__token;
 $call2 = _open($cond$i$i$i) | 0;
 HEAP32[144121] = $call2;
 $cmp = ($call2 | 0) < 0;
 if ($cmp) {
  __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($ref$tmp, $__token);
  __ZNSt3__220__throw_system_errorEiPKc();
 } else {
  STACKTOP = sp;
  return;
 }
}

function _load_4($in) {
 $in = $in | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0;
 var $arrayidx3 = 0, $arrayidx7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$in >> 0] | 0;
 $1 = $0 & 255;
 $arrayidx1 = $in + 1 | 0;
 $2 = HEAP8[$arrayidx1 >> 0] | 0;
 $3 = $2 & 255;
 $4 = _bitshift64Shl($3 | 0, 0, 8) | 0;
 $5 = getTempRet0() | 0;
 $6 = $4 | $1;
 $arrayidx3 = $in + 2 | 0;
 $7 = HEAP8[$arrayidx3 >> 0] | 0;
 $8 = $7 & 255;
 $9 = _bitshift64Shl($8 | 0, 0, 16) | 0;
 $10 = getTempRet0() | 0;
 $11 = $6 | $9;
 $12 = $5 | $10;
 $arrayidx7 = $in + 3 | 0;
 $13 = HEAP8[$arrayidx7 >> 0] | 0;
 $14 = $13 & 255;
 $15 = _bitshift64Shl($14 | 0, 0, 24) | 0;
 $16 = getTempRet0() | 0;
 $17 = $11 | $15;
 $18 = $12 | $16;
 setTempRet0($18 | 0);
 return $17 | 0;
}

function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJRKNS2_6vectorIS8_NS6_IS8_EEEEEE6invokeEPFS8_SD_EPSB_($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 var $call = 0, $call1 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $ref$tmp = sp;
 $call = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($args) | 0;
 FUNCTION_TABLE_vii[$fn & 255]($ref$tmp, $call);
 $call1 = __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE10toWireTypeERKS8_($ref$tmp) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 STACKTOP = sp;
 return $call1 | 0;
}

function __ZNSt3__214__split_bufferIN6Crypto9SignatureERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__begin_$i = 0, $__end_$i$i$i = 0, $cmp$i$i$i1 = 0, $scevgep = 0, $scevgep2 = 0, $scevgep3 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__begin_$i = $this + 4 | 0;
 $0 = HEAP32[$__begin_$i >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 $cmp$i$i$i1 = ($0 | 0) == ($1 | 0);
 if (!$cmp$i$i$i1) {
  $2 = $0;
  $3 = 0 - $2 | 0;
  $scevgep = ($1 + -64 | 0) + $3 | 0;
  $scevgep2 = $scevgep;
  $4 = $scevgep2 >>> 6;
  $5 = $4 ^ -1;
  $scevgep3 = $1 + ($5 << 6) | 0;
  HEAP32[$__end_$i$i$i >> 2] = $scevgep3;
 }
 $6 = HEAP32[$this >> 2] | 0;
 $tobool = ($6 | 0) == (0 | 0);
 if ($tobool) {
  return;
 }
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($6);
 return;
}

function __ZNSt3__214__split_bufferIN6Crypto9SecretKeyERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__begin_$i = 0, $__end_$i$i$i = 0, $cmp$i$i$i1 = 0, $scevgep = 0, $scevgep2 = 0, $scevgep3 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__begin_$i = $this + 4 | 0;
 $0 = HEAP32[$__begin_$i >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 $cmp$i$i$i1 = ($0 | 0) == ($1 | 0);
 if (!$cmp$i$i$i1) {
  $2 = $0;
  $3 = 0 - $2 | 0;
  $scevgep = ($1 + -32 | 0) + $3 | 0;
  $scevgep2 = $scevgep;
  $4 = $scevgep2 >>> 5;
  $5 = $4 ^ -1;
  $scevgep3 = $1 + ($5 << 5) | 0;
  HEAP32[$__end_$i$i$i >> 2] = $scevgep3;
 }
 $6 = HEAP32[$this >> 2] | 0;
 $tobool = ($6 | 0) == (0 | 0);
 if ($tobool) {
  return;
 }
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($6);
 return;
}

function __ZNSt3__214__split_bufferIN6Crypto9PublicKeyERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__begin_$i = 0, $__end_$i$i$i = 0, $cmp$i$i$i1 = 0, $scevgep = 0, $scevgep2 = 0, $scevgep3 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__begin_$i = $this + 4 | 0;
 $0 = HEAP32[$__begin_$i >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 $cmp$i$i$i1 = ($0 | 0) == ($1 | 0);
 if (!$cmp$i$i$i1) {
  $2 = $0;
  $3 = 0 - $2 | 0;
  $scevgep = ($1 + -32 | 0) + $3 | 0;
  $scevgep2 = $scevgep;
  $4 = $scevgep2 >>> 5;
  $5 = $4 ^ -1;
  $scevgep3 = $1 + ($5 << 5) | 0;
  HEAP32[$__end_$i$i$i >> 2] = $scevgep3;
 }
 $6 = HEAP32[$this >> 2] | 0;
 $tobool = ($6 | 0) == (0 | 0);
 if ($tobool) {
  return;
 }
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($6);
 return;
}

function __ZNSt3__214__split_bufferIN6Crypto8KeyImageERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__begin_$i = 0, $__end_$i$i$i = 0, $cmp$i$i$i1 = 0, $scevgep = 0, $scevgep2 = 0, $scevgep3 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__begin_$i = $this + 4 | 0;
 $0 = HEAP32[$__begin_$i >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 $cmp$i$i$i1 = ($0 | 0) == ($1 | 0);
 if (!$cmp$i$i$i1) {
  $2 = $0;
  $3 = 0 - $2 | 0;
  $scevgep = ($1 + -32 | 0) + $3 | 0;
  $scevgep2 = $scevgep;
  $4 = $scevgep2 >>> 5;
  $5 = $4 ^ -1;
  $scevgep3 = $1 + ($5 << 5) | 0;
  HEAP32[$__end_$i$i$i >> 2] = $scevgep3;
 }
 $6 = HEAP32[$this >> 2] | 0;
 $tobool = ($6 | 0) == (0 | 0);
 if ($tobool) {
  return;
 }
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($6);
 return;
}

function __ZNSt3__214__split_bufferIN6Crypto4HashERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__begin_$i = 0, $__end_$i$i$i = 0, $cmp$i$i$i1 = 0, $scevgep = 0, $scevgep2 = 0, $scevgep3 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__begin_$i = $this + 4 | 0;
 $0 = HEAP32[$__begin_$i >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 $cmp$i$i$i1 = ($0 | 0) == ($1 | 0);
 if (!$cmp$i$i$i1) {
  $2 = $0;
  $3 = 0 - $2 | 0;
  $scevgep = ($1 + -32 | 0) + $3 | 0;
  $scevgep2 = $scevgep;
  $4 = $scevgep2 >>> 5;
  $5 = $4 ^ -1;
  $scevgep3 = $1 + ($5 << 5) | 0;
  HEAP32[$__end_$i$i$i >> 2] = $scevgep3;
 }
 $6 = HEAP32[$this >> 2] | 0;
 $tobool = ($6 | 0) == (0 | 0);
 if ($tobool) {
  return;
 }
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($6);
 return;
}

function __ZN10emscripten12value_objectI18PreparedSignaturesE5fieldIS1_NSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERS2_PKcMT_T0_() {
 var $call4 = 0, $call7 = 0, $field$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $field$addr = sp;
 HEAP32[$field$addr >> 2] = 12;
 $call4 = __ZN10emscripten8internal10getContextIM18PreparedSignaturesNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEPT_RKSB_($field$addr) | 0;
 $call7 = __ZN10emscripten8internal10getContextIM18PreparedSignaturesNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEPT_RKSB_($field$addr) | 0;
 __embind_register_value_object_field(42088 | 0, 44618 | 0, 42008 | 0, 44723 | 0, 139 | 0, $call4 | 0, 42008 | 0, 45219 | 0, 140 | 0, $call7 | 0);
 STACKTOP = sp;
 return;
}

function _fmt_o($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0 | 0) == 0;
 $3 = ($1 | 0) == 0;
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $6 = $0;
  $8 = $1;
  $s$addr$06 = $s;
  while (1) {
   $5 = $6 & 255;
   $7 = $5 & 7;
   $conv = $7 | 48;
   $incdec$ptr = $s$addr$06 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = $conv;
   $9 = _bitshift64Lshr($6 | 0, $8 | 0, 3) | 0;
   $10 = getTempRet0() | 0;
   $11 = ($9 | 0) == 0;
   $12 = ($10 | 0) == 0;
   $13 = $11 & $12;
   if ($13) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $6 = $9;
    $8 = $10;
    $s$addr$06 = $incdec$ptr;
   }
  }
 }
 return $s$addr$0$lcssa | 0;
}

function __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x | 0;
 var $$sink = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__parent_ = 0, $__parent_$i = 0, $__parent_4 = 0, $__right_ = 0, $cmp = 0, $cmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__x >> 2] | 0;
 $__right_ = $0 + 4 | 0;
 $1 = HEAP32[$__right_ >> 2] | 0;
 HEAP32[$__x >> 2] = $1;
 $cmp = ($1 | 0) == (0 | 0);
 if (!$cmp) {
  $__parent_$i = $1 + 8 | 0;
  HEAP32[$__parent_$i >> 2] = $__x;
 }
 $__parent_ = $__x + 8 | 0;
 $2 = HEAP32[$__parent_ >> 2] | 0;
 $__parent_4 = $0 + 8 | 0;
 HEAP32[$__parent_4 >> 2] = $2;
 $3 = HEAP32[$__parent_ >> 2] | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $cmp$i = ($4 | 0) == ($__x | 0);
 $5 = $3 + 4 | 0;
 $$sink = $cmp$i ? $3 : $5;
 HEAP32[$$sink >> 2] = $0;
 HEAP32[$__right_ >> 2] = $__x;
 HEAP32[$__parent_ >> 2] = $0;
 return;
}

function __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x | 0;
 var $$sink = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__parent_ = 0, $__parent_$i = 0, $__parent_4 = 0, $__right_ = 0, $cmp = 0, $cmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__right_ = $__x + 4 | 0;
 $0 = HEAP32[$__right_ >> 2] | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$__right_ >> 2] = $1;
 $cmp = ($1 | 0) == (0 | 0);
 if (!$cmp) {
  $__parent_$i = $1 + 8 | 0;
  HEAP32[$__parent_$i >> 2] = $__x;
 }
 $__parent_ = $__x + 8 | 0;
 $2 = HEAP32[$__parent_ >> 2] | 0;
 $__parent_4 = $0 + 8 | 0;
 HEAP32[$__parent_4 >> 2] = $2;
 $3 = HEAP32[$__parent_ >> 2] | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $cmp$i = ($4 | 0) == ($__x | 0);
 $5 = $3 + 4 | 0;
 $$sink = $cmp$i ? $3 : $5;
 HEAP32[$$sink >> 2] = $0;
 HEAP32[$0 >> 2] = $__x;
 HEAP32[$__parent_ >> 2] = $0;
 return;
}

function __ZN10emscripten8internal7InvokerI4KeysJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeEPFS2_S9_EPNS0_11BindingTypeIS9_vEUt_E($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $call = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $ref$tmp = sp + 16 | 0;
 $agg$tmp = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 FUNCTION_TABLE_vii[$fn & 255]($ref$tmp, $agg$tmp);
 $call = __ZN10emscripten8internal18GenericBindingTypeI4KeysE10toWireTypeEOS2_($ref$tmp) | 0;
 __ZN4KeysD2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE6resizeEm($this, $__sz) {
 $this = $this | 0;
 $__sz = $__sz | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $add$ptr = 0, $cmp = 0, $cmp2 = 0, $sub = 0, $sub$ptr$div$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_$i = $this + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$rhs$cast$i = $1;
 $sub$ptr$sub$i = $0 - $sub$ptr$rhs$cast$i | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 6;
 $cmp = $sub$ptr$div$i >>> 0 < $__sz >>> 0;
 if ($cmp) {
  $sub = $__sz - $sub$ptr$div$i | 0;
  __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE8__appendEm($this, $sub);
  return;
 }
 $cmp2 = $sub$ptr$div$i >>> 0 > $__sz >>> 0;
 if (!$cmp2) {
  return;
 }
 $add$ptr = $1 + ($__sz << 6) | 0;
 HEAP32[$__end_$i >> 2] = $add$ptr;
 return;
}

function __ZN6Crypto26cn_soft_shell_slow_hash_v2EPKvmRNS_4HashEj($data, $length, $hash, $height) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 $height = $height | 0;
 var $add = 0, $add6 = 0, $cmp = 0, $div = 0, $div8 = 0, $mul = 0, $mul2 = 0, $mul5 = 0, $rem = 0, $rem1 = 0, $shl = 0, $shr = 0, $spec$select = 0, $sub = 0, $sub7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rem = $height & 2047;
 $rem1 = $height & 4095;
 $mul = $rem << 1;
 $sub = $rem1 - $mul | 0;
 $cmp = ($sub | 0) < 0;
 $spec$select = $cmp ? $rem : $sub;
 $mul2 = $spec$select * 682 | 0;
 $add = $mul2 + 262144 | 0;
 $div = $add & -128;
 $mul5 = $spec$select * 341 | 0;
 $add6 = $mul5 + 131072 | 0;
 $shr = $div >>> 4;
 $sub7 = $shr + 536870911 | 0;
 $div8 = $sub7 >>> 1;
 $shl = $div8 << 4;
 _cn_slow_hash($data, $length, $hash, 1, 2, $div, $div, $add6, $shl, 0);
 return;
}

function __ZN6Crypto26cn_soft_shell_slow_hash_v1EPKvmRNS_4HashEj($data, $length, $hash, $height) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 $height = $height | 0;
 var $add = 0, $add6 = 0, $cmp = 0, $div = 0, $div8 = 0, $mul = 0, $mul2 = 0, $mul5 = 0, $rem = 0, $rem1 = 0, $shl = 0, $shr = 0, $spec$select = 0, $sub = 0, $sub7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rem = $height & 2047;
 $rem1 = $height & 4095;
 $mul = $rem << 1;
 $sub = $rem1 - $mul | 0;
 $cmp = ($sub | 0) < 0;
 $spec$select = $cmp ? $rem : $sub;
 $mul2 = $spec$select * 682 | 0;
 $add = $mul2 + 262144 | 0;
 $div = $add & -128;
 $mul5 = $spec$select * 341 | 0;
 $add6 = $mul5 + 131072 | 0;
 $shr = $div >>> 4;
 $sub7 = $shr + 536870911 | 0;
 $div8 = $sub7 >>> 1;
 $shl = $div8 << 4;
 _cn_slow_hash($data, $length, $hash, 1, 1, $div, $div, $add6, $shl, 0);
 return;
}

function __ZN6Crypto26cn_soft_shell_slow_hash_v0EPKvmRNS_4HashEj($data, $length, $hash, $height) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 $height = $height | 0;
 var $add = 0, $add6 = 0, $cmp = 0, $div = 0, $div8 = 0, $mul = 0, $mul2 = 0, $mul5 = 0, $rem = 0, $rem1 = 0, $shl = 0, $shr = 0, $spec$select = 0, $sub = 0, $sub7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rem = $height & 2047;
 $rem1 = $height & 4095;
 $mul = $rem << 1;
 $sub = $rem1 - $mul | 0;
 $cmp = ($sub | 0) < 0;
 $spec$select = $cmp ? $rem : $sub;
 $mul2 = $spec$select * 682 | 0;
 $add = $mul2 + 262144 | 0;
 $div = $add & -128;
 $mul5 = $spec$select * 341 | 0;
 $add6 = $mul5 + 131072 | 0;
 $shr = $div >>> 4;
 $sub7 = $shr + 536870911 | 0;
 $div8 = $sub7 >>> 1;
 $shl = $div8 << 4;
 _cn_slow_hash($data, $length, $hash, 1, 0, $div, $div, $add6, $shl, 0);
 return;
}

function __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($__nd) {
 $__nd = $__nd | 0;
 var $0 = 0, $1 = 0, $2 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__nd | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $0 = HEAP32[$__nd >> 2] | 0;
 __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($0);
 $1 = $__nd + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($2);
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($__nd);
 return;
}

function __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($__nd) {
 $__nd = $__nd | 0;
 var $0 = 0, $1 = 0, $2 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__nd | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $0 = HEAP32[$__nd >> 2] | 0;
 __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($0);
 $1 = $__nd + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($2);
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($__nd);
 return;
}

function __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($__nd) {
 $__nd = $__nd | 0;
 var $0 = 0, $1 = 0, $2 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__nd | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $0 = HEAP32[$__nd >> 2] | 0;
 __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($0);
 $1 = $__nd + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($2);
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($__nd);
 return;
}

function __ZN6Crypto10crypto_ops17derive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS4_($derivation, $output_index, $base, $derived_key) {
 $derivation = $derivation | 0;
 $output_index = $output_index | 0;
 $base = $base | 0;
 $derived_key = $derived_key | 0;
 var $call = 0, $derivationScalar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $derivationScalar = sp;
 __ZN6Crypto19EllipticCurveScalarC2Ev($derivationScalar);
 __ZN6Crypto10crypto_ops20derivation_to_scalarERKNS_13KeyDerivationEmRNS_19EllipticCurveScalarE($derivation, $output_index, $derivationScalar);
 $call = __ZN6Crypto10crypto_ops17derive_public_keyERKNS_19EllipticCurveScalarERKNS_9PublicKeyERS4_($derivationScalar, $base, $derived_key) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__size_$i = 0, $__size_$i5 = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0 | 0;
 HEAP32[$this + 4 >> 2] = 0 | 0;
 HEAP32[$this + 8 >> 2] = 0 | 0;
 $__size_$i5 = $__str + 11 | 0;
 $0 = HEAP8[$__size_$i5 >> 0] | 0;
 $tobool$i = $0 << 24 >> 24 < 0;
 if ($tobool$i) {
  $1 = HEAP32[$__str >> 2] | 0;
  $__size_$i = $__str + 4 | 0;
  $2 = HEAP32[$__size_$i >> 2] | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this, $1, $2);
 } else {
  HEAP32[$this >> 2] = HEAP32[$__str >> 2] | 0;
  HEAP32[$this + 4 >> 2] = HEAP32[$__str + 4 >> 2] | 0;
  HEAP32[$this + 8 >> 2] = HEAP32[$__str + 8 >> 2] | 0;
 }
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__size_$i$i$i = 0, $__size_$i3$i = 0, $cmp = 0, $cond$i = 0, $cond$i$i4 = 0, $conv$i$i = 0, $tobool$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($this | 0) == ($__str | 0);
 if (!$cmp) {
  $__size_$i$i$i = $__str + 11 | 0;
  $0 = HEAP8[$__size_$i$i$i >> 0] | 0;
  $tobool$i$i$i = $0 << 24 >> 24 < 0;
  $1 = HEAP32[$__str >> 2] | 0;
  $__size_$i3$i = $__str + 4 | 0;
  $2 = HEAP32[$__size_$i3$i >> 2] | 0;
  $conv$i$i = $0 & 255;
  $cond$i$i4 = $tobool$i$i$i ? $1 : $__str;
  $cond$i = $tobool$i$i$i ? $2 : $conv$i$i;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this, $cond$i$i4, $cond$i) | 0;
 }
 return $this | 0;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $1 = 0, $__end_ = 0, $add$ptr$i = 0, $cmp$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = $this + 4 | 0;
 $sub$ptr$lhs$cast$i = $__last;
 $sub$ptr$rhs$cast$i = $__first;
 $sub$ptr$sub$i = $sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i | 0;
 $cmp$i = ($sub$ptr$sub$i | 0) > 0;
 if (!$cmp$i) {
  return;
 }
 $0 = HEAP32[$__end_ >> 2] | 0;
 _memcpy($0 | 0, $__first | 0, $sub$ptr$sub$i | 0) | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 $add$ptr$i = $1 + $sub$ptr$sub$i | 0;
 HEAP32[$__end_ >> 2] = $add$ptr$i;
 return;
}

function _Skein_512_Init($ctx) {
 $ctx = $ctx | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arraydecay7 = 0, $arrayidx28 = 0, $arrayidx31 = 0, $bCnt33 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 HEAP32[$ctx >> 2] = 256;
 $arraydecay7 = $ctx + 24 | 0;
 dest = $arraydecay7;
 src = 38960;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $arrayidx28 = $ctx + 8 | 0;
 $0 = $arrayidx28;
 $1 = $0;
 HEAP32[$1 >> 2] = 0;
 $2 = $0 + 4 | 0;
 $3 = $2;
 HEAP32[$3 >> 2] = 0;
 $arrayidx31 = $ctx + 16 | 0;
 $4 = $arrayidx31;
 $5 = $4;
 HEAP32[$5 >> 2] = 0;
 $6 = $4 + 4 | 0;
 $7 = $6;
 HEAP32[$7 >> 2] = 1879048192;
 $bCnt33 = $ctx + 4 | 0;
 HEAP32[$bCnt33 >> 2] = 0;
 return;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE9push_backERKS6_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_ = 0, $__value_$i$i$i = 0, $cmp = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = $this + 4 | 0;
 $0 = HEAP32[$__end_ >> 2] | 0;
 $__value_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__value_$i$i$i >> 2] | 0;
 $cmp = ($0 | 0) == ($1 | 0);
 if ($cmp) {
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($this, $__x);
  return;
 } else {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0, $__x);
  $2 = HEAP32[$__end_ >> 2] | 0;
  $incdec$ptr = $2 + 12 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr;
  return;
 }
}

function __ZN6Crypto10crypto_ops17derive_secret_keyERKNS_13KeyDerivationEmRKNS_9SecretKeyERS4_($derivation, $output_index, $base, $derived_key) {
 $derivation = $derivation | 0;
 $output_index = $output_index | 0;
 $base = $base | 0;
 $derived_key = $derived_key | 0;
 var $derivationScalar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $derivationScalar = sp;
 __ZN6Crypto19EllipticCurveScalarC2Ev($derivationScalar);
 __ZN6Crypto10crypto_ops20derivation_to_scalarERKNS_13KeyDerivationEmRNS_19EllipticCurveScalarE($derivation, $output_index, $derivationScalar);
 __ZN6Crypto10crypto_ops17derive_secret_keyERKNS_19EllipticCurveScalarERKNS_9SecretKeyERS4_($derivationScalar, $base, $derived_key);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $__end_ = 0, $__n$addr$0 = 0, $cmp = 0, $dec = 0, $incdec$ptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $__end_ = $this + 4 | 0;
 $$pre = HEAP32[$__end_ >> 2] | 0;
 $0 = $$pre;
 $__n$addr$0 = $__n;
 while (1) {
  dest = $0;
  stop = dest + 32 | 0;
  do {
   HEAP8[dest >> 0] = 0 | 0;
   dest = dest + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  __ZN6Crypto4HashC2Ev($0);
  $1 = HEAP32[$__end_ >> 2] | 0;
  $incdec$ptr = $1 + 32 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr;
  $dec = $__n$addr$0 + -1 | 0;
  $cmp = ($dec | 0) == 0;
  if ($cmp) {
   break;
  } else {
   $0 = $incdec$ptr;
   $__n$addr$0 = $dec;
  }
 }
 return;
}

function __Z20secretKeyToPublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $secretKey) {
 $agg$result = $agg$result | 0;
 $secretKey = $secretKey | 0;
 var $agg$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $agg$tmp = sp;
 HEAP32[$agg$result >> 2] = 0 | 0;
 HEAP32[$agg$result + 4 >> 2] = 0 | 0;
 HEAP32[$agg$result + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $secretKey);
 __ZN4Core12Cryptography20secretKeyToPublicKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERS7_($agg$tmp, $agg$result);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return;
}

function _ge_p3_tobytes($s, $h) {
 $s = $s | 0;
 $h = $h | 0;
 var $0 = 0, $arraydecay1 = 0, $arraydecay6 = 0, $arrayidx = 0, $call = 0, $conv = 0, $conv10 = 0, $recip = 0, $shl = 0, $x = 0, $xor = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144 | 0);
 $recip = sp + 96 | 0;
 $x = sp + 48 | 0;
 $y = sp;
 $arraydecay1 = $h + 80 | 0;
 _fe_invert($recip, $arraydecay1);
 _fe_mul($x, $h, $recip);
 $arraydecay6 = $h + 40 | 0;
 _fe_mul($y, $arraydecay6, $recip);
 _fe_tobytes($s, $y);
 $call = _fe_isnegative($x) | 0;
 $shl = $call << 7;
 $arrayidx = $s + 31 | 0;
 $0 = HEAP8[$arrayidx >> 0] | 0;
 $conv = $0 & 255;
 $xor = $shl ^ $conv;
 $conv10 = $xor & 255;
 HEAP8[$arrayidx >> 0] = $conv10;
 STACKTOP = sp;
 return;
}

function _ge_p2_dbl($r, $p) {
 $r = $r | 0;
 $p = $p | 0;
 var $arraydecay3 = 0, $arraydecay4 = 0, $arraydecay5 = 0, $arraydecay7 = 0, $arraydecay9 = 0, $t0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $t0 = sp;
 _fe_sq($r, $p);
 $arraydecay3 = $r + 80 | 0;
 $arraydecay4 = $p + 40 | 0;
 _fe_sq($arraydecay3, $arraydecay4);
 $arraydecay5 = $r + 120 | 0;
 $arraydecay7 = $p + 80 | 0;
 _fe_sq2($arraydecay5, $arraydecay7);
 $arraydecay9 = $r + 40 | 0;
 _fe_add($arraydecay9, $p, $arraydecay4);
 _fe_sq($t0, $arraydecay9);
 _fe_add($arraydecay9, $arraydecay3, $r);
 _fe_sub($arraydecay3, $arraydecay3, $r);
 _fe_sub($r, $t0, $arraydecay9);
 _fe_sub($arraydecay5, $arraydecay5, $arraydecay3);
 STACKTOP = sp;
 return;
}

function _ge_tobytes($s, $h) {
 $s = $s | 0;
 $h = $h | 0;
 var $0 = 0, $arraydecay1 = 0, $arraydecay6 = 0, $arrayidx = 0, $call = 0, $conv = 0, $conv10 = 0, $recip = 0, $shl = 0, $x = 0, $xor = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144 | 0);
 $recip = sp + 96 | 0;
 $x = sp + 48 | 0;
 $y = sp;
 $arraydecay1 = $h + 80 | 0;
 _fe_invert($recip, $arraydecay1);
 _fe_mul($x, $h, $recip);
 $arraydecay6 = $h + 40 | 0;
 _fe_mul($y, $arraydecay6, $recip);
 _fe_tobytes($s, $y);
 $call = _fe_isnegative($x) | 0;
 $shl = $call << 7;
 $arrayidx = $s + 31 | 0;
 $0 = HEAP8[$arrayidx >> 0] | 0;
 $conv = $0 & 255;
 $xor = $shl ^ $conv;
 $conv10 = $xor & 255;
 HEAP8[$arrayidx >> 0] = $conv10;
 STACKTOP = sp;
 return;
}

function _free_memory($context, $instance) {
 $context = $context | 0;
 $instance = $instance | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $free_cbk = 0, $keep_memory = 0, $memory_blocks = 0, $mul = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $memory_blocks = $instance + 12 | 0;
 $0 = HEAP32[$memory_blocks >> 2] | 0;
 $mul = $0 << 10;
 $1 = HEAP32[$instance >> 2] | 0;
 _clear_internal_memory($1, $mul);
 $keep_memory = $instance + 40 | 0;
 $2 = HEAP32[$keep_memory >> 2] | 0;
 $tobool = ($2 | 0) == 0;
 if (!$tobool) {
  return;
 }
 $free_cbk = $context + 64 | 0;
 $3 = HEAP32[$free_cbk >> 2] | 0;
 $tobool1 = ($3 | 0) == (0 | 0);
 $4 = HEAP32[$instance >> 2] | 0;
 if ($tobool1) {
  _free($4);
  return;
 } else {
  FUNCTION_TABLE_vii[$3 & 255]($4, $mul);
  return;
 }
}

function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE10toWireTypeEOSB_($v) {
 $v = $v | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i = 0, $__end_$i$i = 0, $__end_cap_$i38$i = 0, $__value_$i$i$i32$i = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __Znwm(12) | 0;
 $__end_$i$i = $call + 4 | 0;
 $__end_cap_$i38$i = $call + 8 | 0;
 $0 = HEAP32[$v >> 2] | 0;
 HEAP32[$call >> 2] = $0;
 $__end_$i = $v + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 HEAP32[$__end_$i$i >> 2] = $1;
 $__value_$i$i$i32$i = $v + 8 | 0;
 $2 = HEAP32[$__value_$i$i$i32$i >> 2] | 0;
 HEAP32[$__end_cap_$i38$i >> 2] = $2;
 HEAP32[$__value_$i$i$i32$i >> 2] = 0;
 HEAP32[$__end_$i >> 2] = 0;
 HEAP32[$v >> 2] = 0;
 return $call | 0;
}

function __Z26cn_soft_shell_slow_hash_v2NSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi($agg$result, $data, $height) {
 $agg$result = $agg$result | 0;
 $data = $data | 0;
 $height = $height | 0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $agg$tmp = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $data);
 $0 = ($height | 0) < 0;
 $1 = $0 << 31 >> 31;
 __ZN4Core12Cryptography26cn_soft_shell_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy($agg$result, $agg$tmp, $height, $1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return;
}

function __Z26cn_soft_shell_slow_hash_v1NSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi($agg$result, $data, $height) {
 $agg$result = $agg$result | 0;
 $data = $data | 0;
 $height = $height | 0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $agg$tmp = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $data);
 $0 = ($height | 0) < 0;
 $1 = $0 << 31 >> 31;
 __ZN4Core12Cryptography26cn_soft_shell_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy($agg$result, $agg$tmp, $height, $1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return;
}

function __Z26cn_soft_shell_slow_hash_v0NSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi($agg$result, $data, $height) {
 $agg$result = $agg$result | 0;
 $data = $data | 0;
 $height = $height | 0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $agg$tmp = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $data);
 $0 = ($height | 0) < 0;
 $1 = $0 << 31 >> 31;
 __ZN4Core12Cryptography26cn_soft_shell_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy($agg$result, $agg$tmp, $height, $1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFbS8_EPNS0_11BindingTypeIS8_vEUt_E($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $call = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $agg$tmp = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 $call = FUNCTION_TABLE_ii[$fn & 255]($agg$tmp) | 0;
 $call2 = __ZN10emscripten8internal11BindingTypeIbvE10toWireTypeEb($call) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call2 | 0;
}

function __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEE18__construct_at_endEmRKS6_($this, $__n, $__x) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__x = $__x | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $__end_ = 0, $__n$addr$0 = 0, $cmp = 0, $dec = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = $this + 8 | 0;
 $$pre = HEAP32[$__end_ >> 2] | 0;
 $0 = $$pre;
 $__n$addr$0 = $__n;
 while (1) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0, $__x);
  $1 = HEAP32[$__end_ >> 2] | 0;
  $incdec$ptr = $1 + 12 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr;
  $dec = $__n$addr$0 + -1 | 0;
  $cmp = ($dec | 0) == 0;
  if ($cmp) {
   break;
  } else {
   $0 = $incdec$ptr;
   $__n$addr$0 = $dec;
  }
 }
 return;
}

function __ZN4Core12Cryptography10scReduce32ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result, $data) {
 $agg$result = $agg$result | 0;
 $data = $data | 0;
 var $l_scalar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $l_scalar = sp;
 __ZN6Crypto19EllipticCurveScalarC2Ev($l_scalar);
 __ZN6Common10podFromHexIN6Crypto19EllipticCurveScalarEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($data, $l_scalar);
 __ZN6Crypto10scReduce32ERNS_19EllipticCurveScalarE($l_scalar);
 __ZN6Common8podToHexIN6Crypto19EllipticCurveScalarEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $l_scalar);
 STACKTOP = sp;
 return;
}

function _fill_memory_blocks($instance) {
 $instance = $instance | 0;
 var $0 = 0, $1 = 0, $call3 = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $lanes = 0, $retval$0 = 0, $threads = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($instance | 0) == (0 | 0);
 do {
  if ($cmp) {
   $retval$0 = -25;
  } else {
   $lanes = $instance + 24 | 0;
   $0 = HEAP32[$lanes >> 2] | 0;
   $cmp1 = ($0 | 0) == 0;
   if ($cmp1) {
    $retval$0 = -25;
   } else {
    $threads = $instance + 28 | 0;
    $1 = HEAP32[$threads >> 2] | 0;
    $cmp2 = ($1 | 0) == 1;
    if ($cmp2) {
     _fill_memory_blocks_st($instance);
     $retval$0 = 0;
     break;
    } else {
     $call3 = _fill_memory_blocks_mt($instance) | 0;
     $retval$0 = $call3;
     break;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function _next_addresses($address_block, $input_block, $zero_block) {
 $address_block = $address_block | 0;
 $input_block = $input_block | 0;
 $zero_block = $zero_block | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arrayidx = $input_block + 48 | 0;
 $0 = $arrayidx;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = _i64Add($2 | 0, $5 | 0, 1, 0) | 0;
 $7 = getTempRet0() | 0;
 $8 = $arrayidx;
 $9 = $8;
 HEAP32[$9 >> 2] = $6;
 $10 = $8 + 4 | 0;
 $11 = $10;
 HEAP32[$11 >> 2] = $7;
 _fill_block($zero_block, $input_block, $address_block, 0);
 _fill_block($zero_block, $address_block, $address_block, 0);
 return;
}

function ___cxx_global_var_init_148() {
 var $call$i = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $ref$tmp = sp;
 HEAP32[$ref$tmp >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0 | 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0 | 0;
 $call$i = __ZNSt3__211char_traitsIcE6lengthEPKc(45251) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp, 45251, $call$i);
 __ZNSt3__213random_deviceC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 ___cxa_thread_atexit(152 | 0, 576484 | 0, ___dso_handle | 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE4seedEj($__sd) {
 $__sd = $__sd | 0;
 var $0 = 0, $__i$06 = 0, $add = 0, $arrayidx8 = 0, $exitcond = 0, $inc = 0, $mul = 0, $shr$i = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[143496] = $__sd;
 $0 = $__sd;
 $__i$06 = 1;
 while (1) {
  $shr$i = $0 >>> 30;
  $xor = $shr$i ^ $0;
  $mul = Math_imul($xor, 1812433253) | 0;
  $add = $mul + $__i$06 | 0;
  $arrayidx8 = 573984 + ($__i$06 << 2) | 0;
  HEAP32[$arrayidx8 >> 2] = $add;
  $inc = $__i$06 + 1 | 0;
  $exitcond = ($inc | 0) == 624;
  if ($exitcond) {
   break;
  } else {
   $0 = $add;
   $__i$06 = $inc;
  }
 }
 HEAP32[576480 >> 2] = 0;
 return;
}

function __ZN6Crypto8Multisig7addKeysINS_9SecretKeyEEEvRKT_S5_RS3_($a, $b, $c) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 var $a2 = 0, $b2 = 0, $call = 0, $tmp2 = 0, $tmp3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(640 | 0);
 $b2 = sp + 480 | 0;
 $a2 = sp + 320 | 0;
 $tmp2 = sp + 160 | 0;
 $tmp3 = sp;
 $call = __ZN6Crypto8Multisig9is_scalarINS_9SecretKeyEEEbRKT_($a) | 0;
 if ($call) {
  _sc_add($c, $a, $b);
  STACKTOP = sp;
  return;
 } else {
  _ge_frombytes_vartime($b2, $b) | 0;
  _ge_frombytes_vartime($a2, $a) | 0;
  _ge_p3_to_cached($tmp2, $b2);
  _ge_add($tmp3, $a2, $tmp2);
  _ge_p1p1_to_p3($a2, $tmp3);
  _ge_p3_tobytes($c, $a2);
  STACKTOP = sp;
  return;
 }
}

function __ZN6Crypto8Multisig7addKeysINS_9PublicKeyEEEvRKT_S5_RS3_($a, $b, $c) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 var $a2 = 0, $b2 = 0, $call = 0, $tmp2 = 0, $tmp3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(640 | 0);
 $b2 = sp + 480 | 0;
 $a2 = sp + 320 | 0;
 $tmp2 = sp + 160 | 0;
 $tmp3 = sp;
 $call = __ZN6Crypto8Multisig9is_scalarINS_9PublicKeyEEEbRKT_($a) | 0;
 if ($call) {
  _sc_add($c, $a, $b);
  STACKTOP = sp;
  return;
 } else {
  _ge_frombytes_vartime($b2, $b) | 0;
  _ge_frombytes_vartime($a2, $a) | 0;
  _ge_p3_to_cached($tmp2, $b2);
  _ge_add($tmp3, $a2, $tmp2);
  _ge_p1p1_to_p3($a2, $tmp3);
  _ge_p3_tobytes($c, $a2);
  STACKTOP = sp;
  return;
 }
}

function __ZN4KeysC2EOS_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $__r_$i13 = 0, $__r_2$i14 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 0;
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2] | 0;
 HEAP32[$0 >> 2] = 0 | 0;
 HEAP32[$0 + 4 >> 2] = 0 | 0;
 HEAP32[$0 + 8 >> 2] = 0 | 0;
 $__r_$i13 = $this + 12 | 0;
 $__r_2$i14 = $0 + 12 | 0;
 HEAP32[$__r_$i13 >> 2] = HEAP32[$__r_2$i14 >> 2] | 0;
 HEAP32[$__r_$i13 + 4 >> 2] = HEAP32[$__r_2$i14 + 4 >> 2] | 0;
 HEAP32[$__r_$i13 + 8 >> 2] = HEAP32[$__r_2$i14 + 8 >> 2] | 0;
 $scevgep = $0 + 12 | 0;
 HEAP32[$scevgep >> 2] = 0 | 0;
 HEAP32[$scevgep + 4 >> 2] = 0 | 0;
 HEAP32[$scevgep + 8 >> 2] = 0 | 0;
 return;
}

function __ZN6Crypto8Multisig7addKeysINS_8KeyImageEEEvRKT_S5_RS3_($a, $b, $c) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 var $a2 = 0, $b2 = 0, $call = 0, $tmp2 = 0, $tmp3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(640 | 0);
 $b2 = sp + 480 | 0;
 $a2 = sp + 320 | 0;
 $tmp2 = sp + 160 | 0;
 $tmp3 = sp;
 $call = __ZN6Crypto8Multisig9is_scalarINS_8KeyImageEEEbRKT_($a) | 0;
 if ($call) {
  _sc_add($c, $a, $b);
  STACKTOP = sp;
  return;
 } else {
  _ge_frombytes_vartime($b2, $b) | 0;
  _ge_frombytes_vartime($a2, $a) | 0;
  _ge_p3_to_cached($tmp2, $b2);
  _ge_add($tmp3, $a2, $tmp2);
  _ge_p1p1_to_p3($a2, $tmp3);
  _ge_p3_tobytes($c, $a2);
  STACKTOP = sp;
  return;
 }
}

function __Z18derivationToScalarNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm($agg$result, $derivation, $outputIndex) {
 $agg$result = $agg$result | 0;
 $derivation = $derivation | 0;
 $outputIndex = $outputIndex | 0;
 var $agg$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $agg$tmp = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp, $derivation);
 __ZN4Core12Cryptography18derivationToScalarENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy($agg$result, $agg$tmp, $outputIndex, 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal12WireTypePackIJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEC2ESA_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call1$i = 0, $cursor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $cursor = sp;
 HEAP32[$cursor >> 2] = $this;
 $call1$i = __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE10toWireTypeERKS8_($args) | 0;
 __ZN10emscripten8internal20writeGenericWireTypeINS0_11BindingTypeINSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEvEUt_EEEvRPNS0_15GenericWireTypeEPT_($cursor, $call1$i);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten3valC2IRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEOT_($this, $value) {
 $this = $this | 0;
 $value = $value | 0;
 var $argv = 0, $call3 = 0, $call4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $argv = sp;
 __ZN10emscripten8internal12WireTypePackIJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEC2ESA_($argv, $value);
 $call3 = __ZNK10emscripten8internal12WireTypePackIJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEcvPKvEv($argv) | 0;
 $call4 = __emval_take_value(42008 | 0, $call3 | 0) | 0;
 HEAP32[$this >> 2] = $call4;
 STACKTOP = sp;
 return;
}

function __ZN6Crypto16chukwa_slow_hashEPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var $0 = 0, $salt = 0, $tobool = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $salt = sp;
 dest = $salt;
 src = $data;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = HEAP8[577064] | 0;
 $tobool = $0 << 24 >> 24 == 0;
 if ($tobool) {
  _argon2_select_impl();
  HEAP8[577064] = 1;
 }
 _argon2id_hash_raw($data, $length, $salt, $hash);
 STACKTOP = sp;
 return;
}

function ___cxa_can_catch($catchType, $excpType, $thrown) {
 $catchType = $catchType | 0;
 $excpType = $excpType | 0;
 $thrown = $thrown | 0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $conv = 0, $temp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $temp = sp;
 $0 = HEAP32[$thrown >> 2] | 0;
 HEAP32[$temp >> 2] = $0;
 $vtable = HEAP32[$catchType >> 2] | 0;
 $vfn = $vtable + 16 | 0;
 $1 = HEAP32[$vfn >> 2] | 0;
 $call = FUNCTION_TABLE_iiii[$1 & 255]($catchType, $excpType, $temp) | 0;
 $conv = $call & 1;
 if ($call) {
  $2 = HEAP32[$temp >> 2] | 0;
  HEAP32[$thrown >> 2] = $2;
 }
 STACKTOP = sp;
 return $conv | 0;
}

function __ZN10emscripten8internal19RegisterClassMethodIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEmEE6invokeISC_JEEEvPKcSG_() {
 var $call4 = 0, $function$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $function$addr = sp;
 HEAP32[$function$addr >> 2] = 146;
 $call4 = __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEmEEEPT_RKSH_($function$addr) | 0;
 __embind_register_class_function(42064 | 0, 45031 | 0, 3, 43052 | 0, 44727 | 0, 147 | 0, $call4 | 0, 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE11__vallocateEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $__end_ = 0, $__value_$i$i$i = 0, $add$ptr = 0, $call$i$i$i = 0, $cmp = 0, $mul$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = $__n >>> 0 > 357913941;
 if ($cmp) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 } else {
  $mul$i$i = $__n * 12 | 0;
  $call$i$i$i = __Znwm($mul$i$i) | 0;
  $__end_ = $this + 4 | 0;
  HEAP32[$__end_ >> 2] = $call$i$i$i;
  HEAP32[$this >> 2] = $call$i$i$i;
  $add$ptr = $call$i$i$i + ($__n * 12 | 0) | 0;
  $__value_$i$i$i = $this + 8 | 0;
  HEAP32[$__value_$i$i$i >> 2] = $add$ptr;
  return;
 }
}

function __ZN10emscripten8internal19RegisterClassMethodIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEmRKS9_EE6invokeISB_JEEEvPKcSG_() {
 var $call4 = 0, $function$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $function$addr = sp;
 HEAP32[$function$addr >> 2] = 148;
 $call4 = __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEmRKS9_EEEPT_RKSH_($function$addr) | 0;
 __embind_register_class_function(42064 | 0, 45035 | 0, 4, 352 | 0, 44949 | 0, 149 | 0, $call4 | 0, 0);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $call = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = $info + 8 | 0;
 $0 = HEAP32[$static_type >> 2] | 0;
 $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, $use_strcmp) | 0;
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info, $dst_ptr, $current_ptr, $path_below);
 }
 return;
}

function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0;
 var oldDynamicTopOnChange = 0;
 var newDynamicTop = 0;
 var totalMemory = 0;
 totalMemory = _emscripten_get_heap_size() | 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 newDynamicTop = oldDynamicTop + increment | 0;
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory(newDynamicTop | 0) | 0;
  ___setErrNo(12);
  return -1;
 }
 if ((newDynamicTop | 0) > (totalMemory | 0)) {
  if (_emscripten_resize_heap(newDynamicTop | 0) | 0) {} else {
   ___setErrNo(12);
   return -1;
  }
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop | 0;
 return oldDynamicTop | 0;
}

function __ZN6Crypto10crypto_ops18generate_key_imageERKNS_9PublicKeyERKNS_9SecretKeyERNS_8KeyImageE($pub, $sec, $image) {
 $pub = $pub | 0;
 $sec = $sec | 0;
 $image = $image | 0;
 var $call = 0, $cmp = 0, $point = 0, $point2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288 | 0);
 $point = sp + 120 | 0;
 $point2 = sp;
 $call = _sc_check($sec) | 0;
 $cmp = ($call | 0) == 0;
 if ($cmp) {
  __ZN6CryptoL10hash_to_ecERKNS_9PublicKeyERNS_5ge_p3E($pub, $point);
  _ge_scalarmult($point2, $sec, $point);
  _ge_tobytes($image, $point2);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(45553 | 0, 45326 | 0, 458, 45674 | 0);
 }
}

function _pop_arg_long_double($arg, $ap) {
 $arg = $arg | 0;
 $ap = $ap | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arglist_current = HEAP32[$ap >> 2] | 0;
 $0 = $arglist_current;
 $1 = 0 + 8 | 0;
 $expanded1 = $1;
 $expanded = $expanded1 - 1 | 0;
 $2 = $0 + $expanded | 0;
 $3 = 0 + 8 | 0;
 $expanded5 = $3;
 $expanded4 = $expanded5 - 1 | 0;
 $expanded3 = $expanded4 ^ -1;
 $4 = $2 & $expanded3;
 $5 = $4;
 $6 = +HEAPF64[$5 >> 3];
 $arglist_next = $5 + 8 | 0;
 HEAP32[$ap >> 2] = $arglist_next;
 HEAPF64[$arg >> 3] = $6;
 return;
}

function _fill_segment($instance, $position) {
 $instance = $instance | 0;
 $position = $position | 0;
 var $0 = 0, $position$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $position$byval_copy = sp;
 $0 = HEAP32[43076 >> 2] | 0;
 HEAP32[$position$byval_copy >> 2] = HEAP32[$position >> 2] | 0;
 HEAP32[$position$byval_copy + 4 >> 2] = HEAP32[$position + 4 >> 2] | 0;
 HEAP32[$position$byval_copy + 8 >> 2] = HEAP32[$position + 8 >> 2] | 0;
 HEAP32[$position$byval_copy + 12 >> 2] = HEAP32[$position + 12 >> 2] | 0;
 FUNCTION_TABLE_vii[$0 & 255]($instance, $position$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($info, $current_ptr, $path_below) {
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $cmp = 0, $cmp2 = 0, $path_dynamic_ptr_to_static_ptr = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_ptr = $info + 4 | 0;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $cmp = ($0 | 0) == ($current_ptr | 0);
 if ($cmp) {
  $path_dynamic_ptr_to_static_ptr = $info + 28 | 0;
  $1 = HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0;
  $cmp2 = ($1 | 0) == 1;
  if (!$cmp2) {
   HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] = $path_below;
  }
 }
 return;
}

function __ZNKSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEE2atEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $arrayidx = 0, $cmp = 0, $sub$ptr$div$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_$i = $this + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$rhs$cast$i = $1;
 $sub$ptr$sub$i = $0 - $sub$ptr$rhs$cast$i | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 $cmp = $sub$ptr$div$i >>> 0 > $__n >>> 0;
 if ($cmp) {
  $arrayidx = $1 + ($__n << 5) | 0;
  return $arrayidx | 0;
 } else {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv();
 }
 return 0 | 0;
}

function __ZNKSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE2atEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $arrayidx = 0, $cmp = 0, $sub$ptr$div$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_$i = $this + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$rhs$cast$i = $1;
 $sub$ptr$sub$i = $0 - $sub$ptr$rhs$cast$i | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 $cmp = $sub$ptr$div$i >>> 0 > $__n >>> 0;
 if ($cmp) {
  $arrayidx = $1 + ($__n << 5) | 0;
  return $arrayidx | 0;
 } else {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv();
 }
 return 0 | 0;
}

function __ZNKSt3__26vectorIN6Crypto8KeyImageENS_9allocatorIS2_EEE2atEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $arrayidx = 0, $cmp = 0, $sub$ptr$div$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_$i = $this + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$rhs$cast$i = $1;
 $sub$ptr$sub$i = $0 - $sub$ptr$rhs$cast$i | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 $cmp = $sub$ptr$div$i >>> 0 > $__n >>> 0;
 if ($cmp) {
  $arrayidx = $1 + ($__n << 5) | 0;
  return $arrayidx | 0;
 } else {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv();
 }
 return 0 | 0;
}

function __ZN6Crypto8Multisig28calculate_shared_private_keyERKNSt3__26vectorINS_9SecretKeyENS1_9allocatorIS3_EEEE($agg$result, $secretKeys) {
 $agg$result = $agg$result | 0;
 $secretKeys = $secretKeys | 0;
 var $secretKeys$idx$val = 0, $secretKeys$idx1 = 0, $secretKeys$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto9SecretKeyC2Ev($agg$result);
 $secretKeys$idx$val = HEAP32[$secretKeys >> 2] | 0;
 $secretKeys$idx1 = $secretKeys + 4 | 0;
 $secretKeys$idx1$val = HEAP32[$secretKeys$idx1 >> 2] | 0;
 __ZN6Crypto8Multisig28calculate_shared_private_keyERKNSt3__26vectorINS_9SecretKeyENS1_9allocatorIS3_EEEERS3_($secretKeys$idx$val, $secretKeys$idx1$val, $agg$result);
 return;
}

function __ZN6Crypto8Multisig27calculate_shared_public_keyERKNSt3__26vectorINS_9PublicKeyENS1_9allocatorIS3_EEEE($agg$result, $publicKeys) {
 $agg$result = $agg$result | 0;
 $publicKeys = $publicKeys | 0;
 var $publicKeys$idx$val = 0, $publicKeys$idx1 = 0, $publicKeys$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto9PublicKeyC2Ev($agg$result);
 $publicKeys$idx$val = HEAP32[$publicKeys >> 2] | 0;
 $publicKeys$idx1 = $publicKeys + 4 | 0;
 $publicKeys$idx1$val = HEAP32[$publicKeys$idx1 >> 2] | 0;
 __ZN6Crypto8Multisig27calculate_shared_public_keyERKNSt3__26vectorINS_9PublicKeyENS1_9allocatorIS3_EEEERS3_($publicKeys$idx$val, $publicKeys$idx1$val, $agg$result);
 return;
}

function __ZNSt3__26vectorIN6Crypto9SecretKeyENS_9allocatorIS2_EEE11__vallocateEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $__end_ = 0, $__value_$i$i$i = 0, $add$ptr = 0, $call$i$i$i = 0, $cmp = 0, $mul$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = $__n >>> 0 > 134217727;
 if ($cmp) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 } else {
  $mul$i$i = $__n << 5;
  $call$i$i$i = __Znwm($mul$i$i) | 0;
  $__end_ = $this + 4 | 0;
  HEAP32[$__end_ >> 2] = $call$i$i$i;
  HEAP32[$this >> 2] = $call$i$i$i;
  $add$ptr = $call$i$i$i + ($__n << 5) | 0;
  $__value_$i$i$i = $this + 8 | 0;
  HEAP32[$__value_$i$i$i >> 2] = $add$ptr;
  return;
 }
}

function __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE11__vallocateEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $__end_ = 0, $__value_$i$i$i = 0, $add$ptr = 0, $call$i$i$i = 0, $cmp = 0, $mul$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = $__n >>> 0 > 134217727;
 if ($cmp) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 } else {
  $mul$i$i = $__n << 5;
  $call$i$i$i = __Znwm($mul$i$i) | 0;
  $__end_ = $this + 4 | 0;
  HEAP32[$__end_ >> 2] = $call$i$i$i;
  HEAP32[$this >> 2] = $call$i$i$i;
  $add$ptr = $call$i$i$i + ($__n << 5) | 0;
  $__value_$i$i$i = $this + 8 | 0;
  HEAP32[$__value_$i$i$i >> 2] = $add$ptr;
  return;
 }
}

function __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE11__vallocateEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $__end_ = 0, $__value_$i$i$i = 0, $add$ptr = 0, $call$i$i$i = 0, $cmp = 0, $mul$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = $__n >>> 0 > 67108863;
 if ($cmp) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 } else {
  $mul$i$i = $__n << 6;
  $call$i$i$i = __Znwm($mul$i$i) | 0;
  $__end_ = $this + 4 | 0;
  HEAP32[$__end_ >> 2] = $call$i$i$i;
  HEAP32[$this >> 2] = $call$i$i$i;
  $add$ptr = $call$i$i$i + ($__n << 6) | 0;
  $__value_$i$i$i = $this + 8 | 0;
  HEAP32[$__value_$i$i$i >> 2] = $add$ptr;
  return;
 }
}

function __ZNSt3__26vectorIN6Crypto8KeyImageENS_9allocatorIS2_EEE11__vallocateEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $__end_ = 0, $__value_$i$i$i = 0, $add$ptr = 0, $call$i$i$i = 0, $cmp = 0, $mul$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = $__n >>> 0 > 134217727;
 if ($cmp) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 } else {
  $mul$i$i = $__n << 5;
  $call$i$i$i = __Znwm($mul$i$i) | 0;
  $__end_ = $this + 4 | 0;
  HEAP32[$__end_ >> 2] = $call$i$i$i;
  HEAP32[$this >> 2] = $call$i$i$i;
  $add$ptr = $call$i$i$i + ($__n << 5) | 0;
  $__value_$i$i$i = $this + 8 | 0;
  HEAP32[$__value_$i$i$i >> 2] = $add$ptr;
  return;
 }
}

function __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEE11__vallocateEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $__end_ = 0, $__value_$i$i$i = 0, $add$ptr = 0, $call$i$i$i = 0, $cmp = 0, $mul$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = $__n >>> 0 > 134217727;
 if ($cmp) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 } else {
  $mul$i$i = $__n << 5;
  $call$i$i$i = __Znwm($mul$i$i) | 0;
  $__end_ = $this + 4 | 0;
  HEAP32[$__end_ >> 2] = $call$i$i$i;
  HEAP32[$this >> 2] = $call$i$i$i;
  $add$ptr = $call$i$i$i + ($__n << 5) | 0;
  $__value_$i$i$i = $this + 8 | 0;
  HEAP32[$__value_$i$i$i >> 2] = $add$ptr;
  return;
 }
}

function _Final_365($state, $hashval) {
 $state = $state | 0;
 $hashval = $hashval | 0;
 var $0 = 0, $ctx1024 = 0, $shr = 0, $trunc = 0, $trunc$clear = 0, $u = 0, $u2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$state >> 2] | 0;
 $shr = $0 >>> 8;
 $trunc = $shr & 255;
 $trunc$clear = $trunc & 3;
 switch ($trunc$clear << 24 >> 24) {
 case 2:
  {
   $u = $state + 8 | 0;
   _Skein_512_Final($u, $hashval);
   return;
   break;
  }
 case 1:
  {
   $u2 = $state + 8 | 0;
   _Skein_256_Final($u2, $hashval);
   return;
   break;
  }
 case 0:
  {
   $ctx1024 = $state + 8 | 0;
   _Skein1024_Final($ctx1024, $hashval);
   return;
   break;
  }
 default:
  {
   return;
  }
 }
}

function __ZNSt3__214__split_bufferIN6Crypto9SignatureERNS_9allocatorIS2_EEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $__end_ = 0, $__n$addr$0 = 0, $cmp = 0, $dec = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = $this + 8 | 0;
 $$pre = HEAP32[$__end_ >> 2] | 0;
 $0 = $$pre;
 $__n$addr$0 = $__n;
 while (1) {
  __ZN6Crypto9SignatureC2Ev($0);
  $1 = HEAP32[$__end_ >> 2] | 0;
  $incdec$ptr = $1 + 64 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr;
  $dec = $__n$addr$0 + -1 | 0;
  $cmp = ($dec | 0) == 0;
  if ($cmp) {
   break;
  } else {
   $0 = $incdec$ptr;
   $__n$addr$0 = $dec;
  }
 }
 return;
}

function _Init_370($ctx) {
 $ctx = $ctx | 0;
 var $arrayidx2 = 0, $bits_in_last_byte = 0, $block_counter1 = 0, $block_counter2 = 0, $buf_ptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest = $ctx;
 stop = dest + 60 | 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $arrayidx2 = $ctx + 60 | 0;
 HEAP32[$arrayidx2 >> 2] = 65536;
 $buf_ptr = $ctx + 136 | 0;
 HEAP32[$buf_ptr >> 2] = 0;
 $block_counter1 = $ctx + 64 | 0;
 HEAP32[$block_counter1 >> 2] = 0;
 $block_counter2 = $ctx + 68 | 0;
 HEAP32[$block_counter2 >> 2] = 0;
 $bits_in_last_byte = $ctx + 140 | 0;
 HEAP32[$bits_in_last_byte >> 2] = 0;
 return;
}

function __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $__end_ = 0, $__n$addr$0 = 0, $cmp = 0, $dec = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = $this + 4 | 0;
 $$pre = HEAP32[$__end_ >> 2] | 0;
 $0 = $$pre;
 $__n$addr$0 = $__n;
 while (1) {
  __ZN6Crypto9SignatureC2Ev($0);
  $1 = HEAP32[$__end_ >> 2] | 0;
  $incdec$ptr = $1 + 64 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr;
  $dec = $__n$addr$0 + -1 | 0;
  $cmp = ($dec | 0) == 0;
  if ($cmp) {
   break;
  } else {
   $0 = $incdec$ptr;
   $__n$addr$0 = $dec;
  }
 }
 return;
}

function __ZN6Crypto10crypto_ops27generate_deterministic_keysERNS_9PublicKeyERNS_9SecretKeyES4_($pub, $sec, $second) {
 $pub = $pub | 0;
 $sec = $sec | 0;
 $second = $second | 0;
 var $point = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160 | 0);
 $point = sp;
 dest = $sec;
 src = $second;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 _sc_reduce32($sec);
 _ge_scalarmult_base($point, $sec);
 _ge_p3_tobytes($pub, $point);
 STACKTOP = sp;
 return;
}

function _fill_segment_default($instance, $position) {
 $instance = $instance | 0;
 $position = $position | 0;
 var $position$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $position$byval_copy = sp;
 HEAP32[$position$byval_copy >> 2] = HEAP32[$position >> 2] | 0;
 HEAP32[$position$byval_copy + 4 >> 2] = HEAP32[$position + 4 >> 2] | 0;
 HEAP32[$position$byval_copy + 8 >> 2] = HEAP32[$position + 8 >> 2] | 0;
 HEAP32[$position$byval_copy + 12 >> 2] = HEAP32[$position + 12 >> 2] | 0;
 _fill_segment_64($instance, $position$byval_copy);
 STACKTOP = sp;
 return;
}

function _read($fd, $buf, $count) {
 $fd = $fd | 0;
 $buf = $buf | 0;
 $count = $count | 0;
 var $0 = 0, $call = 0, $call1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $vararg_buffer = sp;
 $0 = $buf;
 HEAP32[$vararg_buffer >> 2] = $fd;
 $vararg_ptr1 = $vararg_buffer + 4 | 0;
 HEAP32[$vararg_ptr1 >> 2] = $0;
 $vararg_ptr2 = $vararg_buffer + 8 | 0;
 HEAP32[$vararg_ptr2 >> 2] = $count;
 $call = ___syscall3(3, $vararg_buffer | 0) | 0;
 $call1 = ___syscall_ret($call) | 0;
 STACKTOP = sp;
 return $call1 | 0;
}

function __ZN6Random11randomBytesEmPh($result) {
 $result = $result | 0;
 var $arrayidx = 0, $call = 0, $conv = 0, $exitcond = 0, $i$04 = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$04 = 0;
 while (1) {
  __ZTWN6RandomL3genE();
  $call = __ZNSt3__224uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEiRT_() | 0;
  $conv = $call & 255;
  $arrayidx = $result + $i$04 | 0;
  HEAP8[$arrayidx >> 0] = $conv;
  $inc = $i$04 + 1 | 0;
  $exitcond = ($inc | 0) == 64;
  if ($exitcond) {
   break;
  } else {
   $i$04 = $inc;
  }
 }
 return;
}

function _load_block($dst, $input) {
 $dst = $dst | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$ptr = 0, $arrayidx = 0, $exitcond = 0, $i$04 = 0, $inc = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$04 = 0;
 while (1) {
  $mul = $i$04 << 3;
  $add$ptr = $input + $mul | 0;
  $0 = _load64($add$ptr) | 0;
  $1 = getTempRet0() | 0;
  $arrayidx = $dst + ($i$04 << 3) | 0;
  $2 = $arrayidx;
  $3 = $2;
  HEAP32[$3 >> 2] = $0;
  $4 = $2 + 4 | 0;
  $5 = $4;
  HEAP32[$5 >> 2] = $1;
  $inc = $i$04 + 1 | 0;
  $exitcond = ($inc | 0) == 128;
  if ($exitcond) {
   break;
  } else {
   $i$04 = $inc;
  }
 }
 return;
}

function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 573968;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = ___muldi3($2 | 0, $5 | 0, 1284865837, 1481765933) | 0;
 $7 = getTempRet0() | 0;
 $8 = _i64Add($6 | 0, $7 | 0, 1, 0) | 0;
 $9 = getTempRet0() | 0;
 $10 = 573968;
 $11 = $10;
 HEAP32[$11 >> 2] = $8;
 $12 = $10 + 4 | 0;
 $13 = $12;
 HEAP32[$13 >> 2] = $9;
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0;
 $15 = getTempRet0() | 0;
 return $14 | 0;
}

function _fill_segment_thr($thread_data) {
 $thread_data = $thread_data | 0;
 var $$byval_copy = 0, $0 = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $$byval_copy = sp;
 $0 = HEAP32[$thread_data >> 2] | 0;
 $pos = $thread_data + 4 | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$pos >> 2] | 0;
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$pos + 4 >> 2] | 0;
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$pos + 8 >> 2] | 0;
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$pos + 12 >> 2] | 0;
 _fill_segment($0, $$byval_copy);
 _argon2_thread_exit();
 return 0 | 0;
}

function __ZN6Crypto10crypto_ops37generate_deterministic_subwallet_keysENS_9SecretKeyEyRS1_RNS_9PublicKeyE($basePrivate, $0, $1, $subwalletPrivate, $subwalletPublic) {
 $basePrivate = $basePrivate | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $subwalletPrivate = $subwalletPrivate | 0;
 $subwalletPublic = $subwalletPublic | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto10crypto_ops36generate_deterministic_subwallet_keyERKNS_9SecretKeyEyRS1_($basePrivate, $0, $1, $subwalletPrivate);
 $call = __ZN6Crypto10crypto_ops24secret_key_to_public_keyERKNS_9SecretKeyERNS_9PublicKeyE($subwalletPrivate, $subwalletPublic) | 0;
 return $call | 0;
}

function __ZNSt3__225__independent_bits_engineINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEjE6__evalENS_17integral_constantIbLb0EEE($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $__mask0_ = 0, $and = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $call = __ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEclEv($0) | 0;
 $__mask0_ = $this + 28 | 0;
 $1 = HEAP32[$__mask0_ >> 2] | 0;
 $and = $1 & $call;
 return $and | 0;
}

function _puts($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call1 = 0, $cmp2 = 0, $cmp3 = 0, $cmp5 = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[42220 >> 2] | 0;
 $call1 = _fputs($s) | 0;
 $cmp2 = ($call1 | 0) < 0;
 do {
  if (!$cmp2) {
   $1 = HEAP8[42219 >> 0] | 0;
   $cmp3 = $1 << 24 >> 24 == 10;
   if (!$cmp3) {
    $2 = HEAP32[42164 >> 2] | 0;
    $3 = HEAP32[42160 >> 2] | 0;
    $cmp5 = $2 >>> 0 < $3 >>> 0;
    if ($cmp5) {
     $incdec$ptr = $2 + 1 | 0;
     HEAP32[42164 >> 2] = $incdec$ptr;
     HEAP8[$2 >> 0] = 10;
     break;
    }
   }
   ___overflow(42144) | 0;
  }
 } while (0);
 return;
}

function __ZNSt3__218__libcpp_refstringC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $add2 = 0, $add6 = 0, $call = 0, $call3 = 0, $call5 = 0, $cap = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _strlen($msg) | 0;
 $add2 = $call + 13 | 0;
 $call3 = __Znwm($add2) | 0;
 HEAP32[$call3 >> 2] = $call;
 $cap = $call3 + 4 | 0;
 HEAP32[$cap >> 2] = $call;
 $count = $call3 + 8 | 0;
 HEAP32[$count >> 2] = 0;
 $call5 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($call3) | 0;
 $add6 = $call + 1 | 0;
 _memcpy($call5 | 0, $msg | 0, $add6 | 0) | 0;
 HEAP32[$this >> 2] = $call5;
 return;
}

function _store_block($output, $src) {
 $output = $output | 0;
 $src = $src | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$ptr = 0, $arrayidx = 0, $exitcond = 0, $i$04 = 0, $inc = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$04 = 0;
 while (1) {
  $mul = $i$04 << 3;
  $add$ptr = $output + $mul | 0;
  $arrayidx = $src + ($i$04 << 3) | 0;
  $0 = $arrayidx;
  $1 = $0;
  $2 = HEAP32[$1 >> 2] | 0;
  $3 = $0 + 4 | 0;
  $4 = $3;
  $5 = HEAP32[$4 >> 2] | 0;
  _store64($add$ptr, $2, $5);
  $inc = $i$04 + 1 | 0;
  $exitcond = ($inc | 0) == 128;
  if ($exitcond) {
   break;
  } else {
   $i$04 = $inc;
  }
 }
 return;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $__end_ = 0, $__n$addr$0 = 0, $cmp = 0, $dec = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = $this + 4 | 0;
 $$pre = HEAP32[$__end_ >> 2] | 0;
 $0 = $$pre;
 $__n$addr$0 = $__n;
 while (1) {
  HEAP8[$0 >> 0] = 0;
  $1 = HEAP32[$__end_ >> 2] | 0;
  $incdec$ptr = $1 + 1 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr;
  $dec = $__n$addr$0 + -1 | 0;
  $cmp = ($dec | 0) == 0;
  if ($cmp) {
   break;
  } else {
   $0 = $incdec$ptr;
   $__n$addr$0 = $dec;
  }
 }
 return;
}

function __ZN4Core12Cryptography8checkKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($publicKey) {
 $publicKey = $publicKey | 0;
 var $call1 = 0, $l_publicKey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $l_publicKey = sp;
 __ZN6Crypto9PublicKeyC2Ev($l_publicKey);
 __ZN6Common10podFromHexIN6Crypto9PublicKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($publicKey, $l_publicKey);
 $call1 = __ZN6Crypto9check_keyERKNS_9PublicKeyE($l_publicKey) | 0;
 STACKTOP = sp;
 return $call1 | 0;
}

function _open($filename) {
 $filename = $filename | 0;
 var $0 = 0, $call = 0, $call12 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $vararg_buffer = sp;
 $0 = $filename;
 HEAP32[$vararg_buffer >> 2] = $0;
 $vararg_ptr1 = $vararg_buffer + 4 | 0;
 HEAP32[$vararg_ptr1 >> 2] = 32768;
 $vararg_ptr2 = $vararg_buffer + 8 | 0;
 HEAP32[$vararg_ptr2 >> 2] = 0;
 $call = ___syscall5(5, $vararg_buffer | 0) | 0;
 $call12 = ___syscall_ret($call) | 0;
 STACKTOP = sp;
 return $call12 | 0;
}

function __ZN4Core4cadcEyyb($0, $1, $2, $3, $c) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $c = $c | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = _i64Add($2 | 0, $3 | 0, $0 | 0, $1 | 0) | 0;
 $5 = getTempRet0() | 0;
 $6 = $5 >>> 0 < $1 >>> 0;
 $7 = $4 >>> 0 < $0 >>> 0;
 $8 = ($5 | 0) == ($1 | 0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if ($10) {
  return 1;
 } else {
  $11 = ($4 | 0) == -1;
  $12 = ($5 | 0) == -1;
  $13 = $11 & $12;
  $spec$select = $13 & $c;
  return $spec$select | 0;
 }
 return 0 | 0;
}

function _argon2_compute_memory_blocks($memory_blocks, $segment_length, $m_cost, $lanes) {
 $memory_blocks = $memory_blocks | 0;
 $segment_length = $segment_length | 0;
 $m_cost = $m_cost | 0;
 $lanes = $lanes | 0;
 var $cmp = 0, $div = 0, $mul = 0, $mul2 = 0, $mul4 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = $lanes << 3;
 $cmp = $mul >>> 0 > $m_cost >>> 0;
 $spec$select = $cmp ? $mul : $m_cost;
 $mul2 = $lanes << 2;
 $div = ($spec$select >>> 0) / ($mul2 >>> 0) & -1;
 HEAP32[$segment_length >> 2] = $div;
 $mul4 = Math_imul($div, $mul2) | 0;
 HEAP32[$memory_blocks >> 2] = $mul4;
 return;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $call = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = $info + 8 | 0;
 $0 = HEAP32[$static_type >> 2] | 0;
 $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, 0) | 0;
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info, $adjustedPtr, $path_below);
 }
 return;
}

function __ZN6Crypto10crypto_ops21generateViewFromSpendERKNS_9SecretKeyERS1_RNS_9PublicKeyE($spend, $viewSecret, $viewPublic) {
 $spend = $spend | 0;
 $viewSecret = $viewSecret | 0;
 $viewPublic = $viewPublic | 0;
 var $viewKeySeed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $viewKeySeed = sp;
 __ZN6Crypto9SecretKeyC2Ev($viewKeySeed);
 _keccak($spend, 32, $viewKeySeed, 32);
 __ZN6Crypto27generate_deterministic_keysERNS_9PublicKeyERNS_9SecretKeyES3_($viewPublic, $viewSecret, $viewKeySeed);
 STACKTOP = sp;
 return;
}

function _ge_cached_cmov($t, $u, $b) {
 $t = $t | 0;
 $u = $u | 0;
 $b = $b | 0;
 var $arraydecay11 = 0, $arraydecay13 = 0, $arraydecay3 = 0, $arraydecay5 = 0, $arraydecay7 = 0, $arraydecay9 = 0, $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv = $b & 255;
 _fe_cmov($t, $u, $conv);
 $arraydecay3 = $t + 40 | 0;
 $arraydecay5 = $u + 40 | 0;
 _fe_cmov($arraydecay3, $arraydecay5, $conv);
 $arraydecay7 = $t + 80 | 0;
 $arraydecay9 = $u + 80 | 0;
 _fe_cmov($arraydecay7, $arraydecay9, $conv);
 $arraydecay11 = $t + 120 | 0;
 $arraydecay13 = $u + 120 | 0;
 _fe_cmov($arraydecay11, $arraydecay13, $conv);
 return;
}

function __Z15derivePublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmS5_($agg$result, $derivation, $outputIndex, $publicKey) {
 $agg$result = $agg$result | 0;
 $derivation = $derivation | 0;
 $outputIndex = $outputIndex | 0;
 $publicKey = $publicKey | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = 0 | 0;
 HEAP32[$agg$result + 4 >> 2] = 0 | 0;
 HEAP32[$agg$result + 8 >> 2] = 0 | 0;
 __ZN4Core12Cryptography15derivePublicKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS9_RS7_($derivation, $outputIndex, 0, $publicKey, $agg$result);
 return;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE11__vallocateEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $__end_ = 0, $__value_$i$i$i = 0, $add$ptr = 0, $call$i$i$i = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n | 0) < 0;
 if ($cmp) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv();
 } else {
  $call$i$i$i = __Znwm($__n) | 0;
  $__end_ = $this + 4 | 0;
  HEAP32[$__end_ >> 2] = $call$i$i$i;
  HEAP32[$this >> 2] = $call$i$i$i;
  $add$ptr = $call$i$i$i + $__n | 0;
  $__value_$i$i$i = $this + 8 | 0;
  HEAP32[$__value_$i$i$i >> 2] = $add$ptr;
  return;
 }
}

function __ZN6Crypto8Multisig28generate_partial_signing_keyERKNS_9SignatureERKNS_9SecretKeyE($agg$result, $signature, $privateSpendKey) {
 $agg$result = $agg$result | 0;
 $signature = $signature | 0;
 $privateSpendKey = $privateSpendKey | 0;
 var $signatureAsKey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $signatureAsKey = sp;
 __ZN6Crypto9SecretKeyC2EPKh($signatureAsKey, $signature);
 __ZN6Crypto9SecretKeyC2Ev($agg$result);
 _sc_mul($agg$result, $signatureAsKey, $privateSpendKey);
 STACKTOP = sp;
 return;
}

function _oaes_alloc() {
 var $0 = 0, $and6$i = 0, $call$i = 0, $call1 = 0, $cmp4$i = 0, $cmp7$i = 0, $head$i = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i = _malloc(24) | 0;
 $cmp4$i = ($call$i | 0) == (0 | 0);
 if ($cmp4$i) {
  $retval$0 = 0;
  return $retval$0 | 0;
 }
 $head$i = $call$i + -4 | 0;
 $0 = HEAP32[$head$i >> 2] | 0;
 $and6$i = $0 & 3;
 $cmp7$i = ($and6$i | 0) == 0;
 if (!$cmp7$i) {
  _memset($call$i | 0, 0, 24) | 0;
 }
 $call1 = _oaes_get_seed() | 0;
 _srand($call1);
 HEAP32[$call$i >> 2] = 0;
 _oaes_set_option($call$i);
 $retval$0 = $call$i;
 return $retval$0 | 0;
}

function __ZL8is_equalPKSt9type_infoS1_b($x, $y, $use_strcmp) {
 $x = $x | 0;
 $y = $y | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $__type_name$i = 0, $__type_name$i2 = 0, $call2 = 0, $cmp = 0, $cmp3 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ($use_strcmp) {
  $__type_name$i = $x + 4 | 0;
  $0 = HEAP32[$__type_name$i >> 2] | 0;
  $__type_name$i2 = $y + 4 | 0;
  $1 = HEAP32[$__type_name$i2 >> 2] | 0;
  $call2 = _strcmp($0, $1) | 0;
  $cmp3 = ($call2 | 0) == 0;
  $retval$0 = $cmp3;
 } else {
  $cmp = ($x | 0) == ($y | 0);
  $retval$0 = $cmp;
 }
 return $retval$0 | 0;
}

function __ZN6Crypto10crypto_ops15hash_data_to_ecEPKhmRNS_9PublicKeyE($data, $key) {
 $data = $data | 0;
 $key = $key | 0;
 var $h = 0, $point = 0, $point2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(320 | 0);
 $h = sp + 280 | 0;
 $point = sp + 160 | 0;
 $point2 = sp;
 __ZN6Crypto4HashC2Ev($h);
 __ZN6Crypto12cn_fast_hashEPKvmRNS_4HashE($data, 32, $h);
 _ge_fromfe_frombytes_vartime($point, $h);
 _ge_mul8($point2, $point);
 _ge_p1p1_to_p2($point, $point2);
 _ge_tobytes($key, $point);
 STACKTOP = sp;
 return;
}

function _Init($state) {
 $state = $state | 0;
 var $arraydecay4 = 0, $databitlen = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $databitlen = $state + 8 | 0;
 HEAP32[$databitlen >> 2] = 0 | 0;
 HEAP32[$databitlen + 4 >> 2] = 0 | 0;
 HEAP32[$databitlen + 8 >> 2] = 0 | 0;
 HEAP32[$databitlen + 12 >> 2] = 0 | 0;
 HEAP32[$state >> 2] = 256;
 $arraydecay4 = $state + 32 | 0;
 dest = $arraydecay4;
 src = 37232;
 stop = dest + 128 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function __ZN10emscripten8internal12MemberAccessI18PreparedSignaturesNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE7getWireIS2_EEPSC_RKMS2_SC_RKT_($field, $ptr) {
 $field = $field | 0;
 $ptr = $ptr | 0;
 var $0 = 0, $call = 0, $memptr$offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$field >> 2] | 0;
 $memptr$offset = $ptr + $0 | 0;
 $call = __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE10toWireTypeERKSB_($memptr$offset) | 0;
 return $call | 0;
}

function __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEEC2Em($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $__end_$i = 0, $__value_$i$i$i = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0;
 $__end_$i = $this + 4 | 0;
 HEAP32[$__end_$i >> 2] = 0;
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = 0;
 $cmp = ($__n | 0) == 0;
 if ($cmp) {
  return;
 }
 __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEE11__vallocateEm($this, $__n);
 __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEE18__construct_at_endEm($this, $__n);
 return;
}

function _ge_p1p1_to_p3($r, $p) {
 $r = $r | 0;
 $p = $p | 0;
 var $arraydecay15 = 0, $arraydecay3 = 0, $arraydecay4 = 0, $arraydecay6 = 0, $arraydecay7 = 0, $arraydecay9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay3 = $p + 120 | 0;
 _fe_mul($r, $p, $arraydecay3);
 $arraydecay4 = $r + 40 | 0;
 $arraydecay6 = $p + 40 | 0;
 $arraydecay7 = $p + 80 | 0;
 _fe_mul($arraydecay4, $arraydecay6, $arraydecay7);
 $arraydecay9 = $r + 80 | 0;
 _fe_mul($arraydecay9, $arraydecay7, $arraydecay3);
 $arraydecay15 = $r + 120 | 0;
 _fe_mul($arraydecay15, $p, $arraydecay6);
 return;
}

function __Z21scalarDerivePublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_($agg$result, $derivationScalar, $publicKey) {
 $agg$result = $agg$result | 0;
 $derivationScalar = $derivationScalar | 0;
 $publicKey = $publicKey | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = 0 | 0;
 HEAP32[$agg$result + 4 >> 2] = 0 | 0;
 HEAP32[$agg$result + 8 >> 2] = 0 | 0;
 __ZN4Core12Cryptography15derivePublicKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RS7_($derivationScalar, $publicKey, $agg$result);
 return;
}

function _fflush($f) {
 $f = $f | 0;
 var $0 = 0, $1 = 0, $2 = 0, $call1 = 0, $call7 = 0, $cond10 = 0, $lock = 0, $tobool = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($f | 0) == (0 | 0);
 if (!$tobool) {
  $lock = $f + 76 | 0;
  $0 = HEAP32[$lock >> 2] | 0;
  $call1 = ___fflush_unlocked($f) | 0;
  return $call1 | 0;
 }
 $1 = HEAP32[10770] | 0;
 $tobool5 = ($1 | 0) == (0 | 0);
 if ($tobool5) {
  $cond10 = 0;
 } else {
  $2 = HEAP32[10770] | 0;
  $call7 = _fflush($2) | 0;
  $cond10 = $call7;
 }
 ___ofl_lock();
 ___ofl_unlock();
 return $cond10 | 0;
}

function __ZN6Crypto10crypto_ops24secret_key_to_public_keyERKNS_9SecretKeyERNS_9PublicKeyE($sec, $pub) {
 $sec = $sec | 0;
 $pub = $pub | 0;
 var $call = 0, $cmp = 0, $point = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160 | 0);
 $point = sp;
 $call = _sc_check($sec) | 0;
 $cmp = ($call | 0) == 0;
 if ($cmp) {
  _ge_scalarmult_base($point, $sec);
  _ge_p3_tobytes($pub, $point);
  $retval$0 = 1;
 } else {
  $retval$0 = 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = getTempRet0() | 0;
 $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
 return (setTempRet0(((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0 | 0), 0 | $1$0 & -1) | 0;
}

function _ge_p3_to_cached($r, $p) {
 $r = $r | 0;
 $p = $p | 0;
 var $arraydecay1 = 0, $arraydecay10 = 0, $arraydecay11 = 0, $arraydecay12 = 0, $arraydecay3 = 0, $arraydecay8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay1 = $p + 40 | 0;
 _fe_add($r, $arraydecay1, $p);
 $arraydecay3 = $r + 40 | 0;
 _fe_sub($arraydecay3, $arraydecay1, $p);
 $arraydecay8 = $r + 80 | 0;
 $arraydecay10 = $p + 80 | 0;
 _fe_copy($arraydecay8, $arraydecay10);
 $arraydecay11 = $r + 120 | 0;
 $arraydecay12 = $p + 120 | 0;
 _fe_mul($arraydecay11, $arraydecay12, 464);
 return;
}

function __ZN10emscripten8internal12MemberAccessI18PreparedSignaturesNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7getWireIS2_EEPNS0_11BindingTypeIS9_vEUt_ERKMS2_S9_RKT_($field, $ptr) {
 $field = $field | 0;
 $ptr = $ptr | 0;
 var $0 = 0, $call = 0, $memptr$offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$field >> 2] | 0;
 $memptr$offset = $ptr + $0 | 0;
 $call = __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE10toWireTypeERKS8_($memptr$offset) | 0;
 return $call | 0;
}

function __ZNSt3__212__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8EEEEJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS4_EEEEPFvNS_6vectorIhNS_9allocatorIhEEEEmijRNS_6atomicIbEERjjESB_miiNS_17reference_wrapperISD_EENSI_IjEEmEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 __ZNSt3__212__tuple_leafILm2ENS_6vectorIhNS_9allocatorIhEEEELb0EED2Ev($0);
 __ZNSt3__212__tuple_leafILm0ENS_10unique_ptrINS_15__thread_structENS_14default_deleteIS2_EEEELb0EED2Ev($this);
 return;
}

function __ZN6Crypto10crypto_ops21generateViewFromSpendERKNS_9SecretKeyERS1_($spend, $viewSecret) {
 $spend = $spend | 0;
 $viewSecret = $viewSecret | 0;
 var $unused_dummy_variable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $unused_dummy_variable = sp;
 __ZN6Crypto9PublicKeyC2Ev($unused_dummy_variable);
 __ZN6Crypto10crypto_ops21generateViewFromSpendERKNS_9SecretKeyERS1_RNS_9PublicKeyE($spend, $viewSecret, $unused_dummy_variable);
 STACKTOP = sp;
 return;
}

function _blake2b_init_state($S) {
 $S = $S | 0;
 var $arrayidx = 0, $buflen = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest = $S;
 src = 41424;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $arrayidx = $S + 64 | 0;
 $buflen = $S + 208 | 0;
 HEAP32[$buflen >> 2] = 0;
 HEAP32[$arrayidx >> 2] = 0 | 0;
 HEAP32[$arrayidx + 4 >> 2] = 0 | 0;
 HEAP32[$arrayidx + 8 >> 2] = 0 | 0;
 HEAP32[$arrayidx + 12 >> 2] = 0 | 0;
 return;
}

function __ZN6CryptoL10hash_to_ecERKNS_9PublicKeyERNS_5ge_p3E($key, $res) {
 $key = $key | 0;
 $res = $res | 0;
 var $h = 0, $point = 0, $point2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(320 | 0);
 $h = sp + 280 | 0;
 $point = sp + 160 | 0;
 $point2 = sp;
 __ZN6Crypto4HashC2Ev($h);
 __ZN6Crypto12cn_fast_hashEPKvmRNS_4HashE($key, 32, $h);
 _ge_fromfe_frombytes_vartime($point, $h);
 _ge_mul8($point2, $point);
 _ge_p1p1_to_p3($res, $point2);
 STACKTOP = sp;
 return;
}

function _cn_fast_hash($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var $state = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208 | 0);
 $state = sp;
 _hash_process($state, $data, $length);
 dest = $hash;
 src = $state;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($agg$result, $v) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 var $0 = 0, $arraydecay = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay = $v + 4 | 0;
 $0 = HEAP32[$v >> 2] | 0;
 HEAP32[$agg$result >> 2] = 0 | 0;
 HEAP32[$agg$result + 4 >> 2] = 0 | 0;
 HEAP32[$agg$result + 8 >> 2] = 0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$result, $arraydecay, $0);
 return;
}

function __ZN10emscripten8internal12MemberAccessI4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7getWireIS2_EEPNS0_11BindingTypeIS9_vEUt_ERKMS2_S9_RKT_($field, $ptr) {
 $field = $field | 0;
 $ptr = $ptr | 0;
 var $0 = 0, $call = 0, $memptr$offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$field >> 2] | 0;
 $memptr$offset = $ptr + $0 | 0;
 $call = __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE10toWireTypeERKS8_($memptr$offset) | 0;
 return $call | 0;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEEC2Em($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $__end_$i = 0, $__value_$i$i$i = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0;
 $__end_$i = $this + 4 | 0;
 HEAP32[$__end_$i >> 2] = 0;
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = 0;
 $cmp = ($__n | 0) == 0;
 if ($cmp) {
  return;
 }
 __ZNSt3__26vectorIhNS_9allocatorIhEEE11__vallocateEm($this, $__n);
 __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endEm($this, $__n);
 return;
}

function __ZNSt3__25tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS2_EEEEPFvNS_6vectorIhNS_9allocatorIhEEEEmijRNS_6atomicIbEERjjES9_miiNS_17reference_wrapperISB_EENSG_IjEEmEED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8EEEEJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS4_EEEEPFvNS_6vectorIhNS_9allocatorIhEEEEmijRNS_6atomicIbEERjjESB_miiNS_17reference_wrapperISD_EENSI_IjEEmEED2Ev($this);
 return;
}

function __ZN6CryptoL13random_scalarERNS_19EllipticCurveScalarE($res) {
 $res = $res | 0;
 var $tmp = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $tmp = sp;
 __ZN6Random11randomBytesEmPh($tmp);
 _sc_reduce($tmp);
 dest = $res;
 src = $tmp;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _load_3($in$val, $in$1$val, $in$2$val) {
 $in$val = $in$val | 0;
 $in$1$val = $in$1$val | 0;
 $in$2$val = $in$2$val | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $in$val & 255;
 $1 = $in$1$val & 255;
 $2 = _bitshift64Shl($1 | 0, 0, 8) | 0;
 $3 = getTempRet0() | 0;
 $4 = $2 | $0;
 $5 = $in$2$val & 255;
 $6 = _bitshift64Shl($5 | 0, 0, 16) | 0;
 $7 = getTempRet0() | 0;
 $8 = $4 | $6;
 $9 = $3 | $7;
 setTempRet0($9 | 0);
 return $8 | 0;
}

function _fwrite($src, $size, $nmemb, $f) {
 $src = $src | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $0 = 0, $call1 = 0, $cmp5 = 0, $cond9 = 0, $div = 0, $lock = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = Math_imul($nmemb, $size) | 0;
 $lock = $f + 76 | 0;
 $0 = HEAP32[$lock >> 2] | 0;
 $call1 = ___fwritex($src, $mul, $f) | 0;
 $cmp5 = ($call1 | 0) == ($mul | 0);
 if ($cmp5) {
  $cond9 = $nmemb;
 } else {
  $div = ($call1 >>> 0) / ($size >>> 0) & -1;
  $cond9 = $div;
 }
 return $cond9 | 0;
}

function _close($fd) {
 $fd = $fd | 0;
 var $call = 0, $call1 = 0, $cmp = 0, $spec$store$select = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $vararg_buffer = sp;
 $call = _dummy_282($fd) | 0;
 HEAP32[$vararg_buffer >> 2] = $call;
 $call1 = ___syscall6(6, $vararg_buffer | 0) | 0;
 $cmp = ($call1 | 0) == -4;
 $spec$store$select = $cmp ? 0 : $call1;
 ___syscall_ret($spec$store$select) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__225__independent_bits_engineINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEjEclEv($this) {
 $this = $this | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZNSt3__225__independent_bits_engineINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEjE6__evalENS_17integral_constantIbLb0EEE($this) | 0;
 return $call | 0;
}

function ___stdio_close($f) {
 $f = $f | 0;
 var $0 = 0, $call = 0, $call1 = 0, $call2 = 0, $fd = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $vararg_buffer = sp;
 $fd = $f + 60 | 0;
 $0 = HEAP32[$fd >> 2] | 0;
 $call = _dummy_282($0) | 0;
 HEAP32[$vararg_buffer >> 2] = $call;
 $call1 = ___syscall6(6, $vararg_buffer | 0) | 0;
 $call2 = ___syscall_ret($call1) | 0;
 STACKTOP = sp;
 return $call2 | 0;
}

function __ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvmRKS9_EEEPT_RKSG_($t) {
 $t = $t | 0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __Znwm(8) | 0;
 $$unpack = HEAP32[$t >> 2] | 0;
 $$elt1 = $t + 4 | 0;
 $$unpack2 = HEAP32[$$elt1 >> 2] | 0;
 HEAP32[$call >> 2] = $$unpack;
 $$repack4 = $call + 4 | 0;
 HEAP32[$$repack4 >> 2] = $$unpack2;
 return $call | 0;
}

function __ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EEEPT_RKSG_($t) {
 $t = $t | 0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __Znwm(8) | 0;
 $$unpack = HEAP32[$t >> 2] | 0;
 $$elt1 = $t + 4 | 0;
 $$unpack2 = HEAP32[$$elt1 >> 2] | 0;
 HEAP32[$call >> 2] = $$unpack;
 $$repack4 = $call + 4 | 0;
 HEAP32[$$repack4 >> 2] = $$unpack2;
 return $call | 0;
}

function _oaes_free($ctx) {
 $ctx = $ctx | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $cmp = 0, $cmp1 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($ctx | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $0 = HEAP32[$ctx >> 2] | 0;
 $cmp1 = ($0 | 0) == (0 | 0);
 if ($cmp1) {
  return;
 }
 $1 = HEAP32[$0 >> 2] | 0;
 $tobool = ($1 | 0) == (0 | 0);
 if ($tobool) {
  $2 = $0;
 } else {
  _oaes_key_destroy($0);
  $$pre = HEAP32[$ctx >> 2] | 0;
  $2 = $$pre;
 }
 _free($2);
 HEAP32[$ctx >> 2] = 0;
 return;
}

function _oaes_word_rot_left($word) {
 $word = $word | 0;
 var $0 = 0, $_temp$sroa$0$0$add$ptr$sroa_raw_idx = 0, $_temp$sroa$2$0$$sroa_raw_idx = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($word | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $_temp$sroa$0$0$add$ptr$sroa_raw_idx = $word + 1 | 0;
 $0 = HEAP8[$word >> 0] | 0;
 _memmove($word | 0, $_temp$sroa$0$0$add$ptr$sroa_raw_idx | 0, 3) | 0;
 $_temp$sroa$2$0$$sroa_raw_idx = $word + 3 | 0;
 HEAP8[$_temp$sroa$2$0$$sroa_raw_idx >> 0] = $0;
 return;
}

function __ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFmvEEEPT_RKSE_($t) {
 $t = $t | 0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __Znwm(8) | 0;
 $$unpack = HEAP32[$t >> 2] | 0;
 $$elt1 = $t + 4 | 0;
 $$unpack2 = HEAP32[$$elt1 >> 2] | 0;
 HEAP32[$call >> 2] = $$unpack;
 $$repack4 = $call + 4 | 0;
 HEAP32[$$repack4 >> 2] = $$unpack2;
 return $call | 0;
}

function __ZN6Common10podFromHexIN6Crypto19EllipticCurveScalarEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($text, $val) {
 $text = $text | 0;
 $val = $val | 0;
 var $outSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $outSize = sp;
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($text, $val, 32, 0, $outSize) | 0;
 STACKTOP = sp;
 return;
}

function __ZN6Common7fromHexEc($character) {
 $character = $character | 0;
 var $0 = 0, $arrayidx = 0, $cmp = 0, $exception = 0, $idxprom = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $idxprom = $character & 255;
 $arrayidx = 32880 + $idxprom | 0;
 $0 = HEAP8[$arrayidx >> 0] | 0;
 $cmp = ($0 & 255) > 15;
 if ($cmp) {
  $exception = ___cxa_allocate_exception(8) | 0;
  __ZNSt13runtime_errorC2EPKc($exception, 46123);
  ___cxa_throw($exception | 0, 42656 | 0, 26 | 0);
 } else {
  return $0 | 0;
 }
 return 0 | 0;
}

function __ZN6Common10podFromHexIN6Crypto13KeyDerivationEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($text, $val) {
 $text = $text | 0;
 $val = $val | 0;
 var $outSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $outSize = sp;
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($text, $val, 32, 0, $outSize) | 0;
 STACKTOP = sp;
 return;
}

function __ZN6Crypto10crypto_ops17derive_secret_keyERKNS_19EllipticCurveScalarERKNS_9SecretKeyERS4_($derivationScalar, $base, $derived_key) {
 $derivationScalar = $derivationScalar | 0;
 $base = $base | 0;
 $derived_key = $derived_key | 0;
 var $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _sc_check($base) | 0;
 $cmp = ($call | 0) == 0;
 if ($cmp) {
  _sc_add($derived_key, $base, $derivationScalar);
  return;
 } else {
  ___assert_fail(45473 | 0, 45326 | 0, 269, 45535 | 0);
 }
}

function __ZN6Common10podFromHexIN6Crypto9SignatureEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($text, $val) {
 $text = $text | 0;
 $val = $val | 0;
 var $outSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $outSize = sp;
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($text, $val, 64, 0, $outSize) | 0;
 STACKTOP = sp;
 return;
}

function __ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($text, $val) {
 $text = $text | 0;
 $val = $val | 0;
 var $outSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $outSize = sp;
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($text, $val, 32, 0, $outSize) | 0;
 STACKTOP = sp;
 return;
}

function __ZN6Common10podFromHexIN6Crypto9PublicKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($text, $val) {
 $text = $text | 0;
 $val = $val | 0;
 var $outSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $outSize = sp;
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($text, $val, 32, 0, $outSize) | 0;
 STACKTOP = sp;
 return;
}

function __ZN6Common10podFromHexIN6Crypto8KeyImageEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($text, $val) {
 $text = $text | 0;
 $val = $val | 0;
 var $outSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $outSize = sp;
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($text, $val, 32, 0, $outSize) | 0;
 STACKTOP = sp;
 return;
}

function __ZN6Crypto10crypto_ops13scalarmultKeyERKNS_8KeyImageES3_($agg$result, $P, $a) {
 $agg$result = $agg$result | 0;
 $P = $P | 0;
 $a = $a | 0;
 var $A = 0, $R = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288 | 0);
 $A = sp + 120 | 0;
 $R = sp;
 _ge_frombytes_vartime($A, $P) | 0;
 _ge_scalarmult($R, $a, $A);
 __ZN6Crypto8KeyImageC2Ev($agg$result);
 _ge_tobytes($agg$result, $R);
 STACKTOP = sp;
 return;
}

function __Z15deriveSecretKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmS5_($agg$result, $derivation, $outputIndex, $secretKey) {
 $agg$result = $agg$result | 0;
 $derivation = $derivation | 0;
 $outputIndex = $outputIndex | 0;
 $secretKey = $secretKey | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4Core12Cryptography15deriveSecretKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS9_($agg$result, $derivation, $outputIndex, 0, $secretKey);
 return;
}

function __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $__left_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__left_$i = $this + 4 | 0;
 $0 = HEAP32[$__left_$i >> 2] | 0;
 __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($0);
 return;
}

function __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $__left_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__left_$i = $this + 4 | 0;
 $0 = HEAP32[$__left_$i >> 2] | 0;
 __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($0);
 return;
}

function __ZN6Common10podFromHexIN6Crypto4HashEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($text, $val) {
 $text = $text | 0;
 $val = $val | 0;
 var $outSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $outSize = sp;
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($text, $val, 32, 0, $outSize) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__213__vector_baseINS_4pairIPNS_18condition_variableEPNS_5mutexEEENS_18__hidden_allocatorIS6_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $__end_$i$i = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if (!$cmp) {
  $1 = $0;
  $__end_$i$i = $this + 4 | 0;
  HEAP32[$__end_$i$i >> 2] = $1;
  __ZNSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE10deallocateEPS6_m($0);
 }
 return;
}

function _signum($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = _bitshift64Ashr($0 | 0, $1 | 0, 63) | 0;
 $3 = getTempRet0() | 0;
 $4 = _i64Subtract(0, 0, $0 | 0, $1 | 0) | 0;
 $5 = getTempRet0() | 0;
 $6 = _bitshift64Ashr($4 | 0, $5 | 0, 63) | 0;
 $7 = getTempRet0() | 0;
 $8 = _i64Subtract($2 | 0, $3 | 0, $6 | 0, $7 | 0) | 0;
 $9 = getTempRet0() | 0;
 setTempRet0($9 | 0);
 return $8 | 0;
}

function __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $__left_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__left_$i = $this + 4 | 0;
 $0 = HEAP32[$__left_$i >> 2] | 0;
 __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($0);
 return;
}

function __ZNSt3__224uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEiRT_() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZNSt3__224uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEiRT_RKNS1_10param_typeE() | 0;
 return $call | 0;
}

function _blake2b_init($S, $outlen) {
 $S = $S | 0;
 $outlen = $outlen | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _blake2b_init_state($S);
 $0 = $outlen | 16842752;
 $1 = $S;
 $2 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $1 + 4 | 0;
 $5 = $4;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $3 ^ $0;
 $8 = $S;
 $9 = $8;
 HEAP32[$9 >> 2] = $7;
 $10 = $8 + 4 | 0;
 $11 = $10;
 HEAP32[$11 >> 2] = $6;
 return;
}

function _ge_p1p1_to_p2($r, $p) {
 $r = $r | 0;
 $p = $p | 0;
 var $arraydecay3 = 0, $arraydecay4 = 0, $arraydecay6 = 0, $arraydecay7 = 0, $arraydecay9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay3 = $p + 120 | 0;
 _fe_mul($r, $p, $arraydecay3);
 $arraydecay4 = $r + 40 | 0;
 $arraydecay6 = $p + 40 | 0;
 $arraydecay7 = $p + 80 | 0;
 _fe_mul($arraydecay4, $arraydecay6, $arraydecay7);
 $arraydecay9 = $r + 80 | 0;
 _fe_mul($arraydecay9, $arraydecay7, $arraydecay3);
 return;
}

function __ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3setERSB_mRKS9_($v, $index, $value) {
 $v = $v | 0;
 $index = $index | 0;
 $value = $value | 0;
 var $0 = 0, $arrayidx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v >> 2] | 0;
 $arrayidx$i = $0 + ($index * 12 | 0) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($arrayidx$i, $value) | 0;
 return 1;
}

function __ZN6Crypto19underive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS3_($derivation, $output_index, $derived_key, $base) {
 $derivation = $derivation | 0;
 $output_index = $output_index | 0;
 $derived_key = $derived_key | 0;
 $base = $base | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZN6Crypto10crypto_ops19underive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS4_($derivation, $output_index, $derived_key, $base) | 0;
 return $call | 0;
}

function __ZN6Crypto17derive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS3_($derivation, $output_index, $base, $derived_key) {
 $derivation = $derivation | 0;
 $output_index = $output_index | 0;
 $base = $base | 0;
 $derived_key = $derived_key | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZN6Crypto10crypto_ops17derive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS4_($derivation, $output_index, $base, $derived_key) | 0;
 return $call | 0;
}

function __ZN10emscripten8internal7InvokerIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEE6invokeEPFSC_vE($fn) {
 $fn = $fn | 0;
 var $call = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_i[$fn & 255]() | 0;
 $call1 = __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEvE10toWireTypeESC_($call) | 0;
 return $call1 | 0;
}

function _ge_precomp_cmov($t, $u, $b) {
 $t = $t | 0;
 $u = $u | 0;
 $b = $b | 0;
 var $arraydecay3 = 0, $arraydecay5 = 0, $arraydecay7 = 0, $arraydecay9 = 0, $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv = $b & 255;
 _fe_cmov($t, $u, $conv);
 $arraydecay3 = $t + 40 | 0;
 $arraydecay5 = $u + 40 | 0;
 _fe_cmov($arraydecay3, $arraydecay5, $conv);
 $arraydecay7 = $t + 80 | 0;
 $arraydecay9 = $u + 80 | 0;
 _fe_cmov($arraydecay7, $arraydecay9, $conv);
 return;
}

function __ZNSt3__218__libcpp_refstringD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $add$i = 0, $call2 = 0, $cmp = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $call2 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1125($0) | 0;
 $count = $call2 + 8 | 0;
 $1 = HEAP32[$count >> 2] | 0;
 $add$i = $1 + -1 | 0;
 HEAP32[$count >> 2] = $add$i;
 $cmp = ($1 | 0) < 1;
 if ($cmp) {
  __ZdlPv($call2);
 }
 return;
}

function __ZN10emscripten8internal7InvokerI4KeysJEE6invokeEPFS2_vE($fn) {
 $fn = $fn | 0;
 var $call = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $ref$tmp = sp;
 FUNCTION_TABLE_vi[$fn & 255]($ref$tmp);
 $call = __ZN10emscripten8internal18GenericBindingTypeI4KeysE10toWireTypeEOS2_($ref$tmp) | 0;
 __ZN4KeysD2Ev($ref$tmp);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN10emscripten8internal20writeGenericWireTypeINS0_11BindingTypeINSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEvEUt_EEEvRPNS0_15GenericWireTypeEPT_($cursor, $wt) {
 $cursor = $cursor | 0;
 $wt = $wt | 0;
 var $0 = 0, $1 = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$cursor >> 2] | 0;
 HEAP32[$0 >> 2] = $wt;
 $1 = HEAP32[$cursor >> 2] | 0;
 $incdec$ptr = $1 + 8 | 0;
 HEAP32[$cursor >> 2] = $incdec$ptr;
 return;
}

function _blake256_hash($out, $in, $0, $1) {
 $out = $out | 0;
 $in = $in | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $S = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $S = sp;
 _blake256_init($S);
 $2 = _bitshift64Shl($0 | 0, $1 | 0, 3) | 0;
 $3 = getTempRet0() | 0;
 _blake256_update($S, $in, $2, $3);
 _blake256_final($S, $out);
 STACKTOP = sp;
 return;
}

function __Z21scalarDeriveSecretKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_($agg$result, $derivationScalar, $secretKey) {
 $agg$result = $agg$result | 0;
 $derivationScalar = $derivationScalar | 0;
 $secretKey = $secretKey | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4Core12Cryptography15deriveSecretKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_($agg$result, $derivationScalar, $secretKey);
 return;
}

function __ZN6Common7fromHexEcRh($character, $value) {
 $character = $character | 0;
 $value = $value | 0;
 var $0 = 0, $arrayidx = 0, $cmp = 0, $idxprom = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $idxprom = $character & 255;
 $arrayidx = 32880 + $idxprom | 0;
 $0 = HEAP8[$arrayidx >> 0] | 0;
 $cmp = ($0 & 255) > 15;
 if ($cmp) {
  $retval$0 = 0;
  return $retval$0 | 0;
 }
 HEAP8[$value >> 0] = $0;
 $retval$0 = 1;
 return $retval$0 | 0;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (setTempRet0((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0 | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}

function _skein_hash($data, $databitlen, $hashval) {
 $data = $data | 0;
 $databitlen = $databitlen | 0;
 $hashval = $hashval | 0;
 var $call1 = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288 | 0);
 $state = sp;
 _Init_363($state);
 $call1 = _Update_364($state, $data, $databitlen) | 0;
 _Final_365($state, $hashval);
 STACKTOP = sp;
 return $call1 | 0;
}

function __ZN6Crypto10crypto_ops13generate_keysERNS_9PublicKeyERNS_9SecretKeyE($pub, $sec) {
 $pub = $pub | 0;
 $sec = $sec | 0;
 var $point = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160 | 0);
 $point = sp;
 __ZN6CryptoL13random_scalarERNS_19EllipticCurveScalarE($sec);
 _ge_scalarmult_base($point, $sec);
 _ge_p3_tobytes($pub, $point);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal15raw_constructorI18PreparedSignaturesJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __Znwm(24) | 0;
 HEAP32[$call >> 2] = 0 | 0;
 HEAP32[$call + 4 >> 2] = 0 | 0;
 HEAP32[$call + 8 >> 2] = 0 | 0;
 HEAP32[$call + 12 >> 2] = 0 | 0;
 HEAP32[$call + 16 >> 2] = 0 | 0;
 HEAP32[$call + 20 >> 2] = 0 | 0;
 __ZN18PreparedSignaturesC2Ev($call);
 return $call | 0;
}

function __ZNSt3__213__vector_baseIPNS_17__assoc_sub_stateENS_18__hidden_allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $__end_$i$i = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if (!$cmp) {
  $1 = $0;
  $__end_$i$i = $this + 4 | 0;
  HEAP32[$__end_$i$i >> 2] = $1;
  __ZNSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE10deallocateEPS2_m($0);
 }
 return;
}

function __ZNSt3__212__tuple_leafILm0ENS_10unique_ptrINS_15__thread_structENS_14default_deleteIS2_EEEELb0EED2Ev($this) {
 $this = $this | 0;
 var $$idx$val = 0, $0 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = 0;
 $tobool$i$i = ($0 | 0) == (0 | 0);
 if ($tobool$i$i) {
  return;
 }
 $$idx$val = HEAP32[$0 >> 2] | 0;
 __ZNSt3__215__thread_structD2Ev($$idx$val);
 __ZdlPv($0);
 return;
}

function __ZN6Crypto17derive_public_keyERKNS_19EllipticCurveScalarERKNS_9PublicKeyERS3_($derivationScalar, $base, $derived_key) {
 $derivationScalar = $derivationScalar | 0;
 $base = $base | 0;
 $derived_key = $derived_key | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZN6Crypto10crypto_ops17derive_public_keyERKNS_19EllipticCurveScalarERKNS_9PublicKeyERS4_($derivationScalar, $base, $derived_key) | 0;
 return $call | 0;
}

function __ZN10emscripten8internal12operator_newINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEEEPT_DpOT0_() {
 var $__end_$i$i = 0, $__end_cap_$i$i = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __Znwm(12) | 0;
 HEAP32[$call >> 2] = 0;
 $__end_$i$i = $call + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__end_cap_$i$i = $call + 8 | 0;
 HEAP32[$__end_cap_$i$i >> 2] = 0;
 return $call | 0;
}

function __ZN6Crypto17derive_secret_keyERKNS_13KeyDerivationEmRKNS_9SecretKeyERS3_($derivation, $output_index, $base, $derived_key) {
 $derivation = $derivation | 0;
 $output_index = $output_index | 0;
 $base = $base | 0;
 $derived_key = $derived_key | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto10crypto_ops17derive_secret_keyERKNS_13KeyDerivationEmRKNS_9SecretKeyERS4_($derivation, $output_index, $base, $derived_key);
 return;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else {
  _memcpy(dest, src, num) | 0;
 }
 return dest | 0;
}

function __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEEC2ERKSC_($this) {
 $this = $this | 0;
 var $__value_$i$i = 0, $__value_$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__value_$i$i = $this + 4 | 0;
 HEAP32[$__value_$i$i >> 2] = 0;
 $__value_$i$i7 = $this + 8 | 0;
 HEAP32[$__value_$i$i7 >> 2] = 0;
 HEAP32[$this >> 2] = $__value_$i$i;
 return;
}

function __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEEC2ERKSC_($this) {
 $this = $this | 0;
 var $__value_$i$i = 0, $__value_$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__value_$i$i = $this + 4 | 0;
 HEAP32[$__value_$i$i >> 2] = 0;
 $__value_$i$i7 = $this + 8 | 0;
 HEAP32[$__value_$i$i7 >> 2] = 0;
 HEAP32[$this >> 2] = $__value_$i$i;
 return;
}

function __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEEC2ERKSC_($this) {
 $this = $this | 0;
 var $__value_$i$i = 0, $__value_$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__value_$i$i = $this + 4 | 0;
 HEAP32[$__value_$i$i >> 2] = 0;
 $__value_$i$i7 = $this + 8 | 0;
 HEAP32[$__value_$i$i7 >> 2] = 0;
 HEAP32[$this >> 2] = $__value_$i$i;
 return;
}

function _oaes_sub_byte($byte) {
 $byte = $byte | 0;
 var $0 = 0, $1 = 0, $and = 0, $arrayidx2 = 0, $cmp = 0, $conv = 0, $shr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($byte | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $0 = HEAP8[$byte >> 0] | 0;
 $conv = $0 & 255;
 $and = $conv & 15;
 $shr = $conv >>> 4;
 $arrayidx2 = (38704 + ($shr << 4) | 0) + $and | 0;
 $1 = HEAP8[$arrayidx2 >> 0] | 0;
 HEAP8[$byte >> 0] = $1;
 return;
}

function __ZNSt3__219__thread_local_dataEv() {
 var $0 = 0, $1 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[573976] | 0;
 $guard$uninitialized = $0 << 24 >> 24 == 0;
 if ($guard$uninitialized) {
  $1 = ___cxa_guard_acquire() | 0;
  $tobool = ($1 | 0) == 0;
  if (!$tobool) {
   __ZNSt3__221__thread_specific_ptrINS_15__thread_structEEC2Ev();
   ___cxa_guard_release();
  }
 }
 return;
}

function __ZN4Core3mulEyyRyS0_($0, $1, $2, $3, $low, $high) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = __ZN4Core6mul128EyyPy($0, $1, $2, $3, $high) | 0;
 $5 = getTempRet0() | 0;
 $6 = $low;
 $7 = $6;
 HEAP32[$7 >> 2] = $4;
 $8 = $6 + 4 | 0;
 $9 = $8;
 HEAP32[$9 >> 2] = $5;
 return;
}

function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE4sizeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $__end_ = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = $this + 4 | 0;
 $0 = HEAP32[$__end_ >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$sub = $0 - $1 | 0;
 $sub$ptr$div = ($sub$ptr$sub | 0) / 12 & -1;
 return $sub$ptr$div | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $__size_$i = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i >> 0] | 0;
 $tobool$i = $0 << 24 >> 24 < 0;
 if ($tobool$i) {
  $1 = HEAP32[$this >> 2] | 0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($1);
 }
 return;
}

function __ZN10emscripten8internal7InvokerIjJjEE6invokeEPFjjEj($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 var $call = 0, $call1 = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZN10emscripten8internal11BindingTypeIjvE12fromWireTypeEj($args) | 0;
 $call1 = FUNCTION_TABLE_ii[$fn & 255]($call) | 0;
 $call2 = __ZN10emscripten8internal11BindingTypeIjvE10toWireTypeERKj($call1) | 0;
 return $call2 | 0;
}

function __ZN10emscripten8internal14raw_destructorINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEvPT_($ptr) {
 $ptr = $ptr | 0;
 var $isnull = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isnull = ($ptr | 0) == (0 | 0);
 if ($isnull) {
  return;
 }
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ptr);
 __ZdlPv($ptr);
 return;
}

function __ZN10emscripten8internal15raw_constructorI4KeysJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __Znwm(24) | 0;
 HEAP32[$call >> 2] = 0 | 0;
 HEAP32[$call + 4 >> 2] = 0 | 0;
 HEAP32[$call + 8 >> 2] = 0 | 0;
 HEAP32[$call + 12 >> 2] = 0 | 0;
 HEAP32[$call + 16 >> 2] = 0 | 0;
 HEAP32[$call + 20 >> 2] = 0 | 0;
 __ZN4KeysC2Ev($call);
 return $call | 0;
}

function _secure_wipe_memory($v, $n) {
 $v = $v | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $n$addr = 0, $v$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $v$addr = $v;
 $n$addr = $n;
 $0 = HEAP32[10766] | 0;
 $1 = $v$addr;
 $2 = $n$addr;
 FUNCTION_TABLE_iiii[$0 & 255]($1, 0, $2) | 0;
 STACKTOP = sp;
 return;
}

function __ZN6Crypto23generate_key_derivationERKNS_9PublicKeyERKNS_9SecretKeyERNS_13KeyDerivationE($key1, $key2, $derivation) {
 $key1 = $key1 | 0;
 $key2 = $key2 | 0;
 $derivation = $derivation | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZN6Crypto10crypto_ops23generate_key_derivationERKNS_9PublicKeyERKNS_9SecretKeyERNS_13KeyDerivationE($key1, $key2, $derivation) | 0;
 return $call | 0;
}

function __ZNSt3__26thread4joinEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $call$i = 0, $cmp = 0, $cmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $cmp$i = ($0 | 0) == 0;
 if (!$cmp$i) {
  $1 = $0;
  $call$i = _pthread_join($1 | 0, 0 | 0) | 0;
  $cmp = ($call$i | 0) == 0;
  if ($cmp) {
   HEAP32[$this >> 2] = 0;
   return;
  }
 }
 __ZNSt3__220__throw_system_errorEiPKc();
}

function ___strdup($s) {
 $s = $s | 0;
 var $add = 0, $call = 0, $call1 = 0, $call3 = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _strlen($s) | 0;
 $add = $call + 1 | 0;
 $call1 = _malloc($add) | 0;
 $tobool = ($call1 | 0) == (0 | 0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call3 = _memcpy($call1 | 0, $s | 0, $add | 0) | 0;
  $retval$0 = $call3;
 }
 return $retval$0 | 0;
}

function __ZN6Crypto17derive_secret_keyERKNS_19EllipticCurveScalarERKNS_9SecretKeyERS3_($derivationScalar, $base, $derived_key) {
 $derivationScalar = $derivationScalar | 0;
 $base = $base | 0;
 $derived_key = $derived_key | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto10crypto_ops17derive_secret_keyERKNS_19EllipticCurveScalarERKNS_9SecretKeyERS4_($derivationScalar, $base, $derived_key);
 return;
}

function _groestl($data, $0, $1, $hashval) {
 $data = $data | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $hashval = $hashval | 0;
 var $context = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144 | 0);
 $context = sp;
 _Init_370($context);
 _Update_371($context, $data, $0, $1);
 _Final_372($context, $hashval);
 STACKTOP = sp;
 return;
}

function __ZNSt3__213__vector_baseIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $__end_$i$i = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $__end_$i$i = $this + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = $0;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0);
 return;
}

function __ZNSt3__213__vector_baseIN6Crypto9SecretKeyENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $__end_$i$i = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $__end_$i$i = $this + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = $0;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0);
 return;
}

function __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $__end_$i$i = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $__end_$i$i = $this + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = $0;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0);
 return;
}

function __ZN6Crypto18generate_signatureERKNS_4HashERKNS_9PublicKeyERKNS_9SecretKeyERNS_9SignatureE($prefix_hash, $pub, $sec, $sig) {
 $prefix_hash = $prefix_hash | 0;
 $pub = $pub | 0;
 $sec = $sec | 0;
 $sig = $sig | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto10crypto_ops18generate_signatureERKNS_4HashERKNS_9PublicKeyERKNS_9SecretKeyERNS_9SignatureE($prefix_hash, $pub, $sec, $sig);
 return;
}

function __ZNSt3__213__vector_baseIN6Crypto8KeyImageENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $__end_$i$i = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $__end_$i$i = $this + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = $0;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0);
 return;
}

function __ZN4Core4caddEyy($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = _i64Add($2 | 0, $3 | 0, $0 | 0, $1 | 0) | 0;
 $5 = getTempRet0() | 0;
 $6 = $5 >>> 0 < $1 >>> 0;
 $7 = $4 >>> 0 < $0 >>> 0;
 $8 = ($5 | 0) == ($1 | 0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 return $10 | 0;
}

function __ZNSt3__213__vector_baseIN6Crypto4HashENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $__end_$i$i = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $__end_$i$i = $this + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = $0;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0);
 return;
}

function __ZNSt3__221__thread_specific_ptrINS_15__thread_structEE11set_pointerEPS1_($__p) {
 $__p = $__p | 0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx$i = 0, $cmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[144265] | 0;
 $arrayidx$i = $0 + 4 | 0;
 $1 = HEAP32[$arrayidx$i >> 2] | 0;
 $cmp$i = ($1 | 0) == 38177486;
 if (!$cmp$i) {
  return;
 }
 $2 = $__p;
 HEAP32[$0 >> 2] = $2;
 return;
}

function __ZN6Crypto8Multisig30calculate_multisig_private_keyERKNS_9PublicKeyERKNS_9SecretKeyE($agg$result, $pub, $sec) {
 $agg$result = $agg$result | 0;
 $pub = $pub | 0;
 $sec = $sec | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto9SecretKeyC2Ev($agg$result);
 __ZN6Crypto8Multisig30calculate_multisig_private_keyERKNS_9PublicKeyERKNS_9SecretKeyERS4_($pub, $sec, $agg$result);
 return;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (setTempRet0(HEAP32[$rem + 4 >> 2] | 0 | 0), HEAP32[$rem >> 2] | 0) | 0;
}

function _ge_p3_to_p2($r, $p) {
 $r = $r | 0;
 $p = $p | 0;
 var $arraydecay3 = 0, $arraydecay5 = 0, $arraydecay6 = 0, $arraydecay8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _fe_copy($r, $p);
 $arraydecay3 = $r + 40 | 0;
 $arraydecay5 = $p + 40 | 0;
 _fe_copy($arraydecay3, $arraydecay5);
 $arraydecay6 = $r + 80 | 0;
 $arraydecay8 = $p + 80 | 0;
 _fe_copy($arraydecay6, $arraydecay8);
 return;
}

function __ZN6Crypto20derivation_to_scalarERKNS_13KeyDerivationEmRNS_19EllipticCurveScalarE($derivation, $output_index, $res) {
 $derivation = $derivation | 0;
 $output_index = $output_index | 0;
 $res = $res | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto10crypto_ops20derivation_to_scalarERKNS_13KeyDerivationEmRNS_19EllipticCurveScalarE($derivation, $output_index, $res);
 return;
}

function __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $__end_$i$i = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $cmp = ($0 | 0) == (0 | 0);
 if ($cmp) {
  return;
 }
 $__end_$i$i = $this + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = $0;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0);
 return;
}

function _jh_hash($data, $0, $1, $hashval) {
 $data = $data | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $hashval = $hashval | 0;
 var $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224 | 0);
 $state = sp;
 _Init($state);
 _Update($state, $data, $0, $1);
 _Final($state, $hashval);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE10toWireTypeERKSB_($v) {
 $v = $v | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __Znwm(12) | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($call, $v);
 return $call | 0;
}

function __ZN6Crypto10crypto_ops9check_keyERKNS_9PublicKeyE($key) {
 $key = $key | 0;
 var $call = 0, $cmp = 0, $point = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160 | 0);
 $point = sp;
 $call = _ge_frombytes_vartime($point, $key) | 0;
 $cmp = ($call | 0) == 0;
 STACKTOP = sp;
 return $cmp | 0;
}

function __ZNSt3__23setIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEED2Ev($this);
 return;
}

function __ZNSt3__23setIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEED2Ev($this);
 return;
}

function __ZNSt3__23setIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEED2Ev($this);
 return;
}

function __ZN6Crypto15check_signatureERKNS_4HashERKNS_9PublicKeyERKNS_9SignatureE($prefix_hash, $pub, $sig) {
 $prefix_hash = $prefix_hash | 0;
 $pub = $pub | 0;
 $sig = $sig | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZN6Crypto10crypto_ops15check_signatureERKNS_4HashERKNS_9PublicKeyERKNS_9SignatureE($prefix_hash, $pub, $sig) | 0;
 return $call | 0;
}

function _argon2_thread_create($handle, $args) {
 $handle = $handle | 0;
 $args = $args | 0;
 var $call = 0, $cmp = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($handle | 0) == (0 | 0);
 if ($cmp) {
  $retval$0 = -1;
  return $retval$0 | 0;
 }
 $call = _pthread_create($handle | 0, 0 | 0, 153 | 0, $args | 0) | 0;
 $retval$0 = $call;
 return $retval$0 | 0;
}

function _hash_extra_skein($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var $call = 0, $cmp = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = $length << 3;
 $call = _skein_hash($data, $mul, $hash) | 0;
 $cmp = ($call | 0) == 0;
 if ($cmp) {
  return;
 } else {
  ___assert_fail(46334 | 0, 46353 | 0, 30, 46413 | 0);
 }
}

function __ZNSt3__217__assoc_sub_state12__make_readyEv($this) {
 $this = $this | 0;
 var $0 = 0, $__cv_ = 0, $__state_ = 0, $or = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__state_ = $this + 88 | 0;
 $0 = HEAP32[$__state_ >> 2] | 0;
 $or = $0 | 4;
 HEAP32[$__state_ >> 2] = $or;
 $__cv_ = $this + 40 | 0;
 __ZNSt3__218condition_variable10notify_allEv($__cv_);
 return;
}

function _abort_message($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $list = sp;
 HEAP32[$list >> 2] = $varargs;
 _vfprintf(42288, $format, $list) | 0;
 _fputc(42288);
 _abort();
}

function _ge_mul8($r, $t) {
 $r = $r | 0;
 $t = $t | 0;
 var $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $u = sp;
 _ge_p2_dbl($r, $t);
 _ge_p1p1_to_p2($u, $r);
 _ge_p2_dbl($r, $u);
 _ge_p1p1_to_p2($u, $r);
 _ge_p2_dbl($r, $u);
 STACKTOP = sp;
 return;
}

function ___cxa_is_pointer_type($type) {
 $type = $type | 0;
 var $0 = 0, $1 = 0, $2 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type | 0) == (0 | 0);
 if ($0) {
  $2 = 0;
 } else {
  $1 = ___dynamic_cast($type, 42704) | 0;
  $phitmp = ($1 | 0) != (0 | 0);
  $phitmp1 = $phitmp & 1;
  $2 = $phitmp1;
 }
 return $2 | 0;
}

function __ZN6Crypto21tree_hash_from_branchEPKNS_4HashEmRS1_PKvRS0_($branch, $depth, $leaf, $path, $root_hash) {
 $branch = $branch | 0;
 $depth = $depth | 0;
 $leaf = $leaf | 0;
 $path = $path | 0;
 $root_hash = $root_hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _tree_hash_from_branch($branch, $depth, $leaf, $path, $root_hash);
 return;
}

function _argon2_type2string($type) {
 $type = $type | 0;
 var $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($type | 0) {
 case 0:
  {
   $retval$0 = 46440;
   break;
  }
 case 1:
  {
   $retval$0 = 46448;
   break;
  }
 case 2:
  {
   $retval$0 = 46456;
   break;
  }
 default:
  {
   $retval$0 = 0;
  }
 }
 return $retval$0 | 0;
}

function __ZN10emscripten8internal10getContextIM18PreparedSignaturesNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEPT_RKSE_($t) {
 $t = $t | 0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __Znwm(4) | 0;
 $0 = HEAP32[$t >> 2] | 0;
 HEAP32[$call >> 2] = $0;
 return $call | 0;
}

function _fe_isnegative($f) {
 $f = $f | 0;
 var $0 = 0, $1 = 0, $and = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $s = sp;
 _fe_tobytes($s, $f);
 $0 = HEAP8[$s >> 0] | 0;
 $1 = $0 & 1;
 $and = $1 & 255;
 STACKTOP = sp;
 return $and | 0;
}

function __ZN6Crypto9SecretKeyC2EPKh($this, $input) {
 $this = $this | 0;
 $input = $input | 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest = $this;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 _memmove($this | 0, $input | 0, 32) | 0;
 return;
}

function __ZNSt3__211char_traitsIcE7compareEPKcS3_m($__s1, $__n) {
 $__s1 = $__s1 | 0;
 $__n = $__n | 0;
 var $call = 0, $cmp = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n | 0) == 0;
 if ($cmp) {
  $retval$0 = 0;
 } else {
  $call = _memcmp($__s1, 46766, $__n) | 0;
  $retval$0 = $call;
 }
 return $retval$0 | 0;
}

function __ZN18PreparedSignaturesD2Ev($this) {
 $this = $this | 0;
 var $key = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $key = $this + 12 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($key);
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($this);
 return;
}

function __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJRKNS1_6vectorIS7_NS5_IS7_EEEEEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function($name | 0, 2, 43008 | 0, 44723 | 0, 119 | 0, $fn | 0);
 return;
}

function __ZN4Core13toBinaryArrayENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($agg$result, $input) {
 $agg$result = $agg$result | 0;
 $input = $input | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($agg$result, $input);
 return;
}

function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEmEEEPT_RKSH_($t) {
 $t = $t | 0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __Znwm(4) | 0;
 $0 = HEAP32[$t >> 2] | 0;
 HEAP32[$call >> 2] = $0;
 return $call | 0;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  setTempRet0(high >> bits | 0);
  return low >>> bits | (high & ander) << 32 - bits;
 }
 setTempRet0(((high | 0) < 0 ? -1 : 0) | 0);
 return high >> bits - 32 | 0;
}

function ___cxx_global_var_init_1() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZTWN6RandomL6deviceE();
 $call = __ZNSt3__213random_deviceclEv() | 0;
 __ZNSt3__223mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EE4seedEj($call);
 return;
}

function __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEmRKS9_EEEPT_RKSH_($t) {
 $t = $t | 0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __Znwm(4) | 0;
 $0 = HEAP32[$t >> 2] | 0;
 HEAP32[$call >> 2] = $0;
 return $call | 0;
}

function _copy_block_419($dst, $src) {
 $dst = $dst | 0;
 $src = $src | 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest = $dst;
 src = $src;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function __ZN6Crypto18generate_key_imageERKNS_9PublicKeyERKNS_9SecretKeyERNS_8KeyImageE($pub, $sec, $image) {
 $pub = $pub | 0;
 $sec = $sec | 0;
 $image = $image | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto10crypto_ops18generate_key_imageERKNS_9PublicKeyERKNS_9SecretKeyERNS_8KeyImageE($pub, $sec, $image);
 return;
}

function _printf($fmt, $varargs) {
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 _vfprintf(42144, $fmt, $ap) | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this | 0;
 var $__imp_$idx = 0, $__imp_$idx$val = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__imp_$idx = $this + 4 | 0;
 $__imp_$idx$val = HEAP32[$__imp_$idx >> 2] | 0;
 $call = __ZNKSt3__218__libcpp_refstring5c_strEv($__imp_$idx$val) | 0;
 return $call | 0;
}

function __ZN6Crypto27generate_deterministic_keysERNS_9PublicKeyERNS_9SecretKeyES3_($pub, $sec, $second) {
 $pub = $pub | 0;
 $sec = $sec | 0;
 $second = $second | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto10crypto_ops27generate_deterministic_keysERNS_9PublicKeyERNS_9SecretKeyES4_($pub, $sec, $second);
 return;
}

function __ZNSt3__221__thread_specific_ptrINS_15__thread_structEEC2Ev() {
 var $0 = 0, $arrayidx1$i = 0, $call$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call$i = _malloc(8) | 0;
 HEAP32[$call$i >> 2] = 0;
 $arrayidx1$i = $call$i + 4 | 0;
 HEAP32[$arrayidx1$i >> 2] = 38177486;
 $0 = $call$i;
 HEAP32[144265] = $0;
 return;
}

function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $0 = $0 | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZL8is_equalPKSt9type_infoS1_b($this, $thrown_type, 0) | 0;
 return $call | 0;
}

function __ZNKSt11logic_error4whatEv($this) {
 $this = $this | 0;
 var $__imp_$idx = 0, $__imp_$idx$val = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__imp_$idx = $this + 4 | 0;
 $__imp_$idx$val = HEAP32[$__imp_$idx >> 2] | 0;
 $call = __ZNKSt3__218__libcpp_refstring5c_strEv($__imp_$idx$val) | 0;
 return $call | 0;
}

function __ZNSt3__219__thread_struct_impC2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0 | 0;
 HEAP32[$this + 4 >> 2] = 0 | 0;
 HEAP32[$this + 8 >> 2] = 0 | 0;
 HEAP32[$this + 12 >> 2] = 0 | 0;
 HEAP32[$this + 16 >> 2] = 0 | 0;
 HEAP32[$this + 20 >> 2] = 0 | 0;
 return;
}

function __ZN10emscripten8internal24RegisterClassConstructorIPFPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEvEE6invokeISB_JEEEvSE_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_class_constructor(42064 | 0, 1, 43028 | 0, 44997 | 0, 141 | 0, 142 | 0);
 return;
}

function __ZN10emscripten8internal10getContextIM18PreparedSignaturesNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEPT_RKSB_($t) {
 $t = $t | 0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __Znwm(4) | 0;
 $0 = HEAP32[$t >> 2] | 0;
 HEAP32[$call >> 2] = $0;
 return $call | 0;
}

function __ZSt11__terminatePFvvE($func) {
 $func = $func | 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$func & 255]();
 _abort_message(48112, $vararg_buffer);
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  setTempRet0(high << bits | (low & ander << 32 - bits) >>> 32 - bits | 0);
  return low << bits;
 }
 setTempRet0(low << bits - 32 | 0);
 return 0;
}

function __ZN18PreparedSignaturesC2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0 | 0;
 HEAP32[$this + 4 >> 2] = 0 | 0;
 HEAP32[$this + 8 >> 2] = 0 | 0;
 HEAP32[$this + 12 >> 2] = 0 | 0;
 HEAP32[$this + 16 >> 2] = 0 | 0;
 HEAP32[$this + 20 >> 2] = 0 | 0;
 return;
}

function __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_S7_EJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function($name | 0, 3, 42972 | 0, 44727 | 0, 105 | 0, $fn | 0);
 return;
}

function __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_mS7_EJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function($name | 0, 4, 208 | 0, 44949 | 0, 110 | 0, $fn | 0);
 return;
}

function _ge_cached_0($r) {
 $r = $r | 0;
 var $arraydecay1 = 0, $arraydecay2 = 0, $arraydecay3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _fe_1($r);
 $arraydecay1 = $r + 40 | 0;
 _fe_1($arraydecay1);
 $arraydecay2 = $r + 80 | 0;
 _fe_1($arraydecay2);
 $arraydecay3 = $r + 120 | 0;
 _fe_0($arraydecay3);
 return;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  setTempRet0(high >>> bits | 0);
  return low >>> bits | (high & ander) << 32 - bits;
 }
 setTempRet0(0 | 0);
 return high >>> bits - 32 | 0;
}

function __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_iEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function($name | 0, 3, 42904 | 0, 44727 | 0, 78 | 0, $fn | 0);
 return;
}

function __ZN10emscripten8functionI18PreparedSignaturesJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_NS2_6vectorIS8_NS6_IS8_EEEEiS8_EJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(43910 | 0, 6, 96 | 0, 44955 | 0, 91 | 0, 92 | 0);
 return;
}

function __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_9SecretKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _memcmp($a, $b, 32) | 0;
 $cmp = ($call | 0) > 0;
 return $cmp | 0;
}

function __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_9PublicKeyEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _memcmp($a, $b, 32) | 0;
 $cmp = ($call | 0) > 0;
 return $cmp | 0;
}

function __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function($name | 0, 2, 42896 | 0, 44723 | 0, 77 | 0, $fn | 0);
 return;
}

function __ZZN6Crypto8Multisig17dedupeAndSortKeysINS_8KeyImageEEENSt3__26vectorIT_NS3_9allocatorIS5_EEEERKS8_ENKUlS2_S2_E_clES2_S2_($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _memcmp($a, $b, 32) | 0;
 $cmp = ($call | 0) > 0;
 return $cmp | 0;
}

function __ZN4KeysD2Ev($this) {
 $this = $this | 0;
 var $secretKey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $secretKey = $this + 12 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($secretKey);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 return;
}

function _ge_p3_0($h) {
 $h = $h | 0;
 var $arraydecay1 = 0, $arraydecay2 = 0, $arraydecay3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _fe_0($h);
 $arraydecay1 = $h + 40 | 0;
 _fe_1($arraydecay1);
 $arraydecay2 = $h + 80 | 0;
 _fe_1($arraydecay2);
 $arraydecay3 = $h + 120 | 0;
 _fe_0($arraydecay3);
 return;
}

function __ZN6Crypto24secret_key_to_public_keyERKNS_9SecretKeyERNS_9PublicKeyE($sec, $pub) {
 $sec = $sec | 0;
 $pub = $pub | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZN6Crypto10crypto_ops24secret_key_to_public_keyERKNS_9SecretKeyERNS_9PublicKeyE($sec, $pub) | 0;
 return $call | 0;
}

function __ZN10emscripten8functionI18PreparedSignaturesJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_NS2_6vectorIS8_NS6_IS8_EEEEiEJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(43888 | 0, 5, 64 | 0, 44984 | 0, 89 | 0, 90 | 0);
 return;
}

function _fe_1($h) {
 $h = $h | 0;
 var $arrayidx1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 HEAP32[$h >> 2] = 1;
 $arrayidx1 = $h + 4 | 0;
 dest = $arrayidx1;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function __ZN10emscripten8internal10getContextIM4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEPT_RKSB_($t) {
 $t = $t | 0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __Znwm(4) | 0;
 $0 = HEAP32[$t >> 2] | 0;
 HEAP32[$call >> 2] = $0;
 return $call | 0;
}

function ___tls_init() {
 var $0 = 0, $guard$uninitialized = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[577065] | 0;
 $guard$uninitialized = $0 << 24 >> 24 == 0;
 if (!$guard$uninitialized) {
  return;
 }
 HEAP8[577065] = 1;
 ___cxx_global_var_init_148();
 ___cxx_global_var_init_1();
 return;
}

function _getpid() {
 var $call = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $vararg_buffer = sp;
 $call = ___syscall20(20, $vararg_buffer | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__215__thread_structD2Ev($this$0$0$val) {
 $this$0$0$val = $this$0$0$val | 0;
 var $isnull = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isnull = ($this$0$0$val | 0) == (0 | 0);
 if (!$isnull) {
  __ZNSt3__219__thread_struct_impD2Ev($this$0$0$val);
  __ZdlPv($this$0$0$val);
 }
 return;
}

function __ZN6Crypto6s_commC2Ev($this) {
 $this = $this | 0;
 var $comm = 0, $key = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto4HashC2Ev($this);
 $key = $this + 32 | 0;
 __ZN6Crypto18EllipticCurvePointC2Ev($key);
 $comm = $this + 64 | 0;
 __ZN6Crypto18EllipticCurvePointC2Ev($comm);
 return;
}

function __ZN4KeysC2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0 | 0;
 HEAP32[$this + 4 >> 2] = 0 | 0;
 HEAP32[$this + 8 >> 2] = 0 | 0;
 HEAP32[$this + 12 >> 2] = 0 | 0;
 HEAP32[$this + 16 >> 2] = 0 | 0;
 HEAP32[$this + 20 >> 2] = 0 | 0;
 return;
}

function __ZN6Crypto10crypto_ops12hashToScalarEPKvmRNS_19EllipticCurveScalarE($data, $length, $res) {
 $data = $data | 0;
 $length = $length | 0;
 $res = $res | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6CryptoL14hash_to_scalarEPKvmRNS_19EllipticCurveScalarE($data, $length, $res);
 return;
}

function __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJRKS7_S9_mRKNS1_6vectorIS7_NS5_IS7_EEEEEJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(44531 | 0, 5, 272 | 0, 44984 | 0, 122 | 0, 123 | 0);
 return;
}

function __ZN10emscripten8functionINSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEJS8_mSA_iS8_SA_EJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(44547 | 0, 7, 304 | 0, 45e3 | 0, 124 | 0, 125 | 0);
 return;
}

function __ZN10emscripten8functionINSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEJRKS8_RKSA_EJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(44425 | 0, 3, 42996 | 0, 44727 | 0, 117 | 0, 118 | 0);
 return;
}

function __ZNKSt3__26__treeIN6Crypto9SecretKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE10__root_ptrEv($this) {
 $this = $this | 0;
 var $__left_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__left_ = $this + 4 | 0;
 return $__left_ | 0;
}

function __ZNKSt3__26__treeIN6Crypto9PublicKeyEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE10__root_ptrEv($this) {
 $this = $this | 0;
 var $__left_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__left_ = $this + 4 | 0;
 return $__left_ | 0;
}

function __ZN6Common8podToHexIN6Crypto19EllipticCurveScalarEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $s) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Common5toHexEPKvy($agg$result, $s, 32, 0);
 return;
}

function __ZNKSt3__26__treeIN6Crypto8KeyImageEZNS1_8Multisig17dedupeAndSortKeysIS2_EENS_6vectorIT_NS_9allocatorIS6_EEEERKS9_EUlS2_S2_E_NS7_IS2_EEE10__root_ptrEv($this) {
 $this = $this | 0;
 var $__left_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__left_ = $this + 4 | 0;
 return $__left_ | 0;
}

function __ZN10emscripten8functionINSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEJS8_S8_SA_S8_iEJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(43865 | 0, 6, 32 | 0, 44955 | 0, 87 | 0, 88 | 0);
 return;
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s | 0) == (0 | 0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call = _wcrtomb($s, $wc) | 0;
  $retval$0 = $call;
 }
 return $retval$0 | 0;
}

function __ZN10emscripten8functionIbJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEESA_EJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(43956 | 0, 5, 160 | 0, 44984 | 0, 95 | 0, 96 | 0);
 return;
}

function __ZN10emscripten8functionINSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEJS8_iS8_SA_EJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(43933 | 0, 5, 128 | 0, 44984 | 0, 93 | 0, 94 | 0);
 return;
}

function __ZN6CryptoL14hash_to_scalarEPKvmRNS_19EllipticCurveScalarE($data, $length, $res) {
 $data = $data | 0;
 $length = $length | 0;
 $res = $res | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto12cn_fast_hashEPKvmRNS_4HashE($data, $length, $res);
 _sc_reduce32($res);
 return;
}

function __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJNS1_6vectorIS7_NS5_IS7_EEEES7_S7_EJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(43843 | 0, 4, 16 | 0, 44949 | 0, 85 | 0, 86 | 0);
 return;
}

function __ZN6Common8podToHexIN6Crypto13KeyDerivationEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $s) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Common5toHexEPKvy($agg$result, $s, 32, 0);
 return;
}

function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 127](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function __ZNSt3__211char_traitsIcE4moveEPcPKcm($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n | 0) == 0;
 if (!$cmp) {
  _memmove($__s1 | 0, $__s2 | 0, $__n | 0) | 0;
 }
 return $__s1 | 0;
}

function _ge_p3_dbl($r, $p) {
 $r = $r | 0;
 $p = $p | 0;
 var $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $q = sp;
 _ge_p3_to_p2($q, $p);
 _ge_p2_dbl($r, $q);
 STACKTOP = sp;
 return;
}

function __ZNSt3__211char_traitsIcE4copyEPcPKcm($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n | 0) == 0;
 if (!$cmp) {
  _memcpy($__s1 | 0, $__s2 | 0, $__n | 0) | 0;
 }
 return $__s1 | 0;
}

function __ZN10emscripten8functionINSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEJSA_EJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(46274 | 0, 2, 42932 | 0, 44723 | 0, 83 | 0, 84 | 0);
 return;
}

function __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJNS1_6vectorIS7_NS5_IS7_EEEEEJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(46242 | 0, 2, 42924 | 0, 44723 | 0, 81 | 0, 82 | 0);
 return;
}

function __ZN6Crypto27cn_turtle_lite_slow_hash_v2EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 1, 2, 262144, 262144, 131072, 131056, 0);
 return;
}

function __ZN6Crypto27cn_turtle_lite_slow_hash_v1EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 1, 1, 262144, 262144, 131072, 131056, 0);
 return;
}

function __ZN6Crypto27cn_turtle_lite_slow_hash_v0EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 1, 0, 262144, 262144, 131072, 131056, 0);
 return;
}

function __ZN6Common8podToHexIN6Crypto9SignatureEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $s) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Common5toHexEPKvy($agg$result, $s, 64, 0);
 return;
}

function __ZN6Common8podToHexIN6Crypto9SecretKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $s) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Common5toHexEPKvy($agg$result, $s, 32, 0);
 return;
}

function __ZN6Common8podToHexIN6Crypto9PublicKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $s) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Common5toHexEPKvy($agg$result, $s, 32, 0);
 return;
}

function __ZN6Crypto12hashToScalarEPKvmRNS_19EllipticCurveScalarE($data, $len, $res) {
 $data = $data | 0;
 $len = $len | 0;
 $res = $res | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto10crypto_ops12hashToScalarEPKvmRNS_19EllipticCurveScalarE($data, $len, $res);
 return;
}

function __ZN6Common8podToHexIN6Crypto8KeyImageEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $s) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Common5toHexEPKvy($agg$result, $s, 32, 0);
 return;
}

function __ZN10emscripten8internal14raw_destructorI18PreparedSignaturesEEvPT_($ptr) {
 $ptr = $ptr | 0;
 var $isnull = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isnull = ($ptr | 0) == (0 | 0);
 if ($isnull) {
  return;
 }
 __ZN18PreparedSignaturesD2Ev($ptr);
 __ZdlPv($ptr);
 return;
}

function ___syscall_ret($r) {
 $r = $r | 0;
 var $cmp = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = $r >>> 0 > 4294963200;
 if ($cmp) {
  $sub = 0 - $r | 0;
  HEAP32[144138] = $sub;
  $retval$0 = -1;
 } else {
  $retval$0 = $r;
 }
 return $retval$0 | 0;
}

function __ZN6Crypto25cn_dark_lite_slow_hash_v2EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 1, 2, 524288, 524288, 262144, 262128, 0);
 return;
}

function __ZN6Crypto25cn_dark_lite_slow_hash_v1EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 1, 1, 524288, 524288, 262144, 262128, 0);
 return;
}

function __ZN6Crypto25cn_dark_lite_slow_hash_v0EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 1, 0, 524288, 524288, 262144, 262128, 0);
 return;
}

function __ZN6Crypto20cn_lite_slow_hash_v2EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 1, 2, 2097152, 1048576, 524288, 1048560, 0);
 return;
}

function __ZN6Crypto20cn_lite_slow_hash_v1EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 1, 1, 2097152, 1048576, 524288, 1048560, 0);
 return;
}

function __ZN6Crypto20cn_lite_slow_hash_v0EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 1, 0, 2097152, 1048576, 524288, 1048560, 0);
 return;
}

function _equal($b, $c) {
 $b = $b | 0;
 $c = $c | 0;
 var $conv3 = 0, $conv4 = 0, $shr = 0, $sub = 0, $xor3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $xor3 = $c ^ $b;
 $conv3 = $xor3 & 255;
 $sub = $conv3 + -1 | 0;
 $shr = $sub >>> 31;
 $conv4 = $shr & 255;
 return $conv4 | 0;
}

function __ZN6Crypto22cn_turtle_slow_hash_v2EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 0, 2, 262144, 262144, 131072, 262128, 0);
 return;
}

function __ZN6Crypto22cn_turtle_slow_hash_v1EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 0, 1, 262144, 262144, 131072, 262128, 0);
 return;
}

function __ZN6Crypto22cn_turtle_slow_hash_v0EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 0, 0, 262144, 262144, 131072, 262128, 0);
 return;
}

function __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($agg$result, $s) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Common5toHexEPKvy($agg$result, $s, 32, 0);
 return;
}

function _load64_484($src) {
 $src = $src | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $src;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 setTempRet0($5 | 0);
 return $2 | 0;
}

function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 FUNCTION_TABLE_viiiiiii[index & 255](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0);
}

function __ZN6Crypto20cn_dark_slow_hash_v2EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 0, 2, 524288, 524288, 262144, 524272, 0);
 return;
}

function __ZN6Crypto20cn_dark_slow_hash_v1EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 0, 1, 524288, 524288, 262144, 524272, 0);
 return;
}

function __ZN6Crypto20cn_dark_slow_hash_v0EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 0, 0, 524288, 524288, 262144, 524272, 0);
 return;
}

function __ZN6Crypto19EllipticCurveScalarC2Ev($this) {
 $this = $this | 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest = $this;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function __ZN6Crypto15cn_slow_hash_v2EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 0, 2, 2097152, 2097152, 1048576, 2097136, 0);
 return;
}

function __ZN6Crypto15cn_slow_hash_v1EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 0, 1, 2097152, 2097152, 1048576, 2097136, 0);
 return;
}

function __ZN6Crypto15cn_slow_hash_v0EPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 0, 0, 2097152, 2097152, 1048576, 2097136, 0);
 return;
}

function __ZN6Crypto18EllipticCurvePointC2Ev($this) {
 $this = $this | 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest = $this;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function _load64($src) {
 $src = $src | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $src;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 setTempRet0($5 | 0);
 return $2 | 0;
}

function _out($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $0 = 0, $and = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f >> 2] | 0;
 $and = $0 & 32;
 $tobool = ($and | 0) == 0;
 if ($tobool) {
  ___fwritex($s, $l, $f) | 0;
 }
 return;
}

function _fputs($s) {
 $s = $s | 0;
 var $call = 0, $call1 = 0, $cmp = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _strlen($s) | 0;
 $call1 = _fwrite($s, 1, $call, 42144) | 0;
 $cmp = ($call1 | 0) != ($call | 0);
 $sub = $cmp << 31 >> 31;
 return $sub | 0;
}

function __ZL28demangling_terminate_handlerv() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $vararg_buffer = sp;
 _abort_message(47970, $vararg_buffer);
}

function __ZN6Crypto13KeyDerivationC2Ev($this) {
 $this = $this | 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest = $this;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJRKS7_S9_EJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(44505 | 0, 3, 43016 | 0, 44727 | 0, 120 | 0, 121 | 0);
 return;
}

function __ZN6Crypto13scalarmultKeyERKNS_8KeyImageES2_($agg$result, $P, $a) {
 $agg$result = $agg$result | 0;
 $P = $P | 0;
 $a = $a | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto10crypto_ops13scalarmultKeyERKNS_8KeyImageES3_($agg$result, $P, $a);
 return;
}

function __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_S7_S7_EJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(44294 | 0, 4, 224 | 0, 44949 | 0, 111 | 0, 112 | 0);
 return;
}

function __ZN10emscripten8functionI4KeysJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEmEJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(44066 | 0, 3, 42952 | 0, 44727 | 0, 101 | 0, 102 | 0);
 return;
}

function __ZN10emscripten8functionIbJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_EJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(44312 | 0, 4, 240 | 0, 44949 | 0, 113 | 0, 114 | 0);
 return;
}

function __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_S7_mEJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(44153 | 0, 4, 192 | 0, 44949 | 0, 106 | 0, 107 | 0);
 return;
}

function __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_mEJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(44181 | 0, 3, 42984 | 0, 44727 | 0, 108 | 0, 109 | 0);
 return;
}

function __ZN6Crypto9SignatureC2Ev($this) {
 $this = $this | 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest = $this;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function __ZN6Crypto9SecretKeyC2Ev($this) {
 $this = $this | 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest = $this;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function __ZN6Crypto9PublicKeyC2Ev($this) {
 $this = $this | 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest = $this;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function __ZN10emscripten8functionI4KeysJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(44017 | 0, 2, 42940 | 0, 44723 | 0, 97 | 0, 98 | 0);
 return;
}

function __ZN6Crypto8KeyImageC2Ev($this) {
 $this = $this | 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest = $this;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function ___DOUBLE_BITS_527($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = $__f;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 setTempRet0($1 | 0);
 return $0 | 0;
}

function __ZN10emscripten8functionIjJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmmEJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(44402 | 0, 4, 256 | 0, 44949 | 0, 115 | 0, 116 | 0);
 return;
}

function __ZN10emscripten8functionIbJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(44101 | 0, 2, 42964 | 0, 44723 | 0, 103 | 0, 104 | 0);
 return;
}

function _store64_491($dst, $0, $1) {
 $dst = $dst | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $dst;
 $3 = $2;
 HEAP32[$3 >> 2] = $0;
 $4 = $2 + 4 | 0;
 $5 = $4;
 HEAP32[$5 >> 2] = $1;
 return;
}

function __ZNSt13runtime_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 43192;
 $__imp_ = $this + 4 | 0;
 __ZNSt3__218__libcpp_refstringC2EPKc($__imp_, $msg);
 return;
}

function __Znwm($size) {
 $size = $size | 0;
 var $call1 = 0, $cmp = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($size | 0) == 0;
 $spec$store$select = $cmp ? 1 : $size;
 $call1 = _malloc($spec$store$select) | 0;
 return $call1 | 0;
}

function __ZN6Crypto6cn_upxEPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_slow_hash($data, $length, $hash, 2, 2, 131072, 131072, 32768, 131056, 0);
 return;
}

function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 127](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function __ZN6Crypto4HashC2Ev($this) {
 $this = $this | 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest = $this;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function _store64($dst, $0, $1) {
 $dst = $dst | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $dst;
 $3 = $2;
 HEAP32[$3 >> 2] = $0;
 $4 = $2 + 4 | 0;
 $5 = $4;
 HEAP32[$5 >> 2] = $1;
 return;
}

function __ZN10emscripten8internal18GenericBindingTypeI18PreparedSignaturesE10toWireTypeEOS2_($v) {
 $v = $v | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __Znwm(24) | 0;
 __ZN18PreparedSignaturesC2EOS_($call, $v);
 return $call | 0;
}

function __ZN10emscripten8internal14raw_destructorI4KeysEEvPT_($ptr) {
 $ptr = $ptr | 0;
 var $isnull = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isnull = ($ptr | 0) == (0 | 0);
 if ($isnull) {
  return;
 }
 __ZN4KeysD2Ev($ptr);
 __ZdlPv($ptr);
 return;
}

function __ZN6Crypto13generate_keysERNS_9PublicKeyERNS_9SecretKeyE($pub, $sec) {
 $pub = $pub | 0;
 $sec = $sec | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto10crypto_ops13generate_keysERNS_9PublicKeyERNS_9SecretKeyE($pub, $sec);
 return;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 127](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function __ZN10emscripten8internal11BindingTypeINS_3valEvE10toWireTypeERKS2_($v) {
 $v = $v | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v >> 2] | 0;
 __emval_incref($0 | 0);
 $1 = HEAP32[$v >> 2] | 0;
 return $1 | 0;
}

function _srand($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = $s + -1 | 0;
 $0 = 573968;
 $1 = $0;
 HEAP32[$1 >> 2] = $sub;
 $2 = $0 + 4 | 0;
 $3 = $2;
 HEAP32[$3 >> 2] = 0;
 return;
}

function ___getTypeName($ti) {
 $ti = $ti | 0;
 var $0 = 0, $__type_name$i = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__type_name$i = $ti + 4 | 0;
 $0 = HEAP32[$__type_name$i >> 2] | 0;
 $call1 = ___strdup($0) | 0;
 return $call1 | 0;
}

function __ZN6Crypto9tree_hashEPKNS_4HashEmRS0_($hashes, $count, $root_hash) {
 $hashes = $hashes | 0;
 $count = $count | 0;
 $root_hash = $root_hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _tree_hash($hashes, $count, $root_hash);
 return;
}

function __ZN6Crypto8Multisig9is_scalarINS_19EllipticCurveScalarEEEbRKT_($key) {
 $key = $key | 0;
 var $call = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _sc_check($key) | 0;
 $tobool = ($call | 0) == 0;
 return $tobool | 0;
}

function _ge_precomp_0($h) {
 $h = $h | 0;
 var $arraydecay1 = 0, $arraydecay2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _fe_1($h);
 $arraydecay1 = $h + 40 | 0;
 _fe_1($arraydecay1);
 $arraydecay2 = $h + 80 | 0;
 _fe_0($arraydecay2);
 return;
}

function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($p) {
 $p = $p | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return $p | 0;
}

function __ZN6Crypto11tree_branchEPKNS_4HashEmPS0_($hashes, $count, $branch) {
 $hashes = $hashes | 0;
 $count = $count | 0;
 $branch = $branch | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _tree_branch($hashes, $count, $branch);
 return;
}

function __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEvE12fromWireTypeESD_($wt) {
 $wt = $wt | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return $wt | 0;
}

function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEvE12fromWireTypeESC_($wt) {
 $wt = $wt | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return $wt | 0;
}

function _ge_p2_0($h) {
 $h = $h | 0;
 var $arraydecay1 = 0, $arraydecay2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _fe_0($h);
 $arraydecay1 = $h + 40 | 0;
 _fe_1($arraydecay1);
 $arraydecay2 = $h + 80 | 0;
 _fe_1($arraydecay2);
 return;
}

function __ZNSt11logic_errorC2EPKc($this) {
 $this = $this | 0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 43172;
 $__imp_ = $this + 4 | 0;
 __ZNSt3__218__libcpp_refstringC2EPKc($__imp_, 45921);
 return;
}

function __ZN6Crypto15hash_data_to_ecEPKhmRNS_9PublicKeyE($data, $key) {
 $data = $data | 0;
 $key = $key | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto10crypto_ops15hash_data_to_ecEPKhmRNS_9PublicKeyE($data, $key);
 return;
}

function _argon2id_hash_raw($pwd, $pwdlen, $salt, $hash) {
 $pwd = $pwd | 0;
 $pwdlen = $pwdlen | 0;
 $salt = $salt | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _argon2_hash($pwd, $pwdlen, $salt, $hash);
 return;
}

function _hash_extra_groestl($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = $length << 3;
 _groestl($data, $mul, 0, $hash);
 return;
}

function _fe_0($h) {
 $h = $h | 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest = $h;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function __ZZN6Crypto10crypto_ops20derivation_to_scalarERKNS_13KeyDerivationEmRNS_19EllipticCurveScalarEEN3__0C2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto13KeyDerivationC2Ev($this);
 return;
}

function _sc_0($s) {
 $s = $s | 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest = $s;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function ___cxa_guard_acquire() {
 var $call = 0, $conv = 0, $lnot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZN10__cxxabiv112_GLOBAL__N_114is_initializedEPj() | 0;
 $lnot = $call ^ 1;
 $conv = $lnot & 1;
 return $conv | 0;
}

function __ZNSt3__26threadD2Ev($this$0$0$val) {
 $this$0$0$val = $this$0$0$val | 0;
 var $cmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp$i = ($this$0$0$val | 0) == 0;
 if ($cmp$i) {
  return;
 } else {
  __ZSt9terminatev();
 }
}

function __ZN6Crypto8Multisig9is_scalarINS_9SecretKeyEEEbRKT_($key) {
 $key = $key | 0;
 var $call = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _sc_check($key) | 0;
 $tobool = ($call | 0) == 0;
 return $tobool | 0;
}

function __ZN6Crypto8Multisig9is_scalarINS_9PublicKeyEEEbRKT_($key) {
 $key = $key | 0;
 var $call = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _sc_check($key) | 0;
 $tobool = ($call | 0) == 0;
 return $tobool | 0;
}

function __ZN10emscripten8internal13getActualTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEPKvPT_($ptr) {
 $ptr = $ptr | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 42064 | 0;
}

function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEvE10toWireTypeESC_($p) {
 $p = $p | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return $p | 0;
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 127](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function __ZN6Crypto8Multisig9is_scalarINS_8KeyImageEEEbRKT_($key) {
 $key = $key | 0;
 var $call = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _sc_check($key) | 0;
 $tobool = ($call | 0) == 0;
 return $tobool | 0;
}

function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0);
 return ret | 0;
}

function __ZNSt3__215__thread_structC2Ev($this) {
 $this = $this | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __Znwm(24) | 0;
 __ZNSt3__219__thread_struct_impC2Ev($call);
 HEAP32[$this >> 2] = $call;
 return;
}

function _hash_extra_jh($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = $length << 3;
 _jh_hash($data, $mul, 0, $hash);
 return;
}

function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this | 0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 43192;
 $__imp_ = $this + 4 | 0;
 __ZNSt3__218__libcpp_refstringD2Ev($__imp_);
 return;
}

function __ZN6Crypto12cn_fast_hashEPKvmRNS_4HashE($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_fast_hash($data, $length, $hash);
 return;
}

function _clear_internal_memory($v, $n) {
 $v = $v | 0;
 $n = $n | 0;
 var $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool1 = ($v | 0) == (0 | 0);
 if ($tobool1) {
  return;
 }
 _secure_wipe_memory($v, $n);
 return;
}

function __ZNSt11logic_errorD2Ev($this) {
 $this = $this | 0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 43172;
 $__imp_ = $this + 4 | 0;
 __ZNSt3__218__libcpp_refstringD2Ev($__imp_);
 return;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0;
 l = a - c >>> 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (setTempRet0(h | 0), l | 0) | 0;
}

function __ZN10emscripten8internal18GenericBindingTypeI4KeysE10toWireTypeEOS2_($v) {
 $v = $v | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __Znwm(24) | 0;
 __ZN4KeysC2EOS_($call, $v);
 return $call | 0;
}

function __ZNSt3__26thread20hardware_concurrencyEv() {
 var $$call = 0, $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _sysconf(84) | 0;
 $0 = ($call | 0) > 0;
 $$call = $0 ? $call : 0;
 return $$call | 0;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 127](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function __ZNSt3__212__tuple_leafILm2ENS_6vectorIhNS_9allocatorIhEEEELb0EED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($this);
 return;
}

function __ZN10emscripten12value_objectI18PreparedSignaturesEC2EPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_value_object(42088 | 0, 44582 | 0, 45249 | 0, 135 | 0, 45216 | 0, 136 | 0);
 return;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($rep) {
 $rep = $rep | 0;
 var $add$ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr2 = $rep + 12 | 0;
 return $add$ptr2 | 0;
}

function __ZNK10emscripten8internal12WireTypePackIJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEcvPKvEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return $this | 0;
}

function __ZN6Crypto9check_keyERKNS_9PublicKeyE($key) {
 $key = $key | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZN6Crypto10crypto_ops9check_keyERKNS_9PublicKeyE($key) | 0;
 return $call | 0;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1125($data_) {
 $data_ = $data_ | 0;
 var $add$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr = $data_ + -12 | 0;
 return $add$ptr | 0;
}

function __ZN6Crypto10scReduce32ERNS_19EllipticCurveScalarE($data) {
 $data = $data | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Crypto10crypto_ops10scReduce32ERNS_19EllipticCurveScalarE($data);
 return;
}

function _hash_extra_blake($data, $length, $hash) {
 $data = $data | 0;
 $length = $length | 0;
 $hash = $hash | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _blake256_hash($hash, $data, $length, 0);
 return;
}

function __ZN6CryptoL12rs_comm_sizeEm($pubs_count) {
 $pubs_count = $pubs_count | 0;
 var $add = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = $pubs_count << 6;
 $add = $mul | 32;
 return $add | 0;
}

function __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($__ptr) {
 $__ptr = $__ptr | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217_DeallocateCaller9__do_callEPv($__ptr);
 return;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
 return $1$0 | 0;
}

function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = ___vfprintf_internal($f, $fmt, $ap) | 0;
 return $call | 0;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 255](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114is_initializedEPj() {
 var $0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[573976] | 0;
 $tobool = $0 << 24 >> 24 != 0;
 return $tobool | 0;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0;
 l = a + c >>> 0;
 h = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0;
 return (setTempRet0(h | 0), l | 0) | 0;
}

function __ZN10emscripten8functionI4KeysJEJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(44053 | 0, 1, 42948 | 0, 44997 | 0, 99 | 0, 100 | 0);
 return;
}

function __ZN10emscripten12value_objectI4KeysEC2EPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_value_object(42096 | 0, 44582 | 0, 45249 | 0, 131 | 0, 45216 | 0, 132 | 0);
 return;
}

function __ZN10emscripten3val9undefinedEv($agg$result) {
 $agg$result = $agg$result | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($agg$result);
 return;
}

function __ZNSt3__218__hidden_allocatorINS_4pairIPNS_18condition_variableEPNS_5mutexEEEE10deallocateEPS6_m($__p) {
 $__p = $__p | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($__p);
 return;
}

function __ZNSt3__211char_traitsIcE6assignERcRKc($__c1, $__c2$val) {
 $__c1 = $__c1 | 0;
 $__c2$val = $__c2$val | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$__c1 >> 0] = $__c2$val;
 return;
}

function __ZN10emscripten8functionIjJjEJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function(46263 | 0, 2, 42916 | 0, 44723 | 0, 79 | 0, 80 | 0);
 return;
}

function _isdigit($c) {
 $c = $c | 0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = $c + -48 | 0;
 $cmp = $sub >>> 0 < 10;
 $conv = $cmp & 1;
 return $conv | 0;
}

function _hash_process($state, $buf, $count) {
 $state = $state | 0;
 $buf = $buf | 0;
 $count = $count | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _keccak1600($buf, $count, $state);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_115set_initializedEPj() {
 var $0 = 0, $or = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[143494] | 0;
 $or = $0 | 1;
 HEAP32[143494] = $or;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc($name) {
 $name = $name | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view(42488 | 0, 3, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc($name) {
 $name = $name | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view(42496 | 0, 2, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc($name) {
 $name = $name | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view(42472 | 0, 5, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc($name) {
 $name = $name | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view(42480 | 0, 4, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc($name) {
 $name = $name | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view(42504 | 0, 1, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc($name) {
 $name = $name | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view(42512 | 0, 0, $name | 0);
 return;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 255](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function __ZSt18uncaught_exceptionv() {
 var $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZSt19uncaught_exceptionsv() | 0;
 $cmp = ($call | 0) > 0;
 return $cmp | 0;
}

function __ZN12_GLOBAL__N_116register_integerIlEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer(42848 | 0, 48231 | 0, 4, -2147483648, 2147483647);
 return;
}

function __ZN12_GLOBAL__N_116register_integerIiEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer(42832 | 0, 48214 | 0, 4, -2147483648, 2147483647);
 return;
}

function __ZN4Core12Cryptography10tree_depthEj($count) {
 $count = $count | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _tree_depth($count) | 0;
 return $call | 0;
}

function _argon2_thread_join($handle) {
 $handle = $handle | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _pthread_join($handle | 0, 0 | 0) | 0;
 return $call | 0;
}

function __ZN6Crypto10crypto_ops10scReduce32ERNS_19EllipticCurveScalarE($scalar) {
 $scalar = $scalar | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sc_reduce32($scalar);
 return;
}

function _Init_363($state) {
 $state = $state | 0;
 var $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$state >> 2] = 512;
 $u = $state + 8 | 0;
 _Skein_512_Init($u);
 return;
}

function _keccak1600($in, $inlen, $md) {
 $in = $in | 0;
 $inlen = $inlen | 0;
 $md = $md | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _keccak($in, $inlen, $md, 200);
 return;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 255](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function __ZNSt3__218__hidden_allocatorIPNS_17__assoc_sub_stateEE10deallocateEPS2_m($__p) {
 $__p = $__p | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($__p);
 return;
}

function __ZN12_GLOBAL__N_116register_integerIsEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer(42816 | 0, 48193 | 0, 2, -32768, 32767);
 return;
}

function b7(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(7);
 return 0;
}

function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___embind_register_native_and_builtin_types();
 return;
}

function __ZNSt3__218condition_variable10notify_allEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _pthread_cond_broadcast($this | 0) | 0;
 return;
}

function _argon2_get_impl_list($list) {
 $list = $list | 0;
 var $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $count = $list + 4 | 0;
 HEAP32[$count >> 2] = 0;
 return;
}

function __ZN10emscripten3valD2Ev($this$0$0$val) {
 $this$0$0$val = $this$0$0$val | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __emval_decref($this$0$0$val | 0);
 return;
}

function __ZNSt3__211char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _strlen($__s) | 0;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116register_integerIcEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer(42792 | 0, 48162 | 0, 1, -128, 127);
 return;
}

function __ZN12_GLOBAL__N_116register_integerIaEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer(42808 | 0, 48167 | 0, 1, -128, 127);
 return;
}

function __ZN12_GLOBAL__N_116register_integerItEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer(42824 | 0, 48199 | 0, 2, 0, 65535);
 return;
}

function _argon2_ctx($context) {
 $context = $context | 0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = _argon2_ctx_mem($context) | 0;
 return $call | 0;
}

function __ZNKSt3__218__libcpp_refstring5c_strEv($this$0$0$val) {
 $this$0$0$val = $this$0$0$val | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return $this$0$0$val | 0;
}

function __ZNSt3__213random_deviceD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 _close($0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view(42456 | 0, 5, 47104 | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view(42464 | 0, 4, 47074 | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view(42448 | 0, 6, 47342 | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view(42432 | 0, 7, 47405 | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view(42440 | 0, 7, 47373 | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view(42520 | 0, 0, 46830 | 0);
 return;
}

function __ZN12_GLOBAL__N_116register_integerIhEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer(42800 | 0, 48179 | 0, 1, 0, 255);
 return;
}

function __ZN12_GLOBAL__N_116register_integerImEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer(42856 | 0, 48236 | 0, 4, 0, -1);
 return;
}

function __ZN12_GLOBAL__N_116register_integerIjEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer(42840 | 0, 48218 | 0, 4, 0, -1);
 return;
}

function b15(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_viiiiiii(15);
}

function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 255](a1 | 0, a2 | 0, a3 | 0);
}

function __ZN10emscripten12value_objectI18PreparedSignaturesED2Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_finalize_value_object(42088 | 0);
 return;
}

function __ZNSt12length_errorD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt11logic_errorD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function _copy_block($dst, $src) {
 $dst = $dst | 0;
 $src = $src | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memcpy($dst | 0, $src | 0, 1024) | 0;
 return;
}

function _blake256_final($S, $digest) {
 $S = $S | 0;
 $digest = $digest | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _blake256_final_h($S, $digest);
 return;
}

function __ZN10emscripten8internal11BindingTypeImvE10toWireTypeERKm($v$val) {
 $v$val = $v$val | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return $v$val | 0;
}

function __ZN10emscripten8internal11BindingTypeIjvE10toWireTypeERKj($v$val) {
 $v$val = $v$val | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return $v$val | 0;
}

function ___cxa_guard_release() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[143494] = 0;
 __ZN10__cxxabiv112_GLOBAL__N_115set_initializedEPj();
 return;
}

function __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 1;
 return;
}

function ___cxx_global_var_init_558() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev();
 return;
}

function __ZN12_GLOBAL__N_114register_floatIfEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_float(42864 | 0, 48250 | 0, 4);
 return;
}

function __ZN12_GLOBAL__N_114register_floatIdEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_float(42872 | 0, 48270 | 0, 8);
 return;
}

function b6(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(6);
 return 0;
}

function __ZSt19uncaught_exceptionsv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = ___cxa_uncaught_exceptions() | 0;
 return $call | 0;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function __ZNSt3__217_DeallocateCaller9__do_callEPv($__ptr) {
 $__ptr = $__ptr | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($__ptr);
 return;
}

function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}

function __ZN10emscripten12value_objectI4KeysED2Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_finalize_value_object(42096 | 0);
 return;
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 255](a1 | 0, a2 | 0) | 0;
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}

function b14(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(14);
}

function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}

function __ZN4Core8lo_dwordEy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 setTempRet0(0 | 0);
 return $0 | 0;
}

function __ZN4Core8hi_dwordEy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 setTempRet0(0 | 0);
 return $1 | 0;
}

function __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($v) {
 $v = $v | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return $v | 0;
}

function __ZN10emscripten8internal11BindingTypeIjvE12fromWireTypeEj($v) {
 $v = $v | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return $v | 0;
}

function __ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($v) {
 $v = $v | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return $v | 0;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}

function __ZN10emscripten8internal11BindingTypeIbvE10toWireTypeEb($b) {
 $b = $b | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return $b | 0;
}

function _store32_494($dst, $w) {
 $dst = $dst | 0;
 $w = $w | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$dst >> 2] = $w;
 return;
}

function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN39EmscriptenBindingInitializer_signaturesC2Ev();
 return;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 255](a1 | 0, a2 | 0);
}

function b5(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(5);
 return 0;
}

function _store32($dst, $w) {
 $dst = $dst | 0;
 $w = $w | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$dst >> 2] = $w;
 return;
}

function _lo_dword($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 setTempRet0(0 | 0);
 return $0 | 0;
}

function _hi_dword($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 setTempRet0(0 | 0);
 return $1 | 0;
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __GLOBAL__sub_I_turtlecoin_crypto_js_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
}

function __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
}

function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
}

function b13(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(13);
}

function _negative($b) {
 $b = $b | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($b & 255) >>> 7;
 return $0 | 0;
}

function _memset__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 return _memset(p0 | 0, p1 | 0, p2 | 0) | 0;
}

function _init_block_value($b) {
 $b = $b | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memset($b | 0, 0, 1024) | 0;
 return;
}

function _hash_permutation($state) {
 $state = $state | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _keccakf($state);
 return;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __ZNKSt3__224uniform_int_distributionIiE10param_type1bEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 255;
}

function __ZNKSt3__224uniform_int_distributionIiE10param_type1aEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 255](a1 | 0) | 0;
}

function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_558();
 return;
}

function b4(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(4);
 return 0;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 255](a1 | 0);
}

function b12(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(12);
}

function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 return (x ? 31 - (Math_clz32(x ^ x - 1) | 0) | 0 : 32) | 0;
}

function __ZNSt3__220__throw_system_errorEiPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
}

function __ZTWN6RandomL6deviceE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___tls_init();
 return;
}

function __ZSt9terminatev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZSt11__terminatePFvvE(154);
}

function _dummy_282($fd) {
 $fd = $fd | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return $fd | 0;
}

function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock(576556 | 0);
 return;
}

function _argon2_select_impl() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _select_impl();
 return;
}
function globalCtors() {
 __GLOBAL__sub_I_turtlecoin_crypto_js_cpp();
 __GLOBAL__sub_I_bind_cpp();
}

function b3(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(3);
 return 0;
}

function __ZTWN6RandomL3genE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___tls_init();
 return;
}

function _argon2_thread_exit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _pthread_exit(0 | 0);
}

function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock(576556 | 0);
 return;
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 255]() | 0;
}

function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 576552 | 0;
}

function b11(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(11);
}

function _putchar() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _fputc(42144);
 return;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 255]();
}

function b2(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(2);
 return 0;
}

function b10(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(10);
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function _pthread_cond_broadcast(x) {
 x = x | 0;
 return 0;
}

function b1(p0) {
 p0 = p0 | 0;
 nullFunc_ii(1);
 return 0;
}

function b9(p0) {
 p0 = p0 | 0;
 nullFunc_vi(9);
}

function stackSave() {
 return STACKTOP | 0;
}

function b0() {
 nullFunc_i(0);
 return 0;
}

function b8() {
 nullFunc_v(8);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN10emscripten8internal15raw_constructorI4KeysJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE,b0,b0,b0,__ZN10emscripten8internal15raw_constructorI18PreparedSignaturesJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE,b0,b0,b0,b0,b0,b0,__ZN10emscripten8internal12operator_newINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEEEPT_DpOT0_,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_ii = [b1,b1,b1,b1,b1,b1,b1,___stdio_close,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNKSt11logic_error4whatEv,b1,b1,__ZNKSt13runtime_error4whatEv
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN4Core12Cryptography10tree_depthEj,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN10emscripten8internal7InvokerI4KeysJEE6invokeEPFS2_vE,b1,b1,b1,b1,__ZN4Core12Cryptography8checkKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,__ZN10emscripten8internal13getActualTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEPKvPT_,b1,b1,b1,__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE4sizeEv,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN10emscripten8internal7InvokerIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEE6invokeEPFSC_vE,b1,b1,b1,b1,b1,b1,b1
,b1,b1,__ZNSt3__214__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEEPFvNS_6vectorIhNS_9allocatorIhEEEEmijRNS_6atomicIbEERjjESA_miiNS_17reference_wrapperISC_EENSH_IjEEmEEEEEPvSL_,b1,_fill_segment_thr,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_EE6invokeEPFS8_S8_EPNS0_11BindingTypeIS8_vEUt_E,b2,__ZN10emscripten8internal7InvokerIjJjEE6invokeEPFjjEj,b2,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJNS2_6vectorIS8_NS6_IS8_EEEEEE6invokeEPFS8_SB_EPSB_,b2,__ZN10emscripten8internal7InvokerINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJSB_EE6invokeEPFSB_SB_EPSB_,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal7InvokerI4KeysJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeEPFS2_S9_EPNS0_11BindingTypeIS9_vEUt_E,b2,b2,b2,b2,b2,__ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFbS8_EPNS0_11BindingTypeIS8_vEUt_E,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJRKNS2_6vectorIS8_NS6_IS8_EEEEEE6invokeEPFS8_SD_EPSB_,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal12MemberAccessI4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7getWireIS2_EEPNS0_11BindingTypeIS9_vEUt_ERKMS2_S9_RKT_,b2,b2,b2,__ZN10emscripten8internal12MemberAccessI18PreparedSignaturesNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE7getWireIS2_EEPSC_RKMS2_SC_RKT_,b2,__ZN10emscripten8internal12MemberAccessI18PreparedSignaturesNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7getWireIS2_EEPNS0_11BindingTypeIS9_vEUt_ERKMS2_S9_RKT_,b2,b2,b2,b2,b2,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFmvEmPKSB_JEE6invokeERKSD_SF_,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iiii = [b3,b3,b3,b3,b3,_memset__wrapper,b3,b3,___stdout_write,b3,___stdio_write,b3,b3,b3,b3,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b3,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_iEE6invokeEPFS8_S8_iEPNS0_11BindingTypeIS8_vEUt_Ei,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal7InvokerI4KeysJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEmEE6invokeEPFS2_S9_mEPNS0_11BindingTypeIS9_vEUt_Em,b3,b3,b3,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_EE6invokeEPFS8_S8_S8_EPNS0_11BindingTypeIS8_vEUt_ESF_,b3,b3,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_mEE6invokeEPFS8_S8_mEPNS0_11BindingTypeIS8_vEUt_Em,b3,b3,b3,b3,b3,__ZN4Core12Cryptography14checkSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_,b3,__ZN4Core12Cryptography22generateTransactionPowENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmm,__ZN10emscripten8internal7InvokerINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJRKS9_RKSB_EE6invokeEPFSB_SD_SF_EPNS0_11BindingTypeIS9_vEUt_EPSB_,b3
,b3,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJRKS8_SA_EE6invokeEPFS8_SA_SA_EPNS0_11BindingTypeIS8_vEUt_ESH_,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEmES2_SE_JmEE6invokeEPSG_PSC_m,__ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3setERSB_mRKS9_
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,___stdio_seek,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJNS2_6vectorIS8_NS6_IS8_EEEES8_S8_EE6invokeEPFS8_SB_S8_S8_EPSB_PNS0_11BindingTypeIS8_vEUt_ESJ_,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,__ZN4Core12Cryptography18checkRingSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEESA_,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_mEE6invokeEPFS8_S8_S8_mEPNS0_11BindingTypeIS8_vEUt_ESF_m,b4,b4,b4,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_mS8_EE6invokeEPFS8_S8_mS8_EPNS0_11BindingTypeIS8_vEUt_EmSF_,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_S8_EE6invokeEPFS8_S8_S8_S8_EPNS0_11BindingTypeIS8_vEUt_ESF_SF_,b4,__ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_EE6invokeEPFbS8_S8_S8_EPNS0_11BindingTypeIS8_vEUt_ESF_SF_,b4,__ZN10emscripten8internal7InvokerIjJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEmmEE6invokeEPFjS8_mmEPNS0_11BindingTypeIS8_vEUt_Emm,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEmRKS9_EbSC_JmSE_EE6invokeEPSG_PSB_mPNS0_11BindingTypeIS9_vEUt_E,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,__ZN10emscripten8internal7InvokerI18PreparedSignaturesJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_NS3_6vectorIS9_NS7_IS9_EEEEiEE6invokeEPFS2_S9_S9_SC_iEPNS0_11BindingTypeIS9_vEUt_ESJ_PSC_i,b5,b5,b5,__ZN10emscripten8internal7InvokerINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJS9_iS9_SB_EE6invokeEPFSB_S9_iS9_SB_EPNS0_11BindingTypeIS9_vEUt_EiSI_PSB_,b5,__ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_NS2_6vectorIS8_NS6_IS8_EEEESB_EE6invokeEPFbS8_S8_SB_SB_EPNS0_11BindingTypeIS8_vEUt_ESI_PSB_SJ_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJRKS8_SA_mRKNS2_6vectorIS8_NS6_IS8_EEEEEE6invokeEPFS8_SA_SA_mSF_EPNS0_11BindingTypeIS8_vEUt_ESM_mPSD_,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10emscripten8internal7InvokerINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJS9_S9_SB_S9_iEE6invokeEPFSB_S9_S9_SB_S9_iEPNS0_11BindingTypeIS9_vEUt_ESI_PSB_SI_i,b6
,b6,b6,__ZN10emscripten8internal7InvokerI18PreparedSignaturesJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_NS3_6vectorIS9_NS7_IS9_EEEEiS9_EE6invokeEPFS2_S9_S9_SC_iS9_EPNS0_11BindingTypeIS9_vEUt_ESJ_PSC_iSJ_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,__ZN10emscripten8internal7InvokerINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJS9_mSB_iS9_SB_EE6invokeEPFSB_S9_mSB_iS9_SB_EPNS0_11BindingTypeIS9_vEUt_EmPSB_iSI_SJ_,b7,b7,b7];
var FUNCTION_TABLE_v = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,__ZL28demangling_terminate_handlerv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_vi = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b9,b9,b9,b9,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b9,b9,b9,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b9,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,b9
,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b9,__ZN10__cxxabiv119__pointer_type_infoD0Ev,b9,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__Z12generateKeysv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,__ZN10emscripten8internal14raw_destructorINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEvPT_,b9,b9,b9,b9,__ZN10emscripten8internal14raw_destructorI4KeysEEvPT_,b9,b9,b9,__ZN10emscripten8internal14raw_destructorI18PreparedSignaturesEEvPT_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,__ZNSt3__213random_deviceD2Ev,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_vii = [b10,b10,b10,b10,b10,b10,_fill_segment_default,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN4Core12Cryptography12cn_fast_hashENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography15cn_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography15cn_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography15cn_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography20cn_lite_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography20cn_lite_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography20cn_lite_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography20cn_dark_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography20cn_dark_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography20cn_dark_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography25cn_dark_lite_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography25cn_dark_lite_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography25cn_dark_lite_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography22cn_turtle_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography22cn_turtle_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography22cn_turtle_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography27cn_turtle_lite_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography27cn_turtle_lite_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography27cn_turtle_lite_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography6cn_upxENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,b10
,b10,b10,__ZN4Core12Cryptography16chukwa_slow_hashENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography41generatePrivateViewKeyFromPrivateSpendKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__Z20secretKeyToPublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b10,b10,b10,b10,b10,b10,b10,b10,__ZN4Core12Cryptography19hashToEllipticCurveENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography10scReduce32ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography12hashToScalarENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography25calculateSharedPrivateKeyERKNSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE,__ZN4Core12Cryptography24calculateSharedPublicKeyERKNSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE,b10,b10,b10,b10,b10,__ZN4Core12Cryptography9tree_hashENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE,b10,__ZN4Core12Cryptography11tree_branchENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,__Z35generateViewKeysFromPrivateSpendKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE9push_backERKS6_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viii = [b11,_hash_extra_blake,_hash_extra_groestl,_hash_extra_jh,_hash_extra_skein,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__Z26cn_soft_shell_slow_hash_v0NSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi
,__Z26cn_soft_shell_slow_hash_v1NSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi,__Z26cn_soft_shell_slow_hash_v2NSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi,b11,b11,b11,__Z21generateKeyDerivationNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_,b11,b11,__Z21scalarDerivePublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_,__Z21scalarDeriveSecretKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_,b11,__ZN4Core12Cryptography16generateKeyImageENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_,__ZN4Core12Cryptography13scalarmultKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__Z34generateDeterministicSubwalletKeysNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm,b11,b11,b11,b11,b11,b11,__Z18derivationToScalarNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEm,b11,b11,b11,b11,b11,b11,b11,b11,__ZN4Core12Cryptography28calculateMultisigPrivateKeysERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_6vectorIS7_NS5_IS7_EEEE
,b11,b11,__ZN4Core12Cryptography25generatePartialSigningKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6resizeEmRKS6_,b11,b11,b11,b11,__ZN10emscripten8internal12MemberAccessI4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7setWireIS2_EEvRKMS2_S9_RT_PNS0_11BindingTypeIS9_vEUt_E,b11,b11,b11,__ZN10emscripten8internal12MemberAccessI18PreparedSignaturesNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE7setWireIS2_EEvRKMS2_SC_RT_PSC_,b11,__ZN10emscripten8internal12MemberAccessI18PreparedSignaturesNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7setWireIS2_EEvRKMS2_S9_RT_PNS0_11BindingTypeIS9_vEUt_E,b11,b11,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EvPSB_JSD_EE6invokeERKSF_SG_PNS0_11BindingTypeIS9_vEUt_E,b11,b11,__ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getERKSB_m,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_viiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,__Z15derivePublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmS5_,__Z15deriveSecretKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmS5_,b12,b12,__Z17underivePublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmS5_,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN4Core12Cryptography21tree_hash_from_branchENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEES8_S8_,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__Z27generateKeyDerivationScalarNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_m,b12,b12,b12,b12,__ZN4Core12Cryptography17generateSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvmRKS9_EvPSB_JmSD_EE6invokeERKSF_SG_mPNS0_11BindingTypeIS9_vEUt_E,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_viiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b13,b13,b13,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,__Z21prepareRingSignaturesNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_NS_6vectorIS5_NS3_IS5_EEEEi,b13,b13,b13,__Z22completeRingSignaturesNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiS5_NS_6vectorIS5_NS3_IS5_EEEE,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,__ZN4Core12Cryptography15restoreKeyImageERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_mRKNS1_6vectorIS7_NS5_IS7_EEEE,b13,b13,b13,b13];
var FUNCTION_TABLE_viiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b14,b14,b14,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__Z22generateRingSignaturesNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_NS_6vectorIS5_NS3_IS5_EEEES5_i
,b14,b14,b14,__Z22prepareRingSignaturesKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_NS_6vectorIS5_NS3_IS5_EEEEiS5_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_viiiiiii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,__Z21restoreRingSignaturesNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmNS_6vectorIS5_NS3_IS5_EEEEiS5_S8_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,__ZN4Core28generateTransactionPowWorkerENSt3__26vectorIhNS0_9allocatorIhEEEEmijRNS0_6atomicIbEERjj,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15];

  return { __ZSt18uncaught_exceptionv: __ZSt18uncaught_exceptionv, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___embind_register_native_and_builtin_types: ___embind_register_native_and_builtin_types, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_cond_broadcast: _pthread_cond_broadcast, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, establishStackSpace: establishStackSpace, globalCtors: globalCtors, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Id, Ld, buffer), Md = Z.__ZSt18uncaught_exceptionv;
Z.__ZSt18uncaught_exceptionv = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return Md.apply(null, arguments);
};
var Nd = Z.___cxa_can_catch;
Z.___cxa_can_catch = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return Nd.apply(null, arguments);
};
var Od = Z.___cxa_is_pointer_type;
Z.___cxa_is_pointer_type = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return Od.apply(null, arguments);
};
var Pd = Z.___embind_register_native_and_builtin_types;
Z.___embind_register_native_and_builtin_types = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return Pd.apply(null, arguments);
};
var Qd = Z.___errno_location;
Z.___errno_location = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return Qd.apply(null, arguments);
};
var Sd = Z.___getTypeName;
Z.___getTypeName = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return Sd.apply(null, arguments);
};
var Td = Z.___muldi3;
Z.___muldi3 = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return Td.apply(null, arguments);
};
var Ud = Z.___udivdi3;
Z.___udivdi3 = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return Ud.apply(null, arguments);
};
var Vd = Z.___uremdi3;
Z.___uremdi3 = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return Vd.apply(null, arguments);
};
var Wd = Z._bitshift64Ashr;
Z._bitshift64Ashr = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return Wd.apply(null, arguments);
};
var Xd = Z._bitshift64Lshr;
Z._bitshift64Lshr = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return Xd.apply(null, arguments);
};
var Yd = Z._bitshift64Shl;
Z._bitshift64Shl = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return Yd.apply(null, arguments);
};
var Zd = Z._fflush;
Z._fflush = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return Zd.apply(null, arguments);
};
var $d = Z._free;
Z._free = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return $d.apply(null, arguments);
};
var ae = Z._i64Add;
Z._i64Add = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return ae.apply(null, arguments);
};
var be = Z._i64Subtract;
Z._i64Subtract = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return be.apply(null, arguments);
};
var ce = Z._malloc;
Z._malloc = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return ce.apply(null, arguments);
};
var de = Z._memmove;
Z._memmove = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return de.apply(null, arguments);
};
var ee = Z._pthread_cond_broadcast;
Z._pthread_cond_broadcast = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return ee.apply(null, arguments);
};
var fe = Z._sbrk;
Z._sbrk = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return fe.apply(null, arguments);
};
var ge = Z.establishStackSpace;
Z.establishStackSpace = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return ge.apply(null, arguments);
};
var he = Z.globalCtors;
Z.globalCtors = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return he.apply(null, arguments);
};
var ie = Z.stackAlloc;
Z.stackAlloc = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return ie.apply(null, arguments);
};
var je = Z.stackRestore;
Z.stackRestore = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return je.apply(null, arguments);
};
var ke = Z.stackSave;
Z.stackSave = function() {
  assert(G, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
  assert(!H, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  return ke.apply(null, arguments);
};
var Jd = e.__ZSt18uncaught_exceptionv = Z.__ZSt18uncaught_exceptionv;
e.___cxa_can_catch = Z.___cxa_can_catch;
e.___cxa_is_pointer_type = Z.___cxa_is_pointer_type;
e.___embind_register_native_and_builtin_types = Z.___embind_register_native_and_builtin_types;
e.___errno_location = Z.___errno_location;
var pd = e.___getTypeName = Z.___getTypeName;
e.___muldi3 = Z.___muldi3;
e.___udivdi3 = Z.___udivdi3;
e.___uremdi3 = Z.___uremdi3;
e._bitshift64Ashr = Z._bitshift64Ashr;
e._bitshift64Lshr = Z._bitshift64Lshr;
e._bitshift64Shl = Z._bitshift64Shl;
e._fflush = Z._fflush;
var X = e._free = Z._free;
e._i64Add = Z._i64Add;
e._i64Subtract = Z._i64Subtract;
var zb = e._malloc = Z._malloc;
e._memcpy = Z._memcpy;
e._memmove = Z._memmove;
e._memset = Z._memset;
e._pthread_cond_broadcast = Z._pthread_cond_broadcast;
e._sbrk = Z._sbrk;
e.establishStackSpace = Z.establishStackSpace;
var Ya = e.globalCtors = Z.globalCtors;
e.stackAlloc = Z.stackAlloc;
e.stackRestore = Z.stackRestore;
var qa = e.stackSave = Z.stackSave;
e.dynCall_i = Z.dynCall_i;
e.dynCall_ii = Z.dynCall_ii;
e.dynCall_iii = Z.dynCall_iii;
e.dynCall_iiii = Z.dynCall_iiii;
e.dynCall_iiiii = Z.dynCall_iiiii;
e.dynCall_iiiiii = Z.dynCall_iiiiii;
e.dynCall_iiiiiii = Z.dynCall_iiiiiii;
e.dynCall_iiiiiiii = Z.dynCall_iiiiiiii;
e.dynCall_v = Z.dynCall_v;
e.dynCall_vi = Z.dynCall_vi;
e.dynCall_vii = Z.dynCall_vii;
e.dynCall_viii = Z.dynCall_viii;
e.dynCall_viiii = Z.dynCall_viiii;
e.dynCall_viiiii = Z.dynCall_viiiii;
e.dynCall_viiiiii = Z.dynCall_viiiiii;
e.dynCall_viiiiiii = Z.dynCall_viiiiiii;
e.asm = Z;
Object.getOwnPropertyDescriptor(e, "intArrayFromString") || (e.intArrayFromString = function() {
  v("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "intArrayToString") || (e.intArrayToString = function() {
  v("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "ccall") || (e.ccall = function() {
  v("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "cwrap") || (e.cwrap = function() {
  v("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "setValue") || (e.setValue = function() {
  v("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "getValue") || (e.getValue = function() {
  v("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "allocate") || (e.allocate = function() {
  v("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "getMemory") || (e.getMemory = function() {
  v("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
});
Object.getOwnPropertyDescriptor(e, "AsciiToString") || (e.AsciiToString = function() {
  v("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "stringToAscii") || (e.stringToAscii = function() {
  v("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "UTF8ArrayToString") || (e.UTF8ArrayToString = function() {
  v("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "UTF8ToString") || (e.UTF8ToString = function() {
  v("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "stringToUTF8Array") || (e.stringToUTF8Array = function() {
  v("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "stringToUTF8") || (e.stringToUTF8 = function() {
  v("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "lengthBytesUTF8") || (e.lengthBytesUTF8 = function() {
  v("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "UTF16ToString") || (e.UTF16ToString = function() {
  v("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "stringToUTF16") || (e.stringToUTF16 = function() {
  v("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "lengthBytesUTF16") || (e.lengthBytesUTF16 = function() {
  v("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "UTF32ToString") || (e.UTF32ToString = function() {
  v("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "stringToUTF32") || (e.stringToUTF32 = function() {
  v("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "lengthBytesUTF32") || (e.lengthBytesUTF32 = function() {
  v("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "allocateUTF8") || (e.allocateUTF8 = function() {
  v("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "stackTrace") || (e.stackTrace = function() {
  v("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "addOnPreRun") || (e.addOnPreRun = function() {
  v("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "addOnInit") || (e.addOnInit = function() {
  v("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "addOnPreMain") || (e.addOnPreMain = function() {
  v("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "addOnExit") || (e.addOnExit = function() {
  v("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "addOnPostRun") || (e.addOnPostRun = function() {
  v("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "writeStringToMemory") || (e.writeStringToMemory = function() {
  v("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "writeArrayToMemory") || (e.writeArrayToMemory = function() {
  v("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "writeAsciiToMemory") || (e.writeAsciiToMemory = function() {
  v("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "addRunDependency") || (e.addRunDependency = function() {
  v("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
});
Object.getOwnPropertyDescriptor(e, "removeRunDependency") || (e.removeRunDependency = function() {
  v("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
});
Object.getOwnPropertyDescriptor(e, "ENV") || (e.ENV = function() {
  v("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "FS") || (e.FS = function() {
  v("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "FS_createFolder") || (e.FS_createFolder = function() {
  v("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
});
Object.getOwnPropertyDescriptor(e, "FS_createPath") || (e.FS_createPath = function() {
  v("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
});
Object.getOwnPropertyDescriptor(e, "FS_createDataFile") || (e.FS_createDataFile = function() {
  v("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
});
Object.getOwnPropertyDescriptor(e, "FS_createPreloadedFile") || (e.FS_createPreloadedFile = function() {
  v("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
});
Object.getOwnPropertyDescriptor(e, "FS_createLazyFile") || (e.FS_createLazyFile = function() {
  v("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
});
Object.getOwnPropertyDescriptor(e, "FS_createLink") || (e.FS_createLink = function() {
  v("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
});
Object.getOwnPropertyDescriptor(e, "FS_createDevice") || (e.FS_createDevice = function() {
  v("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
});
Object.getOwnPropertyDescriptor(e, "FS_unlink") || (e.FS_unlink = function() {
  v("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
});
Object.getOwnPropertyDescriptor(e, "GL") || (e.GL = function() {
  v("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "dynamicAlloc") || (e.dynamicAlloc = function() {
  v("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "warnOnce") || (e.warnOnce = function() {
  v("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "loadDynamicLibrary") || (e.loadDynamicLibrary = function() {
  v("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "loadWebAssemblyModule") || (e.loadWebAssemblyModule = function() {
  v("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "getLEB") || (e.getLEB = function() {
  v("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "getFunctionTables") || (e.getFunctionTables = function() {
  v("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "alignFunctionTables") || (e.alignFunctionTables = function() {
  v("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "registerFunctions") || (e.registerFunctions = function() {
  v("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "addFunction") || (e.addFunction = function() {
  v("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "removeFunction") || (e.removeFunction = function() {
  v("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "getFuncWrapper") || (e.getFuncWrapper = function() {
  v("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "prettyPrint") || (e.prettyPrint = function() {
  v("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "makeBigInt") || (e.makeBigInt = function() {
  v("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "dynCall") || (e.dynCall = function() {
  v("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "getCompilerSetting") || (e.getCompilerSetting = function() {
  v("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "stackSave") || (e.stackSave = function() {
  v("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "stackRestore") || (e.stackRestore = function() {
  v("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "stackAlloc") || (e.stackAlloc = function() {
  v("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "establishStackSpace") || (e.establishStackSpace = function() {
  v("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "print") || (e.print = function() {
  v("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "printErr") || (e.printErr = function() {
  v("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "getTempRet0") || (e.getTempRet0 = function() {
  v("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "setTempRet0") || (e.setTempRet0 = function() {
  v("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "callMain") || (e.callMain = function() {
  v("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "Pointer_stringify") || (e.Pointer_stringify = function() {
  v("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "writeStackCookie") || (e.writeStackCookie = function() {
  v("'writeStackCookie' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "checkStackCookie") || (e.checkStackCookie = function() {
  v("'checkStackCookie' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "abortStackOverflow") || (e.abortStackOverflow = function() {
  v("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "intArrayFromBase64") || (e.intArrayFromBase64 = function() {
  v("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "tryParseAsDataURI") || (e.tryParseAsDataURI = function() {
  v("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
});
Object.getOwnPropertyDescriptor(e, "ALLOC_NORMAL") || Object.defineProperty(e, "ALLOC_NORMAL", {get:function() {
  v("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
}});
Object.getOwnPropertyDescriptor(e, "ALLOC_STACK") || Object.defineProperty(e, "ALLOC_STACK", {get:function() {
  v("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
}});
Object.getOwnPropertyDescriptor(e, "ALLOC_DYNAMIC") || Object.defineProperty(e, "ALLOC_DYNAMIC", {get:function() {
  v("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
}});
Object.getOwnPropertyDescriptor(e, "ALLOC_NONE") || Object.defineProperty(e, "ALLOC_NONE", {get:function() {
  v("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
}});
if (w) {
  if (String.prototype.startsWith ? !w.startsWith(Va) : 0 !== w.indexOf(Va)) {
    var le = w;
    w = e.locateFile ? e.locateFile(le, q) : q + le;
  }
  if (m || fa) {
    var me = ja(w);
    y.set(me, 8);
  } else {
    Ua();
    var oa = function(a) {
      a.byteLength && (a = new Uint8Array(a));
      for (var b = 0; b < a.length; b++) {
        assert(0 === y[8 + b], "area for memory initializer should not have been touched before it's loaded");
      }
      y.set(a, 8);
      e.memoryInitializerRequest && delete e.memoryInitializerRequest.response;
      I--;
      e.monitorRunDependencies && e.monitorRunDependencies(I);
      assert(Ta["memory initializer"]);
      delete Ta["memory initializer"];
      0 == I && (null !== Ra && (clearInterval(Ra), Ra = null), Sa && (a = Sa, Sa = null, a()));
    }, ne = function() {
      ia(function() {
        throw "could not load memory initializer " + w;
      });
    }, oe = t(w);
    if (oe) {
      oa(oe.buffer);
    } else {
      if (e.memoryInitializerRequest) {
        var pe = function() {
          var a = e.memoryInitializerRequest, b = a.response;
          if (200 !== a.status && 0 !== a.status) {
            if (b = t(e.memoryInitializerRequestURL)) {
              b = b.buffer;
            } else {
              console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: " + a.status + ", retrying " + w);
              ne();
              return;
            }
          }
          oa(b);
        };
        e.memoryInitializerRequest.response ? setTimeout(pe, 0) : e.memoryInitializerRequest.addEventListener("load", pe);
      } else {
        ne();
      }
    }
  }
}
e.then = function(a) {
  if (e.calledRun) {
    a(e);
  } else {
    var b = e.onRuntimeInitialized;
    e.onRuntimeInitialized = function() {
      b && b();
      a(e);
    };
  }
  return e;
};
function ma(a) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + a + ")";
  this.status = a;
}
Sa = function qe() {
  e.calledRun || re();
  e.calledRun || (Sa = qe);
};
function re() {
  function a() {
    if (!e.calledRun && (e.calledRun = !0, !ua)) {
      Fa();
      assert(!G);
      G = !0;
      if (!e.noFSInit && !dc) {
        assert(!dc, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
        dc = !0;
        cc();
        e.stdin = e.stdin;
        e.stdout = e.stdout;
        e.stderr = e.stderr;
        e.stdin ? fc("stdin", e.stdin) : Zb("/dev/tty", "/dev/stdin");
        e.stdout ? fc("stdout", null, e.stdout) : Zb("/dev/tty", "/dev/stdout");
        e.stderr ? fc("stderr", null, e.stderr) : Zb("/dev/tty1", "/dev/stderr");
        var a = $b("/dev/stdin", "r"), c = $b("/dev/stdout", "w"), d = $b("/dev/stderr", "w");
        assert(0 === a.fd, "invalid handle for stdin (" + a.fd + ")");
        assert(1 === c.fd, "invalid handle for stdout (" + c.fd + ")");
        assert(2 === d.fd, "invalid handle for stderr (" + d.fd + ")");
      }
      Ga(Ia);
      Fa();
      Ib = !1;
      Ga(Ja);
      if (e.onRuntimeInitialized) {
        e.onRuntimeInitialized();
      }
      assert(!e._main, 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');
      Fa();
      if (e.postRun) {
        for ("function" == typeof e.postRun && (e.postRun = [e.postRun]); e.postRun.length;) {
          a = e.postRun.shift(), La.unshift(a);
        }
      }
      Ga(La);
    }
  }
  if (!(0 < I)) {
    assert(!0);
    C[1455047] = 34821223;
    C[1455046] = 2310721022;
    if (e.preRun) {
      for ("function" == typeof e.preRun && (e.preRun = [e.preRun]); e.preRun.length;) {
        Ma();
      }
    }
    Ga(Ha);
    0 < I || e.calledRun || (e.setStatus ? (e.setStatus("Running..."), setTimeout(function() {
      setTimeout(function() {
        e.setStatus("");
      }, 1);
      a();
    }, 1)) : a(), Fa());
  }
}
e.run = re;
function se() {
  var a = pa, b = x, c = !1;
  pa = x = function() {
    c = !0;
  };
  try {
    var d = e._fflush;
    d && d(0);
    ["stdout", "stderr"].forEach(function(a) {
      a = "/dev/" + a;
      try {
        var b = M(a, {W:!0});
        a = b.path;
      } catch (n) {
      }
      var d = {Ma:!1, exists:!1, error:0, name:null, path:null, object:null, Pa:!1, Ra:null, Qa:null};
      try {
        b = M(a, {parent:!0}), d.Pa = !0, d.Ra = b.path, d.Qa = b.node, d.name = kb(a), b = M(a, {W:!0}), d.exists = !0, d.path = b.path, d.object = b.node, d.name = b.node.name, d.Ma = "/" === b.path;
      } catch (n) {
        d.error = n.j;
      }
      d && (b = pb[d.object.rdev]) && b.output && b.output.length && (c = !0);
    });
  } catch (f) {
  }
  pa = a;
  x = b;
  c && ra("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.");
}
function Kd(a) {
  se();
  if (e.noExitRuntime) {
    x("exit(" + a + ") called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)");
  } else {
    if (ua = !0, Fa(), H = !0, e.onExit) {
      e.onExit(a);
    }
  }
  ba(a, new ma(a));
}
var te = [];
function v(a) {
  if (e.onAbort) {
    e.onAbort(a);
  }
  pa(a);
  x(a);
  ua = !0;
  var b = "abort(" + a + ") at " + bb();
  te && te.forEach(function(c) {
    b = c(b, a);
  });
  throw b;
}
e.abort = v;
if (e.preInit) {
  for ("function" == typeof e.preInit && (e.preInit = [e.preInit]); 0 < e.preInit.length;) {
    e.preInit.pop()();
  }
}
e.noExitRuntime = !0;
re();




  return TurtleCoinCrypto
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
      module.exports = TurtleCoinCrypto;
    else if (typeof define === 'function' && define['amd'])
      define([], function() { return TurtleCoinCrypto; });
    else if (typeof exports === 'object')
      exports["TurtleCoinCrypto"] = TurtleCoinCrypto;
    